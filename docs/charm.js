// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 39520;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_Prelude_charm_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });


memoryInitializer = "charm.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }


  function ___cxa_rethrow() {
      var ptr = EXCEPTIONS.caught.pop();
      if (!EXCEPTIONS.infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        EXCEPTIONS.caught.push(ptr)
        EXCEPTIONS.infos[ptr].rethrown = true;
      }
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
    

   


  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      Module.printErr("RUNNING SYSCALL OP " + op + "!");
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlerror() {
      // char *dlerror(void);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlerror.html
      if (DLFCN.errorMsg === null) {
        return 0;
      } else {
        if (DLFCN.error) _free(DLFCN.error);
        var msgArr = intArrayFromString(DLFCN.errorMsg);
        DLFCN.error = allocate(msgArr, 'i8', ALLOC_NORMAL);
        DLFCN.errorMsg = null;
        return DLFCN.error;
      }
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _dlopen(filename, flag) {
      abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/kripken/emscripten/wiki/Linking");
      // void *dlopen(const char *file, int mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlopen.html
      var searchpaths = [];
      if (filename === 0) {
        filename = '__self__';
      } else {
        var strfilename = Pointer_stringify(filename);
        var isValidFile = function (filename) {
          var target = FS.findObject(filename);
          return target && !target.isFolder && !target.isDevice;
        };
  
        if (isValidFile(strfilename)) {
          filename = strfilename;
        } else {
          if (ENV['LD_LIBRARY_PATH']) {
            searchpaths = ENV['LD_LIBRARY_PATH'].split(':');
          }
  
          for (var ident in searchpaths) {
            var searchfile = PATH.join2(searchpaths[ident],strfilename);
            if (isValidFile(searchfile)) {
              filename = searchfile;
              break;
            }
          }
        }
      }
  
      if (DLFCN.loadedLibNames[filename]) {
        // Already loaded; increment ref count and return.
        var handle = DLFCN.loadedLibNames[filename];
        DLFCN.loadedLibs[handle].refcount++;
        return handle;
      }
  
      if (filename === '__self__') {
        var handle = -1;
        var lib_module = Module;
      } else {
        var target = FS.findObject(filename);
        if (!target || target.isFolder || target.isDevice) {
          DLFCN.errorMsg = 'Could not find dynamic lib: ' + filename;
          return 0;
        }
        FS.forceLoadFile(target);
  
        var lib_module;
        try {
          // the shared library is a JS file, which we eval
          var lib_data = FS.readFile(filename, { encoding: 'utf8' });
          lib_module = eval(lib_data)(
            alignFunctionTables(),
            Module
          );
        } catch (e) {
          Module.printErr('Error in loading dynamic library: ' + e);
          DLFCN.errorMsg = 'Could not evaluate dynamic lib: ' + filename + '\n' + e;
          return 0;
        }
  
        // Not all browsers support Object.keys().
        var handle = 1;
        for (var key in DLFCN.loadedLibs) {
          if (DLFCN.loadedLibs.hasOwnProperty(key)) handle++;
        }
  
        // We don't care about RTLD_NOW and RTLD_LAZY.
        if (flag & 256) { // RTLD_GLOBAL
          for (var ident in lib_module) {
            if (lib_module.hasOwnProperty(ident)) {
              // When RTLD_GLOBAL is enable, the symbols defined by this shared object will be made
              // available for symbol resolution of subsequently loaded shared objects.
              //
              // We should copy the symbols (which include methods and variables) from SIDE_MODULE to MAIN_MODULE.
              //
              // Module of SIDE_MODULE has not only the symbols (which should be copied)
              // but also others (print*, asmGlobal*, FUNCTION_TABLE_**, NAMED_GLOBALS, and so on).
              //
              // When the symbol (which should be copied) is method, Module._* 's type becomes function.
              // When the symbol (which should be copied) is variable, Module._* 's type becomes number.
              //
              // Except for the symbol prefix (_), there is no difference in the symbols (which should be copied) and others.
              // So this just copies over compiled symbols (which start with _).
              if (ident[0] == '_') {
                Module[ident] = lib_module[ident];
              }
            }
          }
        }
      }
      DLFCN.loadedLibs[handle] = {
        refcount: 1,
        name: filename,
        module: lib_module
      };
      DLFCN.loadedLibNames[filename] = handle;
  
      return handle;
    }

  function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        symbol = '_' + symbol;
        if (!lib.module.hasOwnProperty(symbol)) {
          DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                 '" in dynamic lib: ' + lib.name);
          return 0;
        } else {
          var result = lib.module[symbol];
          if (typeof result === 'function') {
            // convert the exported function into a function pointer using our generic
            // JS mechanism.
            return addFunction(result);
          }
          return result;
        }
      }
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

  var _llvm_ctlz_i32=true;

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

   

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_dii = ["0", "__ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj"];
var debug_table_diii = ["0", "__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj", "__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj", "__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj", "__ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj", "0", "0", "0"];
var debug_table_i = ["0", "_dlerror", "__ZNSt3__26__clocEv", "___ctype_get_mb_cur_max", "___ctype_tolower_loc", "___ctype_toupper_loc", "___ctype_b_loc", "__ZNSt3__26locale5__imp12make_classicEv", "__ZNSt3__26locale5__imp11make_globalEv", "__ZNSt3__26locale8__globalEv", "___cxa_get_globals_fast", "0", "0", "0", "0", "0"];
var debug_table_ii = ["0", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv", "__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv", "__ZNKSt9exception4whatEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv", "___stdio_close", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv", "__ZNKSt3__219__iostream_category4nameEv", "__ZNKSt13runtime_error4whatEv", "__ZNSt3__211__stdoutbufIwE4syncEv", "__ZNSt3__211__stdoutbufIcE4syncEv", "__ZNSt3__210__stdinbufIwE9underflowEv", "__ZNSt3__210__stdinbufIwE5uflowEv", "__ZNSt3__210__stdinbufIcE9underflowEv", "__ZNSt3__210__stdinbufIcE5uflowEv", "__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv", "__ZNKSt3__220__time_get_c_storageIcE7__weeksEv", "__ZNKSt3__220__time_get_c_storageIcE8__monthsEv", "__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv", "__ZNKSt3__220__time_get_c_storageIcE3__cEv", "__ZNKSt3__220__time_get_c_storageIcE3__rEv", "__ZNKSt3__220__time_get_c_storageIcE3__xEv", "__ZNKSt3__220__time_get_c_storageIcE3__XEv", "__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv", "__ZNKSt3__220__time_get_c_storageIwE7__weeksEv", "__ZNKSt3__220__time_get_c_storageIwE8__monthsEv", "__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv", "__ZNKSt3__220__time_get_c_storageIwE3__cEv", "__ZNKSt3__220__time_get_c_storageIwE3__rEv", "__ZNKSt3__220__time_get_c_storageIwE3__xEv", "__ZNKSt3__220__time_get_c_storageIwE3__XEv", "__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv", "__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv", "__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv", "__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv", "__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv", "__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv", "__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv", "__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv", "__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv", "__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv", "__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv", "__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv", "__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv", "__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv", "__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv", "__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv", "__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv", "__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv", "__ZNKSt3__28numpunctIcE16do_decimal_pointEv", "__ZNKSt3__28numpunctIcE16do_thousands_sepEv", "__ZNKSt3__28numpunctIwE16do_decimal_pointEv", "__ZNKSt3__28numpunctIwE16do_thousands_sepEv", "__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv", "__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv", "__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv", "__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv", "__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv", "__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv", "__ZNKSt18bad_variant_access4whatEv", "__ZNKSt9bad_alloc4whatEv", "__ZNKSt11logic_error4whatEv", "__ZNKSt8bad_cast4whatEv", "__Znwj", "__ZN6Runner15getCurrentStackEv", "__ZN5Stack5isIntE13CharmFunction", "__ZN5Stack7isFloatE13CharmFunction", "__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv", "___uselocale", "_pthread_mutex_unlock", "_pthread_mutex_lock", "_pthread_cond_broadcast
var debug_table_iid = ["0", "__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe"];
var debug_table_iii = ["0", "__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi", "__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj", "__ZNSt3__211__stdoutbufIwE8overflowEj", "__ZNSt3__211__stdoutbufIcE8overflowEi", "__ZNSt3__210__stdinbufIwE9pbackfailEj", "__ZNSt3__210__stdinbufIcE9pbackfailEi", "__ZNKSt3__25ctypeIcE10do_toupperEc", "__ZNKSt3__25ctypeIcE10do_tolowerEc", "__ZNKSt3__25ctypeIcE8do_widenEc", "__ZNKSt3__25ctypeIwE10do_toupperEw", "__ZNKSt3__25ctypeIwE10do_tolowerEw", "__ZNKSt3__25ctypeIwE8do_widenEc", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_", "__ZN5Stack13isNameEqualToE13CharmFunction", "__ZN6Runner14doesStackExistE13CharmFunction", "__ZeqRK13CharmFunctionS1_", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc", "__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_", "__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_", "__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_", "__ZNKSt3__26locale9use_facetERNS0_2idE", "__ZNKSt3__26locale9has_facetERNS0_2idE", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc", "__ZN16FunctionAnalyzer11isInlinableE13CharmFunction", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc", "__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc", "__ZN6Parser17recognizeFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN6Parser11tokenToTypeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN16FunctionAnalyzer19isTailCallRecursiveE13CharmFunction", "__ZN6Parser24isLineFunctionDefinitionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN6Parser19isLineTypeSignatureENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_isxdigit_l", "_isdigit_l", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci", "___stdio_read", "___stdio_seek", "___stdout_write", "___stdio_write", "_sn_write", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi", "__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE", "__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi", "__ZNSt3__211__stdoutbufIwE6xsputnEPKwi", "__ZNSt3__211__stdoutbufIcE6xsputnEPKci", "__ZNKSt3__27collateIcE7do_hashEPKcS3_", "__ZNKSt3__27collateIwE7do_hashEPKwS3_", "__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE", "__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE", "__ZNKSt3__25ctypeIcE10do_toupperEPcPKc", "__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc", "__ZNKSt3__25ctypeIcE9do_narrowEcc", "__ZNKSt3__25ctypeIwE5do_isEtw", "__ZNKSt3__25ctypeIwE10do_toupperEPwPKw", "__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw", "__ZNKSt3__25ctypeIwE9do_narrowEwc", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj", "__ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_", "__ZN16FunctionAnalyzer8doInlineERNSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEES2_", "__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j", "__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_", "__ZN16FunctionAnalyzer13_isInlineableENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE13CharmFunction", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj", "__ZN6Parser12advanceParseERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_", "__ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji", "_do_read_230", "_wmemcpy", "___newlocale", "_vasprintf", "_wmemset", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_", "__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_", "__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj", "_wcrtomb", "_mbtowc", "_mbrlen", "_wmemmove", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc", "__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt", "__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_", "__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_", "__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueES8_E4typeENS6_IPKS1_EESA_SA_", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj", "__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z", "__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji", "__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji", "__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji", "__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji", "__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji", "__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji", "__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz", "_mbsrtowcs", "_catgets", "_mbrtowc", "__ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiiid = ["0", "__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd", "__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce", "__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd", "__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_", "__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_", "__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb", "__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl", "__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm", "__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv", "__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb", "__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl", "__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm", "__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv", "__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_", "__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j", "__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_", "__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j", "__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc", "__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc", "__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_", "__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j", "__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_", "__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j", "__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj", "_wcsnrtombs", "_mbsnrtowcs", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiiiid = ["0", "__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce", "__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe", "0"];
var debug_table_iiiiiii = ["0", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe", "__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe", "__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv", "__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx", "__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy", "__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx", "__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy", "__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm", "__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE", "__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE", "__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_", "__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiiiiii = ["0", "__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc", "__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc", "__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe", "__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE", "__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe", "__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE", "__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb", "__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiiiiiii = ["0", "__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc", "__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc", "__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_", "__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_", "__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_", "__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_", "__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_", "__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_", "__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_", "__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_", "0", "0", "0", "0", "0"];
var debug_table_iiiiiiiiiii = ["0", "__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_", "__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw", "0"];
var debug_table_iiiiiiiiiiii = ["0", "__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_", "__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_", "0"];
var debug_table_iiiiiiiiiiiii = ["0", "__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_", "__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw", "0"];
var debug_table_v = ["0", "__ZL25default_terminate_handlerv", "___cxa_rethrow", "___cxa_end_catch", "__ZSt17__throw_bad_allocv", "__ZNSt3__2L10init_weeksEv", "__ZNSt3__2L11init_monthsEv", "__ZNSt3__2L10init_am_pmEv", "__ZNSt3__2L11init_wweeksEv", "__ZNSt3__2L12init_wmonthsEv", "__ZNSt3__2L11init_wam_pmEv", "__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_", "__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev", "__ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev", "__ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev", "__ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev", "__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev", "__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev", "__ZNSt9exceptionD2Ev", "__ZNSt3__217bad_function_callD0Ev", "__ZNSt3__210__function6__baseIFvP6RunnerEED2Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__baseIFvP6RunnerP13RunnerContextEED2Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEED0Ev", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv", "__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev", "__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev", "__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev", "__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev", "__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev", "__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev", "__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev", "__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev", "__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev", "__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev", "__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev", "__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev", "__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev", "__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev", "__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev", "__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev", "__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev", "__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev", "__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev", "__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev", "__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev", "__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev", "__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev", "__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev", "__ZNSt3__28ios_baseD2Ev", "__ZNSt3__28ios_baseD0Ev", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev", "__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev", "__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev", "__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev", "__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev", "__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev", "__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev", "__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev", "__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev", "__ZNSt3__214error_categoryD2Ev", "__ZNSt3__219__iostream_categoryD0Ev", "__ZNSt3__28ios_base7failureD2Ev", "__ZNSt3__28ios_base7failureD0Ev", "__ZNSt3__211__stdoutbufIwED2Ev", "__ZNSt3__211__stdoutbufIwED0Ev", "__ZNSt3__211__stdoutbufIcED2Ev", "__ZNSt3__211__stdoutbufIcED0Ev", "__ZNSt3__210__stdinbufIwED2Ev", "__ZNSt3__210__stdinbufIwED0Ev", "__ZNSt3__210__stdinbufIcED2Ev", "__ZNSt3__210__stdinbufIcED0Ev", "__ZNSt3__27collateIcED2Ev", "__ZNSt3__27collateIcED0Ev", "__ZNSt3__26locale5facet16__on_zero_sharedEv", "__ZNSt3__27collateIwED2Ev", "__ZNSt3__27collateIwED0Ev", "__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev", "__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev", "__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev", "__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev", "__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev", "__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev", "__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev", "__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev", "__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev", "__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev", "__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev", "__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev", "__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev", "__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev", "__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev", "__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev", "__ZNSt3__210moneypunctIcLb0EED2Ev", "__ZNSt3__210moneypunctIcLb0EED0Ev", "__ZNSt3__210moneypunctIcLb1EED2Ev", "__ZNSt3__210moneypunctIcLb1EED0Ev", "__ZNSt3__210moneypunctIwLb0EED2Ev", "__ZNSt3__210moneypunctIwLb0EED0Ev", "__ZNSt3__210moneypunctIwLb1EED2Ev", "__ZNSt3__210moneypunctIwLb1EED0Ev", "__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev", "__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev", "__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev", "__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev", "__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev", "__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev", "__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev", "__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev", "__ZNSt3__28messagesIcED2Ev", "__ZNSt3__28messagesIcED0Ev", "__ZNSt3__28messagesIwED2Ev", "__ZNSt3__28messagesIwED0Ev", "__ZNSt3__26locale5facetD2Ev", "__ZNSt3__216__narrow_to_utf8ILj32EED0Ev", "__ZNSt3__217__widen_from_utf8ILj32EED0Ev", "__ZNSt3__27codecvtIwc11__mbstate_tED2Ev", "__ZNSt3__27codecvtIwc11__mbstate_tED0Ev", "__ZNSt3__26locale5__impD2Ev", "__ZNSt3__26locale5__impD0Ev", "__ZNSt3__25ctypeIcED2Ev", "__ZNSt3__25ctypeIcED0Ev", "__ZNSt3__28numpunctIcED2Ev", "__ZNSt3__28numpunctIcED0Ev", "__ZNSt3__28numpunctIwED2Ev", "__ZNSt3__28numpunctIwED0Ev", "__ZNSt3__26locale5facetD0Ev", "__ZNSt3__25ctypeIwED0Ev", "__ZNSt3__27codecvtIcc11__mbstate_tED0Ev", "__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev", "__ZNSt3__27codecvtIDic11__mbstate_tED0Ev", "__ZNSt3__212system_errorD2Ev", "__ZNSt3__212system_errorD0Ev", "__ZNSt18bad_variant_accessD0Ev", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZNSt9bad_allocD2Ev", "__ZNSt9bad_allocD0Ev", "__ZNSt11logic_errorD2Ev", "__ZNSt11logic_errorD0Ev", "__ZNSt13runtime_errorD2Ev", "__ZNSt13runtime_errorD0Ev", "__ZNSt16invalid_argumentD0Ev", "__ZNSt12length_errorD0Ev", "__ZNSt12out_of_rangeD0Ev", "__ZNSt14overflow_errorD0Ev", "__ZNSt8bad_castD2Ev", "__ZNSt8bad_castD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN6ParserC2Ev", "__ZN6RunnerC2Ev", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev", "__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv", "__ZN5Stack5zeroFEv", "__ZN19PredefinedFunctionsC2Ev", "__ZN3FFIC2Ev", "__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv", "__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE19__add_back_capacityEv", "__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE8pop_backEv", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev", "__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv", "__ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv", "__ZNSt3__26locale2id6__initEv", "__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv", "_freelocale", "__ZNSt3__212__do_nothingEPv", "__ZNSt3__221__throw_runtime_errorEPKc", "_free", "__ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "__ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv
var debug_table_vii = ["0", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE", "__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEJLj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESL_SO_", "__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEJLj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESL_SO_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE", "__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE", "__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE", "__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE", "__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE", "__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv", "__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv", "__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv", "__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv", "__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv", "__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv", "__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv", "__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv", "__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv", "__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv", "__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv", "__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv", "__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv", "__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv", "__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv", "__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv", "__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv", "__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv", "__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv", "__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv", "__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv", "__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv", "__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv", "__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv", "__ZNKSt3__28messagesIcE8do_closeEi", "__ZNKSt3__28messagesIwE8do_closeEi", "__ZNKSt3__28numpunctIcE11do_groupingEv", "__ZNKSt3__28numpunctIcE11do_truenameEv", "__ZNKSt3__28numpunctIcE12do_falsenameEv", "__ZNKSt3__28numpunctIwE11do_groupingEv", "__ZNKSt3__28numpunctIwE11do_truenameEv", "__ZNKSt3__28numpunctIwE12do_falsenameEv", "__ZNSt3__28ios_base4initEPv", "__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE", "__ZNSt3__28ios_base5clearEj", "__ZN22CInterpretationCapsule3runEPc", "__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc", "__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEEC2ERKS4_", "__ZNSt11logic_errorC2EPKc", "__ZN13CharmFunctionC2ERKS_", "__ZNSt3__26vectorI5StackNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_", "__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEEC2ERKS4_", "__ZNSt3__214__split_bufferIP13CharmFunctionRNS_9allocatorIS2_EEE9push_backEOS2_", "__ZNSt3__214__split_bufferIP13CharmFunctionRNS_9allocatorIS2_EEE10push_frontERKS2_", "__ZNSt13runtime_errorC2EPKc", "__ZNSt3__26vectorI9ReferenceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_", "__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN5Stack4pushE13CharmFunction", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj", "__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj", "__ZN5Stack3popEv", "__ZNKSt3__28ios_base6getlocEv", "__ZN6Runner18switchCurrentStackE13CharmFunction", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_", "__Z21charmFunctionToString13CharmFunction", "__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_", "__ZN16FunctionAnalyzer22addToInlineDefinitionsE13CharmFunction", "__ZN6Runner21addFunctionDefinitionE18FunctionDefinition", "__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj", "__ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEEC2ERKS4_", "__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj", "__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE6rehashEj", "__ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_", "__ZNSt3__26vectorI22CharmTypeSignatureUnitNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_", "__ZN16FunctionAnalyzer16addTypeSignatureE18CharmTypeSignature", "__ZNSt3__28ios_base16__call_callbacksENS0_5eventE", "__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw", "__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj", "__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej", "__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_", "__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_", "__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj", "__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj", "__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj", "__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj", "__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE", "__ZNSt3__218__libcpp_refstringC2EPKc", "__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "_abort_message", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE16__generic_assignIRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSV_EJLj0ELj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchEST_SW_SY_", "__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE16__generic_assignIRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSV_EJLj1ELj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchEST_SW_SY_", "__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE19__generic_constructIRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSW_EJLj0ELj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESU_SX_SZ_", "__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE19__generic_constructIRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSW_EJLj1ELj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESU_SX_SZ_", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_", "__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_", "__ZNKSt3__214error_category23default_error_conditionEi", "__ZNKSt3__219__iostream_category7messageEi", "__ZN6Parser3lexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN6Runner3runENSt3__24pairINS0_6vectorI13CharmFunctionNS0_9allocatorIS3_EEEEP16FunctionAnalyzerEENS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEE", "__ZNSt3__216allocator_traitsINS_9allocatorI13CharmFunctionEEE9__destroyIS2_EEvNS_17integral_constantIbLb1EEERS3_PT_", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_", "___cxa_throw", "__ZN3FFI6runFFIENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP6Runner", "__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_", "__ZN6Runner18addNamespacePrefixER13CharmFunctionNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE", "__ZN6Runner22handleDefinedFunctionsE13CharmFunctionP13RunnerContext", "__ZN19PredefinedFunctions18addBuiltinFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvP6RunnerEEE", "__ZN19PredefinedFunctions18addBuiltinFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvP6RunnerP13RunnerContextEEE", "__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b", "__ZN6Runner12setReferenceE13CharmFunctionS0_", "__ZN6Runner12getReferenceE13CharmFunction", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_", "__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPKS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_", "__ZN6Parser17analyzeDefinitionE13CharmFunction", "__ZN6Parser15parseDefinitionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN6Parser18parseTypeSignatureENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN6Parser20parseDefinedFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN6Parser19parseNumberFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZN6Parser12escapeStringENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE", "__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE", "__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_", "__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_", "__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_", "__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiii = ["0", "__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj", "__ZNKSt3__27collateIcE12do_transformEPKcS3_", "__ZNKSt3__27collateIwE12do_transformEPKwS3_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZN5StackC2Ey13CharmFunction", "__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j", "__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE8__appendINS_16__deque_iteratorIS1_PKS1_RS7_PKS8_iLi0EEEEEvT_SD_PNS_9enable_ifIXsr21__is_forward_iteratorISD_EE5valueEvE4typeE", "__ZN19PredefinedFunctions14functionLookupENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP6RunnerP13RunnerContext", "__ZN6Runner14runWithContextENSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEEP13RunnerContextNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEE", "__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE6insertENS_16__deque_iteratorIS1_PKS1_RS6_PKS7_iLi0EEEOS1_", "__ZN6Runner11createStackEy13CharmFunction", "__ZN3FFI13loadMutateFFIENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_", "__ZN6Parser14lexAskToInlineENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb", "__ZN6Parser19parseStringFunctionERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_", "__ZN6Parser17parseListFunctionERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_", "__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN5Stack4swapEyy", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_", "__ZN6Parser15delegateParsingERNSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEERNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEESC_b", "0"];
var debug_table_viiiiii = ["0", "__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj", "__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj", "__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj", "__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj", "__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0", "0", "0", "0", "0"];
var debug_table_viiiiiii = ["0", "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj", "__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE", "__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE", "__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE", "__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE", "0", "0"];
var debug_table_viiiiiiiiii = ["0", "__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri", "__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri", "__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri", "__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri", "0", "0", "0"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i", "__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i", "0"];
function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: diii: " + debug_table_diii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  vii: " + debug_table_vii[x] + "  iid: " + debug_table_iid[x] + "  i: " + debug_table_i[x] + "  vi: " + debug_table_vi[x] + "  iiii: " + debug_table_iiii[x] + "  viii: " + debug_table_viii[x] + "  iiiii: " + debug_table_iiiii[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: dii: " + debug_table_dii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  iid: " + debug_table_iid[x] + "  vi: " + debug_table_vi[x] + "  iiiii: " + debug_table_iiiii[x] + "  viiii: " + debug_table_viiii[x] + "  i: " + debug_table_i[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iid: " + debug_table_iid[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iid: " + debug_table_iid[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  iiii: " + debug_table_iiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiii: " + debug_table_iiiii[x] + "  viiii: " + debug_table_viiii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  v: " + debug_table_v[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  iid: " + debug_table_iid[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  vi: " + debug_table_vi[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  viiiii: " + debug_table_viiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iid: " + debug_table_iid[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  diii: " + debug_table_diii[x] + "  viii: " + debug_table_viii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  vii: " + debug_table_vii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  iii: " + debug_table_iii[x] + "  diii: " + debug_table_diii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  iii: " + debug_table_iii[x] + "  diii: " + debug_table_diii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  iii: " + debug_table_iii[x] + "  iid: " + debug_table_iid[x] + "  i: " + debug_table_i[x] + "  diii: " + debug_table_diii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  diii: " + debug_table_diii[x] + "  iiii: " + debug_table_iiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  diii: " + debug_table_diii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  diii: " + debug_table_diii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  diii: " + debug_table_diii[x] + "  ii: " + debug_table_ii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  diii: " + debug_table_diii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  ii: " + debug_table_ii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  diii: " + debug_table_diii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  dii: " + debug_table_dii[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  iid: " + debug_table_iid[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiii: " + debug_table_viiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiid: " + debug_table_iiiiid[x] + "  diii: " + debug_table_diii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  iiiiiid: " + debug_table_iiiiiid[x] + "  iiiiiiiii: " + debug_table_iiiiiiiii[x] + "  dii: " + debug_table_dii[x] + "  iid: " + debug_table_iid[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiiiiii: " + debug_table_iiiiiiiiiii[x] + "  iiiiiiiiiiii: " + debug_table_iiiiiiiiiiii[x] + "  iiiiiiiiiiiii: " + debug_table_iiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  try {
    return Module["dynCall_iiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_dii": nullFunc_dii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iid": nullFunc_iid, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiiiiiiii": nullFunc_iiiiiiiiiii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiiiiiiiiiiii": nullFunc_iiiiiiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_dii": invoke_dii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iid": invoke_iid, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_end_catch": ___cxa_end_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_free_exception": ___cxa_free_exception, "___cxa_rethrow": ___cxa_rethrow, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__isLeapYear": __isLeapYear, "_abort": _abort, "_dlerror": _dlerror, "_dlopen": _dlopen, "_dlsym": _dlsym, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_getenv": _getenv, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_strftime": _strftime, "_strftime_l": _strftime_l, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iid=env.nullFunc_iid;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiiiiiiii=env.nullFunc_iiiiiiiiiii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiiiiiiiiiiii=env.nullFunc_iiiiiiiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_dii=env.invoke_dii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iid=env.invoke_iid;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiiiiiiii=env.invoke_iiiiiiiiiii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiiiiiiiiiiii=env.invoke_iiiiiiiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall91=env.___syscall91;
  var ___unlock=env.___unlock;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __isLeapYear=env.__isLeapYear;
  var _abort=env._abort;
  var _dlerror=env._dlerror;
  var _dlopen=env._dlopen;
  var _dlsym=env._dlsym;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _getenv=env._getenv;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _strftime=env._strftime;
  var _strftime_l=env._strftime_l;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$0$i$i18$i$i$i$i = 0, $$0$i$i18$i120$i$i$i = 0, $$0$i$i18$i150$i$i$i = 0, $$0$i$i18$i182$i$i$i = 0, $$0$i$i18$i225$i$i$i = 0, $$0$i$i18$i255$i$i$i = 0, $$0$i$i18$i287$i$i$i = 0, $$0$i$i18$i36$i$i$i = 0, $$0$i$i18$i68$i$i$i = 0, $$02026$i$i9$i$i = 0, $$02026$i17$i6$i$i = 0, $$02125$i$i10$i$i = 0, $$02125$i18$i7$i$i = 0, $$027$i$i8$i$i = 0, $$027$i16$i5$i$i = 0, $$038$off0$i$i$i = 0, $$066$off0$i$i$i = 0, $$1$i$i$i = 0, $$14$i$i$i = 0, $$1456$i$i$i = 0, $$15$i$i$i = 0, $$1557$i$i$i = 0, $$19$i$i$i = 0, $$1961$i$i$i = 0, $$2$i$i$i = 0, $$20$i$i$i = 0, $$2062$i$i$i = 0, $$21$i$i$i = 0, $$2163$i$i$i = 0, $$22$i$i$i = 0, $$2264$i$i$i = 0, $$23$i$i$i = 0, $$2365$i$i$i = 0, $$3$i$i$i = 0, $$345$i$i$i = 0, $$4$i$i$i = 0, $$446$i$i$i = 0, $$8$i$i$i = 0, $$850$i$i$i = 0, $$9$i$i$i = 0, $$951$i$i$i = 0, $$byval_copy72 = 0, $$val = 0, $$val3 = 0, $10 = 0, $1001 = 0, $1002 = 0, $1004 = 0, $1005 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $1010 = 0, $1014 = 0, $1016 = 0, $1017 = 0, $102 = 0, $1022 = 0, $1027 = 0, $1028 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1040 = 0, $1042 = 0, $1043 = 0, $1048 = 0, $105 = 0, $1053 = 0, $1054 = 0, $1056 = 0, $1057 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1066 = 0, $1068 = 0, $1069 = 0, $1074 = 0, $1079 = 0, $1080 = 0, $1082 = 0, $1083 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $109 = 0, $1092 = 0, $1094 = 0, $1095 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $13 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $200 = 0, $201 = 0, $204 = 0, $205 = 0, $209 = 0, $21 = 0, $210 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $223 = 0, $224 = 0, $226 = 0, $228 = 0, $23 = 0, $230 = 0, $231 = 0, $236 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $248 = 0, $25 = 0, $252 = 0, $257 = 0, $26 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $268 = 0, $269 = 0, $27 = 0, $272 = 0, $273 = 0, $277 = 0, $278 = 0, $28 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $291 = 0, $292 = 0, $296 = 0, $298 = 0, $3 = 0, $300 = 0, $301 = 0, $305 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $315 = 0, $317 = 0, $32 = 0, $321 = 0, $322 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $331 = 0, $332 = 0, $335 = 0, $336 = 0, $34 = 0, $340 = 0, $341 = 0, $347 = 0, $348 = 0, $349 = 0, $354 = 0, $355 = 0, $359 = 0, $36 = 0, $360 = 0, $363 = 0, $365 = 0, $366 = 0, $37 = 0, $370 = 0, $372 = 0, $374 = 0, $375 = 0, $376 = 0, $382 = 0, $389 = 0, $39 = 0, $391 = 0, $393 = 0, $394 = 0, $395 = 0, $399 = 0, $4 = 0, $401 = 0, $405 = 0, $407 = 0, $408 = 0, $413 = 0, $414 = 0, $416 = 0, $417 = 0, $419 = 0, $420 = 0, $421 = 0, $422 = 0, $426 = 0, $428 = 0, $429 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $470 = 0, $471 = 0, $474 = 0, $475 = 0, $479 = 0, $480 = 0, $486 = 0, $49 = 0, $491 = 0, $492 = 0, $494 = 0, $496 = 0, $498 = 0, $499 = 0, $5 = 0, $504 = 0, $506 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $516 = 0, $52 = 0, $520 = 0, $525 = 0, $53 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $536 = 0, $537 = 0, $540 = 0, $541 = 0, $545 = 0, $546 = 0, $552 = 0, $553 = 0, $554 = 0, $559 = 0, $56 = 0, $560 = 0, $564 = 0, $566 = 0, $568 = 0, $569 = 0, $57 = 0, $573 = 0, $575 = 0, $577 = 0, $578 = 0, $579 = 0, $583 = 0, $585 = 0, $589 = 0, $59 = 0, $590 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $608 = 0, $609 = 0, $615 = 0, $616 = 0, $617 = 0, $622 = 0, $623 = 0, $627 = 0, $628 = 0, $63 = 0, $631 = 0, $633 = 0, $634 = 0, $638 = 0, $64 = 0, $640 = 0, $642 = 0, $643 = 0, $644 = 0, $650 = 0, $657 = 0, $659 = 0, $66 = 0, $661 = 0, $662 = 0, $663 = 0, $667 = 0, $669 = 0, $67 = 0, $682 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $690 = 0, $691 = 0, $694 = 0, $695 = 0, $7 = 0, $700 = 0, $701 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $715 = 0, $716 = 0, $718 = 0, $720 = 0, $722 = 0, $723 = 0, $725 = 0, $73 = 0, $730 = 0, $731 = 0, $733 = 0, $734 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $743 = 0, $745 = 0, $746 = 0, $752 = 0, $757 = 0, $76 = 0, $764 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $772 = 0, $773 = 0, $776 = 0, $777 = 0, $782 = 0, $783 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $802 = 0, $804 = 0, $806 = 0, $807 = 0, $808 = 0, $813 = 0, $814 = 0, $816 = 0, $817 = 0, $819 = 0, $820 = 0, $821 = 0, $822 = 0, $826 = 0, $828 = 0, $829 = 0, $834 = 0, $835 = 0, $840 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $848 = 0, $849 = 0, $852 = 0, $853 = 0, $858 = 0, $859 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $873 = 0, $874 = 0, $878 = 0, $879 = 0, $882 = 0, $883 = 0, $884 = 0, $889 = 0, $89 = 0, $890 = 0, $892 = 0, $893 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $9 = 0, $902 = 0, $904 = 0, $905 = 0, $91 = 0, $910 = 0, $915 = 0, $916 = 0, $918 = 0, $919 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $928 = 0, $93 = 0, $930 = 0, $931 = 0, $936 = 0, $937 = 0, $940 = 0, $942 = 0, $943 = 0, $944 = 0, $949 = 0, $95 = 0, $950 = 0, $952 = 0, $953 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $96 = 0, $962 = 0, $964 = 0, $965 = 0, $97 = 0, $970 = 0, $975 = 0, $976 = 0, $978 = 0, $979 = 0, $98 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $988 = 0, $99 = 0, $990 = 0, $991 = 0, $996 = 0, $eh$lpad$body$i$i$i$index20Z2D = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, $eh$lpad$body159$i$i$i$index36Z2D = 0, $eh$lpad$body159$i$i$i$indexZ2D = 0, $eh$lpad$body234$i$i$i$index43Z2D = 0, $eh$lpad$body234$i$i$i$indexZ2D = 0, $eh$lpad$body264$i$i$i$index49Z2D = 0, $eh$lpad$body264$i$i$i$indexZ2D = 0, $eh$lpad$body45$i$i$i$index27Z2D = 0, $eh$lpad$body45$i$i$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2235
 STACKTOP = STACKTOP + 800 | 0; //@line 2236
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(800); //@line 2236
 $$byval_copy72 = sp + 793 | 0; //@line 2237
 $3 = sp + 792 | 0; //@line 2238
 $4 = sp + 504 | 0; //@line 2239
 $5 = sp + 432 | 0; //@line 2240
 $6 = sp + 360 | 0; //@line 2241
 $7 = sp + 288 | 0; //@line 2242
 $8 = sp + 780 | 0; //@line 2243
 $9 = sp + 768 | 0; //@line 2244
 $10 = sp + 216 | 0; //@line 2245
 $11 = sp + 144 | 0; //@line 2246
 $12 = sp + 756 | 0; //@line 2247
 $13 = sp + 744 | 0; //@line 2248
 $14 = sp + 732 | 0; //@line 2249
 $15 = sp + 720 | 0; //@line 2250
 $16 = sp + 708 | 0; //@line 2251
 $17 = sp + 696 | 0; //@line 2252
 $18 = sp + 72 | 0; //@line 2253
 $19 = sp + 684 | 0; //@line 2254
 $20 = sp + 672 | 0; //@line 2255
 $21 = sp + 660 | 0; //@line 2256
 $22 = sp + 648 | 0; //@line 2257
 $23 = sp + 636 | 0; //@line 2258
 $24 = sp + 624 | 0; //@line 2259
 $25 = sp; //@line 2260
 $26 = sp + 612 | 0; //@line 2261
 $27 = sp + 600 | 0; //@line 2262
 $28 = sp + 588 | 0; //@line 2263
 $29 = sp + 576 | 0; //@line 2264
 $$val = HEAP32[$1 >> 2] | 0; //@line 2265
 $$val3 = HEAP32[$2 >> 2] | 0; //@line 2266
 __ZN5Stack3popEv($4, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 2268
 __THREW__ = 0; //@line 2269
 $31 = invoke_ii(143, $$val | 0) | 0; //@line 2270
 $32 = __THREW__; //@line 2271
 __THREW__ = 0; //@line 2271
 if ($32 & 1) {
  label = 20; //@line 2274
 } else {
  __THREW__ = 0; //@line 2276
  invoke_vii(131, $5 | 0, $31 | 0); //@line 2277
  $34 = __THREW__; //@line 2278
  __THREW__ = 0; //@line 2278
  if ($34 & 1) {
   label = 20; //@line 2281
  } else {
   __THREW__ = 0; //@line 2283
   $36 = invoke_ii(143, $$val | 0) | 0; //@line 2284
   $37 = __THREW__; //@line 2285
   __THREW__ = 0; //@line 2285
   if ($37 & 1) {
    label = 21; //@line 2288
   } else {
    __THREW__ = 0; //@line 2290
    invoke_vii(131, $6 | 0, $36 | 0); //@line 2291
    $39 = __THREW__; //@line 2292
    __THREW__ = 0; //@line 2292
    if ($39 & 1) {
     label = 21; //@line 2295
    } else {
     L7 : do {
      if ((HEAP32[$6 >> 2] | 0) == 1) {
       if ((HEAP32[$5 >> 2] | 0) == 1) {
        if ((HEAP32[$4 >> 2] | 0) == 1) {
         $47 = HEAP32[$$val3 >> 2] | 0; //@line 2307
         do {
          if (!$47) {
           label = 280; //@line 2311
          } else {
           __THREW__ = 0; //@line 2313
           invoke_vii(115, $7 | 0, $47 | 0); //@line 2314
           $49 = __THREW__; //@line 2315
           __THREW__ = 0; //@line 2315
           if ($49 & 1) {
            $93 = ___cxa_find_matching_catch_2() | 0; //@line 2318
            $$15$i$i$i = tempRet0; //@line 2320
            $$1557$i$i$i = $93; //@line 2320
           } else {
            $51 = $5 + 40 | 0; //@line 2322
            $52 = $5 + 44 | 0; //@line 2323
            $53 = HEAP32[$52 >> 2] | 0; //@line 2324
            $56 = $53; //@line 2327
            L16 : do {
             if (($53 | 0) == (HEAP32[$51 >> 2] | 0)) {
              $$038$off0$i$i$i = 0; //@line 2330
             } else {
              $57 = $56 + -20 | 0; //@line 2332
              $59 = HEAP8[$57 + 11 >> 0] | 0; //@line 2334
              $60 = $59 << 24 >> 24 < 0; //@line 2335
              $63 = $59 & 255; //@line 2338
              $64 = $60 ? HEAP32[$56 + -16 >> 2] | 0 : $63; //@line 2339
              $66 = HEAP8[$7 + 11 >> 0] | 0; //@line 2341
              $67 = $66 << 24 >> 24 < 0; //@line 2342
              if (($64 | 0) == (($67 ? HEAP32[$7 + 4 >> 2] | 0 : $66 & 255) | 0)) {
               $73 = HEAP32[$57 >> 2] | 0; //@line 2349
               $74 = $60 ? $73 : $57; //@line 2350
               $76 = $67 ? HEAP32[$7 >> 2] | 0 : $7; //@line 2352
               $77 = ($64 | 0) == 0; //@line 2353
               L19 : do {
                if ($60) {
                 if (!$77) {
                  if (_memcmp($74, $76, $64) | 0) {
                   $$038$off0$i$i$i = 0; //@line 2360
                   break L16;
                  }
                 }
                } else {
                 if (!$77) {
                  if ((HEAP8[$76 >> 0] | 0) == ($73 & 255) << 24 >> 24) {
                   $$02026$i$i9$i$i = $57; //@line 2371
                   $$02125$i$i10$i$i = $63; //@line 2371
                   $$027$i$i8$i$i = $76; //@line 2371
                  } else {
                   $$038$off0$i$i$i = 0; //@line 2373
                   break L16;
                  }
                  while (1) {
                   $$02125$i$i10$i$i = $$02125$i$i10$i$i + -1 | 0; //@line 2377
                   $$02026$i$i9$i$i = $$02026$i$i9$i$i + 1 | 0; //@line 2378
                   if (!$$02125$i$i10$i$i) {
                    break L19;
                   }
                   $$027$i$i8$i$i = $$027$i$i8$i$i + 1 | 0; //@line 2383
                   if ((HEAP8[$$02026$i$i9$i$i >> 0] | 0) != (HEAP8[$$027$i$i8$i$i >> 0] | 0)) {
                    $$038$off0$i$i$i = 0; //@line 2390
                    break L16;
                   }
                  }
                 }
                }
               } while (0);
               $$038$off0$i$i$i = 1; //@line 2397
              } else {
               $$038$off0$i$i$i = 0; //@line 2399
              }
             }
            } while (0);
            $97 = $4 + 40 | 0; //@line 2403
            $98 = $4 + 44 | 0; //@line 2404
            $99 = HEAP32[$98 >> 2] | 0; //@line 2405
            $102 = $99; //@line 2408
            L29 : do {
             if (($99 | 0) == (HEAP32[$97 >> 2] | 0)) {
              $$066$off0$i$i$i = 0; //@line 2411
             } else {
              $103 = $102 + -20 | 0; //@line 2413
              $105 = HEAP8[$103 + 11 >> 0] | 0; //@line 2415
              $106 = $105 << 24 >> 24 < 0; //@line 2416
              $109 = $105 & 255; //@line 2419
              $110 = $106 ? HEAP32[$102 + -16 >> 2] | 0 : $109; //@line 2420
              $112 = HEAP8[$7 + 11 >> 0] | 0; //@line 2422
              $113 = $112 << 24 >> 24 < 0; //@line 2423
              if (($110 | 0) == (($113 ? HEAP32[$7 + 4 >> 2] | 0 : $112 & 255) | 0)) {
               $119 = HEAP32[$103 >> 2] | 0; //@line 2430
               $120 = $106 ? $119 : $103; //@line 2431
               $122 = $113 ? HEAP32[$7 >> 2] | 0 : $7; //@line 2433
               $123 = ($110 | 0) == 0; //@line 2434
               L32 : do {
                if ($106) {
                 if ($123) {
                  break;
                 }
                 if (_memcmp($120, $122, $110) | 0) {
                  $$066$off0$i$i$i = 0; //@line 2443
                  break L29;
                 }
                } else {
                 if ($123) {
                  break;
                 }
                 if ((HEAP8[$122 >> 0] | 0) == ($119 & 255) << 24 >> 24) {
                  $$02026$i17$i6$i$i = $103; //@line 2455
                  $$02125$i18$i7$i$i = $109; //@line 2455
                  $$027$i16$i5$i$i = $122; //@line 2455
                 } else {
                  $$066$off0$i$i$i = 0; //@line 2457
                  break L29;
                 }
                 while (1) {
                  $$02125$i18$i7$i$i = $$02125$i18$i7$i$i + -1 | 0; //@line 2461
                  $$02026$i17$i6$i$i = $$02026$i17$i6$i$i + 1 | 0; //@line 2462
                  if (!$$02125$i18$i7$i$i) {
                   break L32;
                  }
                  $$027$i16$i5$i$i = $$027$i16$i5$i$i + 1 | 0; //@line 2467
                  if ((HEAP8[$$02026$i17$i6$i$i >> 0] | 0) != (HEAP8[$$027$i16$i5$i$i >> 0] | 0)) {
                   $$066$off0$i$i$i = 0; //@line 2474
                   break L29;
                  }
                 }
                }
               } while (0);
               $$066$off0$i$i$i = 1; //@line 2480
              } else {
               $$066$off0$i$i$i = 0; //@line 2482
              }
             }
            } while (0);
            L42 : do {
             if ($$038$off0$i$i$i) {
              $135 = $56 + -72 | 0; //@line 2488
              $137 = $56; //@line 2489
              L44 : do {
               HEAP32[$52 >> 2] = $137 + -72; //@line 2492
               $138 = $137 + -20 | 0; //@line 2493
               if ((HEAP8[$138 + 11 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$138 >> 2] | 0); //@line 2499
               }
               $143 = $137 + -32 | 0; //@line 2501
               $144 = HEAP32[$143 >> 2] | 0; //@line 2502
               if ($144 | 0) {
                $146 = $137 + -28 | 0; //@line 2505
                $147 = HEAP32[$146 >> 2] | 0; //@line 2506
                if (($147 | 0) == ($144 | 0)) {
                 $158 = $144; //@line 2509
                } else {
                 $149 = $137 + -24 | 0; //@line 2511
                 $151 = $147; //@line 2512
                 do {
                  $150 = $151 + -72 | 0; //@line 2514
                  HEAP32[$146 >> 2] = $150; //@line 2515
                  __THREW__ = 0; //@line 2516
                  HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 2517
                  invoke_viii(13, $$byval_copy72 | 0, $149 | 0, $150 | 0); //@line 2518
                  $152 = __THREW__; //@line 2519
                  __THREW__ = 0; //@line 2519
                  if ($152 & 1) {
                   label = 44; //@line 2522
                   break L44;
                  }
                  $151 = HEAP32[$146 >> 2] | 0; //@line 2525
                 } while (($151 | 0) != ($144 | 0));
                 $158 = HEAP32[$143 >> 2] | 0; //@line 2534
                }
                __ZdlPv($158); //@line 2536
               }
               $159 = $137 + -68 | 0; //@line 2538
               if ((HEAP8[$159 + 11 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$159 >> 2] | 0); //@line 2544
               }
               $137 = HEAP32[$52 >> 2] | 0; //@line 2546
              } while (($137 | 0) != ($135 | 0));
              if ((label | 0) == 44) {
               $156 = ___cxa_find_matching_catch_3(0) | 0; //@line 2555
               ___clang_call_terminate($156); //@line 2557
              }
              $166 = $6 + 40 | 0; //@line 2560
              $167 = $8 + 4 | 0; //@line 2561
              $168 = $8 + 8 | 0; //@line 2562
              $169 = $6 + 44 | 0; //@line 2563
              $170 = $9 + 11 | 0; //@line 2564
              $171 = $11 + 52 | 0; //@line 2565
              $172 = $171 + 11 | 0; //@line 2566
              $173 = $11 + 40 | 0; //@line 2567
              $174 = $11 + 4 | 0; //@line 2568
              $175 = $174 + 11 | 0; //@line 2569
              $176 = $10 + 24 | 0; //@line 2570
              $177 = $12 + 4 | 0; //@line 2571
              $178 = $12 + 8 | 0; //@line 2572
              $179 = $13 + 11 | 0; //@line 2573
              $180 = $12 + 8 | 0; //@line 2574
              $181 = $10 + 52 | 0; //@line 2575
              $182 = $181 + 11 | 0; //@line 2576
              $183 = $10 + 40 | 0; //@line 2577
              $184 = $10 + 4 | 0; //@line 2578
              $185 = $184 + 11 | 0; //@line 2579
              $186 = $10 + 44 | 0; //@line 2580
              $187 = $10 + 48 | 0; //@line 2581
              $188 = $14 + 4 | 0; //@line 2582
              $189 = $14 + 8 | 0; //@line 2583
              $190 = $15 + 11 | 0; //@line 2584
              $191 = $14 + 8 | 0; //@line 2585
              $192 = $11 + 44 | 0; //@line 2586
              $193 = $11 + 48 | 0; //@line 2587
              $194 = $8 + 8 | 0; //@line 2588
              L65 : while (1) {
               HEAP32[$8 >> 2] = 0; //@line 2590
               HEAP32[$167 >> 2] = 0; //@line 2591
               HEAP32[$168 >> 2] = 0; //@line 2592
               $195 = HEAP32[$169 >> 2] | 0; //@line 2593
               $196 = HEAP32[$166 >> 2] | 0; //@line 2594
               $197 = $195 - $196 | 0; //@line 2595
               $198 = ($197 | 0) / 72 | 0; //@line 2596
               $200 = $196; //@line 2598
               $201 = $195; //@line 2599
               do {
                if ($197 | 0) {
                 if ($198 >>> 0 > 59652323) {
                  label = 53; //@line 2604
                  break L65;
                 }
                 __THREW__ = 0; //@line 2607
                 $204 = invoke_ii(142, $197 | 0) | 0; //@line 2608
                 $205 = __THREW__; //@line 2609
                 __THREW__ = 0; //@line 2609
                 if ($205 & 1) {
                  label = 58; //@line 2612
                  break L65;
                 }
                 HEAP32[$167 >> 2] = $204; //@line 2615
                 HEAP32[$8 >> 2] = $204; //@line 2616
                 HEAP32[$194 >> 2] = $204 + ($198 * 72 | 0); //@line 2618
                 if (($200 | 0) == ($201 | 0)) {
                  break;
                 } else {
                  $$0$i$i18$i$i$i$i = $200; //@line 2623
                  $209 = $204; //@line 2623
                 }
                 do {
                  __THREW__ = 0; //@line 2626
                  invoke_vii(120, $209 | 0, $$0$i$i18$i$i$i$i | 0); //@line 2627
                  $210 = __THREW__; //@line 2628
                  __THREW__ = 0; //@line 2628
                  if ($210 & 1) {
                   label = 58; //@line 2631
                   break L65;
                  }
                  $$0$i$i18$i$i$i$i = $$0$i$i18$i$i$i$i + 72 | 0; //@line 2634
                  $209 = (HEAP32[$167 >> 2] | 0) + 72 | 0; //@line 2636
                  HEAP32[$167 >> 2] = $209; //@line 2637
                 } while (($$0$i$i18$i$i$i$i | 0) != ($201 | 0));
                }
               } while (0);
               HEAP32[$9 >> 2] = 0; //@line 2647
               HEAP32[$9 + 4 >> 2] = 0; //@line 2647
               HEAP32[$9 + 8 >> 2] = 0; //@line 2647
               __THREW__ = 0; //@line 2648
               invoke_viiii(14, $$val | 0, $8 | 0, $$val3 | 0, $9 | 0); //@line 2649
               $218 = __THREW__; //@line 2650
               __THREW__ = 0; //@line 2650
               if ($218 & 1) {
                label = 91; //@line 2653
                break;
               }
               if ((HEAP8[$170 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 2660
               }
               __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($8); //@line 2662
               __THREW__ = 0; //@line 2663
               $223 = invoke_ii(143, $$val | 0) | 0; //@line 2664
               $224 = __THREW__; //@line 2665
               __THREW__ = 0; //@line 2665
               if ($224 & 1) {
                label = 94; //@line 2668
                break;
               }
               __THREW__ = 0; //@line 2671
               invoke_vii(131, $10 | 0, $223 | 0); //@line 2672
               $226 = __THREW__; //@line 2673
               __THREW__ = 0; //@line 2673
               if ($226 & 1) {
                label = 94; //@line 2676
                break;
               }
               __THREW__ = 0; //@line 2679
               invoke_vii(120, $11 | 0, $10 | 0); //@line 2680
               $228 = __THREW__; //@line 2681
               __THREW__ = 0; //@line 2681
               if ($228 & 1) {
                label = 95; //@line 2684
                break;
               }
               __THREW__ = 0; //@line 2687
               $230 = invoke_ii(144, $11 | 0) | 0; //@line 2688
               $231 = __THREW__; //@line 2689
               __THREW__ = 0; //@line 2689
               if ($231 & 1) {
                label = 97; //@line 2692
                break;
               }
               if ((HEAP8[$172 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$171 >> 2] | 0); //@line 2699
               }
               $236 = HEAP32[$173 >> 2] | 0; //@line 2701
               if ($236 | 0) {
                $238 = HEAP32[$192 >> 2] | 0; //@line 2704
                if (($238 | 0) == ($236 | 0)) {
                 $248 = $236; //@line 2707
                } else {
                 $241 = $238; //@line 2709
                 do {
                  $240 = $241 + -72 | 0; //@line 2711
                  HEAP32[$192 >> 2] = $240; //@line 2712
                  __THREW__ = 0; //@line 2713
                  HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 2714
                  invoke_viii(13, $$byval_copy72 | 0, $193 | 0, $240 | 0); //@line 2715
                  $242 = __THREW__; //@line 2716
                  __THREW__ = 0; //@line 2716
                  if ($242 & 1) {
                   label = 72; //@line 2719
                   break L65;
                  }
                  $241 = HEAP32[$192 >> 2] | 0; //@line 2722
                 } while (($241 | 0) != ($236 | 0));
                 $248 = HEAP32[$173 >> 2] | 0; //@line 2731
                }
                __ZdlPv($248); //@line 2733
               }
               if ((HEAP8[$175 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$174 >> 2] | 0); //@line 2739
               }
               if (!$230) {
                label = 127; //@line 2742
                break;
               }
               $252 = $176; //@line 2745
               $257 = HEAP32[$252 + 4 >> 2] | 0; //@line 2750
               if (($257 | 0) > 0 | ($257 | 0) == 0 & (HEAP32[$252 >> 2] | 0) >>> 0 > 0) {
                HEAP32[$12 >> 2] = 0; //@line 2757
                HEAP32[$177 >> 2] = 0; //@line 2758
                HEAP32[$178 >> 2] = 0; //@line 2759
                $263 = HEAP32[$52 >> 2] | 0; //@line 2760
                $264 = HEAP32[$51 >> 2] | 0; //@line 2761
                $265 = $263 - $264 | 0; //@line 2762
                $266 = ($265 | 0) / 72 | 0; //@line 2763
                $268 = $264; //@line 2765
                $269 = $263; //@line 2766
                do {
                 if ($265 | 0) {
                  if ($266 >>> 0 > 59652323) {
                   label = 81; //@line 2771
                   break L65;
                  }
                  __THREW__ = 0; //@line 2774
                  $272 = invoke_ii(142, $265 | 0) | 0; //@line 2775
                  $273 = __THREW__; //@line 2776
                  __THREW__ = 0; //@line 2776
                  if ($273 & 1) {
                   label = 86; //@line 2779
                   break L65;
                  }
                  HEAP32[$177 >> 2] = $272; //@line 2782
                  HEAP32[$12 >> 2] = $272; //@line 2783
                  HEAP32[$180 >> 2] = $272 + ($266 * 72 | 0); //@line 2785
                  if (($268 | 0) == ($269 | 0)) {
                   break;
                  } else {
                   $$0$i$i18$i36$i$i$i = $268; //@line 2790
                   $277 = $272; //@line 2790
                  }
                  do {
                   __THREW__ = 0; //@line 2793
                   invoke_vii(120, $277 | 0, $$0$i$i18$i36$i$i$i | 0); //@line 2794
                   $278 = __THREW__; //@line 2795
                   __THREW__ = 0; //@line 2795
                   if ($278 & 1) {
                    label = 86; //@line 2798
                    break L65;
                   }
                   $$0$i$i18$i36$i$i$i = $$0$i$i18$i36$i$i$i + 72 | 0; //@line 2801
                   $277 = (HEAP32[$177 >> 2] | 0) + 72 | 0; //@line 2803
                   HEAP32[$177 >> 2] = $277; //@line 2804
                  } while (($$0$i$i18$i36$i$i$i | 0) != ($269 | 0));
                 }
                } while (0);
                HEAP32[$13 >> 2] = 0; //@line 2814
                HEAP32[$13 + 4 >> 2] = 0; //@line 2814
                HEAP32[$13 + 8 >> 2] = 0; //@line 2814
                __THREW__ = 0; //@line 2815
                invoke_viiii(14, $$val | 0, $12 | 0, $$val3 | 0, $13 | 0); //@line 2816
                $286 = __THREW__; //@line 2817
                __THREW__ = 0; //@line 2817
                if ($286 & 1) {
                 label = 109; //@line 2820
                 break;
                }
                if ((HEAP8[$179 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$13 >> 2] | 0); //@line 2827
                }
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($12); //@line 2829
                $$0$i$i$i = 0; //@line 2830
               } else {
                HEAP32[$14 >> 2] = 0; //@line 2832
                HEAP32[$188 >> 2] = 0; //@line 2833
                HEAP32[$189 >> 2] = 0; //@line 2834
                $326 = HEAP32[$98 >> 2] | 0; //@line 2835
                $327 = HEAP32[$97 >> 2] | 0; //@line 2836
                $328 = $326 - $327 | 0; //@line 2837
                $329 = ($328 | 0) / 72 | 0; //@line 2838
                $331 = $327; //@line 2840
                $332 = $326; //@line 2841
                do {
                 if ($328 | 0) {
                  if ($329 >>> 0 > 59652323) {
                   label = 114; //@line 2846
                   break L65;
                  }
                  __THREW__ = 0; //@line 2849
                  $335 = invoke_ii(142, $328 | 0) | 0; //@line 2850
                  $336 = __THREW__; //@line 2851
                  __THREW__ = 0; //@line 2851
                  if ($336 & 1) {
                   label = 119; //@line 2854
                   break L65;
                  }
                  HEAP32[$188 >> 2] = $335; //@line 2857
                  HEAP32[$14 >> 2] = $335; //@line 2858
                  HEAP32[$191 >> 2] = $335 + ($329 * 72 | 0); //@line 2860
                  if (($331 | 0) == ($332 | 0)) {
                   break;
                  } else {
                   $$0$i$i18$i68$i$i$i = $331; //@line 2865
                   $340 = $335; //@line 2865
                  }
                  do {
                   __THREW__ = 0; //@line 2868
                   invoke_vii(120, $340 | 0, $$0$i$i18$i68$i$i$i | 0); //@line 2869
                   $341 = __THREW__; //@line 2870
                   __THREW__ = 0; //@line 2870
                   if ($341 & 1) {
                    label = 119; //@line 2873
                    break L65;
                   }
                   $$0$i$i18$i68$i$i$i = $$0$i$i18$i68$i$i$i + 72 | 0; //@line 2876
                   $340 = (HEAP32[$188 >> 2] | 0) + 72 | 0; //@line 2878
                   HEAP32[$188 >> 2] = $340; //@line 2879
                  } while (($$0$i$i18$i68$i$i$i | 0) != ($332 | 0));
                 }
                } while (0);
                HEAP32[$15 >> 2] = 0; //@line 2889
                HEAP32[$15 + 4 >> 2] = 0; //@line 2889
                HEAP32[$15 + 8 >> 2] = 0; //@line 2889
                __THREW__ = 0; //@line 2890
                invoke_viiii(14, $$val | 0, $14 | 0, $$val3 | 0, $15 | 0); //@line 2891
                $349 = __THREW__; //@line 2892
                __THREW__ = 0; //@line 2892
                if ($349 & 1) {
                 label = 124; //@line 2895
                 break;
                }
                if ((HEAP8[$190 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$15 >> 2] | 0); //@line 2902
                }
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($14); //@line 2904
                $$0$i$i$i = 1; //@line 2905
               }
               if ((HEAP8[$182 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$181 >> 2] | 0); //@line 2911
               }
               $370 = HEAP32[$183 >> 2] | 0; //@line 2913
               if ($370 | 0) {
                $372 = HEAP32[$186 >> 2] | 0; //@line 2916
                if (($372 | 0) == ($370 | 0)) {
                 $382 = $370; //@line 2919
                } else {
                 $375 = $372; //@line 2921
                 do {
                  $374 = $375 + -72 | 0; //@line 2923
                  HEAP32[$186 >> 2] = $374; //@line 2924
                  __THREW__ = 0; //@line 2925
                  HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 2926
                  invoke_viii(13, $$byval_copy72 | 0, $187 | 0, $374 | 0); //@line 2927
                  $376 = __THREW__; //@line 2928
                  __THREW__ = 0; //@line 2928
                  if ($376 & 1) {
                   label = 136; //@line 2931
                   break L65;
                  }
                  $375 = HEAP32[$186 >> 2] | 0; //@line 2934
                 } while (($375 | 0) != ($370 | 0));
                 $382 = HEAP32[$183 >> 2] | 0; //@line 2943
                }
                __ZdlPv($382); //@line 2945
               }
               if ((HEAP8[$185 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$184 >> 2] | 0); //@line 2951
               }
               if ($$0$i$i$i | 0) {
                $$2$i$i$i = $$0$i$i$i; //@line 2955
                label = 274; //@line 2956
                break L42;
               }
              }
              switch (label | 0) {
              case 53:
               {
                __THREW__ = 0; //@line 2962
                invoke_vi(254, $8 | 0); //@line 2963
                __THREW__ = 0; //@line 2964
                label = 58; //@line 2965
                break;
               }
              case 72:
               {
                ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 2971
                break;
               }
              case 81:
               {
                __THREW__ = 0; //@line 2976
                invoke_vi(254, $12 | 0); //@line 2977
                __THREW__ = 0; //@line 2978
                label = 86; //@line 2979
                break;
               }
              case 91:
               {
                $291 = ___cxa_find_matching_catch_2() | 0; //@line 2983
                $292 = tempRet0; //@line 2984
                if ((HEAP8[$170 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 2989
                }
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($8); //@line 2991
                $$14$i$i$i = $292; //@line 2992
                $$1456$i$i$i = $291; //@line 2992
                break L42;
                break;
               }
              case 94:
               {
                $296 = ___cxa_find_matching_catch_2() | 0; //@line 2997
                $$4$i$i$i = tempRet0; //@line 2999
                $$446$i$i$i = $296; //@line 2999
                break;
               }
              case 95:
               {
                $298 = ___cxa_find_matching_catch_2() | 0; //@line 3003
                $eh$lpad$body45$i$i$i$index27Z2D = tempRet0; //@line 3005
                $eh$lpad$body45$i$i$i$indexZ2D = $298; //@line 3005
                label = 96; //@line 3006
                break;
               }
              case 97:
               {
                $300 = ___cxa_find_matching_catch_2() | 0; //@line 3010
                $301 = tempRet0; //@line 3011
                if ((HEAP8[$172 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$171 >> 2] | 0); //@line 3016
                }
                $305 = HEAP32[$173 >> 2] | 0; //@line 3018
                if ($305 | 0) {
                 $307 = HEAP32[$192 >> 2] | 0; //@line 3021
                 do {
                  if (($307 | 0) == ($305 | 0)) {
                   $317 = $305; //@line 3025
                  } else {
                   $310 = $307; //@line 3027
                   while (1) {
                    $309 = $310 + -72 | 0; //@line 3029
                    HEAP32[$192 >> 2] = $309; //@line 3030
                    __THREW__ = 0; //@line 3031
                    HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 3032
                    invoke_viii(13, $$byval_copy72 | 0, $193 | 0, $309 | 0); //@line 3033
                    $311 = __THREW__; //@line 3034
                    __THREW__ = 0; //@line 3034
                    if ($311 & 1) {
                     label = 104; //@line 3037
                     break;
                    }
                    $310 = HEAP32[$192 >> 2] | 0; //@line 3040
                    if (($310 | 0) == ($305 | 0)) {
                     label = 105; //@line 3043
                     break;
                    }
                   }
                   if ((label | 0) == 104) {
                    $315 = ___cxa_find_matching_catch_3(0) | 0; //@line 3050
                    ___clang_call_terminate($315); //@line 3052
                   } else if ((label | 0) == 105) {
                    $317 = HEAP32[$173 >> 2] | 0; //@line 3057
                    break;
                   }
                  }
                 } while (0);
                 __ZdlPv($317); //@line 3062
                }
                if ((HEAP8[$175 >> 0] | 0) >= 0) {
                 $$3$i$i$i = $301; //@line 3067
                 $$345$i$i$i = $300; //@line 3067
                 label = 142; //@line 3068
                 break;
                }
                __ZdlPv(HEAP32[$174 >> 2] | 0); //@line 3072
                $$3$i$i$i = $301; //@line 3073
                $$345$i$i$i = $300; //@line 3073
                label = 142; //@line 3074
                break;
               }
              case 109:
               {
                $321 = ___cxa_find_matching_catch_2() | 0; //@line 3078
                $322 = tempRet0; //@line 3079
                if ((HEAP8[$179 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$13 >> 2] | 0); //@line 3084
                }
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($12); //@line 3086
                $$3$i$i$i = $322; //@line 3087
                $$345$i$i$i = $321; //@line 3087
                label = 142; //@line 3088
                break;
               }
              case 114:
               {
                __THREW__ = 0; //@line 3092
                invoke_vi(254, $14 | 0); //@line 3093
                __THREW__ = 0; //@line 3094
                label = 119; //@line 3095
                break;
               }
              case 124:
               {
                $354 = ___cxa_find_matching_catch_2() | 0; //@line 3099
                $355 = tempRet0; //@line 3100
                if ((HEAP8[$190 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$15 >> 2] | 0); //@line 3105
                }
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($14); //@line 3107
                $$3$i$i$i = $355; //@line 3108
                $$345$i$i$i = $354; //@line 3108
                label = 142; //@line 3109
                break;
               }
              case 127:
               {
                $359 = ___cxa_allocate_exception(8) | 0; //@line 3113
                __THREW__ = 0; //@line 3114
                invoke_vii(125, $359 | 0, 16909); //@line 3115
                $360 = __THREW__; //@line 3116
                __THREW__ = 0; //@line 3116
                if ($360 & 1) {
                 $365 = ___cxa_find_matching_catch_2() | 0; //@line 3119
                 $366 = tempRet0; //@line 3120
                 ___cxa_free_exception($359 | 0); //@line 3121
                 $$3$i$i$i = $366; //@line 3122
                 $$345$i$i$i = $365; //@line 3122
                 label = 142; //@line 3123
                 break;
                } else {
                 __THREW__ = 0; //@line 3126
                 invoke_viii(16, $359 | 0, 2824, 242); //@line 3127
                 __THREW__ = 0; //@line 3128
                 $363 = ___cxa_find_matching_catch_2() | 0; //@line 3129
                 $eh$lpad$body45$i$i$i$index27Z2D = tempRet0; //@line 3131
                 $eh$lpad$body45$i$i$i$indexZ2D = $363; //@line 3131
                 label = 96; //@line 3132
                 break;
                }
                break;
               }
              case 136:
               {
                ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 3140
                break;
               }
              }
              if ((label | 0) == 58) {
               $216 = ___cxa_find_matching_catch_2() | 0; //@line 3146
               $217 = tempRet0; //@line 3147
               __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($8); //@line 3148
               $eh$lpad$body$i$i$i$index20Z2D = $217; //@line 3149
               $eh$lpad$body$i$i$i$indexZ2D = $216; //@line 3149
               label = 24; //@line 3150
               break;
              } else if ((label | 0) == 86) {
               $284 = ___cxa_find_matching_catch_2() | 0; //@line 3154
               $285 = tempRet0; //@line 3155
               __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($12); //@line 3156
               $eh$lpad$body45$i$i$i$index27Z2D = $285; //@line 3157
               $eh$lpad$body45$i$i$i$indexZ2D = $284; //@line 3157
               label = 96; //@line 3158
              } else if ((label | 0) == 119) {
               $347 = ___cxa_find_matching_catch_2() | 0; //@line 3161
               $348 = tempRet0; //@line 3162
               __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($14); //@line 3163
               $eh$lpad$body45$i$i$i$index27Z2D = $348; //@line 3164
               $eh$lpad$body45$i$i$i$indexZ2D = $347; //@line 3164
               label = 96; //@line 3165
              }
              if ((label | 0) == 96) {
               $$3$i$i$i = $eh$lpad$body45$i$i$i$index27Z2D; //@line 3168
               $$345$i$i$i = $eh$lpad$body45$i$i$i$indexZ2D; //@line 3168
               label = 142; //@line 3169
              }
              do {
               if ((label | 0) == 142) {
                if ((HEAP8[$182 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$181 >> 2] | 0); //@line 3177
                }
                $389 = HEAP32[$183 >> 2] | 0; //@line 3179
                if ($389 | 0) {
                 $391 = HEAP32[$186 >> 2] | 0; //@line 3182
                 do {
                  if (($391 | 0) == ($389 | 0)) {
                   $401 = $389; //@line 3186
                  } else {
                   $394 = $391; //@line 3188
                   while (1) {
                    $393 = $394 + -72 | 0; //@line 3190
                    HEAP32[$186 >> 2] = $393; //@line 3191
                    __THREW__ = 0; //@line 3192
                    HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 3193
                    invoke_viii(13, $$byval_copy72 | 0, $187 | 0, $393 | 0); //@line 3194
                    $395 = __THREW__; //@line 3195
                    __THREW__ = 0; //@line 3195
                    if ($395 & 1) {
                     label = 149; //@line 3198
                     break;
                    }
                    $394 = HEAP32[$186 >> 2] | 0; //@line 3201
                    if (($394 | 0) == ($389 | 0)) {
                     label = 150; //@line 3204
                     break;
                    }
                   }
                   if ((label | 0) == 149) {
                    $399 = ___cxa_find_matching_catch_3(0) | 0; //@line 3211
                    ___clang_call_terminate($399); //@line 3213
                   } else if ((label | 0) == 150) {
                    $401 = HEAP32[$183 >> 2] | 0; //@line 3218
                    break;
                   }
                  }
                 } while (0);
                 __ZdlPv($401); //@line 3223
                }
                if ((HEAP8[$185 >> 0] | 0) >= 0) {
                 $$4$i$i$i = $$3$i$i$i; //@line 3228
                 $$446$i$i$i = $$345$i$i$i; //@line 3228
                 break;
                }
                __ZdlPv(HEAP32[$184 >> 2] | 0); //@line 3232
                $$4$i$i$i = $$3$i$i$i; //@line 3233
                $$446$i$i$i = $$345$i$i$i; //@line 3233
               }
              } while (0);
              $$14$i$i$i = $$4$i$i$i; //@line 3236
              $$1456$i$i$i = $$446$i$i$i; //@line 3236
             } else {
              if ($$066$off0$i$i$i) {
               $405 = $102 + -72 | 0; //@line 3239
               $407 = $102; //@line 3240
               L210 : do {
                HEAP32[$98 >> 2] = $407 + -72; //@line 3243
                $408 = $407 + -20 | 0; //@line 3244
                if ((HEAP8[$408 + 11 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$408 >> 2] | 0); //@line 3250
                }
                $413 = $407 + -32 | 0; //@line 3252
                $414 = HEAP32[$413 >> 2] | 0; //@line 3253
                if ($414 | 0) {
                 $416 = $407 + -28 | 0; //@line 3256
                 $417 = HEAP32[$416 >> 2] | 0; //@line 3257
                 if (($417 | 0) == ($414 | 0)) {
                  $428 = $414; //@line 3260
                 } else {
                  $419 = $407 + -24 | 0; //@line 3262
                  $421 = $417; //@line 3263
                  do {
                   $420 = $421 + -72 | 0; //@line 3265
                   HEAP32[$416 >> 2] = $420; //@line 3266
                   __THREW__ = 0; //@line 3267
                   HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 3268
                   invoke_viii(13, $$byval_copy72 | 0, $419 | 0, $420 | 0); //@line 3269
                   $422 = __THREW__; //@line 3270
                   __THREW__ = 0; //@line 3270
                   if ($422 & 1) {
                    label = 164; //@line 3273
                    break L210;
                   }
                   $421 = HEAP32[$416 >> 2] | 0; //@line 3276
                  } while (($421 | 0) != ($414 | 0));
                  $428 = HEAP32[$413 >> 2] | 0; //@line 3285
                 }
                 __ZdlPv($428); //@line 3287
                }
                $429 = $407 + -68 | 0; //@line 3289
                if ((HEAP8[$429 + 11 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$429 >> 2] | 0); //@line 3295
                }
                $407 = HEAP32[$98 >> 2] | 0; //@line 3297
               } while (($407 | 0) != ($405 | 0));
               if ((label | 0) == 164) {
                $426 = ___cxa_find_matching_catch_3(0) | 0; //@line 3306
                ___clang_call_terminate($426); //@line 3308
               }
               $436 = $6 + 40 | 0; //@line 3311
               $437 = $16 + 4 | 0; //@line 3312
               $438 = $16 + 8 | 0; //@line 3313
               $439 = $6 + 44 | 0; //@line 3314
               $440 = $17 + 11 | 0; //@line 3315
               $441 = $18 + 52 | 0; //@line 3316
               $442 = $441 + 11 | 0; //@line 3317
               $443 = $18 + 40 | 0; //@line 3318
               $444 = $18 + 4 | 0; //@line 3319
               $445 = $444 + 11 | 0; //@line 3320
               $446 = $10 + 24 | 0; //@line 3321
               $447 = $19 + 4 | 0; //@line 3322
               $448 = $19 + 8 | 0; //@line 3323
               $449 = $20 + 11 | 0; //@line 3324
               $450 = $19 + 8 | 0; //@line 3325
               $451 = $10 + 52 | 0; //@line 3326
               $452 = $451 + 11 | 0; //@line 3327
               $453 = $10 + 40 | 0; //@line 3328
               $454 = $10 + 4 | 0; //@line 3329
               $455 = $454 + 11 | 0; //@line 3330
               $456 = $10 + 44 | 0; //@line 3331
               $457 = $10 + 48 | 0; //@line 3332
               $458 = $21 + 4 | 0; //@line 3333
               $459 = $21 + 8 | 0; //@line 3334
               $460 = $22 + 11 | 0; //@line 3335
               $461 = $21 + 8 | 0; //@line 3336
               $462 = $18 + 44 | 0; //@line 3337
               $463 = $18 + 48 | 0; //@line 3338
               $464 = $16 + 8 | 0; //@line 3339
               L231 : while (1) {
                HEAP32[$16 >> 2] = 0; //@line 3341
                HEAP32[$437 >> 2] = 0; //@line 3342
                HEAP32[$438 >> 2] = 0; //@line 3343
                $465 = HEAP32[$439 >> 2] | 0; //@line 3344
                $466 = HEAP32[$436 >> 2] | 0; //@line 3345
                $467 = $465 - $466 | 0; //@line 3346
                $468 = ($467 | 0) / 72 | 0; //@line 3347
                $470 = $466; //@line 3349
                $471 = $465; //@line 3350
                do {
                 if ($467 | 0) {
                  if ($468 >>> 0 > 59652323) {
                   label = 173; //@line 3355
                   break L231;
                  }
                  __THREW__ = 0; //@line 3358
                  $474 = invoke_ii(142, $467 | 0) | 0; //@line 3359
                  $475 = __THREW__; //@line 3360
                  __THREW__ = 0; //@line 3360
                  if ($475 & 1) {
                   label = 23; //@line 3363
                   break L231;
                  }
                  HEAP32[$437 >> 2] = $474; //@line 3366
                  HEAP32[$16 >> 2] = $474; //@line 3367
                  HEAP32[$464 >> 2] = $474 + ($468 * 72 | 0); //@line 3369
                  if (($470 | 0) == ($471 | 0)) {
                   break;
                  } else {
                   $$0$i$i18$i120$i$i$i = $470; //@line 3374
                   $479 = $474; //@line 3374
                  }
                  do {
                   __THREW__ = 0; //@line 3377
                   invoke_vii(120, $479 | 0, $$0$i$i18$i120$i$i$i | 0); //@line 3378
                   $480 = __THREW__; //@line 3379
                   __THREW__ = 0; //@line 3379
                   if ($480 & 1) {
                    label = 23; //@line 3382
                    break L231;
                   }
                   $$0$i$i18$i120$i$i$i = $$0$i$i18$i120$i$i$i + 72 | 0; //@line 3385
                   $479 = (HEAP32[$437 >> 2] | 0) + 72 | 0; //@line 3387
                   HEAP32[$437 >> 2] = $479; //@line 3388
                  } while (($$0$i$i18$i120$i$i$i | 0) != ($471 | 0));
                 }
                } while (0);
                HEAP32[$17 >> 2] = 0; //@line 3398
                HEAP32[$17 + 4 >> 2] = 0; //@line 3398
                HEAP32[$17 + 8 >> 2] = 0; //@line 3398
                __THREW__ = 0; //@line 3399
                invoke_viiii(14, $$val | 0, $16 | 0, $$val3 | 0, $17 | 0); //@line 3400
                $486 = __THREW__; //@line 3401
                __THREW__ = 0; //@line 3401
                if ($486 & 1) {
                 label = 210; //@line 3404
                 break;
                }
                if ((HEAP8[$440 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$17 >> 2] | 0); //@line 3411
                }
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($16); //@line 3413
                __THREW__ = 0; //@line 3414
                $491 = invoke_ii(143, $$val | 0) | 0; //@line 3415
                $492 = __THREW__; //@line 3416
                __THREW__ = 0; //@line 3416
                if ($492 & 1) {
                 label = 213; //@line 3419
                 break;
                }
                __THREW__ = 0; //@line 3422
                invoke_vii(131, $10 | 0, $491 | 0); //@line 3423
                $494 = __THREW__; //@line 3424
                __THREW__ = 0; //@line 3424
                if ($494 & 1) {
                 label = 213; //@line 3427
                 break;
                }
                __THREW__ = 0; //@line 3430
                invoke_vii(120, $18 | 0, $10 | 0); //@line 3431
                $496 = __THREW__; //@line 3432
                __THREW__ = 0; //@line 3432
                if ($496 & 1) {
                 label = 214; //@line 3435
                 break;
                }
                __THREW__ = 0; //@line 3438
                $498 = invoke_ii(144, $18 | 0) | 0; //@line 3439
                $499 = __THREW__; //@line 3440
                __THREW__ = 0; //@line 3440
                if ($499 & 1) {
                 label = 216; //@line 3443
                 break;
                }
                if ((HEAP8[$442 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$441 >> 2] | 0); //@line 3450
                }
                $504 = HEAP32[$443 >> 2] | 0; //@line 3452
                if ($504 | 0) {
                 $506 = HEAP32[$462 >> 2] | 0; //@line 3455
                 if (($506 | 0) == ($504 | 0)) {
                  $516 = $504; //@line 3458
                 } else {
                  $509 = $506; //@line 3460
                  do {
                   $508 = $509 + -72 | 0; //@line 3462
                   HEAP32[$462 >> 2] = $508; //@line 3463
                   __THREW__ = 0; //@line 3464
                   HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 3465
                   invoke_viii(13, $$byval_copy72 | 0, $463 | 0, $508 | 0); //@line 3466
                   $510 = __THREW__; //@line 3467
                   __THREW__ = 0; //@line 3467
                   if ($510 & 1) {
                    label = 191; //@line 3470
                    break L231;
                   }
                   $509 = HEAP32[$462 >> 2] | 0; //@line 3473
                  } while (($509 | 0) != ($504 | 0));
                  $516 = HEAP32[$443 >> 2] | 0; //@line 3482
                 }
                 __ZdlPv($516); //@line 3484
                }
                if ((HEAP8[$445 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$444 >> 2] | 0); //@line 3490
                }
                if (!$498) {
                 label = 246; //@line 3493
                 break;
                }
                $520 = $446; //@line 3496
                $525 = HEAP32[$520 + 4 >> 2] | 0; //@line 3501
                if (($525 | 0) > 0 | ($525 | 0) == 0 & (HEAP32[$520 >> 2] | 0) >>> 0 > 0) {
                 HEAP32[$19 >> 2] = 0; //@line 3508
                 HEAP32[$447 >> 2] = 0; //@line 3509
                 HEAP32[$448 >> 2] = 0; //@line 3510
                 $531 = HEAP32[$52 >> 2] | 0; //@line 3511
                 $532 = HEAP32[$51 >> 2] | 0; //@line 3512
                 $533 = $531 - $532 | 0; //@line 3513
                 $534 = ($533 | 0) / 72 | 0; //@line 3514
                 $536 = $532; //@line 3516
                 $537 = $531; //@line 3517
                 do {
                  if ($533 | 0) {
                   if ($534 >>> 0 > 59652323) {
                    label = 200; //@line 3522
                    break L231;
                   }
                   __THREW__ = 0; //@line 3525
                   $540 = invoke_ii(142, $533 | 0) | 0; //@line 3526
                   $541 = __THREW__; //@line 3527
                   __THREW__ = 0; //@line 3527
                   if ($541 & 1) {
                    label = 205; //@line 3530
                    break L231;
                   }
                   HEAP32[$447 >> 2] = $540; //@line 3533
                   HEAP32[$19 >> 2] = $540; //@line 3534
                   HEAP32[$450 >> 2] = $540 + ($534 * 72 | 0); //@line 3536
                   if (($536 | 0) == ($537 | 0)) {
                    break;
                   } else {
                    $$0$i$i18$i150$i$i$i = $536; //@line 3541
                    $545 = $540; //@line 3541
                   }
                   do {
                    __THREW__ = 0; //@line 3544
                    invoke_vii(120, $545 | 0, $$0$i$i18$i150$i$i$i | 0); //@line 3545
                    $546 = __THREW__; //@line 3546
                    __THREW__ = 0; //@line 3546
                    if ($546 & 1) {
                     label = 205; //@line 3549
                     break L231;
                    }
                    $$0$i$i18$i150$i$i$i = $$0$i$i18$i150$i$i$i + 72 | 0; //@line 3552
                    $545 = (HEAP32[$447 >> 2] | 0) + 72 | 0; //@line 3554
                    HEAP32[$447 >> 2] = $545; //@line 3555
                   } while (($$0$i$i18$i150$i$i$i | 0) != ($537 | 0));
                  }
                 } while (0);
                 HEAP32[$20 >> 2] = 0; //@line 3565
                 HEAP32[$20 + 4 >> 2] = 0; //@line 3565
                 HEAP32[$20 + 8 >> 2] = 0; //@line 3565
                 __THREW__ = 0; //@line 3566
                 invoke_viiii(14, $$val | 0, $19 | 0, $$val3 | 0, $20 | 0); //@line 3567
                 $554 = __THREW__; //@line 3568
                 __THREW__ = 0; //@line 3568
                 if ($554 & 1) {
                  label = 228; //@line 3571
                  break;
                 }
                 if ((HEAP8[$449 >> 0] | 0) < 0) {
                  __ZdlPv(HEAP32[$20 >> 2] | 0); //@line 3578
                 }
                 __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($19); //@line 3580
                 $$1$i$i$i = 1; //@line 3581
                } else {
                 HEAP32[$21 >> 2] = 0; //@line 3583
                 HEAP32[$458 >> 2] = 0; //@line 3584
                 HEAP32[$459 >> 2] = 0; //@line 3585
                 $594 = HEAP32[$98 >> 2] | 0; //@line 3586
                 $595 = HEAP32[$97 >> 2] | 0; //@line 3587
                 $596 = $594 - $595 | 0; //@line 3588
                 $597 = ($596 | 0) / 72 | 0; //@line 3589
                 $599 = $595; //@line 3591
                 $600 = $594; //@line 3592
                 do {
                  if ($596 | 0) {
                   if ($597 >>> 0 > 59652323) {
                    label = 233; //@line 3597
                    break L231;
                   }
                   __THREW__ = 0; //@line 3600
                   $603 = invoke_ii(142, $596 | 0) | 0; //@line 3601
                   $604 = __THREW__; //@line 3602
                   __THREW__ = 0; //@line 3602
                   if ($604 & 1) {
                    label = 238; //@line 3605
                    break L231;
                   }
                   HEAP32[$458 >> 2] = $603; //@line 3608
                   HEAP32[$21 >> 2] = $603; //@line 3609
                   HEAP32[$461 >> 2] = $603 + ($597 * 72 | 0); //@line 3611
                   if (($599 | 0) == ($600 | 0)) {
                    break;
                   } else {
                    $$0$i$i18$i182$i$i$i = $599; //@line 3616
                    $608 = $603; //@line 3616
                   }
                   do {
                    __THREW__ = 0; //@line 3619
                    invoke_vii(120, $608 | 0, $$0$i$i18$i182$i$i$i | 0); //@line 3620
                    $609 = __THREW__; //@line 3621
                    __THREW__ = 0; //@line 3621
                    if ($609 & 1) {
                     label = 238; //@line 3624
                     break L231;
                    }
                    $$0$i$i18$i182$i$i$i = $$0$i$i18$i182$i$i$i + 72 | 0; //@line 3627
                    $608 = (HEAP32[$458 >> 2] | 0) + 72 | 0; //@line 3629
                    HEAP32[$458 >> 2] = $608; //@line 3630
                   } while (($$0$i$i18$i182$i$i$i | 0) != ($600 | 0));
                  }
                 } while (0);
                 HEAP32[$22 >> 2] = 0; //@line 3640
                 HEAP32[$22 + 4 >> 2] = 0; //@line 3640
                 HEAP32[$22 + 8 >> 2] = 0; //@line 3640
                 __THREW__ = 0; //@line 3641
                 invoke_viiii(14, $$val | 0, $21 | 0, $$val3 | 0, $22 | 0); //@line 3642
                 $617 = __THREW__; //@line 3643
                 __THREW__ = 0; //@line 3643
                 if ($617 & 1) {
                  label = 243; //@line 3646
                  break;
                 }
                 if ((HEAP8[$460 >> 0] | 0) < 0) {
                  __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 3653
                 }
                 __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($21); //@line 3655
                 $$1$i$i$i = 0; //@line 3656
                }
                if ((HEAP8[$452 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$451 >> 2] | 0); //@line 3662
                }
                $638 = HEAP32[$453 >> 2] | 0; //@line 3664
                if ($638 | 0) {
                 $640 = HEAP32[$456 >> 2] | 0; //@line 3667
                 if (($640 | 0) == ($638 | 0)) {
                  $650 = $638; //@line 3670
                 } else {
                  $643 = $640; //@line 3672
                  do {
                   $642 = $643 + -72 | 0; //@line 3674
                   HEAP32[$456 >> 2] = $642; //@line 3675
                   __THREW__ = 0; //@line 3676
                   HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 3677
                   invoke_viii(13, $$byval_copy72 | 0, $457 | 0, $642 | 0); //@line 3678
                   $644 = __THREW__; //@line 3679
                   __THREW__ = 0; //@line 3679
                   if ($644 & 1) {
                    label = 255; //@line 3682
                    break L231;
                   }
                   $643 = HEAP32[$456 >> 2] | 0; //@line 3685
                  } while (($643 | 0) != ($638 | 0));
                  $650 = HEAP32[$453 >> 2] | 0; //@line 3694
                 }
                 __ZdlPv($650); //@line 3696
                }
                if ((HEAP8[$455 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$454 >> 2] | 0); //@line 3702
                }
                if ($$1$i$i$i | 0) {
                 $$2$i$i$i = $$1$i$i$i; //@line 3706
                 label = 274; //@line 3707
                 break L42;
                }
               }
               switch (label | 0) {
               case 173:
                {
                 __THREW__ = 0; //@line 3713
                 invoke_vi(254, $16 | 0); //@line 3714
                 __THREW__ = 0; //@line 3715
                 label = 23; //@line 3716
                 break;
                }
               case 191:
                {
                 ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 3722
                 break;
                }
               case 200:
                {
                 __THREW__ = 0; //@line 3727
                 invoke_vi(254, $19 | 0); //@line 3728
                 __THREW__ = 0; //@line 3729
                 label = 205; //@line 3730
                 break;
                }
               case 210:
                {
                 $559 = ___cxa_find_matching_catch_2() | 0; //@line 3734
                 $560 = tempRet0; //@line 3735
                 if ((HEAP8[$440 >> 0] | 0) < 0) {
                  __ZdlPv(HEAP32[$17 >> 2] | 0); //@line 3740
                 }
                 __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($16); //@line 3742
                 $$14$i$i$i = $560; //@line 3743
                 $$1456$i$i$i = $559; //@line 3743
                 break L42;
                 break;
                }
               case 213:
                {
                 $564 = ___cxa_find_matching_catch_2() | 0; //@line 3748
                 $$9$i$i$i = tempRet0; //@line 3750
                 $$951$i$i$i = $564; //@line 3750
                 break;
                }
               case 214:
                {
                 $566 = ___cxa_find_matching_catch_2() | 0; //@line 3754
                 $eh$lpad$body159$i$i$i$index36Z2D = tempRet0; //@line 3756
                 $eh$lpad$body159$i$i$i$indexZ2D = $566; //@line 3756
                 label = 215; //@line 3757
                 break;
                }
               case 216:
                {
                 $568 = ___cxa_find_matching_catch_2() | 0; //@line 3761
                 $569 = tempRet0; //@line 3762
                 if ((HEAP8[$442 >> 0] | 0) < 0) {
                  __ZdlPv(HEAP32[$441 >> 2] | 0); //@line 3767
                 }
                 $573 = HEAP32[$443 >> 2] | 0; //@line 3769
                 if ($573 | 0) {
                  $575 = HEAP32[$462 >> 2] | 0; //@line 3772
                  do {
                   if (($575 | 0) == ($573 | 0)) {
                    $585 = $573; //@line 3776
                   } else {
                    $578 = $575; //@line 3778
                    while (1) {
                     $577 = $578 + -72 | 0; //@line 3780
                     HEAP32[$462 >> 2] = $577; //@line 3781
                     __THREW__ = 0; //@line 3782
                     HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 3783
                     invoke_viii(13, $$byval_copy72 | 0, $463 | 0, $577 | 0); //@line 3784
                     $579 = __THREW__; //@line 3785
                     __THREW__ = 0; //@line 3785
                     if ($579 & 1) {
                      label = 223; //@line 3788
                      break;
                     }
                     $578 = HEAP32[$462 >> 2] | 0; //@line 3791
                     if (($578 | 0) == ($573 | 0)) {
                      label = 224; //@line 3794
                      break;
                     }
                    }
                    if ((label | 0) == 223) {
                     $583 = ___cxa_find_matching_catch_3(0) | 0; //@line 3801
                     ___clang_call_terminate($583); //@line 3803
                    } else if ((label | 0) == 224) {
                     $585 = HEAP32[$443 >> 2] | 0; //@line 3808
                     break;
                    }
                   }
                  } while (0);
                  __ZdlPv($585); //@line 3813
                 }
                 if ((HEAP8[$445 >> 0] | 0) >= 0) {
                  $$8$i$i$i = $569; //@line 3818
                  $$850$i$i$i = $568; //@line 3818
                  label = 261; //@line 3819
                  break;
                 }
                 __ZdlPv(HEAP32[$444 >> 2] | 0); //@line 3823
                 $$8$i$i$i = $569; //@line 3824
                 $$850$i$i$i = $568; //@line 3824
                 label = 261; //@line 3825
                 break;
                }
               case 228:
                {
                 $589 = ___cxa_find_matching_catch_2() | 0; //@line 3829
                 $590 = tempRet0; //@line 3830
                 if ((HEAP8[$449 >> 0] | 0) < 0) {
                  __ZdlPv(HEAP32[$20 >> 2] | 0); //@line 3835
                 }
                 __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($19); //@line 3837
                 $$8$i$i$i = $590; //@line 3838
                 $$850$i$i$i = $589; //@line 3838
                 label = 261; //@line 3839
                 break;
                }
               case 233:
                {
                 __THREW__ = 0; //@line 3843
                 invoke_vi(254, $21 | 0); //@line 3844
                 __THREW__ = 0; //@line 3845
                 label = 238; //@line 3846
                 break;
                }
               case 243:
                {
                 $622 = ___cxa_find_matching_catch_2() | 0; //@line 3850
                 $623 = tempRet0; //@line 3851
                 if ((HEAP8[$460 >> 0] | 0) < 0) {
                  __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 3856
                 }
                 __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($21); //@line 3858
                 $$8$i$i$i = $623; //@line 3859
                 $$850$i$i$i = $622; //@line 3859
                 label = 261; //@line 3860
                 break;
                }
               case 246:
                {
                 $627 = ___cxa_allocate_exception(8) | 0; //@line 3864
                 __THREW__ = 0; //@line 3865
                 invoke_vii(125, $627 | 0, 16909); //@line 3866
                 $628 = __THREW__; //@line 3867
                 __THREW__ = 0; //@line 3867
                 if ($628 & 1) {
                  $633 = ___cxa_find_matching_catch_2() | 0; //@line 3870
                  $634 = tempRet0; //@line 3871
                  ___cxa_free_exception($627 | 0); //@line 3872
                  $$8$i$i$i = $634; //@line 3873
                  $$850$i$i$i = $633; //@line 3873
                  label = 261; //@line 3874
                  break;
                 } else {
                  __THREW__ = 0; //@line 3877
                  invoke_viii(16, $627 | 0, 2824, 242); //@line 3878
                  __THREW__ = 0; //@line 3879
                  $631 = ___cxa_find_matching_catch_2() | 0; //@line 3880
                  $eh$lpad$body159$i$i$i$index36Z2D = tempRet0; //@line 3882
                  $eh$lpad$body159$i$i$i$indexZ2D = $631; //@line 3882
                  label = 215; //@line 3883
                  break;
                 }
                 break;
                }
               case 255:
                {
                 ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 3891
                 break;
                }
               }
               if ((label | 0) == 23) {
                $95 = ___cxa_find_matching_catch_2() | 0; //@line 3897
                $96 = tempRet0; //@line 3898
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($16); //@line 3899
                $eh$lpad$body$i$i$i$index20Z2D = $96; //@line 3900
                $eh$lpad$body$i$i$i$indexZ2D = $95; //@line 3900
                label = 24; //@line 3901
                break;
               } else if ((label | 0) == 205) {
                $552 = ___cxa_find_matching_catch_2() | 0; //@line 3905
                $553 = tempRet0; //@line 3906
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($19); //@line 3907
                $eh$lpad$body159$i$i$i$index36Z2D = $553; //@line 3908
                $eh$lpad$body159$i$i$i$indexZ2D = $552; //@line 3908
                label = 215; //@line 3909
               } else if ((label | 0) == 238) {
                $615 = ___cxa_find_matching_catch_2() | 0; //@line 3912
                $616 = tempRet0; //@line 3913
                __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($21); //@line 3914
                $eh$lpad$body159$i$i$i$index36Z2D = $616; //@line 3915
                $eh$lpad$body159$i$i$i$indexZ2D = $615; //@line 3915
                label = 215; //@line 3916
               }
               if ((label | 0) == 215) {
                $$8$i$i$i = $eh$lpad$body159$i$i$i$index36Z2D; //@line 3919
                $$850$i$i$i = $eh$lpad$body159$i$i$i$indexZ2D; //@line 3919
                label = 261; //@line 3920
               }
               do {
                if ((label | 0) == 261) {
                 if ((HEAP8[$452 >> 0] | 0) < 0) {
                  __ZdlPv(HEAP32[$451 >> 2] | 0); //@line 3928
                 }
                 $657 = HEAP32[$453 >> 2] | 0; //@line 3930
                 if ($657 | 0) {
                  $659 = HEAP32[$456 >> 2] | 0; //@line 3933
                  do {
                   if (($659 | 0) == ($657 | 0)) {
                    $669 = $657; //@line 3937
                   } else {
                    $662 = $659; //@line 3939
                    while (1) {
                     $661 = $662 + -72 | 0; //@line 3941
                     HEAP32[$456 >> 2] = $661; //@line 3942
                     __THREW__ = 0; //@line 3943
                     HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 3944
                     invoke_viii(13, $$byval_copy72 | 0, $457 | 0, $661 | 0); //@line 3945
                     $663 = __THREW__; //@line 3946
                     __THREW__ = 0; //@line 3946
                     if ($663 & 1) {
                      label = 268; //@line 3949
                      break;
                     }
                     $662 = HEAP32[$456 >> 2] | 0; //@line 3952
                     if (($662 | 0) == ($657 | 0)) {
                      label = 269; //@line 3955
                      break;
                     }
                    }
                    if ((label | 0) == 268) {
                     $667 = ___cxa_find_matching_catch_3(0) | 0; //@line 3962
                     ___clang_call_terminate($667); //@line 3964
                    } else if ((label | 0) == 269) {
                     $669 = HEAP32[$453 >> 2] | 0; //@line 3969
                     break;
                    }
                   }
                  } while (0);
                  __ZdlPv($669); //@line 3974
                 }
                 if ((HEAP8[$455 >> 0] | 0) >= 0) {
                  $$9$i$i$i = $$8$i$i$i; //@line 3979
                  $$951$i$i$i = $$850$i$i$i; //@line 3979
                  break;
                 }
                 __ZdlPv(HEAP32[$454 >> 2] | 0); //@line 3983
                 $$9$i$i$i = $$8$i$i$i; //@line 3984
                 $$951$i$i$i = $$850$i$i$i; //@line 3984
                }
               } while (0);
               $$14$i$i$i = $$9$i$i$i; //@line 3987
               $$1456$i$i$i = $$951$i$i$i; //@line 3987
              } else {
               $$2$i$i$i = 0; //@line 3989
               label = 274; //@line 3990
              }
             }
            } while (0);
            if ((label | 0) == 24) {
             $$14$i$i$i = $eh$lpad$body$i$i$i$index20Z2D; //@line 3995
             $$1456$i$i$i = $eh$lpad$body$i$i$i$indexZ2D; //@line 3995
            } else if ((label | 0) == 274) {
             if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 4003
             }
             if (!$$2$i$i$i) {
              label = 280; //@line 4007
              break;
             } else {
              break;
             }
            }
            if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 4018
             $$15$i$i$i = $$14$i$i$i; //@line 4019
             $$1557$i$i$i = $$1456$i$i$i; //@line 4019
            } else {
             $$15$i$i$i = $$14$i$i$i; //@line 4021
             $$1557$i$i$i = $$1456$i$i$i; //@line 4021
            }
           }
           $$21$i$i$i = $$15$i$i$i; //@line 4024
           $$2163$i$i$i = $$1557$i$i$i; //@line 4024
           break L7;
          }
         } while (0);
         L383 : do {
          if ((label | 0) == 280) {
           HEAP32[$23 >> 2] = 0; //@line 4031
           $682 = $23 + 4 | 0; //@line 4032
           HEAP32[$682 >> 2] = 0; //@line 4033
           HEAP32[$23 + 8 >> 2] = 0; //@line 4035
           $685 = HEAP32[$6 + 44 >> 2] | 0; //@line 4037
           $686 = HEAP32[$6 + 40 >> 2] | 0; //@line 4038
           $687 = $685 - $686 | 0; //@line 4039
           $688 = ($687 | 0) / 72 | 0; //@line 4040
           $690 = $686; //@line 4042
           $691 = $685; //@line 4043
           L385 : do {
            if ($687 | 0) {
             L387 : do {
              if ($688 >>> 0 > 59652323) {
               __THREW__ = 0; //@line 4049
               invoke_vi(254, $23 | 0); //@line 4050
               __THREW__ = 0; //@line 4051
              } else {
               __THREW__ = 0; //@line 4053
               $694 = invoke_ii(142, $687 | 0) | 0; //@line 4054
               $695 = __THREW__; //@line 4055
               __THREW__ = 0; //@line 4055
               if (!($695 & 1)) {
                HEAP32[$682 >> 2] = $694; //@line 4058
                HEAP32[$23 >> 2] = $694; //@line 4059
                HEAP32[$23 + 8 >> 2] = $694 + ($688 * 72 | 0); //@line 4062
                if (($690 | 0) == ($691 | 0)) {
                 break L385;
                } else {
                 $$0$i$i18$i225$i$i$i = $690; //@line 4067
                 $700 = $694; //@line 4067
                }
                while (1) {
                 __THREW__ = 0; //@line 4070
                 invoke_vii(120, $700 | 0, $$0$i$i18$i225$i$i$i | 0); //@line 4071
                 $701 = __THREW__; //@line 4072
                 __THREW__ = 0; //@line 4072
                 if ($701 & 1) {
                  break L387;
                 }
                 $$0$i$i18$i225$i$i$i = $$0$i$i18$i225$i$i$i + 72 | 0; //@line 4077
                 $700 = (HEAP32[$682 >> 2] | 0) + 72 | 0; //@line 4079
                 HEAP32[$682 >> 2] = $700; //@line 4080
                 if (($$0$i$i18$i225$i$i$i | 0) == ($691 | 0)) {
                  break L385;
                 }
                }
               }
              }
             } while (0);
             $707 = ___cxa_find_matching_catch_2() | 0; //@line 4091
             $708 = tempRet0; //@line 4092
             __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($23); //@line 4093
             $eh$lpad$body234$i$i$i$index43Z2D = $708; //@line 4094
             $eh$lpad$body234$i$i$i$indexZ2D = $707; //@line 4094
             label = 321; //@line 4095
             break L7;
            }
           } while (0);
           $709 = $24 + 11 | 0; //@line 4099
           HEAP32[$24 >> 2] = 0; //@line 4100
           HEAP32[$24 + 4 >> 2] = 0; //@line 4100
           HEAP32[$24 + 8 >> 2] = 0; //@line 4100
           __THREW__ = 0; //@line 4101
           invoke_viiii(14, $$val | 0, $23 | 0, $$val3 | 0, $24 | 0); //@line 4102
           $710 = __THREW__; //@line 4103
           __THREW__ = 0; //@line 4103
           if ($710 & 1) {
            $797 = ___cxa_find_matching_catch_2() | 0; //@line 4106
            $798 = tempRet0; //@line 4107
            if ((HEAP8[$709 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 4112
            }
            __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($23); //@line 4114
            $$21$i$i$i = $798; //@line 4115
            $$2163$i$i$i = $797; //@line 4115
            break L7;
           }
           if ((HEAP8[$709 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 4122
           }
           __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($23); //@line 4124
           __THREW__ = 0; //@line 4125
           $715 = invoke_ii(143, $$val | 0) | 0; //@line 4126
           $716 = __THREW__; //@line 4127
           __THREW__ = 0; //@line 4127
           do {
            if ($716 & 1) {
             label = 325; //@line 4131
            } else {
             __THREW__ = 0; //@line 4133
             invoke_vii(131, $7 | 0, $715 | 0); //@line 4134
             $718 = __THREW__; //@line 4135
             __THREW__ = 0; //@line 4135
             if ($718 & 1) {
              label = 325; //@line 4138
             } else {
              __THREW__ = 0; //@line 4140
              invoke_vii(120, $25 | 0, $7 | 0); //@line 4141
              $720 = __THREW__; //@line 4142
              __THREW__ = 0; //@line 4142
              L408 : do {
               if ($720 & 1) {
                label = 326; //@line 4146
               } else {
                __THREW__ = 0; //@line 4148
                $722 = invoke_ii(144, $25 | 0) | 0; //@line 4149
                $723 = __THREW__; //@line 4150
                __THREW__ = 0; //@line 4150
                if ($723 & 1) {
                 $806 = ___cxa_find_matching_catch_2() | 0; //@line 4153
                 $807 = tempRet0; //@line 4154
                 $808 = $25 + 52 | 0; //@line 4155
                 if ((HEAP8[$808 + 11 >> 0] | 0) < 0) {
                  __ZdlPv(HEAP32[$808 >> 2] | 0); //@line 4161
                 }
                 $813 = $25 + 40 | 0; //@line 4163
                 $814 = HEAP32[$813 >> 2] | 0; //@line 4164
                 if ($814 | 0) {
                  $816 = $25 + 44 | 0; //@line 4167
                  $817 = HEAP32[$816 >> 2] | 0; //@line 4168
                  do {
                   if (($817 | 0) == ($814 | 0)) {
                    $828 = $814; //@line 4172
                   } else {
                    $819 = $25 + 48 | 0; //@line 4174
                    $821 = $817; //@line 4175
                    while (1) {
                     $820 = $821 + -72 | 0; //@line 4177
                     HEAP32[$816 >> 2] = $820; //@line 4178
                     __THREW__ = 0; //@line 4179
                     HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 4180
                     invoke_viii(13, $$byval_copy72 | 0, $819 | 0, $820 | 0); //@line 4181
                     $822 = __THREW__; //@line 4182
                     __THREW__ = 0; //@line 4182
                     if ($822 & 1) {
                      label = 335; //@line 4185
                      break;
                     }
                     $821 = HEAP32[$816 >> 2] | 0; //@line 4188
                     if (($821 | 0) == ($814 | 0)) {
                      label = 336; //@line 4191
                      break;
                     }
                    }
                    if ((label | 0) == 335) {
                     $826 = ___cxa_find_matching_catch_3(0) | 0; //@line 4198
                     ___clang_call_terminate($826); //@line 4200
                    } else if ((label | 0) == 336) {
                     $828 = HEAP32[$813 >> 2] | 0; //@line 4205
                     break;
                    }
                   }
                  } while (0);
                  __ZdlPv($828); //@line 4210
                 }
                 $829 = $25 + 4 | 0; //@line 4212
                 if ((HEAP8[$829 + 11 >> 0] | 0) >= 0) {
                  $$19$i$i$i = $807; //@line 4217
                  $$1961$i$i$i = $806; //@line 4217
                  break;
                 }
                 __ZdlPv(HEAP32[$829 >> 2] | 0); //@line 4221
                 $$19$i$i$i = $807; //@line 4222
                 $$1961$i$i$i = $806; //@line 4222
                 break;
                }
                $725 = $25 + 52 | 0; //@line 4225
                if ((HEAP8[$725 + 11 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$725 >> 2] | 0); //@line 4231
                }
                $730 = $25 + 40 | 0; //@line 4233
                $731 = HEAP32[$730 >> 2] | 0; //@line 4234
                if ($731 | 0) {
                 $733 = $25 + 44 | 0; //@line 4237
                 $734 = HEAP32[$733 >> 2] | 0; //@line 4238
                 do {
                  if (($734 | 0) == ($731 | 0)) {
                   $745 = $731; //@line 4242
                  } else {
                   $736 = $25 + 48 | 0; //@line 4244
                   $738 = $734; //@line 4245
                   while (1) {
                    $737 = $738 + -72 | 0; //@line 4247
                    HEAP32[$733 >> 2] = $737; //@line 4248
                    __THREW__ = 0; //@line 4249
                    HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 4250
                    invoke_viii(13, $$byval_copy72 | 0, $736 | 0, $737 | 0); //@line 4251
                    $739 = __THREW__; //@line 4252
                    __THREW__ = 0; //@line 4252
                    if ($739 & 1) {
                     label = 302; //@line 4255
                     break;
                    }
                    $738 = HEAP32[$733 >> 2] | 0; //@line 4258
                    if (($738 | 0) == ($731 | 0)) {
                     label = 303; //@line 4261
                     break;
                    }
                   }
                   if ((label | 0) == 302) {
                    $743 = ___cxa_find_matching_catch_3(0) | 0; //@line 4268
                    ___clang_call_terminate($743); //@line 4270
                   } else if ((label | 0) == 303) {
                    $745 = HEAP32[$730 >> 2] | 0; //@line 4275
                    break;
                   }
                  }
                 } while (0);
                 __ZdlPv($745); //@line 4280
                }
                $746 = $25 + 4 | 0; //@line 4282
                if ((HEAP8[$746 + 11 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$746 >> 2] | 0); //@line 4288
                }
                if (!$722) {
                 $878 = ___cxa_allocate_exception(8) | 0; //@line 4291
                 __THREW__ = 0; //@line 4292
                 invoke_vii(125, $878 | 0, 16909); //@line 4293
                 $879 = __THREW__; //@line 4294
                 __THREW__ = 0; //@line 4294
                 if ($879 & 1) {
                  $882 = ___cxa_find_matching_catch_2() | 0; //@line 4297
                  $883 = tempRet0; //@line 4298
                  ___cxa_free_exception($878 | 0); //@line 4299
                  $$19$i$i$i = $883; //@line 4300
                  $$1961$i$i$i = $882; //@line 4300
                  break;
                 } else {
                  __THREW__ = 0; //@line 4303
                  invoke_viii(16, $878 | 0, 2824, 242); //@line 4304
                  __THREW__ = 0; //@line 4305
                  label = 326; //@line 4306
                  break;
                 }
                }
                $752 = $7 + 24 | 0; //@line 4311
                $757 = HEAP32[$752 + 4 >> 2] | 0; //@line 4316
                do {
                 if (($757 | 0) > 0 | ($757 | 0) == 0 & (HEAP32[$752 >> 2] | 0) >>> 0 > 0) {
                  HEAP32[$26 >> 2] = 0; //@line 4325
                  $764 = $26 + 4 | 0; //@line 4326
                  HEAP32[$764 >> 2] = 0; //@line 4327
                  HEAP32[$26 + 8 >> 2] = 0; //@line 4329
                  $767 = HEAP32[$5 + 44 >> 2] | 0; //@line 4331
                  $768 = HEAP32[$5 + 40 >> 2] | 0; //@line 4332
                  $769 = $767 - $768 | 0; //@line 4333
                  $770 = ($769 | 0) / 72 | 0; //@line 4334
                  $772 = $768; //@line 4336
                  $773 = $767; //@line 4337
                  L455 : do {
                   if ($769 | 0) {
                    L457 : do {
                     if ($770 >>> 0 > 59652323) {
                      __THREW__ = 0; //@line 4343
                      invoke_vi(254, $26 | 0); //@line 4344
                      __THREW__ = 0; //@line 4345
                     } else {
                      __THREW__ = 0; //@line 4347
                      $776 = invoke_ii(142, $769 | 0) | 0; //@line 4348
                      $777 = __THREW__; //@line 4349
                      __THREW__ = 0; //@line 4349
                      if ($777 & 1) {
                       break;
                      }
                      HEAP32[$764 >> 2] = $776; //@line 4354
                      HEAP32[$26 >> 2] = $776; //@line 4355
                      HEAP32[$26 + 8 >> 2] = $776 + ($770 * 72 | 0); //@line 4358
                      if (($772 | 0) == ($773 | 0)) {
                       break L455;
                      } else {
                       $$0$i$i18$i255$i$i$i = $772; //@line 4363
                       $782 = $776; //@line 4363
                      }
                      while (1) {
                       __THREW__ = 0; //@line 4366
                       invoke_vii(120, $782 | 0, $$0$i$i18$i255$i$i$i | 0); //@line 4367
                       $783 = __THREW__; //@line 4368
                       __THREW__ = 0; //@line 4368
                       if ($783 & 1) {
                        break L457;
                       }
                       $$0$i$i18$i255$i$i$i = $$0$i$i18$i255$i$i$i + 72 | 0; //@line 4373
                       $782 = (HEAP32[$764 >> 2] | 0) + 72 | 0; //@line 4375
                       HEAP32[$764 >> 2] = $782; //@line 4376
                       if (($$0$i$i18$i255$i$i$i | 0) == ($773 | 0)) {
                        break L455;
                       }
                      }
                     }
                    } while (0);
                    $789 = ___cxa_find_matching_catch_2() | 0; //@line 4386
                    $790 = tempRet0; //@line 4387
                    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($26); //@line 4388
                    $eh$lpad$body264$i$i$i$index49Z2D = $790; //@line 4389
                    $eh$lpad$body264$i$i$i$indexZ2D = $789; //@line 4389
                    label = 327; //@line 4390
                    break L408;
                   }
                  } while (0);
                  $791 = $27 + 11 | 0; //@line 4394
                  HEAP32[$27 >> 2] = 0; //@line 4395
                  HEAP32[$27 + 4 >> 2] = 0; //@line 4395
                  HEAP32[$27 + 8 >> 2] = 0; //@line 4395
                  __THREW__ = 0; //@line 4396
                  invoke_viiii(14, $$val | 0, $26 | 0, $$val3 | 0, $27 | 0); //@line 4397
                  $792 = __THREW__; //@line 4398
                  __THREW__ = 0; //@line 4398
                  if ($792 & 1) {
                   $834 = ___cxa_find_matching_catch_2() | 0; //@line 4401
                   $835 = tempRet0; //@line 4402
                   if ((HEAP8[$791 >> 0] | 0) < 0) {
                    __ZdlPv(HEAP32[$27 >> 2] | 0); //@line 4407
                   }
                   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($26); //@line 4409
                   $$19$i$i$i = $835; //@line 4410
                   $$1961$i$i$i = $834; //@line 4410
                   break L408;
                  } else {
                   if ((HEAP8[$791 >> 0] | 0) < 0) {
                    __ZdlPv(HEAP32[$27 >> 2] | 0); //@line 4417
                   }
                   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($26); //@line 4419
                   break;
                  }
                 } else {
                  HEAP32[$28 >> 2] = 0; //@line 4424
                  $840 = $28 + 4 | 0; //@line 4425
                  HEAP32[$840 >> 2] = 0; //@line 4426
                  HEAP32[$28 + 8 >> 2] = 0; //@line 4428
                  $843 = HEAP32[$4 + 44 >> 2] | 0; //@line 4430
                  $844 = HEAP32[$4 + 40 >> 2] | 0; //@line 4431
                  $845 = $843 - $844 | 0; //@line 4432
                  $846 = ($845 | 0) / 72 | 0; //@line 4433
                  $848 = $844; //@line 4435
                  $849 = $843; //@line 4436
                  L476 : do {
                   if ($845 | 0) {
                    L478 : do {
                     if ($846 >>> 0 > 59652323) {
                      __THREW__ = 0; //@line 4442
                      invoke_vi(254, $28 | 0); //@line 4443
                      __THREW__ = 0; //@line 4444
                     } else {
                      __THREW__ = 0; //@line 4446
                      $852 = invoke_ii(142, $845 | 0) | 0; //@line 4447
                      $853 = __THREW__; //@line 4448
                      __THREW__ = 0; //@line 4448
                      if ($853 & 1) {
                       break;
                      }
                      HEAP32[$840 >> 2] = $852; //@line 4453
                      HEAP32[$28 >> 2] = $852; //@line 4454
                      HEAP32[$28 + 8 >> 2] = $852 + ($846 * 72 | 0); //@line 4457
                      if (($848 | 0) == ($849 | 0)) {
                       break L476;
                      } else {
                       $$0$i$i18$i287$i$i$i = $848; //@line 4462
                       $858 = $852; //@line 4462
                      }
                      while (1) {
                       __THREW__ = 0; //@line 4465
                       invoke_vii(120, $858 | 0, $$0$i$i18$i287$i$i$i | 0); //@line 4466
                       $859 = __THREW__; //@line 4467
                       __THREW__ = 0; //@line 4467
                       if ($859 & 1) {
                        break L478;
                       }
                       $$0$i$i18$i287$i$i$i = $$0$i$i18$i287$i$i$i + 72 | 0; //@line 4472
                       $858 = (HEAP32[$840 >> 2] | 0) + 72 | 0; //@line 4474
                       HEAP32[$840 >> 2] = $858; //@line 4475
                       if (($$0$i$i18$i287$i$i$i | 0) == ($849 | 0)) {
                        break L476;
                       }
                      }
                     }
                    } while (0);
                    $865 = ___cxa_find_matching_catch_2() | 0; //@line 4485
                    $866 = tempRet0; //@line 4486
                    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($28); //@line 4487
                    $eh$lpad$body264$i$i$i$index49Z2D = $866; //@line 4488
                    $eh$lpad$body264$i$i$i$indexZ2D = $865; //@line 4488
                    label = 327; //@line 4489
                    break L408;
                   }
                  } while (0);
                  $867 = $29 + 11 | 0; //@line 4493
                  HEAP32[$29 >> 2] = 0; //@line 4494
                  HEAP32[$29 + 4 >> 2] = 0; //@line 4494
                  HEAP32[$29 + 8 >> 2] = 0; //@line 4494
                  __THREW__ = 0; //@line 4495
                  invoke_viiii(14, $$val | 0, $28 | 0, $$val3 | 0, $29 | 0); //@line 4496
                  $868 = __THREW__; //@line 4497
                  __THREW__ = 0; //@line 4497
                  if ($868 & 1) {
                   $873 = ___cxa_find_matching_catch_2() | 0; //@line 4500
                   $874 = tempRet0; //@line 4501
                   if ((HEAP8[$867 >> 0] | 0) < 0) {
                    __ZdlPv(HEAP32[$29 >> 2] | 0); //@line 4506
                   }
                   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($28); //@line 4508
                   $$19$i$i$i = $874; //@line 4509
                   $$1961$i$i$i = $873; //@line 4509
                   break L408;
                  } else {
                   if ((HEAP8[$867 >> 0] | 0) < 0) {
                    __ZdlPv(HEAP32[$29 >> 2] | 0); //@line 4516
                   }
                   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($28); //@line 4518
                   break;
                  }
                 }
                } while (0);
                $884 = $7 + 52 | 0; //@line 4523
                if ((HEAP8[$884 + 11 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$884 >> 2] | 0); //@line 4529
                }
                $889 = $7 + 40 | 0; //@line 4531
                $890 = HEAP32[$889 >> 2] | 0; //@line 4532
                if ($890 | 0) {
                 $892 = $7 + 44 | 0; //@line 4535
                 $893 = HEAP32[$892 >> 2] | 0; //@line 4536
                 do {
                  if (($893 | 0) == ($890 | 0)) {
                   $904 = $890; //@line 4540
                  } else {
                   $895 = $7 + 48 | 0; //@line 4542
                   $897 = $893; //@line 4543
                   while (1) {
                    $896 = $897 + -72 | 0; //@line 4545
                    HEAP32[$892 >> 2] = $896; //@line 4546
                    __THREW__ = 0; //@line 4547
                    HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 4548
                    invoke_viii(13, $$byval_copy72 | 0, $895 | 0, $896 | 0); //@line 4549
                    $898 = __THREW__; //@line 4550
                    __THREW__ = 0; //@line 4550
                    if ($898 & 1) {
                     label = 368; //@line 4553
                     break;
                    }
                    $897 = HEAP32[$892 >> 2] | 0; //@line 4556
                    if (($897 | 0) == ($890 | 0)) {
                     label = 369; //@line 4559
                     break;
                    }
                   }
                   if ((label | 0) == 368) {
                    $902 = ___cxa_find_matching_catch_3(0) | 0; //@line 4566
                    ___clang_call_terminate($902); //@line 4568
                   } else if ((label | 0) == 369) {
                    $904 = HEAP32[$889 >> 2] | 0; //@line 4573
                    break;
                   }
                  }
                 } while (0);
                 __ZdlPv($904); //@line 4578
                }
                $905 = $7 + 4 | 0; //@line 4580
                if ((HEAP8[$905 + 11 >> 0] | 0) < 0) {
                 __ZdlPv(HEAP32[$905 >> 2] | 0); //@line 4586
                }
                break L383;
               }
              } while (0);
              if ((label | 0) == 326) {
               $804 = ___cxa_find_matching_catch_2() | 0; //@line 4592
               $eh$lpad$body264$i$i$i$index49Z2D = tempRet0; //@line 4594
               $eh$lpad$body264$i$i$i$indexZ2D = $804; //@line 4594
               label = 327; //@line 4595
              }
              if ((label | 0) == 327) {
               $$19$i$i$i = $eh$lpad$body264$i$i$i$index49Z2D; //@line 4598
               $$1961$i$i$i = $eh$lpad$body264$i$i$i$indexZ2D; //@line 4598
              }
              $910 = $7 + 52 | 0; //@line 4600
              if ((HEAP8[$910 + 11 >> 0] | 0) < 0) {
               __ZdlPv(HEAP32[$910 >> 2] | 0); //@line 4606
              }
              $915 = $7 + 40 | 0; //@line 4608
              $916 = HEAP32[$915 >> 2] | 0; //@line 4609
              if ($916 | 0) {
               $918 = $7 + 44 | 0; //@line 4612
               $919 = HEAP32[$918 >> 2] | 0; //@line 4613
               do {
                if (($919 | 0) == ($916 | 0)) {
                 $930 = $916; //@line 4617
                } else {
                 $921 = $7 + 48 | 0; //@line 4619
                 $923 = $919; //@line 4620
                 while (1) {
                  $922 = $923 + -72 | 0; //@line 4622
                  HEAP32[$918 >> 2] = $922; //@line 4623
                  __THREW__ = 0; //@line 4624
                  HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 4625
                  invoke_viii(13, $$byval_copy72 | 0, $921 | 0, $922 | 0); //@line 4626
                  $924 = __THREW__; //@line 4627
                  __THREW__ = 0; //@line 4627
                  if ($924 & 1) {
                   label = 381; //@line 4630
                   break;
                  }
                  $923 = HEAP32[$918 >> 2] | 0; //@line 4633
                  if (($923 | 0) == ($916 | 0)) {
                   label = 382; //@line 4636
                   break;
                  }
                 }
                 if ((label | 0) == 381) {
                  $928 = ___cxa_find_matching_catch_3(0) | 0; //@line 4643
                  ___clang_call_terminate($928); //@line 4645
                 } else if ((label | 0) == 382) {
                  $930 = HEAP32[$915 >> 2] | 0; //@line 4650
                  break;
                 }
                }
               } while (0);
               __ZdlPv($930); //@line 4655
              }
              $931 = $7 + 4 | 0; //@line 4657
              if ((HEAP8[$931 + 11 >> 0] | 0) >= 0) {
               $$20$i$i$i = $$19$i$i$i; //@line 4662
               $$2062$i$i$i = $$1961$i$i$i; //@line 4662
               break;
              }
              __ZdlPv(HEAP32[$931 >> 2] | 0); //@line 4666
              $$20$i$i$i = $$19$i$i$i; //@line 4667
              $$2062$i$i$i = $$1961$i$i$i; //@line 4667
             }
            }
           } while (0);
           if ((label | 0) == 325) {
            $802 = ___cxa_find_matching_catch_2() | 0; //@line 4672
            $$20$i$i$i = tempRet0; //@line 4674
            $$2062$i$i$i = $802; //@line 4674
           }
           $$21$i$i$i = $$20$i$i$i; //@line 4676
           $$2163$i$i$i = $$2062$i$i$i; //@line 4676
           break L7;
          }
         } while (0);
         $944 = $6 + 52 | 0; //@line 4680
         if ((HEAP8[$944 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$944 >> 2] | 0); //@line 4686
         }
         $949 = $6 + 40 | 0; //@line 4688
         $950 = HEAP32[$949 >> 2] | 0; //@line 4689
         if ($950 | 0) {
          $952 = $6 + 44 | 0; //@line 4692
          $953 = HEAP32[$952 >> 2] | 0; //@line 4693
          do {
           if (($953 | 0) == ($950 | 0)) {
            $964 = $950; //@line 4697
           } else {
            $955 = $6 + 48 | 0; //@line 4699
            $957 = $953; //@line 4700
            while (1) {
             $956 = $957 + -72 | 0; //@line 4702
             HEAP32[$952 >> 2] = $956; //@line 4703
             __THREW__ = 0; //@line 4704
             HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 4705
             invoke_viii(13, $$byval_copy72 | 0, $955 | 0, $956 | 0); //@line 4706
             $958 = __THREW__; //@line 4707
             __THREW__ = 0; //@line 4707
             if ($958 & 1) {
              label = 397; //@line 4710
              break;
             }
             $957 = HEAP32[$952 >> 2] | 0; //@line 4713
             if (($957 | 0) == ($950 | 0)) {
              label = 398; //@line 4716
              break;
             }
            }
            if ((label | 0) == 397) {
             $962 = ___cxa_find_matching_catch_3(0) | 0; //@line 4723
             ___clang_call_terminate($962); //@line 4725
            } else if ((label | 0) == 398) {
             $964 = HEAP32[$949 >> 2] | 0; //@line 4730
             break;
            }
           }
          } while (0);
          __ZdlPv($964); //@line 4735
         }
         $965 = $6 + 4 | 0; //@line 4737
         if ((HEAP8[$965 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$965 >> 2] | 0); //@line 4743
         }
         $970 = $5 + 52 | 0; //@line 4745
         if ((HEAP8[$970 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$970 >> 2] | 0); //@line 4751
         }
         $975 = $5 + 40 | 0; //@line 4753
         $976 = HEAP32[$975 >> 2] | 0; //@line 4754
         if ($976 | 0) {
          $978 = $5 + 44 | 0; //@line 4757
          $979 = HEAP32[$978 >> 2] | 0; //@line 4758
          do {
           if (($979 | 0) == ($976 | 0)) {
            $990 = $976; //@line 4762
           } else {
            $981 = $5 + 48 | 0; //@line 4764
            $983 = $979; //@line 4765
            while (1) {
             $982 = $983 + -72 | 0; //@line 4767
             HEAP32[$978 >> 2] = $982; //@line 4768
             __THREW__ = 0; //@line 4769
             HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 4770
             invoke_viii(13, $$byval_copy72 | 0, $981 | 0, $982 | 0); //@line 4771
             $984 = __THREW__; //@line 4772
             __THREW__ = 0; //@line 4772
             if ($984 & 1) {
              label = 409; //@line 4775
              break;
             }
             $983 = HEAP32[$978 >> 2] | 0; //@line 4778
             if (($983 | 0) == ($976 | 0)) {
              label = 410; //@line 4781
              break;
             }
            }
            if ((label | 0) == 409) {
             $988 = ___cxa_find_matching_catch_3(0) | 0; //@line 4788
             ___clang_call_terminate($988); //@line 4790
            } else if ((label | 0) == 410) {
             $990 = HEAP32[$975 >> 2] | 0; //@line 4795
             break;
            }
           }
          } while (0);
          __ZdlPv($990); //@line 4800
         }
         $991 = $5 + 4 | 0; //@line 4802
         if ((HEAP8[$991 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$991 >> 2] | 0); //@line 4808
         }
         $996 = $4 + 52 | 0; //@line 4810
         if ((HEAP8[$996 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$996 >> 2] | 0); //@line 4816
         }
         $1001 = $4 + 40 | 0; //@line 4818
         $1002 = HEAP32[$1001 >> 2] | 0; //@line 4819
         if ($1002 | 0) {
          $1004 = $4 + 44 | 0; //@line 4822
          $1005 = HEAP32[$1004 >> 2] | 0; //@line 4823
          do {
           if (($1005 | 0) == ($1002 | 0)) {
            $1016 = $1002; //@line 4827
           } else {
            $1007 = $4 + 48 | 0; //@line 4829
            $1009 = $1005; //@line 4830
            while (1) {
             $1008 = $1009 + -72 | 0; //@line 4832
             HEAP32[$1004 >> 2] = $1008; //@line 4833
             __THREW__ = 0; //@line 4834
             HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 4835
             invoke_viii(13, $$byval_copy72 | 0, $1007 | 0, $1008 | 0); //@line 4836
             $1010 = __THREW__; //@line 4837
             __THREW__ = 0; //@line 4837
             if ($1010 & 1) {
              label = 421; //@line 4840
              break;
             }
             $1009 = HEAP32[$1004 >> 2] | 0; //@line 4843
             if (($1009 | 0) == ($1002 | 0)) {
              label = 422; //@line 4846
              break;
             }
            }
            if ((label | 0) == 421) {
             $1014 = ___cxa_find_matching_catch_3(0) | 0; //@line 4853
             ___clang_call_terminate($1014); //@line 4855
            } else if ((label | 0) == 422) {
             $1016 = HEAP32[$1001 >> 2] | 0; //@line 4860
             break;
            }
           }
          } while (0);
          __ZdlPv($1016); //@line 4865
         }
         $1017 = $4 + 4 | 0; //@line 4867
         if ((HEAP8[$1017 + 11 >> 0] | 0) >= 0) {
          STACKTOP = sp; //@line 4872
          return;
         }
         __ZdlPv(HEAP32[$1017 >> 2] | 0); //@line 4875
         STACKTOP = sp; //@line 4876
         return;
        } else {
         label = 387; //@line 4878
        }
       } else {
        label = 387; //@line 4881
       }
      } else {
       label = 387; //@line 4884
      }
     } while (0);
     do {
      if ((label | 0) == 387) {
       $936 = ___cxa_allocate_exception(8) | 0; //@line 4889
       __THREW__ = 0; //@line 4890
       invoke_vii(125, $936 | 0, 16950); //@line 4891
       $937 = __THREW__; //@line 4892
       __THREW__ = 0; //@line 4892
       if ($937 & 1) {
        $942 = ___cxa_find_matching_catch_2() | 0; //@line 4895
        $943 = tempRet0; //@line 4896
        ___cxa_free_exception($936 | 0); //@line 4897
        $$21$i$i$i = $943; //@line 4898
        $$2163$i$i$i = $942; //@line 4898
        break;
       } else {
        __THREW__ = 0; //@line 4901
        invoke_viii(16, $936 | 0, 2824, 242); //@line 4902
        __THREW__ = 0; //@line 4903
        $940 = ___cxa_find_matching_catch_2() | 0; //@line 4904
        $eh$lpad$body234$i$i$i$index43Z2D = tempRet0; //@line 4906
        $eh$lpad$body234$i$i$i$indexZ2D = $940; //@line 4906
        label = 321; //@line 4907
        break;
       }
      }
     } while (0);
     if ((label | 0) == 321) {
      $$21$i$i$i = $eh$lpad$body234$i$i$i$index43Z2D; //@line 4913
      $$2163$i$i$i = $eh$lpad$body234$i$i$i$indexZ2D; //@line 4913
     }
     $1022 = $6 + 52 | 0; //@line 4915
     if ((HEAP8[$1022 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$1022 >> 2] | 0); //@line 4921
     }
     $1027 = $6 + 40 | 0; //@line 4923
     $1028 = HEAP32[$1027 >> 2] | 0; //@line 4924
     if ($1028 | 0) {
      $1030 = $6 + 44 | 0; //@line 4927
      $1031 = HEAP32[$1030 >> 2] | 0; //@line 4928
      do {
       if (($1031 | 0) == ($1028 | 0)) {
        $1042 = $1028; //@line 4932
       } else {
        $1033 = $6 + 48 | 0; //@line 4934
        $1035 = $1031; //@line 4935
        while (1) {
         $1034 = $1035 + -72 | 0; //@line 4937
         HEAP32[$1030 >> 2] = $1034; //@line 4938
         __THREW__ = 0; //@line 4939
         HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 4940
         invoke_viii(13, $$byval_copy72 | 0, $1033 | 0, $1034 | 0); //@line 4941
         $1036 = __THREW__; //@line 4942
         __THREW__ = 0; //@line 4942
         if ($1036 & 1) {
          label = 433; //@line 4945
          break;
         }
         $1035 = HEAP32[$1030 >> 2] | 0; //@line 4948
         if (($1035 | 0) == ($1028 | 0)) {
          label = 434; //@line 4951
          break;
         }
        }
        if ((label | 0) == 433) {
         $1040 = ___cxa_find_matching_catch_3(0) | 0; //@line 4958
         ___clang_call_terminate($1040); //@line 4960
        } else if ((label | 0) == 434) {
         $1042 = HEAP32[$1027 >> 2] | 0; //@line 4965
         break;
        }
       }
      } while (0);
      __ZdlPv($1042); //@line 4970
     }
     $1043 = $6 + 4 | 0; //@line 4972
     if ((HEAP8[$1043 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$1043 >> 2] | 0); //@line 4978
      $$22$i$i$i = $$21$i$i$i; //@line 4979
      $$2264$i$i$i = $$2163$i$i$i; //@line 4979
     } else {
      $$22$i$i$i = $$21$i$i$i; //@line 4981
      $$2264$i$i$i = $$2163$i$i$i; //@line 4981
     }
    }
   }
   if ((label | 0) == 21) {
    $91 = ___cxa_find_matching_catch_2() | 0; //@line 4986
    $$22$i$i$i = tempRet0; //@line 4988
    $$2264$i$i$i = $91; //@line 4988
   }
   $1048 = $5 + 52 | 0; //@line 4990
   if ((HEAP8[$1048 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$1048 >> 2] | 0); //@line 4996
   }
   $1053 = $5 + 40 | 0; //@line 4998
   $1054 = HEAP32[$1053 >> 2] | 0; //@line 4999
   if ($1054 | 0) {
    $1056 = $5 + 44 | 0; //@line 5002
    $1057 = HEAP32[$1056 >> 2] | 0; //@line 5003
    do {
     if (($1057 | 0) == ($1054 | 0)) {
      $1068 = $1054; //@line 5007
     } else {
      $1059 = $5 + 48 | 0; //@line 5009
      $1061 = $1057; //@line 5010
      while (1) {
       $1060 = $1061 + -72 | 0; //@line 5012
       HEAP32[$1056 >> 2] = $1060; //@line 5013
       __THREW__ = 0; //@line 5014
       HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 5015
       invoke_viii(13, $$byval_copy72 | 0, $1059 | 0, $1060 | 0); //@line 5016
       $1062 = __THREW__; //@line 5017
       __THREW__ = 0; //@line 5017
       if ($1062 & 1) {
        label = 445; //@line 5020
        break;
       }
       $1061 = HEAP32[$1056 >> 2] | 0; //@line 5023
       if (($1061 | 0) == ($1054 | 0)) {
        label = 446; //@line 5026
        break;
       }
      }
      if ((label | 0) == 445) {
       $1066 = ___cxa_find_matching_catch_3(0) | 0; //@line 5033
       ___clang_call_terminate($1066); //@line 5035
      } else if ((label | 0) == 446) {
       $1068 = HEAP32[$1053 >> 2] | 0; //@line 5040
       break;
      }
     }
    } while (0);
    __ZdlPv($1068); //@line 5045
   }
   $1069 = $5 + 4 | 0; //@line 5047
   if ((HEAP8[$1069 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$1069 >> 2] | 0); //@line 5053
    $$23$i$i$i = $$22$i$i$i; //@line 5054
    $$2365$i$i$i = $$2264$i$i$i; //@line 5054
   } else {
    $$23$i$i$i = $$22$i$i$i; //@line 5056
    $$2365$i$i$i = $$2264$i$i$i; //@line 5056
   }
  }
 }
 if ((label | 0) == 20) {
  $89 = ___cxa_find_matching_catch_2() | 0; //@line 5061
  $$23$i$i$i = tempRet0; //@line 5063
  $$2365$i$i$i = $89; //@line 5063
 }
 $1074 = $4 + 52 | 0; //@line 5065
 if ((HEAP8[$1074 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$1074 >> 2] | 0); //@line 5071
 }
 $1079 = $4 + 40 | 0; //@line 5073
 $1080 = HEAP32[$1079 >> 2] | 0; //@line 5074
 if ($1080 | 0) {
  $1082 = $4 + 44 | 0; //@line 5077
  $1083 = HEAP32[$1082 >> 2] | 0; //@line 5078
  do {
   if (($1083 | 0) == ($1080 | 0)) {
    $1094 = $1080; //@line 5082
   } else {
    $1085 = $4 + 48 | 0; //@line 5084
    $1087 = $1083; //@line 5085
    while (1) {
     $1086 = $1087 + -72 | 0; //@line 5087
     HEAP32[$1082 >> 2] = $1086; //@line 5088
     __THREW__ = 0; //@line 5089
     HEAP8[$$byval_copy72 >> 0] = HEAP8[$3 >> 0] | 0; //@line 5090
     invoke_viii(13, $$byval_copy72 | 0, $1085 | 0, $1086 | 0); //@line 5091
     $1088 = __THREW__; //@line 5092
     __THREW__ = 0; //@line 5092
     if ($1088 & 1) {
      label = 457; //@line 5095
      break;
     }
     $1087 = HEAP32[$1082 >> 2] | 0; //@line 5098
     if (($1087 | 0) == ($1080 | 0)) {
      label = 458; //@line 5101
      break;
     }
    }
    if ((label | 0) == 457) {
     $1092 = ___cxa_find_matching_catch_3(0) | 0; //@line 5108
     ___clang_call_terminate($1092); //@line 5110
    } else if ((label | 0) == 458) {
     $1094 = HEAP32[$1079 >> 2] | 0; //@line 5115
     break;
    }
   }
  } while (0);
  __ZdlPv($1094); //@line 5120
 }
 $1095 = $4 + 4 | 0; //@line 5122
 if ((HEAP8[$1095 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$2365$i$i$i | 0); //@line 5127
 }
 __ZdlPv(HEAP32[$1095 >> 2] | 0); //@line 5131
 ___resumeException($$2365$i$i$i | 0); //@line 5132
}
function __ZN19PredefinedFunctionsC2Ev($0) {
 $0 = $0 | 0;
 var $$018$i$i$i = 0, $$36 = 0, $$3645 = 0, $1 = 0, $10 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1059 = 0, $1060 = 0, $1061 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $11 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $111 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $114 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $12 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1229 = 0, $1230 = 0, $1231 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1258 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1268 = 0, $1270 = 0, $1277 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $134 = 0, $14 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $16 = 0, $164 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $18 = 0, $186 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $195 = 0, $2 = 0, $20 = 0, $207 = 0, $209 = 0, $21 = 0, $210 = 0, $212 = 0, $22 = 0, $225 = 0, $229 = 0, $23 = 0, $231 = 0, $232 = 0, $234 = 0, $24 = 0, $247 = 0, $25 = 0, $251 = 0, $253 = 0, $254 = 0, $256 = 0, $26 = 0, $268 = 0, $27 = 0, $270 = 0, $271 = 0, $273 = 0, $28 = 0, $286 = 0, $29 = 0, $290 = 0, $292 = 0, $293 = 0, $295 = 0, $3 = 0, $30 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $32 = 0, $324 = 0, $326 = 0, $327 = 0, $329 = 0, $33 = 0, $34 = 0, $341 = 0, $343 = 0, $344 = 0, $346 = 0, $35 = 0, $358 = 0, $36 = 0, $360 = 0, $361 = 0, $363 = 0, $37 = 0, $375 = 0, $376 = 0, $38 = 0, $381 = 0, $382 = 0, $384 = 0, $39 = 0, $396 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $401 = 0, $41 = 0, $414 = 0, $418 = 0, $42 = 0, $420 = 0, $421 = 0, $423 = 0, $43 = 0, $435 = 0, $437 = 0, $438 = 0, $44 = 0, $440 = 0, $45 = 0, $452 = 0, $454 = 0, $455 = 0, $457 = 0, $46 = 0, $469 = 0, $47 = 0, $471 = 0, $472 = 0, $474 = 0, $48 = 0, $486 = 0, $488 = 0, $489 = 0, $49 = 0, $491 = 0, $5 = 0, $50 = 0, $504 = 0, $508 = 0, $51 = 0, $510 = 0, $511 = 0, $513 = 0, $52 = 0, $526 = 0, $53 = 0, $530 = 0, $532 = 0, $533 = 0, $535 = 0, $54 = 0, $547 = 0, $549 = 0, $55 = 0, $550 = 0, $552 = 0, $56 = 0, $564 = 0, $566 = 0, $567 = 0, $569 = 0, $57 = 0, $58 = 0, $581 = 0, $583 = 0, $584 = 0, $586 = 0, $59 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $603 = 0, $61 = 0, $615 = 0, $617 = 0, $618 = 0, $62 = 0, $620 = 0, $63 = 0, $632 = 0, $633 = 0, $638 = 0, $639 = 0, $64 = 0, $641 = 0, $65 = 0, $654 = 0, $655 = 0, $66 = 0, $660 = 0, $661 = 0, $663 = 0, $67 = 0, $675 = 0, $676 = 0, $68 = 0, $681 = 0, $682 = 0, $684 = 0, $69 = 0, $697 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $702 = 0, $71 = 0, $714 = 0, $716 = 0, $717 = 0, $719 = 0, $72 = 0, $73 = 0, $732 = 0, $734 = 0, $735 = 0, $737 = 0, $74 = 0, $749 = 0, $75 = 0, $751 = 0, $752 = 0, $753 = 0, $765 = 0, $766 = 0, $767 = 0, $77 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $793 = 0, $794 = 0, $795 = 0, $8 = 0, $80 = 0, $807 = 0, $808 = 0, $809 = 0, $821 = 0, $822 = 0, $823 = 0, $835 = 0, $836 = 0, $837 = 0, $849 = 0, $850 = 0, $851 = 0, $863 = 0, $864 = 0, $865 = 0, $877 = 0, $878 = 0, $879 = 0, $891 = 0, $892 = 0, $893 = 0, $9 = 0, $905 = 0, $906 = 0, $907 = 0, $919 = 0, $920 = 0, $921 = 0, $93 = 0, $933 = 0, $934 = 0, $935 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $96 = 0, $961 = 0, $962 = 0, $963 = 0, $975 = 0, $976 = 0, $977 = 0, $98 = 0, $989 = 0, $990 = 0, $991 = 0, dest = 0, sp = 0, src = 0, stop = 0, $$018$i$i$i$looptemp = 0;
 sp = STACKTOP; //@line 17095
 STACKTOP = STACKTOP + 1312 | 0; //@line 17096
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1312); //@line 17096
 $1 = sp + 1304 | 0; //@line 17097
 $2 = sp + 1292 | 0; //@line 17098
 $3 = sp + 872 | 0; //@line 17099
 $4 = sp + 1280 | 0; //@line 17100
 $5 = sp + 848 | 0; //@line 17101
 $6 = sp + 1268 | 0; //@line 17102
 $7 = sp + 824 | 0; //@line 17103
 $8 = sp + 1256 | 0; //@line 17104
 $9 = sp + 800 | 0; //@line 17105
 $10 = sp + 1244 | 0; //@line 17106
 $11 = sp + 776 | 0; //@line 17107
 $12 = sp + 1232 | 0; //@line 17108
 $13 = sp + 752 | 0; //@line 17109
 $14 = sp + 1220 | 0; //@line 17110
 $15 = sp + 728 | 0; //@line 17111
 $16 = sp + 1208 | 0; //@line 17112
 $17 = sp + 704 | 0; //@line 17113
 $18 = sp + 1196 | 0; //@line 17114
 $19 = sp + 680 | 0; //@line 17115
 $20 = sp + 1184 | 0; //@line 17116
 $21 = sp + 656 | 0; //@line 17117
 $22 = sp + 1172 | 0; //@line 17118
 $23 = sp + 632 | 0; //@line 17119
 $24 = sp + 1160 | 0; //@line 17120
 $25 = sp + 608 | 0; //@line 17121
 $26 = sp + 1148 | 0; //@line 17122
 $27 = sp + 584 | 0; //@line 17123
 $28 = sp + 1136 | 0; //@line 17124
 $29 = sp + 560 | 0; //@line 17125
 $30 = sp + 1124 | 0; //@line 17126
 $31 = sp + 536 | 0; //@line 17127
 $32 = sp + 1112 | 0; //@line 17128
 $33 = sp + 512 | 0; //@line 17129
 $34 = sp + 496 | 0; //@line 17130
 $35 = sp + 472 | 0; //@line 17131
 $36 = sp + 1100 | 0; //@line 17132
 $37 = sp + 448 | 0; //@line 17133
 $38 = sp + 1088 | 0; //@line 17134
 $39 = sp + 424 | 0; //@line 17135
 $40 = sp + 1076 | 0; //@line 17136
 $41 = sp + 400 | 0; //@line 17137
 $42 = sp + 1064 | 0; //@line 17138
 $43 = sp + 376 | 0; //@line 17139
 $44 = sp + 1052 | 0; //@line 17140
 $45 = sp + 352 | 0; //@line 17141
 $46 = sp + 1040 | 0; //@line 17142
 $47 = sp + 328 | 0; //@line 17143
 $48 = sp + 1028 | 0; //@line 17144
 $49 = sp + 304 | 0; //@line 17145
 $50 = sp + 1016 | 0; //@line 17146
 $51 = sp + 280 | 0; //@line 17147
 $52 = sp + 1004 | 0; //@line 17148
 $53 = sp + 256 | 0; //@line 17149
 $54 = sp + 992 | 0; //@line 17150
 $55 = sp + 232 | 0; //@line 17151
 $56 = sp + 980 | 0; //@line 17152
 $57 = sp + 208 | 0; //@line 17153
 $58 = sp + 968 | 0; //@line 17154
 $59 = sp + 184 | 0; //@line 17155
 $60 = sp + 956 | 0; //@line 17156
 $61 = sp + 160 | 0; //@line 17157
 $62 = sp + 944 | 0; //@line 17158
 $63 = sp + 136 | 0; //@line 17159
 $64 = sp + 120 | 0; //@line 17160
 $65 = sp + 96 | 0; //@line 17161
 $66 = sp + 932 | 0; //@line 17162
 $67 = sp + 72 | 0; //@line 17163
 $68 = sp + 920 | 0; //@line 17164
 $69 = sp + 48 | 0; //@line 17165
 $70 = sp + 908 | 0; //@line 17166
 $71 = sp + 24 | 0; //@line 17167
 $72 = sp + 896 | 0; //@line 17168
 $73 = sp; //@line 17169
 $74 = $0 + 16 | 0; //@line 17170
 HEAP32[$0 >> 2] = 0; //@line 17171
 HEAP32[$0 + 4 >> 2] = 0; //@line 17171
 HEAP32[$0 + 8 >> 2] = 0; //@line 17171
 HEAP32[$0 + 12 >> 2] = 0; //@line 17171
 HEAPF32[$74 >> 2] = 1.0; //@line 17172
 HEAP32[$2 >> 2] = 0; //@line 17173
 HEAP32[$2 + 4 >> 2] = 0; //@line 17173
 HEAP32[$2 + 8 >> 2] = 0; //@line 17173
 $75 = $2 + 11 | 0; //@line 17174
 HEAP8[$75 >> 0] = 1; //@line 17175
 HEAP8[$2 >> 0] = 112; //@line 17176
 HEAP8[$2 + 1 >> 0] = 0; //@line 17178
 $77 = $3 + 16 | 0; //@line 17179
 HEAP32[$3 >> 2] = 3140; //@line 17180
 HEAP32[$77 >> 2] = $3; //@line 17181
 __THREW__ = 0; //@line 17182
 invoke_viii(21, $0 | 0, $2 | 0, $3 | 0); //@line 17183
 $78 = __THREW__; //@line 17184
 __THREW__ = 0; //@line 17184
 L1 : do {
  if ($78 & 1) {
   $751 = ___cxa_find_matching_catch_2() | 0; //@line 17188
   $752 = tempRet0; //@line 17189
   $753 = HEAP32[$77 >> 2] | 0; //@line 17190
   if (($3 | 0) == ($753 | 0)) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$753 >> 2] | 0) + 16 >> 2] & 511]($753); //@line 17196
   } else {
    if ($753 | 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$753 >> 2] | 0) + 20 >> 2] & 511]($753); //@line 17203
    }
   }
   if ((HEAP8[$75 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 17210
    $$36 = $752; //@line 17211
    $$3645 = $751; //@line 17211
   } else {
    $$36 = $752; //@line 17213
    $$3645 = $751; //@line 17213
   }
  } else {
   $80 = HEAP32[$77 >> 2] | 0; //@line 17216
   if (($3 | 0) == ($80 | 0)) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$80 >> 2] | 0) + 16 >> 2] & 511]($80); //@line 17222
   } else {
    if ($80 | 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$80 >> 2] | 0) + 20 >> 2] & 511]($80); //@line 17229
    }
   }
   if ((HEAP8[$75 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 17236
   }
   HEAP32[$4 + 8 >> 2] = 0; //@line 17239
   $93 = $4 + 11 | 0; //@line 17240
   HEAP8[$93 >> 0] = 7; //@line 17241
   HEAP8[$4 >> 0] = HEAP8[14419] | 0; //@line 17242
   HEAP8[$4 + 1 >> 0] = HEAP8[14420] | 0; //@line 17242
   HEAP8[$4 + 2 >> 0] = HEAP8[14421] | 0; //@line 17242
   HEAP8[$4 + 3 >> 0] = HEAP8[14422] | 0; //@line 17242
   HEAP8[$4 + 4 >> 0] = HEAP8[14423] | 0; //@line 17242
   HEAP8[$4 + 5 >> 0] = HEAP8[14424] | 0; //@line 17242
   HEAP8[$4 + 6 >> 0] = HEAP8[14425] | 0; //@line 17242
   HEAP8[$4 + 7 >> 0] = 0; //@line 17244
   $95 = $5 + 16 | 0; //@line 17245
   HEAP32[$5 >> 2] = 3184; //@line 17246
   HEAP32[$95 >> 2] = $5; //@line 17247
   __THREW__ = 0; //@line 17248
   invoke_viii(21, $0 | 0, $4 | 0, $5 | 0); //@line 17249
   $96 = __THREW__; //@line 17250
   __THREW__ = 0; //@line 17250
   if ($96 & 1) {
    $765 = ___cxa_find_matching_catch_2() | 0; //@line 17253
    $766 = tempRet0; //@line 17254
    $767 = HEAP32[$95 >> 2] | 0; //@line 17255
    if (($5 | 0) == ($767 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$767 >> 2] | 0) + 16 >> 2] & 511]($767); //@line 17261
    } else {
     if ($767 | 0) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$767 >> 2] | 0) + 20 >> 2] & 511]($767); //@line 17268
     }
    }
    if ((HEAP8[$93 >> 0] | 0) >= 0) {
     $$36 = $766; //@line 17274
     $$3645 = $765; //@line 17274
     break;
    }
    __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 17278
    $$36 = $766; //@line 17279
    $$3645 = $765; //@line 17279
    break;
   }
   $98 = HEAP32[$95 >> 2] | 0; //@line 17282
   if (($5 | 0) == ($98 | 0)) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$98 >> 2] | 0) + 16 >> 2] & 511]($98); //@line 17288
   } else {
    if ($98 | 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$98 >> 2] | 0) + 20 >> 2] & 511]($98); //@line 17295
    }
   }
   if ((HEAP8[$93 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 17302
   }
   HEAP32[$6 + 8 >> 2] = 0; //@line 17305
   $111 = $6 + 11 | 0; //@line 17306
   HEAP8[$111 >> 0] = 7; //@line 17307
   HEAP8[$6 >> 0] = HEAP8[14427] | 0; //@line 17308
   HEAP8[$6 + 1 >> 0] = HEAP8[14428] | 0; //@line 17308
   HEAP8[$6 + 2 >> 0] = HEAP8[14429] | 0; //@line 17308
   HEAP8[$6 + 3 >> 0] = HEAP8[14430] | 0; //@line 17308
   HEAP8[$6 + 4 >> 0] = HEAP8[14431] | 0; //@line 17308
   HEAP8[$6 + 5 >> 0] = HEAP8[14432] | 0; //@line 17308
   HEAP8[$6 + 6 >> 0] = HEAP8[14433] | 0; //@line 17308
   HEAP8[$6 + 7 >> 0] = 0; //@line 17310
   $113 = $7 + 16 | 0; //@line 17311
   HEAP32[$7 >> 2] = 3228; //@line 17312
   HEAP32[$113 >> 2] = $7; //@line 17313
   __THREW__ = 0; //@line 17314
   invoke_viii(21, $0 | 0, $6 | 0, $7 | 0); //@line 17315
   $114 = __THREW__; //@line 17316
   __THREW__ = 0; //@line 17316
   if ($114 & 1) {
    $779 = ___cxa_find_matching_catch_2() | 0; //@line 17319
    $780 = tempRet0; //@line 17320
    $781 = HEAP32[$113 >> 2] | 0; //@line 17321
    if (($7 | 0) == ($781 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$781 >> 2] | 0) + 16 >> 2] & 511]($781); //@line 17327
    } else {
     if ($781 | 0) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$781 >> 2] | 0) + 20 >> 2] & 511]($781); //@line 17334
     }
    }
    if ((HEAP8[$111 >> 0] | 0) >= 0) {
     $$36 = $780; //@line 17340
     $$3645 = $779; //@line 17340
     break;
    }
    __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 17344
    $$36 = $780; //@line 17345
    $$3645 = $779; //@line 17345
    break;
   }
   $116 = HEAP32[$113 >> 2] | 0; //@line 17348
   if (($7 | 0) == ($116 | 0)) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$116 >> 2] | 0) + 16 >> 2] & 511]($116); //@line 17354
   } else {
    if ($116 | 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$116 >> 2] | 0) + 20 >> 2] & 511]($116); //@line 17361
    }
   }
   if ((HEAP8[$111 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 17368
   }
   HEAP32[$8 + 8 >> 2] = 0; //@line 17371
   $129 = $8 + 11 | 0; //@line 17372
   HEAP8[$129 >> 0] = 7; //@line 17373
   HEAP8[$8 >> 0] = HEAP8[14435] | 0; //@line 17374
   HEAP8[$8 + 1 >> 0] = HEAP8[14436] | 0; //@line 17374
   HEAP8[$8 + 2 >> 0] = HEAP8[14437] | 0; //@line 17374
   HEAP8[$8 + 3 >> 0] = HEAP8[14438] | 0; //@line 17374
   HEAP8[$8 + 4 >> 0] = HEAP8[14439] | 0; //@line 17374
   HEAP8[$8 + 5 >> 0] = HEAP8[14440] | 0; //@line 17374
   HEAP8[$8 + 6 >> 0] = HEAP8[14441] | 0; //@line 17374
   HEAP8[$8 + 7 >> 0] = 0; //@line 17376
   $131 = $9 + 16 | 0; //@line 17377
   HEAP32[$9 >> 2] = 3272; //@line 17378
   HEAP32[$131 >> 2] = $9; //@line 17379
   __THREW__ = 0; //@line 17380
   invoke_viii(21, $0 | 0, $8 | 0, $9 | 0); //@line 17381
   $132 = __THREW__; //@line 17382
   __THREW__ = 0; //@line 17382
   if ($132 & 1) {
    $793 = ___cxa_find_matching_catch_2() | 0; //@line 17385
    $794 = tempRet0; //@line 17386
    $795 = HEAP32[$131 >> 2] | 0; //@line 17387
    if (($9 | 0) == ($795 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$795 >> 2] | 0) + 16 >> 2] & 511]($795); //@line 17393
    } else {
     if ($795 | 0) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$795 >> 2] | 0) + 20 >> 2] & 511]($795); //@line 17400
     }
    }
    if ((HEAP8[$129 >> 0] | 0) >= 0) {
     $$36 = $794; //@line 17406
     $$3645 = $793; //@line 17406
     break;
    }
    __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 17410
    $$36 = $794; //@line 17411
    $$3645 = $793; //@line 17411
    break;
   }
   $134 = HEAP32[$131 >> 2] | 0; //@line 17414
   if (($9 | 0) == ($134 | 0)) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$134 >> 2] | 0) + 16 >> 2] & 511]($134); //@line 17420
   } else {
    if ($134 | 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$134 >> 2] | 0) + 20 >> 2] & 511]($134); //@line 17427
    }
   }
   if ((HEAP8[$129 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 17434
   }
   HEAP32[$10 >> 2] = 0; //@line 17436
   HEAP32[$10 + 4 >> 2] = 0; //@line 17436
   HEAP32[$10 + 8 >> 2] = 0; //@line 17436
   $146 = $10 + 11 | 0; //@line 17437
   HEAP8[$146 >> 0] = 4; //@line 17438
   HEAP32[$10 >> 2] = 1701869940; //@line 17439
   HEAP8[$10 + 4 >> 0] = 0; //@line 17441
   $148 = $11 + 16 | 0; //@line 17442
   HEAP32[$11 >> 2] = 3316; //@line 17443
   HEAP32[$148 >> 2] = $11; //@line 17444
   __THREW__ = 0; //@line 17445
   invoke_viii(21, $0 | 0, $10 | 0, $11 | 0); //@line 17446
   $149 = __THREW__; //@line 17447
   __THREW__ = 0; //@line 17447
   if ($149 & 1) {
    $807 = ___cxa_find_matching_catch_2() | 0; //@line 17450
    $808 = tempRet0; //@line 17451
    $809 = HEAP32[$148 >> 2] | 0; //@line 17452
    if (($11 | 0) == ($809 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$809 >> 2] | 0) + 16 >> 2] & 511]($809); //@line 17458
    } else {
     if ($809 | 0) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$809 >> 2] | 0) + 20 >> 2] & 511]($809); //@line 17465
     }
    }
    if ((HEAP8[$146 >> 0] | 0) >= 0) {
     $$36 = $808; //@line 17471
     $$3645 = $807; //@line 17471
     break;
    }
    __ZdlPv(HEAP32[$10 >> 2] | 0); //@line 17475
    $$36 = $808; //@line 17476
    $$3645 = $807; //@line 17476
    break;
   }
   $151 = HEAP32[$148 >> 2] | 0; //@line 17479
   if (($11 | 0) == ($151 | 0)) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$151 >> 2] | 0) + 16 >> 2] & 511]($151); //@line 17485
   } else {
    if ($151 | 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$151 >> 2] | 0) + 20 >> 2] & 511]($151); //@line 17492
    }
   }
   if ((HEAP8[$146 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$10 >> 2] | 0); //@line 17499
   }
   $164 = $12 + 4 | 0; //@line 17502
   HEAP32[$164 >> 2] = 0; //@line 17504
   HEAP32[$164 + 4 >> 2] = 0; //@line 17507
   $168 = $12 + 11 | 0; //@line 17508
   HEAP8[$168 >> 0] = 3; //@line 17509
   HEAP8[$12 >> 0] = HEAP8[14443] | 0; //@line 17510
   HEAP8[$12 + 1 >> 0] = HEAP8[14444] | 0; //@line 17510
   HEAP8[$12 + 2 >> 0] = HEAP8[14445] | 0; //@line 17510
   HEAP8[$12 + 3 >> 0] = 0; //@line 17512
   $170 = $13 + 16 | 0; //@line 17513
   HEAP32[$13 >> 2] = 3360; //@line 17514
   HEAP32[$170 >> 2] = $13; //@line 17515
   __THREW__ = 0; //@line 17516
   invoke_viii(22, $0 | 0, $12 | 0, $13 | 0); //@line 17517
   $171 = __THREW__; //@line 17518
   __THREW__ = 0; //@line 17518
   if ($171 & 1) {
    $821 = ___cxa_find_matching_catch_2() | 0; //@line 17521
    $822 = tempRet0; //@line 17522
    $823 = HEAP32[$170 >> 2] | 0; //@line 17523
    do {
     if (($13 | 0) == ($823 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$823 >> 2] | 0) + 16 >> 2] & 511]($823); //@line 17530
     } else {
      if (!$823) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$823 >> 2] | 0) + 20 >> 2] & 511]($823); //@line 17539
     }
    } while (0);
    if ((HEAP8[$168 >> 0] | 0) >= 0) {
     $$36 = $822; //@line 17545
     $$3645 = $821; //@line 17545
     break;
    }
    __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 17549
    $$36 = $822; //@line 17550
    $$3645 = $821; //@line 17550
    break;
   }
   $173 = HEAP32[$170 >> 2] | 0; //@line 17553
   if (($13 | 0) == ($173 | 0)) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$173 >> 2] | 0) + 16 >> 2] & 511]($173); //@line 17559
   } else {
    if ($173 | 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$173 >> 2] | 0) + 20 >> 2] & 511]($173); //@line 17566
    }
   }
   if ((HEAP8[$168 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 17573
   }
   $186 = $14 + 4 | 0; //@line 17576
   HEAP32[$186 >> 2] = 0; //@line 17578
   HEAP32[$186 + 4 >> 2] = 0; //@line 17581
   $190 = $14 + 11 | 0; //@line 17582
   HEAP8[$190 >> 0] = 3; //@line 17583
   HEAP8[$14 >> 0] = HEAP8[14447] | 0; //@line 17584
   HEAP8[$14 + 1 >> 0] = HEAP8[14448] | 0; //@line 17584
   HEAP8[$14 + 2 >> 0] = HEAP8[14449] | 0; //@line 17584
   HEAP8[$14 + 3 >> 0] = 0; //@line 17586
   $192 = $15 + 16 | 0; //@line 17587
   HEAP32[$15 >> 2] = 3404; //@line 17588
   HEAP32[$192 >> 2] = $15; //@line 17589
   __THREW__ = 0; //@line 17590
   invoke_viii(21, $0 | 0, $14 | 0, $15 | 0); //@line 17591
   $193 = __THREW__; //@line 17592
   __THREW__ = 0; //@line 17592
   if ($193 & 1) {
    $835 = ___cxa_find_matching_catch_2() | 0; //@line 17595
    $836 = tempRet0; //@line 17596
    $837 = HEAP32[$192 >> 2] | 0; //@line 17597
    do {
     if (($15 | 0) == ($837 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$837 >> 2] | 0) + 16 >> 2] & 511]($837); //@line 17604
     } else {
      if (!$837) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$837 >> 2] | 0) + 20 >> 2] & 511]($837); //@line 17613
     }
    } while (0);
    if ((HEAP8[$190 >> 0] | 0) >= 0) {
     $$36 = $836; //@line 17619
     $$3645 = $835; //@line 17619
     break;
    }
    __ZdlPv(HEAP32[$14 >> 2] | 0); //@line 17623
    $$36 = $836; //@line 17624
    $$3645 = $835; //@line 17624
    break;
   }
   $195 = HEAP32[$192 >> 2] | 0; //@line 17627
   do {
    if (($15 | 0) == ($195 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$195 >> 2] | 0) + 16 >> 2] & 511]($195); //@line 17634
    } else {
     if (!$195) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$195 >> 2] | 0) + 20 >> 2] & 511]($195); //@line 17643
    }
   } while (0);
   if ((HEAP8[$190 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$14 >> 2] | 0); //@line 17650
   }
   HEAP32[$16 >> 2] = 0; //@line 17652
   HEAP32[$16 + 4 >> 2] = 0; //@line 17652
   HEAP32[$16 + 8 >> 2] = 0; //@line 17652
   $207 = $16 + 11 | 0; //@line 17653
   HEAP8[$207 >> 0] = 2; //@line 17654
   HEAP16[$16 >> 1] = 29029; //@line 17655
   HEAP8[$16 + 2 >> 0] = 0; //@line 17657
   $209 = $17 + 16 | 0; //@line 17658
   HEAP32[$17 >> 2] = 3448; //@line 17659
   HEAP32[$209 >> 2] = $17; //@line 17660
   __THREW__ = 0; //@line 17661
   invoke_viii(21, $0 | 0, $16 | 0, $17 | 0); //@line 17662
   $210 = __THREW__; //@line 17663
   __THREW__ = 0; //@line 17663
   if ($210 & 1) {
    $849 = ___cxa_find_matching_catch_2() | 0; //@line 17666
    $850 = tempRet0; //@line 17667
    $851 = HEAP32[$209 >> 2] | 0; //@line 17668
    do {
     if (($17 | 0) == ($851 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$851 >> 2] | 0) + 16 >> 2] & 511]($851); //@line 17675
     } else {
      if (!$851) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$851 >> 2] | 0) + 20 >> 2] & 511]($851); //@line 17684
     }
    } while (0);
    if ((HEAP8[$207 >> 0] | 0) >= 0) {
     $$36 = $850; //@line 17690
     $$3645 = $849; //@line 17690
     break;
    }
    __ZdlPv(HEAP32[$16 >> 2] | 0); //@line 17694
    $$36 = $850; //@line 17695
    $$3645 = $849; //@line 17695
    break;
   }
   $212 = HEAP32[$209 >> 2] | 0; //@line 17698
   do {
    if (($17 | 0) == ($212 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$212 >> 2] | 0) + 16 >> 2] & 511]($212); //@line 17705
    } else {
     if (!$212) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$212 >> 2] | 0) + 20 >> 2] & 511]($212); //@line 17714
    }
   } while (0);
   if ((HEAP8[$207 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$16 >> 2] | 0); //@line 17721
   }
   $225 = $18 + 4 | 0; //@line 17724
   HEAP32[$225 >> 2] = 0; //@line 17726
   HEAP32[$225 + 4 >> 2] = 0; //@line 17729
   $229 = $18 + 11 | 0; //@line 17730
   HEAP8[$229 >> 0] = 3; //@line 17731
   HEAP8[$18 >> 0] = HEAP8[14451] | 0; //@line 17732
   HEAP8[$18 + 1 >> 0] = HEAP8[14452] | 0; //@line 17732
   HEAP8[$18 + 2 >> 0] = HEAP8[14453] | 0; //@line 17732
   HEAP8[$18 + 3 >> 0] = 0; //@line 17734
   $231 = $19 + 16 | 0; //@line 17735
   HEAP32[$19 >> 2] = 3492; //@line 17736
   HEAP32[$231 >> 2] = $19; //@line 17737
   __THREW__ = 0; //@line 17738
   invoke_viii(21, $0 | 0, $18 | 0, $19 | 0); //@line 17739
   $232 = __THREW__; //@line 17740
   __THREW__ = 0; //@line 17740
   if ($232 & 1) {
    $863 = ___cxa_find_matching_catch_2() | 0; //@line 17743
    $864 = tempRet0; //@line 17744
    $865 = HEAP32[$231 >> 2] | 0; //@line 17745
    do {
     if (($19 | 0) == ($865 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$865 >> 2] | 0) + 16 >> 2] & 511]($865); //@line 17752
     } else {
      if (!$865) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$865 >> 2] | 0) + 20 >> 2] & 511]($865); //@line 17761
     }
    } while (0);
    if ((HEAP8[$229 >> 0] | 0) >= 0) {
     $$36 = $864; //@line 17767
     $$3645 = $863; //@line 17767
     break;
    }
    __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 17771
    $$36 = $864; //@line 17772
    $$3645 = $863; //@line 17772
    break;
   }
   $234 = HEAP32[$231 >> 2] | 0; //@line 17775
   do {
    if (($19 | 0) == ($234 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$234 >> 2] | 0) + 16 >> 2] & 511]($234); //@line 17782
    } else {
     if (!$234) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$234 >> 2] | 0) + 20 >> 2] & 511]($234); //@line 17791
    }
   } while (0);
   if ((HEAP8[$229 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 17798
   }
   $247 = $20 + 4 | 0; //@line 17801
   HEAP32[$247 >> 2] = 0; //@line 17803
   HEAP32[$247 + 4 >> 2] = 0; //@line 17806
   $251 = $20 + 11 | 0; //@line 17807
   HEAP8[$251 >> 0] = 3; //@line 17808
   HEAP8[$20 >> 0] = HEAP8[14455] | 0; //@line 17809
   HEAP8[$20 + 1 >> 0] = HEAP8[14456] | 0; //@line 17809
   HEAP8[$20 + 2 >> 0] = HEAP8[14457] | 0; //@line 17809
   HEAP8[$20 + 3 >> 0] = 0; //@line 17811
   $253 = $21 + 16 | 0; //@line 17812
   HEAP32[$21 >> 2] = 3536; //@line 17813
   HEAP32[$253 >> 2] = $21; //@line 17814
   __THREW__ = 0; //@line 17815
   invoke_viii(21, $0 | 0, $20 | 0, $21 | 0); //@line 17816
   $254 = __THREW__; //@line 17817
   __THREW__ = 0; //@line 17817
   if ($254 & 1) {
    $877 = ___cxa_find_matching_catch_2() | 0; //@line 17820
    $878 = tempRet0; //@line 17821
    $879 = HEAP32[$253 >> 2] | 0; //@line 17822
    do {
     if (($21 | 0) == ($879 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$879 >> 2] | 0) + 16 >> 2] & 511]($879); //@line 17829
     } else {
      if (!$879) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$879 >> 2] | 0) + 20 >> 2] & 511]($879); //@line 17838
     }
    } while (0);
    if ((HEAP8[$251 >> 0] | 0) >= 0) {
     $$36 = $878; //@line 17844
     $$3645 = $877; //@line 17844
     break;
    }
    __ZdlPv(HEAP32[$20 >> 2] | 0); //@line 17848
    $$36 = $878; //@line 17849
    $$3645 = $877; //@line 17849
    break;
   }
   $256 = HEAP32[$253 >> 2] | 0; //@line 17852
   do {
    if (($21 | 0) == ($256 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$256 >> 2] | 0) + 16 >> 2] & 511]($256); //@line 17859
    } else {
     if (!$256) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$256 >> 2] | 0) + 20 >> 2] & 511]($256); //@line 17868
    }
   } while (0);
   if ((HEAP8[$251 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$20 >> 2] | 0); //@line 17875
   }
   HEAP32[$22 >> 2] = 0; //@line 17877
   HEAP32[$22 + 4 >> 2] = 0; //@line 17877
   HEAP32[$22 + 8 >> 2] = 0; //@line 17877
   $268 = $22 + 11 | 0; //@line 17878
   HEAP8[$268 >> 0] = 4; //@line 17879
   HEAP32[$22 >> 2] = 1885435763; //@line 17880
   HEAP8[$22 + 4 >> 0] = 0; //@line 17882
   $270 = $23 + 16 | 0; //@line 17883
   HEAP32[$23 >> 2] = 3580; //@line 17884
   HEAP32[$270 >> 2] = $23; //@line 17885
   __THREW__ = 0; //@line 17886
   invoke_viii(21, $0 | 0, $22 | 0, $23 | 0); //@line 17887
   $271 = __THREW__; //@line 17888
   __THREW__ = 0; //@line 17888
   if ($271 & 1) {
    $891 = ___cxa_find_matching_catch_2() | 0; //@line 17891
    $892 = tempRet0; //@line 17892
    $893 = HEAP32[$270 >> 2] | 0; //@line 17893
    do {
     if (($23 | 0) == ($893 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$893 >> 2] | 0) + 16 >> 2] & 511]($893); //@line 17900
     } else {
      if (!$893) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$893 >> 2] | 0) + 20 >> 2] & 511]($893); //@line 17909
     }
    } while (0);
    if ((HEAP8[$268 >> 0] | 0) >= 0) {
     $$36 = $892; //@line 17915
     $$3645 = $891; //@line 17915
     break;
    }
    __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 17919
    $$36 = $892; //@line 17920
    $$3645 = $891; //@line 17920
    break;
   }
   $273 = HEAP32[$270 >> 2] | 0; //@line 17923
   do {
    if (($23 | 0) == ($273 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$273 >> 2] | 0) + 16 >> 2] & 511]($273); //@line 17930
    } else {
     if (!$273) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$273 >> 2] | 0) + 20 >> 2] & 511]($273); //@line 17939
    }
   } while (0);
   if ((HEAP8[$268 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 17946
   }
   $286 = $24 + 4 | 0; //@line 17949
   HEAP32[$286 >> 2] = 0; //@line 17951
   HEAP32[$286 + 4 >> 2] = 0; //@line 17954
   $290 = $24 + 11 | 0; //@line 17955
   HEAP8[$290 >> 0] = 3; //@line 17956
   HEAP8[$24 >> 0] = HEAP8[14459] | 0; //@line 17957
   HEAP8[$24 + 1 >> 0] = HEAP8[14460] | 0; //@line 17957
   HEAP8[$24 + 2 >> 0] = HEAP8[14461] | 0; //@line 17957
   HEAP8[$24 + 3 >> 0] = 0; //@line 17959
   $292 = $25 + 16 | 0; //@line 17960
   HEAP32[$25 >> 2] = 3624; //@line 17961
   HEAP32[$292 >> 2] = $25; //@line 17962
   __THREW__ = 0; //@line 17963
   invoke_viii(21, $0 | 0, $24 | 0, $25 | 0); //@line 17964
   $293 = __THREW__; //@line 17965
   __THREW__ = 0; //@line 17965
   if ($293 & 1) {
    $905 = ___cxa_find_matching_catch_2() | 0; //@line 17968
    $906 = tempRet0; //@line 17969
    $907 = HEAP32[$292 >> 2] | 0; //@line 17970
    do {
     if (($25 | 0) == ($907 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$907 >> 2] | 0) + 16 >> 2] & 511]($907); //@line 17977
     } else {
      if (!$907) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$907 >> 2] | 0) + 20 >> 2] & 511]($907); //@line 17986
     }
    } while (0);
    if ((HEAP8[$290 >> 0] | 0) >= 0) {
     $$36 = $906; //@line 17992
     $$3645 = $905; //@line 17992
     break;
    }
    __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 17996
    $$36 = $906; //@line 17997
    $$3645 = $905; //@line 17997
    break;
   }
   $295 = HEAP32[$292 >> 2] | 0; //@line 18000
   do {
    if (($25 | 0) == ($295 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$295 >> 2] | 0) + 16 >> 2] & 511]($295); //@line 18007
    } else {
     if (!$295) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$295 >> 2] | 0) + 20 >> 2] & 511]($295); //@line 18016
    }
   } while (0);
   if ((HEAP8[$290 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 18023
   }
   HEAP32[$26 >> 2] = 0; //@line 18025
   HEAP32[$26 + 4 >> 2] = 0; //@line 18025
   HEAP32[$26 + 8 >> 2] = 0; //@line 18025
   $307 = $26 + 11 | 0; //@line 18026
   HEAP8[$307 >> 0] = 2; //@line 18027
   HEAP16[$26 >> 1] = 29793; //@line 18028
   HEAP8[$26 + 2 >> 0] = 0; //@line 18030
   $309 = $27 + 16 | 0; //@line 18031
   HEAP32[$27 >> 2] = 3668; //@line 18032
   HEAP32[$309 >> 2] = $27; //@line 18033
   __THREW__ = 0; //@line 18034
   invoke_viii(21, $0 | 0, $26 | 0, $27 | 0); //@line 18035
   $310 = __THREW__; //@line 18036
   __THREW__ = 0; //@line 18036
   if ($310 & 1) {
    $919 = ___cxa_find_matching_catch_2() | 0; //@line 18039
    $920 = tempRet0; //@line 18040
    $921 = HEAP32[$309 >> 2] | 0; //@line 18041
    do {
     if (($27 | 0) == ($921 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$921 >> 2] | 0) + 16 >> 2] & 511]($921); //@line 18048
     } else {
      if (!$921) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$921 >> 2] | 0) + 20 >> 2] & 511]($921); //@line 18057
     }
    } while (0);
    if ((HEAP8[$307 >> 0] | 0) >= 0) {
     $$36 = $920; //@line 18063
     $$3645 = $919; //@line 18063
     break;
    }
    __ZdlPv(HEAP32[$26 >> 2] | 0); //@line 18067
    $$36 = $920; //@line 18068
    $$3645 = $919; //@line 18068
    break;
   }
   $312 = HEAP32[$309 >> 2] | 0; //@line 18071
   do {
    if (($27 | 0) == ($312 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$312 >> 2] | 0) + 16 >> 2] & 511]($312); //@line 18078
    } else {
     if (!$312) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$312 >> 2] | 0) + 20 >> 2] & 511]($312); //@line 18087
    }
   } while (0);
   if ((HEAP8[$307 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$26 >> 2] | 0); //@line 18094
   }
   HEAP32[$28 >> 2] = 0; //@line 18096
   HEAP32[$28 + 4 >> 2] = 0; //@line 18096
   HEAP32[$28 + 8 >> 2] = 0; //@line 18096
   $324 = $28 + 11 | 0; //@line 18097
   HEAP8[$324 >> 0] = 6; //@line 18098
   HEAP8[$28 >> 0] = HEAP8[14463] | 0; //@line 18099
   HEAP8[$28 + 1 >> 0] = HEAP8[14464] | 0; //@line 18099
   HEAP8[$28 + 2 >> 0] = HEAP8[14465] | 0; //@line 18099
   HEAP8[$28 + 3 >> 0] = HEAP8[14466] | 0; //@line 18099
   HEAP8[$28 + 4 >> 0] = HEAP8[14467] | 0; //@line 18099
   HEAP8[$28 + 5 >> 0] = HEAP8[14468] | 0; //@line 18099
   HEAP8[$28 + 6 >> 0] = 0; //@line 18101
   $326 = $29 + 16 | 0; //@line 18102
   HEAP32[$29 >> 2] = 3712; //@line 18103
   HEAP32[$326 >> 2] = $29; //@line 18104
   __THREW__ = 0; //@line 18105
   invoke_viii(21, $0 | 0, $28 | 0, $29 | 0); //@line 18106
   $327 = __THREW__; //@line 18107
   __THREW__ = 0; //@line 18107
   if ($327 & 1) {
    $933 = ___cxa_find_matching_catch_2() | 0; //@line 18110
    $934 = tempRet0; //@line 18111
    $935 = HEAP32[$326 >> 2] | 0; //@line 18112
    do {
     if (($29 | 0) == ($935 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$935 >> 2] | 0) + 16 >> 2] & 511]($935); //@line 18119
     } else {
      if (!$935) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$935 >> 2] | 0) + 20 >> 2] & 511]($935); //@line 18128
     }
    } while (0);
    if ((HEAP8[$324 >> 0] | 0) >= 0) {
     $$36 = $934; //@line 18134
     $$3645 = $933; //@line 18134
     break;
    }
    __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 18138
    $$36 = $934; //@line 18139
    $$3645 = $933; //@line 18139
    break;
   }
   $329 = HEAP32[$326 >> 2] | 0; //@line 18142
   do {
    if (($29 | 0) == ($329 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$329 >> 2] | 0) + 16 >> 2] & 511]($329); //@line 18149
    } else {
     if (!$329) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$329 >> 2] | 0) + 20 >> 2] & 511]($329); //@line 18158
    }
   } while (0);
   if ((HEAP8[$324 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 18165
   }
   HEAP32[$30 >> 2] = 0; //@line 18167
   HEAP32[$30 + 4 >> 2] = 0; //@line 18167
   HEAP32[$30 + 8 >> 2] = 0; //@line 18167
   $341 = $30 + 11 | 0; //@line 18168
   HEAP8[$341 >> 0] = 6; //@line 18169
   HEAP8[$30 >> 0] = HEAP8[14470] | 0; //@line 18170
   HEAP8[$30 + 1 >> 0] = HEAP8[14471] | 0; //@line 18170
   HEAP8[$30 + 2 >> 0] = HEAP8[14472] | 0; //@line 18170
   HEAP8[$30 + 3 >> 0] = HEAP8[14473] | 0; //@line 18170
   HEAP8[$30 + 4 >> 0] = HEAP8[14474] | 0; //@line 18170
   HEAP8[$30 + 5 >> 0] = HEAP8[14475] | 0; //@line 18170
   HEAP8[$30 + 6 >> 0] = 0; //@line 18172
   $343 = $31 + 16 | 0; //@line 18173
   HEAP32[$31 >> 2] = 3756; //@line 18174
   HEAP32[$343 >> 2] = $31; //@line 18175
   __THREW__ = 0; //@line 18176
   invoke_viii(21, $0 | 0, $30 | 0, $31 | 0); //@line 18177
   $344 = __THREW__; //@line 18178
   __THREW__ = 0; //@line 18178
   if ($344 & 1) {
    $947 = ___cxa_find_matching_catch_2() | 0; //@line 18181
    $948 = tempRet0; //@line 18182
    $949 = HEAP32[$343 >> 2] | 0; //@line 18183
    do {
     if (($31 | 0) == ($949 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$949 >> 2] | 0) + 16 >> 2] & 511]($949); //@line 18190
     } else {
      if (!$949) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$949 >> 2] | 0) + 20 >> 2] & 511]($949); //@line 18199
     }
    } while (0);
    if ((HEAP8[$341 >> 0] | 0) >= 0) {
     $$36 = $948; //@line 18205
     $$3645 = $947; //@line 18205
     break;
    }
    __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 18209
    $$36 = $948; //@line 18210
    $$3645 = $947; //@line 18210
    break;
   }
   $346 = HEAP32[$343 >> 2] | 0; //@line 18213
   do {
    if (($31 | 0) == ($346 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$346 >> 2] | 0) + 16 >> 2] & 511]($346); //@line 18220
    } else {
     if (!$346) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$346 >> 2] | 0) + 20 >> 2] & 511]($346); //@line 18229
    }
   } while (0);
   if ((HEAP8[$341 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 18236
   }
   HEAP32[$32 >> 2] = 0; //@line 18238
   HEAP32[$32 + 4 >> 2] = 0; //@line 18238
   HEAP32[$32 + 8 >> 2] = 0; //@line 18238
   $358 = $32 + 11 | 0; //@line 18239
   HEAP8[$358 >> 0] = 5; //@line 18240
   HEAP8[$32 >> 0] = HEAP8[14477] | 0; //@line 18241
   HEAP8[$32 + 1 >> 0] = HEAP8[14478] | 0; //@line 18241
   HEAP8[$32 + 2 >> 0] = HEAP8[14479] | 0; //@line 18241
   HEAP8[$32 + 3 >> 0] = HEAP8[14480] | 0; //@line 18241
   HEAP8[$32 + 4 >> 0] = HEAP8[14481] | 0; //@line 18241
   HEAP8[$32 + 5 >> 0] = 0; //@line 18243
   $360 = $33 + 16 | 0; //@line 18244
   HEAP32[$33 >> 2] = 3800; //@line 18245
   HEAP32[$360 >> 2] = $33; //@line 18246
   __THREW__ = 0; //@line 18247
   invoke_viii(21, $0 | 0, $32 | 0, $33 | 0); //@line 18248
   $361 = __THREW__; //@line 18249
   __THREW__ = 0; //@line 18249
   if ($361 & 1) {
    $961 = ___cxa_find_matching_catch_2() | 0; //@line 18252
    $962 = tempRet0; //@line 18253
    $963 = HEAP32[$360 >> 2] | 0; //@line 18254
    do {
     if (($33 | 0) == ($963 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$963 >> 2] | 0) + 16 >> 2] & 511]($963); //@line 18261
     } else {
      if (!$963) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$963 >> 2] | 0) + 20 >> 2] & 511]($963); //@line 18270
     }
    } while (0);
    if ((HEAP8[$358 >> 0] | 0) >= 0) {
     $$36 = $962; //@line 18276
     $$3645 = $961; //@line 18276
     break;
    }
    __ZdlPv(HEAP32[$32 >> 2] | 0); //@line 18280
    $$36 = $962; //@line 18281
    $$3645 = $961; //@line 18281
    break;
   }
   $363 = HEAP32[$360 >> 2] | 0; //@line 18284
   do {
    if (($33 | 0) == ($363 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$363 >> 2] | 0) + 16 >> 2] & 511]($363); //@line 18291
    } else {
     if (!$363) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$363 >> 2] | 0) + 20 >> 2] & 511]($363); //@line 18300
    }
   } while (0);
   if ((HEAP8[$358 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$32 >> 2] | 0); //@line 18307
   }
   HEAP32[$34 >> 2] = 0; //@line 18309
   HEAP32[$34 + 4 >> 2] = 0; //@line 18309
   HEAP32[$34 + 8 >> 2] = 0; //@line 18309
   $375 = $34 + 11 | 0; //@line 18310
   HEAP8[$375 >> 0] = 8; //@line 18311
   $376 = $34; //@line 18312
   HEAP32[$376 >> 2] = 1953722228; //@line 18314
   HEAP32[$376 + 4 >> 2] = 1735289202; //@line 18317
   HEAP8[$34 + 8 >> 0] = 0; //@line 18319
   $381 = $35 + 16 | 0; //@line 18320
   HEAP32[$35 >> 2] = 3844; //@line 18321
   HEAP32[$381 >> 2] = $35; //@line 18322
   __THREW__ = 0; //@line 18323
   invoke_viii(21, $0 | 0, $34 | 0, $35 | 0); //@line 18324
   $382 = __THREW__; //@line 18325
   __THREW__ = 0; //@line 18325
   if ($382 & 1) {
    $975 = ___cxa_find_matching_catch_2() | 0; //@line 18328
    $976 = tempRet0; //@line 18329
    $977 = HEAP32[$381 >> 2] | 0; //@line 18330
    do {
     if (($35 | 0) == ($977 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$977 >> 2] | 0) + 16 >> 2] & 511]($977); //@line 18337
     } else {
      if (!$977) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$977 >> 2] | 0) + 20 >> 2] & 511]($977); //@line 18346
     }
    } while (0);
    if ((HEAP8[$375 >> 0] | 0) >= 0) {
     $$36 = $976; //@line 18352
     $$3645 = $975; //@line 18352
     break;
    }
    __ZdlPv(HEAP32[$34 >> 2] | 0); //@line 18356
    $$36 = $976; //@line 18357
    $$3645 = $975; //@line 18357
    break;
   }
   $384 = HEAP32[$381 >> 2] | 0; //@line 18360
   do {
    if (($35 | 0) == ($384 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$384 >> 2] | 0) + 16 >> 2] & 511]($384); //@line 18367
    } else {
     if (!$384) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$384 >> 2] | 0) + 20 >> 2] & 511]($384); //@line 18376
    }
   } while (0);
   if ((HEAP8[$375 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$34 >> 2] | 0); //@line 18383
   }
   HEAP32[$36 >> 2] = 0; //@line 18385
   HEAP32[$36 + 4 >> 2] = 0; //@line 18385
   HEAP32[$36 + 8 >> 2] = 0; //@line 18385
   $396 = $36 + 11 | 0; //@line 18386
   HEAP8[$396 >> 0] = 4; //@line 18387
   HEAP32[$36 >> 2] = 1918986339; //@line 18388
   HEAP8[$36 + 4 >> 0] = 0; //@line 18390
   $398 = $37 + 16 | 0; //@line 18391
   HEAP32[$37 >> 2] = 3888; //@line 18392
   HEAP32[$398 >> 2] = $37; //@line 18393
   __THREW__ = 0; //@line 18394
   invoke_viii(21, $0 | 0, $36 | 0, $37 | 0); //@line 18395
   $399 = __THREW__; //@line 18396
   __THREW__ = 0; //@line 18396
   if ($399 & 1) {
    $989 = ___cxa_find_matching_catch_2() | 0; //@line 18399
    $990 = tempRet0; //@line 18400
    $991 = HEAP32[$398 >> 2] | 0; //@line 18401
    do {
     if (($37 | 0) == ($991 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$991 >> 2] | 0) + 16 >> 2] & 511]($991); //@line 18408
     } else {
      if (!$991) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$991 >> 2] | 0) + 20 >> 2] & 511]($991); //@line 18417
     }
    } while (0);
    if ((HEAP8[$396 >> 0] | 0) >= 0) {
     $$36 = $990; //@line 18423
     $$3645 = $989; //@line 18423
     break;
    }
    __ZdlPv(HEAP32[$36 >> 2] | 0); //@line 18427
    $$36 = $990; //@line 18428
    $$3645 = $989; //@line 18428
    break;
   }
   $401 = HEAP32[$398 >> 2] | 0; //@line 18431
   do {
    if (($37 | 0) == ($401 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$401 >> 2] | 0) + 16 >> 2] & 511]($401); //@line 18438
    } else {
     if (!$401) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$401 >> 2] | 0) + 20 >> 2] & 511]($401); //@line 18447
    }
   } while (0);
   if ((HEAP8[$396 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$36 >> 2] | 0); //@line 18454
   }
   $414 = $38 + 4 | 0; //@line 18457
   HEAP32[$414 >> 2] = 0; //@line 18459
   HEAP32[$414 + 4 >> 2] = 0; //@line 18462
   $418 = $38 + 11 | 0; //@line 18463
   HEAP8[$418 >> 0] = 3; //@line 18464
   HEAP8[$38 >> 0] = HEAP8[14483] | 0; //@line 18465
   HEAP8[$38 + 1 >> 0] = HEAP8[14484] | 0; //@line 18465
   HEAP8[$38 + 2 >> 0] = HEAP8[14485] | 0; //@line 18465
   HEAP8[$38 + 3 >> 0] = 0; //@line 18467
   $420 = $39 + 16 | 0; //@line 18468
   HEAP32[$39 >> 2] = 3932; //@line 18469
   HEAP32[$420 >> 2] = $39; //@line 18470
   __THREW__ = 0; //@line 18471
   invoke_viii(21, $0 | 0, $38 | 0, $39 | 0); //@line 18472
   $421 = __THREW__; //@line 18473
   __THREW__ = 0; //@line 18473
   if ($421 & 1) {
    $1003 = ___cxa_find_matching_catch_2() | 0; //@line 18476
    $1004 = tempRet0; //@line 18477
    $1005 = HEAP32[$420 >> 2] | 0; //@line 18478
    do {
     if (($39 | 0) == ($1005 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1005 >> 2] | 0) + 16 >> 2] & 511]($1005); //@line 18485
     } else {
      if (!$1005) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1005 >> 2] | 0) + 20 >> 2] & 511]($1005); //@line 18494
     }
    } while (0);
    if ((HEAP8[$418 >> 0] | 0) >= 0) {
     $$36 = $1004; //@line 18500
     $$3645 = $1003; //@line 18500
     break;
    }
    __ZdlPv(HEAP32[$38 >> 2] | 0); //@line 18504
    $$36 = $1004; //@line 18505
    $$3645 = $1003; //@line 18505
    break;
   }
   $423 = HEAP32[$420 >> 2] | 0; //@line 18508
   do {
    if (($39 | 0) == ($423 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$423 >> 2] | 0) + 16 >> 2] & 511]($423); //@line 18515
    } else {
     if (!$423) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$423 >> 2] | 0) + 20 >> 2] & 511]($423); //@line 18524
    }
   } while (0);
   if ((HEAP8[$418 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$38 >> 2] | 0); //@line 18531
   }
   HEAP32[$40 >> 2] = 0; //@line 18533
   HEAP32[$40 + 4 >> 2] = 0; //@line 18533
   HEAP32[$40 + 8 >> 2] = 0; //@line 18533
   $435 = $40 + 11 | 0; //@line 18534
   HEAP8[$435 >> 0] = 1; //@line 18535
   HEAP8[$40 >> 0] = 105; //@line 18536
   HEAP8[$40 + 1 >> 0] = 0; //@line 18538
   $437 = $41 + 16 | 0; //@line 18539
   HEAP32[$41 >> 2] = 3976; //@line 18540
   HEAP32[$437 >> 2] = $41; //@line 18541
   __THREW__ = 0; //@line 18542
   invoke_viii(22, $0 | 0, $40 | 0, $41 | 0); //@line 18543
   $438 = __THREW__; //@line 18544
   __THREW__ = 0; //@line 18544
   if ($438 & 1) {
    $1017 = ___cxa_find_matching_catch_2() | 0; //@line 18547
    $1018 = tempRet0; //@line 18548
    $1019 = HEAP32[$437 >> 2] | 0; //@line 18549
    do {
     if (($41 | 0) == ($1019 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1019 >> 2] | 0) + 16 >> 2] & 511]($1019); //@line 18556
     } else {
      if (!$1019) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1019 >> 2] | 0) + 20 >> 2] & 511]($1019); //@line 18565
     }
    } while (0);
    if ((HEAP8[$435 >> 0] | 0) >= 0) {
     $$36 = $1018; //@line 18571
     $$3645 = $1017; //@line 18571
     break;
    }
    __ZdlPv(HEAP32[$40 >> 2] | 0); //@line 18575
    $$36 = $1018; //@line 18576
    $$3645 = $1017; //@line 18576
    break;
   }
   $440 = HEAP32[$437 >> 2] | 0; //@line 18579
   do {
    if (($41 | 0) == ($440 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$440 >> 2] | 0) + 16 >> 2] & 511]($440); //@line 18586
    } else {
     if (!$440) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$440 >> 2] | 0) + 20 >> 2] & 511]($440); //@line 18595
    }
   } while (0);
   if ((HEAP8[$435 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$40 >> 2] | 0); //@line 18602
   }
   HEAP32[$42 >> 2] = 0; //@line 18604
   HEAP32[$42 + 4 >> 2] = 0; //@line 18604
   HEAP32[$42 + 8 >> 2] = 0; //@line 18604
   $452 = $42 + 11 | 0; //@line 18605
   HEAP8[$452 >> 0] = 1; //@line 18606
   HEAP8[$42 >> 0] = 113; //@line 18607
   HEAP8[$42 + 1 >> 0] = 0; //@line 18609
   $454 = $43 + 16 | 0; //@line 18610
   HEAP32[$43 >> 2] = 4020; //@line 18611
   HEAP32[$454 >> 2] = $43; //@line 18612
   __THREW__ = 0; //@line 18613
   invoke_viii(21, $0 | 0, $42 | 0, $43 | 0); //@line 18614
   $455 = __THREW__; //@line 18615
   __THREW__ = 0; //@line 18615
   if ($455 & 1) {
    $1031 = ___cxa_find_matching_catch_2() | 0; //@line 18618
    $1032 = tempRet0; //@line 18619
    $1033 = HEAP32[$454 >> 2] | 0; //@line 18620
    do {
     if (($43 | 0) == ($1033 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1033 >> 2] | 0) + 16 >> 2] & 511]($1033); //@line 18627
     } else {
      if (!$1033) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1033 >> 2] | 0) + 20 >> 2] & 511]($1033); //@line 18636
     }
    } while (0);
    if ((HEAP8[$452 >> 0] | 0) >= 0) {
     $$36 = $1032; //@line 18642
     $$3645 = $1031; //@line 18642
     break;
    }
    __ZdlPv(HEAP32[$42 >> 2] | 0); //@line 18646
    $$36 = $1032; //@line 18647
    $$3645 = $1031; //@line 18647
    break;
   }
   $457 = HEAP32[$454 >> 2] | 0; //@line 18650
   do {
    if (($43 | 0) == ($457 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$457 >> 2] | 0) + 16 >> 2] & 511]($457); //@line 18657
    } else {
     if (!$457) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$457 >> 2] | 0) + 20 >> 2] & 511]($457); //@line 18666
    }
   } while (0);
   if ((HEAP8[$452 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$42 >> 2] | 0); //@line 18673
   }
   HEAP32[$44 >> 2] = 0; //@line 18675
   HEAP32[$44 + 4 >> 2] = 0; //@line 18675
   HEAP32[$44 + 8 >> 2] = 0; //@line 18675
   $469 = $44 + 11 | 0; //@line 18676
   HEAP8[$469 >> 0] = 6; //@line 18677
   HEAP8[$44 >> 0] = HEAP8[14487] | 0; //@line 18678
   HEAP8[$44 + 1 >> 0] = HEAP8[14488] | 0; //@line 18678
   HEAP8[$44 + 2 >> 0] = HEAP8[14489] | 0; //@line 18678
   HEAP8[$44 + 3 >> 0] = HEAP8[14490] | 0; //@line 18678
   HEAP8[$44 + 4 >> 0] = HEAP8[14491] | 0; //@line 18678
   HEAP8[$44 + 5 >> 0] = HEAP8[14492] | 0; //@line 18678
   HEAP8[$44 + 6 >> 0] = 0; //@line 18680
   $471 = $45 + 16 | 0; //@line 18681
   HEAP32[$45 >> 2] = 4064; //@line 18682
   HEAP32[$471 >> 2] = $45; //@line 18683
   __THREW__ = 0; //@line 18684
   invoke_viii(22, $0 | 0, $44 | 0, $45 | 0); //@line 18685
   $472 = __THREW__; //@line 18686
   __THREW__ = 0; //@line 18686
   if ($472 & 1) {
    $1045 = ___cxa_find_matching_catch_2() | 0; //@line 18689
    $1046 = tempRet0; //@line 18690
    $1047 = HEAP32[$471 >> 2] | 0; //@line 18691
    do {
     if (($45 | 0) == ($1047 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1047 >> 2] | 0) + 16 >> 2] & 511]($1047); //@line 18698
     } else {
      if (!$1047) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1047 >> 2] | 0) + 20 >> 2] & 511]($1047); //@line 18707
     }
    } while (0);
    if ((HEAP8[$469 >> 0] | 0) >= 0) {
     $$36 = $1046; //@line 18713
     $$3645 = $1045; //@line 18713
     break;
    }
    __ZdlPv(HEAP32[$44 >> 2] | 0); //@line 18717
    $$36 = $1046; //@line 18718
    $$3645 = $1045; //@line 18718
    break;
   }
   $474 = HEAP32[$471 >> 2] | 0; //@line 18721
   do {
    if (($45 | 0) == ($474 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$474 >> 2] | 0) + 16 >> 2] & 511]($474); //@line 18728
    } else {
     if (!$474) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$474 >> 2] | 0) + 20 >> 2] & 511]($474); //@line 18737
    }
   } while (0);
   if ((HEAP8[$469 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$44 >> 2] | 0); //@line 18744
   }
   HEAP32[$46 >> 2] = 0; //@line 18746
   HEAP32[$46 + 4 >> 2] = 0; //@line 18746
   HEAP32[$46 + 8 >> 2] = 0; //@line 18746
   $486 = $46 + 11 | 0; //@line 18747
   HEAP8[$486 >> 0] = 6; //@line 18748
   HEAP8[$46 >> 0] = HEAP8[14494] | 0; //@line 18749
   HEAP8[$46 + 1 >> 0] = HEAP8[14495] | 0; //@line 18749
   HEAP8[$46 + 2 >> 0] = HEAP8[14496] | 0; //@line 18749
   HEAP8[$46 + 3 >> 0] = HEAP8[14497] | 0; //@line 18749
   HEAP8[$46 + 4 >> 0] = HEAP8[14498] | 0; //@line 18749
   HEAP8[$46 + 5 >> 0] = HEAP8[14499] | 0; //@line 18749
   HEAP8[$46 + 6 >> 0] = 0; //@line 18751
   $488 = $47 + 16 | 0; //@line 18752
   HEAP32[$47 >> 2] = 4108; //@line 18753
   HEAP32[$488 >> 2] = $47; //@line 18754
   __THREW__ = 0; //@line 18755
   invoke_viii(22, $0 | 0, $46 | 0, $47 | 0); //@line 18756
   $489 = __THREW__; //@line 18757
   __THREW__ = 0; //@line 18757
   if ($489 & 1) {
    $1059 = ___cxa_find_matching_catch_2() | 0; //@line 18760
    $1060 = tempRet0; //@line 18761
    $1061 = HEAP32[$488 >> 2] | 0; //@line 18762
    do {
     if (($47 | 0) == ($1061 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1061 >> 2] | 0) + 16 >> 2] & 511]($1061); //@line 18769
     } else {
      if (!$1061) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1061 >> 2] | 0) + 20 >> 2] & 511]($1061); //@line 18778
     }
    } while (0);
    if ((HEAP8[$486 >> 0] | 0) >= 0) {
     $$36 = $1060; //@line 18784
     $$3645 = $1059; //@line 18784
     break;
    }
    __ZdlPv(HEAP32[$46 >> 2] | 0); //@line 18788
    $$36 = $1060; //@line 18789
    $$3645 = $1059; //@line 18789
    break;
   }
   $491 = HEAP32[$488 >> 2] | 0; //@line 18792
   do {
    if (($47 | 0) == ($491 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$491 >> 2] | 0) + 16 >> 2] & 511]($491); //@line 18799
    } else {
     if (!$491) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$491 >> 2] | 0) + 20 >> 2] & 511]($491); //@line 18808
    }
   } while (0);
   if ((HEAP8[$486 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$46 >> 2] | 0); //@line 18815
   }
   $504 = $48 + 4 | 0; //@line 18818
   HEAP32[$504 >> 2] = 0; //@line 18820
   HEAP32[$504 + 4 >> 2] = 0; //@line 18823
   $508 = $48 + 11 | 0; //@line 18824
   HEAP8[$508 >> 0] = 3; //@line 18825
   HEAP8[$48 >> 0] = HEAP8[14501] | 0; //@line 18826
   HEAP8[$48 + 1 >> 0] = HEAP8[14502] | 0; //@line 18826
   HEAP8[$48 + 2 >> 0] = HEAP8[14503] | 0; //@line 18826
   HEAP8[$48 + 3 >> 0] = 0; //@line 18828
   $510 = $49 + 16 | 0; //@line 18829
   HEAP32[$49 >> 2] = 4152; //@line 18830
   HEAP32[$510 >> 2] = $49; //@line 18831
   __THREW__ = 0; //@line 18832
   invoke_viii(21, $0 | 0, $48 | 0, $49 | 0); //@line 18833
   $511 = __THREW__; //@line 18834
   __THREW__ = 0; //@line 18834
   if ($511 & 1) {
    $1073 = ___cxa_find_matching_catch_2() | 0; //@line 18837
    $1074 = tempRet0; //@line 18838
    $1075 = HEAP32[$510 >> 2] | 0; //@line 18839
    do {
     if (($49 | 0) == ($1075 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1075 >> 2] | 0) + 16 >> 2] & 511]($1075); //@line 18846
     } else {
      if (!$1075) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1075 >> 2] | 0) + 20 >> 2] & 511]($1075); //@line 18855
     }
    } while (0);
    if ((HEAP8[$508 >> 0] | 0) >= 0) {
     $$36 = $1074; //@line 18861
     $$3645 = $1073; //@line 18861
     break;
    }
    __ZdlPv(HEAP32[$48 >> 2] | 0); //@line 18865
    $$36 = $1074; //@line 18866
    $$3645 = $1073; //@line 18866
    break;
   }
   $513 = HEAP32[$510 >> 2] | 0; //@line 18869
   do {
    if (($49 | 0) == ($513 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$513 >> 2] | 0) + 16 >> 2] & 511]($513); //@line 18876
    } else {
     if (!$513) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$513 >> 2] | 0) + 20 >> 2] & 511]($513); //@line 18885
    }
   } while (0);
   if ((HEAP8[$508 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$48 >> 2] | 0); //@line 18892
   }
   $526 = $50 + 4 | 0; //@line 18895
   HEAP32[$526 >> 2] = 0; //@line 18897
   HEAP32[$526 + 4 >> 2] = 0; //@line 18900
   $530 = $50 + 11 | 0; //@line 18901
   HEAP8[$530 >> 0] = 3; //@line 18902
   HEAP8[$50 >> 0] = HEAP8[14505] | 0; //@line 18903
   HEAP8[$50 + 1 >> 0] = HEAP8[14506] | 0; //@line 18903
   HEAP8[$50 + 2 >> 0] = HEAP8[14507] | 0; //@line 18903
   HEAP8[$50 + 3 >> 0] = 0; //@line 18905
   $532 = $51 + 16 | 0; //@line 18906
   HEAP32[$51 >> 2] = 4196; //@line 18907
   HEAP32[$532 >> 2] = $51; //@line 18908
   __THREW__ = 0; //@line 18909
   invoke_viii(21, $0 | 0, $50 | 0, $51 | 0); //@line 18910
   $533 = __THREW__; //@line 18911
   __THREW__ = 0; //@line 18911
   if ($533 & 1) {
    $1087 = ___cxa_find_matching_catch_2() | 0; //@line 18914
    $1088 = tempRet0; //@line 18915
    $1089 = HEAP32[$532 >> 2] | 0; //@line 18916
    do {
     if (($51 | 0) == ($1089 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1089 >> 2] | 0) + 16 >> 2] & 511]($1089); //@line 18923
     } else {
      if (!$1089) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1089 >> 2] | 0) + 20 >> 2] & 511]($1089); //@line 18932
     }
    } while (0);
    if ((HEAP8[$530 >> 0] | 0) >= 0) {
     $$36 = $1088; //@line 18938
     $$3645 = $1087; //@line 18938
     break;
    }
    __ZdlPv(HEAP32[$50 >> 2] | 0); //@line 18942
    $$36 = $1088; //@line 18943
    $$3645 = $1087; //@line 18943
    break;
   }
   $535 = HEAP32[$532 >> 2] | 0; //@line 18946
   do {
    if (($51 | 0) == ($535 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$535 >> 2] | 0) + 16 >> 2] & 511]($535); //@line 18953
    } else {
     if (!$535) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$535 >> 2] | 0) + 20 >> 2] & 511]($535); //@line 18962
    }
   } while (0);
   if ((HEAP8[$530 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$50 >> 2] | 0); //@line 18969
   }
   HEAP32[$52 >> 2] = 0; //@line 18971
   HEAP32[$52 + 4 >> 2] = 0; //@line 18971
   HEAP32[$52 + 8 >> 2] = 0; //@line 18971
   $547 = $52 + 11 | 0; //@line 18972
   HEAP8[$547 >> 0] = 1; //@line 18973
   HEAP8[$52 >> 0] = 43; //@line 18974
   HEAP8[$52 + 1 >> 0] = 0; //@line 18976
   $549 = $53 + 16 | 0; //@line 18977
   HEAP32[$53 >> 2] = 4240; //@line 18978
   HEAP32[$549 >> 2] = $53; //@line 18979
   __THREW__ = 0; //@line 18980
   invoke_viii(21, $0 | 0, $52 | 0, $53 | 0); //@line 18981
   $550 = __THREW__; //@line 18982
   __THREW__ = 0; //@line 18982
   if ($550 & 1) {
    $1101 = ___cxa_find_matching_catch_2() | 0; //@line 18985
    $1102 = tempRet0; //@line 18986
    $1103 = HEAP32[$549 >> 2] | 0; //@line 18987
    do {
     if (($53 | 0) == ($1103 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1103 >> 2] | 0) + 16 >> 2] & 511]($1103); //@line 18994
     } else {
      if (!$1103) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1103 >> 2] | 0) + 20 >> 2] & 511]($1103); //@line 19003
     }
    } while (0);
    if ((HEAP8[$547 >> 0] | 0) >= 0) {
     $$36 = $1102; //@line 19009
     $$3645 = $1101; //@line 19009
     break;
    }
    __ZdlPv(HEAP32[$52 >> 2] | 0); //@line 19013
    $$36 = $1102; //@line 19014
    $$3645 = $1101; //@line 19014
    break;
   }
   $552 = HEAP32[$549 >> 2] | 0; //@line 19017
   do {
    if (($53 | 0) == ($552 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$552 >> 2] | 0) + 16 >> 2] & 511]($552); //@line 19024
    } else {
     if (!$552) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$552 >> 2] | 0) + 20 >> 2] & 511]($552); //@line 19033
    }
   } while (0);
   if ((HEAP8[$547 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$52 >> 2] | 0); //@line 19040
   }
   HEAP32[$54 >> 2] = 0; //@line 19042
   HEAP32[$54 + 4 >> 2] = 0; //@line 19042
   HEAP32[$54 + 8 >> 2] = 0; //@line 19042
   $564 = $54 + 11 | 0; //@line 19043
   HEAP8[$564 >> 0] = 1; //@line 19044
   HEAP8[$54 >> 0] = 45; //@line 19045
   HEAP8[$54 + 1 >> 0] = 0; //@line 19047
   $566 = $55 + 16 | 0; //@line 19048
   HEAP32[$55 >> 2] = 4284; //@line 19049
   HEAP32[$566 >> 2] = $55; //@line 19050
   __THREW__ = 0; //@line 19051
   invoke_viii(21, $0 | 0, $54 | 0, $55 | 0); //@line 19052
   $567 = __THREW__; //@line 19053
   __THREW__ = 0; //@line 19053
   if ($567 & 1) {
    $1115 = ___cxa_find_matching_catch_2() | 0; //@line 19056
    $1116 = tempRet0; //@line 19057
    $1117 = HEAP32[$566 >> 2] | 0; //@line 19058
    do {
     if (($55 | 0) == ($1117 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1117 >> 2] | 0) + 16 >> 2] & 511]($1117); //@line 19065
     } else {
      if (!$1117) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1117 >> 2] | 0) + 20 >> 2] & 511]($1117); //@line 19074
     }
    } while (0);
    if ((HEAP8[$564 >> 0] | 0) >= 0) {
     $$36 = $1116; //@line 19080
     $$3645 = $1115; //@line 19080
     break;
    }
    __ZdlPv(HEAP32[$54 >> 2] | 0); //@line 19084
    $$36 = $1116; //@line 19085
    $$3645 = $1115; //@line 19085
    break;
   }
   $569 = HEAP32[$566 >> 2] | 0; //@line 19088
   do {
    if (($55 | 0) == ($569 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$569 >> 2] | 0) + 16 >> 2] & 511]($569); //@line 19095
    } else {
     if (!$569) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$569 >> 2] | 0) + 20 >> 2] & 511]($569); //@line 19104
    }
   } while (0);
   if ((HEAP8[$564 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$54 >> 2] | 0); //@line 19111
   }
   HEAP32[$56 >> 2] = 0; //@line 19113
   HEAP32[$56 + 4 >> 2] = 0; //@line 19113
   HEAP32[$56 + 8 >> 2] = 0; //@line 19113
   $581 = $56 + 11 | 0; //@line 19114
   HEAP8[$581 >> 0] = 1; //@line 19115
   HEAP8[$56 >> 0] = 47; //@line 19116
   HEAP8[$56 + 1 >> 0] = 0; //@line 19118
   $583 = $57 + 16 | 0; //@line 19119
   HEAP32[$57 >> 2] = 4328; //@line 19120
   HEAP32[$583 >> 2] = $57; //@line 19121
   __THREW__ = 0; //@line 19122
   invoke_viii(21, $0 | 0, $56 | 0, $57 | 0); //@line 19123
   $584 = __THREW__; //@line 19124
   __THREW__ = 0; //@line 19124
   if ($584 & 1) {
    $1129 = ___cxa_find_matching_catch_2() | 0; //@line 19127
    $1130 = tempRet0; //@line 19128
    $1131 = HEAP32[$583 >> 2] | 0; //@line 19129
    do {
     if (($57 | 0) == ($1131 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1131 >> 2] | 0) + 16 >> 2] & 511]($1131); //@line 19136
     } else {
      if (!$1131) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1131 >> 2] | 0) + 20 >> 2] & 511]($1131); //@line 19145
     }
    } while (0);
    if ((HEAP8[$581 >> 0] | 0) >= 0) {
     $$36 = $1130; //@line 19151
     $$3645 = $1129; //@line 19151
     break;
    }
    __ZdlPv(HEAP32[$56 >> 2] | 0); //@line 19155
    $$36 = $1130; //@line 19156
    $$3645 = $1129; //@line 19156
    break;
   }
   $586 = HEAP32[$583 >> 2] | 0; //@line 19159
   do {
    if (($57 | 0) == ($586 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$586 >> 2] | 0) + 16 >> 2] & 511]($586); //@line 19166
    } else {
     if (!$586) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$586 >> 2] | 0) + 20 >> 2] & 511]($586); //@line 19175
    }
   } while (0);
   if ((HEAP8[$581 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$56 >> 2] | 0); //@line 19182
   }
   HEAP32[$58 >> 2] = 0; //@line 19184
   HEAP32[$58 + 4 >> 2] = 0; //@line 19184
   HEAP32[$58 + 8 >> 2] = 0; //@line 19184
   $598 = $58 + 11 | 0; //@line 19185
   HEAP8[$598 >> 0] = 1; //@line 19186
   HEAP8[$58 >> 0] = 42; //@line 19187
   HEAP8[$58 + 1 >> 0] = 0; //@line 19189
   $600 = $59 + 16 | 0; //@line 19190
   HEAP32[$59 >> 2] = 4372; //@line 19191
   HEAP32[$600 >> 2] = $59; //@line 19192
   __THREW__ = 0; //@line 19193
   invoke_viii(21, $0 | 0, $58 | 0, $59 | 0); //@line 19194
   $601 = __THREW__; //@line 19195
   __THREW__ = 0; //@line 19195
   if ($601 & 1) {
    $1143 = ___cxa_find_matching_catch_2() | 0; //@line 19198
    $1144 = tempRet0; //@line 19199
    $1145 = HEAP32[$600 >> 2] | 0; //@line 19200
    do {
     if (($59 | 0) == ($1145 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1145 >> 2] | 0) + 16 >> 2] & 511]($1145); //@line 19207
     } else {
      if (!$1145) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1145 >> 2] | 0) + 20 >> 2] & 511]($1145); //@line 19216
     }
    } while (0);
    if ((HEAP8[$598 >> 0] | 0) >= 0) {
     $$36 = $1144; //@line 19222
     $$3645 = $1143; //@line 19222
     break;
    }
    __ZdlPv(HEAP32[$58 >> 2] | 0); //@line 19226
    $$36 = $1144; //@line 19227
    $$3645 = $1143; //@line 19227
    break;
   }
   $603 = HEAP32[$600 >> 2] | 0; //@line 19230
   do {
    if (($59 | 0) == ($603 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$603 >> 2] | 0) + 16 >> 2] & 511]($603); //@line 19237
    } else {
     if (!$603) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$603 >> 2] | 0) + 20 >> 2] & 511]($603); //@line 19246
    }
   } while (0);
   if ((HEAP8[$598 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$58 >> 2] | 0); //@line 19253
   }
   HEAP32[$60 >> 2] = 0; //@line 19255
   HEAP32[$60 + 4 >> 2] = 0; //@line 19255
   HEAP32[$60 + 8 >> 2] = 0; //@line 19255
   $615 = $60 + 11 | 0; //@line 19256
   HEAP8[$615 >> 0] = 5; //@line 19257
   HEAP8[$60 >> 0] = HEAP8[14509] | 0; //@line 19258
   HEAP8[$60 + 1 >> 0] = HEAP8[14510] | 0; //@line 19258
   HEAP8[$60 + 2 >> 0] = HEAP8[14511] | 0; //@line 19258
   HEAP8[$60 + 3 >> 0] = HEAP8[14512] | 0; //@line 19258
   HEAP8[$60 + 4 >> 0] = HEAP8[14513] | 0; //@line 19258
   HEAP8[$60 + 5 >> 0] = 0; //@line 19260
   $617 = $61 + 16 | 0; //@line 19261
   HEAP32[$61 >> 2] = 4416; //@line 19262
   HEAP32[$617 >> 2] = $61; //@line 19263
   __THREW__ = 0; //@line 19264
   invoke_viii(21, $0 | 0, $60 | 0, $61 | 0); //@line 19265
   $618 = __THREW__; //@line 19266
   __THREW__ = 0; //@line 19266
   if ($618 & 1) {
    $1157 = ___cxa_find_matching_catch_2() | 0; //@line 19269
    $1158 = tempRet0; //@line 19270
    $1159 = HEAP32[$617 >> 2] | 0; //@line 19271
    do {
     if (($61 | 0) == ($1159 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1159 >> 2] | 0) + 16 >> 2] & 511]($1159); //@line 19278
     } else {
      if (!$1159) {
       break;
      }
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1159 >> 2] | 0) + 20 >> 2] & 511]($1159); //@line 19287
     }
    } while (0);
    if ((HEAP8[$615 >> 0] | 0) >= 0) {
     $$36 = $1158; //@line 19293
     $$3645 = $1157; //@line 19293
     break;
    }
    __ZdlPv(HEAP32[$60 >> 2] | 0); //@line 19297
    $$36 = $1158; //@line 19298
    $$3645 = $1157; //@line 19298
    break;
   }
   $620 = HEAP32[$617 >> 2] | 0; //@line 19301
   do {
    if (($61 | 0) == ($620 | 0)) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$620 >> 2] | 0) + 16 >> 2] & 511]($620); //@line 19308
    } else {
     if (!$620) {
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$620 >> 2] | 0) + 20 >> 2] & 511]($620); //@line 19317
    }
   } while (0);
   if ((HEAP8[$615 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$60 >> 2] | 0); //@line 19324
   }
   HEAP32[$62 >> 2] = 0; //@line 19326
   HEAP32[$62 + 4 >> 2] = 0; //@line 19326
   HEAP32[$62 + 8 >> 2] = 0; //@line 19326
   __THREW__ = 0; //@line 19327
   $632 = invoke_ii(142, 16) | 0; //@line 19328
   $633 = __THREW__; //@line 19329
   __THREW__ = 0; //@line 19329
   do {
    if (!($633 & 1)) {
     HEAP32[$62 >> 2] = $632; //@line 19333
     HEAP32[$62 + 8 >> 2] = -2147483632; //@line 19335
     HEAP32[$62 + 4 >> 2] = 11; //@line 19337
     dest = $632; //@line 19338
     src = 14515; //@line 19338
     stop = dest + 11 | 0; //@line 19338
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 19338
      dest = dest + 1 | 0; //@line 19338
      src = src + 1 | 0; //@line 19338
     } while ((dest | 0) < (stop | 0));
     HEAP8[$632 + 11 >> 0] = 0; //@line 19340
     $638 = $63 + 16 | 0; //@line 19341
     HEAP32[$63 >> 2] = 4460; //@line 19342
     HEAP32[$638 >> 2] = $63; //@line 19343
     __THREW__ = 0; //@line 19344
     invoke_viii(21, $0 | 0, $62 | 0, $63 | 0); //@line 19345
     $639 = __THREW__; //@line 19346
     __THREW__ = 0; //@line 19346
     if ($639 & 1) {
      $1171 = ___cxa_find_matching_catch_2() | 0; //@line 19349
      $1172 = tempRet0; //@line 19350
      $1173 = HEAP32[$638 >> 2] | 0; //@line 19351
      do {
       if (($63 | 0) == ($1173 | 0)) {
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1173 >> 2] | 0) + 16 >> 2] & 511]($1173); //@line 19358
       } else {
        if (!$1173) {
         break;
        }
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1173 >> 2] | 0) + 20 >> 2] & 511]($1173); //@line 19367
       }
      } while (0);
      if ((HEAP8[$62 + 11 >> 0] | 0) >= 0) {
       $$36 = $1172; //@line 19374
       $$3645 = $1171; //@line 19374
       break L1;
      }
      __ZdlPv(HEAP32[$62 >> 2] | 0); //@line 19378
      $$36 = $1172; //@line 19379
      $$3645 = $1171; //@line 19379
      break L1;
     }
     $641 = HEAP32[$638 >> 2] | 0; //@line 19382
     do {
      if (($63 | 0) == ($641 | 0)) {
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$641 >> 2] | 0) + 16 >> 2] & 511]($641); //@line 19389
      } else {
       if (!$641) {
        break;
       }
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$641 >> 2] | 0) + 20 >> 2] & 511]($641); //@line 19398
      }
     } while (0);
     if ((HEAP8[$62 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$62 >> 2] | 0); //@line 19406
     }
     HEAP32[$64 >> 2] = 0; //@line 19408
     HEAP32[$64 + 4 >> 2] = 0; //@line 19408
     HEAP32[$64 + 8 >> 2] = 0; //@line 19408
     $654 = $64 + 11 | 0; //@line 19409
     HEAP8[$654 >> 0] = 8; //@line 19410
     $655 = $64; //@line 19411
     HEAP32[$655 >> 2] = 1937007975; //@line 19413
     HEAP32[$655 + 4 >> 2] = 1801675124; //@line 19416
     HEAP8[$64 + 8 >> 0] = 0; //@line 19418
     $660 = $65 + 16 | 0; //@line 19419
     HEAP32[$65 >> 2] = 4504; //@line 19420
     HEAP32[$660 >> 2] = $65; //@line 19421
     __THREW__ = 0; //@line 19422
     invoke_viii(21, $0 | 0, $64 | 0, $65 | 0); //@line 19423
     $661 = __THREW__; //@line 19424
     __THREW__ = 0; //@line 19424
     if ($661 & 1) {
      $1186 = ___cxa_find_matching_catch_2() | 0; //@line 19427
      $1187 = tempRet0; //@line 19428
      $1188 = HEAP32[$660 >> 2] | 0; //@line 19429
      do {
       if (($65 | 0) == ($1188 | 0)) {
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1188 >> 2] | 0) + 16 >> 2] & 511]($1188); //@line 19436
       } else {
        if (!$1188) {
         break;
        }
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1188 >> 2] | 0) + 20 >> 2] & 511]($1188); //@line 19445
       }
      } while (0);
      if ((HEAP8[$654 >> 0] | 0) >= 0) {
       $$36 = $1187; //@line 19451
       $$3645 = $1186; //@line 19451
       break L1;
      }
      __ZdlPv(HEAP32[$64 >> 2] | 0); //@line 19455
      $$36 = $1187; //@line 19456
      $$3645 = $1186; //@line 19456
      break L1;
     }
     $663 = HEAP32[$660 >> 2] | 0; //@line 19459
     do {
      if (($65 | 0) == ($663 | 0)) {
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$663 >> 2] | 0) + 16 >> 2] & 511]($663); //@line 19466
      } else {
       if (!$663) {
        break;
       }
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$663 >> 2] | 0) + 20 >> 2] & 511]($663); //@line 19475
      }
     } while (0);
     if ((HEAP8[$654 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$64 >> 2] | 0); //@line 19482
     }
     HEAP32[$66 >> 2] = 0; //@line 19484
     HEAP32[$66 + 4 >> 2] = 0; //@line 19484
     HEAP32[$66 + 8 >> 2] = 0; //@line 19484
     __THREW__ = 0; //@line 19485
     $675 = invoke_ii(142, 16) | 0; //@line 19486
     $676 = __THREW__; //@line 19487
     __THREW__ = 0; //@line 19487
     if ($676 & 1) {
      break;
     }
     HEAP32[$66 >> 2] = $675; //@line 19492
     HEAP32[$66 + 8 >> 2] = -2147483632; //@line 19494
     HEAP32[$66 + 4 >> 2] = 11; //@line 19496
     dest = $675; //@line 19497
     src = 14527; //@line 19497
     stop = dest + 11 | 0; //@line 19497
     do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 19497
      dest = dest + 1 | 0; //@line 19497
      src = src + 1 | 0; //@line 19497
     } while ((dest | 0) < (stop | 0));
     HEAP8[$675 + 11 >> 0] = 0; //@line 19499
     $681 = $67 + 16 | 0; //@line 19500
     HEAP32[$67 >> 2] = 4548; //@line 19501
     HEAP32[$681 >> 2] = $67; //@line 19502
     __THREW__ = 0; //@line 19503
     invoke_viii(21, $0 | 0, $66 | 0, $67 | 0); //@line 19504
     $682 = __THREW__; //@line 19505
     __THREW__ = 0; //@line 19505
     if ($682 & 1) {
      $1200 = ___cxa_find_matching_catch_2() | 0; //@line 19508
      $1201 = tempRet0; //@line 19509
      $1202 = HEAP32[$681 >> 2] | 0; //@line 19510
      do {
       if (($67 | 0) == ($1202 | 0)) {
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1202 >> 2] | 0) + 16 >> 2] & 511]($1202); //@line 19517
       } else {
        if (!$1202) {
         break;
        }
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1202 >> 2] | 0) + 20 >> 2] & 511]($1202); //@line 19526
       }
      } while (0);
      if ((HEAP8[$66 + 11 >> 0] | 0) >= 0) {
       $$36 = $1201; //@line 19533
       $$3645 = $1200; //@line 19533
       break L1;
      }
      __ZdlPv(HEAP32[$66 >> 2] | 0); //@line 19537
      $$36 = $1201; //@line 19538
      $$3645 = $1200; //@line 19538
      break L1;
     }
     $684 = HEAP32[$681 >> 2] | 0; //@line 19541
     do {
      if (($67 | 0) == ($684 | 0)) {
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$684 >> 2] | 0) + 16 >> 2] & 511]($684); //@line 19548
      } else {
       if (!$684) {
        break;
       }
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$684 >> 2] | 0) + 20 >> 2] & 511]($684); //@line 19557
      }
     } while (0);
     if ((HEAP8[$66 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$66 >> 2] | 0); //@line 19565
     }
     HEAP32[$68 >> 2] = 0; //@line 19567
     HEAP32[$68 + 4 >> 2] = 0; //@line 19567
     HEAP32[$68 + 8 >> 2] = 0; //@line 19567
     $697 = $68 + 11 | 0; //@line 19568
     HEAP8[$697 >> 0] = 6; //@line 19569
     HEAP8[$68 >> 0] = HEAP8[14539] | 0; //@line 19570
     HEAP8[$68 + 1 >> 0] = HEAP8[14540] | 0; //@line 19570
     HEAP8[$68 + 2 >> 0] = HEAP8[14541] | 0; //@line 19570
     HEAP8[$68 + 3 >> 0] = HEAP8[14542] | 0; //@line 19570
     HEAP8[$68 + 4 >> 0] = HEAP8[14543] | 0; //@line 19570
     HEAP8[$68 + 5 >> 0] = HEAP8[14544] | 0; //@line 19570
     HEAP8[$68 + 6 >> 0] = 0; //@line 19572
     $699 = $69 + 16 | 0; //@line 19573
     HEAP32[$69 >> 2] = 4592; //@line 19574
     HEAP32[$699 >> 2] = $69; //@line 19575
     __THREW__ = 0; //@line 19576
     invoke_viii(21, $0 | 0, $68 | 0, $69 | 0); //@line 19577
     $700 = __THREW__; //@line 19578
     __THREW__ = 0; //@line 19578
     if ($700 & 1) {
      $1215 = ___cxa_find_matching_catch_2() | 0; //@line 19581
      $1216 = tempRet0; //@line 19582
      $1217 = HEAP32[$699 >> 2] | 0; //@line 19583
      do {
       if (($69 | 0) == ($1217 | 0)) {
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1217 >> 2] | 0) + 16 >> 2] & 511]($1217); //@line 19590
       } else {
        if (!$1217) {
         break;
        }
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1217 >> 2] | 0) + 20 >> 2] & 511]($1217); //@line 19599
       }
      } while (0);
      if ((HEAP8[$697 >> 0] | 0) >= 0) {
       $$36 = $1216; //@line 19605
       $$3645 = $1215; //@line 19605
       break L1;
      }
      __ZdlPv(HEAP32[$68 >> 2] | 0); //@line 19609
      $$36 = $1216; //@line 19610
      $$3645 = $1215; //@line 19610
      break L1;
     }
     $702 = HEAP32[$699 >> 2] | 0; //@line 19613
     do {
      if (($69 | 0) == ($702 | 0)) {
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$702 >> 2] | 0) + 16 >> 2] & 511]($702); //@line 19620
      } else {
       if (!$702) {
        break;
       }
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$702 >> 2] | 0) + 20 >> 2] & 511]($702); //@line 19629
      }
     } while (0);
     if ((HEAP8[$697 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$68 >> 2] | 0); //@line 19636
     }
     HEAP32[$70 >> 2] = 0; //@line 19638
     HEAP32[$70 + 4 >> 2] = 0; //@line 19638
     HEAP32[$70 + 8 >> 2] = 0; //@line 19638
     $714 = $70 + 11 | 0; //@line 19639
     HEAP8[$714 >> 0] = 6; //@line 19640
     HEAP8[$70 >> 0] = HEAP8[14546] | 0; //@line 19641
     HEAP8[$70 + 1 >> 0] = HEAP8[14547] | 0; //@line 19641
     HEAP8[$70 + 2 >> 0] = HEAP8[14548] | 0; //@line 19641
     HEAP8[$70 + 3 >> 0] = HEAP8[14549] | 0; //@line 19641
     HEAP8[$70 + 4 >> 0] = HEAP8[14550] | 0; //@line 19641
     HEAP8[$70 + 5 >> 0] = HEAP8[14551] | 0; //@line 19641
     HEAP8[$70 + 6 >> 0] = 0; //@line 19643
     $716 = $71 + 16 | 0; //@line 19644
     HEAP32[$71 >> 2] = 4636; //@line 19645
     HEAP32[$716 >> 2] = $71; //@line 19646
     __THREW__ = 0; //@line 19647
     invoke_viii(21, $0 | 0, $70 | 0, $71 | 0); //@line 19648
     $717 = __THREW__; //@line 19649
     __THREW__ = 0; //@line 19649
     if ($717 & 1) {
      $1229 = ___cxa_find_matching_catch_2() | 0; //@line 19652
      $1230 = tempRet0; //@line 19653
      $1231 = HEAP32[$716 >> 2] | 0; //@line 19654
      do {
       if (($71 | 0) == ($1231 | 0)) {
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1231 >> 2] | 0) + 16 >> 2] & 511]($1231); //@line 19661
       } else {
        if (!$1231) {
         break;
        }
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1231 >> 2] | 0) + 20 >> 2] & 511]($1231); //@line 19670
       }
      } while (0);
      if ((HEAP8[$714 >> 0] | 0) >= 0) {
       $$36 = $1230; //@line 19676
       $$3645 = $1229; //@line 19676
       break L1;
      }
      __ZdlPv(HEAP32[$70 >> 2] | 0); //@line 19680
      $$36 = $1230; //@line 19681
      $$3645 = $1229; //@line 19681
      break L1;
     }
     $719 = HEAP32[$716 >> 2] | 0; //@line 19684
     do {
      if (($71 | 0) == ($719 | 0)) {
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$719 >> 2] | 0) + 16 >> 2] & 511]($719); //@line 19691
      } else {
       if (!$719) {
        break;
       }
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$719 >> 2] | 0) + 20 >> 2] & 511]($719); //@line 19700
      }
     } while (0);
     if ((HEAP8[$714 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$70 >> 2] | 0); //@line 19707
     }
     HEAP32[$72 + 8 >> 2] = 0; //@line 19710
     $732 = $72 + 11 | 0; //@line 19711
     HEAP8[$732 >> 0] = 7; //@line 19712
     HEAP8[$72 >> 0] = HEAP8[14553] | 0; //@line 19713
     HEAP8[$72 + 1 >> 0] = HEAP8[14554] | 0; //@line 19713
     HEAP8[$72 + 2 >> 0] = HEAP8[14555] | 0; //@line 19713
     HEAP8[$72 + 3 >> 0] = HEAP8[14556] | 0; //@line 19713
     HEAP8[$72 + 4 >> 0] = HEAP8[14557] | 0; //@line 19713
     HEAP8[$72 + 5 >> 0] = HEAP8[14558] | 0; //@line 19713
     HEAP8[$72 + 6 >> 0] = HEAP8[14559] | 0; //@line 19713
     HEAP8[$72 + 7 >> 0] = 0; //@line 19715
     $734 = $73 + 16 | 0; //@line 19716
     HEAP32[$73 >> 2] = 4680; //@line 19717
     HEAP32[$734 >> 2] = $73; //@line 19718
     __THREW__ = 0; //@line 19719
     invoke_viii(21, $0 | 0, $72 | 0, $73 | 0); //@line 19720
     $735 = __THREW__; //@line 19721
     __THREW__ = 0; //@line 19721
     if ($735 & 1) {
      $1243 = ___cxa_find_matching_catch_2() | 0; //@line 19724
      $1244 = tempRet0; //@line 19725
      $1245 = HEAP32[$734 >> 2] | 0; //@line 19726
      do {
       if (($73 | 0) == ($1245 | 0)) {
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1245 >> 2] | 0) + 16 >> 2] & 511]($1245); //@line 19733
       } else {
        if (!$1245) {
         break;
        }
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1245 >> 2] | 0) + 20 >> 2] & 511]($1245); //@line 19742
       }
      } while (0);
      if ((HEAP8[$732 >> 0] | 0) >= 0) {
       $$36 = $1244; //@line 19748
       $$3645 = $1243; //@line 19748
       break L1;
      }
      __ZdlPv(HEAP32[$72 >> 2] | 0); //@line 19752
      $$36 = $1244; //@line 19753
      $$3645 = $1243; //@line 19753
      break L1;
     }
     $737 = HEAP32[$734 >> 2] | 0; //@line 19756
     do {
      if (($73 | 0) == ($737 | 0)) {
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$737 >> 2] | 0) + 16 >> 2] & 511]($737); //@line 19763
      } else {
       if (!$737) {
        break;
       }
       FUNCTION_TABLE_vi[HEAP32[(HEAP32[$737 >> 2] | 0) + 20 >> 2] & 511]($737); //@line 19772
      }
     } while (0);
     if ((HEAP8[$732 >> 0] | 0) >= 0) {
      STACKTOP = sp; //@line 19778
      return;
     }
     __ZdlPv(HEAP32[$72 >> 2] | 0); //@line 19781
     STACKTOP = sp; //@line 19782
     return;
    }
   } while (0);
   $749 = ___cxa_find_matching_catch_2() | 0; //@line 19785
   $$36 = tempRet0; //@line 19787
   $$3645 = $749; //@line 19787
  }
 } while (0);
 $1258 = HEAP32[$0 + 8 >> 2] | 0; //@line 19791
 L619 : do {
  if ($1258 | 0) {
   $$018$i$i$i = $1258; //@line 19795
   while (1) {
    $$018$i$i$i$looptemp = $$018$i$i$i;
    $$018$i$i$i = HEAP32[$$018$i$i$i >> 2] | 0; //@line 19797
    $1261 = $$018$i$i$i$looptemp + 8 | 0; //@line 19798
    $1262 = $$018$i$i$i$looptemp + 48 | 0; //@line 19799
    $1263 = HEAP32[$1262 >> 2] | 0; //@line 19800
    if (($1263 | 0) != -1) {
     __THREW__ = 0; //@line 19806
     invoke_vii(HEAP32[3088 + ($1263 << 2) >> 2] | 0, $1 | 0, $$018$i$i$i$looptemp + 24 | 0); //@line 19807
     $1268 = __THREW__; //@line 19808
     __THREW__ = 0; //@line 19808
     if ($1268 & 1) {
      break;
     }
    }
    HEAP32[$1262 >> 2] = -1; //@line 19814
    if ((HEAP8[$1261 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$1261 >> 2] | 0); //@line 19820
    }
    __ZdlPv($$018$i$i$i$looptemp); //@line 19822
    if (!$$018$i$i$i) {
     break L619;
    }
   }
   $1270 = ___cxa_find_matching_catch_3(0) | 0; //@line 19830
   ___clang_call_terminate($1270); //@line 19832
  }
 } while (0);
 $1277 = HEAP32[$0 >> 2] | 0; //@line 19836
 HEAP32[$0 >> 2] = 0; //@line 19837
 if (!$1277) {
  ___resumeException($$3645 | 0); //@line 19840
 }
 __ZdlPv($1277); //@line 19843
 ___resumeException($$3645 | 0); //@line 19844
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i190 = 0, $$0$i$i$i$i252 = 0, $$0$i$i$i$i272 = 0, $$0$i$i$i$i293 = 0, $$0$i$i$i$i311 = 0, $$0$i$i$i$i336 = 0, $$0$i$i172 = 0, $$0$i$i174 = 0, $$0$i$i177 = 0, $$0$i$i180 = 0, $$0$i$i185 = 0, $$0$i$i188 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i196 = 0, $$0$i$i2$i$i258 = 0, $$0$i$i2$i$i278 = 0, $$0$i$i2$i$i299 = 0, $$0$i$i2$i$i317 = 0, $$0$i$i2$i$i342 = 0, $$0$i$i204 = 0, $$0$i$i209 = 0, $$0$i$i216 = 0, $$0$i$i221 = 0, $$0$i$i228 = 0, $$0$i$i235 = 0, $$0$i$i266 = 0, $$0$i$i286 = 0, $$0$i$i306 = 0, $$0$i$i325 = 0, $$0$i$i330 = 0, $$0$i$i350 = 0, $$0135 = 0, $$0152 = 0, $$0161 = 0, $$10 = 0, $$1153 = 0, $$2137$ph = 0, $$5145 = 0, $$5151 = 0, $$lcssa = 0, $$pre$i4$i$i198 = 0, $$pre$i4$i$i198488 = 0, $$pre$i4$i$i198490 = 0, $$pre$i4$i$i260 = 0, $$pre$i4$i$i260485 = 0, $$pre$i4$i$i260486 = 0, $$pre$i4$i$i280 = 0, $$pre$i4$i$i280470 = 0, $$pre$i4$i$i280472 = 0, $$pre$i4$i$i301 = 0, $$pre$i4$i$i319 = 0, $$pre$i4$i$i319477$ph = 0, $$pre$i4$i$i319477492 = 0, $$sink = 0, $$sroa$0361$0 = 0, $$sroa$0383$0 = 0, $101 = 0, $103 = 0, $11 = 0, $110 = 0, $111 = 0, $118 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $130 = 0, $131 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $15 = 0, $151 = 0, $152 = 0, $158 = 0, $16 = 0, $161 = 0, $168 = 0, $169 = 0, $17 = 0, $176 = 0, $177 = 0, $179 = 0, $18 = 0, $186 = 0, $187 = 0, $19 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $206 = 0, $207 = 0, $21 = 0, $212 = 0, $214 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $228 = 0, $23 = 0, $230 = 0, $233 = 0, $237 = 0, $238 = 0, $24 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $257 = 0, $261 = 0, $267 = 0, $269 = 0, $27 = 0, $276 = 0, $277 = 0, $287 = 0, $288 = 0, $289 = 0, $296 = 0, $300 = 0, $309 = 0, $310 = 0, $320 = 0, $321 = 0, $322 = 0, $325 = 0, $329 = 0, $333 = 0, $342 = 0, $343 = 0, $353 = 0, $354 = 0, $355 = 0, $362 = 0, $366 = 0, $380 = 0, $382 = 0, $384 = 0, $389 = 0, $39 = 0, $390 = 0, $393 = 0, $397 = 0, $403 = 0, $404 = 0, $410 = 0, $412 = 0, $413 = 0, $414 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $420 = 0, $423 = 0, $43 = 0, $430 = 0, $431 = 0, $438 = 0, $439 = 0, $44 = 0, $442 = 0, $445 = 0, $446 = 0, $448 = 0, $451 = 0, $458 = 0, $459 = 0, $46 = 0, $465 = 0, $468 = 0, $47 = 0, $475 = 0, $476 = 0, $483 = 0, $484 = 0, $486 = 0, $49 = 0, $493 = 0, $494 = 0, $500 = 0, $501 = 0, $502 = 0, $509 = 0, $51 = 0, $519 = 0, $52 = 0, $520 = 0, $530 = 0, $533 = 0, $54 = 0, $540 = 0, $541 = 0, $547 = 0, $55 = 0, $550 = 0, $557 = 0, $558 = 0, $56 = 0, $565 = 0, $566 = 0, $568 = 0, $57 = 0, $575 = 0, $576 = 0, $58 = 0, $583 = 0, $584 = 0, $586 = 0, $589 = 0, $592 = 0, $594 = 0, $60 = 0, $603 = 0, $606 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $619 = 0, $624 = 0, $629 = 0, $63 = 0, $632 = 0, $635 = 0, $638 = 0, $645 = 0, $646 = 0, $654 = 0, $661 = 0, $662 = 0, $668 = 0, $670 = 0, $677 = 0, $678 = 0, $684 = 0, $685 = 0, $686 = 0, $693 = 0, $699 = 0, $70 = 0, $702 = 0, $709 = 0, $71 = 0, $710 = 0, $716 = 0, $719 = 0, $726 = 0, $727 = 0, $734 = 0, $735 = 0, $737 = 0, $744 = 0, $745 = 0, $752 = 0, $753 = 0, $758 = 0, $760 = 0, $762 = 0, $769 = 0, $77 = 0, $770 = 0, $774 = 0, $778 = 0, $779 = 0, $780 = 0, $787 = 0, $80 = 0, $801 = 0, $802 = 0, $803 = 0, $808 = 0, $809 = 0, $812 = 0, $819 = 0, $820 = 0, $826 = 0, $829 = 0, $836 = 0, $837 = 0, $843 = 0, $845 = 0, $852 = 0, $853 = 0, $861 = 0, $866 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $878 = 0, $88 = 0, $882 = 0, $883 = 0, $885 = 0, $891 = 0, $893 = 0, $896 = 0, $898 = 0, $900 = 0, $903 = 0, $905 = 0, $907 = 0, $908 = 0, $909 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 49054
 STACKTOP = STACKTOP + 512 | 0; //@line 49055
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 49055
 $11 = sp + 96 | 0; //@line 49056
 $12 = sp + 104 | 0; //@line 49057
 $13 = sp + 88 | 0; //@line 49058
 $14 = sp + 80 | 0; //@line 49059
 $15 = sp + 76 | 0; //@line 49060
 $16 = sp + 504 | 0; //@line 49061
 $17 = sp + 72 | 0; //@line 49062
 $18 = sp + 68 | 0; //@line 49063
 $19 = sp + 56 | 0; //@line 49064
 $20 = sp + 44 | 0; //@line 49065
 $21 = sp + 32 | 0; //@line 49066
 $22 = sp + 20 | 0; //@line 49067
 $23 = sp + 8 | 0; //@line 49068
 $24 = sp + 4 | 0; //@line 49069
 $25 = sp; //@line 49070
 HEAP32[$11 >> 2] = $10; //@line 49071
 HEAP32[$13 >> 2] = $12; //@line 49073
 $27 = $13 + 4 | 0; //@line 49074
 HEAP32[$27 >> 2] = 267; //@line 49075
 HEAP32[$14 >> 2] = $12; //@line 49076
 HEAP32[$15 >> 2] = $12 + 400; //@line 49078
 HEAP32[$19 >> 2] = 0; //@line 49079
 HEAP32[$19 + 4 >> 2] = 0; //@line 49079
 HEAP32[$19 + 8 >> 2] = 0; //@line 49079
 $$0$i$i = 0; //@line 49080
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$19 + ($$0$i$i << 2) >> 2] = 0; //@line 49087
  $$0$i$i = $$0$i$i + 1 | 0; //@line 49089
 }
 HEAP32[$20 >> 2] = 0; //@line 49091
 HEAP32[$20 + 4 >> 2] = 0; //@line 49091
 HEAP32[$20 + 8 >> 2] = 0; //@line 49091
 $$0$i$i172 = 0; //@line 49092
 while (1) {
  if (($$0$i$i172 | 0) == 3) {
   break;
  }
  HEAP32[$20 + ($$0$i$i172 << 2) >> 2] = 0; //@line 49099
  $$0$i$i172 = $$0$i$i172 + 1 | 0; //@line 49101
 }
 HEAP32[$21 >> 2] = 0; //@line 49103
 HEAP32[$21 + 4 >> 2] = 0; //@line 49103
 HEAP32[$21 + 8 >> 2] = 0; //@line 49103
 $$0$i$i174 = 0; //@line 49104
 while (1) {
  if (($$0$i$i174 | 0) == 3) {
   break;
  }
  HEAP32[$21 + ($$0$i$i174 << 2) >> 2] = 0; //@line 49111
  $$0$i$i174 = $$0$i$i174 + 1 | 0; //@line 49113
 }
 HEAP32[$22 >> 2] = 0; //@line 49115
 HEAP32[$22 + 4 >> 2] = 0; //@line 49115
 HEAP32[$22 + 8 >> 2] = 0; //@line 49115
 $$0$i$i177 = 0; //@line 49116
 while (1) {
  if (($$0$i$i177 | 0) == 3) {
   break;
  }
  HEAP32[$22 + ($$0$i$i177 << 2) >> 2] = 0; //@line 49123
  $$0$i$i177 = $$0$i$i177 + 1 | 0; //@line 49125
 }
 HEAP32[$23 >> 2] = 0; //@line 49127
 HEAP32[$23 + 4 >> 2] = 0; //@line 49127
 HEAP32[$23 + 8 >> 2] = 0; //@line 49127
 $$0$i$i180 = 0; //@line 49128
 while (1) {
  if (($$0$i$i180 | 0) == 3) {
   break;
  }
  HEAP32[$23 + ($$0$i$i180 << 2) >> 2] = 0; //@line 49135
  $$0$i$i180 = $$0$i$i180 + 1 | 0; //@line 49137
 }
 __THREW__ = 0; //@line 49139
 invoke_viiiiiiiiii(2, $2 | 0, $3 | 0, $16 | 0, $17 | 0, $18 | 0, $19 | 0, $20 | 0, $21 | 0, $22 | 0, $24 | 0); //@line 49140
 $39 = __THREW__; //@line 49141
 __THREW__ = 0; //@line 49141
 L21 : do {
  if ($39 & 1) {
   $94 = ___cxa_find_matching_catch_2() | 0; //@line 49145
   $$5145 = $94; //@line 49147
   $$5151 = tempRet0; //@line 49147
  } else {
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2]; //@line 49150
   $43 = $21 + 8 + 3 | 0; //@line 49152
   $44 = $21 + 4 | 0; //@line 49153
   $46 = $22 + 8 + 3 | 0; //@line 49155
   $47 = $22 + 4 | 0; //@line 49156
   $49 = ($4 & 512 | 0) != 0; //@line 49158
   $51 = $20 + 8 + 3 | 0; //@line 49160
   $52 = $20 + 4 | 0; //@line 49161
   $54 = $23 + 8 + 3 | 0; //@line 49163
   $55 = $23 + 4 | 0; //@line 49164
   $56 = $16 + 3 | 0; //@line 49165
   $57 = $19 + 11 | 0; //@line 49166
   $58 = $19 + 4 | 0; //@line 49167
   $$0152 = 0; //@line 49168
   $$0161 = 0; //@line 49168
   L24 : while (1) {
    if ($$0161 >>> 0 >= 4) {
     label = 247; //@line 49172
     break;
    }
    $60 = HEAP32[$0 >> 2] | 0; //@line 49175
    do {
     if (!$60) {
      $907 = 1; //@line 49179
     } else {
      $63 = HEAP32[$60 + 12 >> 2] | 0; //@line 49182
      if (($63 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 49190
       $70 = invoke_ii(HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] | 0, $60 | 0) | 0; //@line 49191
       $71 = __THREW__; //@line 49192
       __THREW__ = 0; //@line 49192
       if ($71 & 1) {
        label = 35; //@line 49195
        break L24;
       } else {
        $$0$i$i$i$i = $70; //@line 49198
       }
      } else {
       $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$63 >> 2] | 0) | 0; //@line 49203
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0; //@line 49208
       $907 = 1; //@line 49209
       break;
      } else {
       $907 = (HEAP32[$0 >> 2] | 0) == 0; //@line 49214
       break;
      }
     }
    } while (0);
    $77 = HEAP32[$1 >> 2] | 0; //@line 49219
    do {
     if (!$77) {
      label = 32; //@line 49223
     } else {
      $80 = HEAP32[$77 + 12 >> 2] | 0; //@line 49226
      if (($80 | 0) == (HEAP32[$77 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 49234
       $87 = invoke_ii(HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] | 0, $77 | 0) | 0; //@line 49235
       $88 = __THREW__; //@line 49236
       __THREW__ = 0; //@line 49236
       if ($88 & 1) {
        label = 35; //@line 49239
        break L24;
       } else {
        $$0$i$i2$i$i = $87; //@line 49242
       }
      } else {
       $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$80 >> 2] | 0) | 0; //@line 49247
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 49252
       label = 32; //@line 49253
       break;
      } else {
       if ($907) {
        $908 = $77; //@line 49257
        break;
       } else {
        label = 247; //@line 49260
        break L24;
       }
      }
     }
    } while (0);
    if ((label | 0) == 32) {
     label = 0; //@line 49267
     if ($907) {
      label = 247; //@line 49269
      break;
     } else {
      $908 = 0; //@line 49272
     }
    }
    L49 : do {
     switch (HEAP8[$16 + $$0161 >> 0] | 0) {
     case 1:
      {
       if (($$0161 | 0) == 3) {
        $$1153 = $$0152; //@line 49283
       } else {
        $101 = HEAP32[$0 >> 2] | 0; //@line 49285
        $103 = HEAP32[$101 + 12 >> 2] | 0; //@line 49287
        if (($103 | 0) == (HEAP32[$101 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 49295
         $110 = invoke_ii(HEAP32[(HEAP32[$101 >> 2] | 0) + 36 >> 2] | 0, $101 | 0) | 0; //@line 49296
         $111 = __THREW__; //@line 49297
         __THREW__ = 0; //@line 49297
         if ($111 & 1) {
          label = 35; //@line 49300
          break L24;
         } else {
          $$0$i$i185 = $110; //@line 49303
         }
        } else {
         $$0$i$i185 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$103 >> 2] | 0) | 0; //@line 49308
        }
        __THREW__ = 0; //@line 49313
        $118 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 8192, $$0$i$i185 | 0) | 0; //@line 49314
        $119 = __THREW__; //@line 49315
        __THREW__ = 0; //@line 49315
        if ($119 & 1) {
         label = 35; //@line 49318
         break L24;
        }
        if (!$118) {
         label = 47; //@line 49322
         break L24;
        }
        $121 = HEAP32[$0 >> 2] | 0; //@line 49325
        $122 = $121 + 12 | 0; //@line 49326
        $123 = HEAP32[$122 >> 2] | 0; //@line 49327
        if (($123 | 0) == (HEAP32[$121 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 49335
         $130 = invoke_ii(HEAP32[(HEAP32[$121 >> 2] | 0) + 40 >> 2] | 0, $121 | 0) | 0; //@line 49336
         $131 = __THREW__; //@line 49337
         __THREW__ = 0; //@line 49337
         if ($131 & 1) {
          label = 35; //@line 49340
          break L24;
         } else {
          $$0$i$i188 = $130; //@line 49343
         }
        } else {
         HEAP32[$122 >> 2] = $123 + 4; //@line 49347
         $$0$i$i188 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$123 >> 2] | 0) | 0; //@line 49350
        }
        __THREW__ = 0; //@line 49352
        invoke_vii(148, $23 | 0, $$0$i$i188 | 0); //@line 49353
        $136 = __THREW__; //@line 49354
        __THREW__ = 0; //@line 49354
        if ($136 & 1) {
         label = 35; //@line 49357
         break L24;
        } else {
         $$pre$i4$i$i198 = $908; //@line 49360
         $158 = $908; //@line 49360
         label = 49; //@line 49361
        }
       }
       break;
      }
     case 0:
      {
       if (($$0161 | 0) == 3) {
        $$1153 = $$0152; //@line 49369
       } else {
        $$pre$i4$i$i198 = $908; //@line 49371
        $158 = $908; //@line 49371
        label = 49; //@line 49372
       }
       break;
      }
     case 3:
      {
       $214 = HEAP8[$43 >> 0] | 0; //@line 49377
       $218 = $214 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $214 & 255; //@line 49381
       $219 = HEAP8[$46 >> 0] | 0; //@line 49382
       $223 = $219 << 24 >> 24 < 0 ? HEAP32[$47 >> 2] | 0 : $219 & 255; //@line 49386
       if (($218 | 0) == (0 - $223 | 0)) {
        $$1153 = $$0152; //@line 49390
       } else {
        if (!$218) {
         $267 = HEAP32[$0 >> 2] | 0; //@line 49394
         $269 = HEAP32[$267 + 12 >> 2] | 0; //@line 49396
         if (($269 | 0) == (HEAP32[$267 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 49404
          $276 = invoke_ii(HEAP32[(HEAP32[$267 >> 2] | 0) + 36 >> 2] | 0, $267 | 0) | 0; //@line 49405
          $277 = __THREW__; //@line 49406
          __THREW__ = 0; //@line 49406
          if ($277 & 1) {
           label = 35; //@line 49409
           break L24;
          } else {
           $$0$i$i221 = $276; //@line 49412
          }
         } else {
          $$0$i$i221 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$269 >> 2] | 0) | 0; //@line 49417
         }
         if (($$0$i$i221 | 0) != (HEAP32[((HEAP8[$46 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 2] | 0)) {
          $$1153 = $$0152; //@line 49426
          break L49;
         }
         $287 = HEAP32[$0 >> 2] | 0; //@line 49429
         $288 = $287 + 12 | 0; //@line 49430
         $289 = HEAP32[$288 >> 2] | 0; //@line 49431
         if (($289 | 0) == (HEAP32[$287 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 49439
          invoke_ii(HEAP32[(HEAP32[$287 >> 2] | 0) + 40 >> 2] | 0, $287 | 0) | 0; //@line 49440
          $296 = __THREW__; //@line 49441
          __THREW__ = 0; //@line 49441
          if ($296 & 1) {
           label = 35; //@line 49444
           break L24;
          }
         } else {
          HEAP32[$288 >> 2] = $289 + 4; //@line 49449
          __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$289 >> 2] | 0) | 0; //@line 49451
         }
         HEAP8[$6 >> 0] = 1; //@line 49453
         $300 = HEAP8[$46 >> 0] | 0; //@line 49454
         $$1153 = ($300 << 24 >> 24 < 0 ? HEAP32[$47 >> 2] | 0 : $300 & 255) >>> 0 > 1 ? $22 : $$0152; //@line 49461
         break L49;
        }
        $228 = HEAP32[$0 >> 2] | 0; //@line 49465
        $230 = HEAP32[$228 + 12 >> 2] | 0; //@line 49467
        $233 = ($230 | 0) == (HEAP32[$228 + 16 >> 2] | 0); //@line 49470
        if (!$223) {
         if ($233) {
          __THREW__ = 0; //@line 49476
          $237 = invoke_ii(HEAP32[(HEAP32[$228 >> 2] | 0) + 36 >> 2] | 0, $228 | 0) | 0; //@line 49477
          $238 = __THREW__; //@line 49478
          __THREW__ = 0; //@line 49478
          if ($238 & 1) {
           label = 35; //@line 49481
           break L24;
          } else {
           $$0$i$i216 = $237; //@line 49484
          }
         } else {
          $$0$i$i216 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$230 >> 2] | 0) | 0; //@line 49489
         }
         if (($$0$i$i216 | 0) != (HEAP32[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 2] | 0)) {
          HEAP8[$6 >> 0] = 1; //@line 49498
          $$1153 = $$0152; //@line 49499
          break L49;
         }
         $248 = HEAP32[$0 >> 2] | 0; //@line 49502
         $249 = $248 + 12 | 0; //@line 49503
         $250 = HEAP32[$249 >> 2] | 0; //@line 49504
         if (($250 | 0) == (HEAP32[$248 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 49512
          invoke_ii(HEAP32[(HEAP32[$248 >> 2] | 0) + 40 >> 2] | 0, $248 | 0) | 0; //@line 49513
          $257 = __THREW__; //@line 49514
          __THREW__ = 0; //@line 49514
          if ($257 & 1) {
           label = 35; //@line 49517
           break L24;
          }
         } else {
          HEAP32[$249 >> 2] = $250 + 4; //@line 49522
          __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$250 >> 2] | 0) | 0; //@line 49524
         }
         $261 = HEAP8[$43 >> 0] | 0; //@line 49526
         $$1153 = ($261 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $261 & 255) >>> 0 > 1 ? $21 : $$0152; //@line 49533
         break L49;
        }
        if ($233) {
         __THREW__ = 0; //@line 49540
         $309 = invoke_ii(HEAP32[(HEAP32[$228 >> 2] | 0) + 36 >> 2] | 0, $228 | 0) | 0; //@line 49541
         $310 = __THREW__; //@line 49542
         __THREW__ = 0; //@line 49542
         if ($310 & 1) {
          label = 35; //@line 49545
          break L24;
         } else {
          $$0$i$i228 = $309; //@line 49548
         }
        } else {
         $$0$i$i228 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$230 >> 2] | 0) | 0; //@line 49553
        }
        $320 = HEAP32[$0 >> 2] | 0; //@line 49561
        $321 = $320 + 12 | 0; //@line 49562
        $322 = HEAP32[$321 >> 2] | 0; //@line 49563
        $325 = ($322 | 0) == (HEAP32[$320 + 16 >> 2] | 0); //@line 49566
        if (($$0$i$i228 | 0) == (HEAP32[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 2] | 0)) {
         if ($325) {
          __THREW__ = 0; //@line 49572
          invoke_ii(HEAP32[(HEAP32[$320 >> 2] | 0) + 40 >> 2] | 0, $320 | 0) | 0; //@line 49573
          $329 = __THREW__; //@line 49574
          __THREW__ = 0; //@line 49574
          if ($329 & 1) {
           label = 35; //@line 49577
           break L24;
          }
         } else {
          HEAP32[$321 >> 2] = $322 + 4; //@line 49582
          __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$322 >> 2] | 0) | 0; //@line 49584
         }
         $333 = HEAP8[$43 >> 0] | 0; //@line 49586
         $$1153 = ($333 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $333 & 255) >>> 0 > 1 ? $21 : $$0152; //@line 49593
         break L49;
        }
        if ($325) {
         __THREW__ = 0; //@line 49600
         $342 = invoke_ii(HEAP32[(HEAP32[$320 >> 2] | 0) + 36 >> 2] | 0, $320 | 0) | 0; //@line 49601
         $343 = __THREW__; //@line 49602
         __THREW__ = 0; //@line 49602
         if ($343 & 1) {
          label = 35; //@line 49605
          break L24;
         } else {
          $$0$i$i235 = $342; //@line 49608
         }
        } else {
         $$0$i$i235 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$322 >> 2] | 0) | 0; //@line 49613
        }
        if (($$0$i$i235 | 0) != (HEAP32[((HEAP8[$46 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 2] | 0)) {
         label = 109; //@line 49622
         break L24;
        }
        $353 = HEAP32[$0 >> 2] | 0; //@line 49625
        $354 = $353 + 12 | 0; //@line 49626
        $355 = HEAP32[$354 >> 2] | 0; //@line 49627
        if (($355 | 0) == (HEAP32[$353 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 49635
         invoke_ii(HEAP32[(HEAP32[$353 >> 2] | 0) + 40 >> 2] | 0, $353 | 0) | 0; //@line 49636
         $362 = __THREW__; //@line 49637
         __THREW__ = 0; //@line 49637
         if ($362 & 1) {
          label = 35; //@line 49640
          break L24;
         }
        } else {
         HEAP32[$354 >> 2] = $355 + 4; //@line 49645
         __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$355 >> 2] | 0) | 0; //@line 49647
        }
        HEAP8[$6 >> 0] = 1; //@line 49649
        $366 = HEAP8[$46 >> 0] | 0; //@line 49650
        $$1153 = ($366 << 24 >> 24 < 0 ? HEAP32[$47 >> 2] | 0 : $366 & 255) >>> 0 > 1 ? $22 : $$0152; //@line 49657
       }
       break;
      }
     case 2:
      {
       if (!($$0161 >>> 0 < 2 | ($$0152 | 0) != 0)) {
        if (!($49 | ($$0161 | 0) == 2 & (HEAP8[$56 >> 0] | 0) != 0)) {
         $$1153 = 0; //@line 49672
         break L49;
        }
       }
       $380 = HEAP8[$51 >> 0] | 0; //@line 49676
       $382 = HEAP32[$20 >> 2] | 0; //@line 49678
       $384 = $380 << 24 >> 24 < 0 ? $382 : $20; //@line 49680
       L115 : do {
        if (!$$0161) {
         $$pre$i4$i$i260 = $908; //@line 49684
         $$sroa$0361$0 = $384; //@line 49684
         $438 = $380; //@line 49684
         $442 = $382; //@line 49684
         $465 = $908; //@line 49684
        } else {
         if ((HEAPU8[$16 + ($$0161 + -1) >> 0] | 0) < 2) {
          $$sroa$0383$0 = $384; //@line 49691
          $389 = $380; //@line 49691
          $393 = $382; //@line 49691
          while (1) {
           $390 = $389 << 24 >> 24 < 0; //@line 49693
           $397 = $$sroa$0383$0; //@line 49699
           if ((($390 ? $393 : $20) + (($390 ? HEAP32[$52 >> 2] | 0 : $389 & 255) << 2) | 0) == ($397 | 0)) {
            $410 = $389; //@line 49702
            $412 = $393; //@line 49702
            break;
           }
           __THREW__ = 0; //@line 49709
           $403 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 8192, HEAP32[$397 >> 2] | 0) | 0; //@line 49710
           $404 = __THREW__; //@line 49711
           __THREW__ = 0; //@line 49711
           if ($404 & 1) {
            label = 119; //@line 49714
            break L24;
           }
           if (!$403) {
            label = 117; //@line 49718
            break;
           }
           $$sroa$0383$0 = $397 + 4 | 0; //@line 49725
           $389 = HEAP8[$51 >> 0] | 0; //@line 49725
           $393 = HEAP32[$20 >> 2] | 0; //@line 49725
          }
          if ((label | 0) == 117) {
           label = 0; //@line 49728
           $410 = HEAP8[$51 >> 0] | 0; //@line 49731
           $412 = HEAP32[$20 >> 2] | 0; //@line 49731
          }
          $413 = $410 << 24 >> 24 < 0 ? $412 : $20; //@line 49734
          $414 = $413; //@line 49735
          $416 = $$sroa$0383$0 - $414 >> 2; //@line 49737
          $417 = HEAP8[$54 >> 0] | 0; //@line 49738
          $418 = $417 << 24 >> 24 < 0; //@line 49739
          $419 = HEAP32[$55 >> 2] | 0; //@line 49740
          $420 = $417 & 255; //@line 49741
          if ($416 >>> 0 > ($418 ? $419 : $420) >>> 0) {
           $$pre$i4$i$i260 = $908; //@line 49745
           $$sroa$0361$0 = $414; //@line 49745
           $438 = $410; //@line 49745
           $442 = $412; //@line 49745
           $465 = $908; //@line 49745
          } else {
           $423 = HEAP32[$23 >> 2] | 0; //@line 49747
           $430 = ($418 ? $423 : $23) + (($418 ? $419 : $420) << 2) | 0; //@line 49755
           $$sink = $413; //@line 49756
           $431 = ($418 ? $423 + ($419 << 2) | 0 : $23 + ($420 << 2) | 0) + (0 - $416 << 2) | 0; //@line 49756
           while (1) {
            if (($431 | 0) == ($430 | 0)) {
             $$pre$i4$i$i260 = $908; //@line 49760
             $$sroa$0361$0 = $$sroa$0383$0; //@line 49760
             $438 = $410; //@line 49760
             $442 = $412; //@line 49760
             $465 = $908; //@line 49760
             break L115;
            }
            if ((HEAP32[$431 >> 2] | 0) != (HEAP32[$$sink >> 2] | 0)) {
             $$pre$i4$i$i260 = $908; //@line 49767
             $$sroa$0361$0 = $414; //@line 49767
             $438 = $410; //@line 49767
             $442 = $412; //@line 49767
             $465 = $908; //@line 49767
             break L115;
            }
            $$sink = $$sink + 4 | 0; //@line 49772
            $431 = $431 + 4 | 0; //@line 49772
           }
          }
         } else {
          $$pre$i4$i$i260 = $908; //@line 49776
          $$sroa$0361$0 = $384; //@line 49776
          $438 = $380; //@line 49776
          $442 = $382; //@line 49776
          $465 = $908; //@line 49776
         }
        }
       } while (0);
       L130 : while (1) {
        $439 = $438 << 24 >> 24 < 0; //@line 49781
        $445 = ($439 ? $442 : $20) + (($439 ? HEAP32[$52 >> 2] | 0 : $438 & 255) << 2) | 0; //@line 49786
        $446 = $$sroa$0361$0; //@line 49787
        if (($445 | 0) == ($446 | 0)) {
         $$lcssa = $445; //@line 49790
         break;
        }
        $448 = HEAP32[$0 >> 2] | 0; //@line 49793
        do {
         if (!$448) {
          $483 = 1; //@line 49797
         } else {
          $451 = HEAP32[$448 + 12 >> 2] | 0; //@line 49800
          if (($451 | 0) == (HEAP32[$448 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 49808
           $458 = invoke_ii(HEAP32[(HEAP32[$448 >> 2] | 0) + 36 >> 2] | 0, $448 | 0) | 0; //@line 49809
           $459 = __THREW__; //@line 49810
           __THREW__ = 0; //@line 49810
           if ($459 & 1) {
            label = 149; //@line 49813
            break L24;
           } else {
            $$0$i$i$i$i252 = $458; //@line 49816
           }
          } else {
           $$0$i$i$i$i252 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$451 >> 2] | 0) | 0; //@line 49821
          }
          if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i252, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
           HEAP32[$0 >> 2] = 0; //@line 49826
           $483 = 1; //@line 49827
           break;
          } else {
           $483 = (HEAP32[$0 >> 2] | 0) == 0; //@line 49832
           break;
          }
         }
        } while (0);
        do {
         if (!$465) {
          $$pre$i4$i$i260486 = $$pre$i4$i$i260; //@line 49840
          label = 139; //@line 49841
         } else {
          $468 = HEAP32[$465 + 12 >> 2] | 0; //@line 49844
          if (($468 | 0) == (HEAP32[$465 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 49852
           $475 = invoke_ii(HEAP32[(HEAP32[$465 >> 2] | 0) + 36 >> 2] | 0, $465 | 0) | 0; //@line 49853
           $476 = __THREW__; //@line 49854
           __THREW__ = 0; //@line 49854
           if ($476 & 1) {
            label = 149; //@line 49857
            break L24;
           } else {
            $$0$i$i2$i$i258 = $475; //@line 49860
           }
          } else {
           $$0$i$i2$i$i258 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$468 >> 2] | 0) | 0; //@line 49865
          }
          if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i258, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
           HEAP32[$1 >> 2] = 0; //@line 49870
           $$pre$i4$i$i260486 = 0; //@line 49871
           label = 139; //@line 49872
           break;
          } else {
           if ($483 ^ ($$pre$i4$i$i260 | 0) == 0) {
            $$pre$i4$i$i260485 = $$pre$i4$i$i260; //@line 49878
            $910 = $$pre$i4$i$i260; //@line 49878
            break;
           } else {
            $$lcssa = $446; //@line 49881
            break L130;
           }
          }
         }
        } while (0);
        if ((label | 0) == 139) {
         label = 0; //@line 49888
         if ($483) {
          $$lcssa = $446; //@line 49890
          break;
         } else {
          $$pre$i4$i$i260485 = $$pre$i4$i$i260486; //@line 49893
          $910 = 0; //@line 49893
         }
        }
        $484 = HEAP32[$0 >> 2] | 0; //@line 49896
        $486 = HEAP32[$484 + 12 >> 2] | 0; //@line 49898
        if (($486 | 0) == (HEAP32[$484 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 49906
         $493 = invoke_ii(HEAP32[(HEAP32[$484 >> 2] | 0) + 36 >> 2] | 0, $484 | 0) | 0; //@line 49907
         $494 = __THREW__; //@line 49908
         __THREW__ = 0; //@line 49908
         if ($494 & 1) {
          label = 149; //@line 49911
          break L24;
         } else {
          $$0$i$i266 = $493; //@line 49914
         }
        } else {
         $$0$i$i266 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$486 >> 2] | 0) | 0; //@line 49919
        }
        if (($$0$i$i266 | 0) != (HEAP32[$446 >> 2] | 0)) {
         $$lcssa = $446; //@line 49924
         break;
        }
        $500 = HEAP32[$0 >> 2] | 0; //@line 49927
        $501 = $500 + 12 | 0; //@line 49928
        $502 = HEAP32[$501 >> 2] | 0; //@line 49929
        if (($502 | 0) == (HEAP32[$500 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 49937
         invoke_ii(HEAP32[(HEAP32[$500 >> 2] | 0) + 40 >> 2] | 0, $500 | 0) | 0; //@line 49938
         $509 = __THREW__; //@line 49939
         __THREW__ = 0; //@line 49939
         if ($509 & 1) {
          label = 150; //@line 49942
          break L24;
         }
        } else {
         HEAP32[$501 >> 2] = $502 + 4; //@line 49947
         __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$502 >> 2] | 0) | 0; //@line 49949
        }
        $$pre$i4$i$i260 = $$pre$i4$i$i260485; //@line 49955
        $$sroa$0361$0 = $446 + 4 | 0; //@line 49955
        $438 = HEAP8[$51 >> 0] | 0; //@line 49955
        $442 = HEAP32[$20 >> 2] | 0; //@line 49955
        $465 = $910; //@line 49955
       }
       if ($49) {
        $519 = HEAP8[$51 >> 0] | 0; //@line 49958
        $520 = $519 << 24 >> 24 < 0; //@line 49959
        if ((($520 ? HEAP32[$20 >> 2] | 0 : $20) + (($520 ? HEAP32[$52 >> 2] | 0 : $519 & 255) << 2) | 0) == ($$lcssa | 0)) {
         $$1153 = $$0152; //@line 49968
        } else {
         label = 153; //@line 49970
         break L24;
        }
       } else {
        $$1153 = $$0152; //@line 49974
       }
       break;
      }
     case 4:
      {
       $$0135 = 0; //@line 49979
       $$pre$i4$i$i280 = $908; //@line 49979
       $547 = $908; //@line 49979
       L166 : while (1) {
        $530 = HEAP32[$0 >> 2] | 0; //@line 49981
        do {
         if (!$530) {
          $565 = 1; //@line 49985
         } else {
          $533 = HEAP32[$530 + 12 >> 2] | 0; //@line 49988
          if (($533 | 0) == (HEAP32[$530 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 49996
           $540 = invoke_ii(HEAP32[(HEAP32[$530 >> 2] | 0) + 36 >> 2] | 0, $530 | 0) | 0; //@line 49997
           $541 = __THREW__; //@line 49998
           __THREW__ = 0; //@line 49998
           if ($541 & 1) {
            label = 245; //@line 50001
            break L24;
           } else {
            $$0$i$i$i$i272 = $540; //@line 50004
           }
          } else {
           $$0$i$i$i$i272 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$533 >> 2] | 0) | 0; //@line 50009
          }
          if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i272, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
           HEAP32[$0 >> 2] = 0; //@line 50014
           $565 = 1; //@line 50015
           break;
          } else {
           $565 = (HEAP32[$0 >> 2] | 0) == 0; //@line 50020
           break;
          }
         }
        } while (0);
        do {
         if (!$547) {
          $$pre$i4$i$i280470 = $$pre$i4$i$i280; //@line 50028
          label = 167; //@line 50029
         } else {
          $550 = HEAP32[$547 + 12 >> 2] | 0; //@line 50032
          if (($550 | 0) == (HEAP32[$547 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 50040
           $557 = invoke_ii(HEAP32[(HEAP32[$547 >> 2] | 0) + 36 >> 2] | 0, $547 | 0) | 0; //@line 50041
           $558 = __THREW__; //@line 50042
           __THREW__ = 0; //@line 50042
           if ($558 & 1) {
            label = 245; //@line 50045
            break L24;
           } else {
            $$0$i$i2$i$i278 = $557; //@line 50048
           }
          } else {
           $$0$i$i2$i$i278 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$550 >> 2] | 0) | 0; //@line 50053
          }
          if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i278, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
           HEAP32[$1 >> 2] = 0; //@line 50058
           $$pre$i4$i$i280470 = 0; //@line 50059
           label = 167; //@line 50060
           break;
          } else {
           if ($565 ^ ($$pre$i4$i$i280 | 0) == 0) {
            $$pre$i4$i$i280472 = $$pre$i4$i$i280; //@line 50066
            $911 = $$pre$i4$i$i280; //@line 50066
            break;
           } else {
            $$pre$i4$i$i301 = $$pre$i4$i$i280; //@line 50069
            break L166;
           }
          }
         }
        } while (0);
        if ((label | 0) == 167) {
         label = 0; //@line 50076
         if ($565) {
          $$pre$i4$i$i301 = $$pre$i4$i$i280470; //@line 50078
          break;
         } else {
          $$pre$i4$i$i280472 = $$pre$i4$i$i280470; //@line 50081
          $911 = 0; //@line 50081
         }
        }
        $566 = HEAP32[$0 >> 2] | 0; //@line 50084
        $568 = HEAP32[$566 + 12 >> 2] | 0; //@line 50086
        if (($568 | 0) == (HEAP32[$566 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 50094
         $575 = invoke_ii(HEAP32[(HEAP32[$566 >> 2] | 0) + 36 >> 2] | 0, $566 | 0) | 0; //@line 50095
         $576 = __THREW__; //@line 50096
         __THREW__ = 0; //@line 50096
         if ($576 & 1) {
          label = 245; //@line 50099
          break L24;
         } else {
          $$0$i$i286 = $575; //@line 50102
         }
        } else {
         $$0$i$i286 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$568 >> 2] | 0) | 0; //@line 50107
        }
        __THREW__ = 0; //@line 50112
        $583 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 2048, $$0$i$i286 | 0) | 0; //@line 50113
        $584 = __THREW__; //@line 50114
        __THREW__ = 0; //@line 50114
        if ($584 & 1) {
         label = 245; //@line 50117
         break L24;
        }
        if ($583) {
         $586 = HEAP32[$9 >> 2] | 0; //@line 50121
         if (($586 | 0) == (HEAP32[$11 >> 2] | 0)) {
          __THREW__ = 0; //@line 50125
          invoke_viii(38, $8 | 0, $9 | 0, $11 | 0); //@line 50126
          $589 = __THREW__; //@line 50127
          __THREW__ = 0; //@line 50127
          if ($589 & 1) {
           label = 245; //@line 50130
           break L24;
          }
          $592 = HEAP32[$9 >> 2] | 0; //@line 50134
         } else {
          $592 = $586; //@line 50136
         }
         HEAP32[$9 >> 2] = $592 + 4; //@line 50139
         HEAP32[$592 >> 2] = $$0$i$i286; //@line 50140
         $$2137$ph = $$0135 + 1 | 0; //@line 50142
        } else {
         $594 = HEAP8[$57 >> 0] | 0; //@line 50144
         if (!(($$0$i$i286 | 0) == (HEAP32[$18 >> 2] | 0) & ($$0135 | 0 ? (($594 << 24 >> 24 < 0 ? HEAP32[$58 >> 2] | 0 : $594 & 255) | 0) != 0 : 0))) {
          $$pre$i4$i$i301 = $$pre$i4$i$i280472; //@line 50156
          break;
         }
         $603 = HEAP32[$14 >> 2] | 0; //@line 50159
         if (($603 | 0) == (HEAP32[$15 >> 2] | 0)) {
          __THREW__ = 0; //@line 50163
          invoke_viii(37, $13 | 0, $14 | 0, $15 | 0); //@line 50164
          $606 = __THREW__; //@line 50165
          __THREW__ = 0; //@line 50165
          if ($606 & 1) {
           label = 245; //@line 50168
           break L24;
          }
          $609 = HEAP32[$14 >> 2] | 0; //@line 50172
         } else {
          $609 = $603; //@line 50174
         }
         HEAP32[$14 >> 2] = $609 + 4; //@line 50177
         HEAP32[$609 >> 2] = $$0135; //@line 50178
         $$2137$ph = 0; //@line 50179
        }
        $610 = HEAP32[$0 >> 2] | 0; //@line 50181
        $611 = $610 + 12 | 0; //@line 50182
        $612 = HEAP32[$611 >> 2] | 0; //@line 50183
        if (($612 | 0) == (HEAP32[$610 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 50191
         invoke_ii(HEAP32[(HEAP32[$610 >> 2] | 0) + 40 >> 2] | 0, $610 | 0) | 0; //@line 50192
         $619 = __THREW__; //@line 50193
         __THREW__ = 0; //@line 50193
         if ($619 & 1) {
          label = 245; //@line 50196
          break L24;
         } else {
          $$0135 = $$2137$ph; //@line 50199
          $$pre$i4$i$i280 = $$pre$i4$i$i280472; //@line 50199
          $547 = $911; //@line 50199
          continue;
         }
        } else {
         HEAP32[$611 >> 2] = $612 + 4; //@line 50204
         __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$612 >> 2] | 0) | 0; //@line 50206
         $$0135 = $$2137$ph; //@line 50207
         $$pre$i4$i$i280 = $$pre$i4$i$i280472; //@line 50207
         $547 = $911; //@line 50207
         continue;
        }
       }
       $624 = HEAP32[$14 >> 2] | 0; //@line 50212
       if ($$0135 | 0 ? (HEAP32[$13 >> 2] | 0) != ($624 | 0) : 0) {
        if (($624 | 0) == (HEAP32[$15 >> 2] | 0)) {
         __THREW__ = 0; //@line 50220
         invoke_viii(37, $13 | 0, $14 | 0, $15 | 0); //@line 50221
         $629 = __THREW__; //@line 50222
         __THREW__ = 0; //@line 50222
         if ($629 & 1) {
          label = 245; //@line 50225
          break L24;
         }
         $632 = HEAP32[$14 >> 2] | 0; //@line 50229
        } else {
         $632 = $624; //@line 50231
        }
        HEAP32[$14 >> 2] = $632 + 4; //@line 50234
        HEAP32[$632 >> 2] = $$0135; //@line 50235
       }
       L219 : do {
        if ((HEAP32[$24 >> 2] | 0) > 0) {
         $635 = HEAP32[$0 >> 2] | 0; //@line 50241
         do {
          if (!$635) {
           $912 = 1; //@line 50245
          } else {
           $638 = HEAP32[$635 + 12 >> 2] | 0; //@line 50248
           if (($638 | 0) == (HEAP32[$635 + 16 >> 2] | 0)) {
            __THREW__ = 0; //@line 50256
            $645 = invoke_ii(HEAP32[(HEAP32[$635 >> 2] | 0) + 36 >> 2] | 0, $635 | 0) | 0; //@line 50257
            $646 = __THREW__; //@line 50258
            __THREW__ = 0; //@line 50258
            if ($646 & 1) {
             label = 245; //@line 50261
             break L24;
            } else {
             $$0$i$i$i$i293 = $645; //@line 50264
            }
           } else {
            $$0$i$i$i$i293 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$638 >> 2] | 0) | 0; //@line 50269
           }
           if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i293, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
            HEAP32[$0 >> 2] = 0; //@line 50274
            $912 = 1; //@line 50275
            break;
           } else {
            $912 = (HEAP32[$0 >> 2] | 0) == 0; //@line 50280
            break;
           }
          }
         } while (0);
         do {
          if (!$$pre$i4$i$i301) {
           label = 205; //@line 50288
          } else {
           $654 = HEAP32[$$pre$i4$i$i301 + 12 >> 2] | 0; //@line 50291
           if (($654 | 0) == (HEAP32[$$pre$i4$i$i301 + 16 >> 2] | 0)) {
            __THREW__ = 0; //@line 50299
            $661 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i301 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i301 | 0) | 0; //@line 50300
            $662 = __THREW__; //@line 50301
            __THREW__ = 0; //@line 50301
            if ($662 & 1) {
             label = 245; //@line 50304
             break L24;
            } else {
             $$0$i$i2$i$i299 = $661; //@line 50307
            }
           } else {
            $$0$i$i2$i$i299 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$654 >> 2] | 0) | 0; //@line 50312
           }
           if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i299, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
            HEAP32[$1 >> 2] = 0; //@line 50317
            label = 205; //@line 50318
            break;
           } else {
            if ($912) {
             $913 = $$pre$i4$i$i301; //@line 50322
             break;
            } else {
             label = 244; //@line 50325
             break L24;
            }
           }
          }
         } while (0);
         if ((label | 0) == 205) {
          label = 0; //@line 50332
          if ($912) {
           label = 244; //@line 50334
           break L24;
          } else {
           $913 = 0; //@line 50337
          }
         }
         $668 = HEAP32[$0 >> 2] | 0; //@line 50340
         $670 = HEAP32[$668 + 12 >> 2] | 0; //@line 50342
         if (($670 | 0) == (HEAP32[$668 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 50350
          $677 = invoke_ii(HEAP32[(HEAP32[$668 >> 2] | 0) + 36 >> 2] | 0, $668 | 0) | 0; //@line 50351
          $678 = __THREW__; //@line 50352
          __THREW__ = 0; //@line 50352
          if ($678 & 1) {
           label = 245; //@line 50355
           break L24;
          } else {
           $$0$i$i306 = $677; //@line 50358
          }
         } else {
          $$0$i$i306 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$670 >> 2] | 0) | 0; //@line 50363
         }
         if (($$0$i$i306 | 0) != (HEAP32[$17 >> 2] | 0)) {
          label = 244; //@line 50368
          break L24;
         }
         $684 = HEAP32[$0 >> 2] | 0; //@line 50371
         $685 = $684 + 12 | 0; //@line 50372
         $686 = HEAP32[$685 >> 2] | 0; //@line 50373
         if (($686 | 0) == (HEAP32[$684 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 50381
          invoke_ii(HEAP32[(HEAP32[$684 >> 2] | 0) + 40 >> 2] | 0, $684 | 0) | 0; //@line 50382
          $693 = __THREW__; //@line 50383
          __THREW__ = 0; //@line 50383
          if ($693 & 1) {
           label = 245; //@line 50386
           break L24;
          } else {
           $$pre$i4$i$i319 = $913; //@line 50389
           $716 = $913; //@line 50389
          }
         } else {
          HEAP32[$685 >> 2] = $686 + 4; //@line 50393
          __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$686 >> 2] | 0) | 0; //@line 50395
          $$pre$i4$i$i319 = $913; //@line 50396
          $716 = $913; //@line 50396
         }
         while (1) {
          if ((HEAP32[$24 >> 2] | 0) <= 0) {
           break L219;
          }
          $699 = HEAP32[$0 >> 2] | 0; //@line 50404
          do {
           if (!$699) {
            $734 = 1; //@line 50408
           } else {
            $702 = HEAP32[$699 + 12 >> 2] | 0; //@line 50411
            if (($702 | 0) == (HEAP32[$699 + 16 >> 2] | 0)) {
             __THREW__ = 0; //@line 50419
             $709 = invoke_ii(HEAP32[(HEAP32[$699 >> 2] | 0) + 36 >> 2] | 0, $699 | 0) | 0; //@line 50420
             $710 = __THREW__; //@line 50421
             __THREW__ = 0; //@line 50421
             if ($710 & 1) {
              label = 245; //@line 50424
              break L24;
             } else {
              $$0$i$i$i$i311 = $709; //@line 50427
             }
            } else {
             $$0$i$i$i$i311 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$702 >> 2] | 0) | 0; //@line 50432
            }
            if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i311, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
             HEAP32[$0 >> 2] = 0; //@line 50437
             $734 = 1; //@line 50438
             break;
            } else {
             $734 = (HEAP32[$0 >> 2] | 0) == 0; //@line 50443
             break;
            }
           }
          } while (0);
          do {
           if (!$716) {
            $$pre$i4$i$i319477$ph = $$pre$i4$i$i319; //@line 50451
            label = 228; //@line 50452
           } else {
            $719 = HEAP32[$716 + 12 >> 2] | 0; //@line 50455
            if (($719 | 0) == (HEAP32[$716 + 16 >> 2] | 0)) {
             __THREW__ = 0; //@line 50463
             $726 = invoke_ii(HEAP32[(HEAP32[$716 >> 2] | 0) + 36 >> 2] | 0, $716 | 0) | 0; //@line 50464
             $727 = __THREW__; //@line 50465
             __THREW__ = 0; //@line 50465
             if ($727 & 1) {
              label = 245; //@line 50468
              break L24;
             } else {
              $$0$i$i2$i$i317 = $726; //@line 50471
             }
            } else {
             $$0$i$i2$i$i317 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$719 >> 2] | 0) | 0; //@line 50476
            }
            if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i317, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
             HEAP32[$1 >> 2] = 0; //@line 50481
             $$pre$i4$i$i319477$ph = 0; //@line 50482
             label = 228; //@line 50483
             break;
            } else {
             if ($734 ^ ($$pre$i4$i$i319 | 0) == 0) {
              $$pre$i4$i$i319477492 = $$pre$i4$i$i319; //@line 50489
              $914 = $$pre$i4$i$i319; //@line 50489
              break;
             } else {
              label = 244; //@line 50492
              break L24;
             }
            }
           }
          } while (0);
          if ((label | 0) == 228) {
           label = 0; //@line 50499
           if ($734) {
            label = 244; //@line 50501
            break L24;
           } else {
            $$pre$i4$i$i319477492 = $$pre$i4$i$i319477$ph; //@line 50504
            $914 = 0; //@line 50504
           }
          }
          $735 = HEAP32[$0 >> 2] | 0; //@line 50507
          $737 = HEAP32[$735 + 12 >> 2] | 0; //@line 50509
          if (($737 | 0) == (HEAP32[$735 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 50517
           $744 = invoke_ii(HEAP32[(HEAP32[$735 >> 2] | 0) + 36 >> 2] | 0, $735 | 0) | 0; //@line 50518
           $745 = __THREW__; //@line 50519
           __THREW__ = 0; //@line 50519
           if ($745 & 1) {
            label = 245; //@line 50522
            break L24;
           } else {
            $$0$i$i325 = $744; //@line 50525
           }
          } else {
           $$0$i$i325 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$737 >> 2] | 0) | 0; //@line 50530
          }
          __THREW__ = 0; //@line 50535
          $752 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 2048, $$0$i$i325 | 0) | 0; //@line 50536
          $753 = __THREW__; //@line 50537
          __THREW__ = 0; //@line 50537
          if ($753 & 1) {
           label = 245; //@line 50540
           break L24;
          }
          if (!$752) {
           label = 244; //@line 50544
           break L24;
          }
          if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) {
           __THREW__ = 0; //@line 50551
           invoke_viii(38, $8 | 0, $9 | 0, $11 | 0); //@line 50552
           $758 = __THREW__; //@line 50553
           __THREW__ = 0; //@line 50553
           if ($758 & 1) {
            label = 245; //@line 50556
            break L24;
           }
          }
          $760 = HEAP32[$0 >> 2] | 0; //@line 50560
          $762 = HEAP32[$760 + 12 >> 2] | 0; //@line 50562
          if (($762 | 0) == (HEAP32[$760 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 50570
           $769 = invoke_ii(HEAP32[(HEAP32[$760 >> 2] | 0) + 36 >> 2] | 0, $760 | 0) | 0; //@line 50571
           $770 = __THREW__; //@line 50572
           __THREW__ = 0; //@line 50572
           if ($770 & 1) {
            label = 245; //@line 50575
            break L24;
           } else {
            $$0$i$i330 = $769; //@line 50578
           }
          } else {
           $$0$i$i330 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$762 >> 2] | 0) | 0; //@line 50583
          }
          $774 = HEAP32[$9 >> 2] | 0; //@line 50585
          HEAP32[$9 >> 2] = $774 + 4; //@line 50587
          HEAP32[$774 >> 2] = $$0$i$i330; //@line 50588
          HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + -1; //@line 50591
          $778 = HEAP32[$0 >> 2] | 0; //@line 50592
          $779 = $778 + 12 | 0; //@line 50593
          $780 = HEAP32[$779 >> 2] | 0; //@line 50594
          if (($780 | 0) == (HEAP32[$778 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 50602
           invoke_ii(HEAP32[(HEAP32[$778 >> 2] | 0) + 40 >> 2] | 0, $778 | 0) | 0; //@line 50603
           $787 = __THREW__; //@line 50604
           __THREW__ = 0; //@line 50604
           if ($787 & 1) {
            label = 245; //@line 50607
            break L24;
           } else {
            $$pre$i4$i$i319 = $$pre$i4$i$i319477492; //@line 50610
            $716 = $914; //@line 50610
            continue;
           }
          } else {
           HEAP32[$779 >> 2] = $780 + 4; //@line 50615
           __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$780 >> 2] | 0) | 0; //@line 50617
           $$pre$i4$i$i319 = $$pre$i4$i$i319477492; //@line 50618
           $716 = $914; //@line 50618
           continue;
          }
         }
        }
       } while (0);
       if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
        label = 244; //@line 50628
        break L24;
       } else {
        $$1153 = $$0152; //@line 50631
       }
       break;
      }
     default:
      {
       $$1153 = $$0152; //@line 50636
      }
     }
    } while (0);
    L293 : do {
     if ((label | 0) == 49) {
      while (1) {
       label = 0; //@line 50643
       $141 = HEAP32[$0 >> 2] | 0; //@line 50644
       do {
        if (!$141) {
         $176 = 1; //@line 50648
        } else {
         $144 = HEAP32[$141 + 12 >> 2] | 0; //@line 50651
         if (($144 | 0) == (HEAP32[$141 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 50659
          $151 = invoke_ii(HEAP32[(HEAP32[$141 >> 2] | 0) + 36 >> 2] | 0, $141 | 0) | 0; //@line 50660
          $152 = __THREW__; //@line 50661
          __THREW__ = 0; //@line 50661
          if ($152 & 1) {
           label = 35; //@line 50664
           break L24;
          } else {
           $$0$i$i$i$i190 = $151; //@line 50667
          }
         } else {
          $$0$i$i$i$i190 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$144 >> 2] | 0) | 0; //@line 50672
         }
         if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i190, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
          HEAP32[$0 >> 2] = 0; //@line 50677
          $176 = 1; //@line 50678
          break;
         } else {
          $176 = (HEAP32[$0 >> 2] | 0) == 0; //@line 50683
          break;
         }
        }
       } while (0);
       do {
        if (!$158) {
         $$pre$i4$i$i198488 = $$pre$i4$i$i198; //@line 50691
         label = 62; //@line 50692
        } else {
         $161 = HEAP32[$158 + 12 >> 2] | 0; //@line 50695
         if (($161 | 0) == (HEAP32[$158 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 50703
          $168 = invoke_ii(HEAP32[(HEAP32[$158 >> 2] | 0) + 36 >> 2] | 0, $158 | 0) | 0; //@line 50704
          $169 = __THREW__; //@line 50705
          __THREW__ = 0; //@line 50705
          if ($169 & 1) {
           label = 35; //@line 50708
           break L24;
          } else {
           $$0$i$i2$i$i196 = $168; //@line 50711
          }
         } else {
          $$0$i$i2$i$i196 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$161 >> 2] | 0) | 0; //@line 50716
         }
         if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i196, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
          HEAP32[$1 >> 2] = 0; //@line 50721
          $$pre$i4$i$i198488 = 0; //@line 50722
          label = 62; //@line 50723
          break;
         } else {
          if ($176 ^ ($$pre$i4$i$i198 | 0) == 0) {
           $$pre$i4$i$i198490 = $$pre$i4$i$i198; //@line 50729
           $909 = $$pre$i4$i$i198; //@line 50729
           break;
          } else {
           $$1153 = $$0152; //@line 50732
           break L293;
          }
         }
        }
       } while (0);
       if ((label | 0) == 62) {
        label = 0; //@line 50739
        if ($176) {
         $$1153 = $$0152; //@line 50741
         break L293;
        } else {
         $$pre$i4$i$i198490 = $$pre$i4$i$i198488; //@line 50744
         $909 = 0; //@line 50744
        }
       }
       $177 = HEAP32[$0 >> 2] | 0; //@line 50747
       $179 = HEAP32[$177 + 12 >> 2] | 0; //@line 50749
       if (($179 | 0) == (HEAP32[$177 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 50757
        $186 = invoke_ii(HEAP32[(HEAP32[$177 >> 2] | 0) + 36 >> 2] | 0, $177 | 0) | 0; //@line 50758
        $187 = __THREW__; //@line 50759
        __THREW__ = 0; //@line 50759
        if ($187 & 1) {
         label = 35; //@line 50762
         break L24;
        } else {
         $$0$i$i204 = $186; //@line 50765
        }
       } else {
        $$0$i$i204 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$179 >> 2] | 0) | 0; //@line 50770
       }
       __THREW__ = 0; //@line 50775
       $194 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 8192, $$0$i$i204 | 0) | 0; //@line 50776
       $195 = __THREW__; //@line 50777
       __THREW__ = 0; //@line 50777
       if ($195 & 1) {
        label = 35; //@line 50780
        break L24;
       }
       if (!$194) {
        $$1153 = $$0152; //@line 50784
        break L293;
       }
       $197 = HEAP32[$0 >> 2] | 0; //@line 50787
       $198 = $197 + 12 | 0; //@line 50788
       $199 = HEAP32[$198 >> 2] | 0; //@line 50789
       if (($199 | 0) == (HEAP32[$197 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 50797
        $206 = invoke_ii(HEAP32[(HEAP32[$197 >> 2] | 0) + 40 >> 2] | 0, $197 | 0) | 0; //@line 50798
        $207 = __THREW__; //@line 50799
        __THREW__ = 0; //@line 50799
        if ($207 & 1) {
         label = 35; //@line 50802
         break L24;
        } else {
         $$0$i$i209 = $206; //@line 50805
        }
       } else {
        HEAP32[$198 >> 2] = $199 + 4; //@line 50809
        $$0$i$i209 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$199 >> 2] | 0) | 0; //@line 50812
       }
       __THREW__ = 0; //@line 50814
       invoke_vii(148, $23 | 0, $$0$i$i209 | 0); //@line 50815
       $212 = __THREW__; //@line 50816
       __THREW__ = 0; //@line 50816
       if ($212 & 1) {
        label = 35; //@line 50819
        break L24;
       } else {
        $$pre$i4$i$i198 = $$pre$i4$i$i198490; //@line 50822
        $158 = $909; //@line 50822
        label = 49; //@line 50823
       }
      }
     }
    } while (0);
    $$0152 = $$1153; //@line 50829
    $$0161 = $$0161 + 1 | 0; //@line 50829
   }
   L329 : switch (label | 0) {
   case 35:
    {
     $$5145 = ___cxa_find_matching_catch_2() | 0; //@line 50835
     $$5151 = tempRet0; //@line 50835
     break L21;
     break;
    }
   case 47:
    {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 50842
     $$10 = 0; //@line 50843
     break;
    }
   case 109:
    {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 50849
     $$10 = 0; //@line 50850
     break;
    }
   case 119:
    {
     $$5145 = ___cxa_find_matching_catch_2() | 0; //@line 50856
     $$5151 = tempRet0; //@line 50856
     break L21;
     break;
    }
   case 149:
    {
     $$5145 = ___cxa_find_matching_catch_2() | 0; //@line 50863
     $$5151 = tempRet0; //@line 50863
     break L21;
     break;
    }
   case 150:
    {
     $$5145 = ___cxa_find_matching_catch_2() | 0; //@line 50870
     $$5151 = tempRet0; //@line 50870
     break L21;
     break;
    }
   case 153:
    {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 50877
     $$10 = 0; //@line 50878
     break;
    }
   case 244:
    {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 50884
     $$10 = 0; //@line 50885
     break;
    }
   case 245:
    {
     $$5145 = ___cxa_find_matching_catch_2() | 0; //@line 50891
     $$5151 = tempRet0; //@line 50891
     break L21;
     break;
    }
   case 247:
    {
     L331 : do {
      if ($$0152 | 0) {
       $801 = $$0152 + 8 + 3 | 0; //@line 50900
       $802 = $$0152 + 4 | 0; //@line 50901
       $$0 = 1; //@line 50902
       L333 : while (1) {
        $803 = HEAP8[$801 >> 0] | 0; //@line 50904
        if ($803 << 24 >> 24 < 0) {
         $808 = HEAP32[$802 >> 2] | 0; //@line 50908
        } else {
         $808 = $803 & 255; //@line 50911
        }
        if ($$0 >>> 0 >= $808 >>> 0) {
         break L331;
        }
        $809 = HEAP32[$0 >> 2] | 0; //@line 50917
        do {
         if (!$809) {
          $915 = 1; //@line 50921
         } else {
          $812 = HEAP32[$809 + 12 >> 2] | 0; //@line 50924
          if (($812 | 0) == (HEAP32[$809 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 50932
           $819 = invoke_ii(HEAP32[(HEAP32[$809 >> 2] | 0) + 36 >> 2] | 0, $809 | 0) | 0; //@line 50933
           $820 = __THREW__; //@line 50934
           __THREW__ = 0; //@line 50934
           if ($820 & 1) {
            label = 275; //@line 50937
            break L333;
           } else {
            $$0$i$i$i$i336 = $819; //@line 50940
           }
          } else {
           $$0$i$i$i$i336 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$812 >> 2] | 0) | 0; //@line 50945
          }
          if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i336, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
           HEAP32[$0 >> 2] = 0; //@line 50950
           $915 = 1; //@line 50951
           break;
          } else {
           $915 = (HEAP32[$0 >> 2] | 0) == 0; //@line 50956
           break;
          }
         }
        } while (0);
        $826 = HEAP32[$1 >> 2] | 0; //@line 50961
        do {
         if (!$826) {
          label = 266; //@line 50965
         } else {
          $829 = HEAP32[$826 + 12 >> 2] | 0; //@line 50968
          if (($829 | 0) == (HEAP32[$826 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 50976
           $836 = invoke_ii(HEAP32[(HEAP32[$826 >> 2] | 0) + 36 >> 2] | 0, $826 | 0) | 0; //@line 50977
           $837 = __THREW__; //@line 50978
           __THREW__ = 0; //@line 50978
           if ($837 & 1) {
            label = 275; //@line 50981
            break L333;
           } else {
            $$0$i$i2$i$i342 = $836; //@line 50984
           }
          } else {
           $$0$i$i2$i$i342 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$829 >> 2] | 0) | 0; //@line 50989
          }
          if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i342, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
           HEAP32[$1 >> 2] = 0; //@line 50994
           label = 266; //@line 50995
           break;
          } else {
           if ($915) {
            break;
           } else {
            label = 274; //@line 51001
            break L333;
           }
          }
         }
        } while (0);
        if ((label | 0) == 266) {
         label = 0; //@line 51008
         if ($915) {
          label = 274; //@line 51010
          break;
         }
        }
        $843 = HEAP32[$0 >> 2] | 0; //@line 51014
        $845 = HEAP32[$843 + 12 >> 2] | 0; //@line 51016
        if (($845 | 0) == (HEAP32[$843 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 51024
         $852 = invoke_ii(HEAP32[(HEAP32[$843 >> 2] | 0) + 36 >> 2] | 0, $843 | 0) | 0; //@line 51025
         $853 = __THREW__; //@line 51026
         __THREW__ = 0; //@line 51026
         if ($853 & 1) {
          label = 275; //@line 51029
          break;
         } else {
          $$0$i$i350 = $852; //@line 51032
         }
        } else {
         $$0$i$i350 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$845 >> 2] | 0) | 0; //@line 51037
        }
        if ((HEAP8[$801 >> 0] | 0) < 0) {
         $861 = HEAP32[$$0152 >> 2] | 0; //@line 51043
        } else {
         $861 = $$0152; //@line 51045
        }
        if (($$0$i$i350 | 0) != (HEAP32[$861 + ($$0 << 2) >> 2] | 0)) {
         label = 274; //@line 51051
         break;
        }
        $868 = $$0 + 1 | 0; //@line 51054
        $869 = HEAP32[$0 >> 2] | 0; //@line 51055
        $870 = $869 + 12 | 0; //@line 51056
        $871 = HEAP32[$870 >> 2] | 0; //@line 51057
        if (($871 | 0) == (HEAP32[$869 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 51065
         invoke_ii(HEAP32[(HEAP32[$869 >> 2] | 0) + 40 >> 2] | 0, $869 | 0) | 0; //@line 51066
         $878 = __THREW__; //@line 51067
         __THREW__ = 0; //@line 51067
         if ($878 & 1) {
          label = 275; //@line 51070
          break;
         } else {
          $$0 = $868; //@line 51073
          continue;
         }
        } else {
         HEAP32[$870 >> 2] = $871 + 4; //@line 51078
         __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$871 >> 2] | 0) | 0; //@line 51080
         $$0 = $868; //@line 51081
         continue;
        }
       }
       if ((label | 0) == 274) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 51088
        $$10 = 0; //@line 51089
        break L329;
       } else if ((label | 0) == 275) {
        $866 = ___cxa_find_matching_catch_2() | 0; //@line 51093
        $$5145 = $866; //@line 51095
        $$5151 = tempRet0; //@line 51095
        break L21;
       }
      }
     } while (0);
     $882 = HEAP32[$13 >> 2] | 0; //@line 51100
     $883 = HEAP32[$14 >> 2] | 0; //@line 51101
     if (($882 | 0) == ($883 | 0)) {
      $$10 = 1; //@line 51104
     } else {
      HEAP32[$25 >> 2] = 0; //@line 51106
      __THREW__ = 0; //@line 51107
      invoke_viiii(21, $19 | 0, $882 | 0, $883 | 0, $25 | 0); //@line 51108
      $885 = __THREW__; //@line 51109
      __THREW__ = 0; //@line 51109
      if ($885 & 1) {
       $891 = ___cxa_find_matching_catch_2() | 0; //@line 51112
       $$5145 = $891; //@line 51114
       $$5151 = tempRet0; //@line 51114
       break L21;
      }
      if (!(HEAP32[$25 >> 2] | 0)) {
       $$10 = 1; //@line 51120
       break;
      } else {
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 51125
       $$10 = 0; //@line 51126
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23); //@line 51133
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22); //@line 51134
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21); //@line 51135
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20); //@line 51136
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19); //@line 51137
   $893 = HEAP32[$13 >> 2] | 0; //@line 51138
   HEAP32[$13 >> 2] = 0; //@line 51139
   if ($893 | 0) {
    __THREW__ = 0; //@line 51143
    invoke_vi(HEAP32[$27 >> 2] | 0, $893 | 0); //@line 51144
    $896 = __THREW__; //@line 51145
    __THREW__ = 0; //@line 51145
    if ($896 & 1) {
     $898 = ___cxa_find_matching_catch_3(0) | 0; //@line 51148
     ___clang_call_terminate($898); //@line 51150
    }
   }
   STACKTOP = sp; //@line 51154
   return $$10 | 0; //@line 51154
  }
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23); //@line 51157
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22); //@line 51158
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21); //@line 51159
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20); //@line 51160
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19); //@line 51161
 $900 = HEAP32[$13 >> 2] | 0; //@line 51162
 HEAP32[$13 >> 2] = 0; //@line 51163
 if ($900 | 0) {
  __THREW__ = 0; //@line 51167
  invoke_vi(HEAP32[$27 >> 2] | 0, $900 | 0); //@line 51168
  $903 = __THREW__; //@line 51169
  __THREW__ = 0; //@line 51169
  if ($903 & 1) {
   $905 = ___cxa_find_matching_catch_3(0) | 0; //@line 51172
   ___clang_call_terminate($905); //@line 51174
  }
 }
 ___resumeException($$5145 | 0); //@line 51178
 return 0; //@line 51180
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i187 = 0, $$0$i$i$i$i252 = 0, $$0$i$i$i$i272 = 0, $$0$i$i$i$i293 = 0, $$0$i$i$i$i311 = 0, $$0$i$i$i$i335 = 0, $$0$i$i169 = 0, $$0$i$i172 = 0, $$0$i$i175 = 0, $$0$i$i178 = 0, $$0$i$i183 = 0, $$0$i$i185 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i193 = 0, $$0$i$i2$i$i258 = 0, $$0$i$i2$i$i278 = 0, $$0$i$i2$i$i299 = 0, $$0$i$i2$i$i317 = 0, $$0$i$i2$i$i341 = 0, $$0$i$i201 = 0, $$0$i$i205 = 0, $$0$i$i212 = 0, $$0$i$i217 = 0, $$0$i$i224 = 0, $$0$i$i231 = 0, $$0$i$i249 = 0, $$0$i$i266 = 0, $$0$i$i286 = 0, $$0$i$i306 = 0, $$0$i$i325 = 0, $$0$i$i329 = 0, $$0132 = 0, $$0149 = 0, $$0158 = 0, $$10 = 0, $$1150 = 0, $$2134$ph = 0, $$5142 = 0, $$5148 = 0, $$lcssa = 0, $$pre$i4$i$i195 = 0, $$pre$i4$i$i195475 = 0, $$pre$i4$i$i195477 = 0, $$pre$i4$i$i260 = 0, $$pre$i4$i$i260472 = 0, $$pre$i4$i$i260473 = 0, $$pre$i4$i$i280 = 0, $$pre$i4$i$i280461 = 0, $$pre$i4$i$i280463 = 0, $$pre$i4$i$i301 = 0, $$pre$i4$i$i319 = 0, $$pre$i4$i$i319468$ph = 0, $$pre$i4$i$i319468479 = 0, $$sink = 0, $$sroa$0355$0 = 0, $$sroa$0376$0 = 0, $100 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $129 = 0, $13 = 0, $130 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $15 = 0, $151 = 0, $152 = 0, $158 = 0, $16 = 0, $161 = 0, $168 = 0, $169 = 0, $17 = 0, $176 = 0, $177 = 0, $179 = 0, $18 = 0, $186 = 0, $187 = 0, $19 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $208 = 0, $209 = 0, $21 = 0, $215 = 0, $217 = 0, $22 = 0, $221 = 0, $222 = 0, $226 = 0, $23 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $252 = 0, $253 = 0, $254 = 0, $261 = 0, $265 = 0, $27 = 0, $271 = 0, $273 = 0, $280 = 0, $281 = 0, $292 = 0, $293 = 0, $294 = 0, $301 = 0, $305 = 0, $314 = 0, $315 = 0, $326 = 0, $327 = 0, $328 = 0, $331 = 0, $335 = 0, $339 = 0, $348 = 0, $349 = 0, $360 = 0, $361 = 0, $362 = 0, $369 = 0, $373 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $399 = 0, $400 = 0, $402 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $419 = 0, $42 = 0, $426 = 0, $427 = 0, $43 = 0, $434 = 0, $435 = 0, $438 = 0, $44 = 0, $441 = 0, $442 = 0, $444 = 0, $447 = 0, $45 = 0, $454 = 0, $455 = 0, $46 = 0, $461 = 0, $464 = 0, $471 = 0, $472 = 0, $479 = 0, $48 = 0, $480 = 0, $482 = 0, $489 = 0, $49 = 0, $490 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $506 = 0, $51 = 0, $512 = 0, $514 = 0, $516 = 0, $517 = 0, $52 = 0, $527 = 0, $53 = 0, $530 = 0, $537 = 0, $538 = 0, $54 = 0, $544 = 0, $547 = 0, $55 = 0, $554 = 0, $555 = 0, $562 = 0, $563 = 0, $565 = 0, $57 = 0, $572 = 0, $573 = 0, $577 = 0, $585 = 0, $588 = 0, $591 = 0, $593 = 0, $60 = 0, $602 = 0, $605 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $618 = 0, $623 = 0, $628 = 0, $631 = 0, $634 = 0, $637 = 0, $644 = 0, $645 = 0, $653 = 0, $660 = 0, $661 = 0, $667 = 0, $669 = 0, $67 = 0, $676 = 0, $677 = 0, $68 = 0, $684 = 0, $685 = 0, $686 = 0, $693 = 0, $699 = 0, $702 = 0, $709 = 0, $710 = 0, $716 = 0, $719 = 0, $726 = 0, $727 = 0, $734 = 0, $735 = 0, $737 = 0, $74 = 0, $744 = 0, $745 = 0, $760 = 0, $762 = 0, $764 = 0, $77 = 0, $771 = 0, $772 = 0, $777 = 0, $781 = 0, $782 = 0, $783 = 0, $790 = 0, $799 = 0, $803 = 0, $804 = 0, $805 = 0, $810 = 0, $811 = 0, $814 = 0, $821 = 0, $822 = 0, $828 = 0, $831 = 0, $838 = 0, $839 = 0, $84 = 0, $845 = 0, $847 = 0, $85 = 0, $854 = 0, $855 = 0, $864 = 0, $869 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $881 = 0, $885 = 0, $886 = 0, $888 = 0, $894 = 0, $896 = 0, $899 = 0, $901 = 0, $903 = 0, $906 = 0, $908 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $93 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 45527
 STACKTOP = STACKTOP + 512 | 0; //@line 45528
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 45528
 $11 = sp + 88 | 0; //@line 45529
 $12 = sp + 96 | 0; //@line 45530
 $13 = sp + 80 | 0; //@line 45531
 $14 = sp + 72 | 0; //@line 45532
 $15 = sp + 68 | 0; //@line 45533
 $16 = sp + 500 | 0; //@line 45534
 $17 = sp + 497 | 0; //@line 45535
 $18 = sp + 496 | 0; //@line 45536
 $19 = sp + 56 | 0; //@line 45537
 $20 = sp + 44 | 0; //@line 45538
 $21 = sp + 32 | 0; //@line 45539
 $22 = sp + 20 | 0; //@line 45540
 $23 = sp + 8 | 0; //@line 45541
 $24 = sp + 4 | 0; //@line 45542
 $25 = sp; //@line 45543
 HEAP32[$11 >> 2] = $10; //@line 45544
 HEAP32[$13 >> 2] = $12; //@line 45546
 $27 = $13 + 4 | 0; //@line 45547
 HEAP32[$27 >> 2] = 267; //@line 45548
 HEAP32[$14 >> 2] = $12; //@line 45549
 HEAP32[$15 >> 2] = $12 + 400; //@line 45551
 HEAP32[$19 >> 2] = 0; //@line 45552
 HEAP32[$19 + 4 >> 2] = 0; //@line 45552
 HEAP32[$19 + 8 >> 2] = 0; //@line 45552
 $$0$i$i = 0; //@line 45553
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$19 + ($$0$i$i << 2) >> 2] = 0; //@line 45560
  $$0$i$i = $$0$i$i + 1 | 0; //@line 45562
 }
 HEAP32[$20 >> 2] = 0; //@line 45564
 HEAP32[$20 + 4 >> 2] = 0; //@line 45564
 HEAP32[$20 + 8 >> 2] = 0; //@line 45564
 $$0$i$i169 = 0; //@line 45565
 while (1) {
  if (($$0$i$i169 | 0) == 3) {
   break;
  }
  HEAP32[$20 + ($$0$i$i169 << 2) >> 2] = 0; //@line 45572
  $$0$i$i169 = $$0$i$i169 + 1 | 0; //@line 45574
 }
 HEAP32[$21 >> 2] = 0; //@line 45576
 HEAP32[$21 + 4 >> 2] = 0; //@line 45576
 HEAP32[$21 + 8 >> 2] = 0; //@line 45576
 $$0$i$i172 = 0; //@line 45577
 while (1) {
  if (($$0$i$i172 | 0) == 3) {
   break;
  }
  HEAP32[$21 + ($$0$i$i172 << 2) >> 2] = 0; //@line 45584
  $$0$i$i172 = $$0$i$i172 + 1 | 0; //@line 45586
 }
 HEAP32[$22 >> 2] = 0; //@line 45588
 HEAP32[$22 + 4 >> 2] = 0; //@line 45588
 HEAP32[$22 + 8 >> 2] = 0; //@line 45588
 $$0$i$i175 = 0; //@line 45589
 while (1) {
  if (($$0$i$i175 | 0) == 3) {
   break;
  }
  HEAP32[$22 + ($$0$i$i175 << 2) >> 2] = 0; //@line 45596
  $$0$i$i175 = $$0$i$i175 + 1 | 0; //@line 45598
 }
 HEAP32[$23 >> 2] = 0; //@line 45600
 HEAP32[$23 + 4 >> 2] = 0; //@line 45600
 HEAP32[$23 + 8 >> 2] = 0; //@line 45600
 $$0$i$i178 = 0; //@line 45601
 while (1) {
  if (($$0$i$i178 | 0) == 3) {
   break;
  }
  HEAP32[$23 + ($$0$i$i178 << 2) >> 2] = 0; //@line 45608
  $$0$i$i178 = $$0$i$i178 + 1 | 0; //@line 45610
 }
 __THREW__ = 0; //@line 45612
 invoke_viiiiiiiiii(1, $2 | 0, $3 | 0, $16 | 0, $17 | 0, $18 | 0, $19 | 0, $20 | 0, $21 | 0, $22 | 0, $24 | 0); //@line 45613
 $39 = __THREW__; //@line 45614
 __THREW__ = 0; //@line 45614
 L21 : do {
  if ($39 & 1) {
   $91 = ___cxa_find_matching_catch_2() | 0; //@line 45618
   $$5142 = $91; //@line 45620
   $$5148 = tempRet0; //@line 45620
  } else {
   HEAP32[$9 >> 2] = HEAP32[$8 >> 2]; //@line 45623
   $42 = $7 + 8 | 0; //@line 45624
   $43 = $21 + 11 | 0; //@line 45625
   $44 = $21 + 4 | 0; //@line 45626
   $45 = $22 + 11 | 0; //@line 45627
   $46 = $22 + 4 | 0; //@line 45628
   $48 = ($4 & 512 | 0) != 0; //@line 45630
   $49 = $20 + 11 | 0; //@line 45631
   $50 = $20 + 4 | 0; //@line 45632
   $51 = $23 + 11 | 0; //@line 45633
   $52 = $23 + 4 | 0; //@line 45634
   $53 = $16 + 3 | 0; //@line 45635
   $54 = $19 + 11 | 0; //@line 45636
   $55 = $19 + 4 | 0; //@line 45637
   $$0149 = 0; //@line 45638
   $$0158 = 0; //@line 45638
   L24 : while (1) {
    if ($$0158 >>> 0 >= 4) {
     label = 246; //@line 45642
     break;
    }
    $57 = HEAP32[$0 >> 2] | 0; //@line 45645
    do {
     if (!$57) {
      $910 = 1; //@line 45649
     } else {
      $60 = HEAP32[$57 + 12 >> 2] | 0; //@line 45652
      if (($60 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 45660
       $67 = invoke_ii(HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] | 0, $57 | 0) | 0; //@line 45661
       $68 = __THREW__; //@line 45662
       __THREW__ = 0; //@line 45662
       if ($68 & 1) {
        label = 35; //@line 45665
        break L24;
       } else {
        $$0$i$i$i$i = $67; //@line 45668
       }
      } else {
       $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$60 >> 0] | 0) | 0; //@line 45673
      }
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0; //@line 45678
       $910 = 1; //@line 45679
       break;
      } else {
       $910 = (HEAP32[$0 >> 2] | 0) == 0; //@line 45684
       break;
      }
     }
    } while (0);
    $74 = HEAP32[$1 >> 2] | 0; //@line 45689
    do {
     if (!$74) {
      label = 32; //@line 45693
     } else {
      $77 = HEAP32[$74 + 12 >> 2] | 0; //@line 45696
      if (($77 | 0) == (HEAP32[$74 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 45704
       $84 = invoke_ii(HEAP32[(HEAP32[$74 >> 2] | 0) + 36 >> 2] | 0, $74 | 0) | 0; //@line 45705
       $85 = __THREW__; //@line 45706
       __THREW__ = 0; //@line 45706
       if ($85 & 1) {
        label = 35; //@line 45709
        break L24;
       } else {
        $$0$i$i2$i$i = $84; //@line 45712
       }
      } else {
       $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$77 >> 0] | 0) | 0; //@line 45717
      }
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 45722
       label = 32; //@line 45723
       break;
      } else {
       if ($910) {
        $911 = $74; //@line 45727
        break;
       } else {
        label = 246; //@line 45730
        break L24;
       }
      }
     }
    } while (0);
    if ((label | 0) == 32) {
     label = 0; //@line 45737
     if ($910) {
      label = 246; //@line 45739
      break;
     } else {
      $911 = 0; //@line 45742
     }
    }
    L49 : do {
     switch (HEAP8[$16 + $$0158 >> 0] | 0) {
     case 1:
      {
       if (($$0158 | 0) == 3) {
        $$1150 = $$0149; //@line 45753
       } else {
        $98 = HEAP32[$0 >> 2] | 0; //@line 45755
        $100 = HEAP32[$98 + 12 >> 2] | 0; //@line 45757
        if (($100 | 0) == (HEAP32[$98 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 45765
         $107 = invoke_ii(HEAP32[(HEAP32[$98 >> 2] | 0) + 36 >> 2] | 0, $98 | 0) | 0; //@line 45766
         $108 = __THREW__; //@line 45767
         __THREW__ = 0; //@line 45767
         if ($108 & 1) {
          label = 35; //@line 45770
          break L24;
         } else {
          $$0$i$i183 = $107; //@line 45773
         }
        } else {
         $$0$i$i183 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$100 >> 0] | 0) | 0; //@line 45778
        }
        if (($$0$i$i183 & 255) << 24 >> 24 <= -1) {
         label = 47; //@line 45783
         break L24;
        }
        if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i183 << 24 >> 24 << 1) >> 1] & 8192)) {
         label = 47; //@line 45794
         break L24;
        }
        $120 = HEAP32[$0 >> 2] | 0; //@line 45797
        $121 = $120 + 12 | 0; //@line 45798
        $122 = HEAP32[$121 >> 2] | 0; //@line 45799
        if (($122 | 0) == (HEAP32[$120 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 45807
         $129 = invoke_ii(HEAP32[(HEAP32[$120 >> 2] | 0) + 40 >> 2] | 0, $120 | 0) | 0; //@line 45808
         $130 = __THREW__; //@line 45809
         __THREW__ = 0; //@line 45809
         if ($130 & 1) {
          label = 35; //@line 45812
          break L24;
         } else {
          $$0$i$i185 = $129; //@line 45815
         }
        } else {
         HEAP32[$121 >> 2] = $122 + 1; //@line 45819
         $$0$i$i185 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$122 >> 0] | 0) | 0; //@line 45822
        }
        __THREW__ = 0; //@line 45825
        invoke_vii(116, $23 | 0, $$0$i$i185 & 255 | 0); //@line 45826
        $136 = __THREW__; //@line 45827
        __THREW__ = 0; //@line 45827
        if ($136 & 1) {
         label = 35; //@line 45830
         break L24;
        } else {
         $$pre$i4$i$i195 = $911; //@line 45833
         $158 = $911; //@line 45833
         label = 49; //@line 45834
        }
       }
       break;
      }
     case 0:
      {
       if (($$0158 | 0) == 3) {
        $$1150 = $$0149; //@line 45842
       } else {
        $$pre$i4$i$i195 = $911; //@line 45844
        $158 = $911; //@line 45844
        label = 49; //@line 45845
       }
       break;
      }
     case 3:
      {
       $217 = HEAP8[$43 >> 0] | 0; //@line 45850
       $221 = $217 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $217 & 255; //@line 45854
       $222 = HEAP8[$45 >> 0] | 0; //@line 45855
       $226 = $222 << 24 >> 24 < 0 ? HEAP32[$46 >> 2] | 0 : $222 & 255; //@line 45859
       if (($221 | 0) == (0 - $226 | 0)) {
        $$1150 = $$0149; //@line 45863
       } else {
        if (!$221) {
         $271 = HEAP32[$0 >> 2] | 0; //@line 45867
         $273 = HEAP32[$271 + 12 >> 2] | 0; //@line 45869
         if (($273 | 0) == (HEAP32[$271 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 45877
          $280 = invoke_ii(HEAP32[(HEAP32[$271 >> 2] | 0) + 36 >> 2] | 0, $271 | 0) | 0; //@line 45878
          $281 = __THREW__; //@line 45879
          __THREW__ = 0; //@line 45879
          if ($281 & 1) {
           label = 35; //@line 45882
           break L24;
          } else {
           $$0$i$i217 = $280; //@line 45885
          }
         } else {
          $$0$i$i217 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$273 >> 0] | 0) | 0; //@line 45890
         }
         if ((HEAP8[((HEAP8[$45 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 0] | 0) != ($$0$i$i217 & 255) << 24 >> 24) {
          $$1150 = $$0149; //@line 45900
          break L49;
         }
         $292 = HEAP32[$0 >> 2] | 0; //@line 45903
         $293 = $292 + 12 | 0; //@line 45904
         $294 = HEAP32[$293 >> 2] | 0; //@line 45905
         if (($294 | 0) == (HEAP32[$292 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 45913
          invoke_ii(HEAP32[(HEAP32[$292 >> 2] | 0) + 40 >> 2] | 0, $292 | 0) | 0; //@line 45914
          $301 = __THREW__; //@line 45915
          __THREW__ = 0; //@line 45915
          if ($301 & 1) {
           label = 35; //@line 45918
           break L24;
          }
         } else {
          HEAP32[$293 >> 2] = $294 + 1; //@line 45923
          __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$294 >> 0] | 0) | 0; //@line 45925
         }
         HEAP8[$6 >> 0] = 1; //@line 45927
         $305 = HEAP8[$45 >> 0] | 0; //@line 45928
         $$1150 = ($305 << 24 >> 24 < 0 ? HEAP32[$46 >> 2] | 0 : $305 & 255) >>> 0 > 1 ? $22 : $$0149; //@line 45935
         break L49;
        }
        $231 = HEAP32[$0 >> 2] | 0; //@line 45939
        $233 = HEAP32[$231 + 12 >> 2] | 0; //@line 45941
        $236 = ($233 | 0) == (HEAP32[$231 + 16 >> 2] | 0); //@line 45944
        if (!$226) {
         if ($236) {
          __THREW__ = 0; //@line 45950
          $240 = invoke_ii(HEAP32[(HEAP32[$231 >> 2] | 0) + 36 >> 2] | 0, $231 | 0) | 0; //@line 45951
          $241 = __THREW__; //@line 45952
          __THREW__ = 0; //@line 45952
          if ($241 & 1) {
           label = 35; //@line 45955
           break L24;
          } else {
           $$0$i$i212 = $240; //@line 45958
          }
         } else {
          $$0$i$i212 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$233 >> 0] | 0) | 0; //@line 45963
         }
         if ((HEAP8[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 0] | 0) != ($$0$i$i212 & 255) << 24 >> 24) {
          HEAP8[$6 >> 0] = 1; //@line 45973
          $$1150 = $$0149; //@line 45974
          break L49;
         }
         $252 = HEAP32[$0 >> 2] | 0; //@line 45977
         $253 = $252 + 12 | 0; //@line 45978
         $254 = HEAP32[$253 >> 2] | 0; //@line 45979
         if (($254 | 0) == (HEAP32[$252 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 45987
          invoke_ii(HEAP32[(HEAP32[$252 >> 2] | 0) + 40 >> 2] | 0, $252 | 0) | 0; //@line 45988
          $261 = __THREW__; //@line 45989
          __THREW__ = 0; //@line 45989
          if ($261 & 1) {
           label = 35; //@line 45992
           break L24;
          }
         } else {
          HEAP32[$253 >> 2] = $254 + 1; //@line 45997
          __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$254 >> 0] | 0) | 0; //@line 45999
         }
         $265 = HEAP8[$43 >> 0] | 0; //@line 46001
         $$1150 = ($265 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $265 & 255) >>> 0 > 1 ? $21 : $$0149; //@line 46008
         break L49;
        }
        if ($236) {
         __THREW__ = 0; //@line 46015
         $314 = invoke_ii(HEAP32[(HEAP32[$231 >> 2] | 0) + 36 >> 2] | 0, $231 | 0) | 0; //@line 46016
         $315 = __THREW__; //@line 46017
         __THREW__ = 0; //@line 46017
         if ($315 & 1) {
          label = 35; //@line 46020
          break L24;
         } else {
          $$0$i$i224 = $314; //@line 46023
         }
        } else {
         $$0$i$i224 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$233 >> 0] | 0) | 0; //@line 46028
        }
        $326 = HEAP32[$0 >> 2] | 0; //@line 46037
        $327 = $326 + 12 | 0; //@line 46038
        $328 = HEAP32[$327 >> 2] | 0; //@line 46039
        $331 = ($328 | 0) == (HEAP32[$326 + 16 >> 2] | 0); //@line 46042
        if ((HEAP8[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 0] | 0) == ($$0$i$i224 & 255) << 24 >> 24) {
         if ($331) {
          __THREW__ = 0; //@line 46048
          invoke_ii(HEAP32[(HEAP32[$326 >> 2] | 0) + 40 >> 2] | 0, $326 | 0) | 0; //@line 46049
          $335 = __THREW__; //@line 46050
          __THREW__ = 0; //@line 46050
          if ($335 & 1) {
           label = 35; //@line 46053
           break L24;
          }
         } else {
          HEAP32[$327 >> 2] = $328 + 1; //@line 46058
          __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$328 >> 0] | 0) | 0; //@line 46060
         }
         $339 = HEAP8[$43 >> 0] | 0; //@line 46062
         $$1150 = ($339 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $339 & 255) >>> 0 > 1 ? $21 : $$0149; //@line 46069
         break L49;
        }
        if ($331) {
         __THREW__ = 0; //@line 46076
         $348 = invoke_ii(HEAP32[(HEAP32[$326 >> 2] | 0) + 36 >> 2] | 0, $326 | 0) | 0; //@line 46077
         $349 = __THREW__; //@line 46078
         __THREW__ = 0; //@line 46078
         if ($349 & 1) {
          label = 35; //@line 46081
          break L24;
         } else {
          $$0$i$i231 = $348; //@line 46084
         }
        } else {
         $$0$i$i231 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$328 >> 0] | 0) | 0; //@line 46089
        }
        if ((HEAP8[((HEAP8[$45 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 0] | 0) != ($$0$i$i231 & 255) << 24 >> 24) {
         label = 109; //@line 46099
         break L24;
        }
        $360 = HEAP32[$0 >> 2] | 0; //@line 46102
        $361 = $360 + 12 | 0; //@line 46103
        $362 = HEAP32[$361 >> 2] | 0; //@line 46104
        if (($362 | 0) == (HEAP32[$360 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 46112
         invoke_ii(HEAP32[(HEAP32[$360 >> 2] | 0) + 40 >> 2] | 0, $360 | 0) | 0; //@line 46113
         $369 = __THREW__; //@line 46114
         __THREW__ = 0; //@line 46114
         if ($369 & 1) {
          label = 35; //@line 46117
          break L24;
         }
        } else {
         HEAP32[$361 >> 2] = $362 + 1; //@line 46122
         __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$362 >> 0] | 0) | 0; //@line 46124
        }
        HEAP8[$6 >> 0] = 1; //@line 46126
        $373 = HEAP8[$45 >> 0] | 0; //@line 46127
        $$1150 = ($373 << 24 >> 24 < 0 ? HEAP32[$46 >> 2] | 0 : $373 & 255) >>> 0 > 1 ? $22 : $$0149; //@line 46134
       }
       break;
      }
     case 2:
      {
       if (!($$0158 >>> 0 < 2 | ($$0149 | 0) != 0)) {
        if (!($48 | ($$0158 | 0) == 2 & (HEAP8[$53 >> 0] | 0) != 0)) {
         $$1150 = 0; //@line 46149
         break L49;
        }
       }
       $387 = HEAP8[$49 >> 0] | 0; //@line 46153
       $388 = $387 << 24 >> 24 < 0; //@line 46154
       $389 = HEAP32[$20 >> 2] | 0; //@line 46155
       $390 = $388 ? $389 : $20; //@line 46156
       $391 = $390; //@line 46157
       L115 : do {
        if (!$$0158) {
         $$pre$i4$i$i260 = $911; //@line 46161
         $$sroa$0355$0 = $391; //@line 46161
         $434 = $387; //@line 46161
         $438 = $389; //@line 46161
         $461 = $911; //@line 46161
        } else {
         if ((HEAPU8[$16 + ($$0158 + -1) >> 0] | 0) < 2) {
          $399 = $390 + ($388 ? HEAP32[$50 >> 2] | 0 : $387 & 255) | 0; //@line 46171
          $$sroa$0376$0 = $391; //@line 46172
          while (1) {
           $400 = $$sroa$0376$0; //@line 46174
           if (($399 | 0) == ($400 | 0)) {
            break;
           }
           $402 = HEAP8[$400 >> 0] | 0; //@line 46179
           if ($402 << 24 >> 24 <= -1) {
            break;
           }
           if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($402 << 24 >> 24 << 1) >> 1] & 8192)) {
            break;
           }
           $$sroa$0376$0 = $400 + 1 | 0; //@line 46195
          }
          $412 = $$sroa$0376$0 - $391 | 0; //@line 46197
          $413 = HEAP8[$51 >> 0] | 0; //@line 46198
          $414 = $413 << 24 >> 24 < 0; //@line 46199
          $415 = HEAP32[$52 >> 2] | 0; //@line 46200
          $416 = $413 & 255; //@line 46201
          if ($412 >>> 0 > ($414 ? $415 : $416) >>> 0) {
           $$pre$i4$i$i260 = $911; //@line 46205
           $$sroa$0355$0 = $391; //@line 46205
           $434 = $387; //@line 46205
           $438 = $389; //@line 46205
           $461 = $911; //@line 46205
          } else {
           $419 = HEAP32[$23 >> 2] | 0; //@line 46207
           $426 = ($414 ? $419 : $23) + ($414 ? $415 : $416) | 0; //@line 46215
           $$sink = $390; //@line 46216
           $427 = ($414 ? $419 + $415 | 0 : $23 + $416 | 0) + (0 - $412) | 0; //@line 46216
           while (1) {
            if (($427 | 0) == ($426 | 0)) {
             $$pre$i4$i$i260 = $911; //@line 46220
             $$sroa$0355$0 = $$sroa$0376$0; //@line 46220
             $434 = $387; //@line 46220
             $438 = $389; //@line 46220
             $461 = $911; //@line 46220
             break L115;
            }
            if ((HEAP8[$427 >> 0] | 0) != (HEAP8[$$sink >> 0] | 0)) {
             $$pre$i4$i$i260 = $911; //@line 46227
             $$sroa$0355$0 = $391; //@line 46227
             $434 = $387; //@line 46227
             $438 = $389; //@line 46227
             $461 = $911; //@line 46227
             break L115;
            }
            $$sink = $$sink + 1 | 0; //@line 46232
            $427 = $427 + 1 | 0; //@line 46232
           }
          }
         } else {
          $$pre$i4$i$i260 = $911; //@line 46236
          $$sroa$0355$0 = $391; //@line 46236
          $434 = $387; //@line 46236
          $438 = $389; //@line 46236
          $461 = $911; //@line 46236
         }
        }
       } while (0);
       L129 : while (1) {
        $435 = $434 << 24 >> 24 < 0; //@line 46241
        $441 = ($435 ? $438 : $20) + ($435 ? HEAP32[$50 >> 2] | 0 : $434 & 255) | 0; //@line 46246
        $442 = $$sroa$0355$0; //@line 46247
        if (($441 | 0) == ($442 | 0)) {
         $$lcssa = $441; //@line 46250
         break;
        }
        $444 = HEAP32[$0 >> 2] | 0; //@line 46253
        do {
         if (!$444) {
          $479 = 1; //@line 46257
         } else {
          $447 = HEAP32[$444 + 12 >> 2] | 0; //@line 46260
          if (($447 | 0) == (HEAP32[$444 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 46268
           $454 = invoke_ii(HEAP32[(HEAP32[$444 >> 2] | 0) + 36 >> 2] | 0, $444 | 0) | 0; //@line 46269
           $455 = __THREW__; //@line 46270
           __THREW__ = 0; //@line 46270
           if ($455 & 1) {
            label = 148; //@line 46273
            break L24;
           } else {
            $$0$i$i$i$i252 = $454; //@line 46276
           }
          } else {
           $$0$i$i$i$i252 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$447 >> 0] | 0) | 0; //@line 46281
          }
          if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i252, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
           HEAP32[$0 >> 2] = 0; //@line 46286
           $479 = 1; //@line 46287
           break;
          } else {
           $479 = (HEAP32[$0 >> 2] | 0) == 0; //@line 46292
           break;
          }
         }
        } while (0);
        do {
         if (!$461) {
          $$pre$i4$i$i260473 = $$pre$i4$i$i260; //@line 46300
          label = 138; //@line 46301
         } else {
          $464 = HEAP32[$461 + 12 >> 2] | 0; //@line 46304
          if (($464 | 0) == (HEAP32[$461 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 46312
           $471 = invoke_ii(HEAP32[(HEAP32[$461 >> 2] | 0) + 36 >> 2] | 0, $461 | 0) | 0; //@line 46313
           $472 = __THREW__; //@line 46314
           __THREW__ = 0; //@line 46314
           if ($472 & 1) {
            label = 148; //@line 46317
            break L24;
           } else {
            $$0$i$i2$i$i258 = $471; //@line 46320
           }
          } else {
           $$0$i$i2$i$i258 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$464 >> 0] | 0) | 0; //@line 46325
          }
          if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i258, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
           HEAP32[$1 >> 2] = 0; //@line 46330
           $$pre$i4$i$i260473 = 0; //@line 46331
           label = 138; //@line 46332
           break;
          } else {
           if ($479 ^ ($$pre$i4$i$i260 | 0) == 0) {
            $$pre$i4$i$i260472 = $$pre$i4$i$i260; //@line 46338
            $913 = $$pre$i4$i$i260; //@line 46338
            break;
           } else {
            $$lcssa = $442; //@line 46341
            break L129;
           }
          }
         }
        } while (0);
        if ((label | 0) == 138) {
         label = 0; //@line 46348
         if ($479) {
          $$lcssa = $442; //@line 46350
          break;
         } else {
          $$pre$i4$i$i260472 = $$pre$i4$i$i260473; //@line 46353
          $913 = 0; //@line 46353
         }
        }
        $480 = HEAP32[$0 >> 2] | 0; //@line 46356
        $482 = HEAP32[$480 + 12 >> 2] | 0; //@line 46358
        if (($482 | 0) == (HEAP32[$480 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 46366
         $489 = invoke_ii(HEAP32[(HEAP32[$480 >> 2] | 0) + 36 >> 2] | 0, $480 | 0) | 0; //@line 46367
         $490 = __THREW__; //@line 46368
         __THREW__ = 0; //@line 46368
         if ($490 & 1) {
          label = 148; //@line 46371
          break L24;
         } else {
          $$0$i$i266 = $489; //@line 46374
         }
        } else {
         $$0$i$i266 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$482 >> 0] | 0) | 0; //@line 46379
        }
        if ((HEAP8[$442 >> 0] | 0) != ($$0$i$i266 & 255) << 24 >> 24) {
         $$lcssa = $442; //@line 46385
         break;
        }
        $497 = HEAP32[$0 >> 2] | 0; //@line 46388
        $498 = $497 + 12 | 0; //@line 46389
        $499 = HEAP32[$498 >> 2] | 0; //@line 46390
        if (($499 | 0) == (HEAP32[$497 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 46398
         invoke_ii(HEAP32[(HEAP32[$497 >> 2] | 0) + 40 >> 2] | 0, $497 | 0) | 0; //@line 46399
         $506 = __THREW__; //@line 46400
         __THREW__ = 0; //@line 46400
         if ($506 & 1) {
          label = 149; //@line 46403
          break L24;
         }
        } else {
         HEAP32[$498 >> 2] = $499 + 1; //@line 46408
         __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$499 >> 0] | 0) | 0; //@line 46410
        }
        $$pre$i4$i$i260 = $$pre$i4$i$i260472; //@line 46416
        $$sroa$0355$0 = $442 + 1 | 0; //@line 46416
        $434 = HEAP8[$49 >> 0] | 0; //@line 46416
        $438 = HEAP32[$20 >> 2] | 0; //@line 46416
        $461 = $913; //@line 46416
       }
       if ($48) {
        $516 = HEAP8[$49 >> 0] | 0; //@line 46419
        $517 = $516 << 24 >> 24 < 0; //@line 46420
        if ((($517 ? HEAP32[$20 >> 2] | 0 : $20) + ($517 ? HEAP32[$50 >> 2] | 0 : $516 & 255) | 0) == ($$lcssa | 0)) {
         $$1150 = $$0149; //@line 46429
        } else {
         label = 152; //@line 46431
         break L24;
        }
       } else {
        $$1150 = $$0149; //@line 46435
       }
       break;
      }
     case 4:
      {
       $$0132 = 0; //@line 46440
       $$pre$i4$i$i280 = $911; //@line 46440
       $544 = $911; //@line 46440
       L165 : while (1) {
        $527 = HEAP32[$0 >> 2] | 0; //@line 46442
        do {
         if (!$527) {
          $562 = 1; //@line 46446
         } else {
          $530 = HEAP32[$527 + 12 >> 2] | 0; //@line 46449
          if (($530 | 0) == (HEAP32[$527 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 46457
           $537 = invoke_ii(HEAP32[(HEAP32[$527 >> 2] | 0) + 36 >> 2] | 0, $527 | 0) | 0; //@line 46458
           $538 = __THREW__; //@line 46459
           __THREW__ = 0; //@line 46459
           if ($538 & 1) {
            label = 244; //@line 46462
            break L24;
           } else {
            $$0$i$i$i$i272 = $537; //@line 46465
           }
          } else {
           $$0$i$i$i$i272 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$530 >> 0] | 0) | 0; //@line 46470
          }
          if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i272, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
           HEAP32[$0 >> 2] = 0; //@line 46475
           $562 = 1; //@line 46476
           break;
          } else {
           $562 = (HEAP32[$0 >> 2] | 0) == 0; //@line 46481
           break;
          }
         }
        } while (0);
        do {
         if (!$544) {
          $$pre$i4$i$i280461 = $$pre$i4$i$i280; //@line 46489
          label = 166; //@line 46490
         } else {
          $547 = HEAP32[$544 + 12 >> 2] | 0; //@line 46493
          if (($547 | 0) == (HEAP32[$544 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 46501
           $554 = invoke_ii(HEAP32[(HEAP32[$544 >> 2] | 0) + 36 >> 2] | 0, $544 | 0) | 0; //@line 46502
           $555 = __THREW__; //@line 46503
           __THREW__ = 0; //@line 46503
           if ($555 & 1) {
            label = 244; //@line 46506
            break L24;
           } else {
            $$0$i$i2$i$i278 = $554; //@line 46509
           }
          } else {
           $$0$i$i2$i$i278 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$547 >> 0] | 0) | 0; //@line 46514
          }
          if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i278, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
           HEAP32[$1 >> 2] = 0; //@line 46519
           $$pre$i4$i$i280461 = 0; //@line 46520
           label = 166; //@line 46521
           break;
          } else {
           if ($562 ^ ($$pre$i4$i$i280 | 0) == 0) {
            $$pre$i4$i$i280463 = $$pre$i4$i$i280; //@line 46527
            $914 = $$pre$i4$i$i280; //@line 46527
            break;
           } else {
            $$pre$i4$i$i301 = $$pre$i4$i$i280; //@line 46530
            break L165;
           }
          }
         }
        } while (0);
        if ((label | 0) == 166) {
         label = 0; //@line 46537
         if ($562) {
          $$pre$i4$i$i301 = $$pre$i4$i$i280461; //@line 46539
          break;
         } else {
          $$pre$i4$i$i280463 = $$pre$i4$i$i280461; //@line 46542
          $914 = 0; //@line 46542
         }
        }
        $563 = HEAP32[$0 >> 2] | 0; //@line 46545
        $565 = HEAP32[$563 + 12 >> 2] | 0; //@line 46547
        if (($565 | 0) == (HEAP32[$563 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 46555
         $572 = invoke_ii(HEAP32[(HEAP32[$563 >> 2] | 0) + 36 >> 2] | 0, $563 | 0) | 0; //@line 46556
         $573 = __THREW__; //@line 46557
         __THREW__ = 0; //@line 46557
         if ($573 & 1) {
          label = 244; //@line 46560
          break L24;
         } else {
          $$0$i$i286 = $572; //@line 46563
         }
        } else {
         $$0$i$i286 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$565 >> 0] | 0) | 0; //@line 46568
        }
        $577 = $$0$i$i286 & 255; //@line 46570
        if ($577 << 24 >> 24 > -1) {
         if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i286 << 24 >> 24 << 1) >> 1] & 2048)) {
          label = 177; //@line 46581
         } else {
          $585 = HEAP32[$9 >> 2] | 0; //@line 46583
          if (($585 | 0) == (HEAP32[$11 >> 2] | 0)) {
           __THREW__ = 0; //@line 46587
           invoke_viii(36, $8 | 0, $9 | 0, $11 | 0); //@line 46588
           $588 = __THREW__; //@line 46589
           __THREW__ = 0; //@line 46589
           if ($588 & 1) {
            label = 244; //@line 46592
            break L24;
           }
           $591 = HEAP32[$9 >> 2] | 0; //@line 46596
          } else {
           $591 = $585; //@line 46598
          }
          HEAP32[$9 >> 2] = $591 + 1; //@line 46601
          HEAP8[$591 >> 0] = $577; //@line 46602
          $$2134$ph = $$0132 + 1 | 0; //@line 46604
         }
        } else {
         label = 177; //@line 46607
        }
        if ((label | 0) == 177) {
         label = 0; //@line 46610
         $593 = HEAP8[$54 >> 0] | 0; //@line 46611
         if (!((HEAP8[$18 >> 0] | 0) == $577 << 24 >> 24 & ($$0132 | 0 ? (($593 << 24 >> 24 < 0 ? HEAP32[$55 >> 2] | 0 : $593 & 255) | 0) != 0 : 0))) {
          $$pre$i4$i$i301 = $$pre$i4$i$i280463; //@line 46623
          break;
         }
         $602 = HEAP32[$14 >> 2] | 0; //@line 46626
         if (($602 | 0) == (HEAP32[$15 >> 2] | 0)) {
          __THREW__ = 0; //@line 46630
          invoke_viii(37, $13 | 0, $14 | 0, $15 | 0); //@line 46631
          $605 = __THREW__; //@line 46632
          __THREW__ = 0; //@line 46632
          if ($605 & 1) {
           label = 244; //@line 46635
           break L24;
          }
          $608 = HEAP32[$14 >> 2] | 0; //@line 46639
         } else {
          $608 = $602; //@line 46641
         }
         HEAP32[$14 >> 2] = $608 + 4; //@line 46644
         HEAP32[$608 >> 2] = $$0132; //@line 46645
         $$2134$ph = 0; //@line 46646
        }
        $609 = HEAP32[$0 >> 2] | 0; //@line 46648
        $610 = $609 + 12 | 0; //@line 46649
        $611 = HEAP32[$610 >> 2] | 0; //@line 46650
        if (($611 | 0) == (HEAP32[$609 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 46658
         invoke_ii(HEAP32[(HEAP32[$609 >> 2] | 0) + 40 >> 2] | 0, $609 | 0) | 0; //@line 46659
         $618 = __THREW__; //@line 46660
         __THREW__ = 0; //@line 46660
         if ($618 & 1) {
          label = 244; //@line 46663
          break L24;
         } else {
          $$0132 = $$2134$ph; //@line 46666
          $$pre$i4$i$i280 = $$pre$i4$i$i280463; //@line 46666
          $544 = $914; //@line 46666
          continue;
         }
        } else {
         HEAP32[$610 >> 2] = $611 + 1; //@line 46671
         __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$611 >> 0] | 0) | 0; //@line 46673
         $$0132 = $$2134$ph; //@line 46674
         $$pre$i4$i$i280 = $$pre$i4$i$i280463; //@line 46674
         $544 = $914; //@line 46674
         continue;
        }
       }
       $623 = HEAP32[$14 >> 2] | 0; //@line 46679
       if ($$0132 | 0 ? (HEAP32[$13 >> 2] | 0) != ($623 | 0) : 0) {
        if (($623 | 0) == (HEAP32[$15 >> 2] | 0)) {
         __THREW__ = 0; //@line 46687
         invoke_viii(37, $13 | 0, $14 | 0, $15 | 0); //@line 46688
         $628 = __THREW__; //@line 46689
         __THREW__ = 0; //@line 46689
         if ($628 & 1) {
          label = 244; //@line 46692
          break L24;
         }
         $631 = HEAP32[$14 >> 2] | 0; //@line 46696
        } else {
         $631 = $623; //@line 46698
        }
        HEAP32[$14 >> 2] = $631 + 4; //@line 46701
        HEAP32[$631 >> 2] = $$0132; //@line 46702
       }
       L219 : do {
        if ((HEAP32[$24 >> 2] | 0) > 0) {
         $634 = HEAP32[$0 >> 2] | 0; //@line 46708
         do {
          if (!$634) {
           $915 = 1; //@line 46712
          } else {
           $637 = HEAP32[$634 + 12 >> 2] | 0; //@line 46715
           if (($637 | 0) == (HEAP32[$634 + 16 >> 2] | 0)) {
            __THREW__ = 0; //@line 46723
            $644 = invoke_ii(HEAP32[(HEAP32[$634 >> 2] | 0) + 36 >> 2] | 0, $634 | 0) | 0; //@line 46724
            $645 = __THREW__; //@line 46725
            __THREW__ = 0; //@line 46725
            if ($645 & 1) {
             label = 244; //@line 46728
             break L24;
            } else {
             $$0$i$i$i$i293 = $644; //@line 46731
            }
           } else {
            $$0$i$i$i$i293 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$637 >> 0] | 0) | 0; //@line 46736
           }
           if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i293, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
            HEAP32[$0 >> 2] = 0; //@line 46741
            $915 = 1; //@line 46742
            break;
           } else {
            $915 = (HEAP32[$0 >> 2] | 0) == 0; //@line 46747
            break;
           }
          }
         } while (0);
         do {
          if (!$$pre$i4$i$i301) {
           label = 204; //@line 46755
          } else {
           $653 = HEAP32[$$pre$i4$i$i301 + 12 >> 2] | 0; //@line 46758
           if (($653 | 0) == (HEAP32[$$pre$i4$i$i301 + 16 >> 2] | 0)) {
            __THREW__ = 0; //@line 46766
            $660 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i301 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i301 | 0) | 0; //@line 46767
            $661 = __THREW__; //@line 46768
            __THREW__ = 0; //@line 46768
            if ($661 & 1) {
             label = 244; //@line 46771
             break L24;
            } else {
             $$0$i$i2$i$i299 = $660; //@line 46774
            }
           } else {
            $$0$i$i2$i$i299 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$653 >> 0] | 0) | 0; //@line 46779
           }
           if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i299, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
            HEAP32[$1 >> 2] = 0; //@line 46784
            label = 204; //@line 46785
            break;
           } else {
            if ($915) {
             $916 = $$pre$i4$i$i301; //@line 46789
             break;
            } else {
             label = 243; //@line 46792
             break L24;
            }
           }
          }
         } while (0);
         if ((label | 0) == 204) {
          label = 0; //@line 46799
          if ($915) {
           label = 243; //@line 46801
           break L24;
          } else {
           $916 = 0; //@line 46804
          }
         }
         $667 = HEAP32[$0 >> 2] | 0; //@line 46807
         $669 = HEAP32[$667 + 12 >> 2] | 0; //@line 46809
         if (($669 | 0) == (HEAP32[$667 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 46817
          $676 = invoke_ii(HEAP32[(HEAP32[$667 >> 2] | 0) + 36 >> 2] | 0, $667 | 0) | 0; //@line 46818
          $677 = __THREW__; //@line 46819
          __THREW__ = 0; //@line 46819
          if ($677 & 1) {
           label = 244; //@line 46822
           break L24;
          } else {
           $$0$i$i306 = $676; //@line 46825
          }
         } else {
          $$0$i$i306 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$669 >> 0] | 0) | 0; //@line 46830
         }
         if ((HEAP8[$17 >> 0] | 0) != ($$0$i$i306 & 255) << 24 >> 24) {
          label = 243; //@line 46836
          break L24;
         }
         $684 = HEAP32[$0 >> 2] | 0; //@line 46839
         $685 = $684 + 12 | 0; //@line 46840
         $686 = HEAP32[$685 >> 2] | 0; //@line 46841
         if (($686 | 0) == (HEAP32[$684 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 46849
          invoke_ii(HEAP32[(HEAP32[$684 >> 2] | 0) + 40 >> 2] | 0, $684 | 0) | 0; //@line 46850
          $693 = __THREW__; //@line 46851
          __THREW__ = 0; //@line 46851
          if ($693 & 1) {
           label = 244; //@line 46854
           break L24;
          } else {
           $$pre$i4$i$i319 = $916; //@line 46857
           $716 = $916; //@line 46857
          }
         } else {
          HEAP32[$685 >> 2] = $686 + 1; //@line 46861
          __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$686 >> 0] | 0) | 0; //@line 46863
          $$pre$i4$i$i319 = $916; //@line 46864
          $716 = $916; //@line 46864
         }
         while (1) {
          if ((HEAP32[$24 >> 2] | 0) <= 0) {
           break L219;
          }
          $699 = HEAP32[$0 >> 2] | 0; //@line 46872
          do {
           if (!$699) {
            $734 = 1; //@line 46876
           } else {
            $702 = HEAP32[$699 + 12 >> 2] | 0; //@line 46879
            if (($702 | 0) == (HEAP32[$699 + 16 >> 2] | 0)) {
             __THREW__ = 0; //@line 46887
             $709 = invoke_ii(HEAP32[(HEAP32[$699 >> 2] | 0) + 36 >> 2] | 0, $699 | 0) | 0; //@line 46888
             $710 = __THREW__; //@line 46889
             __THREW__ = 0; //@line 46889
             if ($710 & 1) {
              label = 244; //@line 46892
              break L24;
             } else {
              $$0$i$i$i$i311 = $709; //@line 46895
             }
            } else {
             $$0$i$i$i$i311 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$702 >> 0] | 0) | 0; //@line 46900
            }
            if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i311, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
             HEAP32[$0 >> 2] = 0; //@line 46905
             $734 = 1; //@line 46906
             break;
            } else {
             $734 = (HEAP32[$0 >> 2] | 0) == 0; //@line 46911
             break;
            }
           }
          } while (0);
          do {
           if (!$716) {
            $$pre$i4$i$i319468$ph = $$pre$i4$i$i319; //@line 46919
            label = 227; //@line 46920
           } else {
            $719 = HEAP32[$716 + 12 >> 2] | 0; //@line 46923
            if (($719 | 0) == (HEAP32[$716 + 16 >> 2] | 0)) {
             __THREW__ = 0; //@line 46931
             $726 = invoke_ii(HEAP32[(HEAP32[$716 >> 2] | 0) + 36 >> 2] | 0, $716 | 0) | 0; //@line 46932
             $727 = __THREW__; //@line 46933
             __THREW__ = 0; //@line 46933
             if ($727 & 1) {
              label = 244; //@line 46936
              break L24;
             } else {
              $$0$i$i2$i$i317 = $726; //@line 46939
             }
            } else {
             $$0$i$i2$i$i317 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$719 >> 0] | 0) | 0; //@line 46944
            }
            if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i317, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
             HEAP32[$1 >> 2] = 0; //@line 46949
             $$pre$i4$i$i319468$ph = 0; //@line 46950
             label = 227; //@line 46951
             break;
            } else {
             if ($734 ^ ($$pre$i4$i$i319 | 0) == 0) {
              $$pre$i4$i$i319468479 = $$pre$i4$i$i319; //@line 46957
              $917 = $$pre$i4$i$i319; //@line 46957
              break;
             } else {
              label = 243; //@line 46960
              break L24;
             }
            }
           }
          } while (0);
          if ((label | 0) == 227) {
           label = 0; //@line 46967
           if ($734) {
            label = 243; //@line 46969
            break L24;
           } else {
            $$pre$i4$i$i319468479 = $$pre$i4$i$i319468$ph; //@line 46972
            $917 = 0; //@line 46972
           }
          }
          $735 = HEAP32[$0 >> 2] | 0; //@line 46975
          $737 = HEAP32[$735 + 12 >> 2] | 0; //@line 46977
          if (($737 | 0) == (HEAP32[$735 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 46985
           $744 = invoke_ii(HEAP32[(HEAP32[$735 >> 2] | 0) + 36 >> 2] | 0, $735 | 0) | 0; //@line 46986
           $745 = __THREW__; //@line 46987
           __THREW__ = 0; //@line 46987
           if ($745 & 1) {
            label = 244; //@line 46990
            break L24;
           } else {
            $$0$i$i325 = $744; //@line 46993
           }
          } else {
           $$0$i$i325 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$737 >> 0] | 0) | 0; //@line 46998
          }
          if (($$0$i$i325 & 255) << 24 >> 24 <= -1) {
           label = 243; //@line 47003
           break L24;
          }
          if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i325 << 24 >> 24 << 1) >> 1] & 2048)) {
           label = 243; //@line 47014
           break L24;
          }
          if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) {
           __THREW__ = 0; //@line 47021
           invoke_viii(36, $8 | 0, $9 | 0, $11 | 0); //@line 47022
           $760 = __THREW__; //@line 47023
           __THREW__ = 0; //@line 47023
           if ($760 & 1) {
            label = 244; //@line 47026
            break L24;
           }
          }
          $762 = HEAP32[$0 >> 2] | 0; //@line 47030
          $764 = HEAP32[$762 + 12 >> 2] | 0; //@line 47032
          if (($764 | 0) == (HEAP32[$762 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 47040
           $771 = invoke_ii(HEAP32[(HEAP32[$762 >> 2] | 0) + 36 >> 2] | 0, $762 | 0) | 0; //@line 47041
           $772 = __THREW__; //@line 47042
           __THREW__ = 0; //@line 47042
           if ($772 & 1) {
            label = 244; //@line 47045
            break L24;
           } else {
            $$0$i$i329 = $771; //@line 47048
           }
          } else {
           $$0$i$i329 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$764 >> 0] | 0) | 0; //@line 47053
          }
          $777 = HEAP32[$9 >> 2] | 0; //@line 47056
          HEAP32[$9 >> 2] = $777 + 1; //@line 47058
          HEAP8[$777 >> 0] = $$0$i$i329; //@line 47059
          HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + -1; //@line 47062
          $781 = HEAP32[$0 >> 2] | 0; //@line 47063
          $782 = $781 + 12 | 0; //@line 47064
          $783 = HEAP32[$782 >> 2] | 0; //@line 47065
          if (($783 | 0) == (HEAP32[$781 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 47073
           invoke_ii(HEAP32[(HEAP32[$781 >> 2] | 0) + 40 >> 2] | 0, $781 | 0) | 0; //@line 47074
           $790 = __THREW__; //@line 47075
           __THREW__ = 0; //@line 47075
           if ($790 & 1) {
            label = 244; //@line 47078
            break L24;
           } else {
            $$pre$i4$i$i319 = $$pre$i4$i$i319468479; //@line 47081
            $716 = $917; //@line 47081
            continue;
           }
          } else {
           HEAP32[$782 >> 2] = $783 + 1; //@line 47086
           __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$783 >> 0] | 0) | 0; //@line 47088
           $$pre$i4$i$i319 = $$pre$i4$i$i319468479; //@line 47089
           $716 = $917; //@line 47089
           continue;
          }
         }
        }
       } while (0);
       if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
        label = 243; //@line 47099
        break L24;
       } else {
        $$1150 = $$0149; //@line 47102
       }
       break;
      }
     default:
      {
       $$1150 = $$0149; //@line 47107
      }
     }
    } while (0);
    L293 : do {
     if ((label | 0) == 49) {
      while (1) {
       label = 0; //@line 47114
       $141 = HEAP32[$0 >> 2] | 0; //@line 47115
       do {
        if (!$141) {
         $176 = 1; //@line 47119
        } else {
         $144 = HEAP32[$141 + 12 >> 2] | 0; //@line 47122
         if (($144 | 0) == (HEAP32[$141 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 47130
          $151 = invoke_ii(HEAP32[(HEAP32[$141 >> 2] | 0) + 36 >> 2] | 0, $141 | 0) | 0; //@line 47131
          $152 = __THREW__; //@line 47132
          __THREW__ = 0; //@line 47132
          if ($152 & 1) {
           label = 35; //@line 47135
           break L24;
          } else {
           $$0$i$i$i$i187 = $151; //@line 47138
          }
         } else {
          $$0$i$i$i$i187 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$144 >> 0] | 0) | 0; //@line 47143
         }
         if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i187, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
          HEAP32[$0 >> 2] = 0; //@line 47148
          $176 = 1; //@line 47149
          break;
         } else {
          $176 = (HEAP32[$0 >> 2] | 0) == 0; //@line 47154
          break;
         }
        }
       } while (0);
       do {
        if (!$158) {
         $$pre$i4$i$i195475 = $$pre$i4$i$i195; //@line 47162
         label = 62; //@line 47163
        } else {
         $161 = HEAP32[$158 + 12 >> 2] | 0; //@line 47166
         if (($161 | 0) == (HEAP32[$158 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 47174
          $168 = invoke_ii(HEAP32[(HEAP32[$158 >> 2] | 0) + 36 >> 2] | 0, $158 | 0) | 0; //@line 47175
          $169 = __THREW__; //@line 47176
          __THREW__ = 0; //@line 47176
          if ($169 & 1) {
           label = 35; //@line 47179
           break L24;
          } else {
           $$0$i$i2$i$i193 = $168; //@line 47182
          }
         } else {
          $$0$i$i2$i$i193 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$161 >> 0] | 0) | 0; //@line 47187
         }
         if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i193, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
          HEAP32[$1 >> 2] = 0; //@line 47192
          $$pre$i4$i$i195475 = 0; //@line 47193
          label = 62; //@line 47194
          break;
         } else {
          if ($176 ^ ($$pre$i4$i$i195 | 0) == 0) {
           $$pre$i4$i$i195477 = $$pre$i4$i$i195; //@line 47200
           $912 = $$pre$i4$i$i195; //@line 47200
           break;
          } else {
           $$1150 = $$0149; //@line 47203
           break L293;
          }
         }
        }
       } while (0);
       if ((label | 0) == 62) {
        label = 0; //@line 47210
        if ($176) {
         $$1150 = $$0149; //@line 47212
         break L293;
        } else {
         $$pre$i4$i$i195477 = $$pre$i4$i$i195475; //@line 47215
         $912 = 0; //@line 47215
        }
       }
       $177 = HEAP32[$0 >> 2] | 0; //@line 47218
       $179 = HEAP32[$177 + 12 >> 2] | 0; //@line 47220
       if (($179 | 0) == (HEAP32[$177 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 47228
        $186 = invoke_ii(HEAP32[(HEAP32[$177 >> 2] | 0) + 36 >> 2] | 0, $177 | 0) | 0; //@line 47229
        $187 = __THREW__; //@line 47230
        __THREW__ = 0; //@line 47230
        if ($187 & 1) {
         label = 35; //@line 47233
         break L24;
        } else {
         $$0$i$i201 = $186; //@line 47236
        }
       } else {
        $$0$i$i201 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$179 >> 0] | 0) | 0; //@line 47241
       }
       if (($$0$i$i201 & 255) << 24 >> 24 <= -1) {
        $$1150 = $$0149; //@line 47246
        break L293;
       }
       if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i201 << 24 >> 24 << 1) >> 1] & 8192)) {
        $$1150 = $$0149; //@line 47257
        break L293;
       }
       $199 = HEAP32[$0 >> 2] | 0; //@line 47260
       $200 = $199 + 12 | 0; //@line 47261
       $201 = HEAP32[$200 >> 2] | 0; //@line 47262
       if (($201 | 0) == (HEAP32[$199 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 47270
        $208 = invoke_ii(HEAP32[(HEAP32[$199 >> 2] | 0) + 40 >> 2] | 0, $199 | 0) | 0; //@line 47271
        $209 = __THREW__; //@line 47272
        __THREW__ = 0; //@line 47272
        if ($209 & 1) {
         label = 35; //@line 47275
         break L24;
        } else {
         $$0$i$i205 = $208; //@line 47278
        }
       } else {
        HEAP32[$200 >> 2] = $201 + 1; //@line 47282
        $$0$i$i205 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$201 >> 0] | 0) | 0; //@line 47285
       }
       __THREW__ = 0; //@line 47288
       invoke_vii(116, $23 | 0, $$0$i$i205 & 255 | 0); //@line 47289
       $215 = __THREW__; //@line 47290
       __THREW__ = 0; //@line 47290
       if ($215 & 1) {
        label = 35; //@line 47293
        break L24;
       } else {
        $$pre$i4$i$i195 = $$pre$i4$i$i195477; //@line 47296
        $158 = $912; //@line 47296
        label = 49; //@line 47297
       }
      }
     }
    } while (0);
    $$0149 = $$1150; //@line 47303
    $$0158 = $$0158 + 1 | 0; //@line 47303
   }
   L329 : do {
    if ((label | 0) == 35) {
     $93 = ___cxa_find_matching_catch_2() | 0; //@line 47307
     $$5142 = $93; //@line 47309
     $$5148 = tempRet0; //@line 47309
     break L21;
    } else if ((label | 0) == 47) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 47315
     $$10 = 0; //@line 47316
    } else if ((label | 0) == 109) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 47321
     $$10 = 0; //@line 47322
    } else if ((label | 0) == 148) {
     $512 = ___cxa_find_matching_catch_2() | 0; //@line 47325
     $$5142 = $512; //@line 47327
     $$5148 = tempRet0; //@line 47327
     break L21;
    } else if ((label | 0) == 149) {
     $514 = ___cxa_find_matching_catch_2() | 0; //@line 47331
     $$5142 = $514; //@line 47333
     $$5148 = tempRet0; //@line 47333
     break L21;
    } else if ((label | 0) == 152) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 47339
     $$10 = 0; //@line 47340
    } else if ((label | 0) == 243) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 47345
     $$10 = 0; //@line 47346
    } else if ((label | 0) == 244) {
     $799 = ___cxa_find_matching_catch_2() | 0; //@line 47349
     $$5142 = $799; //@line 47351
     $$5148 = tempRet0; //@line 47351
     break L21;
    } else if ((label | 0) == 246) {
     L331 : do {
      if ($$0149 | 0) {
       $803 = $$0149 + 11 | 0; //@line 47358
       $804 = $$0149 + 4 | 0; //@line 47359
       $$0 = 1; //@line 47360
       L333 : while (1) {
        $805 = HEAP8[$803 >> 0] | 0; //@line 47362
        if ($805 << 24 >> 24 < 0) {
         $810 = HEAP32[$804 >> 2] | 0; //@line 47366
        } else {
         $810 = $805 & 255; //@line 47369
        }
        if ($$0 >>> 0 >= $810 >>> 0) {
         break L331;
        }
        $811 = HEAP32[$0 >> 2] | 0; //@line 47375
        do {
         if (!$811) {
          $918 = 1; //@line 47379
         } else {
          $814 = HEAP32[$811 + 12 >> 2] | 0; //@line 47382
          if (($814 | 0) == (HEAP32[$811 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 47390
           $821 = invoke_ii(HEAP32[(HEAP32[$811 >> 2] | 0) + 36 >> 2] | 0, $811 | 0) | 0; //@line 47391
           $822 = __THREW__; //@line 47392
           __THREW__ = 0; //@line 47392
           if ($822 & 1) {
            label = 274; //@line 47395
            break L333;
           } else {
            $$0$i$i$i$i335 = $821; //@line 47398
           }
          } else {
           $$0$i$i$i$i335 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$814 >> 0] | 0) | 0; //@line 47403
          }
          if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i335, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
           HEAP32[$0 >> 2] = 0; //@line 47408
           $918 = 1; //@line 47409
           break;
          } else {
           $918 = (HEAP32[$0 >> 2] | 0) == 0; //@line 47414
           break;
          }
         }
        } while (0);
        $828 = HEAP32[$1 >> 2] | 0; //@line 47419
        do {
         if (!$828) {
          label = 265; //@line 47423
         } else {
          $831 = HEAP32[$828 + 12 >> 2] | 0; //@line 47426
          if (($831 | 0) == (HEAP32[$828 + 16 >> 2] | 0)) {
           __THREW__ = 0; //@line 47434
           $838 = invoke_ii(HEAP32[(HEAP32[$828 >> 2] | 0) + 36 >> 2] | 0, $828 | 0) | 0; //@line 47435
           $839 = __THREW__; //@line 47436
           __THREW__ = 0; //@line 47436
           if ($839 & 1) {
            label = 274; //@line 47439
            break L333;
           } else {
            $$0$i$i2$i$i341 = $838; //@line 47442
           }
          } else {
           $$0$i$i2$i$i341 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$831 >> 0] | 0) | 0; //@line 47447
          }
          if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i341, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
           HEAP32[$1 >> 2] = 0; //@line 47452
           label = 265; //@line 47453
           break;
          } else {
           if ($918) {
            break;
           } else {
            label = 273; //@line 47459
            break L333;
           }
          }
         }
        } while (0);
        if ((label | 0) == 265) {
         label = 0; //@line 47466
         if ($918) {
          label = 273; //@line 47468
          break;
         }
        }
        $845 = HEAP32[$0 >> 2] | 0; //@line 47472
        $847 = HEAP32[$845 + 12 >> 2] | 0; //@line 47474
        if (($847 | 0) == (HEAP32[$845 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 47482
         $854 = invoke_ii(HEAP32[(HEAP32[$845 >> 2] | 0) + 36 >> 2] | 0, $845 | 0) | 0; //@line 47483
         $855 = __THREW__; //@line 47484
         __THREW__ = 0; //@line 47484
         if ($855 & 1) {
          label = 274; //@line 47487
          break;
         } else {
          $$0$i$i249 = $854; //@line 47490
         }
        } else {
         $$0$i$i249 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$847 >> 0] | 0) | 0; //@line 47495
        }
        if ((HEAP8[$803 >> 0] | 0) < 0) {
         $864 = HEAP32[$$0149 >> 2] | 0; //@line 47502
        } else {
         $864 = $$0149; //@line 47504
        }
        if ((HEAP8[$864 + $$0 >> 0] | 0) != ($$0$i$i249 & 255) << 24 >> 24) {
         label = 273; //@line 47510
         break;
        }
        $871 = $$0 + 1 | 0; //@line 47513
        $872 = HEAP32[$0 >> 2] | 0; //@line 47514
        $873 = $872 + 12 | 0; //@line 47515
        $874 = HEAP32[$873 >> 2] | 0; //@line 47516
        if (($874 | 0) == (HEAP32[$872 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 47524
         invoke_ii(HEAP32[(HEAP32[$872 >> 2] | 0) + 40 >> 2] | 0, $872 | 0) | 0; //@line 47525
         $881 = __THREW__; //@line 47526
         __THREW__ = 0; //@line 47526
         if ($881 & 1) {
          label = 274; //@line 47529
          break;
         } else {
          $$0 = $871; //@line 47532
          continue;
         }
        } else {
         HEAP32[$873 >> 2] = $874 + 1; //@line 47537
         __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$874 >> 0] | 0) | 0; //@line 47539
         $$0 = $871; //@line 47540
         continue;
        }
       }
       if ((label | 0) == 273) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 47547
        $$10 = 0; //@line 47548
        break L329;
       } else if ((label | 0) == 274) {
        $869 = ___cxa_find_matching_catch_2() | 0; //@line 47552
        $$5142 = $869; //@line 47554
        $$5148 = tempRet0; //@line 47554
        break L21;
       }
      }
     } while (0);
     $885 = HEAP32[$13 >> 2] | 0; //@line 47559
     $886 = HEAP32[$14 >> 2] | 0; //@line 47560
     if (($885 | 0) == ($886 | 0)) {
      $$10 = 1; //@line 47563
     } else {
      HEAP32[$25 >> 2] = 0; //@line 47565
      __THREW__ = 0; //@line 47566
      invoke_viiii(21, $19 | 0, $885 | 0, $886 | 0, $25 | 0); //@line 47567
      $888 = __THREW__; //@line 47568
      __THREW__ = 0; //@line 47568
      if ($888 & 1) {
       $894 = ___cxa_find_matching_catch_2() | 0; //@line 47571
       $$5142 = $894; //@line 47573
       $$5148 = tempRet0; //@line 47573
       break L21;
      }
      if (!(HEAP32[$25 >> 2] | 0)) {
       $$10 = 1; //@line 47579
       break;
      } else {
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 47584
       $$10 = 0; //@line 47585
       break;
      }
     }
    }
   } while (0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23); //@line 47591
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22); //@line 47592
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21); //@line 47593
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20); //@line 47594
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19); //@line 47595
   $896 = HEAP32[$13 >> 2] | 0; //@line 47596
   HEAP32[$13 >> 2] = 0; //@line 47597
   if ($896 | 0) {
    __THREW__ = 0; //@line 47601
    invoke_vi(HEAP32[$27 >> 2] | 0, $896 | 0); //@line 47602
    $899 = __THREW__; //@line 47603
    __THREW__ = 0; //@line 47603
    if ($899 & 1) {
     $901 = ___cxa_find_matching_catch_3(0) | 0; //@line 47606
     ___clang_call_terminate($901); //@line 47608
    }
   }
   STACKTOP = sp; //@line 47612
   return $$10 | 0; //@line 47612
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23); //@line 47615
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22); //@line 47616
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21); //@line 47617
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20); //@line 47618
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19); //@line 47619
 $903 = HEAP32[$13 >> 2] | 0; //@line 47620
 HEAP32[$13 >> 2] = 0; //@line 47621
 if ($903 | 0) {
  __THREW__ = 0; //@line 47625
  invoke_vi(HEAP32[$27 >> 2] | 0, $903 | 0); //@line 47626
  $906 = __THREW__; //@line 47627
  __THREW__ = 0; //@line 47627
  if ($906 & 1) {
   $908 = ___cxa_find_matching_catch_3(0) | 0; //@line 47630
   ___clang_call_terminate($908); //@line 47632
  }
 }
 ___resumeException($$5142 | 0); //@line 47636
 return 0; //@line 47638
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $752 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 2492
 STACKTOP = STACKTOP + 16 | 0; //@line 2493
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2493
 $1 = sp; //@line 2494
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 2501
   $7 = $6 >>> 3; //@line 2502
   $8 = HEAP32[8461] | 0; //@line 2503
   $9 = $8 >>> $7; //@line 2504
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 2510
    $16 = 33884 + ($14 << 1 << 2) | 0; //@line 2512
    $17 = $16 + 8 | 0; //@line 2513
    $18 = HEAP32[$17 >> 2] | 0; //@line 2514
    $19 = $18 + 8 | 0; //@line 2515
    $20 = HEAP32[$19 >> 2] | 0; //@line 2516
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[8461] = $8 & ~(1 << $14); //@line 2523
     } else {
      if ((HEAP32[8465] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 2528
      }
      $27 = $20 + 12 | 0; //@line 2531
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 2535
       HEAP32[$17 >> 2] = $20; //@line 2536
       break;
      } else {
       _abort(); //@line 2539
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 2544
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 2547
    $34 = $18 + $30 + 4 | 0; //@line 2549
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 2552
    $$0 = $19; //@line 2553
    STACKTOP = sp; //@line 2554
    return $$0 | 0; //@line 2554
   }
   $37 = HEAP32[8463] | 0; //@line 2556
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 2562
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 2565
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 2568
     $49 = $47 >>> 12 & 16; //@line 2570
     $50 = $47 >>> $49; //@line 2571
     $52 = $50 >>> 5 & 8; //@line 2573
     $54 = $50 >>> $52; //@line 2575
     $56 = $54 >>> 2 & 4; //@line 2577
     $58 = $54 >>> $56; //@line 2579
     $60 = $58 >>> 1 & 2; //@line 2581
     $62 = $58 >>> $60; //@line 2583
     $64 = $62 >>> 1 & 1; //@line 2585
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 2588
     $69 = 33884 + ($67 << 1 << 2) | 0; //@line 2590
     $70 = $69 + 8 | 0; //@line 2591
     $71 = HEAP32[$70 >> 2] | 0; //@line 2592
     $72 = $71 + 8 | 0; //@line 2593
     $73 = HEAP32[$72 >> 2] | 0; //@line 2594
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 2600
       HEAP32[8461] = $77; //@line 2601
       $98 = $77; //@line 2602
      } else {
       if ((HEAP32[8465] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 2607
       }
       $80 = $73 + 12 | 0; //@line 2610
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 2614
        HEAP32[$70 >> 2] = $73; //@line 2615
        $98 = $8; //@line 2616
        break;
       } else {
        _abort(); //@line 2619
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 2624
     $84 = $83 - $6 | 0; //@line 2625
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 2628
     $87 = $71 + $6 | 0; //@line 2629
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 2632
     HEAP32[$71 + $83 >> 2] = $84; //@line 2634
     if ($37 | 0) {
      $92 = HEAP32[8466] | 0; //@line 2637
      $93 = $37 >>> 3; //@line 2638
      $95 = 33884 + ($93 << 1 << 2) | 0; //@line 2640
      $96 = 1 << $93; //@line 2641
      if (!($98 & $96)) {
       HEAP32[8461] = $98 | $96; //@line 2646
       $$0199 = $95; //@line 2648
       $$pre$phiZ2D = $95 + 8 | 0; //@line 2648
      } else {
       $101 = $95 + 8 | 0; //@line 2650
       $102 = HEAP32[$101 >> 2] | 0; //@line 2651
       if ((HEAP32[8465] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 2655
       } else {
        $$0199 = $102; //@line 2658
        $$pre$phiZ2D = $101; //@line 2658
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 2661
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 2663
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 2665
      HEAP32[$92 + 12 >> 2] = $95; //@line 2667
     }
     HEAP32[8463] = $84; //@line 2669
     HEAP32[8466] = $87; //@line 2670
     $$0 = $72; //@line 2671
     STACKTOP = sp; //@line 2672
     return $$0 | 0; //@line 2672
    }
    $108 = HEAP32[8462] | 0; //@line 2674
    if (!$108) {
     $$0197 = $6; //@line 2677
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 2681
     $114 = $112 >>> 12 & 16; //@line 2683
     $115 = $112 >>> $114; //@line 2684
     $117 = $115 >>> 5 & 8; //@line 2686
     $119 = $115 >>> $117; //@line 2688
     $121 = $119 >>> 2 & 4; //@line 2690
     $123 = $119 >>> $121; //@line 2692
     $125 = $123 >>> 1 & 2; //@line 2694
     $127 = $123 >>> $125; //@line 2696
     $129 = $127 >>> 1 & 1; //@line 2698
     $134 = HEAP32[34148 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 2703
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 2707
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 2713
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 2716
      $$0193$lcssa$i = $138; //@line 2716
     } else {
      $$01926$i = $134; //@line 2718
      $$01935$i = $138; //@line 2718
      $146 = $143; //@line 2718
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 2723
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 2724
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 2725
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 2726
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 2732
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 2735
        $$0193$lcssa$i = $$$0193$i; //@line 2735
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 2738
        $$01935$i = $$$0193$i; //@line 2738
       }
      }
     }
     $157 = HEAP32[8465] | 0; //@line 2742
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 2745
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 2748
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 2751
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 2755
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 2757
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 2761
       $176 = HEAP32[$175 >> 2] | 0; //@line 2762
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 2765
        $179 = HEAP32[$178 >> 2] | 0; //@line 2766
        if (!$179) {
         $$3$i = 0; //@line 2769
         break;
        } else {
         $$1196$i = $179; //@line 2772
         $$1198$i = $178; //@line 2772
        }
       } else {
        $$1196$i = $176; //@line 2775
        $$1198$i = $175; //@line 2775
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 2778
        $182 = HEAP32[$181 >> 2] | 0; //@line 2779
        if ($182 | 0) {
         $$1196$i = $182; //@line 2782
         $$1198$i = $181; //@line 2782
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 2785
        $185 = HEAP32[$184 >> 2] | 0; //@line 2786
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 2791
         $$1198$i = $184; //@line 2791
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 2796
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 2799
        $$3$i = $$1196$i; //@line 2800
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 2805
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 2808
       }
       $169 = $167 + 12 | 0; //@line 2811
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 2815
       }
       $172 = $164 + 8 | 0; //@line 2818
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 2822
        HEAP32[$172 >> 2] = $167; //@line 2823
        $$3$i = $164; //@line 2824
        break;
       } else {
        _abort(); //@line 2827
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 2836
       $191 = 34148 + ($190 << 2) | 0; //@line 2837
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 2842
         if (!$$3$i) {
          HEAP32[8462] = $108 & ~(1 << $190); //@line 2848
          break L73;
         }
        } else {
         if ((HEAP32[8465] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 2855
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 2863
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[8465] | 0; //@line 2873
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 2876
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 2880
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 2882
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 2888
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 2892
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 2894
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 2900
       if ($214 | 0) {
        if ((HEAP32[8465] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 2906
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 2910
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 2912
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 2920
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 2923
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 2925
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 2928
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 2932
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 2935
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 2937
      if ($37 | 0) {
       $234 = HEAP32[8466] | 0; //@line 2940
       $235 = $37 >>> 3; //@line 2941
       $237 = 33884 + ($235 << 1 << 2) | 0; //@line 2943
       $238 = 1 << $235; //@line 2944
       if (!($8 & $238)) {
        HEAP32[8461] = $8 | $238; //@line 2949
        $$0189$i = $237; //@line 2951
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 2951
       } else {
        $242 = $237 + 8 | 0; //@line 2953
        $243 = HEAP32[$242 >> 2] | 0; //@line 2954
        if ((HEAP32[8465] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 2958
        } else {
         $$0189$i = $243; //@line 2961
         $$pre$phi$iZ2D = $242; //@line 2961
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 2964
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 2966
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 2968
       HEAP32[$234 + 12 >> 2] = $237; //@line 2970
      }
      HEAP32[8463] = $$0193$lcssa$i; //@line 2972
      HEAP32[8466] = $159; //@line 2973
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 2976
     STACKTOP = sp; //@line 2977
     return $$0 | 0; //@line 2977
    }
   } else {
    $$0197 = $6; //@line 2980
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 2985
   } else {
    $251 = $0 + 11 | 0; //@line 2987
    $252 = $251 & -8; //@line 2988
    $253 = HEAP32[8462] | 0; //@line 2989
    if (!$253) {
     $$0197 = $252; //@line 2992
    } else {
     $255 = 0 - $252 | 0; //@line 2994
     $256 = $251 >>> 8; //@line 2995
     if (!$256) {
      $$0358$i = 0; //@line 2998
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 3002
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 3006
       $262 = $256 << $261; //@line 3007
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 3010
       $267 = $262 << $265; //@line 3012
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 3015
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 3020
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 3026
      }
     }
     $282 = HEAP32[34148 + ($$0358$i << 2) >> 2] | 0; //@line 3030
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 3034
       $$3$i203 = 0; //@line 3034
       $$3350$i = $255; //@line 3034
       label = 81; //@line 3035
      } else {
       $$0342$i = 0; //@line 3042
       $$0347$i = $255; //@line 3042
       $$0353$i = $282; //@line 3042
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 3042
       $$0362$i = 0; //@line 3042
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 3047
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 3052
          $$435113$i = 0; //@line 3052
          $$435712$i = $$0353$i; //@line 3052
          label = 85; //@line 3053
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 3056
          $$1348$i = $292; //@line 3056
         }
        } else {
         $$1343$i = $$0342$i; //@line 3059
         $$1348$i = $$0347$i; //@line 3059
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 3062
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 3065
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 3069
        $302 = ($$0353$i | 0) == 0; //@line 3070
        if ($302) {
         $$2355$i = $$1363$i; //@line 3075
         $$3$i203 = $$1343$i; //@line 3075
         $$3350$i = $$1348$i; //@line 3075
         label = 81; //@line 3076
         break;
        } else {
         $$0342$i = $$1343$i; //@line 3079
         $$0347$i = $$1348$i; //@line 3079
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 3079
         $$0362$i = $$1363$i; //@line 3079
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 3089
       $309 = $253 & ($306 | 0 - $306); //@line 3092
       if (!$309) {
        $$0197 = $252; //@line 3095
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 3100
       $315 = $313 >>> 12 & 16; //@line 3102
       $316 = $313 >>> $315; //@line 3103
       $318 = $316 >>> 5 & 8; //@line 3105
       $320 = $316 >>> $318; //@line 3107
       $322 = $320 >>> 2 & 4; //@line 3109
       $324 = $320 >>> $322; //@line 3111
       $326 = $324 >>> 1 & 2; //@line 3113
       $328 = $324 >>> $326; //@line 3115
       $330 = $328 >>> 1 & 1; //@line 3117
       $$4$ph$i = 0; //@line 3123
       $$4357$ph$i = HEAP32[34148 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 3123
      } else {
       $$4$ph$i = $$3$i203; //@line 3125
       $$4357$ph$i = $$2355$i; //@line 3125
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 3129
       $$4351$lcssa$i = $$3350$i; //@line 3129
      } else {
       $$414$i = $$4$ph$i; //@line 3131
       $$435113$i = $$3350$i; //@line 3131
       $$435712$i = $$4357$ph$i; //@line 3131
       label = 85; //@line 3132
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 3137
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 3141
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 3142
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 3143
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 3144
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 3150
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 3153
        $$4351$lcssa$i = $$$4351$i; //@line 3153
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 3156
        $$435113$i = $$$4351$i; //@line 3156
        label = 85; //@line 3157
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 3163
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[8463] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[8465] | 0; //@line 3169
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 3172
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 3175
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 3178
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 3182
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 3184
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 3188
         $371 = HEAP32[$370 >> 2] | 0; //@line 3189
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 3192
          $374 = HEAP32[$373 >> 2] | 0; //@line 3193
          if (!$374) {
           $$3372$i = 0; //@line 3196
           break;
          } else {
           $$1370$i = $374; //@line 3199
           $$1374$i = $373; //@line 3199
          }
         } else {
          $$1370$i = $371; //@line 3202
          $$1374$i = $370; //@line 3202
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 3205
          $377 = HEAP32[$376 >> 2] | 0; //@line 3206
          if ($377 | 0) {
           $$1370$i = $377; //@line 3209
           $$1374$i = $376; //@line 3209
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 3212
          $380 = HEAP32[$379 >> 2] | 0; //@line 3213
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 3218
           $$1374$i = $379; //@line 3218
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 3223
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 3226
          $$3372$i = $$1370$i; //@line 3227
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 3232
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 3235
         }
         $364 = $362 + 12 | 0; //@line 3238
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 3242
         }
         $367 = $359 + 8 | 0; //@line 3245
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 3249
          HEAP32[$367 >> 2] = $362; //@line 3250
          $$3372$i = $359; //@line 3251
          break;
         } else {
          _abort(); //@line 3254
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 3262
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 3265
         $386 = 34148 + ($385 << 2) | 0; //@line 3266
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 3271
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 3276
            HEAP32[8462] = $391; //@line 3277
            $475 = $391; //@line 3278
            break L164;
           }
          } else {
           if ((HEAP32[8465] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 3285
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 3293
            if (!$$3372$i) {
             $475 = $253; //@line 3296
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[8465] | 0; //@line 3304
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 3307
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 3311
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 3313
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 3319
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 3323
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 3325
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 3331
         if (!$409) {
          $475 = $253; //@line 3334
         } else {
          if ((HEAP32[8465] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 3339
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 3343
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 3345
           $475 = $253; //@line 3346
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 3355
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 3358
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 3360
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 3363
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 3367
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 3370
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 3372
         $428 = $$4351$lcssa$i >>> 3; //@line 3373
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 33884 + ($428 << 1 << 2) | 0; //@line 3377
          $432 = HEAP32[8461] | 0; //@line 3378
          $433 = 1 << $428; //@line 3379
          if (!($432 & $433)) {
           HEAP32[8461] = $432 | $433; //@line 3384
           $$0368$i = $431; //@line 3386
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 3386
          } else {
           $437 = $431 + 8 | 0; //@line 3388
           $438 = HEAP32[$437 >> 2] | 0; //@line 3389
           if ((HEAP32[8465] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 3393
           } else {
            $$0368$i = $438; //@line 3396
            $$pre$phi$i211Z2D = $437; //@line 3396
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 3399
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 3401
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 3403
          HEAP32[$354 + 12 >> 2] = $431; //@line 3405
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 3408
         if (!$444) {
          $$0361$i = 0; //@line 3411
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 3415
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 3419
           $450 = $444 << $449; //@line 3420
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 3423
           $455 = $450 << $453; //@line 3425
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 3428
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 3433
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 3439
          }
         }
         $469 = 34148 + ($$0361$i << 2) | 0; //@line 3442
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 3444
         $471 = $354 + 16 | 0; //@line 3445
         HEAP32[$471 + 4 >> 2] = 0; //@line 3447
         HEAP32[$471 >> 2] = 0; //@line 3448
         $473 = 1 << $$0361$i; //@line 3449
         if (!($475 & $473)) {
          HEAP32[8462] = $475 | $473; //@line 3454
          HEAP32[$469 >> 2] = $354; //@line 3455
          HEAP32[$354 + 24 >> 2] = $469; //@line 3457
          HEAP32[$354 + 12 >> 2] = $354; //@line 3459
          HEAP32[$354 + 8 >> 2] = $354; //@line 3461
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 3470
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 3470
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 3477
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 3481
          $494 = HEAP32[$492 >> 2] | 0; //@line 3483
          if (!$494) {
           label = 136; //@line 3486
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 3489
           $$0345$i = $494; //@line 3489
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[8465] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 3496
          } else {
           HEAP32[$492 >> 2] = $354; //@line 3499
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 3501
           HEAP32[$354 + 12 >> 2] = $354; //@line 3503
           HEAP32[$354 + 8 >> 2] = $354; //@line 3505
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 3510
          $502 = HEAP32[$501 >> 2] | 0; //@line 3511
          $503 = HEAP32[8465] | 0; //@line 3512
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 3518
           HEAP32[$501 >> 2] = $354; //@line 3519
           HEAP32[$354 + 8 >> 2] = $502; //@line 3521
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 3523
           HEAP32[$354 + 24 >> 2] = 0; //@line 3525
           break;
          } else {
           _abort(); //@line 3528
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 3535
       STACKTOP = sp; //@line 3536
       return $$0 | 0; //@line 3536
      } else {
       $$0197 = $252; //@line 3538
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[8463] | 0; //@line 3545
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 3548
  $515 = HEAP32[8466] | 0; //@line 3549
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 3552
   HEAP32[8466] = $517; //@line 3553
   HEAP32[8463] = $514; //@line 3554
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 3557
   HEAP32[$515 + $512 >> 2] = $514; //@line 3559
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 3562
  } else {
   HEAP32[8463] = 0; //@line 3564
   HEAP32[8466] = 0; //@line 3565
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 3568
   $526 = $515 + $512 + 4 | 0; //@line 3570
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 3573
  }
  $$0 = $515 + 8 | 0; //@line 3576
  STACKTOP = sp; //@line 3577
  return $$0 | 0; //@line 3577
 }
 $530 = HEAP32[8464] | 0; //@line 3579
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 3582
  HEAP32[8464] = $532; //@line 3583
  $533 = HEAP32[8467] | 0; //@line 3584
  $534 = $533 + $$0197 | 0; //@line 3585
  HEAP32[8467] = $534; //@line 3586
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 3589
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 3592
  $$0 = $533 + 8 | 0; //@line 3594
  STACKTOP = sp; //@line 3595
  return $$0 | 0; //@line 3595
 }
 if (!(HEAP32[8579] | 0)) {
  HEAP32[8581] = 4096; //@line 3600
  HEAP32[8580] = 4096; //@line 3601
  HEAP32[8582] = -1; //@line 3602
  HEAP32[8583] = -1; //@line 3603
  HEAP32[8584] = 0; //@line 3604
  HEAP32[8572] = 0; //@line 3605
  HEAP32[8579] = $1 & -16 ^ 1431655768; //@line 3609
  $548 = 4096; //@line 3610
 } else {
  $548 = HEAP32[8581] | 0; //@line 3613
 }
 $545 = $$0197 + 48 | 0; //@line 3615
 $546 = $$0197 + 47 | 0; //@line 3616
 $547 = $548 + $546 | 0; //@line 3617
 $549 = 0 - $548 | 0; //@line 3618
 $550 = $547 & $549; //@line 3619
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 3622
  STACKTOP = sp; //@line 3623
  return $$0 | 0; //@line 3623
 }
 $552 = HEAP32[8571] | 0; //@line 3625
 if ($552 | 0) {
  $554 = HEAP32[8569] | 0; //@line 3628
  $555 = $554 + $550 | 0; //@line 3629
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 3634
   STACKTOP = sp; //@line 3635
   return $$0 | 0; //@line 3635
  }
 }
 L244 : do {
  if (!(HEAP32[8572] & 4)) {
   $561 = HEAP32[8467] | 0; //@line 3643
   L246 : do {
    if (!$561) {
     label = 163; //@line 3647
    } else {
     $$0$i$i = 34292; //@line 3649
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 3651
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 3654
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 3663
      if (!$570) {
       label = 163; //@line 3666
       break L246;
      } else {
       $$0$i$i = $570; //@line 3669
      }
     }
     $595 = $547 - $530 & $549; //@line 3673
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 3676
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 3684
       } else {
        $$723947$i = $595; //@line 3686
        $$748$i = $597; //@line 3686
        label = 180; //@line 3687
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 3691
       $$2253$ph$i = $595; //@line 3691
       label = 171; //@line 3692
      }
     } else {
      $$2234243136$i = 0; //@line 3695
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 3701
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 3704
     } else {
      $574 = $572; //@line 3706
      $575 = HEAP32[8580] | 0; //@line 3707
      $576 = $575 + -1 | 0; //@line 3708
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 3716
      $584 = HEAP32[8569] | 0; //@line 3717
      $585 = $$$i + $584 | 0; //@line 3718
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[8571] | 0; //@line 3723
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 3730
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 3734
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 3737
        $$748$i = $572; //@line 3737
        label = 180; //@line 3738
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 3741
        $$2253$ph$i = $$$i; //@line 3741
        label = 171; //@line 3742
       }
      } else {
       $$2234243136$i = 0; //@line 3745
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 3752
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 3761
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 3764
       $$748$i = $$2247$ph$i; //@line 3764
       label = 180; //@line 3765
       break L244;
      }
     }
     $607 = HEAP32[8581] | 0; //@line 3769
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 3773
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 3776
      $$748$i = $$2247$ph$i; //@line 3776
      label = 180; //@line 3777
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 3783
      $$2234243136$i = 0; //@line 3784
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 3788
      $$748$i = $$2247$ph$i; //@line 3788
      label = 180; //@line 3789
      break L244;
     }
    }
   } while (0);
   HEAP32[8572] = HEAP32[8572] | 4; //@line 3796
   $$4236$i = $$2234243136$i; //@line 3797
   label = 178; //@line 3798
  } else {
   $$4236$i = 0; //@line 3800
   label = 178; //@line 3801
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 3807
   $621 = _sbrk(0) | 0; //@line 3808
   $627 = $621 - $620 | 0; //@line 3816
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 3818
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 3826
    $$748$i = $620; //@line 3826
    label = 180; //@line 3827
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[8569] | 0) + $$723947$i | 0; //@line 3833
  HEAP32[8569] = $633; //@line 3834
  if ($633 >>> 0 > (HEAP32[8570] | 0) >>> 0) {
   HEAP32[8570] = $633; //@line 3838
  }
  $636 = HEAP32[8467] | 0; //@line 3840
  do {
   if (!$636) {
    $638 = HEAP32[8465] | 0; //@line 3844
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[8465] = $$748$i; //@line 3849
    }
    HEAP32[8573] = $$748$i; //@line 3851
    HEAP32[8574] = $$723947$i; //@line 3852
    HEAP32[8576] = 0; //@line 3853
    HEAP32[8470] = HEAP32[8579]; //@line 3855
    HEAP32[8469] = -1; //@line 3856
    HEAP32[8474] = 33884; //@line 3857
    HEAP32[8473] = 33884; //@line 3858
    HEAP32[8476] = 33892; //@line 3859
    HEAP32[8475] = 33892; //@line 3860
    HEAP32[8478] = 33900; //@line 3861
    HEAP32[8477] = 33900; //@line 3862
    HEAP32[8480] = 33908; //@line 3863
    HEAP32[8479] = 33908; //@line 3864
    HEAP32[8482] = 33916; //@line 3865
    HEAP32[8481] = 33916; //@line 3866
    HEAP32[8484] = 33924; //@line 3867
    HEAP32[8483] = 33924; //@line 3868
    HEAP32[8486] = 33932; //@line 3869
    HEAP32[8485] = 33932; //@line 3870
    HEAP32[8488] = 33940; //@line 3871
    HEAP32[8487] = 33940; //@line 3872
    HEAP32[8490] = 33948; //@line 3873
    HEAP32[8489] = 33948; //@line 3874
    HEAP32[8492] = 33956; //@line 3875
    HEAP32[8491] = 33956; //@line 3876
    HEAP32[8494] = 33964; //@line 3877
    HEAP32[8493] = 33964; //@line 3878
    HEAP32[8496] = 33972; //@line 3879
    HEAP32[8495] = 33972; //@line 3880
    HEAP32[8498] = 33980; //@line 3881
    HEAP32[8497] = 33980; //@line 3882
    HEAP32[8500] = 33988; //@line 3883
    HEAP32[8499] = 33988; //@line 3884
    HEAP32[8502] = 33996; //@line 3885
    HEAP32[8501] = 33996; //@line 3886
    HEAP32[8504] = 34004; //@line 3887
    HEAP32[8503] = 34004; //@line 3888
    HEAP32[8506] = 34012; //@line 3889
    HEAP32[8505] = 34012; //@line 3890
    HEAP32[8508] = 34020; //@line 3891
    HEAP32[8507] = 34020; //@line 3892
    HEAP32[8510] = 34028; //@line 3893
    HEAP32[8509] = 34028; //@line 3894
    HEAP32[8512] = 34036; //@line 3895
    HEAP32[8511] = 34036; //@line 3896
    HEAP32[8514] = 34044; //@line 3897
    HEAP32[8513] = 34044; //@line 3898
    HEAP32[8516] = 34052; //@line 3899
    HEAP32[8515] = 34052; //@line 3900
    HEAP32[8518] = 34060; //@line 3901
    HEAP32[8517] = 34060; //@line 3902
    HEAP32[8520] = 34068; //@line 3903
    HEAP32[8519] = 34068; //@line 3904
    HEAP32[8522] = 34076; //@line 3905
    HEAP32[8521] = 34076; //@line 3906
    HEAP32[8524] = 34084; //@line 3907
    HEAP32[8523] = 34084; //@line 3908
    HEAP32[8526] = 34092; //@line 3909
    HEAP32[8525] = 34092; //@line 3910
    HEAP32[8528] = 34100; //@line 3911
    HEAP32[8527] = 34100; //@line 3912
    HEAP32[8530] = 34108; //@line 3913
    HEAP32[8529] = 34108; //@line 3914
    HEAP32[8532] = 34116; //@line 3915
    HEAP32[8531] = 34116; //@line 3916
    HEAP32[8534] = 34124; //@line 3917
    HEAP32[8533] = 34124; //@line 3918
    HEAP32[8536] = 34132; //@line 3919
    HEAP32[8535] = 34132; //@line 3920
    $642 = $$723947$i + -40 | 0; //@line 3921
    $644 = $$748$i + 8 | 0; //@line 3923
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 3928
    $650 = $$748$i + $649 | 0; //@line 3929
    $651 = $642 - $649 | 0; //@line 3930
    HEAP32[8467] = $650; //@line 3931
    HEAP32[8464] = $651; //@line 3932
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 3935
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 3938
    HEAP32[8468] = HEAP32[8583]; //@line 3940
   } else {
    $$024367$i = 34292; //@line 3942
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 3944
     $658 = $$024367$i + 4 | 0; //@line 3945
     $659 = HEAP32[$658 >> 2] | 0; //@line 3946
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 3950
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 3954
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 3959
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 3973
       $673 = (HEAP32[8464] | 0) + $$723947$i | 0; //@line 3975
       $675 = $636 + 8 | 0; //@line 3977
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 3982
       $681 = $636 + $680 | 0; //@line 3983
       $682 = $673 - $680 | 0; //@line 3984
       HEAP32[8467] = $681; //@line 3985
       HEAP32[8464] = $682; //@line 3986
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 3989
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 3992
       HEAP32[8468] = HEAP32[8583]; //@line 3994
       break;
      }
     }
    }
    $688 = HEAP32[8465] | 0; //@line 3999
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[8465] = $$748$i; //@line 4002
     $752 = $$748$i; //@line 4003
    } else {
     $752 = $688; //@line 4005
    }
    $690 = $$748$i + $$723947$i | 0; //@line 4007
    $$124466$i = 34292; //@line 4008
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 4013
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 4017
     if (!$694) {
      $$0$i$i$i = 34292; //@line 4020
      break;
     } else {
      $$124466$i = $694; //@line 4023
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 4032
      $700 = $$124466$i + 4 | 0; //@line 4033
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 4036
      $704 = $$748$i + 8 | 0; //@line 4038
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 4044
      $712 = $690 + 8 | 0; //@line 4046
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 4052
      $722 = $710 + $$0197 | 0; //@line 4056
      $723 = $718 - $710 - $$0197 | 0; //@line 4057
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 4060
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[8464] | 0) + $723 | 0; //@line 4065
        HEAP32[8464] = $728; //@line 4066
        HEAP32[8467] = $722; //@line 4067
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 4070
       } else {
        if ((HEAP32[8466] | 0) == ($718 | 0)) {
         $734 = (HEAP32[8463] | 0) + $723 | 0; //@line 4076
         HEAP32[8463] = $734; //@line 4077
         HEAP32[8466] = $722; //@line 4078
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 4081
         HEAP32[$722 + $734 >> 2] = $734; //@line 4083
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 4087
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 4091
         $743 = $739 >>> 3; //@line 4092
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 4097
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 4099
           $750 = 33884 + ($743 << 1 << 2) | 0; //@line 4101
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($752 >>> 0 > $746 >>> 0) {
              _abort(); //@line 4107
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 4116
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[8461] = HEAP32[8461] & ~(1 << $743); //@line 4126
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 4133
            } else {
             if ($752 >>> 0 > $748 >>> 0) {
              _abort(); //@line 4137
             }
             $764 = $748 + 8 | 0; //@line 4140
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 4144
              break;
             }
             _abort(); //@line 4147
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 4152
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 4153
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 4156
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 4158
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 4162
             $783 = $782 + 4 | 0; //@line 4163
             $784 = HEAP32[$783 >> 2] | 0; //@line 4164
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 4167
              if (!$786) {
               $$3$i$i = 0; //@line 4170
               break;
              } else {
               $$1291$i$i = $786; //@line 4173
               $$1293$i$i = $782; //@line 4173
              }
             } else {
              $$1291$i$i = $784; //@line 4176
              $$1293$i$i = $783; //@line 4176
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 4179
              $789 = HEAP32[$788 >> 2] | 0; //@line 4180
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 4183
               $$1293$i$i = $788; //@line 4183
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 4186
              $792 = HEAP32[$791 >> 2] | 0; //@line 4187
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 4192
               $$1293$i$i = $791; //@line 4192
              }
             }
             if ($752 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 4197
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 4200
              $$3$i$i = $$1291$i$i; //@line 4201
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 4206
             if ($752 >>> 0 > $774 >>> 0) {
              _abort(); //@line 4209
             }
             $776 = $774 + 12 | 0; //@line 4212
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 4216
             }
             $779 = $771 + 8 | 0; //@line 4219
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 4223
              HEAP32[$779 >> 2] = $774; //@line 4224
              $$3$i$i = $771; //@line 4225
              break;
             } else {
              _abort(); //@line 4228
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 4238
           $798 = 34148 + ($797 << 2) | 0; //@line 4239
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 4244
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[8462] = HEAP32[8462] & ~(1 << $797); //@line 4253
             break L311;
            } else {
             if ((HEAP32[8465] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 4259
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 4267
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[8465] | 0; //@line 4277
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 4280
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 4284
           $815 = $718 + 16 | 0; //@line 4285
           $816 = HEAP32[$815 >> 2] | 0; //@line 4286
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 4292
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 4296
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 4298
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 4304
           if (!$822) {
            break;
           }
           if ((HEAP32[8465] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 4312
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 4316
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 4318
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 4325
         $$0287$i$i = $742 + $723 | 0; //@line 4325
        } else {
         $$0$i17$i = $718; //@line 4327
         $$0287$i$i = $723; //@line 4327
        }
        $830 = $$0$i17$i + 4 | 0; //@line 4329
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 4332
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 4335
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 4337
        $836 = $$0287$i$i >>> 3; //@line 4338
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 33884 + ($836 << 1 << 2) | 0; //@line 4342
         $840 = HEAP32[8461] | 0; //@line 4343
         $841 = 1 << $836; //@line 4344
         do {
          if (!($840 & $841)) {
           HEAP32[8461] = $840 | $841; //@line 4350
           $$0295$i$i = $839; //@line 4352
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 4352
          } else {
           $845 = $839 + 8 | 0; //@line 4354
           $846 = HEAP32[$845 >> 2] | 0; //@line 4355
           if ((HEAP32[8465] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 4359
            $$pre$phi$i19$iZ2D = $845; //@line 4359
            break;
           }
           _abort(); //@line 4362
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 4366
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 4368
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 4370
         HEAP32[$722 + 12 >> 2] = $839; //@line 4372
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 4375
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 4379
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 4383
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 4388
          $858 = $852 << $857; //@line 4389
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 4392
          $863 = $858 << $861; //@line 4394
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 4397
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 4402
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 4408
         }
        } while (0);
        $877 = 34148 + ($$0296$i$i << 2) | 0; //@line 4411
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 4413
        $879 = $722 + 16 | 0; //@line 4414
        HEAP32[$879 + 4 >> 2] = 0; //@line 4416
        HEAP32[$879 >> 2] = 0; //@line 4417
        $881 = HEAP32[8462] | 0; //@line 4418
        $882 = 1 << $$0296$i$i; //@line 4419
        if (!($881 & $882)) {
         HEAP32[8462] = $881 | $882; //@line 4424
         HEAP32[$877 >> 2] = $722; //@line 4425
         HEAP32[$722 + 24 >> 2] = $877; //@line 4427
         HEAP32[$722 + 12 >> 2] = $722; //@line 4429
         HEAP32[$722 + 8 >> 2] = $722; //@line 4431
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 4440
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 4440
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 4447
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 4451
         $902 = HEAP32[$900 >> 2] | 0; //@line 4453
         if (!$902) {
          label = 260; //@line 4456
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 4459
          $$0289$i$i = $902; //@line 4459
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[8465] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 4466
         } else {
          HEAP32[$900 >> 2] = $722; //@line 4469
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 4471
          HEAP32[$722 + 12 >> 2] = $722; //@line 4473
          HEAP32[$722 + 8 >> 2] = $722; //@line 4475
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 4480
         $910 = HEAP32[$909 >> 2] | 0; //@line 4481
         $911 = HEAP32[8465] | 0; //@line 4482
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 4488
          HEAP32[$909 >> 2] = $722; //@line 4489
          HEAP32[$722 + 8 >> 2] = $910; //@line 4491
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 4493
          HEAP32[$722 + 24 >> 2] = 0; //@line 4495
          break;
         } else {
          _abort(); //@line 4498
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 4505
      STACKTOP = sp; //@line 4506
      return $$0 | 0; //@line 4506
     } else {
      $$0$i$i$i = 34292; //@line 4508
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 4512
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 4517
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 4525
    }
    $927 = $923 + -47 | 0; //@line 4527
    $929 = $927 + 8 | 0; //@line 4529
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 4535
    $936 = $636 + 16 | 0; //@line 4536
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 4538
    $939 = $938 + 8 | 0; //@line 4539
    $940 = $938 + 24 | 0; //@line 4540
    $941 = $$723947$i + -40 | 0; //@line 4541
    $943 = $$748$i + 8 | 0; //@line 4543
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 4548
    $949 = $$748$i + $948 | 0; //@line 4549
    $950 = $941 - $948 | 0; //@line 4550
    HEAP32[8467] = $949; //@line 4551
    HEAP32[8464] = $950; //@line 4552
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 4555
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 4558
    HEAP32[8468] = HEAP32[8583]; //@line 4560
    $956 = $938 + 4 | 0; //@line 4561
    HEAP32[$956 >> 2] = 27; //@line 4562
    HEAP32[$939 >> 2] = HEAP32[8573]; //@line 4563
    HEAP32[$939 + 4 >> 2] = HEAP32[8574]; //@line 4563
    HEAP32[$939 + 8 >> 2] = HEAP32[8575]; //@line 4563
    HEAP32[$939 + 12 >> 2] = HEAP32[8576]; //@line 4563
    HEAP32[8573] = $$748$i; //@line 4564
    HEAP32[8574] = $$723947$i; //@line 4565
    HEAP32[8576] = 0; //@line 4566
    HEAP32[8575] = $939; //@line 4567
    $958 = $940; //@line 4568
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 4570
     HEAP32[$958 >> 2] = 7; //@line 4571
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 4584
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 4587
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 4590
     HEAP32[$938 >> 2] = $964; //@line 4591
     $969 = $964 >>> 3; //@line 4592
     if ($964 >>> 0 < 256) {
      $972 = 33884 + ($969 << 1 << 2) | 0; //@line 4596
      $973 = HEAP32[8461] | 0; //@line 4597
      $974 = 1 << $969; //@line 4598
      if (!($973 & $974)) {
       HEAP32[8461] = $973 | $974; //@line 4603
       $$0211$i$i = $972; //@line 4605
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 4605
      } else {
       $978 = $972 + 8 | 0; //@line 4607
       $979 = HEAP32[$978 >> 2] | 0; //@line 4608
       if ((HEAP32[8465] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 4612
       } else {
        $$0211$i$i = $979; //@line 4615
        $$pre$phi$i$iZ2D = $978; //@line 4615
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 4618
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 4620
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 4622
      HEAP32[$636 + 12 >> 2] = $972; //@line 4624
      break;
     }
     $985 = $964 >>> 8; //@line 4627
     if (!$985) {
      $$0212$i$i = 0; //@line 4630
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 4634
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 4638
       $991 = $985 << $990; //@line 4639
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 4642
       $996 = $991 << $994; //@line 4644
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 4647
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 4652
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 4658
      }
     }
     $1010 = 34148 + ($$0212$i$i << 2) | 0; //@line 4661
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 4663
     HEAP32[$636 + 20 >> 2] = 0; //@line 4665
     HEAP32[$936 >> 2] = 0; //@line 4666
     $1013 = HEAP32[8462] | 0; //@line 4667
     $1014 = 1 << $$0212$i$i; //@line 4668
     if (!($1013 & $1014)) {
      HEAP32[8462] = $1013 | $1014; //@line 4673
      HEAP32[$1010 >> 2] = $636; //@line 4674
      HEAP32[$636 + 24 >> 2] = $1010; //@line 4676
      HEAP32[$636 + 12 >> 2] = $636; //@line 4678
      HEAP32[$636 + 8 >> 2] = $636; //@line 4680
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 4689
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 4689
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 4696
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 4700
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 4702
      if (!$1034) {
       label = 286; //@line 4705
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 4708
       $$0207$i$i = $1034; //@line 4708
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[8465] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 4715
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 4718
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 4720
       HEAP32[$636 + 12 >> 2] = $636; //@line 4722
       HEAP32[$636 + 8 >> 2] = $636; //@line 4724
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 4729
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 4730
      $1043 = HEAP32[8465] | 0; //@line 4731
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 4737
       HEAP32[$1041 >> 2] = $636; //@line 4738
       HEAP32[$636 + 8 >> 2] = $1042; //@line 4740
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 4742
       HEAP32[$636 + 24 >> 2] = 0; //@line 4744
       break;
      } else {
       _abort(); //@line 4747
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[8464] | 0; //@line 4754
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 4757
   HEAP32[8464] = $1054; //@line 4758
   $1055 = HEAP32[8467] | 0; //@line 4759
   $1056 = $1055 + $$0197 | 0; //@line 4760
   HEAP32[8467] = $1056; //@line 4761
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 4764
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 4767
   $$0 = $1055 + 8 | 0; //@line 4769
   STACKTOP = sp; //@line 4770
   return $$0 | 0; //@line 4770
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 4774
 $$0 = 0; //@line 4775
 STACKTOP = sp; //@line 4776
 return $$0 | 0; //@line 4776
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i18$i$i$i$i = 0, $$1$i$i$i = 0, $$19$i$i$i = 0, $$2$i$i$i = 0, $$210$i$i$i = 0, $$3$i$i$i = 0, $$311$i$i$i = 0, $$4$i$i$i = 0, $$412$i$i$i = 0, $$byval_copy20 = 0, $$sroa$0$0$$sroa_idx$i$i$i = 0, $$val = 0, $$val3 = 0, $10 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $116 = 0, $118 = 0, $119 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $150 = 0, $152 = 0, $153 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $178 = 0, $180 = 0, $181 = 0, $186 = 0, $187 = 0, $189 = 0, $190 = 0, $192 = 0, $193 = 0, $198 = 0, $199 = 0, $20 = 0, $201 = 0, $202 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $211 = 0, $213 = 0, $214 = 0, $219 = 0, $221 = 0, $222 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $234 = 0, $235 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $248 = 0, $255 = 0, $26 = 0, $27 = 0, $271 = 0, $272 = 0, $274 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $283 = 0, $285 = 0, $290 = 0, $295 = 0, $296 = 0, $298 = 0, $299 = 0, $3 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $308 = 0, $310 = 0, $315 = 0, $32 = 0, $320 = 0, $321 = 0, $323 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $332 = 0, $334 = 0, $335 = 0, $340 = 0, $341 = 0, $342 = 0, $347 = 0, $348 = 0, $350 = 0, $351 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $36 = 0, $360 = 0, $362 = 0, $363 = 0, $368 = 0, $369 = 0, $37 = 0, $38 = 0, $384 = 0, $385 = 0, $387 = 0, $388 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $397 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $409 = 0, $41 = 0, $410 = 0, $412 = 0, $413 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $42 = 0, $422 = 0, $424 = 0, $425 = 0, $430 = 0, $435 = 0, $436 = 0, $438 = 0, $439 = 0, $44 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $448 = 0, $450 = 0, $451 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $98 = 0, $eh$lpad$body$i$i$i$index5Z2D = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18313
 STACKTOP = STACKTOP + 496 | 0; //@line 18314
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(496); //@line 18314
 $$byval_copy20 = sp + 489 | 0; //@line 18315
 $3 = sp + 488 | 0; //@line 18316
 $4 = sp + 360 | 0; //@line 18317
 $5 = sp + 288 | 0; //@line 18318
 $6 = sp + 216 | 0; //@line 18319
 $7 = sp + 460 | 0; //@line 18320
 $8 = sp + 144 | 0; //@line 18321
 $9 = sp + 72 | 0; //@line 18322
 $10 = sp; //@line 18323
 $11 = sp + 432 | 0; //@line 18324
 $$val = HEAP32[$1 >> 2] | 0; //@line 18325
 $$val3 = HEAP32[$2 >> 2] | 0; //@line 18326
 __ZN5Stack3popEv($4, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 18328
 __THREW__ = 0; //@line 18329
 $13 = invoke_ii(143, $$val | 0) | 0; //@line 18330
 $14 = __THREW__; //@line 18331
 __THREW__ = 0; //@line 18331
 if ($14 & 1) {
  label = 6; //@line 18334
 } else {
  __THREW__ = 0; //@line 18336
  invoke_vii(131, $5 | 0, $13 | 0); //@line 18337
  $16 = __THREW__; //@line 18338
  __THREW__ = 0; //@line 18338
  if ($16 & 1) {
   label = 6; //@line 18341
  } else {
   do {
    if ((HEAP32[$5 >> 2] | 0) == 3) {
     if ((HEAP32[$4 >> 2] | 0) != 1) {
      $32 = ___cxa_allocate_exception(8) | 0; //@line 18350
      __THREW__ = 0; //@line 18351
      invoke_vii(125, $32 | 0, 19870); //@line 18352
      $33 = __THREW__; //@line 18353
      __THREW__ = 0; //@line 18353
      if ($33 & 1) {
       $36 = ___cxa_find_matching_catch_2() | 0; //@line 18356
       $37 = tempRet0; //@line 18357
       ___cxa_free_exception($32 | 0); //@line 18358
       $$3$i$i$i = $36; //@line 18359
       $$311$i$i$i = $37; //@line 18359
       break;
      } else {
       __THREW__ = 0; //@line 18362
       invoke_viii(16, $32 | 0, 2824, 242); //@line 18363
       __THREW__ = 0; //@line 18364
       label = 8; //@line 18365
       break;
      }
     }
     $38 = $6 + 4 | 0; //@line 18369
     $39 = $6 + 40 | 0; //@line 18370
     HEAP32[$39 >> 2] = 0; //@line 18371
     HEAP32[$39 + 4 >> 2] = 0; //@line 18371
     HEAP32[$39 + 8 >> 2] = 0; //@line 18371
     HEAP32[$39 + 12 >> 2] = 0; //@line 18371
     HEAP32[$39 + 16 >> 2] = 0; //@line 18371
     HEAP32[$39 + 20 >> 2] = 0; //@line 18371
     $40 = $5 + 4 | 0; //@line 18372
     $41 = $6 + 52 | 0; //@line 18373
     HEAP32[$6 >> 2] = 0; //@line 18374
     HEAP32[$6 + 4 >> 2] = 0; //@line 18374
     HEAP32[$6 + 8 >> 2] = 0; //@line 18374
     HEAP32[$6 + 12 >> 2] = 0; //@line 18374
     __THREW__ = 0; //@line 18375
     invoke_iii(55, $41 | 0, $40 | 0) | 0; //@line 18376
     $42 = __THREW__; //@line 18377
     __THREW__ = 0; //@line 18377
     if ($42 & 1) {
      label = 46; //@line 18380
     } else {
      $44 = $6 + 40 | 0; //@line 18382
      $47 = $4 + 44 | 0; //@line 18385
      __THREW__ = 0; //@line 18387
      invoke_viii(15, $44 | 0, HEAP32[$4 + 40 >> 2] | 0, HEAP32[$47 >> 2] | 0); //@line 18388
      $49 = __THREW__; //@line 18389
      __THREW__ = 0; //@line 18389
      if ($49 & 1) {
       label = 46; //@line 18392
      } else {
       HEAP32[$7 >> 2] = 0; //@line 18394
       HEAP32[$7 + 4 >> 2] = 0; //@line 18394
       HEAP32[$7 + 8 >> 2] = 0; //@line 18394
       HEAP32[$7 + 12 >> 2] = 0; //@line 18394
       HEAP32[$7 + 16 >> 2] = 0; //@line 18394
       HEAP32[$7 + 20 >> 2] = 0; //@line 18394
       __THREW__ = 0; //@line 18395
       invoke_iii(55, $7 | 0, $41 | 0) | 0; //@line 18396
       $51 = __THREW__; //@line 18397
       __THREW__ = 0; //@line 18397
       L15 : do {
        if ($51 & 1) {
         label = 47; //@line 18401
        } else {
         $53 = $7 + 12 | 0; //@line 18403
         $55 = $6 + 44 | 0; //@line 18405
         __THREW__ = 0; //@line 18407
         invoke_viii(15, $53 | 0, HEAP32[$44 >> 2] | 0, HEAP32[$55 >> 2] | 0); //@line 18408
         $57 = __THREW__; //@line 18409
         __THREW__ = 0; //@line 18409
         if ($57 & 1) {
          label = 47; //@line 18412
         } else {
          $59 = $$val3 + 4 | 0; //@line 18414
          $60 = HEAP32[$59 >> 2] | 0; //@line 18415
          __THREW__ = 0; //@line 18416
          invoke_vii(120, $8 | 0, $6 | 0); //@line 18417
          $61 = __THREW__; //@line 18418
          __THREW__ = 0; //@line 18418
          L18 : do {
           if ($61 & 1) {
            label = 48; //@line 18422
           } else {
            __THREW__ = 0; //@line 18424
            $63 = invoke_iii(66, $60 | 0, $8 | 0) | 0; //@line 18425
            $64 = __THREW__; //@line 18426
            __THREW__ = 0; //@line 18426
            if ($64 & 1) {
             $130 = ___cxa_find_matching_catch_2() | 0; //@line 18429
             $131 = tempRet0; //@line 18430
             $132 = $8 + 52 | 0; //@line 18431
             if ((HEAP8[$132 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$132 >> 2] | 0); //@line 18437
             }
             $137 = $8 + 40 | 0; //@line 18439
             $138 = HEAP32[$137 >> 2] | 0; //@line 18440
             if ($138 | 0) {
              $140 = $8 + 44 | 0; //@line 18443
              $141 = HEAP32[$140 >> 2] | 0; //@line 18444
              do {
               if (($141 | 0) == ($138 | 0)) {
                $152 = $138; //@line 18448
               } else {
                $143 = $8 + 48 | 0; //@line 18450
                $145 = $141; //@line 18451
                while (1) {
                 $144 = $145 + -72 | 0; //@line 18453
                 HEAP32[$140 >> 2] = $144; //@line 18454
                 __THREW__ = 0; //@line 18455
                 HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18456
                 invoke_viii(13, $$byval_copy20 | 0, $143 | 0, $144 | 0); //@line 18457
                 $146 = __THREW__; //@line 18458
                 __THREW__ = 0; //@line 18458
                 if ($146 & 1) {
                  label = 57; //@line 18461
                  break;
                 }
                 $145 = HEAP32[$140 >> 2] | 0; //@line 18464
                 if (($145 | 0) == ($138 | 0)) {
                  label = 58; //@line 18467
                  break;
                 }
                }
                if ((label | 0) == 57) {
                 $150 = ___cxa_find_matching_catch_3(0) | 0; //@line 18474
                 ___clang_call_terminate($150); //@line 18476
                } else if ((label | 0) == 58) {
                 $152 = HEAP32[$137 >> 2] | 0; //@line 18481
                 break;
                }
               }
              } while (0);
              __ZdlPv($152); //@line 18486
             }
             $153 = $8 + 4 | 0; //@line 18488
             if ((HEAP8[$153 + 11 >> 0] | 0) >= 0) {
              $$1$i$i$i = $130; //@line 18493
              $$19$i$i$i = $131; //@line 18493
              break L15;
             }
             __ZdlPv(HEAP32[$153 >> 2] | 0); //@line 18497
             $$1$i$i$i = $130; //@line 18498
             $$19$i$i$i = $131; //@line 18498
             break L15;
            }
            $66 = $63 & 1; //@line 18501
            $67 = $8 + 52 | 0; //@line 18502
            if ((HEAP8[$67 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$67 >> 2] | 0); //@line 18508
            }
            $72 = $8 + 40 | 0; //@line 18510
            $73 = HEAP32[$72 >> 2] | 0; //@line 18511
            if ($73 | 0) {
             $75 = $8 + 44 | 0; //@line 18514
             $76 = HEAP32[$75 >> 2] | 0; //@line 18515
             do {
              if (($76 | 0) == ($73 | 0)) {
               $87 = $73; //@line 18519
              } else {
               $78 = $8 + 48 | 0; //@line 18521
               $80 = $76; //@line 18522
               while (1) {
                $79 = $80 + -72 | 0; //@line 18524
                HEAP32[$75 >> 2] = $79; //@line 18525
                __THREW__ = 0; //@line 18526
                HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18527
                invoke_viii(13, $$byval_copy20 | 0, $78 | 0, $79 | 0); //@line 18528
                $81 = __THREW__; //@line 18529
                __THREW__ = 0; //@line 18529
                if ($81 & 1) {
                 label = 26; //@line 18532
                 break;
                }
                $80 = HEAP32[$75 >> 2] | 0; //@line 18535
                if (($80 | 0) == ($73 | 0)) {
                 label = 27; //@line 18538
                 break;
                }
               }
               if ((label | 0) == 26) {
                $85 = ___cxa_find_matching_catch_3(0) | 0; //@line 18545
                ___clang_call_terminate($85); //@line 18547
               } else if ((label | 0) == 27) {
                $87 = HEAP32[$72 >> 2] | 0; //@line 18552
                break;
               }
              }
             } while (0);
             __ZdlPv($87); //@line 18557
            }
            $88 = $8 + 4 | 0; //@line 18559
            if ((HEAP8[$88 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$88 >> 2] | 0); //@line 18565
            }
            do {
             if ($63) {
              $93 = HEAP32[$59 >> 2] | 0; //@line 18569
              __THREW__ = 0; //@line 18570
              invoke_vii(120, $9 | 0, $6 | 0); //@line 18571
              $94 = __THREW__; //@line 18572
              __THREW__ = 0; //@line 18572
              if ($94 & 1) {
               label = 48; //@line 18575
               break L18;
              }
              __THREW__ = 0; //@line 18578
              invoke_vii(137, $93 | 0, $9 | 0); //@line 18579
              $96 = __THREW__; //@line 18580
              __THREW__ = 0; //@line 18580
              if ($96 & 1) {
               $158 = ___cxa_find_matching_catch_2() | 0; //@line 18583
               $159 = tempRet0; //@line 18584
               $160 = $9 + 52 | 0; //@line 18585
               if ((HEAP8[$160 + 11 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$160 >> 2] | 0); //@line 18591
               }
               $165 = $9 + 40 | 0; //@line 18593
               $166 = HEAP32[$165 >> 2] | 0; //@line 18594
               if ($166 | 0) {
                $168 = $9 + 44 | 0; //@line 18597
                $169 = HEAP32[$168 >> 2] | 0; //@line 18598
                do {
                 if (($169 | 0) == ($166 | 0)) {
                  $180 = $166; //@line 18602
                 } else {
                  $171 = $9 + 48 | 0; //@line 18604
                  $173 = $169; //@line 18605
                  while (1) {
                   $172 = $173 + -72 | 0; //@line 18607
                   HEAP32[$168 >> 2] = $172; //@line 18608
                   __THREW__ = 0; //@line 18609
                   HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18610
                   invoke_viii(13, $$byval_copy20 | 0, $171 | 0, $172 | 0); //@line 18611
                   $174 = __THREW__; //@line 18612
                   __THREW__ = 0; //@line 18612
                   if ($174 & 1) {
                    label = 69; //@line 18615
                    break;
                   }
                   $173 = HEAP32[$168 >> 2] | 0; //@line 18618
                   if (($173 | 0) == ($166 | 0)) {
                    label = 70; //@line 18621
                    break;
                   }
                  }
                  if ((label | 0) == 69) {
                   $178 = ___cxa_find_matching_catch_3(0) | 0; //@line 18628
                   ___clang_call_terminate($178); //@line 18630
                  } else if ((label | 0) == 70) {
                   $180 = HEAP32[$165 >> 2] | 0; //@line 18635
                   break;
                  }
                 }
                } while (0);
                __ZdlPv($180); //@line 18640
               }
               $181 = $9 + 4 | 0; //@line 18642
               if ((HEAP8[$181 + 11 >> 0] | 0) >= 0) {
                $$1$i$i$i = $158; //@line 18647
                $$19$i$i$i = $159; //@line 18647
                break L15;
               }
               __ZdlPv(HEAP32[$181 >> 2] | 0); //@line 18651
               $$1$i$i$i = $158; //@line 18652
               $$19$i$i$i = $159; //@line 18652
               break L15;
              } else {
               $98 = $9 + 52 | 0; //@line 18655
               if ((HEAP8[$98 + 11 >> 0] | 0) < 0) {
                __ZdlPv(HEAP32[$98 >> 2] | 0); //@line 18661
               }
               $103 = $9 + 40 | 0; //@line 18663
               $104 = HEAP32[$103 >> 2] | 0; //@line 18664
               if ($104 | 0) {
                $106 = $9 + 44 | 0; //@line 18667
                $107 = HEAP32[$106 >> 2] | 0; //@line 18668
                do {
                 if (($107 | 0) == ($104 | 0)) {
                  $118 = $104; //@line 18672
                 } else {
                  $109 = $9 + 48 | 0; //@line 18674
                  $111 = $107; //@line 18675
                  while (1) {
                   $110 = $111 + -72 | 0; //@line 18677
                   HEAP32[$106 >> 2] = $110; //@line 18678
                   __THREW__ = 0; //@line 18679
                   HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18680
                   invoke_viii(13, $$byval_copy20 | 0, $109 | 0, $110 | 0); //@line 18681
                   $112 = __THREW__; //@line 18682
                   __THREW__ = 0; //@line 18682
                   if ($112 & 1) {
                    label = 41; //@line 18685
                    break;
                   }
                   $111 = HEAP32[$106 >> 2] | 0; //@line 18688
                   if (($111 | 0) == ($104 | 0)) {
                    label = 42; //@line 18691
                    break;
                   }
                  }
                  if ((label | 0) == 41) {
                   $116 = ___cxa_find_matching_catch_3(0) | 0; //@line 18698
                   ___clang_call_terminate($116); //@line 18700
                  } else if ((label | 0) == 42) {
                   $118 = HEAP32[$103 >> 2] | 0; //@line 18705
                   break;
                  }
                 }
                } while (0);
                __ZdlPv($118); //@line 18710
               }
               $119 = $9 + 4 | 0; //@line 18712
               if ((HEAP8[$119 + 11 >> 0] | 0) >= 0) {
                break;
               }
               __ZdlPv(HEAP32[$119 >> 2] | 0); //@line 18720
               break;
              }
             }
            } while (0);
            $186 = HEAP32[$59 >> 2] | 0; //@line 18725
            __THREW__ = 0; //@line 18726
            invoke_vii(120, $10 | 0, $6 | 0); //@line 18727
            $187 = __THREW__; //@line 18728
            __THREW__ = 0; //@line 18728
            if ($187 & 1) {
             label = 48; //@line 18731
            } else {
             __THREW__ = 0; //@line 18733
             $189 = invoke_iii(66, $186 | 0, $10 | 0) | 0; //@line 18734
             $190 = __THREW__; //@line 18735
             __THREW__ = 0; //@line 18735
             if ($190 & 1) {
              $340 = ___cxa_find_matching_catch_2() | 0; //@line 18738
              $341 = tempRet0; //@line 18739
              $342 = $10 + 52 | 0; //@line 18740
              if ((HEAP8[$342 + 11 >> 0] | 0) < 0) {
               __ZdlPv(HEAP32[$342 >> 2] | 0); //@line 18746
              }
              $347 = $10 + 40 | 0; //@line 18748
              $348 = HEAP32[$347 >> 2] | 0; //@line 18749
              if ($348 | 0) {
               $350 = $10 + 44 | 0; //@line 18752
               $351 = HEAP32[$350 >> 2] | 0; //@line 18753
               do {
                if (($351 | 0) == ($348 | 0)) {
                 $362 = $348; //@line 18757
                } else {
                 $353 = $10 + 48 | 0; //@line 18759
                 $355 = $351; //@line 18760
                 while (1) {
                  $354 = $355 + -72 | 0; //@line 18762
                  HEAP32[$350 >> 2] = $354; //@line 18763
                  __THREW__ = 0; //@line 18764
                  HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18765
                  invoke_viii(13, $$byval_copy20 | 0, $353 | 0, $354 | 0); //@line 18766
                  $356 = __THREW__; //@line 18767
                  __THREW__ = 0; //@line 18767
                  if ($356 & 1) {
                   label = 146; //@line 18770
                   break;
                  }
                  $355 = HEAP32[$350 >> 2] | 0; //@line 18773
                  if (($355 | 0) == ($348 | 0)) {
                   label = 147; //@line 18776
                   break;
                  }
                 }
                 if ((label | 0) == 146) {
                  $360 = ___cxa_find_matching_catch_3(0) | 0; //@line 18783
                  ___clang_call_terminate($360); //@line 18785
                 } else if ((label | 0) == 147) {
                  $362 = HEAP32[$347 >> 2] | 0; //@line 18790
                  break;
                 }
                }
               } while (0);
               __ZdlPv($362); //@line 18795
              }
              $363 = $10 + 4 | 0; //@line 18797
              if ((HEAP8[$363 + 11 >> 0] | 0) >= 0) {
               $$1$i$i$i = $340; //@line 18802
               $$19$i$i$i = $341; //@line 18802
               break L15;
              }
              __ZdlPv(HEAP32[$363 >> 2] | 0); //@line 18806
              $$1$i$i$i = $340; //@line 18807
              $$19$i$i$i = $341; //@line 18807
              break L15;
             }
             $192 = $189 & 1; //@line 18810
             $193 = $10 + 52 | 0; //@line 18811
             if ((HEAP8[$193 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$193 >> 2] | 0); //@line 18817
             }
             $198 = $10 + 40 | 0; //@line 18819
             $199 = HEAP32[$198 >> 2] | 0; //@line 18820
             if ($199 | 0) {
              $201 = $10 + 44 | 0; //@line 18823
              $202 = HEAP32[$201 >> 2] | 0; //@line 18824
              do {
               if (($202 | 0) == ($199 | 0)) {
                $213 = $199; //@line 18828
               } else {
                $204 = $10 + 48 | 0; //@line 18830
                $206 = $202; //@line 18831
                while (1) {
                 $205 = $206 + -72 | 0; //@line 18833
                 HEAP32[$201 >> 2] = $205; //@line 18834
                 __THREW__ = 0; //@line 18835
                 HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18836
                 invoke_viii(13, $$byval_copy20 | 0, $204 | 0, $205 | 0); //@line 18837
                 $207 = __THREW__; //@line 18838
                 __THREW__ = 0; //@line 18838
                 if ($207 & 1) {
                  label = 83; //@line 18841
                  break;
                 }
                 $206 = HEAP32[$201 >> 2] | 0; //@line 18844
                 if (($206 | 0) == ($199 | 0)) {
                  label = 84; //@line 18847
                  break;
                 }
                }
                if ((label | 0) == 83) {
                 $211 = ___cxa_find_matching_catch_3(0) | 0; //@line 18854
                 ___clang_call_terminate($211); //@line 18856
                } else if ((label | 0) == 84) {
                 $213 = HEAP32[$198 >> 2] | 0; //@line 18861
                 break;
                }
               }
              } while (0);
              __ZdlPv($213); //@line 18866
             }
             $214 = $10 + 4 | 0; //@line 18868
             if ((HEAP8[$214 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$214 >> 2] | 0); //@line 18874
             }
             $$sroa$0$0$$sroa_idx$i$i$i = $7 + 24 | 0; //@line 18876
             HEAP8[$$sroa$0$0$$sroa_idx$i$i$i >> 0] = $66; //@line 18877
             HEAP8[$7 + 25 >> 0] = $192; //@line 18879
             __THREW__ = 0; //@line 18880
             invoke_vii(115, $11 | 0, $7 | 0); //@line 18881
             $219 = __THREW__; //@line 18882
             __THREW__ = 0; //@line 18882
             if ($219 & 1) {
              label = 48; //@line 18885
              break;
             }
             $221 = $11 + 12 | 0; //@line 18888
             HEAP32[$221 >> 2] = 0; //@line 18889
             $222 = $11 + 16 | 0; //@line 18890
             HEAP32[$222 >> 2] = 0; //@line 18891
             HEAP32[$11 + 20 >> 2] = 0; //@line 18893
             $225 = HEAP32[$7 + 16 >> 2] | 0; //@line 18895
             $226 = HEAP32[$53 >> 2] | 0; //@line 18896
             $227 = $225 - $226 | 0; //@line 18897
             $228 = ($227 | 0) / 72 | 0; //@line 18898
             $230 = $226; //@line 18900
             $231 = $225; //@line 18901
             L135 : do {
              if ($227 | 0) {
               L137 : do {
                if ($228 >>> 0 > 59652323) {
                 __THREW__ = 0; //@line 18907
                 invoke_vi(254, $221 | 0); //@line 18908
                 __THREW__ = 0; //@line 18909
                } else {
                 __THREW__ = 0; //@line 18911
                 $234 = invoke_ii(142, $227 | 0) | 0; //@line 18912
                 $235 = __THREW__; //@line 18913
                 __THREW__ = 0; //@line 18913
                 if ($235 & 1) {
                  break;
                 }
                 HEAP32[$222 >> 2] = $234; //@line 18918
                 HEAP32[$221 >> 2] = $234; //@line 18919
                 HEAP32[$11 + 20 >> 2] = $234 + ($228 * 72 | 0); //@line 18922
                 if (($230 | 0) == ($231 | 0)) {
                  break L135;
                 } else {
                  $$0$i$i18$i$i$i$i = $230; //@line 18927
                  $240 = $234; //@line 18927
                 }
                 while (1) {
                  __THREW__ = 0; //@line 18930
                  invoke_vii(120, $240 | 0, $$0$i$i18$i$i$i$i | 0); //@line 18931
                  $241 = __THREW__; //@line 18932
                  __THREW__ = 0; //@line 18932
                  if ($241 & 1) {
                   break L137;
                  }
                  $$0$i$i18$i$i$i$i = $$0$i$i18$i$i$i$i + 72 | 0; //@line 18937
                  $240 = (HEAP32[$222 >> 2] | 0) + 72 | 0; //@line 18939
                  HEAP32[$222 >> 2] = $240; //@line 18940
                  if (($$0$i$i18$i$i$i$i | 0) == ($231 | 0)) {
                   break L135;
                  }
                 }
                }
               } while (0);
               $247 = ___cxa_find_matching_catch_2() | 0; //@line 18950
               $248 = tempRet0; //@line 18951
               __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($221); //@line 18952
               if ((HEAP8[$11 + 11 >> 0] | 0) >= 0) {
                $eh$lpad$body$i$i$i$index5Z2D = $248; //@line 18957
                $eh$lpad$body$i$i$i$indexZ2D = $247; //@line 18957
                break L18;
               }
               __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 18961
               $eh$lpad$body$i$i$i$index5Z2D = $248; //@line 18962
               $eh$lpad$body$i$i$i$indexZ2D = $247; //@line 18962
               break L18;
              }
             } while (0);
             HEAP16[$11 + 24 >> 1] = HEAP16[$$sroa$0$0$$sroa_idx$i$i$i >> 1] | 0; //@line 18968
             __THREW__ = 0; //@line 18969
             invoke_vii(138, $$val | 0, $11 | 0); //@line 18970
             $255 = __THREW__; //@line 18971
             __THREW__ = 0; //@line 18971
             if ($255 & 1) {
              $368 = ___cxa_find_matching_catch_2() | 0; //@line 18974
              $369 = tempRet0; //@line 18975
              __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($11 + 12 | 0); //@line 18977
              if ((HEAP8[$11 + 11 >> 0] | 0) >= 0) {
               $$1$i$i$i = $368; //@line 18982
               $$19$i$i$i = $369; //@line 18982
               break L15;
              }
              __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 18986
              $$1$i$i$i = $368; //@line 18987
              $$19$i$i$i = $369; //@line 18987
              break L15;
             }
             __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($11 + 12 | 0); //@line 18991
             if ((HEAP8[$11 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 18997
             }
             __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($7 + 12 | 0); //@line 19000
             if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 19006
             }
             if ((HEAP8[$41 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$41 >> 2] | 0); //@line 19013
             }
             $271 = $6 + 40 | 0; //@line 19015
             $272 = HEAP32[$271 >> 2] | 0; //@line 19016
             if ($272 | 0) {
              $274 = HEAP32[$55 >> 2] | 0; //@line 19019
              do {
               if (($274 | 0) == ($272 | 0)) {
                $285 = $272; //@line 19023
               } else {
                $276 = $6 + 48 | 0; //@line 19025
                $278 = $274; //@line 19026
                while (1) {
                 $277 = $278 + -72 | 0; //@line 19028
                 HEAP32[$55 >> 2] = $277; //@line 19029
                 __THREW__ = 0; //@line 19030
                 HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19031
                 invoke_viii(13, $$byval_copy20 | 0, $276 | 0, $277 | 0); //@line 19032
                 $279 = __THREW__; //@line 19033
                 __THREW__ = 0; //@line 19033
                 if ($279 & 1) {
                  label = 110; //@line 19036
                  break;
                 }
                 $278 = HEAP32[$55 >> 2] | 0; //@line 19039
                 if (($278 | 0) == ($272 | 0)) {
                  label = 111; //@line 19042
                  break;
                 }
                }
                if ((label | 0) == 110) {
                 $283 = ___cxa_find_matching_catch_3(0) | 0; //@line 19049
                 ___clang_call_terminate($283); //@line 19051
                } else if ((label | 0) == 111) {
                 $285 = HEAP32[$271 >> 2] | 0; //@line 19056
                 break;
                }
               }
              } while (0);
              __ZdlPv($285); //@line 19061
             }
             if ((HEAP8[$38 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$38 >> 2] | 0); //@line 19068
             }
             $290 = $5 + 52 | 0; //@line 19070
             if ((HEAP8[$290 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$290 >> 2] | 0); //@line 19076
             }
             $295 = $5 + 40 | 0; //@line 19078
             $296 = HEAP32[$295 >> 2] | 0; //@line 19079
             if ($296 | 0) {
              $298 = $5 + 44 | 0; //@line 19082
              $299 = HEAP32[$298 >> 2] | 0; //@line 19083
              do {
               if (($299 | 0) == ($296 | 0)) {
                $310 = $296; //@line 19087
               } else {
                $301 = $5 + 48 | 0; //@line 19089
                $303 = $299; //@line 19090
                while (1) {
                 $302 = $303 + -72 | 0; //@line 19092
                 HEAP32[$298 >> 2] = $302; //@line 19093
                 __THREW__ = 0; //@line 19094
                 HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19095
                 invoke_viii(13, $$byval_copy20 | 0, $301 | 0, $302 | 0); //@line 19096
                 $304 = __THREW__; //@line 19097
                 __THREW__ = 0; //@line 19097
                 if ($304 & 1) {
                  label = 122; //@line 19100
                  break;
                 }
                 $303 = HEAP32[$298 >> 2] | 0; //@line 19103
                 if (($303 | 0) == ($296 | 0)) {
                  label = 123; //@line 19106
                  break;
                 }
                }
                if ((label | 0) == 122) {
                 $308 = ___cxa_find_matching_catch_3(0) | 0; //@line 19113
                 ___clang_call_terminate($308); //@line 19115
                } else if ((label | 0) == 123) {
                 $310 = HEAP32[$295 >> 2] | 0; //@line 19120
                 break;
                }
               }
              } while (0);
              __ZdlPv($310); //@line 19125
             }
             if ((HEAP8[$40 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$40 >> 2] | 0); //@line 19132
             }
             $315 = $4 + 52 | 0; //@line 19134
             if ((HEAP8[$315 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$315 >> 2] | 0); //@line 19140
             }
             $320 = $4 + 40 | 0; //@line 19142
             $321 = HEAP32[$320 >> 2] | 0; //@line 19143
             if ($321 | 0) {
              $323 = HEAP32[$47 >> 2] | 0; //@line 19146
              do {
               if (($323 | 0) == ($321 | 0)) {
                $334 = $321; //@line 19150
               } else {
                $325 = $4 + 48 | 0; //@line 19152
                $327 = $323; //@line 19153
                while (1) {
                 $326 = $327 + -72 | 0; //@line 19155
                 HEAP32[$47 >> 2] = $326; //@line 19156
                 __THREW__ = 0; //@line 19157
                 HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19158
                 invoke_viii(13, $$byval_copy20 | 0, $325 | 0, $326 | 0); //@line 19159
                 $328 = __THREW__; //@line 19160
                 __THREW__ = 0; //@line 19160
                 if ($328 & 1) {
                  label = 134; //@line 19163
                  break;
                 }
                 $327 = HEAP32[$47 >> 2] | 0; //@line 19166
                 if (($327 | 0) == ($321 | 0)) {
                  label = 135; //@line 19169
                  break;
                 }
                }
                if ((label | 0) == 134) {
                 $332 = ___cxa_find_matching_catch_3(0) | 0; //@line 19176
                 ___clang_call_terminate($332); //@line 19178
                } else if ((label | 0) == 135) {
                 $334 = HEAP32[$320 >> 2] | 0; //@line 19183
                 break;
                }
               }
              } while (0);
              __ZdlPv($334); //@line 19188
             }
             $335 = $4 + 4 | 0; //@line 19190
             if ((HEAP8[$335 + 11 >> 0] | 0) >= 0) {
              STACKTOP = sp; //@line 19195
              return;
             }
             __ZdlPv(HEAP32[$335 >> 2] | 0); //@line 19198
             STACKTOP = sp; //@line 19199
             return;
            }
           }
          } while (0);
          if ((label | 0) == 48) {
           $128 = ___cxa_find_matching_catch_2() | 0; //@line 19204
           $eh$lpad$body$i$i$i$index5Z2D = tempRet0; //@line 19206
           $eh$lpad$body$i$i$i$indexZ2D = $128; //@line 19206
          }
          $$1$i$i$i = $eh$lpad$body$i$i$i$indexZ2D; //@line 19208
          $$19$i$i$i = $eh$lpad$body$i$i$i$index5Z2D; //@line 19208
         }
        }
       } while (0);
       if ((label | 0) == 47) {
        $126 = ___cxa_find_matching_catch_2() | 0; //@line 19213
        $$1$i$i$i = $126; //@line 19215
        $$19$i$i$i = tempRet0; //@line 19215
       }
       __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($7 + 12 | 0); //@line 19218
       if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 19224
       }
       $$2$i$i$i = $$1$i$i$i; //@line 19226
       $$210$i$i$i = $$19$i$i$i; //@line 19226
      }
     }
     if ((label | 0) == 46) {
      $124 = ___cxa_find_matching_catch_2() | 0; //@line 19230
      $$2$i$i$i = $124; //@line 19232
      $$210$i$i$i = tempRet0; //@line 19232
     }
     if ((HEAP8[$41 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$41 >> 2] | 0); //@line 19239
     }
     $384 = $6 + 40 | 0; //@line 19241
     $385 = HEAP32[$384 >> 2] | 0; //@line 19242
     if ($385 | 0) {
      $387 = $6 + 44 | 0; //@line 19245
      $388 = HEAP32[$387 >> 2] | 0; //@line 19246
      do {
       if (($388 | 0) == ($385 | 0)) {
        $399 = $385; //@line 19250
       } else {
        $390 = $6 + 48 | 0; //@line 19252
        $392 = $388; //@line 19253
        while (1) {
         $391 = $392 + -72 | 0; //@line 19255
         HEAP32[$387 >> 2] = $391; //@line 19256
         __THREW__ = 0; //@line 19257
         HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19258
         invoke_viii(13, $$byval_copy20 | 0, $390 | 0, $391 | 0); //@line 19259
         $393 = __THREW__; //@line 19260
         __THREW__ = 0; //@line 19260
         if ($393 & 1) {
          label = 163; //@line 19263
          break;
         }
         $392 = HEAP32[$387 >> 2] | 0; //@line 19266
         if (($392 | 0) == ($385 | 0)) {
          label = 164; //@line 19269
          break;
         }
        }
        if ((label | 0) == 163) {
         $397 = ___cxa_find_matching_catch_3(0) | 0; //@line 19276
         ___clang_call_terminate($397); //@line 19278
        } else if ((label | 0) == 164) {
         $399 = HEAP32[$384 >> 2] | 0; //@line 19283
         break;
        }
       }
      } while (0);
      __ZdlPv($399); //@line 19288
     }
     if ((HEAP8[$38 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$38 >> 2] | 0); //@line 19295
     }
     $$3$i$i$i = $$2$i$i$i; //@line 19297
     $$311$i$i$i = $$210$i$i$i; //@line 19297
    } else {
     $20 = ___cxa_allocate_exception(8) | 0; //@line 19299
     __THREW__ = 0; //@line 19300
     invoke_vii(125, $20 | 0, 19842); //@line 19301
     $21 = __THREW__; //@line 19302
     __THREW__ = 0; //@line 19302
     if ($21 & 1) {
      $26 = ___cxa_find_matching_catch_2() | 0; //@line 19305
      $27 = tempRet0; //@line 19306
      ___cxa_free_exception($20 | 0); //@line 19307
      $$3$i$i$i = $26; //@line 19308
      $$311$i$i$i = $27; //@line 19308
      break;
     } else {
      __THREW__ = 0; //@line 19311
      invoke_viii(16, $20 | 0, 2824, 242); //@line 19312
      __THREW__ = 0; //@line 19313
      label = 8; //@line 19314
      break;
     }
    }
   } while (0);
   if ((label | 0) == 8) {
    $28 = ___cxa_find_matching_catch_2() | 0; //@line 19320
    $$3$i$i$i = $28; //@line 19322
    $$311$i$i$i = tempRet0; //@line 19322
   }
   $404 = $5 + 52 | 0; //@line 19324
   if ((HEAP8[$404 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$404 >> 2] | 0); //@line 19330
   }
   $409 = $5 + 40 | 0; //@line 19332
   $410 = HEAP32[$409 >> 2] | 0; //@line 19333
   if ($410 | 0) {
    $412 = $5 + 44 | 0; //@line 19336
    $413 = HEAP32[$412 >> 2] | 0; //@line 19337
    do {
     if (($413 | 0) == ($410 | 0)) {
      $424 = $410; //@line 19341
     } else {
      $415 = $5 + 48 | 0; //@line 19343
      $417 = $413; //@line 19344
      while (1) {
       $416 = $417 + -72 | 0; //@line 19346
       HEAP32[$412 >> 2] = $416; //@line 19347
       __THREW__ = 0; //@line 19348
       HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19349
       invoke_viii(13, $$byval_copy20 | 0, $415 | 0, $416 | 0); //@line 19350
       $418 = __THREW__; //@line 19351
       __THREW__ = 0; //@line 19351
       if ($418 & 1) {
        label = 176; //@line 19354
        break;
       }
       $417 = HEAP32[$412 >> 2] | 0; //@line 19357
       if (($417 | 0) == ($410 | 0)) {
        label = 177; //@line 19360
        break;
       }
      }
      if ((label | 0) == 176) {
       $422 = ___cxa_find_matching_catch_3(0) | 0; //@line 19367
       ___clang_call_terminate($422); //@line 19369
      } else if ((label | 0) == 177) {
       $424 = HEAP32[$409 >> 2] | 0; //@line 19374
       break;
      }
     }
    } while (0);
    __ZdlPv($424); //@line 19379
   }
   $425 = $5 + 4 | 0; //@line 19381
   if ((HEAP8[$425 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$425 >> 2] | 0); //@line 19387
    $$4$i$i$i = $$3$i$i$i; //@line 19388
    $$412$i$i$i = $$311$i$i$i; //@line 19388
   } else {
    $$4$i$i$i = $$3$i$i$i; //@line 19390
    $$412$i$i$i = $$311$i$i$i; //@line 19390
   }
  }
 }
 if ((label | 0) == 6) {
  $24 = ___cxa_find_matching_catch_2() | 0; //@line 19395
  $$4$i$i$i = $24; //@line 19397
  $$412$i$i$i = tempRet0; //@line 19397
 }
 $430 = $4 + 52 | 0; //@line 19399
 if ((HEAP8[$430 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$430 >> 2] | 0); //@line 19405
 }
 $435 = $4 + 40 | 0; //@line 19407
 $436 = HEAP32[$435 >> 2] | 0; //@line 19408
 if ($436 | 0) {
  $438 = $4 + 44 | 0; //@line 19411
  $439 = HEAP32[$438 >> 2] | 0; //@line 19412
  do {
   if (($439 | 0) == ($436 | 0)) {
    $450 = $436; //@line 19416
   } else {
    $441 = $4 + 48 | 0; //@line 19418
    $443 = $439; //@line 19419
    while (1) {
     $442 = $443 + -72 | 0; //@line 19421
     HEAP32[$438 >> 2] = $442; //@line 19422
     __THREW__ = 0; //@line 19423
     HEAP8[$$byval_copy20 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19424
     invoke_viii(13, $$byval_copy20 | 0, $441 | 0, $442 | 0); //@line 19425
     $444 = __THREW__; //@line 19426
     __THREW__ = 0; //@line 19426
     if ($444 & 1) {
      label = 188; //@line 19429
      break;
     }
     $443 = HEAP32[$438 >> 2] | 0; //@line 19432
     if (($443 | 0) == ($436 | 0)) {
      label = 189; //@line 19435
      break;
     }
    }
    if ((label | 0) == 188) {
     $448 = ___cxa_find_matching_catch_3(0) | 0; //@line 19442
     ___clang_call_terminate($448); //@line 19444
    } else if ((label | 0) == 189) {
     $450 = HEAP32[$435 >> 2] | 0; //@line 19449
     break;
    }
   }
  } while (0);
  __ZdlPv($450); //@line 19454
 }
 $451 = $4 + 4 | 0; //@line 19456
 if ((HEAP8[$451 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$4$i$i$i | 0); //@line 19461
 }
 __ZdlPv(HEAP32[$451 >> 2] | 0); //@line 19465
 ___resumeException($$4$i$i$i | 0); //@line 19466
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$07$i$i$i = 0, $$1$i$i$i = 0, $$18$i$i$i = 0, $$2$i$i$i = 0, $$29$i$i$i = 0, $$3$i$i$i = 0, $$310$i$i$i = 0, $$byval_copy13 = 0, $$val = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $144 = 0, $146 = 0, $147 = 0, $152 = 0, $153 = 0, $154 = 0, $157 = 0, $16 = 0, $164 = 0, $165 = 0, $17 = 0, $171 = 0, $175 = 0, $177 = 0, $182 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $195 = 0, $197 = 0, $198 = 0, $2 = 0, $203 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $225 = 0, $227 = 0, $228 = 0, $23 = 0, $233 = 0, $235 = 0, $236 = 0, $238 = 0, $242 = 0, $243 = 0, $246 = 0, $247 = 0, $249 = 0, $251 = 0, $254 = 0, $255 = 0, $259 = 0, $262 = 0, $263 = 0, $265 = 0, $267 = 0, $268 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $276 = 0, $278 = 0, $28 = 0, $280 = 0, $285 = 0, $286 = 0, $288 = 0, $289 = 0, $29 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $298 = 0, $3 = 0, $300 = 0, $301 = 0, $306 = 0, $31 = 0, $311 = 0, $312 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $324 = 0, $326 = 0, $331 = 0, $336 = 0, $337 = 0, $339 = 0, $34 = 0, $340 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $349 = 0, $35 = 0, $351 = 0, $352 = 0, $357 = 0, $36 = 0, $362 = 0, $363 = 0, $365 = 0, $366 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $375 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $385 = 0, $390 = 0, $391 = 0, $393 = 0, $394 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $403 = 0, $405 = 0, $406 = 0, $41 = 0, $411 = 0, $416 = 0, $417 = 0, $419 = 0, $420 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $429 = 0, $43 = 0, $431 = 0, $436 = 0, $437 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $447 = 0, $448 = 0, $450 = 0, $451 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $460 = 0, $462 = 0, $463 = 0, $468 = 0, $473 = 0, $474 = 0, $476 = 0, $477 = 0, $479 = 0, $480 = 0, $481 = 0, $482 = 0, $486 = 0, $488 = 0, $489 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $92 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13196
 STACKTOP = STACKTOP + 512 | 0; //@line 13197
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 13197
 $$byval_copy13 = sp + 505 | 0; //@line 13198
 $2 = sp + 504 | 0; //@line 13199
 $3 = sp + 432 | 0; //@line 13200
 $4 = sp + 360 | 0; //@line 13201
 $5 = sp + 288 | 0; //@line 13202
 $6 = sp + 216 | 0; //@line 13203
 $7 = sp + 144 | 0; //@line 13204
 $8 = sp + 72 | 0; //@line 13205
 $9 = sp; //@line 13206
 $$val = HEAP32[$1 >> 2] | 0; //@line 13207
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 13209
 __THREW__ = 0; //@line 13210
 $11 = invoke_ii(143, $$val | 0) | 0; //@line 13211
 $12 = __THREW__; //@line 13212
 __THREW__ = 0; //@line 13212
 if ($12 & 1) {
  label = 37; //@line 13215
 } else {
  __THREW__ = 0; //@line 13217
  invoke_vii(131, $4 | 0, $11 | 0); //@line 13218
  $14 = __THREW__; //@line 13219
  __THREW__ = 0; //@line 13219
  if ($14 & 1) {
   label = 37; //@line 13222
  } else {
   __THREW__ = 0; //@line 13224
   $16 = invoke_ii(143, $$val | 0) | 0; //@line 13225
   $17 = __THREW__; //@line 13226
   __THREW__ = 0; //@line 13226
   do {
    if ($17 & 1) {
     label = 38; //@line 13230
    } else {
     __THREW__ = 0; //@line 13232
     invoke_vii(120, $5 | 0, $4 | 0); //@line 13233
     $19 = __THREW__; //@line 13234
     __THREW__ = 0; //@line 13234
     if ($19 & 1) {
      label = 38; //@line 13237
     } else {
      __THREW__ = 0; //@line 13239
      invoke_vii(128, $16 | 0, $5 | 0); //@line 13240
      $21 = __THREW__; //@line 13241
      __THREW__ = 0; //@line 13241
      if ($21 & 1) {
       $96 = ___cxa_find_matching_catch_2() | 0; //@line 13244
       $97 = tempRet0; //@line 13245
       $98 = $5 + 52 | 0; //@line 13246
       if ((HEAP8[$98 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$98 >> 2] | 0); //@line 13252
       }
       $103 = $5 + 40 | 0; //@line 13254
       $104 = HEAP32[$103 >> 2] | 0; //@line 13255
       if ($104 | 0) {
        $106 = $5 + 44 | 0; //@line 13258
        $107 = HEAP32[$106 >> 2] | 0; //@line 13259
        do {
         if (($107 | 0) == ($104 | 0)) {
          $118 = $104; //@line 13263
         } else {
          $109 = $5 + 48 | 0; //@line 13265
          $111 = $107; //@line 13266
          while (1) {
           $110 = $111 + -72 | 0; //@line 13268
           HEAP32[$106 >> 2] = $110; //@line 13269
           __THREW__ = 0; //@line 13270
           HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 13271
           invoke_viii(13, $$byval_copy13 | 0, $109 | 0, $110 | 0); //@line 13272
           $112 = __THREW__; //@line 13273
           __THREW__ = 0; //@line 13273
           if ($112 & 1) {
            label = 46; //@line 13276
            break;
           }
           $111 = HEAP32[$106 >> 2] | 0; //@line 13279
           if (($111 | 0) == ($104 | 0)) {
            label = 47; //@line 13282
            break;
           }
          }
          if ((label | 0) == 46) {
           $116 = ___cxa_find_matching_catch_3(0) | 0; //@line 13289
           ___clang_call_terminate($116); //@line 13291
          } else if ((label | 0) == 47) {
           $118 = HEAP32[$103 >> 2] | 0; //@line 13296
           break;
          }
         }
        } while (0);
        __ZdlPv($118); //@line 13301
       }
       $119 = $5 + 4 | 0; //@line 13303
       if ((HEAP8[$119 + 11 >> 0] | 0) >= 0) {
        $$2$i$i$i = $96; //@line 13308
        $$29$i$i$i = $97; //@line 13308
        break;
       }
       __ZdlPv(HEAP32[$119 >> 2] | 0); //@line 13312
       $$2$i$i$i = $96; //@line 13313
       $$29$i$i$i = $97; //@line 13313
       break;
      }
      $23 = $5 + 52 | 0; //@line 13316
      if ((HEAP8[$23 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$23 >> 2] | 0); //@line 13322
      }
      $28 = $5 + 40 | 0; //@line 13324
      $29 = HEAP32[$28 >> 2] | 0; //@line 13325
      if ($29 | 0) {
       $31 = $5 + 44 | 0; //@line 13328
       $32 = HEAP32[$31 >> 2] | 0; //@line 13329
       do {
        if (($32 | 0) == ($29 | 0)) {
         $43 = $29; //@line 13333
        } else {
         $34 = $5 + 48 | 0; //@line 13335
         $36 = $32; //@line 13336
         while (1) {
          $35 = $36 + -72 | 0; //@line 13338
          HEAP32[$31 >> 2] = $35; //@line 13339
          __THREW__ = 0; //@line 13340
          HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 13341
          invoke_viii(13, $$byval_copy13 | 0, $34 | 0, $35 | 0); //@line 13342
          $37 = __THREW__; //@line 13343
          __THREW__ = 0; //@line 13343
          if ($37 & 1) {
           label = 13; //@line 13346
           break;
          }
          $36 = HEAP32[$31 >> 2] | 0; //@line 13349
          if (($36 | 0) == ($29 | 0)) {
           label = 14; //@line 13352
           break;
          }
         }
         if ((label | 0) == 13) {
          $41 = ___cxa_find_matching_catch_3(0) | 0; //@line 13359
          ___clang_call_terminate($41); //@line 13361
         } else if ((label | 0) == 14) {
          $43 = HEAP32[$28 >> 2] | 0; //@line 13366
          break;
         }
        }
       } while (0);
       __ZdlPv($43); //@line 13371
      }
      $44 = $5 + 4 | 0; //@line 13373
      if ((HEAP8[$44 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$44 >> 2] | 0); //@line 13379
      }
      __THREW__ = 0; //@line 13381
      invoke_vii(120, $6 | 0, $3 | 0); //@line 13382
      $49 = __THREW__; //@line 13383
      __THREW__ = 0; //@line 13383
      if ($49 & 1) {
       label = 38; //@line 13386
      } else {
       __THREW__ = 0; //@line 13388
       $51 = invoke_ii(144, $6 | 0) | 0; //@line 13389
       $52 = __THREW__; //@line 13390
       __THREW__ = 0; //@line 13390
       if ($52 & 1) {
        $124 = ___cxa_find_matching_catch_2() | 0; //@line 13393
        $125 = tempRet0; //@line 13394
        $126 = $6 + 52 | 0; //@line 13395
        if ((HEAP8[$126 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$126 >> 2] | 0); //@line 13401
        }
        $131 = $6 + 40 | 0; //@line 13403
        $132 = HEAP32[$131 >> 2] | 0; //@line 13404
        if ($132 | 0) {
         $134 = $6 + 44 | 0; //@line 13407
         $135 = HEAP32[$134 >> 2] | 0; //@line 13408
         do {
          if (($135 | 0) == ($132 | 0)) {
           $146 = $132; //@line 13412
          } else {
           $137 = $6 + 48 | 0; //@line 13414
           $139 = $135; //@line 13415
           while (1) {
            $138 = $139 + -72 | 0; //@line 13417
            HEAP32[$134 >> 2] = $138; //@line 13418
            __THREW__ = 0; //@line 13419
            HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 13420
            invoke_viii(13, $$byval_copy13 | 0, $137 | 0, $138 | 0); //@line 13421
            $140 = __THREW__; //@line 13422
            __THREW__ = 0; //@line 13422
            if ($140 & 1) {
             label = 58; //@line 13425
             break;
            }
            $139 = HEAP32[$134 >> 2] | 0; //@line 13428
            if (($139 | 0) == ($132 | 0)) {
             label = 59; //@line 13431
             break;
            }
           }
           if ((label | 0) == 58) {
            $144 = ___cxa_find_matching_catch_3(0) | 0; //@line 13438
            ___clang_call_terminate($144); //@line 13440
           } else if ((label | 0) == 59) {
            $146 = HEAP32[$131 >> 2] | 0; //@line 13445
            break;
           }
          }
         } while (0);
         __ZdlPv($146); //@line 13450
        }
        $147 = $6 + 4 | 0; //@line 13452
        if ((HEAP8[$147 + 11 >> 0] | 0) >= 0) {
         $$2$i$i$i = $124; //@line 13457
         $$29$i$i$i = $125; //@line 13457
         break;
        }
        __ZdlPv(HEAP32[$147 >> 2] | 0); //@line 13461
        $$2$i$i$i = $124; //@line 13462
        $$29$i$i$i = $125; //@line 13462
        break;
       }
       $54 = $6 + 52 | 0; //@line 13465
       if ((HEAP8[$54 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$54 >> 2] | 0); //@line 13471
       }
       $59 = $6 + 40 | 0; //@line 13473
       $60 = HEAP32[$59 >> 2] | 0; //@line 13474
       if ($60 | 0) {
        $62 = $6 + 44 | 0; //@line 13477
        $63 = HEAP32[$62 >> 2] | 0; //@line 13478
        do {
         if (($63 | 0) == ($60 | 0)) {
          $74 = $60; //@line 13482
         } else {
          $65 = $6 + 48 | 0; //@line 13484
          $67 = $63; //@line 13485
          while (1) {
           $66 = $67 + -72 | 0; //@line 13487
           HEAP32[$62 >> 2] = $66; //@line 13488
           __THREW__ = 0; //@line 13489
           HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 13490
           invoke_viii(13, $$byval_copy13 | 0, $65 | 0, $66 | 0); //@line 13491
           $68 = __THREW__; //@line 13492
           __THREW__ = 0; //@line 13492
           if ($68 & 1) {
            label = 27; //@line 13495
            break;
           }
           $67 = HEAP32[$62 >> 2] | 0; //@line 13498
           if (($67 | 0) == ($60 | 0)) {
            label = 28; //@line 13501
            break;
           }
          }
          if ((label | 0) == 27) {
           $72 = ___cxa_find_matching_catch_3(0) | 0; //@line 13508
           ___clang_call_terminate($72); //@line 13510
          } else if ((label | 0) == 28) {
           $74 = HEAP32[$59 >> 2] | 0; //@line 13515
           break;
          }
         }
        } while (0);
        __ZdlPv($74); //@line 13520
       }
       $75 = $6 + 4 | 0; //@line 13522
       if ((HEAP8[$75 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$75 >> 2] | 0); //@line 13528
       }
       if (!$51) {
        $436 = ___cxa_allocate_exception(8) | 0; //@line 13531
        __THREW__ = 0; //@line 13532
        invoke_vii(125, $436 | 0, 18801); //@line 13533
        $437 = __THREW__; //@line 13534
        __THREW__ = 0; //@line 13534
        if ($437 & 1) {
         $440 = ___cxa_find_matching_catch_2() | 0; //@line 13537
         $441 = tempRet0; //@line 13538
         ___cxa_free_exception($436 | 0); //@line 13539
         $$2$i$i$i = $440; //@line 13540
         $$29$i$i$i = $441; //@line 13540
         break;
        } else {
         __THREW__ = 0; //@line 13543
         invoke_viii(16, $436 | 0, 2824, 242); //@line 13544
         __THREW__ = 0; //@line 13545
         label = 38; //@line 13546
         break;
        }
       }
       $80 = $7 + 4 | 0; //@line 13550
       HEAP32[$80 >> 2] = 0; //@line 13551
       HEAP32[$80 + 4 >> 2] = 0; //@line 13551
       HEAP32[$80 + 8 >> 2] = 0; //@line 13551
       $81 = $7 + 40 | 0; //@line 13552
       HEAP32[$81 >> 2] = 0; //@line 13553
       HEAP32[$81 + 4 >> 2] = 0; //@line 13553
       HEAP32[$81 + 8 >> 2] = 0; //@line 13553
       HEAP32[$81 + 12 >> 2] = 0; //@line 13553
       HEAP32[$81 + 16 >> 2] = 0; //@line 13553
       HEAP32[$81 + 20 >> 2] = 0; //@line 13553
       L88 : do {
        switch (HEAP32[$4 >> 2] | 0) {
        case 1:
         {
          $83 = $4 + 40 | 0; //@line 13558
          $85 = HEAP32[$4 + 44 >> 2] | 0; //@line 13560
          $86 = HEAP32[$83 >> 2] | 0; //@line 13561
          if (($85 | 0) == ($86 | 0)) {
           $88 = ___cxa_allocate_exception(8) | 0; //@line 13564
           __THREW__ = 0; //@line 13565
           invoke_vii(125, $88 | 0, 18698); //@line 13566
           $89 = __THREW__; //@line 13567
           __THREW__ = 0; //@line 13567
           if ($89 & 1) {
            $152 = ___cxa_find_matching_catch_2() | 0; //@line 13570
            $153 = tempRet0; //@line 13571
            ___cxa_free_exception($88 | 0); //@line 13572
            $$1$i$i$i = $152; //@line 13573
            $$18$i$i$i = $153; //@line 13573
            break L88;
           } else {
            __THREW__ = 0; //@line 13576
            invoke_viii(16, $88 | 0, 2824, 242); //@line 13577
            __THREW__ = 0; //@line 13578
            label = 64; //@line 13579
            break L88;
           }
          }
          HEAP32[$7 >> 2] = 1; //@line 13583
          $157 = $3 + 24 | 0; //@line 13585
          $164 = ($85 - $86 | 0) / 72 | 0; //@line 13592
          $165 = ___remdi3(HEAP32[$157 >> 2] | 0, HEAP32[$157 + 4 >> 2] | 0, $164 | 0, 0) | 0; //@line 13593
          do {
           if ($164 >>> 0 > $165 >>> 0) {
            __THREW__ = 0; //@line 13600
            invoke_vii(120, $8 | 0, $86 + ($165 * 72 | 0) | 0); //@line 13601
            $171 = __THREW__; //@line 13602
            __THREW__ = 0; //@line 13602
            if ($171 & 1) {
             label = 82; //@line 13605
             break;
            }
            __THREW__ = 0; //@line 13610
            invoke_viii(28, $7 + 40 | 0, $8 | 0, $8 + 72 | 0); //@line 13611
            $175 = __THREW__; //@line 13612
            __THREW__ = 0; //@line 13612
            if ($175 & 1) {
             $205 = ___cxa_find_matching_catch_2() | 0; //@line 13615
             $206 = tempRet0; //@line 13616
             $207 = $8 + 52 | 0; //@line 13617
             if ((HEAP8[$207 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$207 >> 2] | 0); //@line 13623
             }
             $212 = $8 + 40 | 0; //@line 13625
             $213 = HEAP32[$212 >> 2] | 0; //@line 13626
             if ($213 | 0) {
              $215 = $8 + 44 | 0; //@line 13629
              $216 = HEAP32[$215 >> 2] | 0; //@line 13630
              do {
               if (($216 | 0) == ($213 | 0)) {
                $227 = $213; //@line 13634
               } else {
                $218 = $8 + 48 | 0; //@line 13636
                $220 = $216; //@line 13637
                while (1) {
                 $219 = $220 + -72 | 0; //@line 13639
                 HEAP32[$215 >> 2] = $219; //@line 13640
                 __THREW__ = 0; //@line 13641
                 HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 13642
                 invoke_viii(13, $$byval_copy13 | 0, $218 | 0, $219 | 0); //@line 13643
                 $221 = __THREW__; //@line 13644
                 __THREW__ = 0; //@line 13644
                 if ($221 & 1) {
                  label = 90; //@line 13647
                  break;
                 }
                 $220 = HEAP32[$215 >> 2] | 0; //@line 13650
                 if (($220 | 0) == ($213 | 0)) {
                  label = 91; //@line 13653
                  break;
                 }
                }
                if ((label | 0) == 90) {
                 $225 = ___cxa_find_matching_catch_3(0) | 0; //@line 13660
                 ___clang_call_terminate($225); //@line 13662
                } else if ((label | 0) == 91) {
                 $227 = HEAP32[$212 >> 2] | 0; //@line 13667
                 break;
                }
               }
              } while (0);
              __ZdlPv($227); //@line 13672
             }
             $228 = $8 + 4 | 0; //@line 13674
             if ((HEAP8[$228 + 11 >> 0] | 0) >= 0) {
              $$0$i$i$i = $205; //@line 13679
              $$07$i$i$i = $206; //@line 13679
              break;
             }
             __ZdlPv(HEAP32[$228 >> 2] | 0); //@line 13683
             $$0$i$i$i = $205; //@line 13684
             $$07$i$i$i = $206; //@line 13684
             break;
            }
            $177 = $8 + 52 | 0; //@line 13687
            if ((HEAP8[$177 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$177 >> 2] | 0); //@line 13693
            }
            $182 = $8 + 40 | 0; //@line 13695
            $183 = HEAP32[$182 >> 2] | 0; //@line 13696
            if ($183 | 0) {
             $185 = $8 + 44 | 0; //@line 13699
             $186 = HEAP32[$185 >> 2] | 0; //@line 13700
             do {
              if (($186 | 0) == ($183 | 0)) {
               $197 = $183; //@line 13704
              } else {
               $188 = $8 + 48 | 0; //@line 13706
               $190 = $186; //@line 13707
               while (1) {
                $189 = $190 + -72 | 0; //@line 13709
                HEAP32[$185 >> 2] = $189; //@line 13710
                __THREW__ = 0; //@line 13711
                HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 13712
                invoke_viii(13, $$byval_copy13 | 0, $188 | 0, $189 | 0); //@line 13713
                $191 = __THREW__; //@line 13714
                __THREW__ = 0; //@line 13714
                if ($191 & 1) {
                 label = 76; //@line 13717
                 break;
                }
                $190 = HEAP32[$185 >> 2] | 0; //@line 13720
                if (($190 | 0) == ($183 | 0)) {
                 label = 77; //@line 13723
                 break;
                }
               }
               if ((label | 0) == 76) {
                $195 = ___cxa_find_matching_catch_3(0) | 0; //@line 13730
                ___clang_call_terminate($195); //@line 13732
               } else if ((label | 0) == 77) {
                $197 = HEAP32[$182 >> 2] | 0; //@line 13737
                break;
               }
              }
             } while (0);
             __ZdlPv($197); //@line 13742
            }
            $198 = $8 + 4 | 0; //@line 13744
            if ((HEAP8[$198 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$198 >> 2] | 0); //@line 13750
            }
            label = 107; //@line 13752
            break L88;
           } else {
            __THREW__ = 0; //@line 13755
            invoke_vi(263, $83 | 0); //@line 13756
            __THREW__ = 0; //@line 13757
            label = 82; //@line 13758
           }
          } while (0);
          if ((label | 0) == 82) {
           $203 = ___cxa_find_matching_catch_2() | 0; //@line 13762
           $$0$i$i$i = $203; //@line 13764
           $$07$i$i$i = tempRet0; //@line 13764
          }
          $$1$i$i$i = $$0$i$i$i; //@line 13766
          $$18$i$i$i = $$07$i$i$i; //@line 13766
          break;
         }
        case 3:
         {
          $233 = $4 + 4 | 0; //@line 13770
          $235 = HEAP8[$233 + 11 >> 0] | 0; //@line 13772
          $236 = $235 << 24 >> 24 < 0; //@line 13773
          $238 = HEAP32[$4 + 8 >> 2] | 0; //@line 13775
          if (!(($236 ? $238 : $235 & 255) | 0)) {
           $242 = ___cxa_allocate_exception(8) | 0; //@line 13780
           __THREW__ = 0; //@line 13781
           invoke_vii(125, $242 | 0, 18725); //@line 13782
           $243 = __THREW__; //@line 13783
           __THREW__ = 0; //@line 13783
           if ($243 & 1) {
            $246 = ___cxa_find_matching_catch_2() | 0; //@line 13786
            $247 = tempRet0; //@line 13787
            ___cxa_free_exception($242 | 0); //@line 13788
            $$1$i$i$i = $246; //@line 13789
            $$18$i$i$i = $247; //@line 13789
            break L88;
           } else {
            __THREW__ = 0; //@line 13792
            invoke_viii(16, $242 | 0, 2824, 242); //@line 13793
            __THREW__ = 0; //@line 13794
            label = 64; //@line 13795
            break L88;
           }
          }
          HEAP32[$7 >> 2] = 3; //@line 13799
          $249 = $3 + 24 | 0; //@line 13801
          $251 = HEAP32[$249 >> 2] | 0; //@line 13803
          $254 = HEAP32[$249 + 4 >> 2] | 0; //@line 13806
          if ($236) {
           $255 = ___remdi3($251 | 0, $254 | 0, $238 | 0, 0) | 0; //@line 13808
           $262 = HEAP32[$233 >> 2] | 0; //@line 13811
           $263 = $255; //@line 13811
          } else {
           $259 = ___remdi3($251 | 0, $254 | 0, $235 & 255 | 0, 0) | 0; //@line 13814
           $262 = $233; //@line 13816
           $263 = $259; //@line 13816
          }
          __THREW__ = 0; //@line 13820
          invoke_iii(65, $80 | 0, HEAP8[$262 + $263 >> 0] | 0) | 0; //@line 13821
          $265 = __THREW__; //@line 13822
          __THREW__ = 0; //@line 13822
          if ($265 & 1) {
           label = 64; //@line 13825
          } else {
           label = 107; //@line 13827
          }
          break;
         }
        default:
         {
          $267 = ___cxa_allocate_exception(8) | 0; //@line 13832
          __THREW__ = 0; //@line 13833
          invoke_vii(125, $267 | 0, 18754); //@line 13834
          $268 = __THREW__; //@line 13835
          __THREW__ = 0; //@line 13835
          if ($268 & 1) {
           $271 = ___cxa_find_matching_catch_2() | 0; //@line 13838
           $272 = tempRet0; //@line 13839
           ___cxa_free_exception($267 | 0); //@line 13840
           $$1$i$i$i = $271; //@line 13841
           $$18$i$i$i = $272; //@line 13841
           break L88;
          } else {
           __THREW__ = 0; //@line 13844
           invoke_viii(16, $267 | 0, 2824, 242); //@line 13845
           __THREW__ = 0; //@line 13846
           label = 64; //@line 13847
           break L88;
          }
         }
        }
       } while (0);
       do {
        if ((label | 0) == 107) {
         __THREW__ = 0; //@line 13855
         $273 = invoke_ii(143, $$val | 0) | 0; //@line 13856
         $274 = __THREW__; //@line 13857
         __THREW__ = 0; //@line 13857
         if ($274 & 1) {
          label = 64; //@line 13860
         } else {
          __THREW__ = 0; //@line 13862
          invoke_vii(120, $9 | 0, $7 | 0); //@line 13863
          $276 = __THREW__; //@line 13864
          __THREW__ = 0; //@line 13864
          if ($276 & 1) {
           label = 64; //@line 13867
          } else {
           __THREW__ = 0; //@line 13869
           invoke_vii(128, $273 | 0, $9 | 0); //@line 13870
           $278 = __THREW__; //@line 13871
           __THREW__ = 0; //@line 13871
           if ($278 & 1) {
            $383 = ___cxa_find_matching_catch_2() | 0; //@line 13874
            $384 = tempRet0; //@line 13875
            $385 = $9 + 52 | 0; //@line 13876
            if ((HEAP8[$385 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$385 >> 2] | 0); //@line 13882
            }
            $390 = $9 + 40 | 0; //@line 13884
            $391 = HEAP32[$390 >> 2] | 0; //@line 13885
            if ($391 | 0) {
             $393 = $9 + 44 | 0; //@line 13888
             $394 = HEAP32[$393 >> 2] | 0; //@line 13889
             do {
              if (($394 | 0) == ($391 | 0)) {
               $405 = $391; //@line 13893
              } else {
               $396 = $9 + 48 | 0; //@line 13895
               $398 = $394; //@line 13896
               while (1) {
                $397 = $398 + -72 | 0; //@line 13898
                HEAP32[$393 >> 2] = $397; //@line 13899
                __THREW__ = 0; //@line 13900
                HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 13901
                invoke_viii(13, $$byval_copy13 | 0, $396 | 0, $397 | 0); //@line 13902
                $399 = __THREW__; //@line 13903
                __THREW__ = 0; //@line 13903
                if ($399 & 1) {
                 label = 165; //@line 13906
                 break;
                }
                $398 = HEAP32[$393 >> 2] | 0; //@line 13909
                if (($398 | 0) == ($391 | 0)) {
                 label = 166; //@line 13912
                 break;
                }
               }
               if ((label | 0) == 165) {
                $403 = ___cxa_find_matching_catch_3(0) | 0; //@line 13919
                ___clang_call_terminate($403); //@line 13921
               } else if ((label | 0) == 166) {
                $405 = HEAP32[$390 >> 2] | 0; //@line 13926
                break;
               }
              }
             } while (0);
             __ZdlPv($405); //@line 13931
            }
            $406 = $9 + 4 | 0; //@line 13933
            if ((HEAP8[$406 + 11 >> 0] | 0) >= 0) {
             $$1$i$i$i = $383; //@line 13938
             $$18$i$i$i = $384; //@line 13938
             break;
            }
            __ZdlPv(HEAP32[$406 >> 2] | 0); //@line 13942
            $$1$i$i$i = $383; //@line 13943
            $$18$i$i$i = $384; //@line 13943
            break;
           }
           $280 = $9 + 52 | 0; //@line 13946
           if ((HEAP8[$280 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$280 >> 2] | 0); //@line 13952
           }
           $285 = $9 + 40 | 0; //@line 13954
           $286 = HEAP32[$285 >> 2] | 0; //@line 13955
           if ($286 | 0) {
            $288 = $9 + 44 | 0; //@line 13958
            $289 = HEAP32[$288 >> 2] | 0; //@line 13959
            do {
             if (($289 | 0) == ($286 | 0)) {
              $300 = $286; //@line 13963
             } else {
              $291 = $9 + 48 | 0; //@line 13965
              $293 = $289; //@line 13966
              while (1) {
               $292 = $293 + -72 | 0; //@line 13968
               HEAP32[$288 >> 2] = $292; //@line 13969
               __THREW__ = 0; //@line 13970
               HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 13971
               invoke_viii(13, $$byval_copy13 | 0, $291 | 0, $292 | 0); //@line 13972
               $294 = __THREW__; //@line 13973
               __THREW__ = 0; //@line 13973
               if ($294 & 1) {
                label = 117; //@line 13976
                break;
               }
               $293 = HEAP32[$288 >> 2] | 0; //@line 13979
               if (($293 | 0) == ($286 | 0)) {
                label = 118; //@line 13982
                break;
               }
              }
              if ((label | 0) == 117) {
               $298 = ___cxa_find_matching_catch_3(0) | 0; //@line 13989
               ___clang_call_terminate($298); //@line 13991
              } else if ((label | 0) == 118) {
               $300 = HEAP32[$285 >> 2] | 0; //@line 13996
               break;
              }
             }
            } while (0);
            __ZdlPv($300); //@line 14001
           }
           $301 = $9 + 4 | 0; //@line 14003
           if ((HEAP8[$301 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$301 >> 2] | 0); //@line 14009
           }
           $306 = $7 + 52 | 0; //@line 14011
           if ((HEAP8[$306 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$306 >> 2] | 0); //@line 14017
           }
           $311 = $7 + 40 | 0; //@line 14019
           $312 = HEAP32[$311 >> 2] | 0; //@line 14020
           if ($312 | 0) {
            $314 = $7 + 44 | 0; //@line 14023
            $315 = HEAP32[$314 >> 2] | 0; //@line 14024
            do {
             if (($315 | 0) == ($312 | 0)) {
              $326 = $312; //@line 14028
             } else {
              $317 = $7 + 48 | 0; //@line 14030
              $319 = $315; //@line 14031
              while (1) {
               $318 = $319 + -72 | 0; //@line 14033
               HEAP32[$314 >> 2] = $318; //@line 14034
               __THREW__ = 0; //@line 14035
               HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14036
               invoke_viii(13, $$byval_copy13 | 0, $317 | 0, $318 | 0); //@line 14037
               $320 = __THREW__; //@line 14038
               __THREW__ = 0; //@line 14038
               if ($320 & 1) {
                label = 129; //@line 14041
                break;
               }
               $319 = HEAP32[$314 >> 2] | 0; //@line 14044
               if (($319 | 0) == ($312 | 0)) {
                label = 130; //@line 14047
                break;
               }
              }
              if ((label | 0) == 129) {
               $324 = ___cxa_find_matching_catch_3(0) | 0; //@line 14054
               ___clang_call_terminate($324); //@line 14056
              } else if ((label | 0) == 130) {
               $326 = HEAP32[$311 >> 2] | 0; //@line 14061
               break;
              }
             }
            } while (0);
            __ZdlPv($326); //@line 14066
           }
           if ((HEAP8[$80 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$80 >> 2] | 0); //@line 14073
           }
           $331 = $4 + 52 | 0; //@line 14075
           if ((HEAP8[$331 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$331 >> 2] | 0); //@line 14081
           }
           $336 = $4 + 40 | 0; //@line 14083
           $337 = HEAP32[$336 >> 2] | 0; //@line 14084
           if ($337 | 0) {
            $339 = $4 + 44 | 0; //@line 14087
            $340 = HEAP32[$339 >> 2] | 0; //@line 14088
            do {
             if (($340 | 0) == ($337 | 0)) {
              $351 = $337; //@line 14092
             } else {
              $342 = $4 + 48 | 0; //@line 14094
              $344 = $340; //@line 14095
              while (1) {
               $343 = $344 + -72 | 0; //@line 14097
               HEAP32[$339 >> 2] = $343; //@line 14098
               __THREW__ = 0; //@line 14099
               HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14100
               invoke_viii(13, $$byval_copy13 | 0, $342 | 0, $343 | 0); //@line 14101
               $345 = __THREW__; //@line 14102
               __THREW__ = 0; //@line 14102
               if ($345 & 1) {
                label = 141; //@line 14105
                break;
               }
               $344 = HEAP32[$339 >> 2] | 0; //@line 14108
               if (($344 | 0) == ($337 | 0)) {
                label = 142; //@line 14111
                break;
               }
              }
              if ((label | 0) == 141) {
               $349 = ___cxa_find_matching_catch_3(0) | 0; //@line 14118
               ___clang_call_terminate($349); //@line 14120
              } else if ((label | 0) == 142) {
               $351 = HEAP32[$336 >> 2] | 0; //@line 14125
               break;
              }
             }
            } while (0);
            __ZdlPv($351); //@line 14130
           }
           $352 = $4 + 4 | 0; //@line 14132
           if ((HEAP8[$352 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$352 >> 2] | 0); //@line 14138
           }
           $357 = $3 + 52 | 0; //@line 14140
           if ((HEAP8[$357 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$357 >> 2] | 0); //@line 14146
           }
           $362 = $3 + 40 | 0; //@line 14148
           $363 = HEAP32[$362 >> 2] | 0; //@line 14149
           if ($363 | 0) {
            $365 = $3 + 44 | 0; //@line 14152
            $366 = HEAP32[$365 >> 2] | 0; //@line 14153
            do {
             if (($366 | 0) == ($363 | 0)) {
              $377 = $363; //@line 14157
             } else {
              $368 = $3 + 48 | 0; //@line 14159
              $370 = $366; //@line 14160
              while (1) {
               $369 = $370 + -72 | 0; //@line 14162
               HEAP32[$365 >> 2] = $369; //@line 14163
               __THREW__ = 0; //@line 14164
               HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14165
               invoke_viii(13, $$byval_copy13 | 0, $368 | 0, $369 | 0); //@line 14166
               $371 = __THREW__; //@line 14167
               __THREW__ = 0; //@line 14167
               if ($371 & 1) {
                label = 153; //@line 14170
                break;
               }
               $370 = HEAP32[$365 >> 2] | 0; //@line 14173
               if (($370 | 0) == ($363 | 0)) {
                label = 154; //@line 14176
                break;
               }
              }
              if ((label | 0) == 153) {
               $375 = ___cxa_find_matching_catch_3(0) | 0; //@line 14183
               ___clang_call_terminate($375); //@line 14185
              } else if ((label | 0) == 154) {
               $377 = HEAP32[$362 >> 2] | 0; //@line 14190
               break;
              }
             }
            } while (0);
            __ZdlPv($377); //@line 14195
           }
           $378 = $3 + 4 | 0; //@line 14197
           if ((HEAP8[$378 + 11 >> 0] | 0) >= 0) {
            STACKTOP = sp; //@line 14202
            return;
           }
           __ZdlPv(HEAP32[$378 >> 2] | 0); //@line 14205
           STACKTOP = sp; //@line 14206
           return;
          }
         }
        }
       } while (0);
       if ((label | 0) == 64) {
        $154 = ___cxa_find_matching_catch_2() | 0; //@line 14212
        $$1$i$i$i = $154; //@line 14214
        $$18$i$i$i = tempRet0; //@line 14214
       }
       $411 = $7 + 52 | 0; //@line 14216
       if ((HEAP8[$411 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$411 >> 2] | 0); //@line 14222
       }
       $416 = $7 + 40 | 0; //@line 14224
       $417 = HEAP32[$416 >> 2] | 0; //@line 14225
       if ($417 | 0) {
        $419 = $7 + 44 | 0; //@line 14228
        $420 = HEAP32[$419 >> 2] | 0; //@line 14229
        do {
         if (($420 | 0) == ($417 | 0)) {
          $431 = $417; //@line 14233
         } else {
          $422 = $7 + 48 | 0; //@line 14235
          $424 = $420; //@line 14236
          while (1) {
           $423 = $424 + -72 | 0; //@line 14238
           HEAP32[$419 >> 2] = $423; //@line 14239
           __THREW__ = 0; //@line 14240
           HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14241
           invoke_viii(13, $$byval_copy13 | 0, $422 | 0, $423 | 0); //@line 14242
           $425 = __THREW__; //@line 14243
           __THREW__ = 0; //@line 14243
           if ($425 & 1) {
            label = 177; //@line 14246
            break;
           }
           $424 = HEAP32[$419 >> 2] | 0; //@line 14249
           if (($424 | 0) == ($417 | 0)) {
            label = 178; //@line 14252
            break;
           }
          }
          if ((label | 0) == 177) {
           $429 = ___cxa_find_matching_catch_3(0) | 0; //@line 14259
           ___clang_call_terminate($429); //@line 14261
          } else if ((label | 0) == 178) {
           $431 = HEAP32[$416 >> 2] | 0; //@line 14266
           break;
          }
         }
        } while (0);
        __ZdlPv($431); //@line 14271
       }
       if ((HEAP8[$80 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$80 >> 2] | 0); //@line 14278
       }
       $$2$i$i$i = $$1$i$i$i; //@line 14280
       $$29$i$i$i = $$18$i$i$i; //@line 14280
      }
     }
    }
   } while (0);
   if ((label | 0) == 38) {
    $94 = ___cxa_find_matching_catch_2() | 0; //@line 14286
    $$2$i$i$i = $94; //@line 14288
    $$29$i$i$i = tempRet0; //@line 14288
   }
   $442 = $4 + 52 | 0; //@line 14290
   if ((HEAP8[$442 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$442 >> 2] | 0); //@line 14296
   }
   $447 = $4 + 40 | 0; //@line 14298
   $448 = HEAP32[$447 >> 2] | 0; //@line 14299
   if ($448 | 0) {
    $450 = $4 + 44 | 0; //@line 14302
    $451 = HEAP32[$450 >> 2] | 0; //@line 14303
    do {
     if (($451 | 0) == ($448 | 0)) {
      $462 = $448; //@line 14307
     } else {
      $453 = $4 + 48 | 0; //@line 14309
      $455 = $451; //@line 14310
      while (1) {
       $454 = $455 + -72 | 0; //@line 14312
       HEAP32[$450 >> 2] = $454; //@line 14313
       __THREW__ = 0; //@line 14314
       HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14315
       invoke_viii(13, $$byval_copy13 | 0, $453 | 0, $454 | 0); //@line 14316
       $456 = __THREW__; //@line 14317
       __THREW__ = 0; //@line 14317
       if ($456 & 1) {
        label = 193; //@line 14320
        break;
       }
       $455 = HEAP32[$450 >> 2] | 0; //@line 14323
       if (($455 | 0) == ($448 | 0)) {
        label = 194; //@line 14326
        break;
       }
      }
      if ((label | 0) == 193) {
       $460 = ___cxa_find_matching_catch_3(0) | 0; //@line 14333
       ___clang_call_terminate($460); //@line 14335
      } else if ((label | 0) == 194) {
       $462 = HEAP32[$447 >> 2] | 0; //@line 14340
       break;
      }
     }
    } while (0);
    __ZdlPv($462); //@line 14345
   }
   $463 = $4 + 4 | 0; //@line 14347
   if ((HEAP8[$463 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$463 >> 2] | 0); //@line 14353
    $$3$i$i$i = $$2$i$i$i; //@line 14354
    $$310$i$i$i = $$29$i$i$i; //@line 14354
   } else {
    $$3$i$i$i = $$2$i$i$i; //@line 14356
    $$310$i$i$i = $$29$i$i$i; //@line 14356
   }
  }
 }
 if ((label | 0) == 37) {
  $92 = ___cxa_find_matching_catch_2() | 0; //@line 14361
  $$3$i$i$i = $92; //@line 14363
  $$310$i$i$i = tempRet0; //@line 14363
 }
 $468 = $3 + 52 | 0; //@line 14365
 if ((HEAP8[$468 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$468 >> 2] | 0); //@line 14371
 }
 $473 = $3 + 40 | 0; //@line 14373
 $474 = HEAP32[$473 >> 2] | 0; //@line 14374
 if ($474 | 0) {
  $476 = $3 + 44 | 0; //@line 14377
  $477 = HEAP32[$476 >> 2] | 0; //@line 14378
  do {
   if (($477 | 0) == ($474 | 0)) {
    $488 = $474; //@line 14382
   } else {
    $479 = $3 + 48 | 0; //@line 14384
    $481 = $477; //@line 14385
    while (1) {
     $480 = $481 + -72 | 0; //@line 14387
     HEAP32[$476 >> 2] = $480; //@line 14388
     __THREW__ = 0; //@line 14389
     HEAP8[$$byval_copy13 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14390
     invoke_viii(13, $$byval_copy13 | 0, $479 | 0, $480 | 0); //@line 14391
     $482 = __THREW__; //@line 14392
     __THREW__ = 0; //@line 14392
     if ($482 & 1) {
      label = 205; //@line 14395
      break;
     }
     $481 = HEAP32[$476 >> 2] | 0; //@line 14398
     if (($481 | 0) == ($474 | 0)) {
      label = 206; //@line 14401
      break;
     }
    }
    if ((label | 0) == 205) {
     $486 = ___cxa_find_matching_catch_3(0) | 0; //@line 14408
     ___clang_call_terminate($486); //@line 14410
    } else if ((label | 0) == 206) {
     $488 = HEAP32[$473 >> 2] | 0; //@line 14415
     break;
    }
   }
  } while (0);
  __ZdlPv($488); //@line 14420
 }
 $489 = $3 + 4 | 0; //@line 14422
 if ((HEAP8[$489 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$3$i$i$i | 0); //@line 14427
 }
 __ZdlPv(HEAP32[$489 >> 2] | 0); //@line 14431
 ___resumeException($$3$i$i$i | 0); //@line 14432
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$0$lcssa$i$i$i$i = 0, $$0$lcssa$i34$i$i$i = 0, $$0$ph$i30$i$i$i = 0, $$023$i$i$i$i = 0, $$023$i$i$ph$i$i = 0, $$023$i32$i$i$i = 0, $$06$i$i$i = 0, $$1$i$i$i = 0, $$17$i$i$i = 0, $$byval_copy15 = 0, $$byval_copy2 = 0, $$sroa$0135$0$in$i$i$i = 0, $$sroa$0139$0$i$i$i = 0, $$val = 0, $10 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $129 = 0, $13 = 0, $133 = 0, $135 = 0, $137 = 0, $14 = 0, $142 = 0, $144 = 0, $146 = 0, $152 = 0, $153 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $169 = 0, $171 = 0, $176 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $191 = 0, $192 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $202 = 0, $204 = 0, $209 = 0, $21 = 0, $210 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $222 = 0, $224 = 0, $225 = 0, $230 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $248 = 0, $250 = 0, $255 = 0, $260 = 0, $261 = 0, $263 = 0, $264 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $273 = 0, $275 = 0, $28 = 0, $280 = 0, $285 = 0, $286 = 0, $288 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $297 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $305 = 0, $310 = 0, $311 = 0, $313 = 0, $314 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $323 = 0, $325 = 0, $326 = 0, $33 = 0, $331 = 0, $332 = 0, $333 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $351 = 0, $353 = 0, $354 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $366 = 0, $367 = 0, $369 = 0, $370 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $379 = 0, $38 = 0, $381 = 0, $382 = 0, $387 = 0, $392 = 0, $393 = 0, $395 = 0, $396 = 0, $398 = 0, $399 = 0, $4 = 0, $400 = 0, $401 = 0, $405 = 0, $407 = 0, $412 = 0, $417 = 0, $418 = 0, $420 = 0, $421 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $430 = 0, $432 = 0, $437 = 0, $442 = 0, $443 = 0, $445 = 0, $446 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $455 = 0, $457 = 0, $458 = 0, $46 = 0, $463 = 0, $468 = 0, $469 = 0, $47 = 0, $471 = 0, $472 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $481 = 0, $483 = 0, $484 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $9 = 0, $95 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9480
 STACKTOP = STACKTOP + 464 | 0; //@line 9481
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(464); //@line 9481
 $$byval_copy15 = sp + 452 | 0; //@line 9482
 $$byval_copy2 = sp + 448 | 0; //@line 9483
 $2 = sp + 360 | 0; //@line 9484
 $3 = sp + 288 | 0; //@line 9485
 $4 = sp + 216 | 0; //@line 9486
 $5 = sp + 144 | 0; //@line 9487
 $6 = sp + 444 | 0; //@line 9488
 $7 = sp + 440 | 0; //@line 9489
 $8 = sp + 436 | 0; //@line 9490
 $9 = sp + 432 | 0; //@line 9491
 $10 = sp + 72 | 0; //@line 9492
 $11 = sp; //@line 9493
 $$val = HEAP32[$1 >> 2] | 0; //@line 9494
 __ZN5Stack3popEv($2, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 9496
 __THREW__ = 0; //@line 9497
 $13 = invoke_ii(143, $$val | 0) | 0; //@line 9498
 $14 = __THREW__; //@line 9499
 __THREW__ = 0; //@line 9499
 if ($14 & 1) {
  label = 9; //@line 9502
 } else {
  __THREW__ = 0; //@line 9504
  invoke_vii(131, $3 | 0, $13 | 0); //@line 9505
  $16 = __THREW__; //@line 9506
  __THREW__ = 0; //@line 9506
  if ($16 & 1) {
   label = 9; //@line 9509
  } else {
   $18 = $4 + 4 | 0; //@line 9511
   HEAP32[$18 >> 2] = 0; //@line 9512
   HEAP32[$18 + 4 >> 2] = 0; //@line 9512
   HEAP32[$18 + 8 >> 2] = 0; //@line 9512
   $19 = $4 + 40 | 0; //@line 9513
   HEAP32[$19 >> 2] = 0; //@line 9514
   HEAP32[$19 + 4 >> 2] = 0; //@line 9514
   HEAP32[$19 + 8 >> 2] = 0; //@line 9514
   HEAP32[$19 + 12 >> 2] = 0; //@line 9514
   HEAP32[$19 + 16 >> 2] = 0; //@line 9514
   HEAP32[$19 + 20 >> 2] = 0; //@line 9514
   $20 = $5 + 4 | 0; //@line 9515
   HEAP32[$20 >> 2] = 0; //@line 9516
   HEAP32[$20 + 4 >> 2] = 0; //@line 9516
   HEAP32[$20 + 8 >> 2] = 0; //@line 9516
   $21 = $5 + 40 | 0; //@line 9517
   HEAP32[$21 >> 2] = 0; //@line 9518
   HEAP32[$21 + 4 >> 2] = 0; //@line 9518
   HEAP32[$21 + 8 >> 2] = 0; //@line 9518
   HEAP32[$21 + 12 >> 2] = 0; //@line 9518
   HEAP32[$21 + 16 >> 2] = 0; //@line 9518
   HEAP32[$21 + 20 >> 2] = 0; //@line 9518
   L4 : do {
    if ((HEAP32[$2 >> 2] | 0) == 2) {
     if (!(HEAP32[$2 + 16 >> 2] | 0)) {
      $27 = $2 + 24 | 0; //@line 9527
      $28 = $27; //@line 9528
      $30 = HEAP32[$28 >> 2] | 0; //@line 9530
      $33 = HEAP32[$28 + 4 >> 2] | 0; //@line 9533
      if (($33 | 0) >= 0) {
       $35 = $3 + 40 | 0; //@line 9536
       $36 = $3 + 44 | 0; //@line 9537
       $38 = HEAP32[$35 >> 2] | 0; //@line 9539
       if (!($33 >>> 0 > 0 | (($33 | 0) == 0 ? $30 >>> 0 > (((HEAP32[$36 >> 2] | 0) - $38 | 0) / 72 | 0) >>> 0 : 0))) {
        L10 : do {
         switch (HEAP32[$3 >> 2] | 0) {
         case 1:
          {
           HEAP32[$4 >> 2] = 1; //@line 9552
           HEAP32[$6 >> 2] = $38; //@line 9554
           HEAP32[$7 >> 2] = $38 + ($30 * 72 | 0); //@line 9557
           __THREW__ = 0; //@line 9558
           HEAP32[$$byval_copy2 >> 2] = HEAP32[$6 >> 2]; //@line 9559
           HEAP32[$$byval_copy15 >> 2] = HEAP32[$7 >> 2]; //@line 9560
           invoke_viii(26, $4 + 40 | 0, $$byval_copy2 | 0, $$byval_copy15 | 0); //@line 9561
           $59 = __THREW__; //@line 9562
           __THREW__ = 0; //@line 9562
           if ($59 & 1) {
            label = 11; //@line 9565
            break L4;
           }
           HEAP32[$5 >> 2] = 1; //@line 9568
           HEAP32[$8 >> 2] = (HEAP32[$35 >> 2] | 0) + ((HEAP32[$27 >> 2] | 0) * 72 | 0); //@line 9578
           HEAP32[$9 >> 2] = HEAP32[$36 >> 2]; //@line 9580
           __THREW__ = 0; //@line 9581
           HEAP32[$$byval_copy2 >> 2] = HEAP32[$8 >> 2]; //@line 9582
           HEAP32[$$byval_copy15 >> 2] = HEAP32[$9 >> 2]; //@line 9583
           invoke_viii(26, $5 + 40 | 0, $$byval_copy2 | 0, $$byval_copy15 | 0); //@line 9584
           $71 = __THREW__; //@line 9585
           __THREW__ = 0; //@line 9585
           if ($71 & 1) {
            label = 11; //@line 9588
            break L4;
           }
           break;
          }
         case 3:
          {
           HEAP32[$4 >> 2] = 3; //@line 9594
           $73 = $3 + 4 | 0; //@line 9595
           $74 = $73 + 11 | 0; //@line 9596
           $78 = (HEAP8[$74 >> 0] | 0) < 0 ? HEAP32[$73 >> 2] | 0 : $73; //@line 9600
           $79 = $78 + $30 | 0; //@line 9601
           $80 = $18 + 11 | 0; //@line 9602
           if ($30 >>> 0 > 10) {
            __THREW__ = 0; //@line 9606
            invoke_viiiiiii(1, $18 | 0, 10, $30 + -10 | 0, 0, 0, 0, 0); //@line 9607
            $83 = __THREW__; //@line 9608
            __THREW__ = 0; //@line 9608
            if ($83 & 1) {
             label = 11; //@line 9611
             break L4;
            }
            $$023$i$i$ph$i$i = (HEAP8[$80 >> 0] | 0) < 0 ? HEAP32[$18 >> 2] | 0 : $18; //@line 9618
            label = 19; //@line 9619
           } else {
            if (!$30) {
             $$0$lcssa$i$i$i$i = $18; //@line 9623
            } else {
             $$023$i$i$ph$i$i = $18; //@line 9625
             label = 19; //@line 9626
            }
           }
           if ((label | 0) == 19) {
            $$023$i$i$i$i = $$023$i$i$ph$i$i; //@line 9630
            $$sroa$0135$0$in$i$i$i = $78; //@line 9630
            while (1) {
             HEAP8[$$023$i$i$i$i >> 0] = HEAP8[$$sroa$0135$0$in$i$i$i >> 0] | 0; //@line 9633
             $$sroa$0135$0$in$i$i$i = $$sroa$0135$0$in$i$i$i + 1 | 0; //@line 9634
             if (($$sroa$0135$0$in$i$i$i | 0) == ($79 | 0)) {
              break;
             } else {
              $$023$i$i$i$i = $$023$i$i$i$i + 1 | 0; //@line 9640
             }
            }
            $$0$lcssa$i$i$i$i = $$023$i$i$ph$i$i + $30 | 0; //@line 9644
           }
           HEAP8[$$0$lcssa$i$i$i$i >> 0] = 0; //@line 9646
           if ((HEAP8[$80 >> 0] | 0) < 0) {
            HEAP32[$4 + 8 >> 2] = $30; //@line 9651
           } else {
            HEAP8[$80 >> 0] = $30; //@line 9654
           }
           HEAP32[$5 >> 2] = 3; //@line 9656
           $95 = HEAP8[$74 >> 0] | 0; //@line 9657
           if ($95 << 24 >> 24 < 0) {
            $97 = HEAP32[$73 >> 2] | 0; //@line 9660
            $116 = $97; //@line 9670
            $117 = HEAP32[$3 + 8 >> 2] | 0; //@line 9670
            $119 = $97 + (HEAP32[$27 >> 2] | 0) | 0; //@line 9670
           } else {
            $116 = $73; //@line 9680
            $117 = $95 & 255; //@line 9680
            $119 = $73 + (HEAP32[$27 >> 2] | 0) | 0; //@line 9680
           }
           $115 = $116 + $117 | 0; //@line 9682
           $120 = $119; //@line 9684
           $121 = $115 - $120 | 0; //@line 9685
           $122 = $20 + 11 | 0; //@line 9686
           $123 = HEAP8[$122 >> 0] | 0; //@line 9687
           $124 = $123 << 24 >> 24 < 0; //@line 9688
           if ($124) {
            $129 = (HEAP32[$5 + 12 >> 2] & 2147483647) + -1 | 0; //@line 9694
           } else {
            $129 = 10; //@line 9696
           }
           if ($121 >>> 0 > $129 >>> 0) {
            $133 = $124 ? HEAP32[$5 + 8 >> 2] | 0 : $123 & 255; //@line 9703
            __THREW__ = 0; //@line 9705
            invoke_viiiiiii(1, $20 | 0, $129 | 0, $121 - $129 | 0, $133 | 0, 0, $133 | 0, 0); //@line 9706
            $135 = __THREW__; //@line 9707
            __THREW__ = 0; //@line 9707
            if ($135 & 1) {
             label = 11; //@line 9710
             break L4;
            }
            $137 = HEAP8[$122 >> 0] | 0; //@line 9714
           } else {
            $137 = $123; //@line 9716
           }
           $$0$ph$i30$i$i$i = $137 << 24 >> 24 < 0 ? HEAP32[$20 >> 2] | 0 : $20; //@line 9720
           if (($119 | 0) == ($115 | 0)) {
            $$0$lcssa$i34$i$i$i = $$0$ph$i30$i$i$i; //@line 9723
           } else {
            $$023$i32$i$i$i = $$0$ph$i30$i$i$i; //@line 9725
            $$sroa$0139$0$i$i$i = $120; //@line 9725
            $142 = $119; //@line 9725
            while (1) {
             HEAP8[$$023$i32$i$i$i >> 0] = HEAP8[$142 >> 0] | 0; //@line 9728
             $144 = $$sroa$0139$0$i$i$i + 1 | 0; //@line 9730
             $146 = $$023$i32$i$i$i + 1 | 0; //@line 9732
             if (($144 | 0) == ($115 | 0)) {
              $$0$lcssa$i34$i$i$i = $146; //@line 9735
              break;
             } else {
              $$023$i32$i$i$i = $146; //@line 9738
              $$sroa$0139$0$i$i$i = $144; //@line 9738
              $142 = $144; //@line 9738
             }
            }
           }
           HEAP8[$$0$lcssa$i34$i$i$i >> 0] = 0; //@line 9742
           if ((HEAP8[$122 >> 0] | 0) < 0) {
            HEAP32[$5 + 8 >> 2] = $121; //@line 9747
            break L10;
           } else {
            HEAP8[$122 >> 0] = $121; //@line 9751
            break L10;
           }
           break;
          }
         default:
          {
           $152 = ___cxa_allocate_exception(8) | 0; //@line 9757
           __THREW__ = 0; //@line 9758
           invoke_vii(125, $152 | 0, 18080); //@line 9759
           $153 = __THREW__; //@line 9760
           __THREW__ = 0; //@line 9760
           if ($153 & 1) {
            $156 = ___cxa_find_matching_catch_2() | 0; //@line 9763
            $157 = tempRet0; //@line 9764
            ___cxa_free_exception($152 | 0); //@line 9765
            $$0$i$i$i = $157; //@line 9766
            $$06$i$i$i = $156; //@line 9766
            break L4;
           } else {
            __THREW__ = 0; //@line 9769
            invoke_viii(16, $152 | 0, 2824, 242); //@line 9770
            __THREW__ = 0; //@line 9771
            label = 11; //@line 9772
            break L4;
           }
          }
         }
        } while (0);
        __THREW__ = 0; //@line 9778
        $164 = invoke_ii(143, $$val | 0) | 0; //@line 9779
        $165 = __THREW__; //@line 9780
        __THREW__ = 0; //@line 9780
        if ($165 & 1) {
         label = 11; //@line 9783
         break;
        }
        __THREW__ = 0; //@line 9786
        invoke_vii(120, $10 | 0, $4 | 0); //@line 9787
        $167 = __THREW__; //@line 9788
        __THREW__ = 0; //@line 9788
        if ($167 & 1) {
         label = 11; //@line 9791
         break;
        }
        __THREW__ = 0; //@line 9794
        invoke_vii(128, $164 | 0, $10 | 0); //@line 9795
        $169 = __THREW__; //@line 9796
        __THREW__ = 0; //@line 9796
        if ($169 & 1) {
         $331 = ___cxa_find_matching_catch_2() | 0; //@line 9799
         $332 = tempRet0; //@line 9800
         $333 = $10 + 52 | 0; //@line 9801
         if ((HEAP8[$333 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$333 >> 2] | 0); //@line 9807
         }
         $338 = $10 + 40 | 0; //@line 9809
         $339 = HEAP32[$338 >> 2] | 0; //@line 9810
         if ($339 | 0) {
          $341 = $10 + 44 | 0; //@line 9813
          $342 = HEAP32[$341 >> 2] | 0; //@line 9814
          do {
           if (($342 | 0) == ($339 | 0)) {
            $353 = $339; //@line 9818
           } else {
            $344 = $10 + 48 | 0; //@line 9820
            $346 = $342; //@line 9821
            while (1) {
             $345 = $346 + -72 | 0; //@line 9823
             HEAP32[$341 >> 2] = $345; //@line 9824
             __THREW__ = 0; //@line 9825
             HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 9826
             invoke_viii(13, $$byval_copy15 | 0, $344 | 0, $345 | 0); //@line 9827
             $347 = __THREW__; //@line 9828
             __THREW__ = 0; //@line 9828
             if ($347 & 1) {
              label = 129; //@line 9831
              break;
             }
             $346 = HEAP32[$341 >> 2] | 0; //@line 9834
             if (($346 | 0) == ($339 | 0)) {
              label = 130; //@line 9837
              break;
             }
            }
            if ((label | 0) == 129) {
             $351 = ___cxa_find_matching_catch_3(0) | 0; //@line 9844
             ___clang_call_terminate($351); //@line 9846
            } else if ((label | 0) == 130) {
             $353 = HEAP32[$338 >> 2] | 0; //@line 9851
             break;
            }
           }
          } while (0);
          __ZdlPv($353); //@line 9856
         }
         $354 = $10 + 4 | 0; //@line 9858
         if ((HEAP8[$354 + 11 >> 0] | 0) >= 0) {
          $$0$i$i$i = $332; //@line 9863
          $$06$i$i$i = $331; //@line 9863
          break;
         }
         __ZdlPv(HEAP32[$354 >> 2] | 0); //@line 9867
         $$0$i$i$i = $332; //@line 9868
         $$06$i$i$i = $331; //@line 9868
         break;
        }
        $171 = $10 + 52 | 0; //@line 9871
        if ((HEAP8[$171 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$171 >> 2] | 0); //@line 9877
        }
        $176 = $10 + 40 | 0; //@line 9879
        $177 = HEAP32[$176 >> 2] | 0; //@line 9880
        if ($177 | 0) {
         $179 = $10 + 44 | 0; //@line 9883
         $180 = HEAP32[$179 >> 2] | 0; //@line 9884
         do {
          if (($180 | 0) == ($177 | 0)) {
           $191 = $177; //@line 9888
          } else {
           $182 = $10 + 48 | 0; //@line 9890
           $184 = $180; //@line 9891
           while (1) {
            $183 = $184 + -72 | 0; //@line 9893
            HEAP32[$179 >> 2] = $183; //@line 9894
            __THREW__ = 0; //@line 9895
            HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 9896
            invoke_viii(13, $$byval_copy15 | 0, $182 | 0, $183 | 0); //@line 9897
            $185 = __THREW__; //@line 9898
            __THREW__ = 0; //@line 9898
            if ($185 & 1) {
             label = 54; //@line 9901
             break;
            }
            $184 = HEAP32[$179 >> 2] | 0; //@line 9904
            if (($184 | 0) == ($177 | 0)) {
             label = 55; //@line 9907
             break;
            }
           }
           if ((label | 0) == 54) {
            $189 = ___cxa_find_matching_catch_3(0) | 0; //@line 9914
            ___clang_call_terminate($189); //@line 9916
           } else if ((label | 0) == 55) {
            $191 = HEAP32[$176 >> 2] | 0; //@line 9921
            break;
           }
          }
         } while (0);
         __ZdlPv($191); //@line 9926
        }
        $192 = $10 + 4 | 0; //@line 9928
        if ((HEAP8[$192 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$192 >> 2] | 0); //@line 9934
        }
        __THREW__ = 0; //@line 9936
        $197 = invoke_ii(143, $$val | 0) | 0; //@line 9937
        $198 = __THREW__; //@line 9938
        __THREW__ = 0; //@line 9938
        if ($198 & 1) {
         label = 11; //@line 9941
         break;
        }
        __THREW__ = 0; //@line 9944
        invoke_vii(120, $11 | 0, $5 | 0); //@line 9945
        $200 = __THREW__; //@line 9946
        __THREW__ = 0; //@line 9946
        if ($200 & 1) {
         label = 11; //@line 9949
         break;
        }
        __THREW__ = 0; //@line 9952
        invoke_vii(128, $197 | 0, $11 | 0); //@line 9953
        $202 = __THREW__; //@line 9954
        __THREW__ = 0; //@line 9954
        if ($202 & 1) {
         $359 = ___cxa_find_matching_catch_2() | 0; //@line 9957
         $360 = tempRet0; //@line 9958
         $361 = $11 + 52 | 0; //@line 9959
         if ((HEAP8[$361 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$361 >> 2] | 0); //@line 9965
         }
         $366 = $11 + 40 | 0; //@line 9967
         $367 = HEAP32[$366 >> 2] | 0; //@line 9968
         if ($367 | 0) {
          $369 = $11 + 44 | 0; //@line 9971
          $370 = HEAP32[$369 >> 2] | 0; //@line 9972
          do {
           if (($370 | 0) == ($367 | 0)) {
            $381 = $367; //@line 9976
           } else {
            $372 = $11 + 48 | 0; //@line 9978
            $374 = $370; //@line 9979
            while (1) {
             $373 = $374 + -72 | 0; //@line 9981
             HEAP32[$369 >> 2] = $373; //@line 9982
             __THREW__ = 0; //@line 9983
             HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 9984
             invoke_viii(13, $$byval_copy15 | 0, $372 | 0, $373 | 0); //@line 9985
             $375 = __THREW__; //@line 9986
             __THREW__ = 0; //@line 9986
             if ($375 & 1) {
              label = 141; //@line 9989
              break;
             }
             $374 = HEAP32[$369 >> 2] | 0; //@line 9992
             if (($374 | 0) == ($367 | 0)) {
              label = 142; //@line 9995
              break;
             }
            }
            if ((label | 0) == 141) {
             $379 = ___cxa_find_matching_catch_3(0) | 0; //@line 10002
             ___clang_call_terminate($379); //@line 10004
            } else if ((label | 0) == 142) {
             $381 = HEAP32[$366 >> 2] | 0; //@line 10009
             break;
            }
           }
          } while (0);
          __ZdlPv($381); //@line 10014
         }
         $382 = $11 + 4 | 0; //@line 10016
         if ((HEAP8[$382 + 11 >> 0] | 0) >= 0) {
          $$0$i$i$i = $360; //@line 10021
          $$06$i$i$i = $359; //@line 10021
          break;
         }
         __ZdlPv(HEAP32[$382 >> 2] | 0); //@line 10025
         $$0$i$i$i = $360; //@line 10026
         $$06$i$i$i = $359; //@line 10026
         break;
        }
        $204 = $11 + 52 | 0; //@line 10029
        if ((HEAP8[$204 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$204 >> 2] | 0); //@line 10035
        }
        $209 = $11 + 40 | 0; //@line 10037
        $210 = HEAP32[$209 >> 2] | 0; //@line 10038
        if ($210 | 0) {
         $212 = $11 + 44 | 0; //@line 10041
         $213 = HEAP32[$212 >> 2] | 0; //@line 10042
         do {
          if (($213 | 0) == ($210 | 0)) {
           $224 = $210; //@line 10046
          } else {
           $215 = $11 + 48 | 0; //@line 10048
           $217 = $213; //@line 10049
           while (1) {
            $216 = $217 + -72 | 0; //@line 10051
            HEAP32[$212 >> 2] = $216; //@line 10052
            __THREW__ = 0; //@line 10053
            HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10054
            invoke_viii(13, $$byval_copy15 | 0, $215 | 0, $216 | 0); //@line 10055
            $218 = __THREW__; //@line 10056
            __THREW__ = 0; //@line 10056
            if ($218 & 1) {
             label = 69; //@line 10059
             break;
            }
            $217 = HEAP32[$212 >> 2] | 0; //@line 10062
            if (($217 | 0) == ($210 | 0)) {
             label = 70; //@line 10065
             break;
            }
           }
           if ((label | 0) == 69) {
            $222 = ___cxa_find_matching_catch_3(0) | 0; //@line 10072
            ___clang_call_terminate($222); //@line 10074
           } else if ((label | 0) == 70) {
            $224 = HEAP32[$209 >> 2] | 0; //@line 10079
            break;
           }
          }
         } while (0);
         __ZdlPv($224); //@line 10084
        }
        $225 = $11 + 4 | 0; //@line 10086
        if ((HEAP8[$225 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$225 >> 2] | 0); //@line 10092
        }
        $230 = $5 + 52 | 0; //@line 10094
        if ((HEAP8[$230 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$230 >> 2] | 0); //@line 10100
        }
        $235 = $5 + 40 | 0; //@line 10102
        $236 = HEAP32[$235 >> 2] | 0; //@line 10103
        if ($236 | 0) {
         $238 = $5 + 44 | 0; //@line 10106
         $239 = HEAP32[$238 >> 2] | 0; //@line 10107
         do {
          if (($239 | 0) == ($236 | 0)) {
           $250 = $236; //@line 10111
          } else {
           $241 = $5 + 48 | 0; //@line 10113
           $243 = $239; //@line 10114
           while (1) {
            $242 = $243 + -72 | 0; //@line 10116
            HEAP32[$238 >> 2] = $242; //@line 10117
            __THREW__ = 0; //@line 10118
            HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10119
            invoke_viii(13, $$byval_copy15 | 0, $241 | 0, $242 | 0); //@line 10120
            $244 = __THREW__; //@line 10121
            __THREW__ = 0; //@line 10121
            if ($244 & 1) {
             label = 81; //@line 10124
             break;
            }
            $243 = HEAP32[$238 >> 2] | 0; //@line 10127
            if (($243 | 0) == ($236 | 0)) {
             label = 82; //@line 10130
             break;
            }
           }
           if ((label | 0) == 81) {
            $248 = ___cxa_find_matching_catch_3(0) | 0; //@line 10137
            ___clang_call_terminate($248); //@line 10139
           } else if ((label | 0) == 82) {
            $250 = HEAP32[$235 >> 2] | 0; //@line 10144
            break;
           }
          }
         } while (0);
         __ZdlPv($250); //@line 10149
        }
        if ((HEAP8[$20 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$20 >> 2] | 0); //@line 10156
        }
        $255 = $4 + 52 | 0; //@line 10158
        if ((HEAP8[$255 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$255 >> 2] | 0); //@line 10164
        }
        $260 = $4 + 40 | 0; //@line 10166
        $261 = HEAP32[$260 >> 2] | 0; //@line 10167
        if ($261 | 0) {
         $263 = $4 + 44 | 0; //@line 10170
         $264 = HEAP32[$263 >> 2] | 0; //@line 10171
         do {
          if (($264 | 0) == ($261 | 0)) {
           $275 = $261; //@line 10175
          } else {
           $266 = $4 + 48 | 0; //@line 10177
           $268 = $264; //@line 10178
           while (1) {
            $267 = $268 + -72 | 0; //@line 10180
            HEAP32[$263 >> 2] = $267; //@line 10181
            __THREW__ = 0; //@line 10182
            HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10183
            invoke_viii(13, $$byval_copy15 | 0, $266 | 0, $267 | 0); //@line 10184
            $269 = __THREW__; //@line 10185
            __THREW__ = 0; //@line 10185
            if ($269 & 1) {
             label = 93; //@line 10188
             break;
            }
            $268 = HEAP32[$263 >> 2] | 0; //@line 10191
            if (($268 | 0) == ($261 | 0)) {
             label = 94; //@line 10194
             break;
            }
           }
           if ((label | 0) == 93) {
            $273 = ___cxa_find_matching_catch_3(0) | 0; //@line 10201
            ___clang_call_terminate($273); //@line 10203
           } else if ((label | 0) == 94) {
            $275 = HEAP32[$260 >> 2] | 0; //@line 10208
            break;
           }
          }
         } while (0);
         __ZdlPv($275); //@line 10213
        }
        if ((HEAP8[$18 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 10220
        }
        $280 = $3 + 52 | 0; //@line 10222
        if ((HEAP8[$280 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$280 >> 2] | 0); //@line 10228
        }
        $285 = $3 + 40 | 0; //@line 10230
        $286 = HEAP32[$285 >> 2] | 0; //@line 10231
        if ($286 | 0) {
         $288 = HEAP32[$36 >> 2] | 0; //@line 10234
         do {
          if (($288 | 0) == ($286 | 0)) {
           $299 = $286; //@line 10238
          } else {
           $290 = $3 + 48 | 0; //@line 10240
           $292 = $288; //@line 10241
           while (1) {
            $291 = $292 + -72 | 0; //@line 10243
            HEAP32[$36 >> 2] = $291; //@line 10244
            __THREW__ = 0; //@line 10245
            HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10246
            invoke_viii(13, $$byval_copy15 | 0, $290 | 0, $291 | 0); //@line 10247
            $293 = __THREW__; //@line 10248
            __THREW__ = 0; //@line 10248
            if ($293 & 1) {
             label = 105; //@line 10251
             break;
            }
            $292 = HEAP32[$36 >> 2] | 0; //@line 10254
            if (($292 | 0) == ($286 | 0)) {
             label = 106; //@line 10257
             break;
            }
           }
           if ((label | 0) == 105) {
            $297 = ___cxa_find_matching_catch_3(0) | 0; //@line 10264
            ___clang_call_terminate($297); //@line 10266
           } else if ((label | 0) == 106) {
            $299 = HEAP32[$285 >> 2] | 0; //@line 10271
            break;
           }
          }
         } while (0);
         __ZdlPv($299); //@line 10276
        }
        $300 = $3 + 4 | 0; //@line 10278
        if ((HEAP8[$300 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$300 >> 2] | 0); //@line 10284
        }
        $305 = $2 + 52 | 0; //@line 10286
        if ((HEAP8[$305 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$305 >> 2] | 0); //@line 10292
        }
        $310 = $2 + 40 | 0; //@line 10294
        $311 = HEAP32[$310 >> 2] | 0; //@line 10295
        if ($311 | 0) {
         $313 = $2 + 44 | 0; //@line 10298
         $314 = HEAP32[$313 >> 2] | 0; //@line 10299
         do {
          if (($314 | 0) == ($311 | 0)) {
           $325 = $311; //@line 10303
          } else {
           $316 = $2 + 48 | 0; //@line 10305
           $318 = $314; //@line 10306
           while (1) {
            $317 = $318 + -72 | 0; //@line 10308
            HEAP32[$313 >> 2] = $317; //@line 10309
            __THREW__ = 0; //@line 10310
            HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10311
            invoke_viii(13, $$byval_copy15 | 0, $316 | 0, $317 | 0); //@line 10312
            $319 = __THREW__; //@line 10313
            __THREW__ = 0; //@line 10313
            if ($319 & 1) {
             label = 117; //@line 10316
             break;
            }
            $318 = HEAP32[$313 >> 2] | 0; //@line 10319
            if (($318 | 0) == ($311 | 0)) {
             label = 118; //@line 10322
             break;
            }
           }
           if ((label | 0) == 117) {
            $323 = ___cxa_find_matching_catch_3(0) | 0; //@line 10329
            ___clang_call_terminate($323); //@line 10331
           } else if ((label | 0) == 118) {
            $325 = HEAP32[$310 >> 2] | 0; //@line 10336
            break;
           }
          }
         } while (0);
         __ZdlPv($325); //@line 10341
        }
        $326 = $2 + 4 | 0; //@line 10343
        if ((HEAP8[$326 + 11 >> 0] | 0) >= 0) {
         STACKTOP = sp; //@line 10348
         return;
        }
        __ZdlPv(HEAP32[$326 >> 2] | 0); //@line 10351
        STACKTOP = sp; //@line 10352
        return;
       }
      }
      $46 = ___cxa_allocate_exception(8) | 0; //@line 10355
      __THREW__ = 0; //@line 10356
      invoke_vii(125, $46 | 0, 18027); //@line 10357
      $47 = __THREW__; //@line 10358
      __THREW__ = 0; //@line 10358
      if ($47 & 1) {
       $52 = ___cxa_find_matching_catch_2() | 0; //@line 10361
       $53 = tempRet0; //@line 10362
       ___cxa_free_exception($46 | 0); //@line 10363
       $$0$i$i$i = $53; //@line 10364
       $$06$i$i$i = $52; //@line 10364
       break;
      } else {
       __THREW__ = 0; //@line 10367
       invoke_viii(16, $46 | 0, 2824, 242); //@line 10368
       __THREW__ = 0; //@line 10369
       label = 11; //@line 10370
       break;
      }
     } else {
      label = 41; //@line 10374
     }
    } else {
     label = 41; //@line 10377
    }
   } while (0);
   do {
    if ((label | 0) == 41) {
     $158 = ___cxa_allocate_exception(8) | 0; //@line 10382
     __THREW__ = 0; //@line 10383
     invoke_vii(125, $158 | 0, 18115); //@line 10384
     $159 = __THREW__; //@line 10385
     __THREW__ = 0; //@line 10385
     if ($159 & 1) {
      $162 = ___cxa_find_matching_catch_2() | 0; //@line 10388
      $163 = tempRet0; //@line 10389
      ___cxa_free_exception($158 | 0); //@line 10390
      $$0$i$i$i = $163; //@line 10391
      $$06$i$i$i = $162; //@line 10391
      break;
     } else {
      __THREW__ = 0; //@line 10394
      invoke_viii(16, $158 | 0, 2824, 242); //@line 10395
      __THREW__ = 0; //@line 10396
      label = 11; //@line 10397
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $54 = ___cxa_find_matching_catch_2() | 0; //@line 10403
    $$0$i$i$i = tempRet0; //@line 10405
    $$06$i$i$i = $54; //@line 10405
   }
   $387 = $5 + 52 | 0; //@line 10407
   if ((HEAP8[$387 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$387 >> 2] | 0); //@line 10413
   }
   $392 = $5 + 40 | 0; //@line 10415
   $393 = HEAP32[$392 >> 2] | 0; //@line 10416
   if ($393 | 0) {
    $395 = $5 + 44 | 0; //@line 10419
    $396 = HEAP32[$395 >> 2] | 0; //@line 10420
    do {
     if (($396 | 0) == ($393 | 0)) {
      $407 = $393; //@line 10424
     } else {
      $398 = $5 + 48 | 0; //@line 10426
      $400 = $396; //@line 10427
      while (1) {
       $399 = $400 + -72 | 0; //@line 10429
       HEAP32[$395 >> 2] = $399; //@line 10430
       __THREW__ = 0; //@line 10431
       HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10432
       invoke_viii(13, $$byval_copy15 | 0, $398 | 0, $399 | 0); //@line 10433
       $401 = __THREW__; //@line 10434
       __THREW__ = 0; //@line 10434
       if ($401 & 1) {
        label = 153; //@line 10437
        break;
       }
       $400 = HEAP32[$395 >> 2] | 0; //@line 10440
       if (($400 | 0) == ($393 | 0)) {
        label = 154; //@line 10443
        break;
       }
      }
      if ((label | 0) == 153) {
       $405 = ___cxa_find_matching_catch_3(0) | 0; //@line 10450
       ___clang_call_terminate($405); //@line 10452
      } else if ((label | 0) == 154) {
       $407 = HEAP32[$392 >> 2] | 0; //@line 10457
       break;
      }
     }
    } while (0);
    __ZdlPv($407); //@line 10462
   }
   if ((HEAP8[$20 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$20 >> 2] | 0); //@line 10469
   }
   $412 = $4 + 52 | 0; //@line 10471
   if ((HEAP8[$412 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$412 >> 2] | 0); //@line 10477
   }
   $417 = $4 + 40 | 0; //@line 10479
   $418 = HEAP32[$417 >> 2] | 0; //@line 10480
   if ($418 | 0) {
    $420 = $4 + 44 | 0; //@line 10483
    $421 = HEAP32[$420 >> 2] | 0; //@line 10484
    do {
     if (($421 | 0) == ($418 | 0)) {
      $432 = $418; //@line 10488
     } else {
      $423 = $4 + 48 | 0; //@line 10490
      $425 = $421; //@line 10491
      while (1) {
       $424 = $425 + -72 | 0; //@line 10493
       HEAP32[$420 >> 2] = $424; //@line 10494
       __THREW__ = 0; //@line 10495
       HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10496
       invoke_viii(13, $$byval_copy15 | 0, $423 | 0, $424 | 0); //@line 10497
       $426 = __THREW__; //@line 10498
       __THREW__ = 0; //@line 10498
       if ($426 & 1) {
        label = 165; //@line 10501
        break;
       }
       $425 = HEAP32[$420 >> 2] | 0; //@line 10504
       if (($425 | 0) == ($418 | 0)) {
        label = 166; //@line 10507
        break;
       }
      }
      if ((label | 0) == 165) {
       $430 = ___cxa_find_matching_catch_3(0) | 0; //@line 10514
       ___clang_call_terminate($430); //@line 10516
      } else if ((label | 0) == 166) {
       $432 = HEAP32[$417 >> 2] | 0; //@line 10521
       break;
      }
     }
    } while (0);
    __ZdlPv($432); //@line 10526
   }
   if ((HEAP8[$18 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 10533
   }
   $437 = $3 + 52 | 0; //@line 10535
   if ((HEAP8[$437 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$437 >> 2] | 0); //@line 10541
   }
   $442 = $3 + 40 | 0; //@line 10543
   $443 = HEAP32[$442 >> 2] | 0; //@line 10544
   if ($443 | 0) {
    $445 = $3 + 44 | 0; //@line 10547
    $446 = HEAP32[$445 >> 2] | 0; //@line 10548
    do {
     if (($446 | 0) == ($443 | 0)) {
      $457 = $443; //@line 10552
     } else {
      $448 = $3 + 48 | 0; //@line 10554
      $450 = $446; //@line 10555
      while (1) {
       $449 = $450 + -72 | 0; //@line 10557
       HEAP32[$445 >> 2] = $449; //@line 10558
       __THREW__ = 0; //@line 10559
       HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10560
       invoke_viii(13, $$byval_copy15 | 0, $448 | 0, $449 | 0); //@line 10561
       $451 = __THREW__; //@line 10562
       __THREW__ = 0; //@line 10562
       if ($451 & 1) {
        label = 177; //@line 10565
        break;
       }
       $450 = HEAP32[$445 >> 2] | 0; //@line 10568
       if (($450 | 0) == ($443 | 0)) {
        label = 178; //@line 10571
        break;
       }
      }
      if ((label | 0) == 177) {
       $455 = ___cxa_find_matching_catch_3(0) | 0; //@line 10578
       ___clang_call_terminate($455); //@line 10580
      } else if ((label | 0) == 178) {
       $457 = HEAP32[$442 >> 2] | 0; //@line 10585
       break;
      }
     }
    } while (0);
    __ZdlPv($457); //@line 10590
   }
   $458 = $3 + 4 | 0; //@line 10592
   if ((HEAP8[$458 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$458 >> 2] | 0); //@line 10598
    $$1$i$i$i = $$0$i$i$i; //@line 10599
    $$17$i$i$i = $$06$i$i$i; //@line 10599
   } else {
    $$1$i$i$i = $$0$i$i$i; //@line 10601
    $$17$i$i$i = $$06$i$i$i; //@line 10601
   }
  }
 }
 if ((label | 0) == 9) {
  $50 = ___cxa_find_matching_catch_2() | 0; //@line 10606
  $$1$i$i$i = tempRet0; //@line 10608
  $$17$i$i$i = $50; //@line 10608
 }
 $463 = $2 + 52 | 0; //@line 10610
 if ((HEAP8[$463 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$463 >> 2] | 0); //@line 10616
 }
 $468 = $2 + 40 | 0; //@line 10618
 $469 = HEAP32[$468 >> 2] | 0; //@line 10619
 if ($469 | 0) {
  $471 = $2 + 44 | 0; //@line 10622
  $472 = HEAP32[$471 >> 2] | 0; //@line 10623
  do {
   if (($472 | 0) == ($469 | 0)) {
    $483 = $469; //@line 10627
   } else {
    $474 = $2 + 48 | 0; //@line 10629
    $476 = $472; //@line 10630
    while (1) {
     $475 = $476 + -72 | 0; //@line 10632
     HEAP32[$471 >> 2] = $475; //@line 10633
     __THREW__ = 0; //@line 10634
     HEAP8[$$byval_copy15 >> 0] = HEAP8[$$byval_copy2 >> 0] | 0; //@line 10635
     invoke_viii(13, $$byval_copy15 | 0, $474 | 0, $475 | 0); //@line 10636
     $477 = __THREW__; //@line 10637
     __THREW__ = 0; //@line 10637
     if ($477 & 1) {
      label = 189; //@line 10640
      break;
     }
     $476 = HEAP32[$471 >> 2] | 0; //@line 10643
     if (($476 | 0) == ($469 | 0)) {
      label = 190; //@line 10646
      break;
     }
    }
    if ((label | 0) == 189) {
     $481 = ___cxa_find_matching_catch_3(0) | 0; //@line 10653
     ___clang_call_terminate($481); //@line 10655
    } else if ((label | 0) == 190) {
     $483 = HEAP32[$468 >> 2] | 0; //@line 10660
     break;
    }
   }
  } while (0);
  __ZdlPv($483); //@line 10665
 }
 $484 = $2 + 4 | 0; //@line 10667
 if ((HEAP8[$484 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$17$i$i$i | 0); //@line 10672
 }
 __ZdlPv(HEAP32[$484 >> 2] | 0); //@line 10676
 ___resumeException($$17$i$i$i | 0); //@line 10677
}
function __ZN6Parser18parseTypeSignatureENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$014 = 0, $$02729$i$i$i = 0, $$08 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$115 = 0, $$2 = 0, $$2$i$i$i = 0, $$211 = 0, $$3 = 0, $$312 = 0, $$4 = 0, $$413 = 0, $$phi$trans$insert287 = 0, $$pre = 0, $$pre286 = 0, $$sink$i = 0, $$sroa$0$0$copyload$i$i = 0, $$sroa$0$0$copyload$i$i3$i$i = 0, $$sroa$4$0$i = 0, $$sroa$4$1$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $119 = 0, $120 = 0, $125 = 0, $127 = 0, $129 = 0, $131 = 0, $133 = 0, $135 = 0, $137 = 0, $140 = 0, $143 = 0, $144 = 0, $149 = 0, $152 = 0, $155 = 0, $156 = 0, $16 = 0, $161 = 0, $162 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $18 = 0, $183 = 0, $185 = 0, $186 = 0, $19 = 0, $190 = 0, $191 = 0, $193 = 0, $195 = 0, $199 = 0, $20 = 0, $200 = 0, $205 = 0, $208 = 0, $211 = 0, $212 = 0, $217 = 0, $219 = 0, $22 = 0, $222 = 0, $226 = 0, $227 = 0, $23 = 0, $231 = 0, $232 = 0, $236 = 0, $239 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $25 = 0, $254 = 0, $255 = 0, $259 = 0, $260 = 0, $264 = 0, $265 = 0, $269 = 0, $272 = 0, $276 = 0, $277 = 0, $278 = 0, $280 = 0, $287 = 0, $289 = 0, $298 = 0, $3 = 0, $300 = 0, $302 = 0, $303 = 0, $305 = 0, $309 = 0, $314 = 0, $316 = 0, $317 = 0, $321 = 0, $324 = 0, $328 = 0, $329 = 0, $333 = 0, $334 = 0, $338 = 0, $341 = 0, $345 = 0, $346 = 0, $347 = 0, $349 = 0, $356 = 0, $357 = 0, $36 = 0, $361 = 0, $362 = 0, $366 = 0, $367 = 0, $371 = 0, $374 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $382 = 0, $389 = 0, $391 = 0, $4 = 0, $400 = 0, $408 = 0, $410 = 0, $417 = 0, $419 = 0, $43 = 0, $432 = 0, $434 = 0, $441 = 0, $443 = 0, $45 = 0, $450 = 0, $451 = 0, $453 = 0, $454 = 0, $456 = 0, $457 = 0, $459 = 0, $461 = 0, $462 = 0, $469 = 0, $47 = 0, $473 = 0, $474 = 0, $481 = 0, $486 = 0, $487 = 0, $489 = 0, $491 = 0, $492 = 0, $494 = 0, $496 = 0, $497 = 0, $5 = 0, $50 = 0, $504 = 0, $508 = 0, $509 = 0, $51 = 0, $516 = 0, $52 = 0, $59 = 0, $6 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index20Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27482
 STACKTOP = STACKTOP + 80 | 0; //@line 27483
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 27483
 $3 = sp + 56 | 0; //@line 27484
 $4 = sp + 40 | 0; //@line 27485
 $5 = sp + 28 | 0; //@line 27486
 $6 = sp + 12 | 0; //@line 27487
 $7 = sp + 16 | 0; //@line 27488
 $8 = sp; //@line 27489
 HEAP32[$0 >> 2] = 0; //@line 27490
 HEAP32[$0 + 4 >> 2] = 0; //@line 27490
 HEAP32[$0 + 8 >> 2] = 0; //@line 27490
 HEAP32[$0 + 12 >> 2] = 0; //@line 27490
 HEAP32[$0 + 16 >> 2] = 0; //@line 27490
 HEAP32[$0 + 20 >> 2] = 0; //@line 27490
 $10 = HEAP8[$2 + 11 >> 0] | 0; //@line 27492
 if ($10 << 24 >> 24 < 0) {
  $17 = HEAP32[$2 >> 2] | 0; //@line 27498
  $18 = HEAP32[$2 + 4 >> 2] | 0; //@line 27498
 } else {
  $17 = $2; //@line 27501
  $18 = $10 & 255; //@line 27501
 }
 $16 = $17 + $18 | 0; //@line 27503
 $19 = $16; //@line 27504
 $20 = $17; //@line 27505
 L5 : do {
  if (($18 | 0) < 2) {
   $$2$i$i$i = $16; //@line 27509
  } else {
   $$02729$i$i$i = $17; //@line 27511
   $23 = $18; //@line 27511
   while (1) {
    $22 = $23 + -1 | 0; //@line 27513
    if (!$22) {
     $$2$i$i$i = $16; //@line 27516
     break L5;
    }
    $25 = _memchr($$02729$i$i$i, 58, $22) | 0; //@line 27519
    if (!$25) {
     $$2$i$i$i = $16; //@line 27522
     break L5;
    }
    if (!(_memcmp($25, 20989, 2) | 0)) {
     $$2$i$i$i = $25; //@line 27528
     break L5;
    }
    $$02729$i$i$i = $25 + 1 | 0; //@line 27531
    $23 = $19 - $$02729$i$i$i | 0; //@line 27533
    if (($23 | 0) < 2) {
     $$2$i$i$i = $16; //@line 27536
     break;
    }
   }
  }
 } while (0);
 $$0$i$i = ($$2$i$i$i | 0) == ($16 | 0) ? -1 : $$2$i$i$i - $20 | 0; //@line 27547
 __THREW__ = 0; //@line 27548
 invoke_viiiii(5, $3 | 0, $2 | 0, 0, $$0$i$i | 0, $2 | 0); //@line 27549
 $36 = __THREW__; //@line 27550
 __THREW__ = 0; //@line 27550
 do {
  if ($36 & 1) {
   $125 = ___cxa_find_matching_catch_2() | 0; //@line 27554
   $$4 = tempRet0; //@line 27556
   $$413 = $125; //@line 27556
  } else {
   $38 = $0 + 11 | 0; //@line 27558
   if ((HEAP8[$38 >> 0] | 0) < 0) {
    HEAP8[HEAP32[$0 >> 2] >> 0] = 0; //@line 27563
    HEAP32[$0 + 4 >> 2] = 0; //@line 27565
   } else {
    HEAP8[$0 >> 0] = 0; //@line 27567
    HEAP8[$38 >> 0] = 0; //@line 27568
   }
   __THREW__ = 0; //@line 27570
   invoke_vii(129, $0 | 0, 0); //@line 27571
   $43 = __THREW__; //@line 27572
   __THREW__ = 0; //@line 27572
   if ($43 & 1) {
    $45 = ___cxa_find_matching_catch_3(0) | 0; //@line 27575
    ___clang_call_terminate($45); //@line 27577
   }
   HEAP32[$0 >> 2] = HEAP32[$3 >> 2]; //@line 27580
   HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 27580
   HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 27580
   $$pre = HEAP8[$38 >> 0] | 0; //@line 27581
   $$pre286 = HEAP32[$0 >> 2] | 0; //@line 27582
   $$phi$trans$insert287 = $0 + 4 | 0; //@line 27583
   $47 = $$pre << 24 >> 24 < 0; //@line 27585
   $50 = $0 + ($$pre & 255) | 0; //@line 27588
   $$sink$i = $47 ? $$pre286 + (HEAP32[$$phi$trans$insert287 >> 2] | 0) | 0 : $50; //@line 27589
   $51 = $47 ? $$pre286 : $0; //@line 27590
   $52 = $$sink$i; //@line 27591
   L22 : do {
    if (($$sink$i | 0) == ($51 | 0)) {
     $$sroa$4$1$i = $52; //@line 27595
    } else {
     $$sroa$0$0$copyload$i$i3$i$i = $$sink$i; //@line 27597
     $$sroa$4$0$i = $52; //@line 27597
     while (1) {
      $$sroa$0$0$copyload$i$i3$i$i = $$sroa$0$0$copyload$i$i3$i$i + -1 | 0; //@line 27599
      if (!(_isspace(HEAP8[$$sroa$0$0$copyload$i$i3$i$i >> 0] | 0) | 0)) {
       $$sroa$4$1$i = $$sroa$4$0$i; //@line 27605
       break L22;
      }
      $59 = $$sroa$0$0$copyload$i$i3$i$i; //@line 27608
      if (($$sroa$0$0$copyload$i$i3$i$i | 0) == ($51 | 0)) {
       $$sroa$4$1$i = $59; //@line 27611
       break;
      } else {
       $$sroa$4$0$i = $59; //@line 27614
      }
     }
    }
   } while (0);
   __THREW__ = 0; //@line 27626
   invoke_iiii(36, $0 | 0, $$sroa$4$1$i - $51 | 0, ($47 ? $$pre286 + (HEAP32[$$phi$trans$insert287 >> 2] | 0) | 0 : $50) - $$sroa$4$1$i | 0) | 0; //@line 27627
   $67 = __THREW__; //@line 27628
   __THREW__ = 0; //@line 27628
   if (!($67 & 1)) {
    $69 = HEAP8[$38 >> 0] | 0; //@line 27631
    $70 = $69 << 24 >> 24 < 0; //@line 27632
    $71 = HEAP32[$0 >> 2] | 0; //@line 27633
    $73 = $70 ? $71 : $0; //@line 27636
    $74 = $70 ? $71 : $0; //@line 27637
    $77 = $70 ? HEAP32[$$phi$trans$insert287 >> 2] | 0 : $69 & 255; //@line 27640
    $78 = $74 + $77 | 0; //@line 27641
    L29 : do {
     if (!$77) {
      $$sroa$0$0$copyload$i$i = $74; //@line 27645
     } else {
      $81 = $74; //@line 27647
      while (1) {
       if (!(_isspace(HEAP8[$81 >> 0] | 0) | 0)) {
        $$sroa$0$0$copyload$i$i = $81; //@line 27654
        break L29;
       }
       $81 = $81 + 1 | 0; //@line 27657
       if (($81 | 0) == ($78 | 0)) {
        $$sroa$0$0$copyload$i$i = $78; //@line 27660
        break;
       }
      }
     }
    } while (0);
    __THREW__ = 0; //@line 27672
    invoke_iiii(36, $0 | 0, $73 - $74 | 0, $$sroa$0$0$copyload$i$i - $73 | 0) | 0; //@line 27673
    $91 = __THREW__; //@line 27674
    __THREW__ = 0; //@line 27674
    if (!($91 & 1)) {
     $93 = $$0$i$i + 2 | 0; //@line 27677
     $94 = $5 + 11 | 0; //@line 27678
     $95 = $5 + 4 | 0; //@line 27679
     $96 = $3 + 4 | 0; //@line 27680
     $97 = $3 + 8 | 0; //@line 27681
     $98 = $7 + 11 | 0; //@line 27682
     $99 = $3 + 12 | 0; //@line 27683
     $100 = $3 + 16 | 0; //@line 27684
     $101 = $3 + 20 | 0; //@line 27685
     $102 = $8 + 11 | 0; //@line 27686
     $103 = $0 + 16 | 0; //@line 27687
     $104 = $0 + 20 | 0; //@line 27688
     $105 = $0 + 12 | 0; //@line 27689
     $106 = $4 + 11 | 0; //@line 27690
     $107 = $3 + 12 | 0; //@line 27691
     $$014 = 0; //@line 27692
     L35 : while (1) {
      HEAP32[$3 >> 2] = 0; //@line 27694
      HEAP32[$3 + 4 >> 2] = 0; //@line 27694
      HEAP32[$3 + 8 >> 2] = 0; //@line 27694
      HEAP32[$3 + 12 >> 2] = 0; //@line 27694
      HEAP32[$3 + 16 >> 2] = 0; //@line 27694
      HEAP32[$3 + 20 >> 2] = 0; //@line 27694
      __THREW__ = 0; //@line 27695
      invoke_viiiii(5, $4 | 0, $2 | 0, $93 | 0, -1, $2 | 0); //@line 27696
      $108 = __THREW__; //@line 27697
      __THREW__ = 0; //@line 27697
      if ($108 & 1) {
       label = 35; //@line 27700
       break;
      }
      HEAP32[$5 >> 2] = 0; //@line 27703
      HEAP32[$5 + 4 >> 2] = 0; //@line 27703
      HEAP32[$5 + 8 >> 2] = 0; //@line 27703
      while (1) {
       __THREW__ = 0; //@line 27705
       $110 = invoke_iiii(37, 0, $5 | 0, $4 | 0) | 0; //@line 27706
       $111 = __THREW__; //@line 27707
       __THREW__ = 0; //@line 27707
       if ($111 & 1) {
        label = 37; //@line 27710
        break L35;
       }
       if (!$110) {
        break;
       }
       $113 = HEAP8[$94 >> 0] | 0; //@line 27716
       $115 = HEAP32[$95 >> 2] | 0; //@line 27718
       if (!(($113 << 24 >> 24 < 0 ? $115 : $113 & 255) | 0)) {
        __THREW__ = 0; //@line 27723
        $119 = invoke_iiiiii(21, $5 | 0, 0, -1, 39514, 0) | 0; //@line 27724
        $120 = __THREW__; //@line 27725
        __THREW__ = 0; //@line 27725
        if ($120 & 1) {
         label = 30; //@line 27728
         break L35;
        }
        if (!$119) {
         continue;
        }
        $137 = HEAP8[$94 >> 0] | 0; //@line 27737
        $140 = HEAP32[$95 >> 2] | 0; //@line 27737
       } else {
        $137 = $113; //@line 27739
        $140 = $115; //@line 27739
       }
       if ((($137 << 24 >> 24 < 0 ? $140 : $137 & 255) | 0) == 2) {
        __THREW__ = 0; //@line 27746
        $143 = invoke_iiiiii(21, $5 | 0, 0, -1, 21050, 2) | 0; //@line 27747
        $144 = __THREW__; //@line 27748
        __THREW__ = 0; //@line 27748
        if ($144 & 1) {
         label = 42; //@line 27751
         break L35;
        }
        if (!$143) {
         break;
        }
        $149 = HEAP8[$94 >> 0] | 0; //@line 27760
        $152 = HEAP32[$95 >> 2] | 0; //@line 27760
       } else {
        $149 = $137; //@line 27762
        $152 = $140; //@line 27762
       }
       if ((($149 << 24 >> 24 < 0 ? $152 : $149 & 255) | 0) == 1) {
        __THREW__ = 0; //@line 27769
        $155 = invoke_iiiiii(21, $5 | 0, 0, -1, 21053, 1) | 0; //@line 27770
        $156 = __THREW__; //@line 27771
        __THREW__ = 0; //@line 27771
        if ($156 & 1) {
         label = 47; //@line 27774
         break L35;
        }
        if (!$155) {
         label = 49; //@line 27779
         break L35;
        }
       }
       __THREW__ = 0; //@line 27783
       invoke_vii(115, $7 | 0, $5 | 0); //@line 27784
       $169 = __THREW__; //@line 27785
       __THREW__ = 0; //@line 27785
       if ($169 & 1) {
        label = 60; //@line 27788
        break L35;
       }
       __THREW__ = 0; //@line 27791
       $171 = invoke_iii(70, 0, $7 | 0) | 0; //@line 27792
       $172 = __THREW__; //@line 27793
       __THREW__ = 0; //@line 27793
       if ($172 & 1) {
        label = 61; //@line 27796
        break L35;
       }
       HEAP32[$6 >> 2] = $171; //@line 27799
       $174 = HEAP32[$96 >> 2] | 0; //@line 27800
       if ($174 >>> 0 < (HEAP32[$97 >> 2] | 0) >>> 0) {
        HEAP32[$174 >> 2] = $171; //@line 27804
        HEAP32[$96 >> 2] = $174 + 4; //@line 27806
       } else {
        __THREW__ = 0; //@line 27808
        invoke_vii(143, $3 | 0, $6 | 0); //@line 27809
        $178 = __THREW__; //@line 27810
        __THREW__ = 0; //@line 27810
        if ($178 & 1) {
         label = 61; //@line 27813
         break L35;
        }
       }
       if ((HEAP8[$98 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 27821
       }
      }
      while (1) {
       __THREW__ = 0; //@line 27825
       $190 = invoke_iiii(37, 0, $5 | 0, $4 | 0) | 0; //@line 27826
       $191 = __THREW__; //@line 27827
       __THREW__ = 0; //@line 27827
       if ($191 & 1) {
        label = 36; //@line 27830
        break L35;
       }
       if (!$190) {
        label = 115; //@line 27834
        break;
       }
       $193 = HEAP8[$94 >> 0] | 0; //@line 27837
       $195 = HEAP32[$95 >> 2] | 0; //@line 27839
       if (!(($193 << 24 >> 24 < 0 ? $195 : $193 & 255) | 0)) {
        __THREW__ = 0; //@line 27844
        $199 = invoke_iiiiii(21, $5 | 0, 0, -1, 39514, 0) | 0; //@line 27845
        $200 = __THREW__; //@line 27846
        __THREW__ = 0; //@line 27846
        if ($200 & 1) {
         label = 68; //@line 27849
         break L35;
        }
        if (!$199) {
         continue;
        }
        $205 = HEAP8[$94 >> 0] | 0; //@line 27858
        $208 = HEAP32[$95 >> 2] | 0; //@line 27858
       } else {
        $205 = $193; //@line 27860
        $208 = $195; //@line 27860
       }
       if ((($205 << 24 >> 24 < 0 ? $208 : $205 & 255) | 0) == 1) {
        __THREW__ = 0; //@line 27867
        $211 = invoke_iiiiii(21, $5 | 0, 0, -1, 21053, 1) | 0; //@line 27868
        $212 = __THREW__; //@line 27869
        __THREW__ = 0; //@line 27869
        if ($212 & 1) {
         label = 73; //@line 27872
         break L35;
        }
        if (!$211) {
         label = 75; //@line 27877
         break;
        }
       }
       __THREW__ = 0; //@line 27881
       invoke_vii(115, $8 | 0, $5 | 0); //@line 27882
       $300 = __THREW__; //@line 27883
       __THREW__ = 0; //@line 27883
       if ($300 & 1) {
        label = 111; //@line 27886
        break L35;
       }
       __THREW__ = 0; //@line 27889
       $302 = invoke_iii(70, 0, $8 | 0) | 0; //@line 27890
       $303 = __THREW__; //@line 27891
       __THREW__ = 0; //@line 27891
       if ($303 & 1) {
        label = 112; //@line 27894
        break L35;
       }
       HEAP32[$6 >> 2] = $302; //@line 27897
       $305 = HEAP32[$100 >> 2] | 0; //@line 27898
       if ($305 >>> 0 < (HEAP32[$101 >> 2] | 0) >>> 0) {
        HEAP32[$305 >> 2] = $302; //@line 27902
        HEAP32[$100 >> 2] = $305 + 4; //@line 27904
       } else {
        __THREW__ = 0; //@line 27906
        invoke_vii(143, $99 | 0, $6 | 0); //@line 27907
        $309 = __THREW__; //@line 27908
        __THREW__ = 0; //@line 27908
        if ($309 & 1) {
         label = 112; //@line 27911
         break L35;
        }
       }
       if ((HEAP8[$102 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 27919
       }
      }
      do {
       if ((label | 0) == 75) {
        label = 0; //@line 27924
        __THREW__ = 0; //@line 27925
        invoke_iiii(37, 0, $5 | 0, $4 | 0) | 0; //@line 27926
        $217 = __THREW__; //@line 27927
        __THREW__ = 0; //@line 27927
        if ($217 & 1) {
         label = 38; //@line 27930
         break L35;
        }
        $219 = HEAP32[$103 >> 2] | 0; //@line 27933
        if (($219 | 0) == (HEAP32[$104 >> 2] | 0)) {
         __THREW__ = 0; //@line 27937
         invoke_vii(144, $105 | 0, $3 | 0); //@line 27938
         $298 = __THREW__; //@line 27939
         __THREW__ = 0; //@line 27939
         if ($298 & 1) {
          label = 38; //@line 27942
          break L35;
         } else {
          $$0 = 1; //@line 27945
          $$115 = $$014; //@line 27945
          break;
         }
        }
        HEAP32[$219 >> 2] = 0; //@line 27949
        $222 = $219 + 4 | 0; //@line 27950
        HEAP32[$222 >> 2] = 0; //@line 27951
        HEAP32[$219 + 8 >> 2] = 0; //@line 27953
        $226 = (HEAP32[$96 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0; //@line 27956
        $227 = $226 >> 2; //@line 27957
        do {
         if ($227 | 0) {
          if ($227 >>> 0 > 1073741823) {
           label = 79; //@line 27963
           break L35;
          }
          __THREW__ = 0; //@line 27966
          $231 = invoke_ii(142, $226 | 0) | 0; //@line 27967
          $232 = __THREW__; //@line 27968
          __THREW__ = 0; //@line 27968
          if ($232 & 1) {
           label = 83; //@line 27971
           break L35;
          }
          HEAP32[$222 >> 2] = $231; //@line 27974
          HEAP32[$219 >> 2] = $231; //@line 27975
          HEAP32[$219 + 8 >> 2] = $231 + ($227 << 2); //@line 27978
          $236 = HEAP32[$3 >> 2] | 0; //@line 27979
          $239 = (HEAP32[$96 >> 2] | 0) - $236 | 0; //@line 27982
          if (($239 | 0) <= 0) {
           break;
          }
          _memcpy($231 | 0, $236 | 0, $239 | 0) | 0; //@line 27989
          HEAP32[$222 >> 2] = $231 + ($239 >>> 2 << 2); //@line 27990
         }
        } while (0);
        $254 = $219 + 12 | 0; //@line 27993
        HEAP32[$254 >> 2] = 0; //@line 27994
        $255 = $219 + 16 | 0; //@line 27995
        HEAP32[$255 >> 2] = 0; //@line 27996
        HEAP32[$219 + 20 >> 2] = 0; //@line 27998
        $259 = (HEAP32[$100 >> 2] | 0) - (HEAP32[$99 >> 2] | 0) | 0; //@line 28001
        $260 = $259 >> 2; //@line 28002
        do {
         if ($260 | 0) {
          if ($260 >>> 0 > 1073741823) {
           label = 89; //@line 28008
           break L35;
          }
          __THREW__ = 0; //@line 28011
          $264 = invoke_ii(142, $259 | 0) | 0; //@line 28012
          $265 = __THREW__; //@line 28013
          __THREW__ = 0; //@line 28013
          if ($265 & 1) {
           label = 93; //@line 28016
           break L35;
          }
          HEAP32[$255 >> 2] = $264; //@line 28019
          HEAP32[$254 >> 2] = $264; //@line 28020
          HEAP32[$219 + 20 >> 2] = $264 + ($260 << 2); //@line 28023
          $269 = HEAP32[$99 >> 2] | 0; //@line 28024
          $272 = (HEAP32[$100 >> 2] | 0) - $269 | 0; //@line 28027
          if (($272 | 0) <= 0) {
           break;
          }
          _memcpy($264 | 0, $269 | 0, $272 | 0) | 0; //@line 28034
          HEAP32[$255 >> 2] = $264 + ($272 >>> 2 << 2); //@line 28035
         }
        } while (0);
        HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + 24; //@line 28040
        $$0 = 1; //@line 28041
        $$115 = $$014; //@line 28041
       } else if ((label | 0) == 115) {
        label = 0; //@line 28044
        $321 = HEAP32[$103 >> 2] | 0; //@line 28045
        if (($321 | 0) == (HEAP32[$104 >> 2] | 0)) {
         __THREW__ = 0; //@line 28049
         invoke_vii(144, $105 | 0, $3 | 0); //@line 28050
         $400 = __THREW__; //@line 28051
         __THREW__ = 0; //@line 28051
         if ($400 & 1) {
          label = 38; //@line 28054
          break L35;
         } else {
          $$0 = 0; //@line 28057
          $$115 = 1; //@line 28057
          break;
         }
        }
        HEAP32[$321 >> 2] = 0; //@line 28061
        $324 = $321 + 4 | 0; //@line 28062
        HEAP32[$324 >> 2] = 0; //@line 28063
        HEAP32[$321 + 8 >> 2] = 0; //@line 28065
        $328 = (HEAP32[$96 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0; //@line 28068
        $329 = $328 >> 2; //@line 28069
        if ($329 | 0) {
         if ($329 >>> 0 > 1073741823) {
          label = 118; //@line 28074
          break L35;
         }
         __THREW__ = 0; //@line 28077
         $333 = invoke_ii(142, $328 | 0) | 0; //@line 28078
         $334 = __THREW__; //@line 28079
         __THREW__ = 0; //@line 28079
         if ($334 & 1) {
          label = 122; //@line 28082
          break L35;
         }
         HEAP32[$324 >> 2] = $333; //@line 28085
         HEAP32[$321 >> 2] = $333; //@line 28086
         HEAP32[$321 + 8 >> 2] = $333 + ($329 << 2); //@line 28089
         $338 = HEAP32[$3 >> 2] | 0; //@line 28090
         $341 = (HEAP32[$96 >> 2] | 0) - $338 | 0; //@line 28093
         if (($341 | 0) > 0) {
          _memcpy($333 | 0, $338 | 0, $341 | 0) | 0; //@line 28098
          HEAP32[$324 >> 2] = $333 + ($341 >>> 2 << 2); //@line 28099
         }
        }
        $356 = $321 + 12 | 0; //@line 28102
        HEAP32[$356 >> 2] = 0; //@line 28103
        $357 = $321 + 16 | 0; //@line 28104
        HEAP32[$357 >> 2] = 0; //@line 28105
        HEAP32[$321 + 20 >> 2] = 0; //@line 28107
        $361 = (HEAP32[$100 >> 2] | 0) - (HEAP32[$99 >> 2] | 0) | 0; //@line 28110
        $362 = $361 >> 2; //@line 28111
        do {
         if ($362 | 0) {
          if ($362 >>> 0 > 1073741823) {
           label = 128; //@line 28117
           break L35;
          }
          __THREW__ = 0; //@line 28120
          $366 = invoke_ii(142, $361 | 0) | 0; //@line 28121
          $367 = __THREW__; //@line 28122
          __THREW__ = 0; //@line 28122
          if ($367 & 1) {
           label = 132; //@line 28125
           break L35;
          }
          HEAP32[$357 >> 2] = $366; //@line 28128
          HEAP32[$356 >> 2] = $366; //@line 28129
          HEAP32[$321 + 20 >> 2] = $366 + ($362 << 2); //@line 28132
          $371 = HEAP32[$99 >> 2] | 0; //@line 28133
          $374 = (HEAP32[$100 >> 2] | 0) - $371 | 0; //@line 28136
          if (($374 | 0) <= 0) {
           break;
          }
          _memcpy($366 | 0, $371 | 0, $374 | 0) | 0; //@line 28143
          HEAP32[$357 >> 2] = $366 + ($374 >>> 2 << 2); //@line 28144
         }
        } while (0);
        HEAP32[$103 >> 2] = (HEAP32[$103 >> 2] | 0) + 24; //@line 28149
        $$0 = 0; //@line 28150
        $$115 = 1; //@line 28150
       }
      } while (0);
      if ((HEAP8[$94 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 28157
      }
      if ((HEAP8[$106 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 28163
      }
      $408 = HEAP32[$107 >> 2] | 0; //@line 28165
      if ($408 | 0) {
       $410 = HEAP32[$100 >> 2] | 0; //@line 28168
       if (($410 | 0) != ($408 | 0)) {
        HEAP32[$100 >> 2] = $410 + (~(($410 + -4 - $408 | 0) >>> 2) << 2); //@line 28178
       }
       __ZdlPv($408); //@line 28180
      }
      $417 = HEAP32[$3 >> 2] | 0; //@line 28182
      if ($417 | 0) {
       $419 = HEAP32[$96 >> 2] | 0; //@line 28185
       if (($419 | 0) != ($417 | 0)) {
        HEAP32[$96 >> 2] = $419 + (~(($419 + -4 - $417 | 0) >>> 2) << 2); //@line 28195
       }
       __ZdlPv($417); //@line 28197
      }
      if ($$0) {
       $$014 = $$115; //@line 28200
      } else {
       label = 168; //@line 28202
       break;
      }
     }
     switch (label | 0) {
     case 30:
      {
       ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 28210
       break;
      }
     case 35:
      {
       $129 = ___cxa_find_matching_catch_2() | 0; //@line 28215
       $$3 = tempRet0; //@line 28217
       $$312 = $129; //@line 28217
       break;
      }
     case 36:
      {
       $131 = ___cxa_find_matching_catch_2() | 0; //@line 28221
       $eh$lpad$body$index20Z2D = tempRet0; //@line 28223
       $eh$lpad$body$indexZ2D = $131; //@line 28223
       label = 39; //@line 28224
       break;
      }
     case 37:
      {
       $133 = ___cxa_find_matching_catch_2() | 0; //@line 28228
       $eh$lpad$body$index20Z2D = tempRet0; //@line 28230
       $eh$lpad$body$indexZ2D = $133; //@line 28230
       label = 39; //@line 28231
       break;
      }
     case 38:
      {
       $135 = ___cxa_find_matching_catch_2() | 0; //@line 28235
       $eh$lpad$body$index20Z2D = tempRet0; //@line 28237
       $eh$lpad$body$indexZ2D = $135; //@line 28237
       label = 39; //@line 28238
       break;
      }
     case 42:
      {
       ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 28244
       break;
      }
     case 47:
      {
       ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 28251
       break;
      }
     case 49:
      {
       $161 = ___cxa_allocate_exception(8) | 0; //@line 28256
       __THREW__ = 0; //@line 28257
       invoke_vii(125, $161 | 0, 21055); //@line 28258
       $162 = __THREW__; //@line 28259
       __THREW__ = 0; //@line 28259
       if ($162 & 1) {
        $167 = ___cxa_find_matching_catch_2() | 0; //@line 28262
        $168 = tempRet0; //@line 28263
        ___cxa_free_exception($161 | 0); //@line 28264
        $$2 = $168; //@line 28265
        $$211 = $167; //@line 28265
        label = 155; //@line 28266
        break;
       } else {
        __THREW__ = 0; //@line 28269
        invoke_viii(16, $161 | 0, 2824, 242); //@line 28270
        __THREW__ = 0; //@line 28271
        $165 = ___cxa_find_matching_catch_2() | 0; //@line 28272
        $eh$lpad$body$index20Z2D = tempRet0; //@line 28274
        $eh$lpad$body$indexZ2D = $165; //@line 28274
        label = 39; //@line 28275
        break;
       }
       break;
      }
     case 60:
      {
       $183 = ___cxa_find_matching_catch_2() | 0; //@line 28281
       $$08 = tempRet0; //@line 28283
       $$09 = $183; //@line 28283
       label = 63; //@line 28284
       break;
      }
     case 61:
      {
       $185 = ___cxa_find_matching_catch_2() | 0; //@line 28288
       $186 = tempRet0; //@line 28289
       if ((HEAP8[$98 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 28294
        $$08 = $186; //@line 28295
        $$09 = $185; //@line 28295
        label = 63; //@line 28296
       } else {
        $$08 = $186; //@line 28298
        $$09 = $185; //@line 28298
        label = 63; //@line 28299
       }
       break;
      }
     case 68:
      {
       ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 28306
       break;
      }
     case 73:
      {
       ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 28313
       break;
      }
     case 79:
      {
       __THREW__ = 0; //@line 28318
       invoke_vi(254, $219 | 0); //@line 28319
       __THREW__ = 0; //@line 28320
       label = 83; //@line 28321
       break;
      }
     case 89:
      {
       __THREW__ = 0; //@line 28325
       invoke_vi(254, $254 | 0); //@line 28326
       __THREW__ = 0; //@line 28327
       label = 93; //@line 28328
       break;
      }
     case 111:
      {
       $314 = ___cxa_find_matching_catch_2() | 0; //@line 28332
       $$1 = tempRet0; //@line 28334
       $$110 = $314; //@line 28334
       label = 114; //@line 28335
       break;
      }
     case 112:
      {
       $316 = ___cxa_find_matching_catch_2() | 0; //@line 28339
       $317 = tempRet0; //@line 28340
       if ((HEAP8[$102 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 28345
        $$1 = $317; //@line 28346
        $$110 = $316; //@line 28346
        label = 114; //@line 28347
       } else {
        $$1 = $317; //@line 28349
        $$110 = $316; //@line 28349
        label = 114; //@line 28350
       }
       break;
      }
     case 118:
      {
       __THREW__ = 0; //@line 28355
       invoke_vi(254, $321 | 0); //@line 28356
       __THREW__ = 0; //@line 28357
       label = 122; //@line 28358
       break;
      }
     case 128:
      {
       __THREW__ = 0; //@line 28362
       invoke_vi(254, $356 | 0); //@line 28363
       __THREW__ = 0; //@line 28364
       label = 132; //@line 28365
       break;
      }
     case 168:
      {
       if ($$115) {
        STACKTOP = sp; //@line 28370
        return;
       }
       $486 = $0 + 12 | 0; //@line 28372
       $487 = HEAP32[$486 >> 2] | 0; //@line 28373
       if ($487 | 0) {
        $489 = HEAP32[$103 >> 2] | 0; //@line 28376
        if (($489 | 0) == ($487 | 0)) {
         $516 = $487; //@line 28379
        } else {
         $492 = $489; //@line 28381
         do {
          $491 = $492 + -24 | 0; //@line 28383
          HEAP32[$103 >> 2] = $491; //@line 28384
          $494 = HEAP32[$492 + -12 >> 2] | 0; //@line 28386
          if ($494 | 0) {
           $496 = $492 + -8 | 0; //@line 28389
           $497 = HEAP32[$496 >> 2] | 0; //@line 28390
           if (($497 | 0) != ($494 | 0)) {
            HEAP32[$496 >> 2] = $497 + (~(($497 + -4 - $494 | 0) >>> 2) << 2); //@line 28400
           }
           __ZdlPv($494); //@line 28402
          }
          $504 = HEAP32[$491 >> 2] | 0; //@line 28404
          if ($504 | 0) {
           $508 = $492 + -20 | 0; //@line 28407
           $509 = HEAP32[$508 >> 2] | 0; //@line 28408
           if (($509 | 0) != ($504 | 0)) {
            HEAP32[$508 >> 2] = $509 + (~(($509 + -4 - $504 | 0) >>> 2) << 2); //@line 28418
           }
           __ZdlPv($504); //@line 28420
          }
          $492 = HEAP32[$103 >> 2] | 0; //@line 28422
         } while (($492 | 0) != ($487 | 0));
         $516 = HEAP32[$486 >> 2] | 0; //@line 28431
        }
        __ZdlPv($516); //@line 28433
       }
       if ((HEAP8[$38 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 28438
        return;
       }
       __ZdlPv(HEAP32[$0 >> 2] | 0); //@line 28441
       STACKTOP = sp; //@line 28442
       return;
      }
     }
     if ((label | 0) == 63) {
      $$2 = $$08; //@line 28447
      $$211 = $$09; //@line 28447
      label = 155; //@line 28448
     } else if ((label | 0) == 83) {
      $243 = ___cxa_find_matching_catch_2() | 0; //@line 28451
      $244 = tempRet0; //@line 28452
      $245 = HEAP32[$219 >> 2] | 0; //@line 28453
      if (!$245) {
       $eh$lpad$body$index20Z2D = $244; //@line 28456
       $eh$lpad$body$indexZ2D = $243; //@line 28456
       label = 39; //@line 28457
      } else {
       $247 = HEAP32[$222 >> 2] | 0; //@line 28459
       if (($247 | 0) != ($245 | 0)) {
        HEAP32[$222 >> 2] = $247 + (~(($247 + -4 - $245 | 0) >>> 2) << 2); //@line 28469
       }
       __ZdlPv($245); //@line 28471
       $eh$lpad$body$index20Z2D = $244; //@line 28472
       $eh$lpad$body$indexZ2D = $243; //@line 28472
       label = 39; //@line 28473
      }
     } else if ((label | 0) == 93) {
      $276 = ___cxa_find_matching_catch_2() | 0; //@line 28477
      $277 = tempRet0; //@line 28478
      $278 = HEAP32[$254 >> 2] | 0; //@line 28479
      if ($278 | 0) {
       $280 = HEAP32[$255 >> 2] | 0; //@line 28482
       if (($280 | 0) != ($278 | 0)) {
        HEAP32[$255 >> 2] = $280 + (~(($280 + -4 - $278 | 0) >>> 2) << 2); //@line 28492
       }
       __ZdlPv($278); //@line 28494
      }
      $287 = HEAP32[$219 >> 2] | 0; //@line 28496
      if (!$287) {
       $eh$lpad$body$index20Z2D = $277; //@line 28499
       $eh$lpad$body$indexZ2D = $276; //@line 28499
       label = 39; //@line 28500
      } else {
       $289 = HEAP32[$222 >> 2] | 0; //@line 28502
       if (($289 | 0) != ($287 | 0)) {
        HEAP32[$222 >> 2] = $289 + (~(($289 + -4 - $287 | 0) >>> 2) << 2); //@line 28512
       }
       __ZdlPv($287); //@line 28514
       $eh$lpad$body$index20Z2D = $277; //@line 28515
       $eh$lpad$body$indexZ2D = $276; //@line 28515
       label = 39; //@line 28516
      }
     } else if ((label | 0) == 114) {
      $$2 = $$1; //@line 28520
      $$211 = $$110; //@line 28520
      label = 155; //@line 28521
     } else if ((label | 0) == 122) {
      $345 = ___cxa_find_matching_catch_2() | 0; //@line 28524
      $346 = tempRet0; //@line 28525
      $347 = HEAP32[$321 >> 2] | 0; //@line 28526
      if (!$347) {
       $eh$lpad$body$index20Z2D = $346; //@line 28529
       $eh$lpad$body$indexZ2D = $345; //@line 28529
       label = 39; //@line 28530
      } else {
       $349 = HEAP32[$324 >> 2] | 0; //@line 28532
       if (($349 | 0) != ($347 | 0)) {
        HEAP32[$324 >> 2] = $349 + (~(($349 + -4 - $347 | 0) >>> 2) << 2); //@line 28542
       }
       __ZdlPv($347); //@line 28544
       $eh$lpad$body$index20Z2D = $346; //@line 28545
       $eh$lpad$body$indexZ2D = $345; //@line 28545
       label = 39; //@line 28546
      }
     } else if ((label | 0) == 132) {
      $378 = ___cxa_find_matching_catch_2() | 0; //@line 28550
      $379 = tempRet0; //@line 28551
      $380 = HEAP32[$356 >> 2] | 0; //@line 28552
      if ($380 | 0) {
       $382 = HEAP32[$357 >> 2] | 0; //@line 28555
       if (($382 | 0) != ($380 | 0)) {
        HEAP32[$357 >> 2] = $382 + (~(($382 + -4 - $380 | 0) >>> 2) << 2); //@line 28565
       }
       __ZdlPv($380); //@line 28567
      }
      $389 = HEAP32[$321 >> 2] | 0; //@line 28569
      if (!$389) {
       $eh$lpad$body$index20Z2D = $379; //@line 28572
       $eh$lpad$body$indexZ2D = $378; //@line 28572
       label = 39; //@line 28573
      } else {
       $391 = HEAP32[$324 >> 2] | 0; //@line 28575
       if (($391 | 0) != ($389 | 0)) {
        HEAP32[$324 >> 2] = $391 + (~(($391 + -4 - $389 | 0) >>> 2) << 2); //@line 28585
       }
       __ZdlPv($389); //@line 28587
       $eh$lpad$body$index20Z2D = $379; //@line 28588
       $eh$lpad$body$indexZ2D = $378; //@line 28588
       label = 39; //@line 28589
      }
     }
     if ((label | 0) == 39) {
      $$2 = $eh$lpad$body$index20Z2D; //@line 28593
      $$211 = $eh$lpad$body$indexZ2D; //@line 28593
      label = 155; //@line 28594
     }
     if ((label | 0) == 155) {
      if ((HEAP8[$94 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 28601
      }
      if ((HEAP8[$106 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 28607
       $$3 = $$2; //@line 28608
       $$312 = $$211; //@line 28608
      } else {
       $$3 = $$2; //@line 28610
       $$312 = $$211; //@line 28610
      }
     }
     $432 = HEAP32[$107 >> 2] | 0; //@line 28613
     if ($432 | 0) {
      $434 = HEAP32[$100 >> 2] | 0; //@line 28616
      if (($434 | 0) != ($432 | 0)) {
       HEAP32[$100 >> 2] = $434 + (~(($434 + -4 - $432 | 0) >>> 2) << 2); //@line 28626
      }
      __ZdlPv($432); //@line 28628
     }
     $441 = HEAP32[$3 >> 2] | 0; //@line 28630
     if ($441 | 0) {
      $443 = HEAP32[$96 >> 2] | 0; //@line 28633
      if (($443 | 0) != ($441 | 0)) {
       HEAP32[$96 >> 2] = $443 + (~(($443 + -4 - $441 | 0) >>> 2) << 2); //@line 28643
      }
      __ZdlPv($441); //@line 28645
     }
     $$4 = $$3; //@line 28647
     $$413 = $$312; //@line 28647
     break;
    }
   }
   $127 = ___cxa_find_matching_catch_2() | 0; //@line 28651
   $$4 = tempRet0; //@line 28653
   $$413 = $127; //@line 28653
  }
 } while (0);
 $450 = $0 + 12 | 0; //@line 28656
 $451 = HEAP32[$450 >> 2] | 0; //@line 28657
 if ($451 | 0) {
  $453 = $0 + 16 | 0; //@line 28660
  $454 = HEAP32[$453 >> 2] | 0; //@line 28661
  if (($454 | 0) == ($451 | 0)) {
   $481 = $451; //@line 28664
  } else {
   $457 = $454; //@line 28666
   do {
    $456 = $457 + -24 | 0; //@line 28668
    HEAP32[$453 >> 2] = $456; //@line 28669
    $459 = HEAP32[$457 + -12 >> 2] | 0; //@line 28671
    if ($459 | 0) {
     $461 = $457 + -8 | 0; //@line 28674
     $462 = HEAP32[$461 >> 2] | 0; //@line 28675
     if (($462 | 0) != ($459 | 0)) {
      HEAP32[$461 >> 2] = $462 + (~(($462 + -4 - $459 | 0) >>> 2) << 2); //@line 28685
     }
     __ZdlPv($459); //@line 28687
    }
    $469 = HEAP32[$456 >> 2] | 0; //@line 28689
    if ($469 | 0) {
     $473 = $457 + -20 | 0; //@line 28692
     $474 = HEAP32[$473 >> 2] | 0; //@line 28693
     if (($474 | 0) != ($469 | 0)) {
      HEAP32[$473 >> 2] = $474 + (~(($474 + -4 - $469 | 0) >>> 2) << 2); //@line 28703
     }
     __ZdlPv($469); //@line 28705
    }
    $457 = HEAP32[$453 >> 2] | 0; //@line 28707
   } while (($457 | 0) != ($451 | 0));
   $481 = HEAP32[$450 >> 2] | 0; //@line 28716
  }
  __ZdlPv($481); //@line 28718
 }
 if ((HEAP8[$0 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$413 | 0); //@line 28724
 }
 __ZdlPv(HEAP32[$0 >> 2] | 0); //@line 28728
 ___resumeException($$413 | 0); //@line 28729
}
function __ZNSt3__212__next_primeEj($0) {
 $0 = $0 | 0;
 var $$$0337 = 0, $$0 = 0, $$0328 = 0, $$0334 = 0, $$0337 = 0, $$1 = 0, $$1336$sink = 0, $$2332 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$8 = 0, $$sink = 0, $1 = 0, $100 = 0, $101 = 0, $105 = 0, $106 = 0, $11 = 0, $110 = 0, $111 = 0, $115 = 0, $116 = 0, $120 = 0, $121 = 0, $125 = 0, $126 = 0, $13 = 0, $130 = 0, $131 = 0, $135 = 0, $136 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $146 = 0, $150 = 0, $151 = 0, $155 = 0, $156 = 0, $160 = 0, $161 = 0, $165 = 0, $166 = 0, $170 = 0, $171 = 0, $175 = 0, $176 = 0, $180 = 0, $181 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $195 = 0, $196 = 0, $2 = 0, $200 = 0, $201 = 0, $205 = 0, $206 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $225 = 0, $226 = 0, $230 = 0, $231 = 0, $235 = 0, $236 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $25 = 0, $250 = 0, $251 = 0, $255 = 0, $256 = 0, $26 = 0, $260 = 0, $261 = 0, $265 = 0, $266 = 0, $267 = 0, $269 = 0, $272 = 0, $273 = 0, $3 = 0, $31 = 0, $35 = 0, $36 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $50 = 0, $51 = 0, $55 = 0, $56 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $70 = 0, $71 = 0, $75 = 0, $76 = 0, $8 = 0, $80 = 0, $81 = 0, $85 = 0, $86 = 0, $9 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17773
 STACKTOP = STACKTOP + 16 | 0; //@line 17774
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17774
 $1 = sp; //@line 17775
 $2 = sp + 8 | 0; //@line 17776
 $3 = sp + 4 | 0; //@line 17777
 HEAP32[$2 >> 2] = $0; //@line 17778
 do {
  if ($0 >>> 0 < 212) {
   $$8 = HEAP32[(__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(9092, 9284, $2, $1) | 0) >> 2] | 0; //@line 17784
  } else {
   if ($0 >>> 0 > 4294967291) {
    $8 = ___cxa_allocate_exception(8) | 0; //@line 17788
    __THREW__ = 0; //@line 17789
    invoke_vii(125, $8 | 0, 28993); //@line 17790
    $9 = __THREW__; //@line 17791
    __THREW__ = 0; //@line 17791
    if ($9 & 1) {
     $11 = ___cxa_find_matching_catch_2() | 0; //@line 17794
     ___cxa_free_exception($8 | 0); //@line 17796
     ___resumeException($11 | 0); //@line 17797
    } else {
     HEAP32[$8 >> 2] = 13264; //@line 17800
     ___cxa_throw($8 | 0, 2888, 242); //@line 17801
    }
   }
   $13 = ($0 >>> 0) / 210 | 0; //@line 17805
   $14 = $13 * 210 | 0; //@line 17806
   HEAP32[$3 >> 2] = $0 - $14; //@line 17808
   $$0328 = 0; //@line 17813
   $$0337 = $13; //@line 17813
   $$1336$sink = (__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(9284, 9476, $3, $1) | 0) - 9284 >> 2; //@line 17813
   $$sink = $14; //@line 17813
   L10 : while (1) {
    $22 = (HEAP32[9284 + ($$1336$sink << 2) >> 2] | 0) + $$sink | 0; //@line 17817
    $$0334 = 5; //@line 17818
    while (1) {
     if ($$0334 >>> 0 >= 47) {
      $$0 = 211; //@line 17822
      $$4 = $$0328; //@line 17822
      label = 12; //@line 17823
      break;
     }
     $25 = HEAP32[9092 + ($$0334 << 2) >> 2] | 0; //@line 17827
     $26 = ($22 >>> 0) / ($25 >>> 0) | 0; //@line 17828
     if ($26 >>> 0 < $25 >>> 0) {
      label = 110; //@line 17831
      break L10;
     }
     if (($22 | 0) == (Math_imul($26, $25) | 0)) {
      $$6 = $$0328; //@line 17838
      break;
     } else {
      $$0334 = $$0334 + 1 | 0; //@line 17841
     }
    }
    L16 : do {
     if ((label | 0) == 12) {
      L17 : while (1) {
       label = 0; //@line 17847
       $31 = ($22 >>> 0) / ($$0 >>> 0) | 0; //@line 17848
       do {
        if ($31 >>> 0 < $$0 >>> 0) {
         $$1 = $$0; //@line 17852
         $$2332 = 1; //@line 17852
         $$5 = $22; //@line 17852
        } else {
         if (($22 | 0) == (Math_imul($31, $$0) | 0)) {
          $$1 = $$0; //@line 17857
          $$2332 = 9; //@line 17857
          $$5 = $$4; //@line 17857
         } else {
          $35 = $$0 + 10 | 0; //@line 17859
          $36 = ($22 >>> 0) / ($35 >>> 0) | 0; //@line 17860
          if ($36 >>> 0 < $35 >>> 0) {
           $$1 = $35; //@line 17863
           $$2332 = 1; //@line 17863
           $$5 = $22; //@line 17863
          } else {
           if (($22 | 0) == (Math_imul($36, $35) | 0)) {
            $$1 = $35; //@line 17868
            $$2332 = 9; //@line 17868
            $$5 = $$4; //@line 17868
           } else {
            $40 = $$0 + 12 | 0; //@line 17870
            $41 = ($22 >>> 0) / ($40 >>> 0) | 0; //@line 17871
            if ($41 >>> 0 < $40 >>> 0) {
             $$1 = $40; //@line 17874
             $$2332 = 1; //@line 17874
             $$5 = $22; //@line 17874
            } else {
             if (($22 | 0) == (Math_imul($41, $40) | 0)) {
              $$1 = $40; //@line 17879
              $$2332 = 9; //@line 17879
              $$5 = $$4; //@line 17879
             } else {
              $45 = $$0 + 16 | 0; //@line 17881
              $46 = ($22 >>> 0) / ($45 >>> 0) | 0; //@line 17882
              if ($46 >>> 0 < $45 >>> 0) {
               $$1 = $45; //@line 17885
               $$2332 = 1; //@line 17885
               $$5 = $22; //@line 17885
              } else {
               if (($22 | 0) == (Math_imul($46, $45) | 0)) {
                $$1 = $45; //@line 17890
                $$2332 = 9; //@line 17890
                $$5 = $$4; //@line 17890
               } else {
                $50 = $$0 + 18 | 0; //@line 17892
                $51 = ($22 >>> 0) / ($50 >>> 0) | 0; //@line 17893
                if ($51 >>> 0 < $50 >>> 0) {
                 $$1 = $50; //@line 17896
                 $$2332 = 1; //@line 17896
                 $$5 = $22; //@line 17896
                } else {
                 if (($22 | 0) == (Math_imul($51, $50) | 0)) {
                  $$1 = $50; //@line 17901
                  $$2332 = 9; //@line 17901
                  $$5 = $$4; //@line 17901
                 } else {
                  $55 = $$0 + 22 | 0; //@line 17903
                  $56 = ($22 >>> 0) / ($55 >>> 0) | 0; //@line 17904
                  if ($56 >>> 0 < $55 >>> 0) {
                   $$1 = $55; //@line 17907
                   $$2332 = 1; //@line 17907
                   $$5 = $22; //@line 17907
                  } else {
                   if (($22 | 0) == (Math_imul($56, $55) | 0)) {
                    $$1 = $55; //@line 17912
                    $$2332 = 9; //@line 17912
                    $$5 = $$4; //@line 17912
                   } else {
                    $60 = $$0 + 28 | 0; //@line 17914
                    $61 = ($22 >>> 0) / ($60 >>> 0) | 0; //@line 17915
                    if ($61 >>> 0 < $60 >>> 0) {
                     $$1 = $60; //@line 17918
                     $$2332 = 1; //@line 17918
                     $$5 = $22; //@line 17918
                    } else {
                     if (($22 | 0) == (Math_imul($61, $60) | 0)) {
                      $$1 = $60; //@line 17923
                      $$2332 = 9; //@line 17923
                      $$5 = $$4; //@line 17923
                      break;
                     }
                     $65 = $$0 + 30 | 0; //@line 17926
                     $66 = ($22 >>> 0) / ($65 >>> 0) | 0; //@line 17927
                     if ($66 >>> 0 < $65 >>> 0) {
                      $$1 = $65; //@line 17930
                      $$2332 = 1; //@line 17930
                      $$5 = $22; //@line 17930
                      break;
                     }
                     if (($22 | 0) == (Math_imul($66, $65) | 0)) {
                      $$1 = $65; //@line 17936
                      $$2332 = 9; //@line 17936
                      $$5 = $$4; //@line 17936
                      break;
                     }
                     $70 = $$0 + 36 | 0; //@line 17939
                     $71 = ($22 >>> 0) / ($70 >>> 0) | 0; //@line 17940
                     if ($71 >>> 0 < $70 >>> 0) {
                      $$1 = $70; //@line 17943
                      $$2332 = 1; //@line 17943
                      $$5 = $22; //@line 17943
                      break;
                     }
                     if (($22 | 0) == (Math_imul($71, $70) | 0)) {
                      $$1 = $70; //@line 17949
                      $$2332 = 9; //@line 17949
                      $$5 = $$4; //@line 17949
                      break;
                     }
                     $75 = $$0 + 40 | 0; //@line 17952
                     $76 = ($22 >>> 0) / ($75 >>> 0) | 0; //@line 17953
                     if ($76 >>> 0 < $75 >>> 0) {
                      $$1 = $75; //@line 17956
                      $$2332 = 1; //@line 17956
                      $$5 = $22; //@line 17956
                      break;
                     }
                     if (($22 | 0) == (Math_imul($76, $75) | 0)) {
                      $$1 = $75; //@line 17962
                      $$2332 = 9; //@line 17962
                      $$5 = $$4; //@line 17962
                      break;
                     }
                     $80 = $$0 + 42 | 0; //@line 17965
                     $81 = ($22 >>> 0) / ($80 >>> 0) | 0; //@line 17966
                     if ($81 >>> 0 < $80 >>> 0) {
                      $$1 = $80; //@line 17969
                      $$2332 = 1; //@line 17969
                      $$5 = $22; //@line 17969
                      break;
                     }
                     if (($22 | 0) == (Math_imul($81, $80) | 0)) {
                      $$1 = $80; //@line 17975
                      $$2332 = 9; //@line 17975
                      $$5 = $$4; //@line 17975
                      break;
                     }
                     $85 = $$0 + 46 | 0; //@line 17978
                     $86 = ($22 >>> 0) / ($85 >>> 0) | 0; //@line 17979
                     if ($86 >>> 0 < $85 >>> 0) {
                      $$1 = $85; //@line 17982
                      $$2332 = 1; //@line 17982
                      $$5 = $22; //@line 17982
                      break;
                     }
                     if (($22 | 0) == (Math_imul($86, $85) | 0)) {
                      $$1 = $85; //@line 17988
                      $$2332 = 9; //@line 17988
                      $$5 = $$4; //@line 17988
                      break;
                     }
                     $90 = $$0 + 52 | 0; //@line 17991
                     $91 = ($22 >>> 0) / ($90 >>> 0) | 0; //@line 17992
                     if ($91 >>> 0 < $90 >>> 0) {
                      $$1 = $90; //@line 17995
                      $$2332 = 1; //@line 17995
                      $$5 = $22; //@line 17995
                      break;
                     }
                     if (($22 | 0) == (Math_imul($91, $90) | 0)) {
                      $$1 = $90; //@line 18001
                      $$2332 = 9; //@line 18001
                      $$5 = $$4; //@line 18001
                      break;
                     }
                     $95 = $$0 + 58 | 0; //@line 18004
                     $96 = ($22 >>> 0) / ($95 >>> 0) | 0; //@line 18005
                     if ($96 >>> 0 < $95 >>> 0) {
                      $$1 = $95; //@line 18008
                      $$2332 = 1; //@line 18008
                      $$5 = $22; //@line 18008
                      break;
                     }
                     if (($22 | 0) == (Math_imul($96, $95) | 0)) {
                      $$1 = $95; //@line 18014
                      $$2332 = 9; //@line 18014
                      $$5 = $$4; //@line 18014
                      break;
                     }
                     $100 = $$0 + 60 | 0; //@line 18017
                     $101 = ($22 >>> 0) / ($100 >>> 0) | 0; //@line 18018
                     if ($101 >>> 0 < $100 >>> 0) {
                      $$1 = $100; //@line 18021
                      $$2332 = 1; //@line 18021
                      $$5 = $22; //@line 18021
                      break;
                     }
                     if (($22 | 0) == (Math_imul($101, $100) | 0)) {
                      $$1 = $100; //@line 18027
                      $$2332 = 9; //@line 18027
                      $$5 = $$4; //@line 18027
                      break;
                     }
                     $105 = $$0 + 66 | 0; //@line 18030
                     $106 = ($22 >>> 0) / ($105 >>> 0) | 0; //@line 18031
                     if ($106 >>> 0 < $105 >>> 0) {
                      $$1 = $105; //@line 18034
                      $$2332 = 1; //@line 18034
                      $$5 = $22; //@line 18034
                      break;
                     }
                     if (($22 | 0) == (Math_imul($106, $105) | 0)) {
                      $$1 = $105; //@line 18040
                      $$2332 = 9; //@line 18040
                      $$5 = $$4; //@line 18040
                      break;
                     }
                     $110 = $$0 + 70 | 0; //@line 18043
                     $111 = ($22 >>> 0) / ($110 >>> 0) | 0; //@line 18044
                     if ($111 >>> 0 < $110 >>> 0) {
                      $$1 = $110; //@line 18047
                      $$2332 = 1; //@line 18047
                      $$5 = $22; //@line 18047
                      break;
                     }
                     if (($22 | 0) == (Math_imul($111, $110) | 0)) {
                      $$1 = $110; //@line 18053
                      $$2332 = 9; //@line 18053
                      $$5 = $$4; //@line 18053
                      break;
                     }
                     $115 = $$0 + 72 | 0; //@line 18056
                     $116 = ($22 >>> 0) / ($115 >>> 0) | 0; //@line 18057
                     if ($116 >>> 0 < $115 >>> 0) {
                      $$1 = $115; //@line 18060
                      $$2332 = 1; //@line 18060
                      $$5 = $22; //@line 18060
                      break;
                     }
                     if (($22 | 0) == (Math_imul($116, $115) | 0)) {
                      $$1 = $115; //@line 18066
                      $$2332 = 9; //@line 18066
                      $$5 = $$4; //@line 18066
                      break;
                     }
                     $120 = $$0 + 78 | 0; //@line 18069
                     $121 = ($22 >>> 0) / ($120 >>> 0) | 0; //@line 18070
                     if ($121 >>> 0 < $120 >>> 0) {
                      $$1 = $120; //@line 18073
                      $$2332 = 1; //@line 18073
                      $$5 = $22; //@line 18073
                      break;
                     }
                     if (($22 | 0) == (Math_imul($121, $120) | 0)) {
                      $$1 = $120; //@line 18079
                      $$2332 = 9; //@line 18079
                      $$5 = $$4; //@line 18079
                      break;
                     }
                     $125 = $$0 + 82 | 0; //@line 18082
                     $126 = ($22 >>> 0) / ($125 >>> 0) | 0; //@line 18083
                     if ($126 >>> 0 < $125 >>> 0) {
                      $$1 = $125; //@line 18086
                      $$2332 = 1; //@line 18086
                      $$5 = $22; //@line 18086
                      break;
                     }
                     if (($22 | 0) == (Math_imul($126, $125) | 0)) {
                      $$1 = $125; //@line 18092
                      $$2332 = 9; //@line 18092
                      $$5 = $$4; //@line 18092
                      break;
                     }
                     $130 = $$0 + 88 | 0; //@line 18095
                     $131 = ($22 >>> 0) / ($130 >>> 0) | 0; //@line 18096
                     if ($131 >>> 0 < $130 >>> 0) {
                      $$1 = $130; //@line 18099
                      $$2332 = 1; //@line 18099
                      $$5 = $22; //@line 18099
                      break;
                     }
                     if (($22 | 0) == (Math_imul($131, $130) | 0)) {
                      $$1 = $130; //@line 18105
                      $$2332 = 9; //@line 18105
                      $$5 = $$4; //@line 18105
                      break;
                     }
                     $135 = $$0 + 96 | 0; //@line 18108
                     $136 = ($22 >>> 0) / ($135 >>> 0) | 0; //@line 18109
                     if ($136 >>> 0 < $135 >>> 0) {
                      $$1 = $135; //@line 18112
                      $$2332 = 1; //@line 18112
                      $$5 = $22; //@line 18112
                      break;
                     }
                     if (($22 | 0) == (Math_imul($136, $135) | 0)) {
                      $$1 = $135; //@line 18118
                      $$2332 = 9; //@line 18118
                      $$5 = $$4; //@line 18118
                      break;
                     }
                     $140 = $$0 + 100 | 0; //@line 18121
                     $141 = ($22 >>> 0) / ($140 >>> 0) | 0; //@line 18122
                     if ($141 >>> 0 < $140 >>> 0) {
                      $$1 = $140; //@line 18125
                      $$2332 = 1; //@line 18125
                      $$5 = $22; //@line 18125
                      break;
                     }
                     if (($22 | 0) == (Math_imul($141, $140) | 0)) {
                      $$1 = $140; //@line 18131
                      $$2332 = 9; //@line 18131
                      $$5 = $$4; //@line 18131
                      break;
                     }
                     $145 = $$0 + 102 | 0; //@line 18134
                     $146 = ($22 >>> 0) / ($145 >>> 0) | 0; //@line 18135
                     if ($146 >>> 0 < $145 >>> 0) {
                      $$1 = $145; //@line 18138
                      $$2332 = 1; //@line 18138
                      $$5 = $22; //@line 18138
                      break;
                     }
                     if (($22 | 0) == (Math_imul($146, $145) | 0)) {
                      $$1 = $145; //@line 18144
                      $$2332 = 9; //@line 18144
                      $$5 = $$4; //@line 18144
                      break;
                     }
                     $150 = $$0 + 106 | 0; //@line 18147
                     $151 = ($22 >>> 0) / ($150 >>> 0) | 0; //@line 18148
                     if ($151 >>> 0 < $150 >>> 0) {
                      $$1 = $150; //@line 18151
                      $$2332 = 1; //@line 18151
                      $$5 = $22; //@line 18151
                      break;
                     }
                     if (($22 | 0) == (Math_imul($151, $150) | 0)) {
                      $$1 = $150; //@line 18157
                      $$2332 = 9; //@line 18157
                      $$5 = $$4; //@line 18157
                      break;
                     }
                     $155 = $$0 + 108 | 0; //@line 18160
                     $156 = ($22 >>> 0) / ($155 >>> 0) | 0; //@line 18161
                     if ($156 >>> 0 < $155 >>> 0) {
                      $$1 = $155; //@line 18164
                      $$2332 = 1; //@line 18164
                      $$5 = $22; //@line 18164
                      break;
                     }
                     if (($22 | 0) == (Math_imul($156, $155) | 0)) {
                      $$1 = $155; //@line 18170
                      $$2332 = 9; //@line 18170
                      $$5 = $$4; //@line 18170
                      break;
                     }
                     $160 = $$0 + 112 | 0; //@line 18173
                     $161 = ($22 >>> 0) / ($160 >>> 0) | 0; //@line 18174
                     if ($161 >>> 0 < $160 >>> 0) {
                      $$1 = $160; //@line 18177
                      $$2332 = 1; //@line 18177
                      $$5 = $22; //@line 18177
                      break;
                     }
                     if (($22 | 0) == (Math_imul($161, $160) | 0)) {
                      $$1 = $160; //@line 18183
                      $$2332 = 9; //@line 18183
                      $$5 = $$4; //@line 18183
                      break;
                     }
                     $165 = $$0 + 120 | 0; //@line 18186
                     $166 = ($22 >>> 0) / ($165 >>> 0) | 0; //@line 18187
                     if ($166 >>> 0 < $165 >>> 0) {
                      $$1 = $165; //@line 18190
                      $$2332 = 1; //@line 18190
                      $$5 = $22; //@line 18190
                      break;
                     }
                     if (($22 | 0) == (Math_imul($166, $165) | 0)) {
                      $$1 = $165; //@line 18196
                      $$2332 = 9; //@line 18196
                      $$5 = $$4; //@line 18196
                      break;
                     }
                     $170 = $$0 + 126 | 0; //@line 18199
                     $171 = ($22 >>> 0) / ($170 >>> 0) | 0; //@line 18200
                     if ($171 >>> 0 < $170 >>> 0) {
                      $$1 = $170; //@line 18203
                      $$2332 = 1; //@line 18203
                      $$5 = $22; //@line 18203
                      break;
                     }
                     if (($22 | 0) == (Math_imul($171, $170) | 0)) {
                      $$1 = $170; //@line 18209
                      $$2332 = 9; //@line 18209
                      $$5 = $$4; //@line 18209
                      break;
                     }
                     $175 = $$0 + 130 | 0; //@line 18212
                     $176 = ($22 >>> 0) / ($175 >>> 0) | 0; //@line 18213
                     if ($176 >>> 0 < $175 >>> 0) {
                      $$1 = $175; //@line 18216
                      $$2332 = 1; //@line 18216
                      $$5 = $22; //@line 18216
                      break;
                     }
                     if (($22 | 0) == (Math_imul($176, $175) | 0)) {
                      $$1 = $175; //@line 18222
                      $$2332 = 9; //@line 18222
                      $$5 = $$4; //@line 18222
                      break;
                     }
                     $180 = $$0 + 136 | 0; //@line 18225
                     $181 = ($22 >>> 0) / ($180 >>> 0) | 0; //@line 18226
                     if ($181 >>> 0 < $180 >>> 0) {
                      $$1 = $180; //@line 18229
                      $$2332 = 1; //@line 18229
                      $$5 = $22; //@line 18229
                      break;
                     }
                     if (($22 | 0) == (Math_imul($181, $180) | 0)) {
                      $$1 = $180; //@line 18235
                      $$2332 = 9; //@line 18235
                      $$5 = $$4; //@line 18235
                      break;
                     }
                     $185 = $$0 + 138 | 0; //@line 18238
                     $186 = ($22 >>> 0) / ($185 >>> 0) | 0; //@line 18239
                     if ($186 >>> 0 < $185 >>> 0) {
                      $$1 = $185; //@line 18242
                      $$2332 = 1; //@line 18242
                      $$5 = $22; //@line 18242
                      break;
                     }
                     if (($22 | 0) == (Math_imul($186, $185) | 0)) {
                      $$1 = $185; //@line 18248
                      $$2332 = 9; //@line 18248
                      $$5 = $$4; //@line 18248
                      break;
                     }
                     $190 = $$0 + 142 | 0; //@line 18251
                     $191 = ($22 >>> 0) / ($190 >>> 0) | 0; //@line 18252
                     if ($191 >>> 0 < $190 >>> 0) {
                      $$1 = $190; //@line 18255
                      $$2332 = 1; //@line 18255
                      $$5 = $22; //@line 18255
                      break;
                     }
                     if (($22 | 0) == (Math_imul($191, $190) | 0)) {
                      $$1 = $190; //@line 18261
                      $$2332 = 9; //@line 18261
                      $$5 = $$4; //@line 18261
                      break;
                     }
                     $195 = $$0 + 148 | 0; //@line 18264
                     $196 = ($22 >>> 0) / ($195 >>> 0) | 0; //@line 18265
                     if ($196 >>> 0 < $195 >>> 0) {
                      $$1 = $195; //@line 18268
                      $$2332 = 1; //@line 18268
                      $$5 = $22; //@line 18268
                      break;
                     }
                     if (($22 | 0) == (Math_imul($196, $195) | 0)) {
                      $$1 = $195; //@line 18274
                      $$2332 = 9; //@line 18274
                      $$5 = $$4; //@line 18274
                      break;
                     }
                     $200 = $$0 + 150 | 0; //@line 18277
                     $201 = ($22 >>> 0) / ($200 >>> 0) | 0; //@line 18278
                     if ($201 >>> 0 < $200 >>> 0) {
                      $$1 = $200; //@line 18281
                      $$2332 = 1; //@line 18281
                      $$5 = $22; //@line 18281
                      break;
                     }
                     if (($22 | 0) == (Math_imul($201, $200) | 0)) {
                      $$1 = $200; //@line 18287
                      $$2332 = 9; //@line 18287
                      $$5 = $$4; //@line 18287
                      break;
                     }
                     $205 = $$0 + 156 | 0; //@line 18290
                     $206 = ($22 >>> 0) / ($205 >>> 0) | 0; //@line 18291
                     if ($206 >>> 0 < $205 >>> 0) {
                      $$1 = $205; //@line 18294
                      $$2332 = 1; //@line 18294
                      $$5 = $22; //@line 18294
                      break;
                     }
                     if (($22 | 0) == (Math_imul($206, $205) | 0)) {
                      $$1 = $205; //@line 18300
                      $$2332 = 9; //@line 18300
                      $$5 = $$4; //@line 18300
                      break;
                     }
                     $210 = $$0 + 162 | 0; //@line 18303
                     $211 = ($22 >>> 0) / ($210 >>> 0) | 0; //@line 18304
                     if ($211 >>> 0 < $210 >>> 0) {
                      $$1 = $210; //@line 18307
                      $$2332 = 1; //@line 18307
                      $$5 = $22; //@line 18307
                      break;
                     }
                     if (($22 | 0) == (Math_imul($211, $210) | 0)) {
                      $$1 = $210; //@line 18313
                      $$2332 = 9; //@line 18313
                      $$5 = $$4; //@line 18313
                      break;
                     }
                     $215 = $$0 + 166 | 0; //@line 18316
                     $216 = ($22 >>> 0) / ($215 >>> 0) | 0; //@line 18317
                     if ($216 >>> 0 < $215 >>> 0) {
                      $$1 = $215; //@line 18320
                      $$2332 = 1; //@line 18320
                      $$5 = $22; //@line 18320
                      break;
                     }
                     if (($22 | 0) == (Math_imul($216, $215) | 0)) {
                      $$1 = $215; //@line 18326
                      $$2332 = 9; //@line 18326
                      $$5 = $$4; //@line 18326
                      break;
                     }
                     $220 = $$0 + 168 | 0; //@line 18329
                     $221 = ($22 >>> 0) / ($220 >>> 0) | 0; //@line 18330
                     if ($221 >>> 0 < $220 >>> 0) {
                      $$1 = $220; //@line 18333
                      $$2332 = 1; //@line 18333
                      $$5 = $22; //@line 18333
                      break;
                     }
                     if (($22 | 0) == (Math_imul($221, $220) | 0)) {
                      $$1 = $220; //@line 18339
                      $$2332 = 9; //@line 18339
                      $$5 = $$4; //@line 18339
                      break;
                     }
                     $225 = $$0 + 172 | 0; //@line 18342
                     $226 = ($22 >>> 0) / ($225 >>> 0) | 0; //@line 18343
                     if ($226 >>> 0 < $225 >>> 0) {
                      $$1 = $225; //@line 18346
                      $$2332 = 1; //@line 18346
                      $$5 = $22; //@line 18346
                      break;
                     }
                     if (($22 | 0) == (Math_imul($226, $225) | 0)) {
                      $$1 = $225; //@line 18352
                      $$2332 = 9; //@line 18352
                      $$5 = $$4; //@line 18352
                      break;
                     }
                     $230 = $$0 + 178 | 0; //@line 18355
                     $231 = ($22 >>> 0) / ($230 >>> 0) | 0; //@line 18356
                     if ($231 >>> 0 < $230 >>> 0) {
                      $$1 = $230; //@line 18359
                      $$2332 = 1; //@line 18359
                      $$5 = $22; //@line 18359
                      break;
                     }
                     if (($22 | 0) == (Math_imul($231, $230) | 0)) {
                      $$1 = $230; //@line 18365
                      $$2332 = 9; //@line 18365
                      $$5 = $$4; //@line 18365
                      break;
                     }
                     $235 = $$0 + 180 | 0; //@line 18368
                     $236 = ($22 >>> 0) / ($235 >>> 0) | 0; //@line 18369
                     if ($236 >>> 0 < $235 >>> 0) {
                      $$1 = $235; //@line 18372
                      $$2332 = 1; //@line 18372
                      $$5 = $22; //@line 18372
                      break;
                     }
                     if (($22 | 0) == (Math_imul($236, $235) | 0)) {
                      $$1 = $235; //@line 18378
                      $$2332 = 9; //@line 18378
                      $$5 = $$4; //@line 18378
                      break;
                     }
                     $240 = $$0 + 186 | 0; //@line 18381
                     $241 = ($22 >>> 0) / ($240 >>> 0) | 0; //@line 18382
                     if ($241 >>> 0 < $240 >>> 0) {
                      $$1 = $240; //@line 18385
                      $$2332 = 1; //@line 18385
                      $$5 = $22; //@line 18385
                      break;
                     }
                     if (($22 | 0) == (Math_imul($241, $240) | 0)) {
                      $$1 = $240; //@line 18391
                      $$2332 = 9; //@line 18391
                      $$5 = $$4; //@line 18391
                      break;
                     }
                     $245 = $$0 + 190 | 0; //@line 18394
                     $246 = ($22 >>> 0) / ($245 >>> 0) | 0; //@line 18395
                     if ($246 >>> 0 < $245 >>> 0) {
                      $$1 = $245; //@line 18398
                      $$2332 = 1; //@line 18398
                      $$5 = $22; //@line 18398
                      break;
                     }
                     if (($22 | 0) == (Math_imul($246, $245) | 0)) {
                      $$1 = $245; //@line 18404
                      $$2332 = 9; //@line 18404
                      $$5 = $$4; //@line 18404
                      break;
                     }
                     $250 = $$0 + 192 | 0; //@line 18407
                     $251 = ($22 >>> 0) / ($250 >>> 0) | 0; //@line 18408
                     if ($251 >>> 0 < $250 >>> 0) {
                      $$1 = $250; //@line 18411
                      $$2332 = 1; //@line 18411
                      $$5 = $22; //@line 18411
                      break;
                     }
                     if (($22 | 0) == (Math_imul($251, $250) | 0)) {
                      $$1 = $250; //@line 18417
                      $$2332 = 9; //@line 18417
                      $$5 = $$4; //@line 18417
                      break;
                     }
                     $255 = $$0 + 196 | 0; //@line 18420
                     $256 = ($22 >>> 0) / ($255 >>> 0) | 0; //@line 18421
                     if ($256 >>> 0 < $255 >>> 0) {
                      $$1 = $255; //@line 18424
                      $$2332 = 1; //@line 18424
                      $$5 = $22; //@line 18424
                      break;
                     }
                     if (($22 | 0) == (Math_imul($256, $255) | 0)) {
                      $$1 = $255; //@line 18430
                      $$2332 = 9; //@line 18430
                      $$5 = $$4; //@line 18430
                      break;
                     }
                     $260 = $$0 + 198 | 0; //@line 18433
                     $261 = ($22 >>> 0) / ($260 >>> 0) | 0; //@line 18434
                     if ($261 >>> 0 < $260 >>> 0) {
                      $$1 = $260; //@line 18437
                      $$2332 = 1; //@line 18437
                      $$5 = $22; //@line 18437
                      break;
                     }
                     if (($22 | 0) == (Math_imul($261, $260) | 0)) {
                      $$1 = $260; //@line 18443
                      $$2332 = 9; //@line 18443
                      $$5 = $$4; //@line 18443
                      break;
                     }
                     $265 = $$0 + 208 | 0; //@line 18446
                     $266 = ($22 >>> 0) / ($265 >>> 0) | 0; //@line 18447
                     $267 = $266 >>> 0 < $265 >>> 0; //@line 18448
                     $269 = ($22 | 0) == (Math_imul($266, $265) | 0); //@line 18450
                     $$1 = $267 | $269 ? $265 : $$0 + 210 | 0; //@line 18457
                     $$2332 = $267 ? 1 : $269 ? 9 : 0; //@line 18457
                     $$5 = $267 ? $22 : $$4; //@line 18457
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       } while (0);
       switch ($$2332 & 15) {
       case 9:
        {
         $$6 = $$5; //@line 18476
         break L16;
         break;
        }
       case 0:
        {
         $$0 = $$1; //@line 18481
         $$4 = $$5; //@line 18481
         label = 12; //@line 18482
         break;
        }
       default:
        {
         break L17;
        }
       }
      }
      if (!$$2332) {
       $$6 = $$5; //@line 18492
      } else {
       label = 111; //@line 18494
       break L10;
      }
     }
    } while (0);
    $272 = $$1336$sink + 1 | 0; //@line 18499
    $273 = ($272 | 0) == 48; //@line 18500
    $$$0337 = $$0337 + ($273 & 1) | 0; //@line 18502
    $$0328 = $$6; //@line 18505
    $$0337 = $$$0337; //@line 18505
    $$1336$sink = $273 ? 0 : $272; //@line 18505
    $$sink = $$$0337 * 210 | 0; //@line 18505
   }
   if ((label | 0) == 110) {
    HEAP32[$2 >> 2] = $22; //@line 18508
    $$8 = $22; //@line 18509
    break;
   } else if ((label | 0) == 111) {
    HEAP32[$2 >> 2] = $22; //@line 18513
    $$8 = $$5; //@line 18514
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 18519
 return $$8 | 0; //@line 18519
}
function __ZN6Parser15delegateParsingERNSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEERNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEESC_b($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$2 = 0, $$220 = 0, $$byval_copy7 = 0, $$phi$trans$insert = 0, $$phi$trans$insert110 = 0, $$phi$trans$insert113 = 0, $$phi$trans$insert116 = 0, $$pre = 0, $$pre112 = 0, $$pre115 = 0, $$pre118 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $123 = 0, $125 = 0, $126 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $165 = 0, $17 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $179 = 0, $182 = 0, $185 = 0, $186 = 0, $187 = 0, $192 = 0, $194 = 0, $200 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $209 = 0, $211 = 0, $220 = 0, $222 = 0, $223 = 0, $228 = 0, $23 = 0, $231 = 0, $232 = 0, $237 = 0, $239 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $246 = 0, $249 = 0, $25 = 0, $252 = 0, $253 = 0, $254 = 0, $259 = 0, $261 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $276 = 0, $278 = 0, $28 = 0, $283 = 0, $285 = 0, $288 = 0, $289 = 0, $29 = 0, $294 = 0, $296 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $303 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $316 = 0, $318 = 0, $324 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $333 = 0, $335 = 0, $34 = 0, $340 = 0, $342 = 0, $343 = 0, $347 = 0, $351 = 0, $353 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $362 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $371 = 0, $373 = 0, $378 = 0, $38 = 0, $383 = 0, $384 = 0, $386 = 0, $387 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $396 = 0, $398 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $73 = 0, $75 = 0, $8 = 0, $84 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28
 STACKTOP = STACKTOP + 256 | 0; //@line 29
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 29
 $$byval_copy7 = sp + 253 | 0; //@line 30
 $5 = sp + 252 | 0; //@line 31
 $6 = sp + 72 | 0; //@line 32
 $7 = sp + 240 | 0; //@line 33
 $8 = sp; //@line 34
 $9 = sp + 228 | 0; //@line 35
 $10 = sp + 144 | 0; //@line 36
 $11 = sp + 216 | 0; //@line 37
 $12 = $6 + 4 | 0; //@line 38
 HEAP32[$12 >> 2] = 0; //@line 39
 HEAP32[$12 + 4 >> 2] = 0; //@line 39
 HEAP32[$12 + 8 >> 2] = 0; //@line 39
 $13 = $6 + 40 | 0; //@line 40
 HEAP32[$13 >> 2] = 0; //@line 41
 HEAP32[$13 + 4 >> 2] = 0; //@line 41
 HEAP32[$13 + 8 >> 2] = 0; //@line 41
 HEAP32[$13 + 12 >> 2] = 0; //@line 41
 HEAP32[$13 + 16 >> 2] = 0; //@line 41
 HEAP32[$13 + 20 >> 2] = 0; //@line 41
 __THREW__ = 0; //@line 42
 invoke_vii(115, $7 | 0, $2 | 0); //@line 43
 $14 = __THREW__; //@line 44
 __THREW__ = 0; //@line 44
 L1 : do {
  if ($14 & 1) {
   label = 46; //@line 48
  } else {
   __THREW__ = 0; //@line 50
   $16 = invoke_iii(69, 0, $7 | 0) | 0; //@line 51
   $17 = __THREW__; //@line 52
   __THREW__ = 0; //@line 52
   if ($17 & 1) {
    $117 = ___cxa_find_matching_catch_2() | 0; //@line 55
    $118 = tempRet0; //@line 56
    if ((HEAP8[$7 + 11 >> 0] | 0) >= 0) {
     $$2 = $118; //@line 61
     $$220 = $117; //@line 61
     break;
    }
    __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 65
    $$2 = $118; //@line 66
    $$220 = $117; //@line 66
    break;
   }
   if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 74
   }
   L10 : do {
    switch ($16 | 0) {
    case 4:
     {
      __THREW__ = 0; //@line 79
      invoke_vii(115, $9 | 0, $2 | 0); //@line 80
      $23 = __THREW__; //@line 81
      __THREW__ = 0; //@line 81
      do {
       if ($23 & 1) {
        $123 = ___cxa_find_matching_catch_2() | 0; //@line 85
        $$0 = tempRet0; //@line 87
        $$018 = $123; //@line 87
       } else {
        __THREW__ = 0; //@line 89
        invoke_viii(32, $8 | 0, 0, $9 | 0); //@line 90
        $25 = __THREW__; //@line 91
        __THREW__ = 0; //@line 91
        if ($25 & 1) {
         $125 = ___cxa_find_matching_catch_2() | 0; //@line 94
         $126 = tempRet0; //@line 95
         if ((HEAP8[$9 + 11 >> 0] | 0) >= 0) {
          $$0 = $126; //@line 100
          $$018 = $125; //@line 100
          break;
         }
         __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 104
         $$0 = $126; //@line 105
         $$018 = $125; //@line 105
         break;
        }
        HEAP32[$6 >> 2] = HEAP32[$8 >> 2]; //@line 109
        $28 = $8 + 4 | 0; //@line 110
        $29 = $12 + 11 | 0; //@line 111
        if ((HEAP8[$29 >> 0] | 0) < 0) {
         HEAP8[HEAP32[$12 >> 2] >> 0] = 0; //@line 116
         HEAP32[$6 + 8 >> 2] = 0; //@line 118
        } else {
         HEAP8[$12 >> 0] = 0; //@line 120
         HEAP8[$29 >> 0] = 0; //@line 121
        }
        __THREW__ = 0; //@line 123
        invoke_vii(129, $12 | 0, 0); //@line 124
        $34 = __THREW__; //@line 125
        __THREW__ = 0; //@line 125
        if ($34 & 1) {
         $36 = ___cxa_find_matching_catch_3(0) | 0; //@line 128
         ___clang_call_terminate($36); //@line 130
        }
        HEAP32[$12 >> 2] = HEAP32[$28 >> 2]; //@line 133
        HEAP32[$12 + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 133
        HEAP32[$12 + 8 >> 2] = HEAP32[$28 + 8 >> 2]; //@line 133
        HEAP32[$28 >> 2] = 0; //@line 134
        HEAP32[$28 + 4 >> 2] = 0; //@line 134
        HEAP32[$28 + 8 >> 2] = 0; //@line 134
        $38 = $6 + 16 | 0; //@line 135
        $39 = $8 + 16 | 0; //@line 136
        HEAP32[$38 >> 2] = HEAP32[$39 >> 2]; //@line 137
        HEAP32[$38 + 4 >> 2] = HEAP32[$39 + 4 >> 2]; //@line 137
        HEAP32[$38 + 8 >> 2] = HEAP32[$39 + 8 >> 2]; //@line 137
        HEAP32[$38 + 12 >> 2] = HEAP32[$39 + 12 >> 2]; //@line 137
        HEAP32[$38 + 16 >> 2] = HEAP32[$39 + 16 >> 2]; //@line 137
        HEAP32[$38 + 20 >> 2] = HEAP32[$39 + 20 >> 2]; //@line 137
        $40 = $6 + 40 | 0; //@line 138
        $41 = $8 + 40 | 0; //@line 139
        __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($40); //@line 140
        HEAP32[$40 >> 2] = HEAP32[$41 >> 2]; //@line 142
        $43 = $8 + 44 | 0; //@line 143
        HEAP32[$6 + 44 >> 2] = HEAP32[$43 >> 2]; //@line 146
        $46 = $8 + 48 | 0; //@line 147
        HEAP32[$6 + 48 >> 2] = HEAP32[$46 >> 2]; //@line 150
        HEAP32[$46 >> 2] = 0; //@line 151
        HEAP32[$43 >> 2] = 0; //@line 152
        HEAP32[$41 >> 2] = 0; //@line 153
        $49 = $6 + 52 | 0; //@line 154
        $50 = $8 + 52 | 0; //@line 155
        $51 = $49 + 11 | 0; //@line 156
        if ((HEAP8[$51 >> 0] | 0) < 0) {
         HEAP8[HEAP32[$49 >> 2] >> 0] = 0; //@line 161
         HEAP32[$6 + 56 >> 2] = 0; //@line 163
        } else {
         HEAP8[$49 >> 0] = 0; //@line 165
         HEAP8[$51 >> 0] = 0; //@line 166
        }
        __THREW__ = 0; //@line 168
        invoke_vii(129, $49 | 0, 0); //@line 169
        $56 = __THREW__; //@line 170
        __THREW__ = 0; //@line 170
        if ($56 & 1) {
         $58 = ___cxa_find_matching_catch_3(0) | 0; //@line 173
         ___clang_call_terminate($58); //@line 175
        }
        HEAP32[$49 >> 2] = HEAP32[$50 >> 2]; //@line 178
        HEAP32[$49 + 4 >> 2] = HEAP32[$50 + 4 >> 2]; //@line 178
        HEAP32[$49 + 8 >> 2] = HEAP32[$50 + 8 >> 2]; //@line 178
        HEAP32[$50 >> 2] = 0; //@line 179
        HEAP32[$50 + 4 >> 2] = 0; //@line 179
        HEAP32[$50 + 8 >> 2] = 0; //@line 179
        HEAP16[$6 + 64 >> 1] = HEAP16[$8 + 64 >> 1] | 0; //@line 183
        $$phi$trans$insert116 = $8 + 40 | 0; //@line 184
        $$pre118 = HEAP32[$$phi$trans$insert116 >> 2] | 0; //@line 185
        if ($$pre118 | 0) {
         $64 = HEAP32[$43 >> 2] | 0; //@line 188
         do {
          if (($64 | 0) == ($$pre118 | 0)) {
           $75 = $$pre118; //@line 192
          } else {
           $66 = $8 + 48 | 0; //@line 194
           $68 = $64; //@line 195
           while (1) {
            $67 = $68 + -72 | 0; //@line 197
            HEAP32[$43 >> 2] = $67; //@line 198
            __THREW__ = 0; //@line 199
            HEAP8[$$byval_copy7 >> 0] = HEAP8[$5 >> 0] | 0; //@line 200
            invoke_viii(13, $$byval_copy7 | 0, $66 | 0, $67 | 0); //@line 201
            $69 = __THREW__; //@line 202
            __THREW__ = 0; //@line 202
            if ($69 & 1) {
             label = 23; //@line 205
             break;
            }
            $68 = HEAP32[$43 >> 2] | 0; //@line 208
            if (($68 | 0) == ($$pre118 | 0)) {
             label = 24; //@line 211
             break;
            }
           }
           if ((label | 0) == 23) {
            $73 = ___cxa_find_matching_catch_3(0) | 0; //@line 218
            ___clang_call_terminate($73); //@line 220
           } else if ((label | 0) == 24) {
            $75 = HEAP32[$$phi$trans$insert116 >> 2] | 0; //@line 225
            break;
           }
          }
         } while (0);
         __ZdlPv($75); //@line 230
        }
        if ((HEAP8[$28 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 237
        }
        if ((HEAP8[$9 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 244
        }
        if (!$4) {
         label = 140; //@line 247
         break L10;
        }
        __THREW__ = 0; //@line 250
        invoke_vii(120, $10 | 0, $6 | 0); //@line 251
        $84 = __THREW__; //@line 252
        __THREW__ = 0; //@line 252
        if ($84 & 1) {
         label = 46; //@line 255
         break L1;
        }
        __THREW__ = 0; //@line 258
        $86 = invoke_iiii(31, $0 | 0, $1 | 0, $10 | 0) | 0; //@line 259
        $87 = __THREW__; //@line 260
        __THREW__ = 0; //@line 260
        if ($87 & 1) {
         $131 = ___cxa_find_matching_catch_2() | 0; //@line 263
         $132 = tempRet0; //@line 264
         $133 = $10 + 52 | 0; //@line 265
         if ((HEAP8[$133 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$133 >> 2] | 0); //@line 271
         }
         $138 = $10 + 40 | 0; //@line 273
         $139 = HEAP32[$138 >> 2] | 0; //@line 274
         if ($139 | 0) {
          $141 = $10 + 44 | 0; //@line 277
          $142 = HEAP32[$141 >> 2] | 0; //@line 278
          do {
           if (($142 | 0) == ($139 | 0)) {
            $153 = $139; //@line 282
           } else {
            $144 = $10 + 48 | 0; //@line 284
            $146 = $142; //@line 285
            while (1) {
             $145 = $146 + -72 | 0; //@line 287
             HEAP32[$141 >> 2] = $145; //@line 288
             __THREW__ = 0; //@line 289
             HEAP8[$$byval_copy7 >> 0] = HEAP8[$5 >> 0] | 0; //@line 290
             invoke_viii(13, $$byval_copy7 | 0, $144 | 0, $145 | 0); //@line 291
             $147 = __THREW__; //@line 292
             __THREW__ = 0; //@line 292
             if ($147 & 1) {
              label = 60; //@line 295
              break;
             }
             $146 = HEAP32[$141 >> 2] | 0; //@line 298
             if (($146 | 0) == ($139 | 0)) {
              label = 61; //@line 301
              break;
             }
            }
            if ((label | 0) == 60) {
             $151 = ___cxa_find_matching_catch_3(0) | 0; //@line 308
             ___clang_call_terminate($151); //@line 310
            } else if ((label | 0) == 61) {
             $153 = HEAP32[$138 >> 2] | 0; //@line 315
             break;
            }
           }
          } while (0);
          __ZdlPv($153); //@line 320
         }
         $154 = $10 + 4 | 0; //@line 322
         if ((HEAP8[$154 + 11 >> 0] | 0) >= 0) {
          $$2 = $132; //@line 327
          $$220 = $131; //@line 327
          break L1;
         }
         __ZdlPv(HEAP32[$154 >> 2] | 0); //@line 331
         $$2 = $132; //@line 332
         $$220 = $131; //@line 332
         break L1;
        }
        $89 = $10 + 52 | 0; //@line 335
        if ((HEAP8[$89 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$89 >> 2] | 0); //@line 341
        }
        $94 = $10 + 40 | 0; //@line 343
        $95 = HEAP32[$94 >> 2] | 0; //@line 344
        if ($95 | 0) {
         $97 = $10 + 44 | 0; //@line 347
         $98 = HEAP32[$97 >> 2] | 0; //@line 348
         do {
          if (($98 | 0) == ($95 | 0)) {
           $109 = $95; //@line 352
          } else {
           $100 = $10 + 48 | 0; //@line 354
           $102 = $98; //@line 355
           while (1) {
            $101 = $102 + -72 | 0; //@line 357
            HEAP32[$97 >> 2] = $101; //@line 358
            __THREW__ = 0; //@line 359
            HEAP8[$$byval_copy7 >> 0] = HEAP8[$5 >> 0] | 0; //@line 360
            invoke_viii(13, $$byval_copy7 | 0, $100 | 0, $101 | 0); //@line 361
            $103 = __THREW__; //@line 362
            __THREW__ = 0; //@line 362
            if ($103 & 1) {
             label = 40; //@line 365
             break;
            }
            $102 = HEAP32[$97 >> 2] | 0; //@line 368
            if (($102 | 0) == ($95 | 0)) {
             label = 41; //@line 371
             break;
            }
           }
           if ((label | 0) == 40) {
            $107 = ___cxa_find_matching_catch_3(0) | 0; //@line 378
            ___clang_call_terminate($107); //@line 380
           } else if ((label | 0) == 41) {
            $109 = HEAP32[$94 >> 2] | 0; //@line 385
            break;
           }
          }
         } while (0);
         __ZdlPv($109); //@line 390
        }
        $110 = $10 + 4 | 0; //@line 392
        if ((HEAP8[$110 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$110 >> 2] | 0); //@line 398
        }
        if ($86) {
         break L10;
        } else {
         label = 140; //@line 403
         break L10;
        }
       }
      } while (0);
      $$2 = $$0; //@line 408
      $$220 = $$018; //@line 408
      break L1;
      break;
     }
    case 2:
     {
      __THREW__ = 0; //@line 413
      invoke_vii(115, $11 | 0, $2 | 0); //@line 414
      $159 = __THREW__; //@line 415
      __THREW__ = 0; //@line 415
      do {
       if ($159 & 1) {
        $220 = ___cxa_find_matching_catch_2() | 0; //@line 419
        $$1 = tempRet0; //@line 421
        $$119 = $220; //@line 421
       } else {
        __THREW__ = 0; //@line 423
        invoke_viii(33, $8 | 0, 0, $11 | 0); //@line 424
        $161 = __THREW__; //@line 425
        __THREW__ = 0; //@line 425
        if ($161 & 1) {
         $222 = ___cxa_find_matching_catch_2() | 0; //@line 428
         $223 = tempRet0; //@line 429
         if ((HEAP8[$11 + 11 >> 0] | 0) >= 0) {
          $$1 = $223; //@line 434
          $$119 = $222; //@line 434
          break;
         }
         __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 438
         $$1 = $223; //@line 439
         $$119 = $222; //@line 439
         break;
        }
        HEAP32[$6 >> 2] = HEAP32[$8 >> 2]; //@line 443
        $164 = $8 + 4 | 0; //@line 444
        $165 = $12 + 11 | 0; //@line 445
        if ((HEAP8[$165 >> 0] | 0) < 0) {
         HEAP8[HEAP32[$12 >> 2] >> 0] = 0; //@line 450
         HEAP32[$6 + 8 >> 2] = 0; //@line 452
        } else {
         HEAP8[$12 >> 0] = 0; //@line 454
         HEAP8[$165 >> 0] = 0; //@line 455
        }
        __THREW__ = 0; //@line 457
        invoke_vii(129, $12 | 0, 0); //@line 458
        $170 = __THREW__; //@line 459
        __THREW__ = 0; //@line 459
        if ($170 & 1) {
         $172 = ___cxa_find_matching_catch_3(0) | 0; //@line 462
         ___clang_call_terminate($172); //@line 464
        }
        HEAP32[$12 >> 2] = HEAP32[$164 >> 2]; //@line 467
        HEAP32[$12 + 4 >> 2] = HEAP32[$164 + 4 >> 2]; //@line 467
        HEAP32[$12 + 8 >> 2] = HEAP32[$164 + 8 >> 2]; //@line 467
        HEAP32[$164 >> 2] = 0; //@line 468
        HEAP32[$164 + 4 >> 2] = 0; //@line 468
        HEAP32[$164 + 8 >> 2] = 0; //@line 468
        $174 = $6 + 16 | 0; //@line 469
        $175 = $8 + 16 | 0; //@line 470
        HEAP32[$174 >> 2] = HEAP32[$175 >> 2]; //@line 471
        HEAP32[$174 + 4 >> 2] = HEAP32[$175 + 4 >> 2]; //@line 471
        HEAP32[$174 + 8 >> 2] = HEAP32[$175 + 8 >> 2]; //@line 471
        HEAP32[$174 + 12 >> 2] = HEAP32[$175 + 12 >> 2]; //@line 471
        HEAP32[$174 + 16 >> 2] = HEAP32[$175 + 16 >> 2]; //@line 471
        HEAP32[$174 + 20 >> 2] = HEAP32[$175 + 20 >> 2]; //@line 471
        $176 = $6 + 40 | 0; //@line 472
        $177 = $8 + 40 | 0; //@line 473
        __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($176); //@line 474
        HEAP32[$176 >> 2] = HEAP32[$177 >> 2]; //@line 476
        $179 = $8 + 44 | 0; //@line 477
        HEAP32[$6 + 44 >> 2] = HEAP32[$179 >> 2]; //@line 480
        $182 = $8 + 48 | 0; //@line 481
        HEAP32[$6 + 48 >> 2] = HEAP32[$182 >> 2]; //@line 484
        HEAP32[$182 >> 2] = 0; //@line 485
        HEAP32[$179 >> 2] = 0; //@line 486
        HEAP32[$177 >> 2] = 0; //@line 487
        $185 = $6 + 52 | 0; //@line 488
        $186 = $8 + 52 | 0; //@line 489
        $187 = $185 + 11 | 0; //@line 490
        if ((HEAP8[$187 >> 0] | 0) < 0) {
         HEAP8[HEAP32[$185 >> 2] >> 0] = 0; //@line 495
         HEAP32[$6 + 56 >> 2] = 0; //@line 497
        } else {
         HEAP8[$185 >> 0] = 0; //@line 499
         HEAP8[$187 >> 0] = 0; //@line 500
        }
        __THREW__ = 0; //@line 502
        invoke_vii(129, $185 | 0, 0); //@line 503
        $192 = __THREW__; //@line 504
        __THREW__ = 0; //@line 504
        if ($192 & 1) {
         $194 = ___cxa_find_matching_catch_3(0) | 0; //@line 507
         ___clang_call_terminate($194); //@line 509
        }
        HEAP32[$185 >> 2] = HEAP32[$186 >> 2]; //@line 512
        HEAP32[$185 + 4 >> 2] = HEAP32[$186 + 4 >> 2]; //@line 512
        HEAP32[$185 + 8 >> 2] = HEAP32[$186 + 8 >> 2]; //@line 512
        HEAP32[$186 >> 2] = 0; //@line 513
        HEAP32[$186 + 4 >> 2] = 0; //@line 513
        HEAP32[$186 + 8 >> 2] = 0; //@line 513
        HEAP16[$6 + 64 >> 1] = HEAP16[$8 + 64 >> 1] | 0; //@line 517
        $$phi$trans$insert113 = $8 + 40 | 0; //@line 518
        $$pre115 = HEAP32[$$phi$trans$insert113 >> 2] | 0; //@line 519
        if ($$pre115 | 0) {
         $200 = HEAP32[$179 >> 2] | 0; //@line 522
         do {
          if (($200 | 0) == ($$pre115 | 0)) {
           $211 = $$pre115; //@line 526
          } else {
           $202 = $8 + 48 | 0; //@line 528
           $204 = $200; //@line 529
           while (1) {
            $203 = $204 + -72 | 0; //@line 531
            HEAP32[$179 >> 2] = $203; //@line 532
            __THREW__ = 0; //@line 533
            HEAP8[$$byval_copy7 >> 0] = HEAP8[$5 >> 0] | 0; //@line 534
            invoke_viii(13, $$byval_copy7 | 0, $202 | 0, $203 | 0); //@line 535
            $205 = __THREW__; //@line 536
            __THREW__ = 0; //@line 536
            if ($205 & 1) {
             label = 82; //@line 539
             break;
            }
            $204 = HEAP32[$179 >> 2] | 0; //@line 542
            if (($204 | 0) == ($$pre115 | 0)) {
             label = 83; //@line 545
             break;
            }
           }
           if ((label | 0) == 82) {
            $209 = ___cxa_find_matching_catch_3(0) | 0; //@line 552
            ___clang_call_terminate($209); //@line 554
           } else if ((label | 0) == 83) {
            $211 = HEAP32[$$phi$trans$insert113 >> 2] | 0; //@line 559
            break;
           }
          }
         } while (0);
         __ZdlPv($211); //@line 564
        }
        if ((HEAP8[$164 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$164 >> 2] | 0); //@line 571
        }
        if ((HEAP8[$11 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 578
        }
        label = 140; //@line 580
        break L10;
       }
      } while (0);
      $$2 = $$1; //@line 584
      $$220 = $$119; //@line 584
      break L1;
      break;
     }
    case 3:
     {
      __THREW__ = 0; //@line 589
      invoke_viiii(19, $8 | 0, 0, $2 | 0, $3 | 0); //@line 590
      $228 = __THREW__; //@line 591
      __THREW__ = 0; //@line 591
      if ($228 & 1) {
       $283 = ___cxa_find_matching_catch_2() | 0; //@line 594
       $$2 = tempRet0; //@line 596
       $$220 = $283; //@line 596
       break L1;
      }
      HEAP32[$6 >> 2] = HEAP32[$8 >> 2]; //@line 600
      $231 = $8 + 4 | 0; //@line 601
      $232 = $12 + 11 | 0; //@line 602
      if ((HEAP8[$232 >> 0] | 0) < 0) {
       HEAP8[HEAP32[$12 >> 2] >> 0] = 0; //@line 607
       HEAP32[$6 + 8 >> 2] = 0; //@line 609
      } else {
       HEAP8[$12 >> 0] = 0; //@line 611
       HEAP8[$232 >> 0] = 0; //@line 612
      }
      __THREW__ = 0; //@line 614
      invoke_vii(129, $12 | 0, 0); //@line 615
      $237 = __THREW__; //@line 616
      __THREW__ = 0; //@line 616
      if ($237 & 1) {
       $239 = ___cxa_find_matching_catch_3(0) | 0; //@line 619
       ___clang_call_terminate($239); //@line 621
      }
      HEAP32[$12 >> 2] = HEAP32[$231 >> 2]; //@line 624
      HEAP32[$12 + 4 >> 2] = HEAP32[$231 + 4 >> 2]; //@line 624
      HEAP32[$12 + 8 >> 2] = HEAP32[$231 + 8 >> 2]; //@line 624
      HEAP32[$231 >> 2] = 0; //@line 625
      HEAP32[$231 + 4 >> 2] = 0; //@line 625
      HEAP32[$231 + 8 >> 2] = 0; //@line 625
      $241 = $6 + 16 | 0; //@line 626
      $242 = $8 + 16 | 0; //@line 627
      HEAP32[$241 >> 2] = HEAP32[$242 >> 2]; //@line 628
      HEAP32[$241 + 4 >> 2] = HEAP32[$242 + 4 >> 2]; //@line 628
      HEAP32[$241 + 8 >> 2] = HEAP32[$242 + 8 >> 2]; //@line 628
      HEAP32[$241 + 12 >> 2] = HEAP32[$242 + 12 >> 2]; //@line 628
      HEAP32[$241 + 16 >> 2] = HEAP32[$242 + 16 >> 2]; //@line 628
      HEAP32[$241 + 20 >> 2] = HEAP32[$242 + 20 >> 2]; //@line 628
      $243 = $6 + 40 | 0; //@line 629
      $244 = $8 + 40 | 0; //@line 630
      __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($243); //@line 631
      HEAP32[$243 >> 2] = HEAP32[$244 >> 2]; //@line 633
      $246 = $8 + 44 | 0; //@line 634
      HEAP32[$6 + 44 >> 2] = HEAP32[$246 >> 2]; //@line 637
      $249 = $8 + 48 | 0; //@line 638
      HEAP32[$6 + 48 >> 2] = HEAP32[$249 >> 2]; //@line 641
      HEAP32[$249 >> 2] = 0; //@line 642
      HEAP32[$246 >> 2] = 0; //@line 643
      HEAP32[$244 >> 2] = 0; //@line 644
      $252 = $6 + 52 | 0; //@line 645
      $253 = $8 + 52 | 0; //@line 646
      $254 = $252 + 11 | 0; //@line 647
      if ((HEAP8[$254 >> 0] | 0) < 0) {
       HEAP8[HEAP32[$252 >> 2] >> 0] = 0; //@line 652
       HEAP32[$6 + 56 >> 2] = 0; //@line 654
      } else {
       HEAP8[$252 >> 0] = 0; //@line 656
       HEAP8[$254 >> 0] = 0; //@line 657
      }
      __THREW__ = 0; //@line 659
      invoke_vii(129, $252 | 0, 0); //@line 660
      $259 = __THREW__; //@line 661
      __THREW__ = 0; //@line 661
      if ($259 & 1) {
       $261 = ___cxa_find_matching_catch_3(0) | 0; //@line 664
       ___clang_call_terminate($261); //@line 666
      }
      HEAP32[$252 >> 2] = HEAP32[$253 >> 2]; //@line 669
      HEAP32[$252 + 4 >> 2] = HEAP32[$253 + 4 >> 2]; //@line 669
      HEAP32[$252 + 8 >> 2] = HEAP32[$253 + 8 >> 2]; //@line 669
      HEAP32[$253 >> 2] = 0; //@line 670
      HEAP32[$253 + 4 >> 2] = 0; //@line 670
      HEAP32[$253 + 8 >> 2] = 0; //@line 670
      HEAP16[$6 + 64 >> 1] = HEAP16[$8 + 64 >> 1] | 0; //@line 674
      $$phi$trans$insert110 = $8 + 40 | 0; //@line 675
      $$pre112 = HEAP32[$$phi$trans$insert110 >> 2] | 0; //@line 676
      if ($$pre112 | 0) {
       $267 = HEAP32[$246 >> 2] | 0; //@line 679
       do {
        if (($267 | 0) == ($$pre112 | 0)) {
         $278 = $$pre112; //@line 683
        } else {
         $269 = $8 + 48 | 0; //@line 685
         $271 = $267; //@line 686
         while (1) {
          $270 = $271 + -72 | 0; //@line 688
          HEAP32[$246 >> 2] = $270; //@line 689
          __THREW__ = 0; //@line 690
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$5 >> 0] | 0; //@line 691
          invoke_viii(13, $$byval_copy7 | 0, $269 | 0, $270 | 0); //@line 692
          $272 = __THREW__; //@line 693
          __THREW__ = 0; //@line 693
          if ($272 & 1) {
           label = 110; //@line 696
           break;
          }
          $271 = HEAP32[$246 >> 2] | 0; //@line 699
          if (($271 | 0) == ($$pre112 | 0)) {
           label = 111; //@line 702
           break;
          }
         }
         if ((label | 0) == 110) {
          $276 = ___cxa_find_matching_catch_3(0) | 0; //@line 709
          ___clang_call_terminate($276); //@line 711
         } else if ((label | 0) == 111) {
          $278 = HEAP32[$$phi$trans$insert110 >> 2] | 0; //@line 716
          break;
         }
        }
       } while (0);
       __ZdlPv($278); //@line 721
      }
      if ((HEAP8[$231 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$231 >> 2] | 0); //@line 728
      }
      label = 140; //@line 730
      break;
     }
    case 1:
     {
      __THREW__ = 0; //@line 734
      invoke_viiii(20, $8 | 0, $0 | 0, $2 | 0, $3 | 0); //@line 735
      $285 = __THREW__; //@line 736
      __THREW__ = 0; //@line 736
      if ($285 & 1) {
       $340 = ___cxa_find_matching_catch_2() | 0; //@line 739
       $$2 = tempRet0; //@line 741
       $$220 = $340; //@line 741
       break L1;
      }
      HEAP32[$6 >> 2] = HEAP32[$8 >> 2]; //@line 745
      $288 = $8 + 4 | 0; //@line 746
      $289 = $12 + 11 | 0; //@line 747
      if ((HEAP8[$289 >> 0] | 0) < 0) {
       HEAP8[HEAP32[$12 >> 2] >> 0] = 0; //@line 752
       HEAP32[$6 + 8 >> 2] = 0; //@line 754
      } else {
       HEAP8[$12 >> 0] = 0; //@line 756
       HEAP8[$289 >> 0] = 0; //@line 757
      }
      __THREW__ = 0; //@line 759
      invoke_vii(129, $12 | 0, 0); //@line 760
      $294 = __THREW__; //@line 761
      __THREW__ = 0; //@line 761
      if ($294 & 1) {
       $296 = ___cxa_find_matching_catch_3(0) | 0; //@line 764
       ___clang_call_terminate($296); //@line 766
      }
      HEAP32[$12 >> 2] = HEAP32[$288 >> 2]; //@line 769
      HEAP32[$12 + 4 >> 2] = HEAP32[$288 + 4 >> 2]; //@line 769
      HEAP32[$12 + 8 >> 2] = HEAP32[$288 + 8 >> 2]; //@line 769
      HEAP32[$288 >> 2] = 0; //@line 770
      HEAP32[$288 + 4 >> 2] = 0; //@line 770
      HEAP32[$288 + 8 >> 2] = 0; //@line 770
      $298 = $6 + 16 | 0; //@line 771
      $299 = $8 + 16 | 0; //@line 772
      HEAP32[$298 >> 2] = HEAP32[$299 >> 2]; //@line 773
      HEAP32[$298 + 4 >> 2] = HEAP32[$299 + 4 >> 2]; //@line 773
      HEAP32[$298 + 8 >> 2] = HEAP32[$299 + 8 >> 2]; //@line 773
      HEAP32[$298 + 12 >> 2] = HEAP32[$299 + 12 >> 2]; //@line 773
      HEAP32[$298 + 16 >> 2] = HEAP32[$299 + 16 >> 2]; //@line 773
      HEAP32[$298 + 20 >> 2] = HEAP32[$299 + 20 >> 2]; //@line 773
      $300 = $6 + 40 | 0; //@line 774
      $301 = $8 + 40 | 0; //@line 775
      __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($300); //@line 776
      HEAP32[$300 >> 2] = HEAP32[$301 >> 2]; //@line 778
      $303 = $8 + 44 | 0; //@line 779
      HEAP32[$6 + 44 >> 2] = HEAP32[$303 >> 2]; //@line 782
      $306 = $8 + 48 | 0; //@line 783
      HEAP32[$6 + 48 >> 2] = HEAP32[$306 >> 2]; //@line 786
      HEAP32[$306 >> 2] = 0; //@line 787
      HEAP32[$303 >> 2] = 0; //@line 788
      HEAP32[$301 >> 2] = 0; //@line 789
      $309 = $6 + 52 | 0; //@line 790
      $310 = $8 + 52 | 0; //@line 791
      $311 = $309 + 11 | 0; //@line 792
      if ((HEAP8[$311 >> 0] | 0) < 0) {
       HEAP8[HEAP32[$309 >> 2] >> 0] = 0; //@line 797
       HEAP32[$6 + 56 >> 2] = 0; //@line 799
      } else {
       HEAP8[$309 >> 0] = 0; //@line 801
       HEAP8[$311 >> 0] = 0; //@line 802
      }
      __THREW__ = 0; //@line 804
      invoke_vii(129, $309 | 0, 0); //@line 805
      $316 = __THREW__; //@line 806
      __THREW__ = 0; //@line 806
      if ($316 & 1) {
       $318 = ___cxa_find_matching_catch_3(0) | 0; //@line 809
       ___clang_call_terminate($318); //@line 811
      }
      HEAP32[$309 >> 2] = HEAP32[$310 >> 2]; //@line 814
      HEAP32[$309 + 4 >> 2] = HEAP32[$310 + 4 >> 2]; //@line 814
      HEAP32[$309 + 8 >> 2] = HEAP32[$310 + 8 >> 2]; //@line 814
      HEAP32[$310 >> 2] = 0; //@line 815
      HEAP32[$310 + 4 >> 2] = 0; //@line 815
      HEAP32[$310 + 8 >> 2] = 0; //@line 815
      HEAP16[$6 + 64 >> 1] = HEAP16[$8 + 64 >> 1] | 0; //@line 819
      $$phi$trans$insert = $8 + 40 | 0; //@line 820
      $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 821
      if ($$pre | 0) {
       $324 = HEAP32[$303 >> 2] | 0; //@line 824
       do {
        if (($324 | 0) == ($$pre | 0)) {
         $335 = $$pre; //@line 828
        } else {
         $326 = $8 + 48 | 0; //@line 830
         $328 = $324; //@line 831
         while (1) {
          $327 = $328 + -72 | 0; //@line 833
          HEAP32[$303 >> 2] = $327; //@line 834
          __THREW__ = 0; //@line 835
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$5 >> 0] | 0; //@line 836
          invoke_viii(13, $$byval_copy7 | 0, $326 | 0, $327 | 0); //@line 837
          $329 = __THREW__; //@line 838
          __THREW__ = 0; //@line 838
          if ($329 & 1) {
           label = 133; //@line 841
           break;
          }
          $328 = HEAP32[$303 >> 2] | 0; //@line 844
          if (($328 | 0) == ($$pre | 0)) {
           label = 134; //@line 847
           break;
          }
         }
         if ((label | 0) == 133) {
          $333 = ___cxa_find_matching_catch_3(0) | 0; //@line 854
          ___clang_call_terminate($333); //@line 856
         } else if ((label | 0) == 134) {
          $335 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 861
          break;
         }
        }
       } while (0);
       __ZdlPv($335); //@line 866
      }
      if ((HEAP8[$288 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$288 >> 2] | 0); //@line 873
      }
      label = 140; //@line 875
      break;
     }
    default:
     {
      label = 140; //@line 879
     }
    }
   } while (0);
   do {
    if ((label | 0) == 140) {
     $342 = $1 + 4 | 0; //@line 885
     $343 = HEAP32[$342 >> 2] | 0; //@line 886
     if (($343 | 0) == (HEAP32[$1 + 8 >> 2] | 0)) {
      __THREW__ = 0; //@line 891
      invoke_vii(134, $1 | 0, $6 | 0); //@line 892
      $351 = __THREW__; //@line 893
      __THREW__ = 0; //@line 893
      if ($351 & 1) {
       label = 46; //@line 896
       break L1;
      } else {
       break;
      }
     }
     __THREW__ = 0; //@line 902
     invoke_vii(120, $343 | 0, $6 | 0); //@line 903
     $347 = __THREW__; //@line 904
     __THREW__ = 0; //@line 904
     if ($347 & 1) {
      label = 46; //@line 907
      break L1;
     }
     HEAP32[$342 >> 2] = (HEAP32[$342 >> 2] | 0) + 72; //@line 912
    }
   } while (0);
   $353 = $6 + 52 | 0; //@line 915
   if ((HEAP8[$353 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$353 >> 2] | 0); //@line 921
   }
   $358 = $6 + 40 | 0; //@line 923
   $359 = HEAP32[$358 >> 2] | 0; //@line 924
   if ($359 | 0) {
    $361 = $6 + 44 | 0; //@line 927
    $362 = HEAP32[$361 >> 2] | 0; //@line 928
    do {
     if (($362 | 0) == ($359 | 0)) {
      $373 = $359; //@line 932
     } else {
      $364 = $6 + 48 | 0; //@line 934
      $366 = $362; //@line 935
      while (1) {
       $365 = $366 + -72 | 0; //@line 937
       HEAP32[$361 >> 2] = $365; //@line 938
       __THREW__ = 0; //@line 939
       HEAP8[$$byval_copy7 >> 0] = HEAP8[$5 >> 0] | 0; //@line 940
       invoke_viii(13, $$byval_copy7 | 0, $364 | 0, $365 | 0); //@line 941
       $367 = __THREW__; //@line 942
       __THREW__ = 0; //@line 942
       if ($367 & 1) {
        label = 151; //@line 945
        break;
       }
       $366 = HEAP32[$361 >> 2] | 0; //@line 948
       if (($366 | 0) == ($359 | 0)) {
        label = 152; //@line 951
        break;
       }
      }
      if ((label | 0) == 151) {
       $371 = ___cxa_find_matching_catch_3(0) | 0; //@line 958
       ___clang_call_terminate($371); //@line 960
      } else if ((label | 0) == 152) {
       $373 = HEAP32[$358 >> 2] | 0; //@line 965
       break;
      }
     }
    } while (0);
    __ZdlPv($373); //@line 970
   }
   if ((HEAP8[$12 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 976
    return;
   }
   __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 979
   STACKTOP = sp; //@line 980
   return;
  }
 } while (0);
 if ((label | 0) == 46) {
  $115 = ___cxa_find_matching_catch_2() | 0; //@line 984
  $$2 = tempRet0; //@line 986
  $$220 = $115; //@line 986
 }
 $378 = $6 + 52 | 0; //@line 988
 if ((HEAP8[$378 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$378 >> 2] | 0); //@line 994
 }
 $383 = $6 + 40 | 0; //@line 996
 $384 = HEAP32[$383 >> 2] | 0; //@line 997
 if ($384 | 0) {
  $386 = $6 + 44 | 0; //@line 1000
  $387 = HEAP32[$386 >> 2] | 0; //@line 1001
  do {
   if (($387 | 0) == ($384 | 0)) {
    $398 = $384; //@line 1005
   } else {
    $389 = $6 + 48 | 0; //@line 1007
    $391 = $387; //@line 1008
    while (1) {
     $390 = $391 + -72 | 0; //@line 1010
     HEAP32[$386 >> 2] = $390; //@line 1011
     __THREW__ = 0; //@line 1012
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$5 >> 0] | 0; //@line 1013
     invoke_viii(13, $$byval_copy7 | 0, $389 | 0, $390 | 0); //@line 1014
     $392 = __THREW__; //@line 1015
     __THREW__ = 0; //@line 1015
     if ($392 & 1) {
      label = 164; //@line 1018
      break;
     }
     $391 = HEAP32[$386 >> 2] | 0; //@line 1021
     if (($391 | 0) == ($384 | 0)) {
      label = 165; //@line 1024
      break;
     }
    }
    if ((label | 0) == 164) {
     $396 = ___cxa_find_matching_catch_3(0) | 0; //@line 1031
     ___clang_call_terminate($396); //@line 1033
    } else if ((label | 0) == 165) {
     $398 = HEAP32[$383 >> 2] | 0; //@line 1038
     break;
    }
   }
  } while (0);
  __ZdlPv($398); //@line 1043
 }
 if ((HEAP8[$12 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$220 | 0); //@line 1049
 }
 __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 1053
 ___resumeException($$220 | 0); //@line 1054
}
function __Z21charmFunctionToString13CharmFunction($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $$010 = 0, $$03$i = 0, $$1 = 0, $$111 = 0, $$2 = 0, $$212 = 0, $$3 = 0, $$313 = 0, $$4 = 0, $$414 = 0, $$5 = 0, $$515 = 0, $$6 = 0, $$616 = 0, $$byval_copy12 = 0, $$pre$phiZ2D = 0, $$sroa$0103$0150 = 0, $$sroa$0111$0149 = 0, $10 = 0, $105 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $115 = 0, $117 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $134 = 0, $136 = 0, $142 = 0, $144 = 0, $146 = 0, $148 = 0, $149 = 0, $156 = 0, $158 = 0, $160 = 0, $161 = 0, $162 = 0, $166 = 0, $168 = 0, $17 = 0, $175 = 0, $177 = 0, $179 = 0, $180 = 0, $181 = 0, $185 = 0, $187 = 0, $19 = 0, $191 = 0, $192 = 0, $195 = 0, $197 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $217 = 0, $219 = 0, $221 = 0, $223 = 0, $224 = 0, $230 = 0, $231 = 0, $233 = 0, $241 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $251 = 0, $253 = 0, $260 = 0, $262 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $270 = 0, $272 = 0, $278 = 0, $28 = 0, $280 = 0, $282 = 0, $284 = 0, $285 = 0, $292 = 0, $294 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $302 = 0, $304 = 0, $311 = 0, $313 = 0, $315 = 0, $316 = 0, $317 = 0, $321 = 0, $323 = 0, $331 = 0, $337 = 0, $342 = 0, $345 = 0, $346 = 0, $348 = 0, $350 = 0, $351 = 0, $358 = 0, $359 = 0, $361 = 0, $364 = 0, $366 = 0, $367 = 0, $37 = 0, $374 = 0, $376 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $94 = 0, $95 = 0, $97 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7933
 STACKTOP = STACKTOP + 400 | 0; //@line 7934
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(400); //@line 7934
 $$byval_copy12 = sp + 376 | 0; //@line 7935
 $2 = sp + 388 | 0; //@line 7936
 $3 = sp + 232 | 0; //@line 7937
 $4 = sp; //@line 7938
 $5 = sp + 216 | 0; //@line 7939
 $6 = sp + 144 | 0; //@line 7940
 $7 = sp + 72 | 0; //@line 7941
 $8 = $3 + 64 | 0; //@line 7942
 $9 = $3 + 8 | 0; //@line 7943
 HEAP32[$9 >> 2] = 4868; //@line 7944
 $10 = $3 + 12 | 0; //@line 7945
 HEAP32[$3 >> 2] = 692; //@line 7946
 HEAP32[$8 >> 2] = 712; //@line 7947
 HEAP32[$3 + 4 >> 2] = 0; //@line 7949
 __THREW__ = 0; //@line 7951
 invoke_vii(110, $3 + 64 | 0, $10 | 0); //@line 7952
 $13 = __THREW__; //@line 7953
 __THREW__ = 0; //@line 7953
 if ($13 & 1) {
  $37 = ___cxa_find_matching_catch_2() | 0; //@line 7956
  $$0$i = tempRet0; //@line 7958
  $$03$i = $37; //@line 7958
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 7959
  ___resumeException($$03$i | 0); //@line 7960
 }
 HEAP32[$3 + 136 >> 2] = 0; //@line 7964
 HEAP32[$3 + 140 >> 2] = -1; //@line 7966
 HEAP32[$3 >> 2] = 4848; //@line 7967
 HEAP32[$8 >> 2] = 4888; //@line 7968
 HEAP32[$9 >> 2] = 4868; //@line 7969
 __THREW__ = 0; //@line 7970
 invoke_vi(253, $10 | 0); //@line 7971
 $17 = __THREW__; //@line 7972
 __THREW__ = 0; //@line 7972
 do {
  if ($17 & 1) {
   $39 = ___cxa_find_matching_catch_2() | 0; //@line 7976
   $eh$lpad$body$i$index2Z2D = tempRet0; //@line 7978
   $eh$lpad$body$i$indexZ2D = $39; //@line 7978
  } else {
   HEAP32[$10 >> 2] = 3032; //@line 7980
   $19 = $3 + 44 | 0; //@line 7981
   $20 = $3 + 60 | 0; //@line 7982
   HEAP32[$19 >> 2] = 0; //@line 7983
   HEAP32[$19 + 4 >> 2] = 0; //@line 7983
   HEAP32[$19 + 8 >> 2] = 0; //@line 7983
   HEAP32[$19 + 12 >> 2] = 0; //@line 7983
   HEAP32[$20 >> 2] = 24; //@line 7984
   HEAP32[$$byval_copy12 >> 2] = 0; //@line 7985
   HEAP32[$$byval_copy12 + 4 >> 2] = 0; //@line 7985
   HEAP32[$$byval_copy12 + 8 >> 2] = 0; //@line 7985
   __THREW__ = 0; //@line 7986
   invoke_vii(111, $10 | 0, $$byval_copy12 | 0); //@line 7987
   $21 = __THREW__; //@line 7988
   __THREW__ = 0; //@line 7988
   if ($21 & 1) {
    $27 = ___cxa_find_matching_catch_2() | 0; //@line 7991
    $28 = tempRet0; //@line 7992
    if ((HEAP8[$$byval_copy12 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$$byval_copy12 >> 2] | 0); //@line 7998
    }
    if ((HEAP8[$19 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 8005
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 8007
    $eh$lpad$body$i$index2Z2D = $28; //@line 8008
    $eh$lpad$body$i$indexZ2D = $27; //@line 8008
    break;
   }
   if ((HEAP8[$$byval_copy12 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$$byval_copy12 >> 2] | 0); //@line 8016
   }
   L20 : do {
    switch (HEAP32[$1 >> 2] | 0) {
    case 0:
     {
      $42 = $3 + 8 | 0; //@line 8022
      $43 = $1 + 52 | 0; //@line 8023
      $45 = HEAP8[$43 + 11 >> 0] | 0; //@line 8025
      $46 = $45 << 24 >> 24 < 0; //@line 8026
      __THREW__ = 0; //@line 8033
      $53 = invoke_iiii(32, $42 | 0, ($46 ? HEAP32[$43 >> 2] | 0 : $43) | 0, ($46 ? HEAP32[$1 + 56 >> 2] | 0 : $45 & 255) | 0) | 0; //@line 8034
      $54 = __THREW__; //@line 8035
      __THREW__ = 0; //@line 8035
      if ($54 & 1) {
       label = 20; //@line 8038
      } else {
       __THREW__ = 0; //@line 8040
       invoke_iiii(32, $53 | 0, 20986, 2) | 0; //@line 8041
       $56 = __THREW__; //@line 8042
       __THREW__ = 0; //@line 8042
       if ($56 & 1) {
        label = 20; //@line 8045
       } else {
        $59 = HEAP32[$1 + 40 >> 2] | 0; //@line 8048
        $61 = HEAP32[$1 + 44 >> 2] | 0; //@line 8050
        if (($59 | 0) == ($61 | 0)) {
         label = 152; //@line 8053
        } else {
         $63 = $5 + 11 | 0; //@line 8055
         $64 = $5 + 4 | 0; //@line 8056
         $65 = $6 + 52 | 0; //@line 8057
         $66 = $65 + 11 | 0; //@line 8058
         $67 = $6 + 40 | 0; //@line 8059
         $68 = $6 + 4 | 0; //@line 8060
         $69 = $68 + 11 | 0; //@line 8061
         $70 = $4 + 52 | 0; //@line 8062
         $71 = $70 + 11 | 0; //@line 8063
         $72 = $4 + 40 | 0; //@line 8064
         $73 = $4 + 4 | 0; //@line 8065
         $74 = $73 + 11 | 0; //@line 8066
         $75 = $4 + 44 | 0; //@line 8067
         $76 = $4 + 48 | 0; //@line 8068
         $77 = $6 + 44 | 0; //@line 8069
         $78 = $6 + 48 | 0; //@line 8070
         $$sroa$0111$0149 = $59; //@line 8071
         L25 : while (1) {
          __THREW__ = 0; //@line 8073
          invoke_vii(120, $4 | 0, $$sroa$0111$0149 | 0); //@line 8074
          $81 = __THREW__; //@line 8075
          __THREW__ = 0; //@line 8075
          if ($81 & 1) {
           label = 51; //@line 8078
           break;
          }
          __THREW__ = 0; //@line 8081
          invoke_vii(120, $6 | 0, $4 | 0); //@line 8082
          $83 = __THREW__; //@line 8083
          __THREW__ = 0; //@line 8083
          if ($83 & 1) {
           label = 52; //@line 8086
           break;
          }
          __THREW__ = 0; //@line 8089
          invoke_vii(135, $5 | 0, $6 | 0); //@line 8090
          $85 = __THREW__; //@line 8091
          __THREW__ = 0; //@line 8091
          if ($85 & 1) {
           label = 53; //@line 8094
           break;
          }
          $87 = HEAP8[$63 >> 0] | 0; //@line 8097
          $88 = $87 << 24 >> 24 < 0; //@line 8098
          __THREW__ = 0; //@line 8104
          $94 = invoke_iiii(32, $42 | 0, ($88 ? HEAP32[$5 >> 2] | 0 : $5) | 0, ($88 ? HEAP32[$64 >> 2] | 0 : $87 & 255) | 0) | 0; //@line 8105
          $95 = __THREW__; //@line 8106
          __THREW__ = 0; //@line 8106
          if ($95 & 1) {
           label = 54; //@line 8109
           break;
          }
          __THREW__ = 0; //@line 8112
          invoke_iiii(32, $94 | 0, 21108, 1) | 0; //@line 8113
          $97 = __THREW__; //@line 8114
          __THREW__ = 0; //@line 8114
          if ($97 & 1) {
           label = 54; //@line 8117
           break;
          }
          if ((HEAP8[$63 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 8124
          }
          if ((HEAP8[$66 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$65 >> 2] | 0); //@line 8130
          }
          $105 = HEAP32[$67 >> 2] | 0; //@line 8132
          if ($105 | 0) {
           $107 = HEAP32[$77 >> 2] | 0; //@line 8135
           if (($107 | 0) == ($105 | 0)) {
            $117 = $105; //@line 8138
           } else {
            $110 = $107; //@line 8140
            do {
             $109 = $110 + -72 | 0; //@line 8142
             HEAP32[$77 >> 2] = $109; //@line 8143
             __THREW__ = 0; //@line 8144
             HEAP8[$$byval_copy12 >> 0] = HEAP8[$2 >> 0] | 0; //@line 8145
             invoke_viii(13, $$byval_copy12 | 0, $78 | 0, $109 | 0); //@line 8146
             $111 = __THREW__; //@line 8147
             __THREW__ = 0; //@line 8147
             if ($111 & 1) {
              label = 34; //@line 8150
              break L25;
             }
             $110 = HEAP32[$77 >> 2] | 0; //@line 8153
            } while (($110 | 0) != ($105 | 0));
            $117 = HEAP32[$67 >> 2] | 0; //@line 8162
           }
           __ZdlPv($117); //@line 8164
          }
          if ((HEAP8[$69 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$68 >> 2] | 0); //@line 8170
          }
          if ((HEAP8[$71 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$70 >> 2] | 0); //@line 8176
          }
          $124 = HEAP32[$72 >> 2] | 0; //@line 8178
          if ($124 | 0) {
           $126 = HEAP32[$75 >> 2] | 0; //@line 8181
           if (($126 | 0) == ($124 | 0)) {
            $136 = $124; //@line 8184
           } else {
            $129 = $126; //@line 8186
            do {
             $128 = $129 + -72 | 0; //@line 8188
             HEAP32[$75 >> 2] = $128; //@line 8189
             __THREW__ = 0; //@line 8190
             HEAP8[$$byval_copy12 >> 0] = HEAP8[$2 >> 0] | 0; //@line 8191
             invoke_viii(13, $$byval_copy12 | 0, $76 | 0, $128 | 0); //@line 8192
             $130 = __THREW__; //@line 8193
             __THREW__ = 0; //@line 8193
             if ($130 & 1) {
              label = 45; //@line 8196
              break L25;
             }
             $129 = HEAP32[$75 >> 2] | 0; //@line 8199
            } while (($129 | 0) != ($124 | 0));
            $136 = HEAP32[$72 >> 2] | 0; //@line 8208
           }
           __ZdlPv($136); //@line 8210
          }
          if ((HEAP8[$74 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$73 >> 2] | 0); //@line 8216
          }
          $$sroa$0111$0149 = $$sroa$0111$0149 + 72 | 0; //@line 8218
          if (($$sroa$0111$0149 | 0) == ($61 | 0)) {
           label = 152; //@line 8221
           break L20;
          }
         }
         if ((label | 0) == 34) {
          $115 = ___cxa_find_matching_catch_3(0) | 0; //@line 8228
          ___clang_call_terminate($115); //@line 8230
         } else if ((label | 0) == 45) {
          $134 = ___cxa_find_matching_catch_3(0) | 0; //@line 8234
          ___clang_call_terminate($134); //@line 8236
         } else if ((label | 0) == 51) {
          $142 = ___cxa_find_matching_catch_2() | 0; //@line 8240
          $$2 = $142; //@line 8242
          $$212 = tempRet0; //@line 8242
         } else if ((label | 0) == 52) {
          $144 = ___cxa_find_matching_catch_2() | 0; //@line 8245
          $$1 = $144; //@line 8247
          $$111 = tempRet0; //@line 8247
          label = 68; //@line 8248
         } else if ((label | 0) == 53) {
          $146 = ___cxa_find_matching_catch_2() | 0; //@line 8251
          $$0 = $146; //@line 8253
          $$010 = tempRet0; //@line 8253
          label = 56; //@line 8254
         } else if ((label | 0) == 54) {
          $148 = ___cxa_find_matching_catch_2() | 0; //@line 8257
          $149 = tempRet0; //@line 8258
          if ((HEAP8[$63 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 8263
           $$0 = $148; //@line 8264
           $$010 = $149; //@line 8264
           label = 56; //@line 8265
          } else {
           $$0 = $148; //@line 8267
           $$010 = $149; //@line 8267
           label = 56; //@line 8268
          }
         }
         if ((label | 0) == 56) {
          if ((HEAP8[$66 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$65 >> 2] | 0); //@line 8276
          }
          $156 = HEAP32[$67 >> 2] | 0; //@line 8278
          if ($156 | 0) {
           $158 = HEAP32[$77 >> 2] | 0; //@line 8281
           do {
            if (($158 | 0) == ($156 | 0)) {
             $168 = $156; //@line 8285
            } else {
             $161 = $158; //@line 8287
             while (1) {
              $160 = $161 + -72 | 0; //@line 8289
              HEAP32[$77 >> 2] = $160; //@line 8290
              __THREW__ = 0; //@line 8291
              HEAP8[$$byval_copy12 >> 0] = HEAP8[$2 >> 0] | 0; //@line 8292
              invoke_viii(13, $$byval_copy12 | 0, $78 | 0, $160 | 0); //@line 8293
              $162 = __THREW__; //@line 8294
              __THREW__ = 0; //@line 8294
              if ($162 & 1) {
               label = 63; //@line 8297
               break;
              }
              $161 = HEAP32[$77 >> 2] | 0; //@line 8300
              if (($161 | 0) == ($156 | 0)) {
               label = 64; //@line 8303
               break;
              }
             }
             if ((label | 0) == 63) {
              $166 = ___cxa_find_matching_catch_3(0) | 0; //@line 8310
              ___clang_call_terminate($166); //@line 8312
             } else if ((label | 0) == 64) {
              $168 = HEAP32[$67 >> 2] | 0; //@line 8317
              break;
             }
            }
           } while (0);
           __ZdlPv($168); //@line 8322
          }
          if ((HEAP8[$69 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$68 >> 2] | 0); //@line 8328
           $$1 = $$0; //@line 8329
           $$111 = $$010; //@line 8329
           label = 68; //@line 8330
          } else {
           $$1 = $$0; //@line 8332
           $$111 = $$010; //@line 8332
           label = 68; //@line 8333
          }
         }
         if ((label | 0) == 68) {
          if ((HEAP8[$71 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$70 >> 2] | 0); //@line 8341
          }
          $175 = HEAP32[$72 >> 2] | 0; //@line 8343
          if ($175 | 0) {
           $177 = HEAP32[$75 >> 2] | 0; //@line 8346
           do {
            if (($177 | 0) == ($175 | 0)) {
             $187 = $175; //@line 8350
            } else {
             $180 = $177; //@line 8352
             while (1) {
              $179 = $180 + -72 | 0; //@line 8354
              HEAP32[$75 >> 2] = $179; //@line 8355
              __THREW__ = 0; //@line 8356
              HEAP8[$$byval_copy12 >> 0] = HEAP8[$2 >> 0] | 0; //@line 8357
              invoke_viii(13, $$byval_copy12 | 0, $76 | 0, $179 | 0); //@line 8358
              $181 = __THREW__; //@line 8359
              __THREW__ = 0; //@line 8359
              if ($181 & 1) {
               label = 75; //@line 8362
               break;
              }
              $180 = HEAP32[$75 >> 2] | 0; //@line 8365
              if (($180 | 0) == ($175 | 0)) {
               label = 76; //@line 8368
               break;
              }
             }
             if ((label | 0) == 75) {
              $185 = ___cxa_find_matching_catch_3(0) | 0; //@line 8375
              ___clang_call_terminate($185); //@line 8377
             } else if ((label | 0) == 76) {
              $187 = HEAP32[$72 >> 2] | 0; //@line 8382
              break;
             }
            }
           } while (0);
           __ZdlPv($187); //@line 8387
          }
          if ((HEAP8[$74 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$73 >> 2] | 0); //@line 8393
           $$2 = $$1; //@line 8394
           $$212 = $$111; //@line 8394
          } else {
           $$2 = $$1; //@line 8396
           $$212 = $$111; //@line 8396
          }
         }
         $$6 = $$2; //@line 8399
         $$616 = $$212; //@line 8399
         $$pre$phiZ2D = $42; //@line 8399
        }
       }
      }
      break;
     }
    case 1:
     {
      $191 = $3 + 8 | 0; //@line 8406
      __THREW__ = 0; //@line 8407
      invoke_iiii(32, $191 | 0, 17822, 2) | 0; //@line 8408
      $192 = __THREW__; //@line 8409
      __THREW__ = 0; //@line 8409
      if ($192 & 1) {
       label = 20; //@line 8412
      } else {
       $195 = HEAP32[$1 + 40 >> 2] | 0; //@line 8415
       $197 = HEAP32[$1 + 44 >> 2] | 0; //@line 8417
       L112 : do {
        if (($195 | 0) != ($197 | 0)) {
         $199 = $5 + 11 | 0; //@line 8421
         $200 = $5 + 4 | 0; //@line 8422
         $201 = $7 + 52 | 0; //@line 8423
         $202 = $201 + 11 | 0; //@line 8424
         $203 = $7 + 40 | 0; //@line 8425
         $204 = $7 + 4 | 0; //@line 8426
         $205 = $204 + 11 | 0; //@line 8427
         $206 = $4 + 52 | 0; //@line 8428
         $207 = $206 + 11 | 0; //@line 8429
         $208 = $4 + 40 | 0; //@line 8430
         $209 = $4 + 4 | 0; //@line 8431
         $210 = $209 + 11 | 0; //@line 8432
         $211 = $4 + 44 | 0; //@line 8433
         $212 = $4 + 48 | 0; //@line 8434
         $213 = $7 + 44 | 0; //@line 8435
         $214 = $7 + 48 | 0; //@line 8436
         $$sroa$0103$0150 = $195; //@line 8437
         L114 : while (1) {
          __THREW__ = 0; //@line 8439
          invoke_vii(120, $4 | 0, $$sroa$0103$0150 | 0); //@line 8440
          $217 = __THREW__; //@line 8441
          __THREW__ = 0; //@line 8441
          if ($217 & 1) {
           label = 115; //@line 8444
           break;
          }
          __THREW__ = 0; //@line 8447
          invoke_vii(120, $7 | 0, $4 | 0); //@line 8448
          $219 = __THREW__; //@line 8449
          __THREW__ = 0; //@line 8449
          if ($219 & 1) {
           label = 116; //@line 8452
           break;
          }
          __THREW__ = 0; //@line 8455
          invoke_vii(135, $5 | 0, $7 | 0); //@line 8456
          $221 = __THREW__; //@line 8457
          __THREW__ = 0; //@line 8457
          if ($221 & 1) {
           label = 117; //@line 8460
           break;
          }
          $223 = HEAP8[$199 >> 0] | 0; //@line 8463
          $224 = $223 << 24 >> 24 < 0; //@line 8464
          __THREW__ = 0; //@line 8470
          $230 = invoke_iiii(32, $191 | 0, ($224 ? HEAP32[$5 >> 2] | 0 : $5) | 0, ($224 ? HEAP32[$200 >> 2] | 0 : $223 & 255) | 0) | 0; //@line 8471
          $231 = __THREW__; //@line 8472
          __THREW__ = 0; //@line 8472
          if ($231 & 1) {
           label = 118; //@line 8475
           break;
          }
          __THREW__ = 0; //@line 8478
          invoke_iiii(32, $230 | 0, 21108, 1) | 0; //@line 8479
          $233 = __THREW__; //@line 8480
          __THREW__ = 0; //@line 8480
          if ($233 & 1) {
           label = 118; //@line 8483
           break;
          }
          if ((HEAP8[$199 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 8490
          }
          if ((HEAP8[$202 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$201 >> 2] | 0); //@line 8496
          }
          $241 = HEAP32[$203 >> 2] | 0; //@line 8498
          if ($241 | 0) {
           $243 = HEAP32[$213 >> 2] | 0; //@line 8501
           if (($243 | 0) == ($241 | 0)) {
            $253 = $241; //@line 8504
           } else {
            $246 = $243; //@line 8506
            do {
             $245 = $246 + -72 | 0; //@line 8508
             HEAP32[$213 >> 2] = $245; //@line 8509
             __THREW__ = 0; //@line 8510
             HEAP8[$$byval_copy12 >> 0] = HEAP8[$2 >> 0] | 0; //@line 8511
             invoke_viii(13, $$byval_copy12 | 0, $214 | 0, $245 | 0); //@line 8512
             $247 = __THREW__; //@line 8513
             __THREW__ = 0; //@line 8513
             if ($247 & 1) {
              label = 98; //@line 8516
              break L114;
             }
             $246 = HEAP32[$213 >> 2] | 0; //@line 8519
            } while (($246 | 0) != ($241 | 0));
            $253 = HEAP32[$203 >> 2] | 0; //@line 8528
           }
           __ZdlPv($253); //@line 8530
          }
          if ((HEAP8[$205 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$204 >> 2] | 0); //@line 8536
          }
          if ((HEAP8[$207 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$206 >> 2] | 0); //@line 8542
          }
          $260 = HEAP32[$208 >> 2] | 0; //@line 8544
          if ($260 | 0) {
           $262 = HEAP32[$211 >> 2] | 0; //@line 8547
           if (($262 | 0) == ($260 | 0)) {
            $272 = $260; //@line 8550
           } else {
            $265 = $262; //@line 8552
            do {
             $264 = $265 + -72 | 0; //@line 8554
             HEAP32[$211 >> 2] = $264; //@line 8555
             __THREW__ = 0; //@line 8556
             HEAP8[$$byval_copy12 >> 0] = HEAP8[$2 >> 0] | 0; //@line 8557
             invoke_viii(13, $$byval_copy12 | 0, $212 | 0, $264 | 0); //@line 8558
             $266 = __THREW__; //@line 8559
             __THREW__ = 0; //@line 8559
             if ($266 & 1) {
              label = 109; //@line 8562
              break L114;
             }
             $265 = HEAP32[$211 >> 2] | 0; //@line 8565
            } while (($265 | 0) != ($260 | 0));
            $272 = HEAP32[$208 >> 2] | 0; //@line 8574
           }
           __ZdlPv($272); //@line 8576
          }
          if ((HEAP8[$210 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$209 >> 2] | 0); //@line 8582
          }
          $$sroa$0103$0150 = $$sroa$0103$0150 + 72 | 0; //@line 8584
          if (($$sroa$0103$0150 | 0) == ($197 | 0)) {
           break L112;
          }
         }
         if ((label | 0) == 98) {
          $251 = ___cxa_find_matching_catch_3(0) | 0; //@line 8593
          ___clang_call_terminate($251); //@line 8595
         } else if ((label | 0) == 109) {
          $270 = ___cxa_find_matching_catch_3(0) | 0; //@line 8599
          ___clang_call_terminate($270); //@line 8601
         } else if ((label | 0) == 115) {
          $278 = ___cxa_find_matching_catch_2() | 0; //@line 8605
          $$5 = $278; //@line 8607
          $$515 = tempRet0; //@line 8607
         } else if ((label | 0) == 116) {
          $280 = ___cxa_find_matching_catch_2() | 0; //@line 8610
          $$4 = $280; //@line 8612
          $$414 = tempRet0; //@line 8612
          label = 132; //@line 8613
         } else if ((label | 0) == 117) {
          $282 = ___cxa_find_matching_catch_2() | 0; //@line 8616
          $$3 = $282; //@line 8618
          $$313 = tempRet0; //@line 8618
          label = 120; //@line 8619
         } else if ((label | 0) == 118) {
          $284 = ___cxa_find_matching_catch_2() | 0; //@line 8622
          $285 = tempRet0; //@line 8623
          if ((HEAP8[$199 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 8628
           $$3 = $284; //@line 8629
           $$313 = $285; //@line 8629
           label = 120; //@line 8630
          } else {
           $$3 = $284; //@line 8632
           $$313 = $285; //@line 8632
           label = 120; //@line 8633
          }
         }
         if ((label | 0) == 120) {
          if ((HEAP8[$202 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$201 >> 2] | 0); //@line 8641
          }
          $292 = HEAP32[$203 >> 2] | 0; //@line 8643
          if ($292 | 0) {
           $294 = HEAP32[$213 >> 2] | 0; //@line 8646
           do {
            if (($294 | 0) == ($292 | 0)) {
             $304 = $292; //@line 8650
            } else {
             $297 = $294; //@line 8652
             while (1) {
              $296 = $297 + -72 | 0; //@line 8654
              HEAP32[$213 >> 2] = $296; //@line 8655
              __THREW__ = 0; //@line 8656
              HEAP8[$$byval_copy12 >> 0] = HEAP8[$2 >> 0] | 0; //@line 8657
              invoke_viii(13, $$byval_copy12 | 0, $214 | 0, $296 | 0); //@line 8658
              $298 = __THREW__; //@line 8659
              __THREW__ = 0; //@line 8659
              if ($298 & 1) {
               label = 127; //@line 8662
               break;
              }
              $297 = HEAP32[$213 >> 2] | 0; //@line 8665
              if (($297 | 0) == ($292 | 0)) {
               label = 128; //@line 8668
               break;
              }
             }
             if ((label | 0) == 127) {
              $302 = ___cxa_find_matching_catch_3(0) | 0; //@line 8675
              ___clang_call_terminate($302); //@line 8677
             } else if ((label | 0) == 128) {
              $304 = HEAP32[$203 >> 2] | 0; //@line 8682
              break;
             }
            }
           } while (0);
           __ZdlPv($304); //@line 8687
          }
          if ((HEAP8[$205 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$204 >> 2] | 0); //@line 8693
           $$4 = $$3; //@line 8694
           $$414 = $$313; //@line 8694
           label = 132; //@line 8695
          } else {
           $$4 = $$3; //@line 8697
           $$414 = $$313; //@line 8697
           label = 132; //@line 8698
          }
         }
         if ((label | 0) == 132) {
          if ((HEAP8[$207 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$206 >> 2] | 0); //@line 8706
          }
          $311 = HEAP32[$208 >> 2] | 0; //@line 8708
          if ($311 | 0) {
           $313 = HEAP32[$211 >> 2] | 0; //@line 8711
           do {
            if (($313 | 0) == ($311 | 0)) {
             $323 = $311; //@line 8715
            } else {
             $316 = $313; //@line 8717
             while (1) {
              $315 = $316 + -72 | 0; //@line 8719
              HEAP32[$211 >> 2] = $315; //@line 8720
              __THREW__ = 0; //@line 8721
              HEAP8[$$byval_copy12 >> 0] = HEAP8[$2 >> 0] | 0; //@line 8722
              invoke_viii(13, $$byval_copy12 | 0, $212 | 0, $315 | 0); //@line 8723
              $317 = __THREW__; //@line 8724
              __THREW__ = 0; //@line 8724
              if ($317 & 1) {
               label = 139; //@line 8727
               break;
              }
              $316 = HEAP32[$211 >> 2] | 0; //@line 8730
              if (($316 | 0) == ($311 | 0)) {
               label = 140; //@line 8733
               break;
              }
             }
             if ((label | 0) == 139) {
              $321 = ___cxa_find_matching_catch_3(0) | 0; //@line 8740
              ___clang_call_terminate($321); //@line 8742
             } else if ((label | 0) == 140) {
              $323 = HEAP32[$208 >> 2] | 0; //@line 8747
              break;
             }
            }
           } while (0);
           __ZdlPv($323); //@line 8752
          }
          if ((HEAP8[$210 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$209 >> 2] | 0); //@line 8758
           $$5 = $$4; //@line 8759
           $$515 = $$414; //@line 8759
          } else {
           $$5 = $$4; //@line 8761
           $$515 = $$414; //@line 8761
          }
         }
         $$6 = $$5; //@line 8764
         $$616 = $$515; //@line 8764
         $$pre$phiZ2D = $191; //@line 8764
         break L20;
        }
       } while (0);
       __THREW__ = 0; //@line 8768
       invoke_iiii(32, $191 | 0, 20980, 1) | 0; //@line 8769
       $215 = __THREW__; //@line 8770
       __THREW__ = 0; //@line 8770
       if ($215 & 1) {
        label = 20; //@line 8773
       } else {
        label = 152; //@line 8775
       }
      }
      break;
     }
    case 2:
     {
      switch (HEAP32[$1 + 16 >> 2] | 0) {
      case 0:
       {
        $331 = $1 + 24 | 0; //@line 8787
        __THREW__ = 0; //@line 8793
        invoke_iiii(33, $3 + 8 | 0, HEAP32[$331 >> 2] | 0, HEAP32[$331 + 4 >> 2] | 0) | 0; //@line 8794
        $337 = __THREW__; //@line 8795
        __THREW__ = 0; //@line 8795
        if ($337 & 1) {
         label = 20; //@line 8798
         break L20;
        } else {
         label = 152; //@line 8801
         break L20;
        }
        break;
       }
      case 1:
       {
        __THREW__ = 0; //@line 8810
        invoke_iid(1, $3 + 8 | 0, +(+HEAPF64[$1 + 32 >> 3])) | 0; //@line 8811
        $342 = __THREW__; //@line 8812
        __THREW__ = 0; //@line 8812
        if ($342 & 1) {
         label = 20; //@line 8815
         break L20;
        } else {
         label = 152; //@line 8818
         break L20;
        }
        break;
       }
      default:
       {
        label = 152; //@line 8824
        break L20;
       }
      }
      break;
     }
    case 3:
     {
      __THREW__ = 0; //@line 8832
      $345 = invoke_iiii(32, $3 + 8 | 0, 17825, 2) | 0; //@line 8833
      $346 = __THREW__; //@line 8834
      __THREW__ = 0; //@line 8834
      if ($346 & 1) {
       label = 20; //@line 8837
      } else {
       $348 = $1 + 4 | 0; //@line 8839
       $350 = HEAP8[$348 + 11 >> 0] | 0; //@line 8841
       $351 = $350 << 24 >> 24 < 0; //@line 8842
       __THREW__ = 0; //@line 8849
       $358 = invoke_iiii(32, $345 | 0, ($351 ? HEAP32[$348 >> 2] | 0 : $348) | 0, ($351 ? HEAP32[$1 + 8 >> 2] | 0 : $350 & 255) | 0) | 0; //@line 8850
       $359 = __THREW__; //@line 8851
       __THREW__ = 0; //@line 8851
       if ($359 & 1) {
        label = 20; //@line 8854
       } else {
        __THREW__ = 0; //@line 8856
        invoke_iiii(32, $358 | 0, 17828, 2) | 0; //@line 8857
        $361 = __THREW__; //@line 8858
        __THREW__ = 0; //@line 8858
        if ($361 & 1) {
         label = 20; //@line 8861
        } else {
         label = 152; //@line 8863
        }
       }
      }
      break;
     }
    case 4:
     {
      $364 = $1 + 52 | 0; //@line 8871
      $366 = HEAP8[$364 + 11 >> 0] | 0; //@line 8873
      $367 = $366 << 24 >> 24 < 0; //@line 8874
      __THREW__ = 0; //@line 8881
      invoke_iiii(32, $3 + 8 | 0, ($367 ? HEAP32[$364 >> 2] | 0 : $364) | 0, ($367 ? HEAP32[$1 + 56 >> 2] | 0 : $366 & 255) | 0) | 0; //@line 8882
      $374 = __THREW__; //@line 8883
      __THREW__ = 0; //@line 8883
      if ($374 & 1) {
       label = 20; //@line 8886
      } else {
       label = 152; //@line 8888
      }
      break;
     }
    default:
     {
      label = 152; //@line 8893
     }
    }
   } while (0);
   if ((label | 0) == 152) {
    __THREW__ = 0; //@line 8898
    invoke_vii(114, $0 | 0, $10 | 0); //@line 8899
    $376 = __THREW__; //@line 8900
    __THREW__ = 0; //@line 8900
    if ($376 & 1) {
     label = 20; //@line 8903
    } else {
     HEAP32[$3 >> 2] = 4848; //@line 8905
     HEAP32[$8 >> 2] = 4888; //@line 8906
     HEAP32[$3 + 8 >> 2] = 4868; //@line 8908
     HEAP32[$10 >> 2] = 3032; //@line 8909
     if ((HEAP8[$19 + 11 >> 0] | 0) >= 0) {
      __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 8914
      __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 4900); //@line 8915
      __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 8916
      STACKTOP = sp; //@line 8917
      return;
     }
     __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 8920
     __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 8921
     __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 4900); //@line 8922
     __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 8923
     STACKTOP = sp; //@line 8924
     return;
    }
   }
   if ((label | 0) == 20) {
    $79 = ___cxa_find_matching_catch_2() | 0; //@line 8928
    $$6 = $79; //@line 8931
    $$616 = tempRet0; //@line 8931
    $$pre$phiZ2D = $3 + 8 | 0; //@line 8931
   }
   HEAP32[$3 >> 2] = 4848; //@line 8933
   HEAP32[$8 >> 2] = 4888; //@line 8934
   HEAP32[$$pre$phiZ2D >> 2] = 4868; //@line 8935
   HEAP32[$10 >> 2] = 3032; //@line 8936
   if ((HEAP8[$19 + 11 >> 0] | 0) >= 0) {
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 8941
    __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 4900); //@line 8942
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 8943
    ___resumeException($$6 | 0); //@line 8944
   }
   __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 8948
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 8949
   __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 4900); //@line 8950
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 8951
   ___resumeException($$6 | 0); //@line 8952
  }
 } while (0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 4900); //@line 8956
 $$0$i = $eh$lpad$body$i$index2Z2D; //@line 8957
 $$03$i = $eh$lpad$body$i$indexZ2D; //@line 8957
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 8958
 ___resumeException($$03$i | 0); //@line 8959
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$08$i$i$i = 0, $$09$i$i$i = 0, $$1$i$i$i = 0, $$110$i$i$i = 0, $$2$i$i$i = 0, $$211$i$i$i = 0, $$byval_copy11 = 0, $$val = 0, $10 = 0, $103 = 0, $104 = 0, $106 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $134 = 0, $135 = 0, $140 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $158 = 0, $160 = 0, $161 = 0, $166 = 0, $167 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $174 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $194 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $205 = 0, $207 = 0, $209 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $229 = 0, $23 = 0, $230 = 0, $235 = 0, $240 = 0, $241 = 0, $243 = 0, $244 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $279 = 0, $281 = 0, $282 = 0, $287 = 0, $288 = 0, $289 = 0, $294 = 0, $295 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $315 = 0, $316 = 0, $317 = 0, $322 = 0, $323 = 0, $325 = 0, $326 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $335 = 0, $337 = 0, $338 = 0, $34 = 0, $343 = 0, $348 = 0, $349 = 0, $351 = 0, $352 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $369 = 0, $37 = 0, $374 = 0, $375 = 0, $377 = 0, $378 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $387 = 0, $389 = 0, $39 = 0, $390 = 0, $395 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $51 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26354
 STACKTOP = STACKTOP + 448 | 0; //@line 26355
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(448); //@line 26355
 $$byval_copy11 = sp + 433 | 0; //@line 26356
 $2 = sp + 432 | 0; //@line 26357
 $3 = sp + 360 | 0; //@line 26358
 $4 = sp + 288 | 0; //@line 26359
 $5 = sp + 216 | 0; //@line 26360
 $6 = sp + 144 | 0; //@line 26361
 $7 = sp + 72 | 0; //@line 26362
 $8 = sp; //@line 26363
 $$val = HEAP32[$1 >> 2] | 0; //@line 26364
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 26366
 __THREW__ = 0; //@line 26367
 $10 = invoke_ii(143, $$val | 0) | 0; //@line 26368
 $11 = __THREW__; //@line 26369
 __THREW__ = 0; //@line 26369
 if ($11 & 1) {
  label = 34; //@line 26372
 } else {
  __THREW__ = 0; //@line 26374
  invoke_vii(131, $4 | 0, $10 | 0); //@line 26375
  $13 = __THREW__; //@line 26376
  __THREW__ = 0; //@line 26376
  if ($13 & 1) {
   label = 34; //@line 26379
  } else {
   __THREW__ = 0; //@line 26381
   invoke_vii(120, $5 | 0, $3 | 0); //@line 26382
   $15 = __THREW__; //@line 26383
   __THREW__ = 0; //@line 26383
   L4 : do {
    if ($15 & 1) {
     label = 35; //@line 26387
    } else {
     __THREW__ = 0; //@line 26389
     $17 = invoke_ii(144, $5 | 0) | 0; //@line 26390
     $18 = __THREW__; //@line 26391
     __THREW__ = 0; //@line 26391
     L6 : do {
      if ($18 & 1) {
       label = 36; //@line 26395
      } else {
       do {
        if ($17) {
         __THREW__ = 0; //@line 26399
         invoke_vii(120, $6 | 0, $4 | 0); //@line 26400
         $20 = __THREW__; //@line 26401
         __THREW__ = 0; //@line 26401
         if ($20 & 1) {
          label = 36; //@line 26404
          break L6;
         }
         __THREW__ = 0; //@line 26407
         $22 = invoke_ii(144, $6 | 0) | 0; //@line 26408
         $23 = __THREW__; //@line 26409
         __THREW__ = 0; //@line 26409
         if ($23 & 1) {
          $112 = ___cxa_find_matching_catch_2() | 0; //@line 26412
          $113 = tempRet0; //@line 26413
          $114 = $6 + 52 | 0; //@line 26414
          if ((HEAP8[$114 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$114 >> 2] | 0); //@line 26420
          }
          $119 = $6 + 40 | 0; //@line 26422
          $120 = HEAP32[$119 >> 2] | 0; //@line 26423
          if ($120 | 0) {
           $122 = $6 + 44 | 0; //@line 26426
           $123 = HEAP32[$122 >> 2] | 0; //@line 26427
           do {
            if (($123 | 0) == ($120 | 0)) {
             $134 = $120; //@line 26431
            } else {
             $125 = $6 + 48 | 0; //@line 26433
             $127 = $123; //@line 26434
             while (1) {
              $126 = $127 + -72 | 0; //@line 26436
              HEAP32[$122 >> 2] = $126; //@line 26437
              __THREW__ = 0; //@line 26438
              HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26439
              invoke_viii(13, $$byval_copy11 | 0, $125 | 0, $126 | 0); //@line 26440
              $128 = __THREW__; //@line 26441
              __THREW__ = 0; //@line 26441
              if ($128 & 1) {
               label = 44; //@line 26444
               break;
              }
              $127 = HEAP32[$122 >> 2] | 0; //@line 26447
              if (($127 | 0) == ($120 | 0)) {
               label = 45; //@line 26450
               break;
              }
             }
             if ((label | 0) == 44) {
              $132 = ___cxa_find_matching_catch_3(0) | 0; //@line 26457
              ___clang_call_terminate($132); //@line 26459
             } else if ((label | 0) == 45) {
              $134 = HEAP32[$119 >> 2] | 0; //@line 26464
              break;
             }
            }
           } while (0);
           __ZdlPv($134); //@line 26469
          }
          $135 = $6 + 4 | 0; //@line 26471
          if ((HEAP8[$135 + 11 >> 0] | 0) >= 0) {
           $$08$i$i$i = $113; //@line 26476
           $$09$i$i$i = $112; //@line 26476
           break L6;
          }
          __ZdlPv(HEAP32[$135 >> 2] | 0); //@line 26480
          $$08$i$i$i = $113; //@line 26481
          $$09$i$i$i = $112; //@line 26481
          break L6;
         } else {
          $25 = $6 + 52 | 0; //@line 26484
          if ((HEAP8[$25 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$25 >> 2] | 0); //@line 26490
          }
          $30 = $6 + 40 | 0; //@line 26492
          $31 = HEAP32[$30 >> 2] | 0; //@line 26493
          if ($31 | 0) {
           $33 = $6 + 44 | 0; //@line 26496
           $34 = HEAP32[$33 >> 2] | 0; //@line 26497
           do {
            if (($34 | 0) == ($31 | 0)) {
             $45 = $31; //@line 26501
            } else {
             $36 = $6 + 48 | 0; //@line 26503
             $38 = $34; //@line 26504
             while (1) {
              $37 = $38 + -72 | 0; //@line 26506
              HEAP32[$33 >> 2] = $37; //@line 26507
              __THREW__ = 0; //@line 26508
              HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26509
              invoke_viii(13, $$byval_copy11 | 0, $36 | 0, $37 | 0); //@line 26510
              $39 = __THREW__; //@line 26511
              __THREW__ = 0; //@line 26511
              if ($39 & 1) {
               label = 15; //@line 26514
               break;
              }
              $38 = HEAP32[$33 >> 2] | 0; //@line 26517
              if (($38 | 0) == ($31 | 0)) {
               label = 16; //@line 26520
               break;
              }
             }
             if ((label | 0) == 15) {
              $43 = ___cxa_find_matching_catch_3(0) | 0; //@line 26527
              ___clang_call_terminate($43); //@line 26529
             } else if ((label | 0) == 16) {
              $45 = HEAP32[$30 >> 2] | 0; //@line 26534
              break;
             }
            }
           } while (0);
           __ZdlPv($45); //@line 26539
          }
          $46 = $6 + 4 | 0; //@line 26541
          if ((HEAP8[$46 + 11 >> 0] | 0) >= 0) {
           $395 = $22; //@line 26546
           break;
          }
          __ZdlPv(HEAP32[$46 >> 2] | 0); //@line 26550
          $395 = $22; //@line 26551
          break;
         }
        } else {
         $395 = 0; //@line 26555
        }
       } while (0);
       $51 = $5 + 52 | 0; //@line 26558
       if ((HEAP8[$51 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$51 >> 2] | 0); //@line 26564
       }
       $56 = $5 + 40 | 0; //@line 26566
       $57 = HEAP32[$56 >> 2] | 0; //@line 26567
       if ($57 | 0) {
        $59 = $5 + 44 | 0; //@line 26570
        $60 = HEAP32[$59 >> 2] | 0; //@line 26571
        do {
         if (($60 | 0) == ($57 | 0)) {
          $71 = $57; //@line 26575
         } else {
          $62 = $5 + 48 | 0; //@line 26577
          $64 = $60; //@line 26578
          while (1) {
           $63 = $64 + -72 | 0; //@line 26580
           HEAP32[$59 >> 2] = $63; //@line 26581
           __THREW__ = 0; //@line 26582
           HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26583
           invoke_viii(13, $$byval_copy11 | 0, $62 | 0, $63 | 0); //@line 26584
           $65 = __THREW__; //@line 26585
           __THREW__ = 0; //@line 26585
           if ($65 & 1) {
            label = 27; //@line 26588
            break;
           }
           $64 = HEAP32[$59 >> 2] | 0; //@line 26591
           if (($64 | 0) == ($57 | 0)) {
            label = 28; //@line 26594
            break;
           }
          }
          if ((label | 0) == 27) {
           $69 = ___cxa_find_matching_catch_3(0) | 0; //@line 26601
           ___clang_call_terminate($69); //@line 26603
          } else if ((label | 0) == 28) {
           $71 = HEAP32[$56 >> 2] | 0; //@line 26608
           break;
          }
         }
        } while (0);
        __ZdlPv($71); //@line 26613
       }
       $72 = $5 + 4 | 0; //@line 26615
       if ((HEAP8[$72 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$72 >> 2] | 0); //@line 26621
       }
       if (!$395) {
        $166 = ___cxa_allocate_exception(8) | 0; //@line 26624
        __THREW__ = 0; //@line 26625
        invoke_vii(125, $166 | 0, 15925); //@line 26626
        $167 = __THREW__; //@line 26627
        __THREW__ = 0; //@line 26627
        if ($167 & 1) {
         $170 = ___cxa_find_matching_catch_2() | 0; //@line 26630
         $171 = tempRet0; //@line 26631
         ___cxa_free_exception($166 | 0); //@line 26632
         $$1$i$i$i = $171; //@line 26633
         $$110$i$i$i = $170; //@line 26633
         break L4;
        } else {
         __THREW__ = 0; //@line 26636
         invoke_viii(16, $166 | 0, 2824, 242); //@line 26637
         __THREW__ = 0; //@line 26638
         label = 35; //@line 26639
         break L4;
        }
       }
       $77 = $4 + 24 | 0; //@line 26643
       $78 = $77; //@line 26644
       $80 = HEAP32[$78 >> 2] | 0; //@line 26646
       $83 = HEAP32[$78 + 4 >> 2] | 0; //@line 26649
       $84 = $3 + 24 | 0; //@line 26650
       $85 = $84; //@line 26651
       $91 = ___divdi3($80 | 0, $83 | 0, HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0) | 0; //@line 26657
       $92 = tempRet0; //@line 26658
       $93 = $84; //@line 26659
       HEAP32[$93 >> 2] = $91; //@line 26661
       HEAP32[$93 + 4 >> 2] = $92; //@line 26664
       $97 = ___remdi3($80 | 0, $83 | 0, $91 | 0, $92 | 0) | 0; //@line 26665
       $99 = $77; //@line 26667
       HEAP32[$99 >> 2] = $97; //@line 26669
       HEAP32[$99 + 4 >> 2] = tempRet0; //@line 26672
       __THREW__ = 0; //@line 26673
       $103 = invoke_ii(143, $$val | 0) | 0; //@line 26674
       $104 = __THREW__; //@line 26675
       __THREW__ = 0; //@line 26675
       if ($104 & 1) {
        label = 35; //@line 26678
        break L4;
       }
       __THREW__ = 0; //@line 26681
       invoke_vii(120, $7 | 0, $4 | 0); //@line 26682
       $172 = __THREW__; //@line 26683
       __THREW__ = 0; //@line 26683
       if ($172 & 1) {
        label = 35; //@line 26686
        break L4;
       }
       __THREW__ = 0; //@line 26689
       invoke_vii(128, $103 | 0, $7 | 0); //@line 26690
       $174 = __THREW__; //@line 26691
       __THREW__ = 0; //@line 26691
       if ($174 & 1) {
        $287 = ___cxa_find_matching_catch_2() | 0; //@line 26694
        $288 = tempRet0; //@line 26695
        $289 = $7 + 52 | 0; //@line 26696
        if ((HEAP8[$289 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$289 >> 2] | 0); //@line 26702
        }
        $294 = $7 + 40 | 0; //@line 26704
        $295 = HEAP32[$294 >> 2] | 0; //@line 26705
        if ($295 | 0) {
         $297 = $7 + 44 | 0; //@line 26708
         $298 = HEAP32[$297 >> 2] | 0; //@line 26709
         do {
          if (($298 | 0) == ($295 | 0)) {
           $309 = $295; //@line 26713
          } else {
           $300 = $7 + 48 | 0; //@line 26715
           $302 = $298; //@line 26716
           while (1) {
            $301 = $302 + -72 | 0; //@line 26718
            HEAP32[$297 >> 2] = $301; //@line 26719
            __THREW__ = 0; //@line 26720
            HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26721
            invoke_viii(13, $$byval_copy11 | 0, $300 | 0, $301 | 0); //@line 26722
            $303 = __THREW__; //@line 26723
            __THREW__ = 0; //@line 26723
            if ($303 & 1) {
             label = 124; //@line 26726
             break;
            }
            $302 = HEAP32[$297 >> 2] | 0; //@line 26729
            if (($302 | 0) == ($295 | 0)) {
             label = 125; //@line 26732
             break;
            }
           }
           if ((label | 0) == 124) {
            $307 = ___cxa_find_matching_catch_3(0) | 0; //@line 26739
            ___clang_call_terminate($307); //@line 26741
           } else if ((label | 0) == 125) {
            $309 = HEAP32[$294 >> 2] | 0; //@line 26746
            break;
           }
          }
         } while (0);
         __ZdlPv($309); //@line 26751
        }
        $310 = $7 + 4 | 0; //@line 26753
        if ((HEAP8[$310 + 11 >> 0] | 0) >= 0) {
         $$1$i$i$i = $288; //@line 26758
         $$110$i$i$i = $287; //@line 26758
         break L4;
        }
        __ZdlPv(HEAP32[$310 >> 2] | 0); //@line 26762
        $$1$i$i$i = $288; //@line 26763
        $$110$i$i$i = $287; //@line 26763
        break L4;
       }
       $176 = $7 + 52 | 0; //@line 26766
       if ((HEAP8[$176 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$176 >> 2] | 0); //@line 26772
       }
       $181 = $7 + 40 | 0; //@line 26774
       $182 = HEAP32[$181 >> 2] | 0; //@line 26775
       if ($182 | 0) {
        $184 = $7 + 44 | 0; //@line 26778
        $185 = HEAP32[$184 >> 2] | 0; //@line 26779
        do {
         if (($185 | 0) == ($182 | 0)) {
          $196 = $182; //@line 26783
         } else {
          $187 = $7 + 48 | 0; //@line 26785
          $189 = $185; //@line 26786
          while (1) {
           $188 = $189 + -72 | 0; //@line 26788
           HEAP32[$184 >> 2] = $188; //@line 26789
           __THREW__ = 0; //@line 26790
           HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26791
           invoke_viii(13, $$byval_copy11 | 0, $187 | 0, $188 | 0); //@line 26792
           $190 = __THREW__; //@line 26793
           __THREW__ = 0; //@line 26793
           if ($190 & 1) {
            label = 73; //@line 26796
            break;
           }
           $189 = HEAP32[$184 >> 2] | 0; //@line 26799
           if (($189 | 0) == ($182 | 0)) {
            label = 74; //@line 26802
            break;
           }
          }
          if ((label | 0) == 73) {
           $194 = ___cxa_find_matching_catch_3(0) | 0; //@line 26809
           ___clang_call_terminate($194); //@line 26811
          } else if ((label | 0) == 74) {
           $196 = HEAP32[$181 >> 2] | 0; //@line 26816
           break;
          }
         }
        } while (0);
        __ZdlPv($196); //@line 26821
       }
       $197 = $7 + 4 | 0; //@line 26823
       if ((HEAP8[$197 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$197 >> 2] | 0); //@line 26829
       }
       __THREW__ = 0; //@line 26831
       $202 = invoke_ii(143, $$val | 0) | 0; //@line 26832
       $203 = __THREW__; //@line 26833
       __THREW__ = 0; //@line 26833
       if ($203 & 1) {
        label = 35; //@line 26836
        break L4;
       }
       __THREW__ = 0; //@line 26839
       invoke_vii(120, $8 | 0, $3 | 0); //@line 26840
       $205 = __THREW__; //@line 26841
       __THREW__ = 0; //@line 26841
       if ($205 & 1) {
        label = 35; //@line 26844
        break L4;
       }
       __THREW__ = 0; //@line 26847
       invoke_vii(128, $202 | 0, $8 | 0); //@line 26848
       $207 = __THREW__; //@line 26849
       __THREW__ = 0; //@line 26849
       if ($207 & 1) {
        $315 = ___cxa_find_matching_catch_2() | 0; //@line 26852
        $316 = tempRet0; //@line 26853
        $317 = $8 + 52 | 0; //@line 26854
        if ((HEAP8[$317 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$317 >> 2] | 0); //@line 26860
        }
        $322 = $8 + 40 | 0; //@line 26862
        $323 = HEAP32[$322 >> 2] | 0; //@line 26863
        if ($323 | 0) {
         $325 = $8 + 44 | 0; //@line 26866
         $326 = HEAP32[$325 >> 2] | 0; //@line 26867
         do {
          if (($326 | 0) == ($323 | 0)) {
           $337 = $323; //@line 26871
          } else {
           $328 = $8 + 48 | 0; //@line 26873
           $330 = $326; //@line 26874
           while (1) {
            $329 = $330 + -72 | 0; //@line 26876
            HEAP32[$325 >> 2] = $329; //@line 26877
            __THREW__ = 0; //@line 26878
            HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26879
            invoke_viii(13, $$byval_copy11 | 0, $328 | 0, $329 | 0); //@line 26880
            $331 = __THREW__; //@line 26881
            __THREW__ = 0; //@line 26881
            if ($331 & 1) {
             label = 136; //@line 26884
             break;
            }
            $330 = HEAP32[$325 >> 2] | 0; //@line 26887
            if (($330 | 0) == ($323 | 0)) {
             label = 137; //@line 26890
             break;
            }
           }
           if ((label | 0) == 136) {
            $335 = ___cxa_find_matching_catch_3(0) | 0; //@line 26897
            ___clang_call_terminate($335); //@line 26899
           } else if ((label | 0) == 137) {
            $337 = HEAP32[$322 >> 2] | 0; //@line 26904
            break;
           }
          }
         } while (0);
         __ZdlPv($337); //@line 26909
        }
        $338 = $8 + 4 | 0; //@line 26911
        if ((HEAP8[$338 + 11 >> 0] | 0) >= 0) {
         $$1$i$i$i = $316; //@line 26916
         $$110$i$i$i = $315; //@line 26916
         break L4;
        }
        __ZdlPv(HEAP32[$338 >> 2] | 0); //@line 26920
        $$1$i$i$i = $316; //@line 26921
        $$110$i$i$i = $315; //@line 26921
        break L4;
       }
       $209 = $8 + 52 | 0; //@line 26924
       if ((HEAP8[$209 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$209 >> 2] | 0); //@line 26930
       }
       $214 = $8 + 40 | 0; //@line 26932
       $215 = HEAP32[$214 >> 2] | 0; //@line 26933
       if ($215 | 0) {
        $217 = $8 + 44 | 0; //@line 26936
        $218 = HEAP32[$217 >> 2] | 0; //@line 26937
        do {
         if (($218 | 0) == ($215 | 0)) {
          $229 = $215; //@line 26941
         } else {
          $220 = $8 + 48 | 0; //@line 26943
          $222 = $218; //@line 26944
          while (1) {
           $221 = $222 + -72 | 0; //@line 26946
           HEAP32[$217 >> 2] = $221; //@line 26947
           __THREW__ = 0; //@line 26948
           HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26949
           invoke_viii(13, $$byval_copy11 | 0, $220 | 0, $221 | 0); //@line 26950
           $223 = __THREW__; //@line 26951
           __THREW__ = 0; //@line 26951
           if ($223 & 1) {
            label = 88; //@line 26954
            break;
           }
           $222 = HEAP32[$217 >> 2] | 0; //@line 26957
           if (($222 | 0) == ($215 | 0)) {
            label = 89; //@line 26960
            break;
           }
          }
          if ((label | 0) == 88) {
           $227 = ___cxa_find_matching_catch_3(0) | 0; //@line 26967
           ___clang_call_terminate($227); //@line 26969
          } else if ((label | 0) == 89) {
           $229 = HEAP32[$214 >> 2] | 0; //@line 26974
           break;
          }
         }
        } while (0);
        __ZdlPv($229); //@line 26979
       }
       $230 = $8 + 4 | 0; //@line 26981
       if ((HEAP8[$230 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$230 >> 2] | 0); //@line 26987
       }
       $235 = $4 + 52 | 0; //@line 26989
       if ((HEAP8[$235 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$235 >> 2] | 0); //@line 26995
       }
       $240 = $4 + 40 | 0; //@line 26997
       $241 = HEAP32[$240 >> 2] | 0; //@line 26998
       if ($241 | 0) {
        $243 = $4 + 44 | 0; //@line 27001
        $244 = HEAP32[$243 >> 2] | 0; //@line 27002
        do {
         if (($244 | 0) == ($241 | 0)) {
          $255 = $241; //@line 27006
         } else {
          $246 = $4 + 48 | 0; //@line 27008
          $248 = $244; //@line 27009
          while (1) {
           $247 = $248 + -72 | 0; //@line 27011
           HEAP32[$243 >> 2] = $247; //@line 27012
           __THREW__ = 0; //@line 27013
           HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27014
           invoke_viii(13, $$byval_copy11 | 0, $246 | 0, $247 | 0); //@line 27015
           $249 = __THREW__; //@line 27016
           __THREW__ = 0; //@line 27016
           if ($249 & 1) {
            label = 100; //@line 27019
            break;
           }
           $248 = HEAP32[$243 >> 2] | 0; //@line 27022
           if (($248 | 0) == ($241 | 0)) {
            label = 101; //@line 27025
            break;
           }
          }
          if ((label | 0) == 100) {
           $253 = ___cxa_find_matching_catch_3(0) | 0; //@line 27032
           ___clang_call_terminate($253); //@line 27034
          } else if ((label | 0) == 101) {
           $255 = HEAP32[$240 >> 2] | 0; //@line 27039
           break;
          }
         }
        } while (0);
        __ZdlPv($255); //@line 27044
       }
       $256 = $4 + 4 | 0; //@line 27046
       if ((HEAP8[$256 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$256 >> 2] | 0); //@line 27052
       }
       $261 = $3 + 52 | 0; //@line 27054
       if ((HEAP8[$261 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$261 >> 2] | 0); //@line 27060
       }
       $266 = $3 + 40 | 0; //@line 27062
       $267 = HEAP32[$266 >> 2] | 0; //@line 27063
       if ($267 | 0) {
        $269 = $3 + 44 | 0; //@line 27066
        $270 = HEAP32[$269 >> 2] | 0; //@line 27067
        do {
         if (($270 | 0) == ($267 | 0)) {
          $281 = $267; //@line 27071
         } else {
          $272 = $3 + 48 | 0; //@line 27073
          $274 = $270; //@line 27074
          while (1) {
           $273 = $274 + -72 | 0; //@line 27076
           HEAP32[$269 >> 2] = $273; //@line 27077
           __THREW__ = 0; //@line 27078
           HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27079
           invoke_viii(13, $$byval_copy11 | 0, $272 | 0, $273 | 0); //@line 27080
           $275 = __THREW__; //@line 27081
           __THREW__ = 0; //@line 27081
           if ($275 & 1) {
            label = 112; //@line 27084
            break;
           }
           $274 = HEAP32[$269 >> 2] | 0; //@line 27087
           if (($274 | 0) == ($267 | 0)) {
            label = 113; //@line 27090
            break;
           }
          }
          if ((label | 0) == 112) {
           $279 = ___cxa_find_matching_catch_3(0) | 0; //@line 27097
           ___clang_call_terminate($279); //@line 27099
          } else if ((label | 0) == 113) {
           $281 = HEAP32[$266 >> 2] | 0; //@line 27104
           break;
          }
         }
        } while (0);
        __ZdlPv($281); //@line 27109
       }
       $282 = $3 + 4 | 0; //@line 27111
       if ((HEAP8[$282 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 27116
        return;
       }
       __ZdlPv(HEAP32[$282 >> 2] | 0); //@line 27119
       STACKTOP = sp; //@line 27120
       return;
      }
     } while (0);
     if ((label | 0) == 36) {
      $110 = ___cxa_find_matching_catch_2() | 0; //@line 27124
      $$08$i$i$i = tempRet0; //@line 27126
      $$09$i$i$i = $110; //@line 27126
     }
     $140 = $5 + 52 | 0; //@line 27128
     if ((HEAP8[$140 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$140 >> 2] | 0); //@line 27134
     }
     $145 = $5 + 40 | 0; //@line 27136
     $146 = HEAP32[$145 >> 2] | 0; //@line 27137
     if ($146 | 0) {
      $148 = $5 + 44 | 0; //@line 27140
      $149 = HEAP32[$148 >> 2] | 0; //@line 27141
      do {
       if (($149 | 0) == ($146 | 0)) {
        $160 = $146; //@line 27145
       } else {
        $151 = $5 + 48 | 0; //@line 27147
        $153 = $149; //@line 27148
        while (1) {
         $152 = $153 + -72 | 0; //@line 27150
         HEAP32[$148 >> 2] = $152; //@line 27151
         __THREW__ = 0; //@line 27152
         HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27153
         invoke_viii(13, $$byval_copy11 | 0, $151 | 0, $152 | 0); //@line 27154
         $154 = __THREW__; //@line 27155
         __THREW__ = 0; //@line 27155
         if ($154 & 1) {
          label = 56; //@line 27158
          break;
         }
         $153 = HEAP32[$148 >> 2] | 0; //@line 27161
         if (($153 | 0) == ($146 | 0)) {
          label = 57; //@line 27164
          break;
         }
        }
        if ((label | 0) == 56) {
         $158 = ___cxa_find_matching_catch_3(0) | 0; //@line 27171
         ___clang_call_terminate($158); //@line 27173
        } else if ((label | 0) == 57) {
         $160 = HEAP32[$145 >> 2] | 0; //@line 27178
         break;
        }
       }
      } while (0);
      __ZdlPv($160); //@line 27183
     }
     $161 = $5 + 4 | 0; //@line 27185
     if ((HEAP8[$161 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$161 >> 2] | 0); //@line 27191
      $$1$i$i$i = $$08$i$i$i; //@line 27192
      $$110$i$i$i = $$09$i$i$i; //@line 27192
     } else {
      $$1$i$i$i = $$08$i$i$i; //@line 27194
      $$110$i$i$i = $$09$i$i$i; //@line 27194
     }
    }
   } while (0);
   if ((label | 0) == 35) {
    $108 = ___cxa_find_matching_catch_2() | 0; //@line 27199
    $$1$i$i$i = tempRet0; //@line 27201
    $$110$i$i$i = $108; //@line 27201
   }
   $343 = $4 + 52 | 0; //@line 27203
   if ((HEAP8[$343 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$343 >> 2] | 0); //@line 27209
   }
   $348 = $4 + 40 | 0; //@line 27211
   $349 = HEAP32[$348 >> 2] | 0; //@line 27212
   if ($349 | 0) {
    $351 = $4 + 44 | 0; //@line 27215
    $352 = HEAP32[$351 >> 2] | 0; //@line 27216
    do {
     if (($352 | 0) == ($349 | 0)) {
      $363 = $349; //@line 27220
     } else {
      $354 = $4 + 48 | 0; //@line 27222
      $356 = $352; //@line 27223
      while (1) {
       $355 = $356 + -72 | 0; //@line 27225
       HEAP32[$351 >> 2] = $355; //@line 27226
       __THREW__ = 0; //@line 27227
       HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27228
       invoke_viii(13, $$byval_copy11 | 0, $354 | 0, $355 | 0); //@line 27229
       $357 = __THREW__; //@line 27230
       __THREW__ = 0; //@line 27230
       if ($357 & 1) {
        label = 148; //@line 27233
        break;
       }
       $356 = HEAP32[$351 >> 2] | 0; //@line 27236
       if (($356 | 0) == ($349 | 0)) {
        label = 149; //@line 27239
        break;
       }
      }
      if ((label | 0) == 148) {
       $361 = ___cxa_find_matching_catch_3(0) | 0; //@line 27246
       ___clang_call_terminate($361); //@line 27248
      } else if ((label | 0) == 149) {
       $363 = HEAP32[$348 >> 2] | 0; //@line 27253
       break;
      }
     }
    } while (0);
    __ZdlPv($363); //@line 27258
   }
   $364 = $4 + 4 | 0; //@line 27260
   if ((HEAP8[$364 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$364 >> 2] | 0); //@line 27266
    $$2$i$i$i = $$1$i$i$i; //@line 27267
    $$211$i$i$i = $$110$i$i$i; //@line 27267
   } else {
    $$2$i$i$i = $$1$i$i$i; //@line 27269
    $$211$i$i$i = $$110$i$i$i; //@line 27269
   }
  }
 }
 if ((label | 0) == 34) {
  $106 = ___cxa_find_matching_catch_2() | 0; //@line 27274
  $$2$i$i$i = tempRet0; //@line 27276
  $$211$i$i$i = $106; //@line 27276
 }
 $369 = $3 + 52 | 0; //@line 27278
 if ((HEAP8[$369 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$369 >> 2] | 0); //@line 27284
 }
 $374 = $3 + 40 | 0; //@line 27286
 $375 = HEAP32[$374 >> 2] | 0; //@line 27287
 if ($375 | 0) {
  $377 = $3 + 44 | 0; //@line 27290
  $378 = HEAP32[$377 >> 2] | 0; //@line 27291
  do {
   if (($378 | 0) == ($375 | 0)) {
    $389 = $375; //@line 27295
   } else {
    $380 = $3 + 48 | 0; //@line 27297
    $382 = $378; //@line 27298
    while (1) {
     $381 = $382 + -72 | 0; //@line 27300
     HEAP32[$377 >> 2] = $381; //@line 27301
     __THREW__ = 0; //@line 27302
     HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27303
     invoke_viii(13, $$byval_copy11 | 0, $380 | 0, $381 | 0); //@line 27304
     $383 = __THREW__; //@line 27305
     __THREW__ = 0; //@line 27305
     if ($383 & 1) {
      label = 160; //@line 27308
      break;
     }
     $382 = HEAP32[$377 >> 2] | 0; //@line 27311
     if (($382 | 0) == ($375 | 0)) {
      label = 161; //@line 27314
      break;
     }
    }
    if ((label | 0) == 160) {
     $387 = ___cxa_find_matching_catch_3(0) | 0; //@line 27321
     ___clang_call_terminate($387); //@line 27323
    } else if ((label | 0) == 161) {
     $389 = HEAP32[$374 >> 2] | 0; //@line 27328
     break;
    }
   }
  } while (0);
  __ZdlPv($389); //@line 27333
 }
 $390 = $3 + 4 | 0; //@line 27335
 if ((HEAP8[$390 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$211$i$i$i | 0); //@line 27340
 }
 __ZdlPv(HEAP32[$390 >> 2] | 0); //@line 27344
 ___resumeException($$211$i$i$i | 0); //@line 27345
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $313 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $64 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14325
 STACKTOP = STACKTOP + 288 | 0; //@line 14326
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 14326
 $3 = sp + 8 | 0; //@line 14327
 $4 = sp + 17 | 0; //@line 14328
 $5 = sp; //@line 14329
 $6 = sp + 16 | 0; //@line 14330
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $313 = ___lockfile($0) | 0; //@line 14336
 } else {
  $313 = 0; //@line 14338
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 14340
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 14344
  } else {
   $13 = $0 + 4 | 0; //@line 14346
   $14 = $0 + 100 | 0; //@line 14347
   $15 = $0 + 108 | 0; //@line 14348
   $16 = $0 + 8 | 0; //@line 14349
   $17 = $4 + 10 | 0; //@line 14350
   $18 = $4 + 33 | 0; //@line 14351
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 14352
   $$0273408 = $1; //@line 14353
   $$0283407 = 0; //@line 14353
   $$0288404 = 0; //@line 14353
   $$0305402 = 0; //@line 14353
   $20 = $11; //@line 14353
   $315 = 0; //@line 14353
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 14361
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 14364
        $52 = HEAP8[$51 >> 0] | 0; //@line 14365
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 14374
           $$2275 = $$0273408 + 2 | 0; //@line 14374
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 14391
             $$2275 = $$0273408 + 3 | 0; //@line 14391
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 14406
           $91 = HEAP32[$90 >> 2] | 0; //@line 14407
           HEAP32[$2 >> 2] = $90 + 4; //@line 14409
           $$0293 = $91; //@line 14410
           $$2275 = $51; //@line 14410
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 14419
         $$3$lcssa = $$2275; //@line 14419
        } else {
         $$0266397 = 0; //@line 14421
         $$3396 = $$2275; //@line 14421
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 14427
          $101 = $$3396 + 1 | 0; //@line 14428
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 14434
           $$3$lcssa = $101; //@line 14434
           break;
          } else {
           $$0266397 = $100; //@line 14437
           $$3396 = $101; //@line 14437
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 14441
        $108 = $$3$lcssa + 1 | 0; //@line 14443
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 14448
         $$1306 = 0; //@line 14448
         $$4 = $108; //@line 14448
         $112 = HEAP8[$108 >> 0] | 0; //@line 14448
         $318 = 0; //@line 14448
        } else {
         $$0270 = 0; //@line 14450
         $$1306 = $$0305402; //@line 14450
         $$4 = $$3$lcssa; //@line 14450
         $112 = $106; //@line 14450
         $318 = $315; //@line 14450
        }
        $111 = $$4 + 1 | 0; //@line 14452
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 14456
          $$0268 = $114 ? -2 : -1; //@line 14460
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 14460
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 14465
          $$0268 = $117 ? 3 : 1; //@line 14469
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 14469
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 14473
          $$5 = $111; //@line 14473
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 14477
          $$5 = $111; //@line 14477
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 14481
          $$5 = $111; //@line 14481
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 14485
          $$5 = $$4; //@line 14485
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 14489
          $319 = $318; //@line 14489
          label = 136; //@line 14490
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 14495
        $122 = ($120 & 47 | 0) == 3; //@line 14497
        $$ = $122 ? $120 | 32 : $120; //@line 14499
        $$$0268 = $122 ? 1 : $$0268; //@line 14500
        $trunc = $$ & 255; //@line 14501
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 14506
          $$1284 = $$0283407; //@line 14506
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 14510
          $$1284 = $$0283407; //@line 14510
          break;
         }
        case 110:
         {
          _store_int($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 14516
          $$11 = $$5; //@line 14517
          $$1289 = $$0288404; //@line 14517
          $$2285 = $$0283407; //@line 14517
          $$6311 = $$1306; //@line 14517
          $316 = $318; //@line 14517
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 14522
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 14524
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 14529
            $134 = HEAPU8[$127 >> 0] | 0; //@line 14532
           } else {
            $134 = ___shgetc($0) | 0; //@line 14535
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 14547
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 14550
           HEAP32[$13 >> 2] = $140; //@line 14551
           $146 = $140; //@line 14553
          }
          $$1267 = $$0266$lcssa; //@line 14560
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 14560
         }
        }
        ___shlim($0, $$1267); //@line 14563
        $148 = HEAP32[$13 >> 2] | 0; //@line 14564
        $149 = HEAP32[$14 >> 2] | 0; //@line 14565
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 14569
         $154 = $149; //@line 14570
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 14575
          $319 = $318; //@line 14575
          label = 136; //@line 14576
          break L6;
         }
         $154 = HEAP32[$14 >> 2] | 0; //@line 14580
        }
        if ($154 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 14586
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 14591
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 14597
             HEAP8[$4 >> 0] = 0; //@line 14598
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 14600
              HEAP8[$17 >> 0] = 0; //@line 14601
              HEAP8[$17 + 1 >> 0] = 0; //@line 14601
              HEAP8[$17 + 2 >> 0] = 0; //@line 14601
              HEAP8[$17 + 3 >> 0] = 0; //@line 14601
              HEAP8[$17 + 4 >> 0] = 0; //@line 14601
              $$9 = $$5; //@line 14602
             } else {
              $$9 = $$5; //@line 14604
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 14607
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 14609
             $$0292 = $164 & 1; //@line 14611
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 14612
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 14613
             HEAP8[$4 >> 0] = 0; //@line 14614
             $166 = HEAP8[$$6 >> 0] | 0; //@line 14615
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 14618
               $$sink330 = 46; //@line 14618
               label = 65; //@line 14619
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 14623
               $$sink330 = 94; //@line 14623
               label = 65; //@line 14624
               break;
              }
             default:
              {
               $$7 = $$6; //@line 14628
               $168 = $166; //@line 14628
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 14633
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 14637
               $$7$ph = $$6$pn + 1 | 0; //@line 14638
               $$7 = $$7$ph; //@line 14640
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 14640
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 14645
                 $319 = $318; //@line 14645
                 label = 136; //@line 14646
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 14651
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 14656
                 $170 = HEAP8[$169 >> 0] | 0; //@line 14657
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 14660
                   $183 = 45; //@line 14660
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 14668
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 14673
                  $$0286399 = $172 & 255; //@line 14674
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 14676
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 14678
                   $179 = HEAP8[$169 >> 0] | 0; //@line 14679
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 14685
                  $183 = $179; //@line 14685
                 } else {
                  $$8 = $169; //@line 14690
                  $183 = $170; //@line 14690
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 14695
                 $183 = $168; //@line 14695
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 14701
              $$sink330 = ($183 & 255) + 1 | 0; //@line 14701
              label = 65; //@line 14702
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 14707
           $187 = ($$$0268 | 0) == 1; //@line 14708
           $188 = ($$0270 | 0) != 0; //@line 14709
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 14714
              if (!$190) {
               $$7312 = 0; //@line 14717
               $319 = 0; //@line 14717
               label = 136; //@line 14718
               break L6;
              } else {
               $321 = $190; //@line 14721
              }
             } else {
              $321 = $$0293; //@line 14724
             }
             HEAP32[$3 >> 2] = 0; //@line 14726
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 14727
             $$0276$ph = $186; //@line 14728
             $$0278$ph = 0; //@line 14728
             $$ph = $321; //@line 14728
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 14730
              $$0278$ph336 = $$0278$ph; //@line 14731
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 14734
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 14739
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 14742
                } else {
                 $201 = ___shgetc($0) | 0; //@line 14745
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 14755
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 14759
                  $319 = $$ph; //@line 14759
                  label = 136; //@line 14760
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 14773
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 14778
                $$1279 = $$0278$ph336 + 1 | 0; //@line 14779
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 14786
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 14790
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 14792
              if (!$213) {
               $$7312 = 0; //@line 14795
               $319 = $$ph; //@line 14795
               label = 136; //@line 14796
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 14799
               $$0276$ph = $211; //@line 14799
               $$ph = $213; //@line 14799
               $$0278$ph = $$0278$ph$phi; //@line 14799
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 14805
              $319 = $$ph; //@line 14805
              label = 136; //@line 14806
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 14809
              $$4309 = 0; //@line 14809
              $$5299 = $$ph; //@line 14809
              $322 = $$ph; //@line 14809
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 14813
              if (!$217) {
               $$7312 = 0; //@line 14816
               $319 = 0; //@line 14816
               label = 136; //@line 14817
               break L6;
              } else {
               $$1277$ph = $186; //@line 14820
               $$2280$ph = 0; //@line 14820
               $$2307$ph = $217; //@line 14820
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 14823
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 14825
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 14830
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 14833
                } else {
                 $227 = ___shgetc($0) | 0; //@line 14836
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 14843
                 $$4309 = $$2307$ph; //@line 14843
                 $$5299 = 0; //@line 14843
                 $322 = 0; //@line 14843
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 14849
                $$2280 = $$2280 + 1 | 0; //@line 14847
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 14858
               $236 = _realloc($$2307$ph, $235) | 0; //@line 14859
               if (!$236) {
                $$7312 = $$2307$ph; //@line 14862
                $319 = 0; //@line 14862
                label = 136; //@line 14863
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 14866
                $$1277$ph = $235; //@line 14866
                $$2307$ph = $236; //@line 14866
                $$2280$ph = $$2280$ph$phi; //@line 14866
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 14873
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 14878
                $262 = HEAPU8[$254 >> 0] | 0; //@line 14881
               } else {
                $262 = ___shgetc($0) | 0; //@line 14884
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 14891
                $$4309 = 0; //@line 14891
                $$5299 = 0; //@line 14891
                $322 = 0; //@line 14891
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 14896
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 14899
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 14904
               $247 = HEAPU8[$239 >> 0] | 0; //@line 14907
              } else {
               $247 = ___shgetc($0) | 0; //@line 14910
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 14917
               $$4309 = $$0293; //@line 14917
               $$5299 = 0; //@line 14917
               $322 = 0; //@line 14917
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 14923
              $$3281 = $$3281 + 1 | 0; //@line 14924
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 14932
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 14935
            HEAP32[$13 >> 2] = $269; //@line 14936
            $274 = $269; //@line 14938
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 14943
           if (!$275) {
            $$2 = $$0270; //@line 14946
            $$2290 = $$0288404; //@line 14946
            $$9314 = $$4309; //@line 14946
            $312 = $322; //@line 14946
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 14953
            $$2290 = $$0288404; //@line 14953
            $$9314 = $$4309; //@line 14953
            $312 = $322; //@line 14953
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 14959
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 14962
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 14968
            $$5310 = $$4309; //@line 14968
            $320 = $322; //@line 14968
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 14973
            }
            if (!$$4309) {
             $$10 = $$9; //@line 14977
             $$5310 = 0; //@line 14977
             $320 = $322; //@line 14977
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 14981
            $$10 = $$9; //@line 14982
            $$5310 = $$4309; //@line 14982
            $320 = $322; //@line 14982
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 14987
           label = 124; //@line 14988
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 14992
           label = 124; //@line 14993
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 14997
           label = 124; //@line 14998
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 15002
           label = 124; //@line 15003
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 15007
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 15014
            $$2290 = $$0288404; //@line 15014
            $$9314 = $$1306; //@line 15014
            $312 = $318; //@line 15014
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 15019
            $$5310 = $$1306; //@line 15019
            $320 = $318; //@line 15019
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 15024
              $$10 = $$5; //@line 15025
              $$5310 = $$1306; //@line 15025
              $320 = $318; //@line 15025
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 15030
              $$10 = $$5; //@line 15031
              $$5310 = $$1306; //@line 15031
              $320 = $318; //@line 15031
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 15036
              $$10 = $$5; //@line 15037
              $$5310 = $$1306; //@line 15037
              $320 = $318; //@line 15037
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 15042
              $$5310 = $$1306; //@line 15042
              $320 = $318; //@line 15042
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 15050
           $$5310 = $$1306; //@line 15050
           $320 = $318; //@line 15050
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 15056
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 15057
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 15065
           $$2290 = $$0288404; //@line 15065
           $$9314 = $$1306; //@line 15065
           $312 = $318; //@line 15065
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 15073
           $$10 = $$5; //@line 15074
           $$5310 = $$1306; //@line 15074
           $320 = $318; //@line 15074
           break;
          } else {
           _store_int($$0293, $$$0268, $282, tempRet0); //@line 15077
           $$10 = $$5; //@line 15078
           $$5310 = $$1306; //@line 15078
           $320 = $318; //@line 15078
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 15092
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 15092
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 15092
        $$6311 = $$5310; //@line 15092
        $316 = $320; //@line 15092
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 15097
      ___shlim($0, 0); //@line 15098
      $55 = HEAP32[$13 >> 2] | 0; //@line 15099
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 15104
       $64 = HEAPU8[$55 >> 0] | 0; //@line 15107
      } else {
       $64 = ___shgetc($0) | 0; //@line 15110
      }
      if (($64 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 15116
       break L6;
      }
      $$11 = $54; //@line 15120
      $$1289 = $$0288404; //@line 15120
      $$2285 = $$0283407 + 1 | 0; //@line 15120
      $$6311 = $$0305402; //@line 15120
      $316 = $315; //@line 15120
     } else {
      $$1274 = $$0273408; //@line 15122
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 15124
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 15132
       }
      }
      ___shlim($0, 0); //@line 15135
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 15137
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 15142
        $35 = HEAPU8[$28 >> 0] | 0; //@line 15145
       } else {
        $35 = ___shgetc($0) | 0; //@line 15148
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 15160
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 15163
       HEAP32[$13 >> 2] = $41; //@line 15164
       $47 = $41; //@line 15166
      }
      $$11 = $$1274; //@line 15173
      $$1289 = $$0288404; //@line 15173
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 15173
      $$6311 = $$0305402; //@line 15173
      $316 = $315; //@line 15173
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 15176
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 15177
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 15180
     break L4;
    } else {
     $$0283407 = $$2285; //@line 15183
     $$0288404 = $$1289; //@line 15183
     $$0305402 = $$6311; //@line 15183
     $315 = $316; //@line 15183
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 15192
    }
    if (($$0288404 | 0) != 0 | ($64 | 0) > -1) {
     $$3291 = $$0288404; //@line 15198
     break;
    } else {
     $$1271 = 0; //@line 15201
     $$8313 = $$0305402; //@line 15201
     $317 = $315; //@line 15201
     label = 137; //@line 15202
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 15208
     $$8313 = $$7312; //@line 15208
     $317 = $319; //@line 15208
     label = 137; //@line 15209
    } else {
     $$2 = $$0270; //@line 15211
     $$2290 = $$0288404; //@line 15211
     $$9314 = $$7312; //@line 15211
     $312 = $319; //@line 15211
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 15215
    $$2290 = -1; //@line 15215
    $$9314 = $$8313; //@line 15215
    $312 = $317; //@line 15215
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 15219
   } else {
    _free($$9314); //@line 15221
    _free($312); //@line 15222
    $$3291 = $$2290; //@line 15223
   }
  }
 } while (0);
 if ($313 | 0) {
  ___unlockfile($0); //@line 15229
 }
 STACKTOP = sp; //@line 15231
 return $$3291 | 0; //@line 15231
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$018$i$i$i = 0, $$1$i$i$i = 0, $$119$i$i$i = 0, $$2$i$i$i = 0, $$220$i$i$i = 0, $$3$i$i$i = 0, $$321$i$i$i = 0, $$byval_copy11 = 0, $$val = 0, $10 = 0, $104 = 0, $105 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $134 = 0, $136 = 0, $137 = 0, $142 = 0, $147 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $160 = 0, $162 = 0, $167 = 0, $17 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $187 = 0, $188 = 0, $193 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $211 = 0, $213 = 0, $214 = 0, $219 = 0, $22 = 0, $221 = 0, $223 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $232 = 0, $233 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $245 = 0, $247 = 0, $248 = 0, $25 = 0, $253 = 0, $258 = 0, $259 = 0, $261 = 0, $262 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $271 = 0, $273 = 0, $274 = 0, $279 = 0, $281 = 0, $282 = 0, $283 = 0, $288 = 0, $289 = 0, $291 = 0, $292 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $3 = 0, $30 = 0, $301 = 0, $303 = 0, $304 = 0, $309 = 0, $31 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $327 = 0, $329 = 0, $33 = 0, $334 = 0, $335 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $345 = 0, $346 = 0, $348 = 0, $349 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $358 = 0, $36 = 0, $360 = 0, $361 = 0, $366 = 0, $37 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $384 = 0, $386 = 0, $387 = 0, $39 = 0, $392 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $51 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $85 = 0, $92 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24
 STACKTOP = STACKTOP + 448 | 0; //@line 25
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(448); //@line 25
 $$byval_copy11 = sp + 433 | 0; //@line 26
 $2 = sp + 432 | 0; //@line 27
 $3 = sp + 360 | 0; //@line 28
 $4 = sp + 288 | 0; //@line 29
 $5 = sp + 216 | 0; //@line 30
 $6 = sp + 144 | 0; //@line 31
 $7 = sp + 72 | 0; //@line 32
 $8 = sp; //@line 33
 $$val = HEAP32[$1 >> 2] | 0; //@line 34
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 36
 __THREW__ = 0; //@line 37
 $10 = invoke_ii(143, $$val | 0) | 0; //@line 38
 $11 = __THREW__; //@line 39
 __THREW__ = 0; //@line 39
 if ($11 & 1) {
  label = 84; //@line 42
 } else {
  __THREW__ = 0; //@line 44
  invoke_vii(131, $4 | 0, $10 | 0); //@line 45
  $13 = __THREW__; //@line 46
  __THREW__ = 0; //@line 46
  if ($13 & 1) {
   label = 84; //@line 49
  } else {
   __THREW__ = 0; //@line 51
   invoke_vii(120, $5 | 0, $3 | 0); //@line 52
   $15 = __THREW__; //@line 53
   __THREW__ = 0; //@line 53
   L4 : do {
    if ($15 & 1) {
     label = 85; //@line 57
    } else {
     __THREW__ = 0; //@line 59
     $17 = invoke_ii(144, $5 | 0) | 0; //@line 60
     $18 = __THREW__; //@line 61
     __THREW__ = 0; //@line 61
     L6 : do {
      if ($18 & 1) {
       label = 86; //@line 65
      } else {
       do {
        if ($17) {
         __THREW__ = 0; //@line 69
         invoke_vii(120, $6 | 0, $4 | 0); //@line 70
         $20 = __THREW__; //@line 71
         __THREW__ = 0; //@line 71
         if ($20 & 1) {
          label = 86; //@line 74
          break L6;
         }
         __THREW__ = 0; //@line 77
         $22 = invoke_ii(144, $6 | 0) | 0; //@line 78
         $23 = __THREW__; //@line 79
         __THREW__ = 0; //@line 79
         if ($23 & 1) {
          $225 = ___cxa_find_matching_catch_2() | 0; //@line 82
          $226 = tempRet0; //@line 83
          $227 = $6 + 52 | 0; //@line 84
          if ((HEAP8[$227 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$227 >> 2] | 0); //@line 90
          }
          $232 = $6 + 40 | 0; //@line 92
          $233 = HEAP32[$232 >> 2] | 0; //@line 93
          if ($233 | 0) {
           $235 = $6 + 44 | 0; //@line 96
           $236 = HEAP32[$235 >> 2] | 0; //@line 97
           do {
            if (($236 | 0) == ($233 | 0)) {
             $247 = $233; //@line 101
            } else {
             $238 = $6 + 48 | 0; //@line 103
             $240 = $236; //@line 104
             while (1) {
              $239 = $240 + -72 | 0; //@line 106
              HEAP32[$235 >> 2] = $239; //@line 107
              __THREW__ = 0; //@line 108
              HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 109
              invoke_viii(13, $$byval_copy11 | 0, $238 | 0, $239 | 0); //@line 110
              $241 = __THREW__; //@line 111
              __THREW__ = 0; //@line 111
              if ($241 & 1) {
               label = 94; //@line 114
               break;
              }
              $240 = HEAP32[$235 >> 2] | 0; //@line 117
              if (($240 | 0) == ($233 | 0)) {
               label = 95; //@line 120
               break;
              }
             }
             if ((label | 0) == 94) {
              $245 = ___cxa_find_matching_catch_3(0) | 0; //@line 127
              ___clang_call_terminate($245); //@line 129
             } else if ((label | 0) == 95) {
              $247 = HEAP32[$232 >> 2] | 0; //@line 134
              break;
             }
            }
           } while (0);
           __ZdlPv($247); //@line 139
          }
          $248 = $6 + 4 | 0; //@line 141
          if ((HEAP8[$248 + 11 >> 0] | 0) >= 0) {
           $$0$i$i$i = $225; //@line 146
           $$018$i$i$i = $226; //@line 146
           break L6;
          }
          __ZdlPv(HEAP32[$248 >> 2] | 0); //@line 150
          $$0$i$i$i = $225; //@line 151
          $$018$i$i$i = $226; //@line 151
          break L6;
         } else {
          $25 = $6 + 52 | 0; //@line 154
          if ((HEAP8[$25 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$25 >> 2] | 0); //@line 160
          }
          $30 = $6 + 40 | 0; //@line 162
          $31 = HEAP32[$30 >> 2] | 0; //@line 163
          if ($31 | 0) {
           $33 = $6 + 44 | 0; //@line 166
           $34 = HEAP32[$33 >> 2] | 0; //@line 167
           do {
            if (($34 | 0) == ($31 | 0)) {
             $45 = $31; //@line 171
            } else {
             $36 = $6 + 48 | 0; //@line 173
             $38 = $34; //@line 174
             while (1) {
              $37 = $38 + -72 | 0; //@line 176
              HEAP32[$33 >> 2] = $37; //@line 177
              __THREW__ = 0; //@line 178
              HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 179
              invoke_viii(13, $$byval_copy11 | 0, $36 | 0, $37 | 0); //@line 180
              $39 = __THREW__; //@line 181
              __THREW__ = 0; //@line 181
              if ($39 & 1) {
               label = 15; //@line 184
               break;
              }
              $38 = HEAP32[$33 >> 2] | 0; //@line 187
              if (($38 | 0) == ($31 | 0)) {
               label = 16; //@line 190
               break;
              }
             }
             if ((label | 0) == 15) {
              $43 = ___cxa_find_matching_catch_3(0) | 0; //@line 197
              ___clang_call_terminate($43); //@line 199
             } else if ((label | 0) == 16) {
              $45 = HEAP32[$30 >> 2] | 0; //@line 204
              break;
             }
            }
           } while (0);
           __ZdlPv($45); //@line 209
          }
          $46 = $6 + 4 | 0; //@line 211
          if ((HEAP8[$46 + 11 >> 0] | 0) >= 0) {
           $392 = $22; //@line 216
           break;
          }
          __ZdlPv(HEAP32[$46 >> 2] | 0); //@line 220
          $392 = $22; //@line 221
          break;
         }
        } else {
         $392 = 0; //@line 225
        }
       } while (0);
       $51 = $5 + 52 | 0; //@line 228
       if ((HEAP8[$51 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$51 >> 2] | 0); //@line 234
       }
       $56 = $5 + 40 | 0; //@line 236
       $57 = HEAP32[$56 >> 2] | 0; //@line 237
       if ($57 | 0) {
        $59 = $5 + 44 | 0; //@line 240
        $60 = HEAP32[$59 >> 2] | 0; //@line 241
        do {
         if (($60 | 0) == ($57 | 0)) {
          $71 = $57; //@line 245
         } else {
          $62 = $5 + 48 | 0; //@line 247
          $64 = $60; //@line 248
          while (1) {
           $63 = $64 + -72 | 0; //@line 250
           HEAP32[$59 >> 2] = $63; //@line 251
           __THREW__ = 0; //@line 252
           HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 253
           invoke_viii(13, $$byval_copy11 | 0, $62 | 0, $63 | 0); //@line 254
           $65 = __THREW__; //@line 255
           __THREW__ = 0; //@line 255
           if ($65 & 1) {
            label = 27; //@line 258
            break;
           }
           $64 = HEAP32[$59 >> 2] | 0; //@line 261
           if (($64 | 0) == ($57 | 0)) {
            label = 28; //@line 264
            break;
           }
          }
          if ((label | 0) == 27) {
           $69 = ___cxa_find_matching_catch_3(0) | 0; //@line 271
           ___clang_call_terminate($69); //@line 273
          } else if ((label | 0) == 28) {
           $71 = HEAP32[$56 >> 2] | 0; //@line 278
           break;
          }
         }
        } while (0);
        __ZdlPv($71); //@line 283
       }
       $72 = $5 + 4 | 0; //@line 285
       if ((HEAP8[$72 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$72 >> 2] | 0); //@line 291
       }
       if (!$392) {
        $334 = ___cxa_allocate_exception(8) | 0; //@line 294
        __THREW__ = 0; //@line 295
        invoke_vii(125, $334 | 0, 16515); //@line 296
        $335 = __THREW__; //@line 297
        __THREW__ = 0; //@line 297
        if ($335 & 1) {
         $338 = ___cxa_find_matching_catch_2() | 0; //@line 300
         $339 = tempRet0; //@line 301
         ___cxa_free_exception($334 | 0); //@line 302
         $$2$i$i$i = $338; //@line 303
         $$220$i$i$i = $339; //@line 303
         break L4;
        } else {
         __THREW__ = 0; //@line 306
         invoke_viii(16, $334 | 0, 2824, 242); //@line 307
         __THREW__ = 0; //@line 308
         label = 85; //@line 309
         break L4;
        }
       }
       $77 = $7 + 4 | 0; //@line 313
       HEAP32[$77 >> 2] = 0; //@line 314
       HEAP32[$77 + 4 >> 2] = 0; //@line 314
       HEAP32[$77 + 8 >> 2] = 0; //@line 314
       $78 = $7 + 40 | 0; //@line 315
       HEAP32[$78 >> 2] = 0; //@line 316
       HEAP32[$78 + 4 >> 2] = 0; //@line 316
       HEAP32[$78 + 8 >> 2] = 0; //@line 316
       HEAP32[$78 + 12 >> 2] = 0; //@line 316
       HEAP32[$78 + 16 >> 2] = 0; //@line 316
       HEAP32[$78 + 20 >> 2] = 0; //@line 316
       HEAP32[$7 >> 2] = 2; //@line 317
       $80 = $3 + 24 | 0; //@line 319
       $85 = HEAP32[$80 + 4 >> 2] | 0; //@line 324
       $92 = $4 + 24 | 0; //@line 331
       $97 = HEAP32[$92 + 4 >> 2] | 0; //@line 336
       $104 = ((($85 | 0) > 0 | ($85 | 0) == 0 & (HEAP32[$80 >> 2] | 0) >>> 0 > 0) ^ (($97 | 0) > 0 | ($97 | 0) == 0 & (HEAP32[$92 >> 2] | 0) >>> 0 > 0)) & 1; //@line 343
       HEAP32[$7 + 16 >> 2] = 0; //@line 345
       $105 = $7 + 24 | 0; //@line 347
       HEAP32[$105 >> 2] = $104; //@line 349
       HEAP32[$105 + 4 >> 2] = 0; //@line 352
       __THREW__ = 0; //@line 353
       $109 = invoke_ii(143, $$val | 0) | 0; //@line 354
       $110 = __THREW__; //@line 355
       __THREW__ = 0; //@line 355
       do {
        if ($110 & 1) {
         label = 111; //@line 359
        } else {
         __THREW__ = 0; //@line 361
         invoke_vii(120, $8 | 0, $7 | 0); //@line 362
         $112 = __THREW__; //@line 363
         __THREW__ = 0; //@line 363
         if ($112 & 1) {
          label = 111; //@line 366
         } else {
          __THREW__ = 0; //@line 368
          invoke_vii(128, $109 | 0, $8 | 0); //@line 369
          $114 = __THREW__; //@line 370
          __THREW__ = 0; //@line 370
          if ($114 & 1) {
           $281 = ___cxa_find_matching_catch_2() | 0; //@line 373
           $282 = tempRet0; //@line 374
           $283 = $8 + 52 | 0; //@line 375
           if ((HEAP8[$283 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$283 >> 2] | 0); //@line 381
           }
           $288 = $8 + 40 | 0; //@line 383
           $289 = HEAP32[$288 >> 2] | 0; //@line 384
           if ($289 | 0) {
            $291 = $8 + 44 | 0; //@line 387
            $292 = HEAP32[$291 >> 2] | 0; //@line 388
            do {
             if (($292 | 0) == ($289 | 0)) {
              $303 = $289; //@line 392
             } else {
              $294 = $8 + 48 | 0; //@line 394
              $296 = $292; //@line 395
              while (1) {
               $295 = $296 + -72 | 0; //@line 397
               HEAP32[$291 >> 2] = $295; //@line 398
               __THREW__ = 0; //@line 399
               HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 400
               invoke_viii(13, $$byval_copy11 | 0, $294 | 0, $295 | 0); //@line 401
               $297 = __THREW__; //@line 402
               __THREW__ = 0; //@line 402
               if ($297 & 1) {
                label = 119; //@line 405
                break;
               }
               $296 = HEAP32[$291 >> 2] | 0; //@line 408
               if (($296 | 0) == ($289 | 0)) {
                label = 120; //@line 411
                break;
               }
              }
              if ((label | 0) == 119) {
               $301 = ___cxa_find_matching_catch_3(0) | 0; //@line 418
               ___clang_call_terminate($301); //@line 420
              } else if ((label | 0) == 120) {
               $303 = HEAP32[$288 >> 2] | 0; //@line 425
               break;
              }
             }
            } while (0);
            __ZdlPv($303); //@line 430
           }
           $304 = $8 + 4 | 0; //@line 432
           if ((HEAP8[$304 + 11 >> 0] | 0) >= 0) {
            $$1$i$i$i = $281; //@line 437
            $$119$i$i$i = $282; //@line 437
            break;
           }
           __ZdlPv(HEAP32[$304 >> 2] | 0); //@line 441
           $$1$i$i$i = $281; //@line 442
           $$119$i$i$i = $282; //@line 442
           break;
          }
          $116 = $8 + 52 | 0; //@line 445
          if ((HEAP8[$116 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$116 >> 2] | 0); //@line 451
          }
          $121 = $8 + 40 | 0; //@line 453
          $122 = HEAP32[$121 >> 2] | 0; //@line 454
          if ($122 | 0) {
           $124 = $8 + 44 | 0; //@line 457
           $125 = HEAP32[$124 >> 2] | 0; //@line 458
           do {
            if (($125 | 0) == ($122 | 0)) {
             $136 = $122; //@line 462
            } else {
             $127 = $8 + 48 | 0; //@line 464
             $129 = $125; //@line 465
             while (1) {
              $128 = $129 + -72 | 0; //@line 467
              HEAP32[$124 >> 2] = $128; //@line 468
              __THREW__ = 0; //@line 469
              HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 470
              invoke_viii(13, $$byval_copy11 | 0, $127 | 0, $128 | 0); //@line 471
              $130 = __THREW__; //@line 472
              __THREW__ = 0; //@line 472
              if ($130 & 1) {
               label = 43; //@line 475
               break;
              }
              $129 = HEAP32[$124 >> 2] | 0; //@line 478
              if (($129 | 0) == ($122 | 0)) {
               label = 44; //@line 481
               break;
              }
             }
             if ((label | 0) == 43) {
              $134 = ___cxa_find_matching_catch_3(0) | 0; //@line 488
              ___clang_call_terminate($134); //@line 490
             } else if ((label | 0) == 44) {
              $136 = HEAP32[$121 >> 2] | 0; //@line 495
              break;
             }
            }
           } while (0);
           __ZdlPv($136); //@line 500
          }
          $137 = $8 + 4 | 0; //@line 502
          if ((HEAP8[$137 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$137 >> 2] | 0); //@line 508
          }
          $142 = $7 + 52 | 0; //@line 510
          if ((HEAP8[$142 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$142 >> 2] | 0); //@line 516
          }
          $147 = $7 + 40 | 0; //@line 518
          $148 = HEAP32[$147 >> 2] | 0; //@line 519
          if ($148 | 0) {
           $150 = $7 + 44 | 0; //@line 522
           $151 = HEAP32[$150 >> 2] | 0; //@line 523
           do {
            if (($151 | 0) == ($148 | 0)) {
             $162 = $148; //@line 527
            } else {
             $153 = $7 + 48 | 0; //@line 529
             $155 = $151; //@line 530
             while (1) {
              $154 = $155 + -72 | 0; //@line 532
              HEAP32[$150 >> 2] = $154; //@line 533
              __THREW__ = 0; //@line 534
              HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 535
              invoke_viii(13, $$byval_copy11 | 0, $153 | 0, $154 | 0); //@line 536
              $156 = __THREW__; //@line 537
              __THREW__ = 0; //@line 537
              if ($156 & 1) {
               label = 55; //@line 540
               break;
              }
              $155 = HEAP32[$150 >> 2] | 0; //@line 543
              if (($155 | 0) == ($148 | 0)) {
               label = 56; //@line 546
               break;
              }
             }
             if ((label | 0) == 55) {
              $160 = ___cxa_find_matching_catch_3(0) | 0; //@line 553
              ___clang_call_terminate($160); //@line 555
             } else if ((label | 0) == 56) {
              $162 = HEAP32[$147 >> 2] | 0; //@line 560
              break;
             }
            }
           } while (0);
           __ZdlPv($162); //@line 565
          }
          if ((HEAP8[$77 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$77 >> 2] | 0); //@line 572
          }
          $167 = $4 + 52 | 0; //@line 574
          if ((HEAP8[$167 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$167 >> 2] | 0); //@line 580
          }
          $172 = $4 + 40 | 0; //@line 582
          $173 = HEAP32[$172 >> 2] | 0; //@line 583
          if ($173 | 0) {
           $175 = $4 + 44 | 0; //@line 586
           $176 = HEAP32[$175 >> 2] | 0; //@line 587
           do {
            if (($176 | 0) == ($173 | 0)) {
             $187 = $173; //@line 591
            } else {
             $178 = $4 + 48 | 0; //@line 593
             $180 = $176; //@line 594
             while (1) {
              $179 = $180 + -72 | 0; //@line 596
              HEAP32[$175 >> 2] = $179; //@line 597
              __THREW__ = 0; //@line 598
              HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 599
              invoke_viii(13, $$byval_copy11 | 0, $178 | 0, $179 | 0); //@line 600
              $181 = __THREW__; //@line 601
              __THREW__ = 0; //@line 601
              if ($181 & 1) {
               label = 67; //@line 604
               break;
              }
              $180 = HEAP32[$175 >> 2] | 0; //@line 607
              if (($180 | 0) == ($173 | 0)) {
               label = 68; //@line 610
               break;
              }
             }
             if ((label | 0) == 67) {
              $185 = ___cxa_find_matching_catch_3(0) | 0; //@line 617
              ___clang_call_terminate($185); //@line 619
             } else if ((label | 0) == 68) {
              $187 = HEAP32[$172 >> 2] | 0; //@line 624
              break;
             }
            }
           } while (0);
           __ZdlPv($187); //@line 629
          }
          $188 = $4 + 4 | 0; //@line 631
          if ((HEAP8[$188 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$188 >> 2] | 0); //@line 637
          }
          $193 = $3 + 52 | 0; //@line 639
          if ((HEAP8[$193 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$193 >> 2] | 0); //@line 645
          }
          $198 = $3 + 40 | 0; //@line 647
          $199 = HEAP32[$198 >> 2] | 0; //@line 648
          if ($199 | 0) {
           $201 = $3 + 44 | 0; //@line 651
           $202 = HEAP32[$201 >> 2] | 0; //@line 652
           do {
            if (($202 | 0) == ($199 | 0)) {
             $213 = $199; //@line 656
            } else {
             $204 = $3 + 48 | 0; //@line 658
             $206 = $202; //@line 659
             while (1) {
              $205 = $206 + -72 | 0; //@line 661
              HEAP32[$201 >> 2] = $205; //@line 662
              __THREW__ = 0; //@line 663
              HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 664
              invoke_viii(13, $$byval_copy11 | 0, $204 | 0, $205 | 0); //@line 665
              $207 = __THREW__; //@line 666
              __THREW__ = 0; //@line 666
              if ($207 & 1) {
               label = 79; //@line 669
               break;
              }
              $206 = HEAP32[$201 >> 2] | 0; //@line 672
              if (($206 | 0) == ($199 | 0)) {
               label = 80; //@line 675
               break;
              }
             }
             if ((label | 0) == 79) {
              $211 = ___cxa_find_matching_catch_3(0) | 0; //@line 682
              ___clang_call_terminate($211); //@line 684
             } else if ((label | 0) == 80) {
              $213 = HEAP32[$198 >> 2] | 0; //@line 689
              break;
             }
            }
           } while (0);
           __ZdlPv($213); //@line 694
          }
          $214 = $3 + 4 | 0; //@line 696
          if ((HEAP8[$214 + 11 >> 0] | 0) >= 0) {
           STACKTOP = sp; //@line 701
           return;
          }
          __ZdlPv(HEAP32[$214 >> 2] | 0); //@line 704
          STACKTOP = sp; //@line 705
          return;
         }
        }
       } while (0);
       if ((label | 0) == 111) {
        $279 = ___cxa_find_matching_catch_2() | 0; //@line 710
        $$1$i$i$i = $279; //@line 712
        $$119$i$i$i = tempRet0; //@line 712
       }
       $309 = $7 + 52 | 0; //@line 714
       if ((HEAP8[$309 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$309 >> 2] | 0); //@line 720
       }
       $314 = $7 + 40 | 0; //@line 722
       $315 = HEAP32[$314 >> 2] | 0; //@line 723
       if ($315 | 0) {
        $317 = $7 + 44 | 0; //@line 726
        $318 = HEAP32[$317 >> 2] | 0; //@line 727
        do {
         if (($318 | 0) == ($315 | 0)) {
          $329 = $315; //@line 731
         } else {
          $320 = $7 + 48 | 0; //@line 733
          $322 = $318; //@line 734
          while (1) {
           $321 = $322 + -72 | 0; //@line 736
           HEAP32[$317 >> 2] = $321; //@line 737
           __THREW__ = 0; //@line 738
           HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 739
           invoke_viii(13, $$byval_copy11 | 0, $320 | 0, $321 | 0); //@line 740
           $323 = __THREW__; //@line 741
           __THREW__ = 0; //@line 741
           if ($323 & 1) {
            label = 131; //@line 744
            break;
           }
           $322 = HEAP32[$317 >> 2] | 0; //@line 747
           if (($322 | 0) == ($315 | 0)) {
            label = 132; //@line 750
            break;
           }
          }
          if ((label | 0) == 131) {
           $327 = ___cxa_find_matching_catch_3(0) | 0; //@line 757
           ___clang_call_terminate($327); //@line 759
          } else if ((label | 0) == 132) {
           $329 = HEAP32[$314 >> 2] | 0; //@line 764
           break;
          }
         }
        } while (0);
        __ZdlPv($329); //@line 769
       }
       if ((HEAP8[$77 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$77 >> 2] | 0); //@line 776
       }
       $$2$i$i$i = $$1$i$i$i; //@line 778
       $$220$i$i$i = $$119$i$i$i; //@line 778
       break L4;
      }
     } while (0);
     if ((label | 0) == 86) {
      $223 = ___cxa_find_matching_catch_2() | 0; //@line 783
      $$0$i$i$i = $223; //@line 785
      $$018$i$i$i = tempRet0; //@line 785
     }
     $253 = $5 + 52 | 0; //@line 787
     if ((HEAP8[$253 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$253 >> 2] | 0); //@line 793
     }
     $258 = $5 + 40 | 0; //@line 795
     $259 = HEAP32[$258 >> 2] | 0; //@line 796
     if ($259 | 0) {
      $261 = $5 + 44 | 0; //@line 799
      $262 = HEAP32[$261 >> 2] | 0; //@line 800
      do {
       if (($262 | 0) == ($259 | 0)) {
        $273 = $259; //@line 804
       } else {
        $264 = $5 + 48 | 0; //@line 806
        $266 = $262; //@line 807
        while (1) {
         $265 = $266 + -72 | 0; //@line 809
         HEAP32[$261 >> 2] = $265; //@line 810
         __THREW__ = 0; //@line 811
         HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 812
         invoke_viii(13, $$byval_copy11 | 0, $264 | 0, $265 | 0); //@line 813
         $267 = __THREW__; //@line 814
         __THREW__ = 0; //@line 814
         if ($267 & 1) {
          label = 106; //@line 817
          break;
         }
         $266 = HEAP32[$261 >> 2] | 0; //@line 820
         if (($266 | 0) == ($259 | 0)) {
          label = 107; //@line 823
          break;
         }
        }
        if ((label | 0) == 106) {
         $271 = ___cxa_find_matching_catch_3(0) | 0; //@line 830
         ___clang_call_terminate($271); //@line 832
        } else if ((label | 0) == 107) {
         $273 = HEAP32[$258 >> 2] | 0; //@line 837
         break;
        }
       }
      } while (0);
      __ZdlPv($273); //@line 842
     }
     $274 = $5 + 4 | 0; //@line 844
     if ((HEAP8[$274 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$274 >> 2] | 0); //@line 850
      $$2$i$i$i = $$0$i$i$i; //@line 851
      $$220$i$i$i = $$018$i$i$i; //@line 851
     } else {
      $$2$i$i$i = $$0$i$i$i; //@line 853
      $$220$i$i$i = $$018$i$i$i; //@line 853
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    $221 = ___cxa_find_matching_catch_2() | 0; //@line 858
    $$2$i$i$i = $221; //@line 860
    $$220$i$i$i = tempRet0; //@line 860
   }
   $340 = $4 + 52 | 0; //@line 862
   if ((HEAP8[$340 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$340 >> 2] | 0); //@line 868
   }
   $345 = $4 + 40 | 0; //@line 870
   $346 = HEAP32[$345 >> 2] | 0; //@line 871
   if ($346 | 0) {
    $348 = $4 + 44 | 0; //@line 874
    $349 = HEAP32[$348 >> 2] | 0; //@line 875
    do {
     if (($349 | 0) == ($346 | 0)) {
      $360 = $346; //@line 879
     } else {
      $351 = $4 + 48 | 0; //@line 881
      $353 = $349; //@line 882
      while (1) {
       $352 = $353 + -72 | 0; //@line 884
       HEAP32[$348 >> 2] = $352; //@line 885
       __THREW__ = 0; //@line 886
       HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 887
       invoke_viii(13, $$byval_copy11 | 0, $351 | 0, $352 | 0); //@line 888
       $354 = __THREW__; //@line 889
       __THREW__ = 0; //@line 889
       if ($354 & 1) {
        label = 147; //@line 892
        break;
       }
       $353 = HEAP32[$348 >> 2] | 0; //@line 895
       if (($353 | 0) == ($346 | 0)) {
        label = 148; //@line 898
        break;
       }
      }
      if ((label | 0) == 147) {
       $358 = ___cxa_find_matching_catch_3(0) | 0; //@line 905
       ___clang_call_terminate($358); //@line 907
      } else if ((label | 0) == 148) {
       $360 = HEAP32[$345 >> 2] | 0; //@line 912
       break;
      }
     }
    } while (0);
    __ZdlPv($360); //@line 917
   }
   $361 = $4 + 4 | 0; //@line 919
   if ((HEAP8[$361 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$361 >> 2] | 0); //@line 925
    $$3$i$i$i = $$2$i$i$i; //@line 926
    $$321$i$i$i = $$220$i$i$i; //@line 926
   } else {
    $$3$i$i$i = $$2$i$i$i; //@line 928
    $$321$i$i$i = $$220$i$i$i; //@line 928
   }
  }
 }
 if ((label | 0) == 84) {
  $219 = ___cxa_find_matching_catch_2() | 0; //@line 933
  $$3$i$i$i = $219; //@line 935
  $$321$i$i$i = tempRet0; //@line 935
 }
 $366 = $3 + 52 | 0; //@line 937
 if ((HEAP8[$366 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$366 >> 2] | 0); //@line 943
 }
 $371 = $3 + 40 | 0; //@line 945
 $372 = HEAP32[$371 >> 2] | 0; //@line 946
 if ($372 | 0) {
  $374 = $3 + 44 | 0; //@line 949
  $375 = HEAP32[$374 >> 2] | 0; //@line 950
  do {
   if (($375 | 0) == ($372 | 0)) {
    $386 = $372; //@line 954
   } else {
    $377 = $3 + 48 | 0; //@line 956
    $379 = $375; //@line 957
    while (1) {
     $378 = $379 + -72 | 0; //@line 959
     HEAP32[$374 >> 2] = $378; //@line 960
     __THREW__ = 0; //@line 961
     HEAP8[$$byval_copy11 >> 0] = HEAP8[$2 >> 0] | 0; //@line 962
     invoke_viii(13, $$byval_copy11 | 0, $377 | 0, $378 | 0); //@line 963
     $380 = __THREW__; //@line 964
     __THREW__ = 0; //@line 964
     if ($380 & 1) {
      label = 159; //@line 967
      break;
     }
     $379 = HEAP32[$374 >> 2] | 0; //@line 970
     if (($379 | 0) == ($372 | 0)) {
      label = 160; //@line 973
      break;
     }
    }
    if ((label | 0) == 159) {
     $384 = ___cxa_find_matching_catch_3(0) | 0; //@line 980
     ___clang_call_terminate($384); //@line 982
    } else if ((label | 0) == 160) {
     $386 = HEAP32[$371 >> 2] | 0; //@line 987
     break;
    }
   }
  } while (0);
  __ZdlPv($386); //@line 992
 }
 $387 = $3 + 4 | 0; //@line 994
 if ((HEAP8[$387 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$3$i$i$i | 0); //@line 999
 }
 __ZdlPv(HEAP32[$387 >> 2] | 0); //@line 1003
 ___resumeException($$3$i$i$i | 0); //@line 1004
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$06$i$i$i = 0, $$1$i$i$i = 0, $$17$i$i$i = 0, $$2$i$i$i = 0, $$28$i$i$i = 0, $$byval_copy12 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$val = 0, $109 = 0, $11 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $125 = 0, $126 = 0, $129 = 0, $131 = 0, $138 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $149 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $169 = 0, $17 = 0, $171 = 0, $176 = 0, $177 = 0, $179 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $191 = 0, $192 = 0, $197 = 0, $2 = 0, $202 = 0, $203 = 0, $205 = 0, $206 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $215 = 0, $217 = 0, $218 = 0, $223 = 0, $228 = 0, $229 = 0, $23 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $241 = 0, $243 = 0, $244 = 0, $249 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $267 = 0, $269 = 0, $270 = 0, $275 = 0, $276 = 0, $277 = 0, $282 = 0, $283 = 0, $285 = 0, $286 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $295 = 0, $297 = 0, $298 = 0, $3 = 0, $303 = 0, $308 = 0, $309 = 0, $31 = 0, $311 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $321 = 0, $323 = 0, $324 = 0, $329 = 0, $334 = 0, $335 = 0, $337 = 0, $338 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $347 = 0, $349 = 0, $35 = 0, $350 = 0, $355 = 0, $360 = 0, $361 = 0, $363 = 0, $364 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $373 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $82 = 0, $84 = 0, $85 = 0, $9 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12184
 STACKTOP = STACKTOP + 384 | 0; //@line 12185
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(384); //@line 12185
 $$byval_copy12 = sp + 380 | 0; //@line 12186
 $$byval_copy3 = sp + 376 | 0; //@line 12187
 $$byval_copy2 = sp + 372 | 0; //@line 12188
 $2 = sp + 288 | 0; //@line 12189
 $3 = sp + 216 | 0; //@line 12190
 $4 = sp + 144 | 0; //@line 12191
 $5 = sp + 72 | 0; //@line 12192
 $6 = sp + 368 | 0; //@line 12193
 $7 = sp + 364 | 0; //@line 12194
 $8 = sp + 360 | 0; //@line 12195
 $9 = sp; //@line 12196
 $$val = HEAP32[$1 >> 2] | 0; //@line 12197
 __ZN5Stack3popEv($2, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 12199
 __THREW__ = 0; //@line 12200
 $11 = invoke_ii(143, $$val | 0) | 0; //@line 12201
 $12 = __THREW__; //@line 12202
 __THREW__ = 0; //@line 12202
 if ($12 & 1) {
  label = 22; //@line 12205
 } else {
  __THREW__ = 0; //@line 12207
  invoke_vii(131, $3 | 0, $11 | 0); //@line 12208
  $14 = __THREW__; //@line 12209
  __THREW__ = 0; //@line 12209
  if ($14 & 1) {
   label = 22; //@line 12212
  } else {
   __THREW__ = 0; //@line 12214
   $16 = invoke_ii(143, $$val | 0) | 0; //@line 12215
   $17 = __THREW__; //@line 12216
   __THREW__ = 0; //@line 12216
   if ($17 & 1) {
    label = 23; //@line 12219
   } else {
    __THREW__ = 0; //@line 12221
    invoke_vii(131, $4 | 0, $16 | 0); //@line 12222
    $19 = __THREW__; //@line 12223
    __THREW__ = 0; //@line 12223
    if ($19 & 1) {
     label = 23; //@line 12226
    } else {
     __THREW__ = 0; //@line 12228
     invoke_vii(120, $5 | 0, $2 | 0); //@line 12229
     $21 = __THREW__; //@line 12230
     __THREW__ = 0; //@line 12230
     L7 : do {
      if ($21 & 1) {
       label = 24; //@line 12234
      } else {
       __THREW__ = 0; //@line 12236
       $23 = invoke_ii(144, $5 | 0) | 0; //@line 12237
       $24 = __THREW__; //@line 12238
       __THREW__ = 0; //@line 12238
       if ($24 & 1) {
        $62 = ___cxa_find_matching_catch_2() | 0; //@line 12241
        $63 = tempRet0; //@line 12242
        $64 = $5 + 52 | 0; //@line 12243
        if ((HEAP8[$64 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$64 >> 2] | 0); //@line 12249
        }
        $69 = $5 + 40 | 0; //@line 12251
        $70 = HEAP32[$69 >> 2] | 0; //@line 12252
        if ($70 | 0) {
         $72 = $5 + 44 | 0; //@line 12255
         $73 = HEAP32[$72 >> 2] | 0; //@line 12256
         do {
          if (($73 | 0) == ($70 | 0)) {
           $84 = $70; //@line 12260
          } else {
           $75 = $5 + 48 | 0; //@line 12262
           $77 = $73; //@line 12263
           while (1) {
            $76 = $77 + -72 | 0; //@line 12265
            HEAP32[$72 >> 2] = $76; //@line 12266
            __THREW__ = 0; //@line 12267
            HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12268
            invoke_viii(13, $$byval_copy12 | 0, $75 | 0, $76 | 0); //@line 12269
            $78 = __THREW__; //@line 12270
            __THREW__ = 0; //@line 12270
            if ($78 & 1) {
             label = 32; //@line 12273
             break;
            }
            $77 = HEAP32[$72 >> 2] | 0; //@line 12276
            if (($77 | 0) == ($70 | 0)) {
             label = 33; //@line 12279
             break;
            }
           }
           if ((label | 0) == 32) {
            $82 = ___cxa_find_matching_catch_3(0) | 0; //@line 12286
            ___clang_call_terminate($82); //@line 12288
           } else if ((label | 0) == 33) {
            $84 = HEAP32[$69 >> 2] | 0; //@line 12293
            break;
           }
          }
         } while (0);
         __ZdlPv($84); //@line 12298
        }
        $85 = $5 + 4 | 0; //@line 12300
        if ((HEAP8[$85 + 11 >> 0] | 0) >= 0) {
         $$0$i$i$i = $62; //@line 12305
         $$06$i$i$i = $63; //@line 12305
         break;
        }
        __ZdlPv(HEAP32[$85 >> 2] | 0); //@line 12309
        $$0$i$i$i = $62; //@line 12310
        $$06$i$i$i = $63; //@line 12310
        break;
       }
       $26 = $5 + 52 | 0; //@line 12313
       if ((HEAP8[$26 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$26 >> 2] | 0); //@line 12319
       }
       $31 = $5 + 40 | 0; //@line 12321
       $32 = HEAP32[$31 >> 2] | 0; //@line 12322
       if ($32 | 0) {
        $34 = $5 + 44 | 0; //@line 12325
        $35 = HEAP32[$34 >> 2] | 0; //@line 12326
        do {
         if (($35 | 0) == ($32 | 0)) {
          $46 = $32; //@line 12330
         } else {
          $37 = $5 + 48 | 0; //@line 12332
          $39 = $35; //@line 12333
          while (1) {
           $38 = $39 + -72 | 0; //@line 12335
           HEAP32[$34 >> 2] = $38; //@line 12336
           __THREW__ = 0; //@line 12337
           HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12338
           invoke_viii(13, $$byval_copy12 | 0, $37 | 0, $38 | 0); //@line 12339
           $40 = __THREW__; //@line 12340
           __THREW__ = 0; //@line 12340
           if ($40 & 1) {
            label = 14; //@line 12343
            break;
           }
           $39 = HEAP32[$34 >> 2] | 0; //@line 12346
           if (($39 | 0) == ($32 | 0)) {
            label = 15; //@line 12349
            break;
           }
          }
          if ((label | 0) == 14) {
           $44 = ___cxa_find_matching_catch_3(0) | 0; //@line 12356
           ___clang_call_terminate($44); //@line 12358
          } else if ((label | 0) == 15) {
           $46 = HEAP32[$31 >> 2] | 0; //@line 12363
           break;
          }
         }
        } while (0);
        __ZdlPv($46); //@line 12368
       }
       $47 = $5 + 4 | 0; //@line 12370
       if ((HEAP8[$47 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$47 >> 2] | 0); //@line 12376
       }
       if (!$23) {
        $52 = ___cxa_allocate_exception(8) | 0; //@line 12379
        __THREW__ = 0; //@line 12380
        invoke_vii(125, $52 | 0, 18437); //@line 12381
        $53 = __THREW__; //@line 12382
        __THREW__ = 0; //@line 12382
        if ($53 & 1) {
         $90 = ___cxa_find_matching_catch_2() | 0; //@line 12385
         $91 = tempRet0; //@line 12386
         ___cxa_free_exception($52 | 0); //@line 12387
         $$0$i$i$i = $90; //@line 12388
         $$06$i$i$i = $91; //@line 12388
         break;
        } else {
         __THREW__ = 0; //@line 12391
         invoke_viii(16, $52 | 0, 2824, 242); //@line 12392
         __THREW__ = 0; //@line 12393
         label = 24; //@line 12394
         break;
        }
       }
       L52 : do {
        switch (HEAP32[$4 >> 2] | 0) {
        case 1:
         {
          if ((HEAP32[$3 >> 2] | 0) == 1) {
           $95 = $4 + 40 | 0; //@line 12405
           $96 = HEAP32[$95 >> 2] | 0; //@line 12406
           $98 = $2 + 24 | 0; //@line 12408
           $109 = ___remdi3(HEAP32[$98 >> 2] | 0, HEAP32[$98 + 4 >> 2] | 0, ((HEAP32[$4 + 44 >> 2] | 0) - $96 | 0) / 72 | 0 | 0, 0) | 0; //@line 12419
           HEAP32[$6 >> 2] = $96 + ($109 * 72 | 0); //@line 12423
           HEAP32[$7 >> 2] = HEAP32[$3 + 40 >> 2]; //@line 12426
           HEAP32[$8 >> 2] = HEAP32[$3 + 44 >> 2]; //@line 12429
           __THREW__ = 0; //@line 12430
           HEAP32[$$byval_copy2 >> 2] = HEAP32[$6 >> 2]; //@line 12431
           HEAP32[$$byval_copy3 >> 2] = HEAP32[$7 >> 2]; //@line 12432
           HEAP32[$$byval_copy12 >> 2] = HEAP32[$8 >> 2]; //@line 12433
           invoke_iiiii(6, $95 | 0, $$byval_copy2 | 0, $$byval_copy3 | 0, $$byval_copy12 | 0) | 0; //@line 12434
           $117 = __THREW__; //@line 12435
           __THREW__ = 0; //@line 12435
           if (!($117 & 1)) {
            break L52;
           }
           $119 = ___cxa_find_matching_catch_2() | 0; //@line 12440
           $$0$i$i$i = $119; //@line 12442
           $$06$i$i$i = tempRet0; //@line 12442
           break L7;
          }
          $121 = ___cxa_allocate_exception(8) | 0; //@line 12445
          __THREW__ = 0; //@line 12446
          invoke_vii(125, $121 | 0, 18475); //@line 12447
          $122 = __THREW__; //@line 12448
          __THREW__ = 0; //@line 12448
          if ($122 & 1) {
           $125 = ___cxa_find_matching_catch_2() | 0; //@line 12451
           $126 = tempRet0; //@line 12452
           ___cxa_free_exception($121 | 0); //@line 12453
           $$0$i$i$i = $125; //@line 12454
           $$06$i$i$i = $126; //@line 12454
           break L7;
          } else {
           __THREW__ = 0; //@line 12457
           invoke_viii(16, $121 | 0, 2824, 242); //@line 12458
           __THREW__ = 0; //@line 12459
           label = 24; //@line 12460
           break L7;
          }
          break;
         }
        case 3:
         {
          if ((HEAP32[$3 >> 2] | 0) == 3) {
           $129 = $4 + 4 | 0; //@line 12469
           $131 = $2 + 24 | 0; //@line 12471
           $138 = HEAP8[$129 + 11 >> 0] | 0; //@line 12478
           $144 = ___remdi3(HEAP32[$131 >> 2] | 0, HEAP32[$131 + 4 >> 2] | 0, ($138 << 24 >> 24 < 0 ? HEAP32[$4 + 8 >> 2] | 0 : $138 & 255) | 0, 0) | 0; //@line 12484
           $146 = $3 + 4 | 0; //@line 12486
           $148 = HEAP8[$146 + 11 >> 0] | 0; //@line 12488
           $149 = $148 << 24 >> 24 < 0; //@line 12489
           __THREW__ = 0; //@line 12496
           invoke_iiiii(7, $129 | 0, $144 | 0, ($149 ? HEAP32[$146 >> 2] | 0 : $146) | 0, ($149 ? HEAP32[$3 + 8 >> 2] | 0 : $148 & 255) | 0) | 0; //@line 12497
           $156 = __THREW__; //@line 12498
           __THREW__ = 0; //@line 12498
           if ($156 & 1) {
            label = 24; //@line 12501
            break L7;
           } else {
            break L52;
           }
          }
          $158 = ___cxa_allocate_exception(8) | 0; //@line 12507
          __THREW__ = 0; //@line 12508
          invoke_vii(125, $158 | 0, 18521); //@line 12509
          $159 = __THREW__; //@line 12510
          __THREW__ = 0; //@line 12510
          if ($159 & 1) {
           $162 = ___cxa_find_matching_catch_2() | 0; //@line 12513
           $163 = tempRet0; //@line 12514
           ___cxa_free_exception($158 | 0); //@line 12515
           $$0$i$i$i = $162; //@line 12516
           $$06$i$i$i = $163; //@line 12516
           break L7;
          } else {
           __THREW__ = 0; //@line 12519
           invoke_viii(16, $158 | 0, 2824, 242); //@line 12520
           __THREW__ = 0; //@line 12521
           label = 24; //@line 12522
           break L7;
          }
          break;
         }
        default:
         {}
        }
       } while (0);
       __THREW__ = 0; //@line 12531
       $164 = invoke_ii(143, $$val | 0) | 0; //@line 12532
       $165 = __THREW__; //@line 12533
       __THREW__ = 0; //@line 12533
       if ($165 & 1) {
        label = 24; //@line 12536
       } else {
        __THREW__ = 0; //@line 12538
        invoke_vii(120, $9 | 0, $4 | 0); //@line 12539
        $167 = __THREW__; //@line 12540
        __THREW__ = 0; //@line 12540
        if ($167 & 1) {
         label = 24; //@line 12543
        } else {
         __THREW__ = 0; //@line 12545
         invoke_vii(128, $164 | 0, $9 | 0); //@line 12546
         $169 = __THREW__; //@line 12547
         __THREW__ = 0; //@line 12547
         if ($169 & 1) {
          $275 = ___cxa_find_matching_catch_2() | 0; //@line 12550
          $276 = tempRet0; //@line 12551
          $277 = $9 + 52 | 0; //@line 12552
          if ((HEAP8[$277 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$277 >> 2] | 0); //@line 12558
          }
          $282 = $9 + 40 | 0; //@line 12560
          $283 = HEAP32[$282 >> 2] | 0; //@line 12561
          if ($283 | 0) {
           $285 = $9 + 44 | 0; //@line 12564
           $286 = HEAP32[$285 >> 2] | 0; //@line 12565
           do {
            if (($286 | 0) == ($283 | 0)) {
             $297 = $283; //@line 12569
            } else {
             $288 = $9 + 48 | 0; //@line 12571
             $290 = $286; //@line 12572
             while (1) {
              $289 = $290 + -72 | 0; //@line 12574
              HEAP32[$285 >> 2] = $289; //@line 12575
              __THREW__ = 0; //@line 12576
              HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12577
              invoke_viii(13, $$byval_copy12 | 0, $288 | 0, $289 | 0); //@line 12578
              $291 = __THREW__; //@line 12579
              __THREW__ = 0; //@line 12579
              if ($291 & 1) {
               label = 108; //@line 12582
               break;
              }
              $290 = HEAP32[$285 >> 2] | 0; //@line 12585
              if (($290 | 0) == ($283 | 0)) {
               label = 109; //@line 12588
               break;
              }
             }
             if ((label | 0) == 108) {
              $295 = ___cxa_find_matching_catch_3(0) | 0; //@line 12595
              ___clang_call_terminate($295); //@line 12597
             } else if ((label | 0) == 109) {
              $297 = HEAP32[$282 >> 2] | 0; //@line 12602
              break;
             }
            }
           } while (0);
           __ZdlPv($297); //@line 12607
          }
          $298 = $9 + 4 | 0; //@line 12609
          if ((HEAP8[$298 + 11 >> 0] | 0) >= 0) {
           $$0$i$i$i = $275; //@line 12614
           $$06$i$i$i = $276; //@line 12614
           break;
          }
          __ZdlPv(HEAP32[$298 >> 2] | 0); //@line 12618
          $$0$i$i$i = $275; //@line 12619
          $$06$i$i$i = $276; //@line 12619
          break;
         }
         $171 = $9 + 52 | 0; //@line 12622
         if ((HEAP8[$171 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$171 >> 2] | 0); //@line 12628
         }
         $176 = $9 + 40 | 0; //@line 12630
         $177 = HEAP32[$176 >> 2] | 0; //@line 12631
         if ($177 | 0) {
          $179 = $9 + 44 | 0; //@line 12634
          $180 = HEAP32[$179 >> 2] | 0; //@line 12635
          do {
           if (($180 | 0) == ($177 | 0)) {
            $191 = $177; //@line 12639
           } else {
            $182 = $9 + 48 | 0; //@line 12641
            $184 = $180; //@line 12642
            while (1) {
             $183 = $184 + -72 | 0; //@line 12644
             HEAP32[$179 >> 2] = $183; //@line 12645
             __THREW__ = 0; //@line 12646
             HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12647
             invoke_viii(13, $$byval_copy12 | 0, $182 | 0, $183 | 0); //@line 12648
             $185 = __THREW__; //@line 12649
             __THREW__ = 0; //@line 12649
             if ($185 & 1) {
              label = 60; //@line 12652
              break;
             }
             $184 = HEAP32[$179 >> 2] | 0; //@line 12655
             if (($184 | 0) == ($177 | 0)) {
              label = 61; //@line 12658
              break;
             }
            }
            if ((label | 0) == 60) {
             $189 = ___cxa_find_matching_catch_3(0) | 0; //@line 12665
             ___clang_call_terminate($189); //@line 12667
            } else if ((label | 0) == 61) {
             $191 = HEAP32[$176 >> 2] | 0; //@line 12672
             break;
            }
           }
          } while (0);
          __ZdlPv($191); //@line 12677
         }
         $192 = $9 + 4 | 0; //@line 12679
         if ((HEAP8[$192 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$192 >> 2] | 0); //@line 12685
         }
         $197 = $4 + 52 | 0; //@line 12687
         if ((HEAP8[$197 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$197 >> 2] | 0); //@line 12693
         }
         $202 = $4 + 40 | 0; //@line 12695
         $203 = HEAP32[$202 >> 2] | 0; //@line 12696
         if ($203 | 0) {
          $205 = $4 + 44 | 0; //@line 12699
          $206 = HEAP32[$205 >> 2] | 0; //@line 12700
          do {
           if (($206 | 0) == ($203 | 0)) {
            $217 = $203; //@line 12704
           } else {
            $208 = $4 + 48 | 0; //@line 12706
            $210 = $206; //@line 12707
            while (1) {
             $209 = $210 + -72 | 0; //@line 12709
             HEAP32[$205 >> 2] = $209; //@line 12710
             __THREW__ = 0; //@line 12711
             HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12712
             invoke_viii(13, $$byval_copy12 | 0, $208 | 0, $209 | 0); //@line 12713
             $211 = __THREW__; //@line 12714
             __THREW__ = 0; //@line 12714
             if ($211 & 1) {
              label = 72; //@line 12717
              break;
             }
             $210 = HEAP32[$205 >> 2] | 0; //@line 12720
             if (($210 | 0) == ($203 | 0)) {
              label = 73; //@line 12723
              break;
             }
            }
            if ((label | 0) == 72) {
             $215 = ___cxa_find_matching_catch_3(0) | 0; //@line 12730
             ___clang_call_terminate($215); //@line 12732
            } else if ((label | 0) == 73) {
             $217 = HEAP32[$202 >> 2] | 0; //@line 12737
             break;
            }
           }
          } while (0);
          __ZdlPv($217); //@line 12742
         }
         $218 = $4 + 4 | 0; //@line 12744
         if ((HEAP8[$218 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$218 >> 2] | 0); //@line 12750
         }
         $223 = $3 + 52 | 0; //@line 12752
         if ((HEAP8[$223 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$223 >> 2] | 0); //@line 12758
         }
         $228 = $3 + 40 | 0; //@line 12760
         $229 = HEAP32[$228 >> 2] | 0; //@line 12761
         if ($229 | 0) {
          $231 = $3 + 44 | 0; //@line 12764
          $232 = HEAP32[$231 >> 2] | 0; //@line 12765
          do {
           if (($232 | 0) == ($229 | 0)) {
            $243 = $229; //@line 12769
           } else {
            $234 = $3 + 48 | 0; //@line 12771
            $236 = $232; //@line 12772
            while (1) {
             $235 = $236 + -72 | 0; //@line 12774
             HEAP32[$231 >> 2] = $235; //@line 12775
             __THREW__ = 0; //@line 12776
             HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12777
             invoke_viii(13, $$byval_copy12 | 0, $234 | 0, $235 | 0); //@line 12778
             $237 = __THREW__; //@line 12779
             __THREW__ = 0; //@line 12779
             if ($237 & 1) {
              label = 84; //@line 12782
              break;
             }
             $236 = HEAP32[$231 >> 2] | 0; //@line 12785
             if (($236 | 0) == ($229 | 0)) {
              label = 85; //@line 12788
              break;
             }
            }
            if ((label | 0) == 84) {
             $241 = ___cxa_find_matching_catch_3(0) | 0; //@line 12795
             ___clang_call_terminate($241); //@line 12797
            } else if ((label | 0) == 85) {
             $243 = HEAP32[$228 >> 2] | 0; //@line 12802
             break;
            }
           }
          } while (0);
          __ZdlPv($243); //@line 12807
         }
         $244 = $3 + 4 | 0; //@line 12809
         if ((HEAP8[$244 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$244 >> 2] | 0); //@line 12815
         }
         $249 = $2 + 52 | 0; //@line 12817
         if ((HEAP8[$249 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$249 >> 2] | 0); //@line 12823
         }
         $254 = $2 + 40 | 0; //@line 12825
         $255 = HEAP32[$254 >> 2] | 0; //@line 12826
         if ($255 | 0) {
          $257 = $2 + 44 | 0; //@line 12829
          $258 = HEAP32[$257 >> 2] | 0; //@line 12830
          do {
           if (($258 | 0) == ($255 | 0)) {
            $269 = $255; //@line 12834
           } else {
            $260 = $2 + 48 | 0; //@line 12836
            $262 = $258; //@line 12837
            while (1) {
             $261 = $262 + -72 | 0; //@line 12839
             HEAP32[$257 >> 2] = $261; //@line 12840
             __THREW__ = 0; //@line 12841
             HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12842
             invoke_viii(13, $$byval_copy12 | 0, $260 | 0, $261 | 0); //@line 12843
             $263 = __THREW__; //@line 12844
             __THREW__ = 0; //@line 12844
             if ($263 & 1) {
              label = 96; //@line 12847
              break;
             }
             $262 = HEAP32[$257 >> 2] | 0; //@line 12850
             if (($262 | 0) == ($255 | 0)) {
              label = 97; //@line 12853
              break;
             }
            }
            if ((label | 0) == 96) {
             $267 = ___cxa_find_matching_catch_3(0) | 0; //@line 12860
             ___clang_call_terminate($267); //@line 12862
            } else if ((label | 0) == 97) {
             $269 = HEAP32[$254 >> 2] | 0; //@line 12867
             break;
            }
           }
          } while (0);
          __ZdlPv($269); //@line 12872
         }
         $270 = $2 + 4 | 0; //@line 12874
         if ((HEAP8[$270 + 11 >> 0] | 0) >= 0) {
          STACKTOP = sp; //@line 12879
          return;
         }
         __ZdlPv(HEAP32[$270 >> 2] | 0); //@line 12882
         STACKTOP = sp; //@line 12883
         return;
        }
       }
      }
     } while (0);
     if ((label | 0) == 24) {
      $60 = ___cxa_find_matching_catch_2() | 0; //@line 12889
      $$0$i$i$i = $60; //@line 12891
      $$06$i$i$i = tempRet0; //@line 12891
     }
     $303 = $4 + 52 | 0; //@line 12893
     if ((HEAP8[$303 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$303 >> 2] | 0); //@line 12899
     }
     $308 = $4 + 40 | 0; //@line 12901
     $309 = HEAP32[$308 >> 2] | 0; //@line 12902
     if ($309 | 0) {
      $311 = $4 + 44 | 0; //@line 12905
      $312 = HEAP32[$311 >> 2] | 0; //@line 12906
      do {
       if (($312 | 0) == ($309 | 0)) {
        $323 = $309; //@line 12910
       } else {
        $314 = $4 + 48 | 0; //@line 12912
        $316 = $312; //@line 12913
        while (1) {
         $315 = $316 + -72 | 0; //@line 12915
         HEAP32[$311 >> 2] = $315; //@line 12916
         __THREW__ = 0; //@line 12917
         HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12918
         invoke_viii(13, $$byval_copy12 | 0, $314 | 0, $315 | 0); //@line 12919
         $317 = __THREW__; //@line 12920
         __THREW__ = 0; //@line 12920
         if ($317 & 1) {
          label = 120; //@line 12923
          break;
         }
         $316 = HEAP32[$311 >> 2] | 0; //@line 12926
         if (($316 | 0) == ($309 | 0)) {
          label = 121; //@line 12929
          break;
         }
        }
        if ((label | 0) == 120) {
         $321 = ___cxa_find_matching_catch_3(0) | 0; //@line 12936
         ___clang_call_terminate($321); //@line 12938
        } else if ((label | 0) == 121) {
         $323 = HEAP32[$308 >> 2] | 0; //@line 12943
         break;
        }
       }
      } while (0);
      __ZdlPv($323); //@line 12948
     }
     $324 = $4 + 4 | 0; //@line 12950
     if ((HEAP8[$324 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$324 >> 2] | 0); //@line 12956
      $$1$i$i$i = $$0$i$i$i; //@line 12957
      $$17$i$i$i = $$06$i$i$i; //@line 12957
     } else {
      $$1$i$i$i = $$0$i$i$i; //@line 12959
      $$17$i$i$i = $$06$i$i$i; //@line 12959
     }
    }
   }
   if ((label | 0) == 23) {
    $58 = ___cxa_find_matching_catch_2() | 0; //@line 12964
    $$1$i$i$i = $58; //@line 12966
    $$17$i$i$i = tempRet0; //@line 12966
   }
   $329 = $3 + 52 | 0; //@line 12968
   if ((HEAP8[$329 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$329 >> 2] | 0); //@line 12974
   }
   $334 = $3 + 40 | 0; //@line 12976
   $335 = HEAP32[$334 >> 2] | 0; //@line 12977
   if ($335 | 0) {
    $337 = $3 + 44 | 0; //@line 12980
    $338 = HEAP32[$337 >> 2] | 0; //@line 12981
    do {
     if (($338 | 0) == ($335 | 0)) {
      $349 = $335; //@line 12985
     } else {
      $340 = $3 + 48 | 0; //@line 12987
      $342 = $338; //@line 12988
      while (1) {
       $341 = $342 + -72 | 0; //@line 12990
       HEAP32[$337 >> 2] = $341; //@line 12991
       __THREW__ = 0; //@line 12992
       HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 12993
       invoke_viii(13, $$byval_copy12 | 0, $340 | 0, $341 | 0); //@line 12994
       $343 = __THREW__; //@line 12995
       __THREW__ = 0; //@line 12995
       if ($343 & 1) {
        label = 132; //@line 12998
        break;
       }
       $342 = HEAP32[$337 >> 2] | 0; //@line 13001
       if (($342 | 0) == ($335 | 0)) {
        label = 133; //@line 13004
        break;
       }
      }
      if ((label | 0) == 132) {
       $347 = ___cxa_find_matching_catch_3(0) | 0; //@line 13011
       ___clang_call_terminate($347); //@line 13013
      } else if ((label | 0) == 133) {
       $349 = HEAP32[$334 >> 2] | 0; //@line 13018
       break;
      }
     }
    } while (0);
    __ZdlPv($349); //@line 13023
   }
   $350 = $3 + 4 | 0; //@line 13025
   if ((HEAP8[$350 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$350 >> 2] | 0); //@line 13031
    $$2$i$i$i = $$1$i$i$i; //@line 13032
    $$28$i$i$i = $$17$i$i$i; //@line 13032
   } else {
    $$2$i$i$i = $$1$i$i$i; //@line 13034
    $$28$i$i$i = $$17$i$i$i; //@line 13034
   }
  }
 }
 if ((label | 0) == 22) {
  $56 = ___cxa_find_matching_catch_2() | 0; //@line 13039
  $$2$i$i$i = $56; //@line 13041
  $$28$i$i$i = tempRet0; //@line 13041
 }
 $355 = $2 + 52 | 0; //@line 13043
 if ((HEAP8[$355 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$355 >> 2] | 0); //@line 13049
 }
 $360 = $2 + 40 | 0; //@line 13051
 $361 = HEAP32[$360 >> 2] | 0; //@line 13052
 if ($361 | 0) {
  $363 = $2 + 44 | 0; //@line 13055
  $364 = HEAP32[$363 >> 2] | 0; //@line 13056
  do {
   if (($364 | 0) == ($361 | 0)) {
    $375 = $361; //@line 13060
   } else {
    $366 = $2 + 48 | 0; //@line 13062
    $368 = $364; //@line 13063
    while (1) {
     $367 = $368 + -72 | 0; //@line 13065
     HEAP32[$363 >> 2] = $367; //@line 13066
     __THREW__ = 0; //@line 13067
     HEAP8[$$byval_copy12 >> 0] = HEAP8[$$byval_copy3 >> 0] | 0; //@line 13068
     invoke_viii(13, $$byval_copy12 | 0, $366 | 0, $367 | 0); //@line 13069
     $369 = __THREW__; //@line 13070
     __THREW__ = 0; //@line 13070
     if ($369 & 1) {
      label = 144; //@line 13073
      break;
     }
     $368 = HEAP32[$363 >> 2] | 0; //@line 13076
     if (($368 | 0) == ($361 | 0)) {
      label = 145; //@line 13079
      break;
     }
    }
    if ((label | 0) == 144) {
     $373 = ___cxa_find_matching_catch_3(0) | 0; //@line 13086
     ___clang_call_terminate($373); //@line 13088
    } else if ((label | 0) == 145) {
     $375 = HEAP32[$360 >> 2] | 0; //@line 13093
     break;
    }
   }
  } while (0);
  __ZdlPv($375); //@line 13098
 }
 $376 = $2 + 4 | 0; //@line 13100
 if ((HEAP8[$376 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$2$i$i$i | 0); //@line 13105
 }
 __ZdlPv(HEAP32[$376 >> 2] | 0); //@line 13109
 ___resumeException($$2$i$i$i | 0); //@line 13110
}
function __ZN6Runner14runWithContextENSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEEP13RunnerContextNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$18 = 0, $$byval_copy16 = 0, $$sroa$0114$0136 = 0, $10 = 0, $104 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $12 = 0, $120 = 0, $121 = 0, $125 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $135 = 0, $137 = 0, $14 = 0, $141 = 0, $142 = 0, $144 = 0, $146 = 0, $151 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $163 = 0, $167 = 0, $168 = 0, $17 = 0, $172 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $182 = 0, $184 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $193 = 0, $198 = 0, $20 = 0, $200 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $210 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $221 = 0, $223 = 0, $224 = 0, $225 = 0, $229 = 0, $23 = 0, $231 = 0, $235 = 0, $239 = 0, $24 = 0, $242 = 0, $244 = 0, $246 = 0, $247 = 0, $25 = 0, $252 = 0, $253 = 0, $256 = 0, $257 = 0, $259 = 0, $26 = 0, $265 = 0, $27 = 0, $275 = 0, $277 = 0, $278 = 0, $28 = 0, $285 = 0, $287 = 0, $29 = 0, $292 = 0, $294 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $304 = 0, $308 = 0, $309 = 0, $31 = 0, $313 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $323 = 0, $325 = 0, $33 = 0, $332 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $344 = 0, $35 = 0, $353 = 0, $355 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $363 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $73 = 0, $74 = 0, $79 = 0, $8 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $94 = 0, $95 = 0, $97 = 0, $99 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9712
 STACKTOP = STACKTOP + 432 | 0; //@line 9713
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(432); //@line 9713
 $$byval_copy16 = sp + 400 | 0; //@line 9714
 $4 = sp + 428 | 0; //@line 9715
 $5 = sp; //@line 9716
 $6 = sp + 388 | 0; //@line 9717
 $7 = sp + 288 | 0; //@line 9718
 $8 = sp + 216 | 0; //@line 9719
 $9 = sp + 144 | 0; //@line 9720
 $10 = sp + 360 | 0; //@line 9721
 $11 = sp + 72 | 0; //@line 9722
 $12 = HEAP32[$1 >> 2] | 0; //@line 9723
 $14 = HEAP32[$1 + 4 >> 2] | 0; //@line 9725
 if (($12 | 0) == ($14 | 0)) {
  STACKTOP = sp; //@line 9728
  return;
 }
 $16 = $3 + 11 | 0; //@line 9730
 $17 = $3 + 4 | 0; //@line 9731
 $18 = $5 + 52 | 0; //@line 9732
 $19 = $18 + 11 | 0; //@line 9733
 $20 = $5 + 40 | 0; //@line 9734
 $21 = $5 + 4 | 0; //@line 9735
 $22 = $21 + 11 | 0; //@line 9736
 $23 = $5 + 44 | 0; //@line 9737
 $24 = $5 + 48 | 0; //@line 9738
 $25 = $7 + 52 | 0; //@line 9739
 $26 = $25 + 11 | 0; //@line 9740
 $27 = $7 + 40 | 0; //@line 9741
 $28 = $7 + 4 | 0; //@line 9742
 $29 = $28 + 11 | 0; //@line 9743
 $30 = $7 + 44 | 0; //@line 9744
 $31 = $7 + 48 | 0; //@line 9745
 $32 = $8 + 52 | 0; //@line 9746
 $33 = $32 + 11 | 0; //@line 9747
 $34 = $8 + 40 | 0; //@line 9748
 $35 = $8 + 4 | 0; //@line 9749
 $36 = $35 + 11 | 0; //@line 9750
 $37 = $8 + 44 | 0; //@line 9751
 $38 = $8 + 48 | 0; //@line 9752
 $39 = $9 + 52 | 0; //@line 9753
 $40 = $39 + 11 | 0; //@line 9754
 $41 = $9 + 40 | 0; //@line 9755
 $42 = $9 + 4 | 0; //@line 9756
 $43 = $42 + 11 | 0; //@line 9757
 $44 = $9 + 44 | 0; //@line 9758
 $45 = $9 + 48 | 0; //@line 9759
 $46 = $$byval_copy16 + 12 | 0; //@line 9760
 $47 = $5 + 40 | 0; //@line 9761
 $48 = $$byval_copy16 + 24 | 0; //@line 9762
 $49 = $5 + 64 | 0; //@line 9763
 $50 = $10 + 12 | 0; //@line 9764
 $51 = $10 + 24 | 0; //@line 9765
 $52 = $0 + 104 | 0; //@line 9766
 $53 = $10 + 12 | 0; //@line 9767
 $54 = $10 + 16 | 0; //@line 9768
 $55 = $10 + 12 | 0; //@line 9769
 $56 = $10 + 11 | 0; //@line 9770
 $57 = $$byval_copy16 + 12 | 0; //@line 9771
 $58 = $$byval_copy16 + 11 | 0; //@line 9772
 $59 = $11 + 52 | 0; //@line 9773
 $60 = $59 + 11 | 0; //@line 9774
 $61 = $11 + 40 | 0; //@line 9775
 $62 = $11 + 4 | 0; //@line 9776
 $63 = $62 + 11 | 0; //@line 9777
 $64 = $11 + 44 | 0; //@line 9778
 $65 = $11 + 48 | 0; //@line 9779
 $66 = $6 + 11 | 0; //@line 9780
 $$sroa$0114$0136 = $12; //@line 9781
 L4 : while (1) {
  __ZN13CharmFunctionC2ERKS_($5, $$sroa$0114$0136); //@line 9783
  $67 = HEAP8[$16 >> 0] | 0; //@line 9784
  if (!(($67 << 24 >> 24 < 0 ? HEAP32[$17 >> 2] | 0 : $67 & 255) | 0)) {
   __THREW__ = 0; //@line 9791
   $73 = invoke_iiiiii(21, $3 | 0, 0, -1, 39514, 0) | 0; //@line 9792
   $74 = __THREW__; //@line 9793
   __THREW__ = 0; //@line 9793
   if ($74 & 1) {
    label = 6; //@line 9796
    break;
   }
   if ($73 | 0) {
    label = 8; //@line 9801
   }
  } else {
   label = 8; //@line 9804
  }
  if ((label | 0) == 8) {
   label = 0; //@line 9807
   __THREW__ = 0; //@line 9808
   invoke_vii(115, $6 | 0, $3 | 0); //@line 9809
   $79 = __THREW__; //@line 9810
   __THREW__ = 0; //@line 9810
   if ($79 & 1) {
    label = 12; //@line 9813
    break;
   }
   __THREW__ = 0; //@line 9816
   invoke_viii(19, $0 | 0, $5 | 0, $6 | 0); //@line 9817
   $81 = __THREW__; //@line 9818
   __THREW__ = 0; //@line 9818
   if ($81 & 1) {
    label = 13; //@line 9821
    break;
   }
   if ((HEAP8[$66 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 9828
   }
  }
  switch (HEAP32[$5 >> 2] | 0) {
  case 2:
   {
    __THREW__ = 0; //@line 9834
    $94 = invoke_ii(143, $0 | 0) | 0; //@line 9835
    $95 = __THREW__; //@line 9836
    __THREW__ = 0; //@line 9836
    if ($95 & 1) {
     label = 12; //@line 9839
     break L4;
    }
    __THREW__ = 0; //@line 9842
    invoke_vii(120, $7 | 0, $5 | 0); //@line 9843
    $97 = __THREW__; //@line 9844
    __THREW__ = 0; //@line 9844
    if ($97 & 1) {
     label = 12; //@line 9847
     break L4;
    }
    __THREW__ = 0; //@line 9850
    invoke_vii(128, $94 | 0, $7 | 0); //@line 9851
    $99 = __THREW__; //@line 9852
    __THREW__ = 0; //@line 9852
    if ($99 & 1) {
     label = 30; //@line 9855
     break L4;
    }
    if ((HEAP8[$26 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$25 >> 2] | 0); //@line 9862
    }
    $104 = HEAP32[$27 >> 2] | 0; //@line 9864
    if ($104 | 0) {
     $106 = HEAP32[$30 >> 2] | 0; //@line 9867
     if (($106 | 0) == ($104 | 0)) {
      $116 = $104; //@line 9870
     } else {
      $109 = $106; //@line 9872
      do {
       $108 = $109 + -72 | 0; //@line 9874
       HEAP32[$30 >> 2] = $108; //@line 9875
       __THREW__ = 0; //@line 9876
       HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 9877
       invoke_viii(13, $$byval_copy16 | 0, $31 | 0, $108 | 0); //@line 9878
       $110 = __THREW__; //@line 9879
       __THREW__ = 0; //@line 9879
       if ($110 & 1) {
        label = 25; //@line 9882
        break L4;
       }
       $109 = HEAP32[$30 >> 2] | 0; //@line 9885
      } while (($109 | 0) != ($104 | 0));
      $116 = HEAP32[$27 >> 2] | 0; //@line 9894
     }
     __ZdlPv($116); //@line 9896
    }
    if ((HEAP8[$29 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 9902
    }
    break;
   }
  case 3:
   {
    __THREW__ = 0; //@line 9907
    $141 = invoke_ii(143, $0 | 0) | 0; //@line 9908
    $142 = __THREW__; //@line 9909
    __THREW__ = 0; //@line 9909
    if ($142 & 1) {
     label = 12; //@line 9912
     break L4;
    }
    __THREW__ = 0; //@line 9915
    invoke_vii(120, $8 | 0, $5 | 0); //@line 9916
    $144 = __THREW__; //@line 9917
    __THREW__ = 0; //@line 9917
    if ($144 & 1) {
     label = 12; //@line 9920
     break L4;
    }
    __THREW__ = 0; //@line 9923
    invoke_vii(128, $141 | 0, $8 | 0); //@line 9924
    $146 = __THREW__; //@line 9925
    __THREW__ = 0; //@line 9925
    if ($146 & 1) {
     label = 56; //@line 9928
     break L4;
    }
    if ((HEAP8[$33 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$32 >> 2] | 0); //@line 9935
    }
    $151 = HEAP32[$34 >> 2] | 0; //@line 9937
    if ($151 | 0) {
     $153 = HEAP32[$37 >> 2] | 0; //@line 9940
     if (($153 | 0) == ($151 | 0)) {
      $163 = $151; //@line 9943
     } else {
      $156 = $153; //@line 9945
      do {
       $155 = $156 + -72 | 0; //@line 9947
       HEAP32[$37 >> 2] = $155; //@line 9948
       __THREW__ = 0; //@line 9949
       HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 9950
       invoke_viii(13, $$byval_copy16 | 0, $38 | 0, $155 | 0); //@line 9951
       $157 = __THREW__; //@line 9952
       __THREW__ = 0; //@line 9952
       if ($157 & 1) {
        label = 51; //@line 9955
        break L4;
       }
       $156 = HEAP32[$37 >> 2] | 0; //@line 9958
      } while (($156 | 0) != ($151 | 0));
      $163 = HEAP32[$34 >> 2] | 0; //@line 9967
     }
     __ZdlPv($163); //@line 9969
    }
    if ((HEAP8[$36 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$35 >> 2] | 0); //@line 9975
    }
    break;
   }
  case 1:
   {
    __THREW__ = 0; //@line 9980
    $188 = invoke_ii(143, $0 | 0) | 0; //@line 9981
    $189 = __THREW__; //@line 9982
    __THREW__ = 0; //@line 9982
    if ($189 & 1) {
     label = 12; //@line 9985
     break L4;
    }
    __THREW__ = 0; //@line 9988
    invoke_vii(120, $9 | 0, $5 | 0); //@line 9989
    $191 = __THREW__; //@line 9990
    __THREW__ = 0; //@line 9990
    if ($191 & 1) {
     label = 12; //@line 9993
     break L4;
    }
    __THREW__ = 0; //@line 9996
    invoke_vii(128, $188 | 0, $9 | 0); //@line 9997
    $193 = __THREW__; //@line 9998
    __THREW__ = 0; //@line 9998
    if ($193 & 1) {
     label = 82; //@line 10001
     break L4;
    }
    if ((HEAP8[$40 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$39 >> 2] | 0); //@line 10008
    }
    $198 = HEAP32[$41 >> 2] | 0; //@line 10010
    if ($198 | 0) {
     $200 = HEAP32[$44 >> 2] | 0; //@line 10013
     if (($200 | 0) == ($198 | 0)) {
      $210 = $198; //@line 10016
     } else {
      $203 = $200; //@line 10018
      do {
       $202 = $203 + -72 | 0; //@line 10020
       HEAP32[$44 >> 2] = $202; //@line 10021
       __THREW__ = 0; //@line 10022
       HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 10023
       invoke_viii(13, $$byval_copy16 | 0, $45 | 0, $202 | 0); //@line 10024
       $204 = __THREW__; //@line 10025
       __THREW__ = 0; //@line 10025
       if ($204 & 1) {
        label = 77; //@line 10028
        break L4;
       }
       $203 = HEAP32[$44 >> 2] | 0; //@line 10031
      } while (($203 | 0) != ($198 | 0));
      $210 = HEAP32[$41 >> 2] | 0; //@line 10040
     }
     __ZdlPv($210); //@line 10042
    }
    if ((HEAP8[$43 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$42 >> 2] | 0); //@line 10048
    }
    break;
   }
  case 0:
   {
    HEAP32[$$byval_copy16 >> 2] = 0; //@line 10053
    HEAP32[$$byval_copy16 + 4 >> 2] = 0; //@line 10053
    HEAP32[$$byval_copy16 + 8 >> 2] = 0; //@line 10053
    HEAP32[$$byval_copy16 + 12 >> 2] = 0; //@line 10053
    HEAP32[$$byval_copy16 + 16 >> 2] = 0; //@line 10053
    HEAP32[$$byval_copy16 + 20 >> 2] = 0; //@line 10053
    __THREW__ = 0; //@line 10054
    invoke_iii(55, $$byval_copy16 | 0, $18 | 0) | 0; //@line 10055
    $235 = __THREW__; //@line 10056
    __THREW__ = 0; //@line 10056
    if ($235 & 1) {
     label = 112; //@line 10059
     break L4;
    }
    __THREW__ = 0; //@line 10064
    invoke_viii(15, $46 | 0, HEAP32[$47 >> 2] | 0, HEAP32[$23 >> 2] | 0); //@line 10065
    $239 = __THREW__; //@line 10066
    __THREW__ = 0; //@line 10066
    if ($239 & 1) {
     label = 112; //@line 10069
     break L4;
    }
    HEAP16[$48 >> 1] = HEAP16[$49 >> 1] | 0; //@line 10073
    __THREW__ = 0; //@line 10074
    invoke_vii(115, $10 | 0, $$byval_copy16 | 0); //@line 10075
    $242 = __THREW__; //@line 10076
    __THREW__ = 0; //@line 10076
    if ($242 & 1) {
     label = 112; //@line 10079
     break L4;
    }
    __THREW__ = 0; //@line 10082
    invoke_vii(118, $50 | 0, $46 | 0); //@line 10083
    $244 = __THREW__; //@line 10084
    __THREW__ = 0; //@line 10084
    if ($244 & 1) {
     label = 98; //@line 10087
     break L4;
    }
    HEAP16[$51 >> 1] = HEAP16[$48 >> 1] | 0; //@line 10091
    __THREW__ = 0; //@line 10092
    $252 = invoke_iii(60, $52 | 0, $10 | 0) | 0; //@line 10093
    $253 = __THREW__; //@line 10094
    __THREW__ = 0; //@line 10094
    if ($253 & 1) {
     label = 114; //@line 10097
     break L4;
    }
    if (!$252) {
     __THREW__ = 0; //@line 10102
     $256 = invoke_iii(61, $52 | 0, $10 | 0) | 0; //@line 10103
     $257 = __THREW__; //@line 10104
     __THREW__ = 0; //@line 10104
     if ($257 & 1) {
      label = 114; //@line 10107
      break L4;
     }
     __THREW__ = 0; //@line 10110
     invoke_iii(55, $256 | 0, $10 | 0) | 0; //@line 10111
     $259 = __THREW__; //@line 10112
     __THREW__ = 0; //@line 10112
     if ($259 & 1) {
      label = 114; //@line 10115
      break L4;
     }
     if (($256 | 0) != ($10 | 0)) {
      __THREW__ = 0; //@line 10123
      invoke_viii(15, $256 + 12 | 0, HEAP32[$53 >> 2] | 0, HEAP32[$54 >> 2] | 0); //@line 10124
      $265 = __THREW__; //@line 10125
      __THREW__ = 0; //@line 10125
      if ($265 & 1) {
       label = 114; //@line 10128
       break L4;
      }
     }
     HEAP16[$256 + 24 >> 1] = HEAP16[$51 >> 1] | 0; //@line 10134
    }
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($55); //@line 10136
    if ((HEAP8[$56 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$10 >> 2] | 0); //@line 10141
    }
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($57); //@line 10143
    if ((HEAP8[$58 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$$byval_copy16 >> 2] | 0); //@line 10148
    }
    break;
   }
  case 4:
   {
    __THREW__ = 0; //@line 10153
    invoke_vii(120, $11 | 0, $5 | 0); //@line 10154
    $285 = __THREW__; //@line 10155
    __THREW__ = 0; //@line 10155
    if ($285 & 1) {
     label = 12; //@line 10158
     break L4;
    }
    __THREW__ = 0; //@line 10161
    invoke_viii(20, $0 | 0, $11 | 0, $2 | 0); //@line 10162
    $287 = __THREW__; //@line 10163
    __THREW__ = 0; //@line 10163
    if ($287 & 1) {
     label = 132; //@line 10166
     break L4;
    }
    if ((HEAP8[$60 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$59 >> 2] | 0); //@line 10173
    }
    $292 = HEAP32[$61 >> 2] | 0; //@line 10175
    if ($292 | 0) {
     $294 = HEAP32[$64 >> 2] | 0; //@line 10178
     if (($294 | 0) == ($292 | 0)) {
      $304 = $292; //@line 10181
     } else {
      $297 = $294; //@line 10183
      do {
       $296 = $297 + -72 | 0; //@line 10185
       HEAP32[$64 >> 2] = $296; //@line 10186
       __THREW__ = 0; //@line 10187
       HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 10188
       invoke_viii(13, $$byval_copy16 | 0, $65 | 0, $296 | 0); //@line 10189
       $298 = __THREW__; //@line 10190
       __THREW__ = 0; //@line 10190
       if ($298 & 1) {
        label = 127; //@line 10193
        break L4;
       }
       $297 = HEAP32[$64 >> 2] | 0; //@line 10196
      } while (($297 | 0) != ($292 | 0));
      $304 = HEAP32[$61 >> 2] | 0; //@line 10205
     }
     __ZdlPv($304); //@line 10207
    }
    if ((HEAP8[$63 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$62 >> 2] | 0); //@line 10213
    }
    break;
   }
  default:
   {}
  }
  if ((HEAP8[$19 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 10224
  }
  $332 = HEAP32[$20 >> 2] | 0; //@line 10226
  if ($332 | 0) {
   $334 = HEAP32[$23 >> 2] | 0; //@line 10229
   if (($334 | 0) == ($332 | 0)) {
    $344 = $332; //@line 10232
   } else {
    $337 = $334; //@line 10234
    do {
     $336 = $337 + -72 | 0; //@line 10236
     HEAP32[$23 >> 2] = $336; //@line 10237
     __THREW__ = 0; //@line 10238
     HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 10239
     invoke_viii(13, $$byval_copy16 | 0, $24 | 0, $336 | 0); //@line 10240
     $338 = __THREW__; //@line 10241
     __THREW__ = 0; //@line 10241
     if ($338 & 1) {
      label = 150; //@line 10244
      break L4;
     }
     $337 = HEAP32[$23 >> 2] | 0; //@line 10247
    } while (($337 | 0) != ($332 | 0));
    $344 = HEAP32[$20 >> 2] | 0; //@line 10256
   }
   __ZdlPv($344); //@line 10258
  }
  if ((HEAP8[$22 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$21 >> 2] | 0); //@line 10264
  }
  $$sroa$0114$0136 = $$sroa$0114$0136 + 72 | 0; //@line 10266
  if (($$sroa$0114$0136 | 0) == ($14 | 0)) {
   label = 3; //@line 10269
   break;
  }
 }
 switch (label | 0) {
 case 3:
  {
   STACKTOP = sp; //@line 10277
   return;
  }
 case 6:
  {
   ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 10283
   break;
  }
 case 12:
  {
   $86 = ___cxa_find_matching_catch_2() | 0; //@line 10288
   $$1 = tempRet0; //@line 10290
   $$18 = $86; //@line 10290
   break;
  }
 case 13:
  {
   $88 = ___cxa_find_matching_catch_2() | 0; //@line 10294
   $89 = tempRet0; //@line 10295
   if ((HEAP8[$66 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 10300
    $$1 = $89; //@line 10301
    $$18 = $88; //@line 10301
   } else {
    $$1 = $89; //@line 10303
    $$18 = $88; //@line 10303
   }
   break;
  }
 case 25:
  {
   ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 10310
   break;
  }
 case 30:
  {
   $120 = ___cxa_find_matching_catch_2() | 0; //@line 10315
   $121 = tempRet0; //@line 10316
   if ((HEAP8[$26 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$25 >> 2] | 0); //@line 10321
   }
   $125 = HEAP32[$27 >> 2] | 0; //@line 10323
   if ($125 | 0) {
    $127 = HEAP32[$30 >> 2] | 0; //@line 10326
    do {
     if (($127 | 0) == ($125 | 0)) {
      $137 = $125; //@line 10330
     } else {
      $130 = $127; //@line 10332
      while (1) {
       $129 = $130 + -72 | 0; //@line 10334
       HEAP32[$30 >> 2] = $129; //@line 10335
       __THREW__ = 0; //@line 10336
       HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 10337
       invoke_viii(13, $$byval_copy16 | 0, $31 | 0, $129 | 0); //@line 10338
       $131 = __THREW__; //@line 10339
       __THREW__ = 0; //@line 10339
       if ($131 & 1) {
        label = 37; //@line 10342
        break;
       }
       $130 = HEAP32[$30 >> 2] | 0; //@line 10345
       if (($130 | 0) == ($125 | 0)) {
        label = 38; //@line 10348
        break;
       }
      }
      if ((label | 0) == 37) {
       $135 = ___cxa_find_matching_catch_3(0) | 0; //@line 10355
       ___clang_call_terminate($135); //@line 10357
      } else if ((label | 0) == 38) {
       $137 = HEAP32[$27 >> 2] | 0; //@line 10362
       break;
      }
     }
    } while (0);
    __ZdlPv($137); //@line 10367
   }
   if ((HEAP8[$29 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 10373
    $$1 = $121; //@line 10374
    $$18 = $120; //@line 10374
   } else {
    $$1 = $121; //@line 10376
    $$18 = $120; //@line 10376
   }
   break;
  }
 case 51:
  {
   ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 10383
   break;
  }
 case 56:
  {
   $167 = ___cxa_find_matching_catch_2() | 0; //@line 10388
   $168 = tempRet0; //@line 10389
   if ((HEAP8[$33 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$32 >> 2] | 0); //@line 10394
   }
   $172 = HEAP32[$34 >> 2] | 0; //@line 10396
   if ($172 | 0) {
    $174 = HEAP32[$37 >> 2] | 0; //@line 10399
    do {
     if (($174 | 0) == ($172 | 0)) {
      $184 = $172; //@line 10403
     } else {
      $177 = $174; //@line 10405
      while (1) {
       $176 = $177 + -72 | 0; //@line 10407
       HEAP32[$37 >> 2] = $176; //@line 10408
       __THREW__ = 0; //@line 10409
       HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 10410
       invoke_viii(13, $$byval_copy16 | 0, $38 | 0, $176 | 0); //@line 10411
       $178 = __THREW__; //@line 10412
       __THREW__ = 0; //@line 10412
       if ($178 & 1) {
        label = 63; //@line 10415
        break;
       }
       $177 = HEAP32[$37 >> 2] | 0; //@line 10418
       if (($177 | 0) == ($172 | 0)) {
        label = 64; //@line 10421
        break;
       }
      }
      if ((label | 0) == 63) {
       $182 = ___cxa_find_matching_catch_3(0) | 0; //@line 10428
       ___clang_call_terminate($182); //@line 10430
      } else if ((label | 0) == 64) {
       $184 = HEAP32[$34 >> 2] | 0; //@line 10435
       break;
      }
     }
    } while (0);
    __ZdlPv($184); //@line 10440
   }
   if ((HEAP8[$36 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$35 >> 2] | 0); //@line 10446
    $$1 = $168; //@line 10447
    $$18 = $167; //@line 10447
   } else {
    $$1 = $168; //@line 10449
    $$18 = $167; //@line 10449
   }
   break;
  }
 case 77:
  {
   ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 10456
   break;
  }
 case 82:
  {
   $214 = ___cxa_find_matching_catch_2() | 0; //@line 10461
   $215 = tempRet0; //@line 10462
   if ((HEAP8[$40 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$39 >> 2] | 0); //@line 10467
   }
   $219 = HEAP32[$41 >> 2] | 0; //@line 10469
   if ($219 | 0) {
    $221 = HEAP32[$44 >> 2] | 0; //@line 10472
    do {
     if (($221 | 0) == ($219 | 0)) {
      $231 = $219; //@line 10476
     } else {
      $224 = $221; //@line 10478
      while (1) {
       $223 = $224 + -72 | 0; //@line 10480
       HEAP32[$44 >> 2] = $223; //@line 10481
       __THREW__ = 0; //@line 10482
       HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 10483
       invoke_viii(13, $$byval_copy16 | 0, $45 | 0, $223 | 0); //@line 10484
       $225 = __THREW__; //@line 10485
       __THREW__ = 0; //@line 10485
       if ($225 & 1) {
        label = 89; //@line 10488
        break;
       }
       $224 = HEAP32[$44 >> 2] | 0; //@line 10491
       if (($224 | 0) == ($219 | 0)) {
        label = 90; //@line 10494
        break;
       }
      }
      if ((label | 0) == 89) {
       $229 = ___cxa_find_matching_catch_3(0) | 0; //@line 10501
       ___clang_call_terminate($229); //@line 10503
      } else if ((label | 0) == 90) {
       $231 = HEAP32[$41 >> 2] | 0; //@line 10508
       break;
      }
     }
    } while (0);
    __ZdlPv($231); //@line 10513
   }
   if ((HEAP8[$43 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$42 >> 2] | 0); //@line 10519
    $$1 = $215; //@line 10520
    $$18 = $214; //@line 10520
   } else {
    $$1 = $215; //@line 10522
    $$18 = $214; //@line 10522
   }
   break;
  }
 case 98:
  {
   $246 = ___cxa_find_matching_catch_2() | 0; //@line 10527
   $247 = tempRet0; //@line 10528
   if ((HEAP8[$56 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$10 >> 2] | 0); //@line 10533
    $eh$lpad$body$index3Z2D = $247; //@line 10534
    $eh$lpad$body$indexZ2D = $246; //@line 10534
    label = 113; //@line 10535
   } else {
    $eh$lpad$body$index3Z2D = $247; //@line 10537
    $eh$lpad$body$indexZ2D = $246; //@line 10537
    label = 113; //@line 10538
   }
   break;
  }
 case 112:
  {
   $275 = ___cxa_find_matching_catch_2() | 0; //@line 10543
   $eh$lpad$body$index3Z2D = tempRet0; //@line 10545
   $eh$lpad$body$indexZ2D = $275; //@line 10545
   label = 113; //@line 10546
   break;
  }
 case 114:
  {
   $277 = ___cxa_find_matching_catch_2() | 0; //@line 10550
   $278 = tempRet0; //@line 10551
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($55); //@line 10552
   if ((HEAP8[$56 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$10 >> 2] | 0); //@line 10557
    $$0 = $278; //@line 10558
    $$07 = $277; //@line 10558
    label = 116; //@line 10559
   } else {
    $$0 = $278; //@line 10561
    $$07 = $277; //@line 10561
    label = 116; //@line 10562
   }
   break;
  }
 case 127:
  {
   ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 10569
   break;
  }
 case 132:
  {
   $308 = ___cxa_find_matching_catch_2() | 0; //@line 10574
   $309 = tempRet0; //@line 10575
   if ((HEAP8[$60 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$59 >> 2] | 0); //@line 10580
   }
   $313 = HEAP32[$61 >> 2] | 0; //@line 10582
   if ($313 | 0) {
    $315 = HEAP32[$64 >> 2] | 0; //@line 10585
    do {
     if (($315 | 0) == ($313 | 0)) {
      $325 = $313; //@line 10589
     } else {
      $318 = $315; //@line 10591
      while (1) {
       $317 = $318 + -72 | 0; //@line 10593
       HEAP32[$64 >> 2] = $317; //@line 10594
       __THREW__ = 0; //@line 10595
       HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 10596
       invoke_viii(13, $$byval_copy16 | 0, $65 | 0, $317 | 0); //@line 10597
       $319 = __THREW__; //@line 10598
       __THREW__ = 0; //@line 10598
       if ($319 & 1) {
        label = 139; //@line 10601
        break;
       }
       $318 = HEAP32[$64 >> 2] | 0; //@line 10604
       if (($318 | 0) == ($313 | 0)) {
        label = 140; //@line 10607
        break;
       }
      }
      if ((label | 0) == 139) {
       $323 = ___cxa_find_matching_catch_3(0) | 0; //@line 10614
       ___clang_call_terminate($323); //@line 10616
      } else if ((label | 0) == 140) {
       $325 = HEAP32[$61 >> 2] | 0; //@line 10621
       break;
      }
     }
    } while (0);
    __ZdlPv($325); //@line 10626
   }
   if ((HEAP8[$63 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$62 >> 2] | 0); //@line 10632
    $$1 = $309; //@line 10633
    $$18 = $308; //@line 10633
   } else {
    $$1 = $309; //@line 10635
    $$18 = $308; //@line 10635
   }
   break;
  }
 case 150:
  {
   ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 10642
   break;
  }
 }
 if ((label | 0) == 113) {
  $$0 = $eh$lpad$body$index3Z2D; //@line 10648
  $$07 = $eh$lpad$body$indexZ2D; //@line 10648
  label = 116; //@line 10649
 }
 if ((label | 0) == 116) {
  __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($57); //@line 10652
  if ((HEAP8[$58 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$$byval_copy16 >> 2] | 0); //@line 10657
  }
  $$1 = $$0; //@line 10659
  $$18 = $$07; //@line 10659
 }
 if ((HEAP8[$19 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 10665
 }
 $353 = HEAP32[$20 >> 2] | 0; //@line 10667
 if ($353 | 0) {
  $355 = HEAP32[$23 >> 2] | 0; //@line 10670
  do {
   if (($355 | 0) == ($353 | 0)) {
    $365 = $353; //@line 10674
   } else {
    $358 = $355; //@line 10676
    while (1) {
     $357 = $358 + -72 | 0; //@line 10678
     HEAP32[$23 >> 2] = $357; //@line 10679
     __THREW__ = 0; //@line 10680
     HEAP8[$$byval_copy16 >> 0] = HEAP8[$4 >> 0] | 0; //@line 10681
     invoke_viii(13, $$byval_copy16 | 0, $24 | 0, $357 | 0); //@line 10682
     $359 = __THREW__; //@line 10683
     __THREW__ = 0; //@line 10683
     if ($359 & 1) {
      label = 163; //@line 10686
      break;
     }
     $358 = HEAP32[$23 >> 2] | 0; //@line 10689
     if (($358 | 0) == ($353 | 0)) {
      label = 164; //@line 10692
      break;
     }
    }
    if ((label | 0) == 163) {
     $363 = ___cxa_find_matching_catch_3(0) | 0; //@line 10699
     ___clang_call_terminate($363); //@line 10701
    } else if ((label | 0) == 164) {
     $365 = HEAP32[$20 >> 2] | 0; //@line 10706
     break;
    }
   }
  } while (0);
  __ZdlPv($365); //@line 10711
 }
 if ((HEAP8[$22 >> 0] | 0) >= 0) {
  ___resumeException($$18 | 0); //@line 10716
 }
 __ZdlPv(HEAP32[$21 >> 2] | 0); //@line 10720
 ___resumeException($$18 | 0); //@line 10721
}
function __ZN6Parser14lexAskToInlineENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i18$i$i = 0, $$04 = 0, $$04$i = 0, $$1 = 0, $$15 = 0, $$2 = 0, $$26 = 0, $$3 = 0, $$37 = 0, $$4 = 0, $$48 = 0, $$5 = 0, $$59 = 0, $$byval_copy8 = 0, $10 = 0, $104 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $120 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $134 = 0, $136 = 0, $138 = 0, $139 = 0, $14 = 0, $143 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $153 = 0, $155 = 0, $16 = 0, $162 = 0, $164 = 0, $165 = 0, $17 = 0, $170 = 0, $172 = 0, $174 = 0, $176 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $193 = 0, $197 = 0, $198 = 0, $205 = 0, $21 = 0, $212 = 0, $213 = 0, $217 = 0, $219 = 0, $220 = 0, $221 = 0, $223 = 0, $225 = 0, $226 = 0, $228 = 0, $230 = 0, $231 = 0, $238 = 0, $242 = 0, $243 = 0, $25 = 0, $250 = 0, $257 = 0, $259 = 0, $260 = 0, $262 = 0, $263 = 0, $268 = 0, $269 = 0, $27 = 0, $274 = 0, $276 = 0, $277 = 0, $28 = 0, $284 = 0, $29 = 0, $290 = 0, $291 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $298 = 0, $299 = 0, $302 = 0, $303 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $325 = 0, $326 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $99 = 0, $eh$lpad$body$i$index4Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30250
 STACKTOP = STACKTOP + 352 | 0; //@line 30251
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352); //@line 30251
 $$byval_copy8 = sp + 332 | 0; //@line 30252
 $4 = sp + 320 | 0; //@line 30253
 $5 = sp + 308 | 0; //@line 30254
 $6 = sp + 152 | 0; //@line 30255
 $7 = sp + 136 | 0; //@line 30256
 $8 = sp + 296 | 0; //@line 30257
 $9 = sp; //@line 30258
 $10 = sp + 124 | 0; //@line 30259
 $11 = sp + 112 | 0; //@line 30260
 $12 = sp + 88 | 0; //@line 30261
 $13 = sp + 72 | 0; //@line 30262
 HEAP32[$5 >> 2] = 0; //@line 30263
 $14 = $5 + 4 | 0; //@line 30264
 HEAP32[$14 >> 2] = 0; //@line 30265
 HEAP32[$5 + 8 >> 2] = 0; //@line 30267
 $16 = $6 + 64 | 0; //@line 30268
 $17 = $6 + 8 | 0; //@line 30269
 HEAP32[$17 >> 2] = 4868; //@line 30270
 $18 = $6 + 12 | 0; //@line 30271
 HEAP32[$6 >> 2] = 692; //@line 30272
 HEAP32[$16 >> 2] = 712; //@line 30273
 HEAP32[$6 + 4 >> 2] = 0; //@line 30275
 __THREW__ = 0; //@line 30277
 invoke_vii(110, $6 + 64 | 0, $18 | 0); //@line 30278
 $21 = __THREW__; //@line 30279
 __THREW__ = 0; //@line 30279
 if ($21 & 1) {
  $37 = ___cxa_find_matching_catch_2() | 0; //@line 30282
  $$0$i = tempRet0; //@line 30284
  $$04$i = $37; //@line 30284
 } else {
  HEAP32[$6 + 136 >> 2] = 0; //@line 30287
  HEAP32[$6 + 140 >> 2] = -1; //@line 30289
  HEAP32[$6 >> 2] = 4848; //@line 30290
  HEAP32[$16 >> 2] = 4888; //@line 30291
  HEAP32[$17 >> 2] = 4868; //@line 30292
  __THREW__ = 0; //@line 30293
  invoke_vi(253, $18 | 0); //@line 30294
  $25 = __THREW__; //@line 30295
  __THREW__ = 0; //@line 30295
  do {
   if ($25 & 1) {
    $39 = ___cxa_find_matching_catch_2() | 0; //@line 30299
    $eh$lpad$body$i$index4Z2D = tempRet0; //@line 30301
    $eh$lpad$body$i$indexZ2D = $39; //@line 30301
   } else {
    HEAP32[$18 >> 2] = 3032; //@line 30303
    $27 = $6 + 44 | 0; //@line 30304
    $28 = $6 + 60 | 0; //@line 30305
    HEAP32[$27 >> 2] = 0; //@line 30306
    HEAP32[$27 + 4 >> 2] = 0; //@line 30306
    HEAP32[$27 + 8 >> 2] = 0; //@line 30306
    HEAP32[$27 + 12 >> 2] = 0; //@line 30306
    HEAP32[$28 >> 2] = 24; //@line 30307
    __THREW__ = 0; //@line 30308
    invoke_vii(111, $18 | 0, $2 | 0); //@line 30309
    $29 = __THREW__; //@line 30310
    __THREW__ = 0; //@line 30310
    if ($29 & 1) {
     $31 = ___cxa_find_matching_catch_2() | 0; //@line 30313
     $32 = tempRet0; //@line 30314
     if ((HEAP8[$27 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$27 >> 2] | 0); //@line 30320
     }
     __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($18); //@line 30322
     $eh$lpad$body$i$index4Z2D = $32; //@line 30323
     $eh$lpad$body$i$indexZ2D = $31; //@line 30323
     break;
    }
    HEAP32[$7 >> 2] = 0; //@line 30326
    HEAP32[$7 + 4 >> 2] = 0; //@line 30326
    HEAP32[$7 + 8 >> 2] = 0; //@line 30326
    $41 = $8 + 11 | 0; //@line 30327
    $42 = $5 + 8 | 0; //@line 30328
    $43 = $9 + 4 | 0; //@line 30329
    $44 = $9 + 16 | 0; //@line 30330
    $45 = $9 + 40 | 0; //@line 30331
    $46 = $9 + 44 | 0; //@line 30332
    $47 = $9 + 48 | 0; //@line 30333
    $48 = $9 + 52 | 0; //@line 30334
    $49 = $9 + 64 | 0; //@line 30335
    $50 = $48 + 11 | 0; //@line 30336
    $51 = $9 + 40 | 0; //@line 30337
    $52 = $43 + 11 | 0; //@line 30338
    $53 = $10 + 11 | 0; //@line 30339
    $54 = $9 + 48 | 0; //@line 30340
    $55 = $11 + 11 | 0; //@line 30341
    $56 = $12 + 12 | 0; //@line 30342
    $57 = $12 + 11 | 0; //@line 30343
    $58 = $13 + 11 | 0; //@line 30344
    $59 = $12 + 16 | 0; //@line 30345
    $60 = $4 + 11 | 0; //@line 30346
    $61 = $4 + 4 | 0; //@line 30347
    $62 = $$byval_copy8 + 11 | 0; //@line 30348
    L13 : while (1) {
     __THREW__ = 0; //@line 30350
     $63 = invoke_iiii(30, $6 | 0, $7 | 0, 10) | 0; //@line 30351
     $64 = __THREW__; //@line 30352
     __THREW__ = 0; //@line 30352
     if ($64 & 1) {
      label = 38; //@line 30355
      break;
     }
     if (HEAP32[$63 + (HEAP32[(HEAP32[$63 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] & 5 | 0) {
      label = 123; //@line 30367
      break;
     }
     __THREW__ = 0; //@line 30370
     invoke_vii(115, $8 | 0, $7 | 0); //@line 30371
     $74 = __THREW__; //@line 30372
     __THREW__ = 0; //@line 30372
     if ($74 & 1) {
      label = 38; //@line 30375
      break;
     }
     __THREW__ = 0; //@line 30378
     $76 = invoke_iii(72, $1 | 0, $8 | 0) | 0; //@line 30379
     $77 = __THREW__; //@line 30380
     __THREW__ = 0; //@line 30380
     if ($77 & 1) {
      label = 39; //@line 30383
      break;
     }
     if ((HEAP8[$41 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 30390
     }
     if ($76) {
      __THREW__ = 0; //@line 30393
      invoke_vii(115, $10 | 0, $7 | 0); //@line 30394
      $82 = __THREW__; //@line 30395
      __THREW__ = 0; //@line 30395
      if ($82 & 1) {
       label = 41; //@line 30398
       break;
      }
      __THREW__ = 0; //@line 30401
      invoke_viii(30, $9 | 0, $1 | 0, $10 | 0); //@line 30402
      $84 = __THREW__; //@line 30403
      __THREW__ = 0; //@line 30403
      if ($84 & 1) {
       label = 42; //@line 30406
       break;
      }
      $86 = HEAP32[$14 >> 2] | 0; //@line 30409
      if ($86 >>> 0 < (HEAP32[$42 >> 2] | 0) >>> 0) {
       HEAP32[$86 >> 2] = HEAP32[$9 >> 2]; //@line 30414
       $90 = $86 + 4 | 0; //@line 30415
       HEAP32[$90 >> 2] = HEAP32[$43 >> 2]; //@line 30416
       HEAP32[$90 + 4 >> 2] = HEAP32[$43 + 4 >> 2]; //@line 30416
       HEAP32[$90 + 8 >> 2] = HEAP32[$43 + 8 >> 2]; //@line 30416
       HEAP32[$43 >> 2] = 0; //@line 30417
       HEAP32[$43 + 4 >> 2] = 0; //@line 30417
       HEAP32[$43 + 8 >> 2] = 0; //@line 30417
       $91 = $86 + 16 | 0; //@line 30418
       HEAP32[$91 >> 2] = HEAP32[$44 >> 2]; //@line 30419
       HEAP32[$91 + 4 >> 2] = HEAP32[$44 + 4 >> 2]; //@line 30419
       HEAP32[$91 + 8 >> 2] = HEAP32[$44 + 8 >> 2]; //@line 30419
       HEAP32[$91 + 12 >> 2] = HEAP32[$44 + 12 >> 2]; //@line 30419
       HEAP32[$91 + 16 >> 2] = HEAP32[$44 + 16 >> 2]; //@line 30419
       HEAP32[$91 + 20 >> 2] = HEAP32[$44 + 20 >> 2]; //@line 30419
       $92 = $86 + 40 | 0; //@line 30420
       HEAP32[$92 >> 2] = 0; //@line 30421
       $93 = $86 + 44 | 0; //@line 30422
       HEAP32[$93 >> 2] = 0; //@line 30423
       HEAP32[$86 + 48 >> 2] = 0; //@line 30425
       HEAP32[$92 >> 2] = HEAP32[$45 >> 2]; //@line 30427
       HEAP32[$93 >> 2] = HEAP32[$46 >> 2]; //@line 30429
       HEAP32[$86 + 48 >> 2] = HEAP32[$47 >> 2]; //@line 30432
       HEAP32[$47 >> 2] = 0; //@line 30433
       HEAP32[$46 >> 2] = 0; //@line 30434
       HEAP32[$45 >> 2] = 0; //@line 30435
       $99 = $86 + 52 | 0; //@line 30436
       HEAP32[$99 >> 2] = HEAP32[$48 >> 2]; //@line 30437
       HEAP32[$99 + 4 >> 2] = HEAP32[$48 + 4 >> 2]; //@line 30437
       HEAP32[$99 + 8 >> 2] = HEAP32[$48 + 8 >> 2]; //@line 30437
       HEAP32[$48 >> 2] = 0; //@line 30438
       HEAP32[$48 + 4 >> 2] = 0; //@line 30438
       HEAP32[$48 + 8 >> 2] = 0; //@line 30438
       HEAP16[$86 + 64 >> 1] = HEAP16[$49 >> 1] | 0; //@line 30441
       HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 72; //@line 30444
      } else {
       __THREW__ = 0; //@line 30446
       invoke_vii(145, $5 | 0, $9 | 0); //@line 30447
       $104 = __THREW__; //@line 30448
       __THREW__ = 0; //@line 30448
       if ($104 & 1) {
        label = 43; //@line 30451
        break;
       }
       if ((HEAP8[$50 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$48 >> 2] | 0); //@line 30458
       }
      }
      $108 = HEAP32[$51 >> 2] | 0; //@line 30461
      if ($108 | 0) {
       $110 = HEAP32[$46 >> 2] | 0; //@line 30464
       if (($110 | 0) == ($108 | 0)) {
        $120 = $108; //@line 30467
       } else {
        $113 = $110; //@line 30469
        do {
         $112 = $113 + -72 | 0; //@line 30471
         HEAP32[$46 >> 2] = $112; //@line 30472
         __THREW__ = 0; //@line 30473
         HEAP8[$$byval_copy8 >> 0] = HEAP8[$4 >> 0] | 0; //@line 30474
         invoke_viii(13, $$byval_copy8 | 0, $54 | 0, $112 | 0); //@line 30475
         $114 = __THREW__; //@line 30476
         __THREW__ = 0; //@line 30476
         if ($114 & 1) {
          label = 29; //@line 30479
          break L13;
         }
         $113 = HEAP32[$46 >> 2] | 0; //@line 30482
        } while (($113 | 0) != ($108 | 0));
        $120 = HEAP32[$51 >> 2] | 0; //@line 30491
       }
       __ZdlPv($120); //@line 30493
      }
      if ((HEAP8[$52 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$43 >> 2] | 0); //@line 30499
      }
      if ((HEAP8[$53 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$10 >> 2] | 0); //@line 30505
      }
      continue;
     }
     __THREW__ = 0; //@line 30509
     invoke_vii(115, $11 | 0, $7 | 0); //@line 30510
     $162 = __THREW__; //@line 30511
     __THREW__ = 0; //@line 30511
     if ($162 & 1) {
      label = 38; //@line 30514
      break;
     }
     __THREW__ = 0; //@line 30517
     $164 = invoke_iii(73, 0, $11 | 0) | 0; //@line 30518
     $165 = __THREW__; //@line 30519
     __THREW__ = 0; //@line 30519
     if ($165 & 1) {
      label = 83; //@line 30522
      break;
     }
     if ((HEAP8[$55 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 30529
     }
     if (!$164) {
      __THREW__ = 0; //@line 30532
      invoke_vii(115, $$byval_copy8 | 0, $7 | 0); //@line 30533
      $257 = __THREW__; //@line 30534
      __THREW__ = 0; //@line 30534
      if ($257 & 1) {
       label = 111; //@line 30537
       break;
      }
      HEAP32[$4 >> 2] = 0; //@line 30540
      HEAP32[$4 + 4 >> 2] = 0; //@line 30540
      HEAP32[$4 + 8 >> 2] = 0; //@line 30540
      while (1) {
       __THREW__ = 0; //@line 30542
       $259 = invoke_iiii(37, 0, $4 | 0, $$byval_copy8 | 0) | 0; //@line 30543
       $260 = __THREW__; //@line 30544
       __THREW__ = 0; //@line 30544
       if ($260 & 1) {
        label = 112; //@line 30547
        break L13;
       }
       $262 = HEAP8[$60 >> 0] | 0; //@line 30550
       $263 = $262 << 24 >> 24 < 0; //@line 30551
       if (!$259) {
        break;
       }
       if (!(($263 ? HEAP32[$61 >> 2] | 0 : $262 & 255) | 0)) {
        __THREW__ = 0; //@line 30560
        $268 = invoke_iiiiii(21, $4 | 0, 0, -1, 39514, 0) | 0; //@line 30561
        $269 = __THREW__; //@line 30562
        __THREW__ = 0; //@line 30562
        if ($269 & 1) {
         label = 109; //@line 30565
         break L13;
        }
        if (!$268) {
         continue;
        }
       }
       __THREW__ = 0; //@line 30573
       invoke_viiiii(6, $1 | 0, $5 | 0, $4 | 0, $$byval_copy8 | 0, $3 | 0); //@line 30574
       $284 = __THREW__; //@line 30575
       __THREW__ = 0; //@line 30575
       if ($284 & 1) {
        label = 112; //@line 30578
        break L13;
       }
      }
      if ($263) {
       __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 30584
      }
      if ((HEAP8[$62 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$$byval_copy8 >> 2] | 0); //@line 30590
      }
      continue;
     }
     __THREW__ = 0; //@line 30594
     invoke_vii(115, $13 | 0, $7 | 0); //@line 30595
     $170 = __THREW__; //@line 30596
     __THREW__ = 0; //@line 30596
     if ($170 & 1) {
      label = 38; //@line 30599
      break;
     }
     __THREW__ = 0; //@line 30602
     invoke_viii(31, $12 | 0, $1 | 0, $13 | 0); //@line 30603
     $172 = __THREW__; //@line 30604
     __THREW__ = 0; //@line 30604
     if ($172 & 1) {
      label = 85; //@line 30607
      break;
     }
     __THREW__ = 0; //@line 30610
     invoke_vii(146, $1 | 0, $12 | 0); //@line 30611
     $174 = __THREW__; //@line 30612
     __THREW__ = 0; //@line 30612
     if ($174 & 1) {
      label = 86; //@line 30615
      break;
     }
     $176 = HEAP32[$56 >> 2] | 0; //@line 30618
     if ($176 | 0) {
      $178 = HEAP32[$59 >> 2] | 0; //@line 30621
      if (($178 | 0) == ($176 | 0)) {
       $205 = $176; //@line 30624
      } else {
       $181 = $178; //@line 30626
       do {
        $180 = $181 + -24 | 0; //@line 30628
        HEAP32[$59 >> 2] = $180; //@line 30629
        $183 = HEAP32[$181 + -12 >> 2] | 0; //@line 30631
        if ($183 | 0) {
         $185 = $181 + -8 | 0; //@line 30634
         $186 = HEAP32[$185 >> 2] | 0; //@line 30635
         if (($186 | 0) != ($183 | 0)) {
          HEAP32[$185 >> 2] = $186 + (~(($186 + -4 - $183 | 0) >>> 2) << 2); //@line 30645
         }
         __ZdlPv($183); //@line 30647
        }
        $193 = HEAP32[$180 >> 2] | 0; //@line 30649
        if ($193 | 0) {
         $197 = $181 + -20 | 0; //@line 30652
         $198 = HEAP32[$197 >> 2] | 0; //@line 30653
         if (($198 | 0) != ($193 | 0)) {
          HEAP32[$197 >> 2] = $198 + (~(($198 + -4 - $193 | 0) >>> 2) << 2); //@line 30663
         }
         __ZdlPv($193); //@line 30665
        }
        $181 = HEAP32[$59 >> 2] | 0; //@line 30667
       } while (($181 | 0) != ($176 | 0));
       $205 = HEAP32[$56 >> 2] | 0; //@line 30676
      }
      __ZdlPv($205); //@line 30678
     }
     if ((HEAP8[$57 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 30684
     }
     if ((HEAP8[$58 >> 0] | 0) >= 0) {
      continue;
     }
     __ZdlPv(HEAP32[$13 >> 2] | 0); //@line 30692
    }
    L99 : switch (label | 0) {
    case 29:
     {
      ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 30698
      break;
     }
    case 38:
     {
      $127 = ___cxa_find_matching_catch_2() | 0; //@line 30703
      $$4 = tempRet0; //@line 30705
      $$48 = $127; //@line 30705
      break;
     }
    case 39:
     {
      $129 = ___cxa_find_matching_catch_2() | 0; //@line 30709
      $130 = tempRet0; //@line 30710
      if ((HEAP8[$41 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 30715
       $$4 = $130; //@line 30716
       $$48 = $129; //@line 30716
      } else {
       $$4 = $130; //@line 30718
       $$48 = $129; //@line 30718
      }
      break;
     }
    case 41:
     {
      $134 = ___cxa_find_matching_catch_2() | 0; //@line 30723
      $$1 = tempRet0; //@line 30725
      $$15 = $134; //@line 30725
      label = 57; //@line 30726
      break;
     }
    case 42:
     {
      $136 = ___cxa_find_matching_catch_2() | 0; //@line 30730
      $$0 = tempRet0; //@line 30732
      $$04 = $136; //@line 30732
      label = 55; //@line 30733
      break;
     }
    case 43:
     {
      $138 = ___cxa_find_matching_catch_2() | 0; //@line 30737
      $139 = tempRet0; //@line 30738
      if ((HEAP8[$50 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$48 >> 2] | 0); //@line 30743
      }
      $143 = HEAP32[$51 >> 2] | 0; //@line 30745
      if ($143 | 0) {
       $145 = HEAP32[$46 >> 2] | 0; //@line 30748
       do {
        if (($145 | 0) == ($143 | 0)) {
         $155 = $143; //@line 30752
        } else {
         $148 = $145; //@line 30754
         while (1) {
          $147 = $148 + -72 | 0; //@line 30756
          HEAP32[$46 >> 2] = $147; //@line 30757
          __THREW__ = 0; //@line 30758
          HEAP8[$$byval_copy8 >> 0] = HEAP8[$4 >> 0] | 0; //@line 30759
          invoke_viii(13, $$byval_copy8 | 0, $54 | 0, $147 | 0); //@line 30760
          $149 = __THREW__; //@line 30761
          __THREW__ = 0; //@line 30761
          if ($149 & 1) {
           label = 50; //@line 30764
           break;
          }
          $148 = HEAP32[$46 >> 2] | 0; //@line 30767
          if (($148 | 0) == ($143 | 0)) {
           label = 51; //@line 30770
           break;
          }
         }
         if ((label | 0) == 50) {
          $153 = ___cxa_find_matching_catch_3(0) | 0; //@line 30777
          ___clang_call_terminate($153); //@line 30779
         } else if ((label | 0) == 51) {
          $155 = HEAP32[$51 >> 2] | 0; //@line 30784
          break;
         }
        }
       } while (0);
       __ZdlPv($155); //@line 30789
      }
      if ((HEAP8[$52 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$43 >> 2] | 0); //@line 30795
       $$0 = $139; //@line 30796
       $$04 = $138; //@line 30796
       label = 55; //@line 30797
      } else {
       $$0 = $139; //@line 30799
       $$04 = $138; //@line 30799
       label = 55; //@line 30800
      }
      break;
     }
    case 83:
     {
      $212 = ___cxa_find_matching_catch_2() | 0; //@line 30805
      $213 = tempRet0; //@line 30806
      if ((HEAP8[$55 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 30811
       $$4 = $213; //@line 30812
       $$48 = $212; //@line 30812
      } else {
       $$4 = $213; //@line 30814
       $$48 = $212; //@line 30814
      }
      break;
     }
    case 85:
     {
      $217 = ___cxa_find_matching_catch_2() | 0; //@line 30819
      $$2 = tempRet0; //@line 30821
      $$26 = $217; //@line 30821
      label = 101; //@line 30822
      break;
     }
    case 86:
     {
      $219 = ___cxa_find_matching_catch_2() | 0; //@line 30826
      $220 = tempRet0; //@line 30827
      $221 = HEAP32[$56 >> 2] | 0; //@line 30828
      if ($221 | 0) {
       $223 = HEAP32[$59 >> 2] | 0; //@line 30831
       if (($223 | 0) == ($221 | 0)) {
        $250 = $221; //@line 30834
       } else {
        $226 = $223; //@line 30836
        do {
         $225 = $226 + -24 | 0; //@line 30838
         HEAP32[$59 >> 2] = $225; //@line 30839
         $228 = HEAP32[$226 + -12 >> 2] | 0; //@line 30841
         if ($228 | 0) {
          $230 = $226 + -8 | 0; //@line 30844
          $231 = HEAP32[$230 >> 2] | 0; //@line 30845
          if (($231 | 0) != ($228 | 0)) {
           HEAP32[$230 >> 2] = $231 + (~(($231 + -4 - $228 | 0) >>> 2) << 2); //@line 30855
          }
          __ZdlPv($228); //@line 30857
         }
         $238 = HEAP32[$225 >> 2] | 0; //@line 30859
         if ($238 | 0) {
          $242 = $226 + -20 | 0; //@line 30862
          $243 = HEAP32[$242 >> 2] | 0; //@line 30863
          if (($243 | 0) != ($238 | 0)) {
           HEAP32[$242 >> 2] = $243 + (~(($243 + -4 - $238 | 0) >>> 2) << 2); //@line 30873
          }
          __ZdlPv($238); //@line 30875
         }
         $226 = HEAP32[$59 >> 2] | 0; //@line 30877
        } while (($226 | 0) != ($221 | 0));
        $250 = HEAP32[$56 >> 2] | 0; //@line 30886
       }
       __ZdlPv($250); //@line 30888
      }
      if ((HEAP8[$57 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 30894
       $$2 = $220; //@line 30895
       $$26 = $219; //@line 30895
       label = 101; //@line 30896
      } else {
       $$2 = $220; //@line 30898
       $$26 = $219; //@line 30898
       label = 101; //@line 30899
      }
      break;
     }
    case 109:
     {
      ___clang_call_terminate(___cxa_find_matching_catch_3(0) | 0); //@line 30906
      break;
     }
    case 111:
     {
      $274 = ___cxa_find_matching_catch_2() | 0; //@line 30911
      $$3 = tempRet0; //@line 30913
      $$37 = $274; //@line 30913
      label = 122; //@line 30914
      break;
     }
    case 112:
     {
      $276 = ___cxa_find_matching_catch_2() | 0; //@line 30918
      $277 = tempRet0; //@line 30919
      if ((HEAP8[$60 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 30924
      }
      if ((HEAP8[$62 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$$byval_copy8 >> 2] | 0); //@line 30930
       $$3 = $277; //@line 30931
       $$37 = $276; //@line 30931
       label = 122; //@line 30932
      } else {
       $$3 = $277; //@line 30934
       $$37 = $276; //@line 30934
       label = 122; //@line 30935
      }
      break;
     }
    case 123:
     {
      $290 = $1; //@line 30940
      HEAP32[$0 >> 2] = 0; //@line 30941
      $291 = $0 + 4 | 0; //@line 30942
      HEAP32[$291 >> 2] = 0; //@line 30943
      HEAP32[$0 + 8 >> 2] = 0; //@line 30945
      $293 = HEAP32[$14 >> 2] | 0; //@line 30946
      $294 = HEAP32[$5 >> 2] | 0; //@line 30947
      $295 = $293 - $294 | 0; //@line 30948
      $296 = ($295 | 0) / 72 | 0; //@line 30949
      $298 = $294; //@line 30951
      $299 = $293; //@line 30952
      L156 : do {
       if ($295 | 0) {
        L158 : do {
         if ($296 >>> 0 > 59652323) {
          __THREW__ = 0; //@line 30958
          invoke_vi(254, $0 | 0); //@line 30959
          __THREW__ = 0; //@line 30960
         } else {
          __THREW__ = 0; //@line 30962
          $302 = invoke_ii(142, $295 | 0) | 0; //@line 30963
          $303 = __THREW__; //@line 30964
          __THREW__ = 0; //@line 30964
          if (!($303 & 1)) {
           HEAP32[$291 >> 2] = $302; //@line 30967
           HEAP32[$0 >> 2] = $302; //@line 30968
           HEAP32[$0 + 8 >> 2] = $302 + ($296 * 72 | 0); //@line 30971
           if (($298 | 0) == ($299 | 0)) {
            break L156;
           } else {
            $$0$i$i18$i$i = $298; //@line 30976
            $308 = $302; //@line 30976
           }
           while (1) {
            __THREW__ = 0; //@line 30979
            invoke_vii(120, $308 | 0, $$0$i$i18$i$i | 0); //@line 30980
            $309 = __THREW__; //@line 30981
            __THREW__ = 0; //@line 30981
            if ($309 & 1) {
             break L158;
            }
            $$0$i$i18$i$i = $$0$i$i18$i$i + 72 | 0; //@line 30986
            $308 = (HEAP32[$291 >> 2] | 0) + 72 | 0; //@line 30988
            HEAP32[$291 >> 2] = $308; //@line 30989
            if (($$0$i$i18$i$i | 0) == ($299 | 0)) {
             break L156;
            }
           }
          }
         }
        } while (0);
        $325 = ___cxa_find_matching_catch_2() | 0; //@line 31000
        $326 = tempRet0; //@line 31001
        __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($0); //@line 31002
        $$4 = $326; //@line 31003
        $$48 = $325; //@line 31003
        break L99;
       }
      } while (0);
      HEAP32[$0 + 12 >> 2] = $290; //@line 31008
      if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 31014
      }
      HEAP32[$6 >> 2] = 4848; //@line 31016
      HEAP32[$16 >> 2] = 4888; //@line 31017
      HEAP32[$6 + 8 >> 2] = 4868; //@line 31019
      HEAP32[$18 >> 2] = 3032; //@line 31020
      if ((HEAP8[$27 + 11 >> 0] | 0) >= 0) {
       __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($18); //@line 31025
       __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($6, 4900); //@line 31026
       __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($16); //@line 31027
       __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($5); //@line 31028
       STACKTOP = sp; //@line 31029
       return;
      }
      __ZdlPv(HEAP32[$27 >> 2] | 0); //@line 31032
      __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($18); //@line 31033
      __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($6, 4900); //@line 31034
      __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($16); //@line 31035
      __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($5); //@line 31036
      STACKTOP = sp; //@line 31037
      return;
     }
    }
    if ((label | 0) == 55) {
     if ((HEAP8[$53 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$10 >> 2] | 0); //@line 31046
      $$1 = $$0; //@line 31047
      $$15 = $$04; //@line 31047
      label = 57; //@line 31048
     } else {
      $$1 = $$0; //@line 31050
      $$15 = $$04; //@line 31050
      label = 57; //@line 31051
     }
    } else if ((label | 0) == 101) {
     if ((HEAP8[$58 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$13 >> 2] | 0); //@line 31059
      $$4 = $$2; //@line 31060
      $$48 = $$26; //@line 31060
     } else {
      $$4 = $$2; //@line 31062
      $$48 = $$26; //@line 31062
     }
    } else if ((label | 0) == 122) {
     $$4 = $$3; //@line 31066
     $$48 = $$37; //@line 31066
    }
    if ((label | 0) == 57) {
     $$4 = $$1; //@line 31069
     $$48 = $$15; //@line 31069
    }
    if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 31076
    }
    HEAP32[$6 >> 2] = 4848; //@line 31078
    HEAP32[$16 >> 2] = 4888; //@line 31079
    HEAP32[$6 + 8 >> 2] = 4868; //@line 31081
    HEAP32[$18 >> 2] = 3032; //@line 31082
    if ((HEAP8[$27 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$27 >> 2] | 0); //@line 31088
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($18); //@line 31090
    __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($6, 4900); //@line 31091
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($16); //@line 31092
    $$5 = $$4; //@line 31093
    $$59 = $$48; //@line 31093
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($5); //@line 31094
    ___resumeException($$59 | 0); //@line 31095
   }
  } while (0);
  __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($6, 4900); //@line 31099
  $$0$i = $eh$lpad$body$i$index4Z2D; //@line 31100
  $$04$i = $eh$lpad$body$i$indexZ2D; //@line 31100
 }
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($16); //@line 31102
 $$5 = $$0$i; //@line 31103
 $$59 = $$04$i; //@line 31103
 __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($5); //@line 31104
 ___resumeException($$59 | 0); //@line 31105
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $107 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $288 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12116
 STACKTOP = STACKTOP + 512 | 0; //@line 12117
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 12117
 $6 = sp; //@line 12118
 $sum = $3 + $2 | 0; //@line 12119
 $7 = 0 - $sum | 0; //@line 12120
 $8 = $0 + 4 | 0; //@line 12121
 $9 = $0 + 100 | 0; //@line 12122
 $$0329 = $1; //@line 12123
 $$0396 = 0; //@line 12123
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 12127
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 12135
    $$2 = $$0329; //@line 12135
    $$2398 = $$0396; //@line 12135
    $368 = 0; //@line 12135
    $369 = 0; //@line 12135
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 12139
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 12144
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 12147
   $$0396 = 1; //@line 12147
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 12151
   $$0396 = 1; //@line 12151
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 12156
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 12161
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 12164
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 12167
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 12171
   $26 = 0; //@line 12171
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 12173
    $28 = tempRet0; //@line 12174
    $29 = HEAP32[$8 >> 2] | 0; //@line 12175
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 12180
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 12183
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 12186
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 12190
     $26 = $28; //@line 12190
    } else {
     $$0393 = 1; //@line 12192
     $$2 = $$1330$be; //@line 12192
     $$2398 = 1; //@line 12192
     $368 = $27; //@line 12192
     $369 = $28; //@line 12192
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 12197
   $$2 = $$1330$ph; //@line 12197
   $$2398 = $$0396; //@line 12197
   $368 = 0; //@line 12197
   $369 = 0; //@line 12197
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 12200
 $37 = $$2 + -48 | 0; //@line 12201
 $39 = ($$2 | 0) == 46; //@line 12203
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 12207
   $$0341511 = 0; //@line 12208
   $$0345510 = 0; //@line 12208
   $$0401507 = 0; //@line 12208
   $$1394509 = $$0393; //@line 12208
   $$3399508 = $$2398; //@line 12208
   $$3512 = $$2; //@line 12208
   $370 = $39; //@line 12208
   $371 = $37; //@line 12208
   $372 = $368; //@line 12208
   $373 = $369; //@line 12208
   $44 = 0; //@line 12208
   $45 = 0; //@line 12208
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 12214
       $$2347 = $$0345510; //@line 12214
       $$2395 = 1; //@line 12214
       $$2403 = $$0401507; //@line 12214
       $$4400 = $$3399508; //@line 12214
       $374 = $44; //@line 12214
       $375 = $45; //@line 12214
       $376 = $44; //@line 12214
       $377 = $45; //@line 12214
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 12220
      $47 = tempRet0; //@line 12221
      $48 = ($$3512 | 0) != 48; //@line 12222
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 12225
        $$2347 = $$0345510; //@line 12225
        $$2395 = $$1394509; //@line 12225
        $$2403 = $$0401507; //@line 12225
        $$4400 = $$3399508; //@line 12225
        $374 = $372; //@line 12225
        $375 = $373; //@line 12225
        $376 = $46; //@line 12225
        $377 = $47; //@line 12225
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 12230
       $$2343 = $$0341511; //@line 12231
       $$2347 = $$0345510; //@line 12231
       $$2395 = $$1394509; //@line 12231
       $$2403 = $$0401507; //@line 12231
       $$4400 = $$3399508; //@line 12231
       $374 = $372; //@line 12231
       $375 = $373; //@line 12231
       $376 = $46; //@line 12231
       $377 = $47; //@line 12231
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 12236
      if (!$$0341511) {
       $$sink = $371; //@line 12238
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 12244
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 12246
      $54 = $$0341511 + 1 | 0; //@line 12247
      $55 = ($54 | 0) == 9; //@line 12248
      $$2343 = $55 ? 0 : $54; //@line 12252
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 12252
      $$2395 = $$1394509; //@line 12252
      $$2403 = $48 ? $46 : $$0401507; //@line 12252
      $$4400 = 1; //@line 12252
      $374 = $372; //@line 12252
      $375 = $373; //@line 12252
      $376 = $46; //@line 12252
      $377 = $47; //@line 12252
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 12255
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 12260
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 12263
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 12266
    }
    $371 = $$3$be + -48 | 0; //@line 12268
    $370 = ($$3$be | 0) == 46; //@line 12270
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 12275
     $$0345$lcssa = $$2347; //@line 12275
     $$0401$lcssa = $$2403; //@line 12275
     $$1394$lcssa = $$2395; //@line 12275
     $$3$lcssa = $$3$be; //@line 12275
     $$3399$lcssa = $$4400; //@line 12275
     $71 = $374; //@line 12275
     $72 = $376; //@line 12275
     $74 = $375; //@line 12275
     $75 = $377; //@line 12275
     label = 29; //@line 12276
     break L20;
    } else {
     $$0341511 = $$2343; //@line 12273
     $$0345510 = $$2347; //@line 12273
     $$0401507 = $$2403; //@line 12273
     $$1394509 = $$2395; //@line 12273
     $$3399508 = $$4400; //@line 12273
     $$3512 = $$3$be; //@line 12273
     $372 = $374; //@line 12273
     $373 = $375; //@line 12273
     $44 = $376; //@line 12273
     $45 = $377; //@line 12273
    }
   }
   $$0341463 = $$0341511; //@line 12281
   $$0345467 = $$0345510; //@line 12281
   $$0401473 = $$0401507; //@line 12281
   $378 = $44; //@line 12281
   $379 = $45; //@line 12281
   $380 = $372; //@line 12281
   $381 = $373; //@line 12281
   $382 = ($$3399508 | 0) != 0; //@line 12281
   label = 37; //@line 12282
  } else {
   $$0341$lcssa = 0; //@line 12284
   $$0345$lcssa = 0; //@line 12284
   $$0401$lcssa = 0; //@line 12284
   $$1394$lcssa = $$0393; //@line 12284
   $$3$lcssa = $$2; //@line 12284
   $$3399$lcssa = $$2398; //@line 12284
   $71 = $368; //@line 12284
   $72 = 0; //@line 12284
   $74 = $369; //@line 12284
   $75 = 0; //@line 12284
   label = 29; //@line 12285
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 12290
   $73 = $70 ? $72 : $71; //@line 12291
   $76 = $70 ? $75 : $74; //@line 12292
   $77 = ($$3399$lcssa | 0) != 0; //@line 12293
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 12300
     $$0345467 = $$0345$lcssa; //@line 12300
     $$0401473 = $$0401$lcssa; //@line 12300
     $378 = $72; //@line 12300
     $379 = $75; //@line 12300
     $380 = $73; //@line 12300
     $381 = $76; //@line 12300
     $382 = $77; //@line 12300
     label = 37; //@line 12301
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 12304
     $$0345466 = $$0345$lcssa; //@line 12304
     $$0401472 = $$0401$lcssa; //@line 12304
     $383 = $72; //@line 12304
     $384 = $75; //@line 12304
     $385 = $77; //@line 12304
     $386 = $73; //@line 12304
     $387 = $76; //@line 12304
     label = 39; //@line 12305
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 12309
   $81 = tempRet0; //@line 12310
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 12317
     $$1 = 0.0; //@line 12318
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 12324
     $91 = 0; //@line 12324
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 12328
     $90 = 0; //@line 12329
     $91 = 0; //@line 12329
    }
   } else {
    $90 = $80; //@line 12332
    $91 = $81; //@line 12332
   }
   $92 = _i64Add($90 | 0, $91 | 0, $73 | 0, $76 | 0) | 0; //@line 12334
   $$0341461 = $$0341$lcssa; //@line 12336
   $$0345465 = $$0345$lcssa; //@line 12336
   $$0401471 = $$0401$lcssa; //@line 12336
   $104 = $92; //@line 12336
   $106 = $72; //@line 12336
   $107 = tempRet0; //@line 12336
   $109 = $75; //@line 12336
   label = 41; //@line 12337
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 12344
   $$0345466 = $$0345467; //@line 12344
   $$0401472 = $$0401473; //@line 12344
   $383 = $378; //@line 12344
   $384 = $379; //@line 12344
   $385 = $382; //@line 12344
   $386 = $380; //@line 12344
   $387 = $381; //@line 12344
   label = 39; //@line 12345
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 12349
   if ($382) {
    $$0341461 = $$0341463; //@line 12351
    $$0345465 = $$0345467; //@line 12351
    $$0401471 = $$0401473; //@line 12351
    $104 = $380; //@line 12351
    $106 = $378; //@line 12351
    $107 = $381; //@line 12351
    $109 = $379; //@line 12351
    label = 41; //@line 12352
   } else {
    label = 40; //@line 12354
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 12360
   $$0345465 = $$0345466; //@line 12360
   $$0401471 = $$0401472; //@line 12360
   $104 = $386; //@line 12360
   $106 = $383; //@line 12360
   $107 = $387; //@line 12360
   $109 = $384; //@line 12360
   label = 41; //@line 12361
  } else {
   label = 40; //@line 12363
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 12369
   ___shlim($0, 0); //@line 12370
   $$1 = 0.0; //@line 12371
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 12374
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 12379
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($104 | 0) == ($106 | 0) & ($107 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 12400
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 12404
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 12406
   if (($107 | 0) > ($124 | 0) | ($107 | 0) == ($124 | 0) & $104 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 12414
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 12418
    break;
   }
   $134 = $3 + -106 | 0; //@line 12421
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 12423
   if (($107 | 0) < ($136 | 0) | ($107 | 0) == ($136 | 0) & $104 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 12431
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 12435
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 12440
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 12444
     $$3344501 = $$0341461; //@line 12446
     $150 = HEAP32[$148 >> 2] | 0; //@line 12446
     while (1) {
      $150 = $150 * 10 | 0; //@line 12448
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 12452
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 12457
    }
    $$3348 = $$0345465 + 1 | 0; //@line 12460
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($104 | 0) & ($104 | 0) < 18) {
     if (($104 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 12474
      break;
     }
     if (($104 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[5968 + (8 - $104 << 2) >> 2] | 0); //@line 12488
      break;
     }
     $172 = $2 + 27 + (Math_imul($104, -3) | 0) | 0; //@line 12493
     $$pre = HEAP32[$6 >> 2] | 0; //@line 12495
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[5968 + ($104 + -10 << 2) >> 2] | 0); //@line 12508
      break;
     }
    }
   }
   $184 = ($104 | 0) % 9 | 0; //@line 12513
   if (!$184) {
    $$0380$ph = 0; //@line 12516
    $$1373$ph446 = $$3348; //@line 12516
    $$2352$ph447 = 0; //@line 12516
    $$2387$ph445 = $104; //@line 12516
   } else {
    $188 = ($104 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 12520
    $191 = HEAP32[5968 + (8 - $188 << 2) >> 2] | 0; //@line 12523
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 12526
     $$0372 = 0; //@line 12526
     $$0385$lcssa552 = $104; //@line 12526
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 12528
     $$0340494 = 0; //@line 12529
     $$0350492 = 0; //@line 12529
     $$0385491 = $104; //@line 12529
     $$4349493 = 0; //@line 12529
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 12531
      $195 = HEAP32[$194 >> 2] | 0; //@line 12532
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 12535
      HEAP32[$194 >> 2] = $198; //@line 12536
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 12537
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 12540
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 12544
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 12545
      $$4349493 = $$4349493 + 1 | 0; //@line 12546
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 12556
      $$0372 = $$3348; //@line 12556
      $$0385$lcssa552 = $$0385491; //@line 12556
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 12560
      $$0350$lcssa553 = $$0350492; //@line 12561
      $$0372 = $$3348 + 1 | 0; //@line 12561
      $$0385$lcssa552 = $$0385491; //@line 12561
     }
    }
    $$0380$ph = 0; //@line 12566
    $$1373$ph446 = $$0372; //@line 12566
    $$2352$ph447 = $$0350$lcssa553; //@line 12566
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 12566
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 12569
    $213 = ($$2387$ph445 | 0) == 18; //@line 12570
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 12571
    $$0380 = $$0380$ph; //@line 12572
    $$1373 = $$1373$ph446; //@line 12572
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 12576
       $$4354$ph = $$2352$ph447; //@line 12576
       $$4389$ph443 = $$2387$ph445; //@line 12576
       $$6378$ph = $$1373; //@line 12576
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 12582
       $$4354$ph = $$2352$ph447; //@line 12582
       $$4389$ph443 = 18; //@line 12582
       $$6378$ph = $$1373; //@line 12582
       break L101;
      }
     }
     $$0334 = 0; //@line 12587
     $$2374 = $$1373; //@line 12587
     $$5$in = $$1373 + 127 | 0; //@line 12587
     while (1) {
      $$5 = $$5$in & 127; //@line 12589
      $218 = $6 + ($$5 << 2) | 0; //@line 12590
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 12592
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 12594
      $223 = tempRet0; //@line 12595
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 12602
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 12604
       $$1335 = $229; //@line 12606
       $$sink419$off0 = $231; //@line 12606
      } else {
       $$1335 = 0; //@line 12608
       $$sink419$off0 = $222; //@line 12608
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 12610
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 12614
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 12619
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 12624
       $$5$in = $$5 + -1 | 0; //@line 12624
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 12627
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 12630
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 12637
    $246 = $$2374 + 127 & 127; //@line 12640
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 12643
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 12649
     $$4376 = $246; //@line 12650
    } else {
     $$4376 = $$2374; //@line 12652
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 12655
    $$0380$ph = $$0380; //@line 12656
    $$1373$ph446 = $$4376; //@line 12656
    $$2352$ph447 = $243; //@line 12656
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 12656
   }
   L119 : while (1) {
    $288 = $$6378$ph + 1 & 127; //@line 12660
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 12663
    $$1381$ph557 = $$1381$ph; //@line 12664
    $$4354$ph558 = $$4354$ph; //@line 12664
    $$4389$ph = $$4389$ph443; //@line 12664
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 12666
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 12668
     $$1381 = $$1381$ph557; //@line 12669
     $$4354 = $$4354$ph558; //@line 12669
     while (1) {
      $$0336484 = 0; //@line 12671
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 12674
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 12677
        label = 88; //@line 12678
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 12682
       $261 = HEAP32[6e3 + ($$0336484 << 2) >> 2] | 0; //@line 12684
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 12687
        label = 88; //@line 12688
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 12695
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 12698
       } else {
        $$1337 = $264; //@line 12700
        label = 88; //@line 12701
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 12706
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 12710
        $$4483 = 0; //@line 12710
        $$9481 = $$6378$ph; //@line 12710
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 12714
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 12717
       $$4354 = $$6378$ph; //@line 12717
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 12723
     $272 = 1e9 >>> $$423; //@line 12724
     $$0332488 = 0; //@line 12725
     $$5355486 = $$4354; //@line 12725
     $$5390485 = $$4389$ph; //@line 12725
     $$6487 = $$4354; //@line 12725
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 12727
      $274 = HEAP32[$273 >> 2] | 0; //@line 12728
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 12731
      HEAP32[$273 >> 2] = $277; //@line 12732
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 12733
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 12736
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 12740
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 12741
      $$6487 = $$6487 + 1 & 127; //@line 12743
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 12753
      $$4354$ph558 = $$5355486; //@line 12753
      $$4389$ph = $$5390485; //@line 12753
      continue;
     }
     if (($288 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 12762
     $$1381$ph557 = $268; //@line 12763
     $$4354$ph558 = $$5355486; //@line 12763
     $$4389$ph = $$5390485; //@line 12763
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 12766
    $$1381$ph = $268; //@line 12767
    $$4354$ph = $$5355486; //@line 12767
    $$4389$ph443 = $$5390485; //@line 12767
    $$6378$ph = $288; //@line 12767
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 12771
    $302 = $$9481 + 1 & 127; //@line 12774
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 12778
     $$10 = $302; //@line 12779
    } else {
     $$10 = $$9481; //@line 12781
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 12787
    $$4483 = $$4483 + 1 | 0; //@line 12788
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 12793
    }
   }
   $311 = +($4 | 0); //@line 12796
   $312 = $$0365482 * $311; //@line 12797
   $313 = $$1381 + 53 | 0; //@line 12798
   $314 = $313 - $3 | 0; //@line 12799
   $315 = ($314 | 0) < ($2 | 0); //@line 12800
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 12803
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 12808
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 12811
    $$0360 = $320; //@line 12814
    $$0361 = $323; //@line 12814
    $$1366 = $320 + ($312 - $323); //@line 12814
   } else {
    $$0360 = 0.0; //@line 12816
    $$0361 = 0.0; //@line 12816
    $$1366 = $312; //@line 12816
   }
   $327 = $$4354 + 2 & 127; //@line 12819
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 12822
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 12825
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 12835
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 12841
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 12847
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 12856
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 12861
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 12872
     } else {
      $$3364 = $$1362 + 1.0; //@line 12875
     }
    } else {
     $$3364 = $$1362; //@line 12878
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 12882
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 12889
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 12893
     $$2367 = $359 ? $354 : $354 * .5; //@line 12894
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 12904
       $$4384 = $$3383; //@line 12904
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 12909
     $$3368 = $$2367; //@line 12910
     $$4384 = $$3383; //@line 12910
    } else {
     $$3368 = $354; //@line 12912
     $$4384 = $$1381; //@line 12912
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 12916
  }
 } while (0);
 STACKTOP = sp; //@line 12919
 return +$$1;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i$i = 0, $$09$i$i$i = 0, $$1$i$i$i = 0, $$110$i$i$i = 0, $$2$i$i$i = 0, $$211$i$i$i = 0, $$3$i$i$i = 0, $$312$i$i$i = 0, $$byval_copy9 = 0, $$sroa$097$0106$i$i$i = 0, $$val = 0, $$val3 = 0, $103 = 0, $106 = 0, $110 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $125 = 0, $127 = 0, $13 = 0, $136 = 0, $138 = 0, $140 = 0, $141 = 0, $142 = 0, $146 = 0, $148 = 0, $15 = 0, $152 = 0, $154 = 0, $156 = 0, $16 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $174 = 0, $176 = 0, $177 = 0, $182 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $20 = 0, $200 = 0, $202 = 0, $207 = 0, $21 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $224 = 0, $226 = 0, $227 = 0, $23 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $241 = 0, $242 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $254 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $267 = 0, $268 = 0, $27 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $282 = 0, $287 = 0, $288 = 0, $29 = 0, $291 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $303 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $313 = 0, $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $65 = 0, $69 = 0, $7 = 0, $72 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $87 = 0, $89 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1089
 STACKTOP = STACKTOP + 368 | 0; //@line 1090
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368); //@line 1090
 $$byval_copy9 = sp + 361 | 0; //@line 1091
 $3 = sp + 360 | 0; //@line 1092
 $4 = sp + 288 | 0; //@line 1093
 $5 = sp + 216 | 0; //@line 1094
 $6 = sp + 144 | 0; //@line 1095
 $7 = sp + 72 | 0; //@line 1096
 $8 = sp; //@line 1097
 $$val = HEAP32[$1 >> 2] | 0; //@line 1098
 $$val3 = HEAP32[$2 >> 2] | 0; //@line 1099
 __ZN5Stack3popEv($4, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 1101
 do {
  if ((HEAP32[$4 >> 2] | 0) == 1) {
   $12 = $5 + 4 | 0; //@line 1106
   HEAP32[$12 >> 2] = 0; //@line 1107
   HEAP32[$12 + 4 >> 2] = 0; //@line 1107
   HEAP32[$12 + 8 >> 2] = 0; //@line 1107
   $13 = $5 + 40 | 0; //@line 1108
   HEAP32[$13 >> 2] = 0; //@line 1109
   HEAP32[$13 + 4 >> 2] = 0; //@line 1109
   HEAP32[$13 + 8 >> 2] = 0; //@line 1109
   HEAP32[$13 + 12 >> 2] = 0; //@line 1109
   HEAP32[$13 + 16 >> 2] = 0; //@line 1109
   HEAP32[$13 + 20 >> 2] = 0; //@line 1109
   HEAP32[$5 >> 2] = 1; //@line 1110
   $15 = HEAP32[$4 + 40 >> 2] | 0; //@line 1112
   $16 = $4 + 44 | 0; //@line 1113
   $17 = HEAP32[$16 >> 2] | 0; //@line 1114
   L3 : do {
    if (($15 | 0) == ($17 | 0)) {
     label = 4; //@line 1118
    } else {
     $19 = $$val3 + 4 | 0; //@line 1120
     $20 = $5 + 40 | 0; //@line 1121
     $21 = $7 + 52 | 0; //@line 1122
     $22 = $21 + 11 | 0; //@line 1123
     $23 = $7 + 40 | 0; //@line 1124
     $24 = $7 + 4 | 0; //@line 1125
     $25 = $24 + 11 | 0; //@line 1126
     $26 = $5 + 44 | 0; //@line 1127
     $27 = $5 + 48 | 0; //@line 1128
     $28 = $7 + 44 | 0; //@line 1129
     $29 = $7 + 48 | 0; //@line 1130
     $30 = $6 + 52 | 0; //@line 1131
     $31 = $30 + 11 | 0; //@line 1132
     $32 = $6 + 40 | 0; //@line 1133
     $33 = $6 + 4 | 0; //@line 1134
     $34 = $33 + 11 | 0; //@line 1135
     $35 = $6 + 44 | 0; //@line 1136
     $36 = $6 + 48 | 0; //@line 1137
     $$sroa$097$0106$i$i$i = $15; //@line 1138
     L5 : while (1) {
      __THREW__ = 0; //@line 1140
      invoke_vii(120, $6 | 0, $$sroa$097$0106$i$i$i | 0); //@line 1141
      $40 = __THREW__; //@line 1142
      __THREW__ = 0; //@line 1142
      if ($40 & 1) {
       label = 25; //@line 1145
       break;
      }
      do {
       if ((HEAP32[$6 >> 2] | 0) == 4) {
        $44 = HEAP32[$19 >> 2] | 0; //@line 1152
        __THREW__ = 0; //@line 1153
        invoke_vii(120, $7 | 0, $6 | 0); //@line 1154
        $45 = __THREW__; //@line 1155
        __THREW__ = 0; //@line 1155
        if ($45 & 1) {
         label = 26; //@line 1158
         break L5;
        }
        __THREW__ = 0; //@line 1161
        $47 = invoke_iiii(31, $44 | 0, $20 | 0, $7 | 0) | 0; //@line 1162
        $48 = __THREW__; //@line 1163
        __THREW__ = 0; //@line 1163
        if ($48 & 1) {
         label = 27; //@line 1166
         break L5;
        }
        if ((HEAP8[$22 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$21 >> 2] | 0); //@line 1173
        }
        $53 = HEAP32[$23 >> 2] | 0; //@line 1175
        if ($53 | 0) {
         $55 = HEAP32[$28 >> 2] | 0; //@line 1178
         if (($55 | 0) == ($53 | 0)) {
          $65 = $53; //@line 1181
         } else {
          $58 = $55; //@line 1183
          do {
           $57 = $58 + -72 | 0; //@line 1185
           HEAP32[$28 >> 2] = $57; //@line 1186
           __THREW__ = 0; //@line 1187
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1188
           invoke_viii(13, $$byval_copy9 | 0, $29 | 0, $57 | 0); //@line 1189
           $59 = __THREW__; //@line 1190
           __THREW__ = 0; //@line 1190
           if ($59 & 1) {
            label = 15; //@line 1193
            break L5;
           }
           $58 = HEAP32[$28 >> 2] | 0; //@line 1196
          } while (($58 | 0) != ($53 | 0));
          $65 = HEAP32[$23 >> 2] | 0; //@line 1205
         }
         __ZdlPv($65); //@line 1207
        }
        if ((HEAP8[$25 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 1213
        }
        if (!$47) {
         $69 = HEAP32[$26 >> 2] | 0; //@line 1216
         if (($69 | 0) == (HEAP32[$27 >> 2] | 0)) {
          __THREW__ = 0; //@line 1220
          invoke_vii(134, $20 | 0, $6 | 0); //@line 1221
          $76 = __THREW__; //@line 1222
          __THREW__ = 0; //@line 1222
          if ($76 & 1) {
           label = 26; //@line 1225
           break L5;
          } else {
           break;
          }
         }
         __THREW__ = 0; //@line 1231
         invoke_vii(120, $69 | 0, $6 | 0); //@line 1232
         $72 = __THREW__; //@line 1233
         __THREW__ = 0; //@line 1233
         if ($72 & 1) {
          label = 26; //@line 1236
          break L5;
         }
         HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 72; //@line 1241
        }
       } else {
        $103 = HEAP32[$26 >> 2] | 0; //@line 1244
        if (($103 | 0) == (HEAP32[$27 >> 2] | 0)) {
         __THREW__ = 0; //@line 1248
         invoke_vii(134, $20 | 0, $6 | 0); //@line 1249
         $110 = __THREW__; //@line 1250
         __THREW__ = 0; //@line 1250
         if ($110 & 1) {
          label = 26; //@line 1253
          break L5;
         } else {
          break;
         }
        }
        __THREW__ = 0; //@line 1259
        invoke_vii(120, $103 | 0, $6 | 0); //@line 1260
        $106 = __THREW__; //@line 1261
        __THREW__ = 0; //@line 1261
        if ($106 & 1) {
         label = 26; //@line 1264
         break L5;
        }
        HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 72; //@line 1269
       }
      } while (0);
      if ((HEAP8[$31 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 1276
      }
      $115 = HEAP32[$32 >> 2] | 0; //@line 1278
      if ($115 | 0) {
       $117 = HEAP32[$35 >> 2] | 0; //@line 1281
       if (($117 | 0) == ($115 | 0)) {
        $127 = $115; //@line 1284
       } else {
        $120 = $117; //@line 1286
        do {
         $119 = $120 + -72 | 0; //@line 1288
         HEAP32[$35 >> 2] = $119; //@line 1289
         __THREW__ = 0; //@line 1290
         HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1291
         invoke_viii(13, $$byval_copy9 | 0, $36 | 0, $119 | 0); //@line 1292
         $121 = __THREW__; //@line 1293
         __THREW__ = 0; //@line 1293
         if ($121 & 1) {
          label = 49; //@line 1296
          break L5;
         }
         $120 = HEAP32[$35 >> 2] | 0; //@line 1299
        } while (($120 | 0) != ($115 | 0));
        $127 = HEAP32[$32 >> 2] | 0; //@line 1308
       }
       __ZdlPv($127); //@line 1310
      }
      if ((HEAP8[$34 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$33 >> 2] | 0); //@line 1316
      }
      $$sroa$097$0106$i$i$i = $$sroa$097$0106$i$i$i + 72 | 0; //@line 1318
      if (($$sroa$097$0106$i$i$i | 0) == ($17 | 0)) {
       label = 4; //@line 1321
       break L3;
      }
     }
     if ((label | 0) == 15) {
      $63 = ___cxa_find_matching_catch_3(0) | 0; //@line 1328
      ___clang_call_terminate($63); //@line 1330
     } else if ((label | 0) == 25) {
      $78 = ___cxa_find_matching_catch_2() | 0; //@line 1334
      $$1$i$i$i = tempRet0; //@line 1336
      $$110$i$i$i = $78; //@line 1336
     } else if ((label | 0) == 26) {
      $80 = ___cxa_find_matching_catch_2() | 0; //@line 1339
      $$0$i$i$i = tempRet0; //@line 1341
      $$09$i$i$i = $80; //@line 1341
      label = 55; //@line 1342
     } else if ((label | 0) == 27) {
      $82 = ___cxa_find_matching_catch_2() | 0; //@line 1345
      $83 = tempRet0; //@line 1346
      if ((HEAP8[$22 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$21 >> 2] | 0); //@line 1351
      }
      $87 = HEAP32[$23 >> 2] | 0; //@line 1353
      if ($87 | 0) {
       $89 = HEAP32[$28 >> 2] | 0; //@line 1356
       do {
        if (($89 | 0) == ($87 | 0)) {
         $99 = $87; //@line 1360
        } else {
         $92 = $89; //@line 1362
         while (1) {
          $91 = $92 + -72 | 0; //@line 1364
          HEAP32[$28 >> 2] = $91; //@line 1365
          __THREW__ = 0; //@line 1366
          HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1367
          invoke_viii(13, $$byval_copy9 | 0, $29 | 0, $91 | 0); //@line 1368
          $93 = __THREW__; //@line 1369
          __THREW__ = 0; //@line 1369
          if ($93 & 1) {
           label = 34; //@line 1372
           break;
          }
          $92 = HEAP32[$28 >> 2] | 0; //@line 1375
          if (($92 | 0) == ($87 | 0)) {
           label = 35; //@line 1378
           break;
          }
         }
         if ((label | 0) == 34) {
          $97 = ___cxa_find_matching_catch_3(0) | 0; //@line 1385
          ___clang_call_terminate($97); //@line 1387
         } else if ((label | 0) == 35) {
          $99 = HEAP32[$23 >> 2] | 0; //@line 1392
          break;
         }
        }
       } while (0);
       __ZdlPv($99); //@line 1397
      }
      if ((HEAP8[$25 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 1403
       $$0$i$i$i = $83; //@line 1404
       $$09$i$i$i = $82; //@line 1404
       label = 55; //@line 1405
      } else {
       $$0$i$i$i = $83; //@line 1407
       $$09$i$i$i = $82; //@line 1407
       label = 55; //@line 1408
      }
     } else if ((label | 0) == 49) {
      $125 = ___cxa_find_matching_catch_3(0) | 0; //@line 1412
      ___clang_call_terminate($125); //@line 1414
     }
     if ((label | 0) == 55) {
      if ((HEAP8[$31 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 1422
      }
      $136 = HEAP32[$32 >> 2] | 0; //@line 1424
      if ($136 | 0) {
       $138 = HEAP32[$35 >> 2] | 0; //@line 1427
       do {
        if (($138 | 0) == ($136 | 0)) {
         $148 = $136; //@line 1431
        } else {
         $141 = $138; //@line 1433
         while (1) {
          $140 = $141 + -72 | 0; //@line 1435
          HEAP32[$35 >> 2] = $140; //@line 1436
          __THREW__ = 0; //@line 1437
          HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1438
          invoke_viii(13, $$byval_copy9 | 0, $36 | 0, $140 | 0); //@line 1439
          $142 = __THREW__; //@line 1440
          __THREW__ = 0; //@line 1440
          if ($142 & 1) {
           label = 62; //@line 1443
           break;
          }
          $141 = HEAP32[$35 >> 2] | 0; //@line 1446
          if (($141 | 0) == ($136 | 0)) {
           label = 63; //@line 1449
           break;
          }
         }
         if ((label | 0) == 62) {
          $146 = ___cxa_find_matching_catch_3(0) | 0; //@line 1456
          ___clang_call_terminate($146); //@line 1458
         } else if ((label | 0) == 63) {
          $148 = HEAP32[$32 >> 2] | 0; //@line 1463
          break;
         }
        }
       } while (0);
       __ZdlPv($148); //@line 1468
      }
      if ((HEAP8[$34 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$33 >> 2] | 0); //@line 1474
       $$1$i$i$i = $$0$i$i$i; //@line 1475
       $$110$i$i$i = $$09$i$i$i; //@line 1475
      } else {
       $$1$i$i$i = $$0$i$i$i; //@line 1477
       $$110$i$i$i = $$09$i$i$i; //@line 1477
      }
     }
     $$2$i$i$i = $$1$i$i$i; //@line 1480
     $$211$i$i$i = $$110$i$i$i; //@line 1480
    }
   } while (0);
   do {
    if ((label | 0) == 4) {
     __THREW__ = 0; //@line 1485
     $37 = invoke_ii(143, $$val | 0) | 0; //@line 1486
     $38 = __THREW__; //@line 1487
     __THREW__ = 0; //@line 1487
     if (!($38 & 1)) {
      __THREW__ = 0; //@line 1490
      invoke_vii(120, $8 | 0, $5 | 0); //@line 1491
      $152 = __THREW__; //@line 1492
      __THREW__ = 0; //@line 1492
      if (!($152 & 1)) {
       __THREW__ = 0; //@line 1495
       invoke_vii(128, $37 | 0, $8 | 0); //@line 1496
       $154 = __THREW__; //@line 1497
       __THREW__ = 0; //@line 1497
       if ($154 & 1) {
        $234 = ___cxa_find_matching_catch_2() | 0; //@line 1500
        $235 = tempRet0; //@line 1501
        $236 = $8 + 52 | 0; //@line 1502
        if ((HEAP8[$236 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$236 >> 2] | 0); //@line 1508
        }
        $241 = $8 + 40 | 0; //@line 1510
        $242 = HEAP32[$241 >> 2] | 0; //@line 1511
        if ($242 | 0) {
         $244 = $8 + 44 | 0; //@line 1514
         $245 = HEAP32[$244 >> 2] | 0; //@line 1515
         do {
          if (($245 | 0) == ($242 | 0)) {
           $256 = $242; //@line 1519
          } else {
           $247 = $8 + 48 | 0; //@line 1521
           $249 = $245; //@line 1522
           while (1) {
            $248 = $249 + -72 | 0; //@line 1524
            HEAP32[$244 >> 2] = $248; //@line 1525
            __THREW__ = 0; //@line 1526
            HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1527
            invoke_viii(13, $$byval_copy9 | 0, $247 | 0, $248 | 0); //@line 1528
            $250 = __THREW__; //@line 1529
            __THREW__ = 0; //@line 1529
            if ($250 & 1) {
             label = 114; //@line 1532
             break;
            }
            $249 = HEAP32[$244 >> 2] | 0; //@line 1535
            if (($249 | 0) == ($242 | 0)) {
             label = 115; //@line 1538
             break;
            }
           }
           if ((label | 0) == 114) {
            $254 = ___cxa_find_matching_catch_3(0) | 0; //@line 1545
            ___clang_call_terminate($254); //@line 1547
           } else if ((label | 0) == 115) {
            $256 = HEAP32[$241 >> 2] | 0; //@line 1552
            break;
           }
          }
         } while (0);
         __ZdlPv($256); //@line 1557
        }
        $257 = $8 + 4 | 0; //@line 1559
        if ((HEAP8[$257 + 11 >> 0] | 0) >= 0) {
         $$2$i$i$i = $235; //@line 1564
         $$211$i$i$i = $234; //@line 1564
         break;
        }
        __ZdlPv(HEAP32[$257 >> 2] | 0); //@line 1568
        $$2$i$i$i = $235; //@line 1569
        $$211$i$i$i = $234; //@line 1569
        break;
       }
       $156 = $8 + 52 | 0; //@line 1572
       if ((HEAP8[$156 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$156 >> 2] | 0); //@line 1578
       }
       $161 = $8 + 40 | 0; //@line 1580
       $162 = HEAP32[$161 >> 2] | 0; //@line 1581
       if ($162 | 0) {
        $164 = $8 + 44 | 0; //@line 1584
        $165 = HEAP32[$164 >> 2] | 0; //@line 1585
        do {
         if (($165 | 0) == ($162 | 0)) {
          $176 = $162; //@line 1589
         } else {
          $167 = $8 + 48 | 0; //@line 1591
          $169 = $165; //@line 1592
          while (1) {
           $168 = $169 + -72 | 0; //@line 1594
           HEAP32[$164 >> 2] = $168; //@line 1595
           __THREW__ = 0; //@line 1596
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1597
           invoke_viii(13, $$byval_copy9 | 0, $167 | 0, $168 | 0); //@line 1598
           $170 = __THREW__; //@line 1599
           __THREW__ = 0; //@line 1599
           if ($170 & 1) {
            label = 77; //@line 1602
            break;
           }
           $169 = HEAP32[$164 >> 2] | 0; //@line 1605
           if (($169 | 0) == ($162 | 0)) {
            label = 78; //@line 1608
            break;
           }
          }
          if ((label | 0) == 77) {
           $174 = ___cxa_find_matching_catch_3(0) | 0; //@line 1615
           ___clang_call_terminate($174); //@line 1617
          } else if ((label | 0) == 78) {
           $176 = HEAP32[$161 >> 2] | 0; //@line 1622
           break;
          }
         }
        } while (0);
        __ZdlPv($176); //@line 1627
       }
       $177 = $8 + 4 | 0; //@line 1629
       if ((HEAP8[$177 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$177 >> 2] | 0); //@line 1635
       }
       $182 = $5 + 52 | 0; //@line 1637
       if ((HEAP8[$182 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$182 >> 2] | 0); //@line 1643
       }
       $187 = $5 + 40 | 0; //@line 1645
       $188 = HEAP32[$187 >> 2] | 0; //@line 1646
       if ($188 | 0) {
        $190 = $5 + 44 | 0; //@line 1649
        $191 = HEAP32[$190 >> 2] | 0; //@line 1650
        do {
         if (($191 | 0) == ($188 | 0)) {
          $202 = $188; //@line 1654
         } else {
          $193 = $5 + 48 | 0; //@line 1656
          $195 = $191; //@line 1657
          while (1) {
           $194 = $195 + -72 | 0; //@line 1659
           HEAP32[$190 >> 2] = $194; //@line 1660
           __THREW__ = 0; //@line 1661
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1662
           invoke_viii(13, $$byval_copy9 | 0, $193 | 0, $194 | 0); //@line 1663
           $196 = __THREW__; //@line 1664
           __THREW__ = 0; //@line 1664
           if ($196 & 1) {
            label = 89; //@line 1667
            break;
           }
           $195 = HEAP32[$190 >> 2] | 0; //@line 1670
           if (($195 | 0) == ($188 | 0)) {
            label = 90; //@line 1673
            break;
           }
          }
          if ((label | 0) == 89) {
           $200 = ___cxa_find_matching_catch_3(0) | 0; //@line 1680
           ___clang_call_terminate($200); //@line 1682
          } else if ((label | 0) == 90) {
           $202 = HEAP32[$187 >> 2] | 0; //@line 1687
           break;
          }
         }
        } while (0);
        __ZdlPv($202); //@line 1692
       }
       if ((HEAP8[$12 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 1699
       }
       $207 = $4 + 52 | 0; //@line 1701
       if ((HEAP8[$207 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$207 >> 2] | 0); //@line 1707
       }
       $212 = $4 + 40 | 0; //@line 1709
       $213 = HEAP32[$212 >> 2] | 0; //@line 1710
       if ($213 | 0) {
        $215 = HEAP32[$16 >> 2] | 0; //@line 1713
        do {
         if (($215 | 0) == ($213 | 0)) {
          $226 = $213; //@line 1717
         } else {
          $217 = $4 + 48 | 0; //@line 1719
          $219 = $215; //@line 1720
          while (1) {
           $218 = $219 + -72 | 0; //@line 1722
           HEAP32[$16 >> 2] = $218; //@line 1723
           __THREW__ = 0; //@line 1724
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1725
           invoke_viii(13, $$byval_copy9 | 0, $217 | 0, $218 | 0); //@line 1726
           $220 = __THREW__; //@line 1727
           __THREW__ = 0; //@line 1727
           if ($220 & 1) {
            label = 101; //@line 1730
            break;
           }
           $219 = HEAP32[$16 >> 2] | 0; //@line 1733
           if (($219 | 0) == ($213 | 0)) {
            label = 102; //@line 1736
            break;
           }
          }
          if ((label | 0) == 101) {
           $224 = ___cxa_find_matching_catch_3(0) | 0; //@line 1743
           ___clang_call_terminate($224); //@line 1745
          } else if ((label | 0) == 102) {
           $226 = HEAP32[$212 >> 2] | 0; //@line 1750
           break;
          }
         }
        } while (0);
        __ZdlPv($226); //@line 1755
       }
       $227 = $4 + 4 | 0; //@line 1757
       if ((HEAP8[$227 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 1762
        return;
       }
       __ZdlPv(HEAP32[$227 >> 2] | 0); //@line 1765
       STACKTOP = sp; //@line 1766
       return;
      }
     }
     $232 = ___cxa_find_matching_catch_2() | 0; //@line 1769
     $$2$i$i$i = tempRet0; //@line 1771
     $$211$i$i$i = $232; //@line 1771
    }
   } while (0);
   $262 = $5 + 52 | 0; //@line 1774
   if ((HEAP8[$262 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$262 >> 2] | 0); //@line 1780
   }
   $267 = $5 + 40 | 0; //@line 1782
   $268 = HEAP32[$267 >> 2] | 0; //@line 1783
   if ($268 | 0) {
    $270 = $5 + 44 | 0; //@line 1786
    $271 = HEAP32[$270 >> 2] | 0; //@line 1787
    do {
     if (($271 | 0) == ($268 | 0)) {
      $282 = $268; //@line 1791
     } else {
      $273 = $5 + 48 | 0; //@line 1793
      $275 = $271; //@line 1794
      while (1) {
       $274 = $275 + -72 | 0; //@line 1796
       HEAP32[$270 >> 2] = $274; //@line 1797
       __THREW__ = 0; //@line 1798
       HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1799
       invoke_viii(13, $$byval_copy9 | 0, $273 | 0, $274 | 0); //@line 1800
       $276 = __THREW__; //@line 1801
       __THREW__ = 0; //@line 1801
       if ($276 & 1) {
        label = 126; //@line 1804
        break;
       }
       $275 = HEAP32[$270 >> 2] | 0; //@line 1807
       if (($275 | 0) == ($268 | 0)) {
        label = 127; //@line 1810
        break;
       }
      }
      if ((label | 0) == 126) {
       $280 = ___cxa_find_matching_catch_3(0) | 0; //@line 1817
       ___clang_call_terminate($280); //@line 1819
      } else if ((label | 0) == 127) {
       $282 = HEAP32[$267 >> 2] | 0; //@line 1824
       break;
      }
     }
    } while (0);
    __ZdlPv($282); //@line 1829
   }
   if ((HEAP8[$12 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 1836
   }
   $$3$i$i$i = $$2$i$i$i; //@line 1838
   $$312$i$i$i = $$211$i$i$i; //@line 1838
  } else {
   $287 = ___cxa_allocate_exception(8) | 0; //@line 1840
   __THREW__ = 0; //@line 1841
   invoke_vii(125, $287 | 0, 16680); //@line 1842
   $288 = __THREW__; //@line 1843
   __THREW__ = 0; //@line 1843
   if ($288 & 1) {
    $293 = ___cxa_find_matching_catch_2() | 0; //@line 1846
    $294 = tempRet0; //@line 1847
    ___cxa_free_exception($287 | 0); //@line 1848
    $$3$i$i$i = $294; //@line 1849
    $$312$i$i$i = $293; //@line 1849
    break;
   } else {
    __THREW__ = 0; //@line 1852
    invoke_viii(16, $287 | 0, 2824, 242); //@line 1853
    __THREW__ = 0; //@line 1854
    $291 = ___cxa_find_matching_catch_2() | 0; //@line 1855
    $$3$i$i$i = tempRet0; //@line 1857
    $$312$i$i$i = $291; //@line 1857
    break;
   }
  }
 } while (0);
 $295 = $4 + 52 | 0; //@line 1862
 if ((HEAP8[$295 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$295 >> 2] | 0); //@line 1868
 }
 $300 = $4 + 40 | 0; //@line 1870
 $301 = HEAP32[$300 >> 2] | 0; //@line 1871
 if ($301 | 0) {
  $303 = $4 + 44 | 0; //@line 1874
  $304 = HEAP32[$303 >> 2] | 0; //@line 1875
  do {
   if (($304 | 0) == ($301 | 0)) {
    $315 = $301; //@line 1879
   } else {
    $306 = $4 + 48 | 0; //@line 1881
    $308 = $304; //@line 1882
    while (1) {
     $307 = $308 + -72 | 0; //@line 1884
     HEAP32[$303 >> 2] = $307; //@line 1885
     __THREW__ = 0; //@line 1886
     HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 1887
     invoke_viii(13, $$byval_copy9 | 0, $306 | 0, $307 | 0); //@line 1888
     $309 = __THREW__; //@line 1889
     __THREW__ = 0; //@line 1889
     if ($309 & 1) {
      label = 142; //@line 1892
      break;
     }
     $308 = HEAP32[$303 >> 2] | 0; //@line 1895
     if (($308 | 0) == ($301 | 0)) {
      label = 143; //@line 1898
      break;
     }
    }
    if ((label | 0) == 142) {
     $313 = ___cxa_find_matching_catch_3(0) | 0; //@line 1905
     ___clang_call_terminate($313); //@line 1907
    } else if ((label | 0) == 143) {
     $315 = HEAP32[$300 >> 2] | 0; //@line 1912
     break;
    }
   }
  } while (0);
  __ZdlPv($315); //@line 1917
 }
 $316 = $4 + 4 | 0; //@line 1919
 if ((HEAP8[$316 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$312$i$i$i | 0); //@line 1924
 }
 __ZdlPv(HEAP32[$316 >> 2] | 0); //@line 1928
 ___resumeException($$312$i$i$i | 0); //@line 1929
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $123 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8886
 STACKTOP = STACKTOP + 560 | 0; //@line 8887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 8887
 $6 = sp + 8 | 0; //@line 8888
 $7 = sp; //@line 8889
 $8 = sp + 524 | 0; //@line 8890
 $9 = $8; //@line 8891
 $10 = sp + 512 | 0; //@line 8892
 HEAP32[$7 >> 2] = 0; //@line 8893
 $11 = $10 + 12 | 0; //@line 8894
 ___DOUBLE_BITS($1) | 0; //@line 8895
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 8900
  $$0520 = 1; //@line 8900
  $$0521 = 26658; //@line 8900
 } else {
  $$0471 = $1; //@line 8911
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 8911
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 26659 : 26664 : 26661; //@line 8911
 }
 ___DOUBLE_BITS($$0471) | 0; //@line 8913
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 8922
   $31 = $$0520 + 3 | 0; //@line 8927
   _pad_169($0, 32, $2, $31, $4 & -65537); //@line 8929
   _out_163($0, $$0521, $$0520); //@line 8930
   _out_163($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 28874 : 26685 : $27 ? 26677 : 26681, 3); //@line 8931
   _pad_169($0, 32, $2, $31, $4 ^ 8192); //@line 8933
   $$sink560 = $31; //@line 8934
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 8937
   $36 = $35 != 0.0; //@line 8938
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 8942
   }
   $39 = $5 | 32; //@line 8944
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 8947
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 8950
    $44 = $$0520 | 2; //@line 8951
    $46 = 12 - $3 | 0; //@line 8953
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 8958
     } else {
      $$0509585 = 8.0; //@line 8960
      $$1508586 = $46; //@line 8960
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 8962
       $$0509585 = $$0509585 * 16.0; //@line 8963
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 8978
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 8983
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 8988
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 8991
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 8994
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 8997
     HEAP8[$68 >> 0] = 48; //@line 8998
     $$0511 = $68; //@line 8999
    } else {
     $$0511 = $66; //@line 9001
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 9008
    $76 = $$0511 + -2 | 0; //@line 9011
    HEAP8[$76 >> 0] = $5 + 15; //@line 9012
    $77 = ($3 | 0) < 1; //@line 9013
    $79 = ($4 & 8 | 0) == 0; //@line 9015
    $$0523 = $8; //@line 9016
    $$2473 = $$1472; //@line 9016
    while (1) {
     $80 = ~~$$2473; //@line 9018
     $86 = $$0523 + 1 | 0; //@line 9024
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[26689 + $80 >> 0]; //@line 9025
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 9028
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 9037
      } else {
       HEAP8[$86 >> 0] = 46; //@line 9040
       $$1524 = $$0523 + 2 | 0; //@line 9041
      }
     } else {
      $$1524 = $86; //@line 9044
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 9048
     }
    }
    $$pre693 = $$1524; //@line 9054
    if (!$3) {
     label = 24; //@line 9056
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 9064
      $$sink = $3 + 2 | 0; //@line 9064
     } else {
      label = 24; //@line 9066
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 9070
     $$pre$phi691Z2D = $101; //@line 9071
     $$sink = $101; //@line 9071
    }
    $104 = $11 - $76 | 0; //@line 9075
    $106 = $104 + $44 + $$sink | 0; //@line 9077
    _pad_169($0, 32, $2, $106, $4); //@line 9078
    _out_163($0, $$0521$, $44); //@line 9079
    _pad_169($0, 48, $2, $106, $4 ^ 65536); //@line 9081
    _out_163($0, $8, $$pre$phi691Z2D); //@line 9082
    _pad_169($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 9084
    _out_163($0, $76, $104); //@line 9085
    _pad_169($0, 32, $2, $106, $4 ^ 8192); //@line 9087
    $$sink560 = $106; //@line 9088
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 9092
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 9096
    HEAP32[$7 >> 2] = $113; //@line 9097
    $$3 = $35 * 268435456.0; //@line 9098
    $$pr = $113; //@line 9098
   } else {
    $$3 = $35; //@line 9101
    $$pr = HEAP32[$7 >> 2] | 0; //@line 9101
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 9105
   $$0498 = $$561; //@line 9106
   $$4 = $$3; //@line 9106
   do {
    $116 = ~~$$4 >>> 0; //@line 9108
    HEAP32[$$0498 >> 2] = $116; //@line 9109
    $$0498 = $$0498 + 4 | 0; //@line 9110
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 9113
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 9123
    $$1499662 = $$0498; //@line 9123
    $123 = $$pr; //@line 9123
    while (1) {
     $125 = ($123 | 0) < 29 ? $123 : 29; //@line 9126
     $$0488655 = $$1499662 + -4 | 0; //@line 9127
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 9130
     } else {
      $$0488657 = $$0488655; //@line 9132
      $$0497656 = 0; //@line 9132
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 9135
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 9137
       $131 = tempRet0; //@line 9138
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 9139
       HEAP32[$$0488657 >> 2] = $132; //@line 9141
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 9142
       $$0488657 = $$0488657 + -4 | 0; //@line 9144
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 9154
      } else {
       $138 = $$1482663 + -4 | 0; //@line 9156
       HEAP32[$138 >> 2] = $$0497656; //@line 9157
       $$2483$ph = $138; //@line 9158
      }
     }
     $$2500 = $$1499662; //@line 9161
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 9167
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 9171
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 9177
     HEAP32[$7 >> 2] = $144; //@line 9178
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 9181
      $$1499662 = $$2500; //@line 9181
      $123 = $144; //@line 9181
     } else {
      $$1482$lcssa = $$2483$ph; //@line 9183
      $$1499$lcssa = $$2500; //@line 9183
      $$pr566 = $144; //@line 9183
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 9188
    $$1499$lcssa = $$0498; //@line 9188
    $$pr566 = $$pr; //@line 9188
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 9194
    $150 = ($39 | 0) == 102; //@line 9195
    $$3484650 = $$1482$lcssa; //@line 9196
    $$3501649 = $$1499$lcssa; //@line 9196
    $152 = $$pr566; //@line 9196
    while (1) {
     $151 = 0 - $152 | 0; //@line 9198
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 9200
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 9204
      $161 = 1e9 >>> $154; //@line 9205
      $$0487644 = 0; //@line 9206
      $$1489643 = $$3484650; //@line 9206
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 9208
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 9212
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 9213
       $$1489643 = $$1489643 + 4 | 0; //@line 9214
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 9225
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 9228
       $$4502 = $$3501649; //@line 9228
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 9231
       $$$3484700 = $$$3484; //@line 9232
       $$4502 = $$3501649 + 4 | 0; //@line 9232
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 9239
      $$4502 = $$3501649; //@line 9239
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 9241
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 9248
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 9250
     HEAP32[$7 >> 2] = $152; //@line 9251
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 9256
      $$3501$lcssa = $$$4502; //@line 9256
      break;
     } else {
      $$3484650 = $$$3484700; //@line 9254
      $$3501649 = $$$4502; //@line 9254
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 9261
    $$3501$lcssa = $$1499$lcssa; //@line 9261
   }
   $185 = $$561; //@line 9264
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 9269
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 9270
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 9273
    } else {
     $$0514639 = $189; //@line 9275
     $$0530638 = 10; //@line 9275
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 9277
      $193 = $$0514639 + 1 | 0; //@line 9278
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 9281
       break;
      } else {
       $$0514639 = $193; //@line 9284
      }
     }
    }
   } else {
    $$1515 = 0; //@line 9289
   }
   $198 = ($39 | 0) == 103; //@line 9294
   $199 = ($$540 | 0) != 0; //@line 9295
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 9298
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 9307
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 9310
    $213 = ($209 | 0) % 9 | 0; //@line 9311
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 9314
     $$1531632 = 10; //@line 9314
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 9317
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 9320
       $$1531632 = $215; //@line 9320
      } else {
       $$1531$lcssa = $215; //@line 9322
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 9327
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 9329
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 9330
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 9333
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 9336
     $$4518 = $$1515; //@line 9336
     $$8 = $$3484$lcssa; //@line 9336
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 9341
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 9342
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 9347
     if (!$$0520) {
      $$1467 = $$$564; //@line 9350
      $$1469 = $$543; //@line 9350
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 9353
      $$1467 = $230 ? -$$$564 : $$$564; //@line 9358
      $$1469 = $230 ? -$$543 : $$543; //@line 9358
     }
     $233 = $217 - $218 | 0; //@line 9360
     HEAP32[$212 >> 2] = $233; //@line 9361
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 9365
      HEAP32[$212 >> 2] = $236; //@line 9366
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 9369
       $$sink547625 = $212; //@line 9369
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 9371
        HEAP32[$$sink547625 >> 2] = 0; //@line 9372
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 9375
         HEAP32[$240 >> 2] = 0; //@line 9376
         $$6 = $240; //@line 9377
        } else {
         $$6 = $$5486626; //@line 9379
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 9382
        HEAP32[$238 >> 2] = $242; //@line 9383
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 9386
         $$sink547625 = $238; //@line 9386
        } else {
         $$5486$lcssa = $$6; //@line 9388
         $$sink547$lcssa = $238; //@line 9388
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 9393
       $$sink547$lcssa = $212; //@line 9393
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 9398
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 9399
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 9402
       $$4518 = $247; //@line 9402
       $$8 = $$5486$lcssa; //@line 9402
      } else {
       $$2516621 = $247; //@line 9404
       $$2532620 = 10; //@line 9404
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 9406
        $251 = $$2516621 + 1 | 0; //@line 9407
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 9410
         $$4518 = $251; //@line 9410
         $$8 = $$5486$lcssa; //@line 9410
         break;
        } else {
         $$2516621 = $251; //@line 9413
        }
       }
      }
     } else {
      $$4492 = $212; //@line 9418
      $$4518 = $$1515; //@line 9418
      $$8 = $$3484$lcssa; //@line 9418
     }
    }
    $253 = $$4492 + 4 | 0; //@line 9421
    $$5519$ph = $$4518; //@line 9424
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 9424
    $$9$ph = $$8; //@line 9424
   } else {
    $$5519$ph = $$1515; //@line 9426
    $$7505$ph = $$3501$lcssa; //@line 9426
    $$9$ph = $$3484$lcssa; //@line 9426
   }
   $$7505 = $$7505$ph; //@line 9428
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 9432
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 9435
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 9439
    } else {
     $$lcssa675 = 1; //@line 9441
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 9445
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 9450
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 9458
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 9458
     } else {
      $$0479 = $5 + -2 | 0; //@line 9462
      $$2476 = $$540$ + -1 | 0; //@line 9462
     }
     $267 = $4 & 8; //@line 9464
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 9469
       if (!$270) {
        $$2529 = 9; //@line 9472
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 9477
         $$3533616 = 10; //@line 9477
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 9479
          $275 = $$1528617 + 1 | 0; //@line 9480
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 9486
           break;
          } else {
           $$1528617 = $275; //@line 9484
          }
         }
        } else {
         $$2529 = 0; //@line 9491
        }
       }
      } else {
       $$2529 = 9; //@line 9495
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 9503
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 9505
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 9507
       $$1480 = $$0479; //@line 9510
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 9510
       $$pre$phi698Z2D = 0; //@line 9510
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 9514
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 9516
       $$1480 = $$0479; //@line 9519
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 9519
       $$pre$phi698Z2D = 0; //@line 9519
       break;
      }
     } else {
      $$1480 = $$0479; //@line 9523
      $$3477 = $$2476; //@line 9523
      $$pre$phi698Z2D = $267; //@line 9523
     }
    } else {
     $$1480 = $5; //@line 9527
     $$3477 = $$540; //@line 9527
     $$pre$phi698Z2D = $4 & 8; //@line 9527
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 9530
   $294 = ($292 | 0) != 0 & 1; //@line 9532
   $296 = ($$1480 | 32 | 0) == 102; //@line 9534
   if ($296) {
    $$2513 = 0; //@line 9538
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 9538
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 9541
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 9544
    $304 = $11; //@line 9545
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 9550
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 9552
      HEAP8[$308 >> 0] = 48; //@line 9553
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 9558
      } else {
       $$1512$lcssa = $308; //@line 9560
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 9565
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 9572
    $318 = $$1512$lcssa + -2 | 0; //@line 9574
    HEAP8[$318 >> 0] = $$1480; //@line 9575
    $$2513 = $318; //@line 9578
    $$pn = $304 - $318 | 0; //@line 9578
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 9583
   _pad_169($0, 32, $2, $323, $4); //@line 9584
   _out_163($0, $$0521, $$0520); //@line 9585
   _pad_169($0, 48, $2, $323, $4 ^ 65536); //@line 9587
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 9590
    $326 = $8 + 9 | 0; //@line 9591
    $327 = $326; //@line 9592
    $328 = $8 + 8 | 0; //@line 9593
    $$5493600 = $$0496$$9; //@line 9594
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 9597
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 9602
       $$1465 = $328; //@line 9603
      } else {
       $$1465 = $330; //@line 9605
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 9612
       $$0464597 = $330; //@line 9613
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 9615
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 9618
        } else {
         $$1465 = $335; //@line 9620
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 9625
      }
     }
     _out_163($0, $$1465, $327 - $$1465 | 0); //@line 9630
     $$5493600 = $$5493600 + 4 | 0; //@line 9631
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_163($0, 26705, 1); //@line 9641
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 9647
     $$6494592 = $$5493600; //@line 9647
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 9650
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 9655
       $$0463587 = $347; //@line 9656
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 9658
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 9661
        } else {
         $$0463$lcssa = $351; //@line 9663
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 9668
      }
      _out_163($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 9672
      $$6494592 = $$6494592 + 4 | 0; //@line 9673
      $356 = $$4478593 + -9 | 0; //@line 9674
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 9681
       break;
      } else {
       $$4478593 = $356; //@line 9679
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 9686
    }
    _pad_169($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 9689
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 9692
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 9695
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 9696
     $365 = $363; //@line 9697
     $366 = 0 - $9 | 0; //@line 9698
     $367 = $8 + 8 | 0; //@line 9699
     $$5605 = $$3477; //@line 9700
     $$7495604 = $$9$ph; //@line 9700
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 9703
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 9706
       $$0 = $367; //@line 9707
      } else {
       $$0 = $369; //@line 9709
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 9714
        _out_163($0, $$0, 1); //@line 9715
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 9719
         break;
        }
        _out_163($0, 26705, 1); //@line 9722
        $$2 = $375; //@line 9723
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 9727
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 9732
        $$1601 = $$0; //@line 9733
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 9735
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 9738
         } else {
          $$2 = $373; //@line 9740
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 9747
      _out_163($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 9750
      $381 = $$5605 - $378 | 0; //@line 9751
      $$7495604 = $$7495604 + 4 | 0; //@line 9752
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 9759
       break;
      } else {
       $$5605 = $381; //@line 9757
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 9764
    }
    _pad_169($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 9767
    _out_163($0, $$2513, $11 - $$2513 | 0); //@line 9771
   }
   _pad_169($0, 32, $2, $323, $4 ^ 8192); //@line 9774
   $$sink560 = $323; //@line 9775
  }
 } while (0);
 STACKTOP = sp; //@line 9780
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 9780
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07$i$i$i = 0, $$08$i$i$i = 0, $$1$i$i$i = 0, $$19$i$i$i = 0, $$2$i$i$i = 0, $$210$i$i$i = 0, $$byval_copy9 = 0, $$val = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $125 = 0, $127 = 0, $128 = 0, $133 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $160 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $169 = 0, $17 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $187 = 0, $189 = 0, $19 = 0, $190 = 0, $195 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $213 = 0, $215 = 0, $216 = 0, $22 = 0, $221 = 0, $226 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $239 = 0, $24 = 0, $241 = 0, $242 = 0, $247 = 0, $248 = 0, $249 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $267 = 0, $269 = 0, $270 = 0, $275 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $293 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $301 = 0, $306 = 0, $307 = 0, $309 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $327 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $83 = 0, $84 = 0, $9 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27423
 STACKTOP = STACKTOP + 368 | 0; //@line 27424
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368); //@line 27424
 $$byval_copy9 = sp + 361 | 0; //@line 27425
 $2 = sp + 360 | 0; //@line 27426
 $3 = sp + 288 | 0; //@line 27427
 $4 = sp + 216 | 0; //@line 27428
 $5 = sp + 144 | 0; //@line 27429
 $6 = sp + 72 | 0; //@line 27430
 $7 = sp; //@line 27431
 $$val = HEAP32[$1 >> 2] | 0; //@line 27432
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 27434
 __THREW__ = 0; //@line 27435
 $9 = invoke_ii(143, $$val | 0) | 0; //@line 27436
 $10 = __THREW__; //@line 27437
 __THREW__ = 0; //@line 27437
 if ($10 & 1) {
  label = 34; //@line 27440
 } else {
  __THREW__ = 0; //@line 27442
  invoke_vii(131, $4 | 0, $9 | 0); //@line 27443
  $12 = __THREW__; //@line 27444
  __THREW__ = 0; //@line 27444
  if ($12 & 1) {
   label = 34; //@line 27447
  } else {
   __THREW__ = 0; //@line 27449
   invoke_vii(120, $5 | 0, $3 | 0); //@line 27450
   $14 = __THREW__; //@line 27451
   __THREW__ = 0; //@line 27451
   L4 : do {
    if ($14 & 1) {
     label = 35; //@line 27455
    } else {
     __THREW__ = 0; //@line 27457
     $16 = invoke_ii(144, $5 | 0) | 0; //@line 27458
     $17 = __THREW__; //@line 27459
     __THREW__ = 0; //@line 27459
     L6 : do {
      if ($17 & 1) {
       label = 36; //@line 27463
      } else {
       do {
        if ($16) {
         __THREW__ = 0; //@line 27467
         invoke_vii(120, $6 | 0, $4 | 0); //@line 27468
         $19 = __THREW__; //@line 27469
         __THREW__ = 0; //@line 27469
         if ($19 & 1) {
          label = 36; //@line 27472
          break L6;
         }
         __THREW__ = 0; //@line 27475
         $21 = invoke_ii(144, $6 | 0) | 0; //@line 27476
         $22 = __THREW__; //@line 27477
         __THREW__ = 0; //@line 27477
         if ($22 & 1) {
          $105 = ___cxa_find_matching_catch_2() | 0; //@line 27480
          $106 = tempRet0; //@line 27481
          $107 = $6 + 52 | 0; //@line 27482
          if ((HEAP8[$107 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$107 >> 2] | 0); //@line 27488
          }
          $112 = $6 + 40 | 0; //@line 27490
          $113 = HEAP32[$112 >> 2] | 0; //@line 27491
          if ($113 | 0) {
           $115 = $6 + 44 | 0; //@line 27494
           $116 = HEAP32[$115 >> 2] | 0; //@line 27495
           do {
            if (($116 | 0) == ($113 | 0)) {
             $127 = $113; //@line 27499
            } else {
             $118 = $6 + 48 | 0; //@line 27501
             $120 = $116; //@line 27502
             while (1) {
              $119 = $120 + -72 | 0; //@line 27504
              HEAP32[$115 >> 2] = $119; //@line 27505
              __THREW__ = 0; //@line 27506
              HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27507
              invoke_viii(13, $$byval_copy9 | 0, $118 | 0, $119 | 0); //@line 27508
              $121 = __THREW__; //@line 27509
              __THREW__ = 0; //@line 27509
              if ($121 & 1) {
               label = 44; //@line 27512
               break;
              }
              $120 = HEAP32[$115 >> 2] | 0; //@line 27515
              if (($120 | 0) == ($113 | 0)) {
               label = 45; //@line 27518
               break;
              }
             }
             if ((label | 0) == 44) {
              $125 = ___cxa_find_matching_catch_3(0) | 0; //@line 27525
              ___clang_call_terminate($125); //@line 27527
             } else if ((label | 0) == 45) {
              $127 = HEAP32[$112 >> 2] | 0; //@line 27532
              break;
             }
            }
           } while (0);
           __ZdlPv($127); //@line 27537
          }
          $128 = $6 + 4 | 0; //@line 27539
          if ((HEAP8[$128 + 11 >> 0] | 0) >= 0) {
           $$07$i$i$i = $106; //@line 27544
           $$08$i$i$i = $105; //@line 27544
           break L6;
          }
          __ZdlPv(HEAP32[$128 >> 2] | 0); //@line 27548
          $$07$i$i$i = $106; //@line 27549
          $$08$i$i$i = $105; //@line 27549
          break L6;
         } else {
          $24 = $6 + 52 | 0; //@line 27552
          if ((HEAP8[$24 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 27558
          }
          $29 = $6 + 40 | 0; //@line 27560
          $30 = HEAP32[$29 >> 2] | 0; //@line 27561
          if ($30 | 0) {
           $32 = $6 + 44 | 0; //@line 27564
           $33 = HEAP32[$32 >> 2] | 0; //@line 27565
           do {
            if (($33 | 0) == ($30 | 0)) {
             $44 = $30; //@line 27569
            } else {
             $35 = $6 + 48 | 0; //@line 27571
             $37 = $33; //@line 27572
             while (1) {
              $36 = $37 + -72 | 0; //@line 27574
              HEAP32[$32 >> 2] = $36; //@line 27575
              __THREW__ = 0; //@line 27576
              HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27577
              invoke_viii(13, $$byval_copy9 | 0, $35 | 0, $36 | 0); //@line 27578
              $38 = __THREW__; //@line 27579
              __THREW__ = 0; //@line 27579
              if ($38 & 1) {
               label = 15; //@line 27582
               break;
              }
              $37 = HEAP32[$32 >> 2] | 0; //@line 27585
              if (($37 | 0) == ($30 | 0)) {
               label = 16; //@line 27588
               break;
              }
             }
             if ((label | 0) == 15) {
              $42 = ___cxa_find_matching_catch_3(0) | 0; //@line 27595
              ___clang_call_terminate($42); //@line 27597
             } else if ((label | 0) == 16) {
              $44 = HEAP32[$29 >> 2] | 0; //@line 27602
              break;
             }
            }
           } while (0);
           __ZdlPv($44); //@line 27607
          }
          $45 = $6 + 4 | 0; //@line 27609
          if ((HEAP8[$45 + 11 >> 0] | 0) >= 0) {
           $327 = $21; //@line 27614
           break;
          }
          __ZdlPv(HEAP32[$45 >> 2] | 0); //@line 27618
          $327 = $21; //@line 27619
          break;
         }
        } else {
         $327 = 0; //@line 27623
        }
       } while (0);
       $50 = $5 + 52 | 0; //@line 27626
       if ((HEAP8[$50 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$50 >> 2] | 0); //@line 27632
       }
       $55 = $5 + 40 | 0; //@line 27634
       $56 = HEAP32[$55 >> 2] | 0; //@line 27635
       if ($56 | 0) {
        $58 = $5 + 44 | 0; //@line 27638
        $59 = HEAP32[$58 >> 2] | 0; //@line 27639
        do {
         if (($59 | 0) == ($56 | 0)) {
          $70 = $56; //@line 27643
         } else {
          $61 = $5 + 48 | 0; //@line 27645
          $63 = $59; //@line 27646
          while (1) {
           $62 = $63 + -72 | 0; //@line 27648
           HEAP32[$58 >> 2] = $62; //@line 27649
           __THREW__ = 0; //@line 27650
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27651
           invoke_viii(13, $$byval_copy9 | 0, $61 | 0, $62 | 0); //@line 27652
           $64 = __THREW__; //@line 27653
           __THREW__ = 0; //@line 27653
           if ($64 & 1) {
            label = 27; //@line 27656
            break;
           }
           $63 = HEAP32[$58 >> 2] | 0; //@line 27659
           if (($63 | 0) == ($56 | 0)) {
            label = 28; //@line 27662
            break;
           }
          }
          if ((label | 0) == 27) {
           $68 = ___cxa_find_matching_catch_3(0) | 0; //@line 27669
           ___clang_call_terminate($68); //@line 27671
          } else if ((label | 0) == 28) {
           $70 = HEAP32[$55 >> 2] | 0; //@line 27676
           break;
          }
         }
        } while (0);
        __ZdlPv($70); //@line 27681
       }
       $71 = $5 + 4 | 0; //@line 27683
       if ((HEAP8[$71 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$71 >> 2] | 0); //@line 27689
       }
       if (!$327) {
        $159 = ___cxa_allocate_exception(8) | 0; //@line 27692
        __THREW__ = 0; //@line 27693
        invoke_vii(125, $159 | 0, 16079); //@line 27694
        $160 = __THREW__; //@line 27695
        __THREW__ = 0; //@line 27695
        if ($160 & 1) {
         $163 = ___cxa_find_matching_catch_2() | 0; //@line 27698
         $164 = tempRet0; //@line 27699
         ___cxa_free_exception($159 | 0); //@line 27700
         $$1$i$i$i = $164; //@line 27701
         $$19$i$i$i = $163; //@line 27701
         break L4;
        } else {
         __THREW__ = 0; //@line 27704
         invoke_viii(16, $159 | 0, 2824, 242); //@line 27705
         __THREW__ = 0; //@line 27706
         label = 35; //@line 27707
         break L4;
        }
       }
       $77 = $4 + 24 | 0; //@line 27712
       $83 = $3 + 24 | 0; //@line 27718
       $84 = $83; //@line 27719
       $90 = _i64Subtract(HEAP32[$77 >> 2] | 0, HEAP32[$77 + 4 >> 2] | 0, HEAP32[$84 >> 2] | 0, HEAP32[$84 + 4 >> 2] | 0) | 0; //@line 27725
       $92 = $83; //@line 27727
       HEAP32[$92 >> 2] = $90; //@line 27729
       HEAP32[$92 + 4 >> 2] = tempRet0; //@line 27732
       __THREW__ = 0; //@line 27733
       $96 = invoke_ii(143, $$val | 0) | 0; //@line 27734
       $97 = __THREW__; //@line 27735
       __THREW__ = 0; //@line 27735
       if ($97 & 1) {
        label = 35; //@line 27738
        break L4;
       }
       __THREW__ = 0; //@line 27741
       invoke_vii(120, $7 | 0, $3 | 0); //@line 27742
       $165 = __THREW__; //@line 27743
       __THREW__ = 0; //@line 27743
       if ($165 & 1) {
        label = 35; //@line 27746
        break L4;
       }
       __THREW__ = 0; //@line 27749
       invoke_vii(128, $96 | 0, $7 | 0); //@line 27750
       $167 = __THREW__; //@line 27751
       __THREW__ = 0; //@line 27751
       if ($167 & 1) {
        $247 = ___cxa_find_matching_catch_2() | 0; //@line 27754
        $248 = tempRet0; //@line 27755
        $249 = $7 + 52 | 0; //@line 27756
        if ((HEAP8[$249 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$249 >> 2] | 0); //@line 27762
        }
        $254 = $7 + 40 | 0; //@line 27764
        $255 = HEAP32[$254 >> 2] | 0; //@line 27765
        if ($255 | 0) {
         $257 = $7 + 44 | 0; //@line 27768
         $258 = HEAP32[$257 >> 2] | 0; //@line 27769
         do {
          if (($258 | 0) == ($255 | 0)) {
           $269 = $255; //@line 27773
          } else {
           $260 = $7 + 48 | 0; //@line 27775
           $262 = $258; //@line 27776
           while (1) {
            $261 = $262 + -72 | 0; //@line 27778
            HEAP32[$257 >> 2] = $261; //@line 27779
            __THREW__ = 0; //@line 27780
            HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27781
            invoke_viii(13, $$byval_copy9 | 0, $260 | 0, $261 | 0); //@line 27782
            $263 = __THREW__; //@line 27783
            __THREW__ = 0; //@line 27783
            if ($263 & 1) {
             label = 109; //@line 27786
             break;
            }
            $262 = HEAP32[$257 >> 2] | 0; //@line 27789
            if (($262 | 0) == ($255 | 0)) {
             label = 110; //@line 27792
             break;
            }
           }
           if ((label | 0) == 109) {
            $267 = ___cxa_find_matching_catch_3(0) | 0; //@line 27799
            ___clang_call_terminate($267); //@line 27801
           } else if ((label | 0) == 110) {
            $269 = HEAP32[$254 >> 2] | 0; //@line 27806
            break;
           }
          }
         } while (0);
         __ZdlPv($269); //@line 27811
        }
        $270 = $7 + 4 | 0; //@line 27813
        if ((HEAP8[$270 + 11 >> 0] | 0) >= 0) {
         $$1$i$i$i = $248; //@line 27818
         $$19$i$i$i = $247; //@line 27818
         break L4;
        }
        __ZdlPv(HEAP32[$270 >> 2] | 0); //@line 27822
        $$1$i$i$i = $248; //@line 27823
        $$19$i$i$i = $247; //@line 27823
        break L4;
       }
       $169 = $7 + 52 | 0; //@line 27826
       if ((HEAP8[$169 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$169 >> 2] | 0); //@line 27832
       }
       $174 = $7 + 40 | 0; //@line 27834
       $175 = HEAP32[$174 >> 2] | 0; //@line 27835
       if ($175 | 0) {
        $177 = $7 + 44 | 0; //@line 27838
        $178 = HEAP32[$177 >> 2] | 0; //@line 27839
        do {
         if (($178 | 0) == ($175 | 0)) {
          $189 = $175; //@line 27843
         } else {
          $180 = $7 + 48 | 0; //@line 27845
          $182 = $178; //@line 27846
          while (1) {
           $181 = $182 + -72 | 0; //@line 27848
           HEAP32[$177 >> 2] = $181; //@line 27849
           __THREW__ = 0; //@line 27850
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27851
           invoke_viii(13, $$byval_copy9 | 0, $180 | 0, $181 | 0); //@line 27852
           $183 = __THREW__; //@line 27853
           __THREW__ = 0; //@line 27853
           if ($183 & 1) {
            label = 73; //@line 27856
            break;
           }
           $182 = HEAP32[$177 >> 2] | 0; //@line 27859
           if (($182 | 0) == ($175 | 0)) {
            label = 74; //@line 27862
            break;
           }
          }
          if ((label | 0) == 73) {
           $187 = ___cxa_find_matching_catch_3(0) | 0; //@line 27869
           ___clang_call_terminate($187); //@line 27871
          } else if ((label | 0) == 74) {
           $189 = HEAP32[$174 >> 2] | 0; //@line 27876
           break;
          }
         }
        } while (0);
        __ZdlPv($189); //@line 27881
       }
       $190 = $7 + 4 | 0; //@line 27883
       if ((HEAP8[$190 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$190 >> 2] | 0); //@line 27889
       }
       $195 = $4 + 52 | 0; //@line 27891
       if ((HEAP8[$195 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$195 >> 2] | 0); //@line 27897
       }
       $200 = $4 + 40 | 0; //@line 27899
       $201 = HEAP32[$200 >> 2] | 0; //@line 27900
       if ($201 | 0) {
        $203 = $4 + 44 | 0; //@line 27903
        $204 = HEAP32[$203 >> 2] | 0; //@line 27904
        do {
         if (($204 | 0) == ($201 | 0)) {
          $215 = $201; //@line 27908
         } else {
          $206 = $4 + 48 | 0; //@line 27910
          $208 = $204; //@line 27911
          while (1) {
           $207 = $208 + -72 | 0; //@line 27913
           HEAP32[$203 >> 2] = $207; //@line 27914
           __THREW__ = 0; //@line 27915
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27916
           invoke_viii(13, $$byval_copy9 | 0, $206 | 0, $207 | 0); //@line 27917
           $209 = __THREW__; //@line 27918
           __THREW__ = 0; //@line 27918
           if ($209 & 1) {
            label = 85; //@line 27921
            break;
           }
           $208 = HEAP32[$203 >> 2] | 0; //@line 27924
           if (($208 | 0) == ($201 | 0)) {
            label = 86; //@line 27927
            break;
           }
          }
          if ((label | 0) == 85) {
           $213 = ___cxa_find_matching_catch_3(0) | 0; //@line 27934
           ___clang_call_terminate($213); //@line 27936
          } else if ((label | 0) == 86) {
           $215 = HEAP32[$200 >> 2] | 0; //@line 27941
           break;
          }
         }
        } while (0);
        __ZdlPv($215); //@line 27946
       }
       $216 = $4 + 4 | 0; //@line 27948
       if ((HEAP8[$216 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$216 >> 2] | 0); //@line 27954
       }
       $221 = $3 + 52 | 0; //@line 27956
       if ((HEAP8[$221 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$221 >> 2] | 0); //@line 27962
       }
       $226 = $3 + 40 | 0; //@line 27964
       $227 = HEAP32[$226 >> 2] | 0; //@line 27965
       if ($227 | 0) {
        $229 = $3 + 44 | 0; //@line 27968
        $230 = HEAP32[$229 >> 2] | 0; //@line 27969
        do {
         if (($230 | 0) == ($227 | 0)) {
          $241 = $227; //@line 27973
         } else {
          $232 = $3 + 48 | 0; //@line 27975
          $234 = $230; //@line 27976
          while (1) {
           $233 = $234 + -72 | 0; //@line 27978
           HEAP32[$229 >> 2] = $233; //@line 27979
           __THREW__ = 0; //@line 27980
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 27981
           invoke_viii(13, $$byval_copy9 | 0, $232 | 0, $233 | 0); //@line 27982
           $235 = __THREW__; //@line 27983
           __THREW__ = 0; //@line 27983
           if ($235 & 1) {
            label = 97; //@line 27986
            break;
           }
           $234 = HEAP32[$229 >> 2] | 0; //@line 27989
           if (($234 | 0) == ($227 | 0)) {
            label = 98; //@line 27992
            break;
           }
          }
          if ((label | 0) == 97) {
           $239 = ___cxa_find_matching_catch_3(0) | 0; //@line 27999
           ___clang_call_terminate($239); //@line 28001
          } else if ((label | 0) == 98) {
           $241 = HEAP32[$226 >> 2] | 0; //@line 28006
           break;
          }
         }
        } while (0);
        __ZdlPv($241); //@line 28011
       }
       $242 = $3 + 4 | 0; //@line 28013
       if ((HEAP8[$242 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 28018
        return;
       }
       __ZdlPv(HEAP32[$242 >> 2] | 0); //@line 28021
       STACKTOP = sp; //@line 28022
       return;
      }
     } while (0);
     if ((label | 0) == 36) {
      $103 = ___cxa_find_matching_catch_2() | 0; //@line 28026
      $$07$i$i$i = tempRet0; //@line 28028
      $$08$i$i$i = $103; //@line 28028
     }
     $133 = $5 + 52 | 0; //@line 28030
     if ((HEAP8[$133 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$133 >> 2] | 0); //@line 28036
     }
     $138 = $5 + 40 | 0; //@line 28038
     $139 = HEAP32[$138 >> 2] | 0; //@line 28039
     if ($139 | 0) {
      $141 = $5 + 44 | 0; //@line 28042
      $142 = HEAP32[$141 >> 2] | 0; //@line 28043
      do {
       if (($142 | 0) == ($139 | 0)) {
        $153 = $139; //@line 28047
       } else {
        $144 = $5 + 48 | 0; //@line 28049
        $146 = $142; //@line 28050
        while (1) {
         $145 = $146 + -72 | 0; //@line 28052
         HEAP32[$141 >> 2] = $145; //@line 28053
         __THREW__ = 0; //@line 28054
         HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28055
         invoke_viii(13, $$byval_copy9 | 0, $144 | 0, $145 | 0); //@line 28056
         $147 = __THREW__; //@line 28057
         __THREW__ = 0; //@line 28057
         if ($147 & 1) {
          label = 56; //@line 28060
          break;
         }
         $146 = HEAP32[$141 >> 2] | 0; //@line 28063
         if (($146 | 0) == ($139 | 0)) {
          label = 57; //@line 28066
          break;
         }
        }
        if ((label | 0) == 56) {
         $151 = ___cxa_find_matching_catch_3(0) | 0; //@line 28073
         ___clang_call_terminate($151); //@line 28075
        } else if ((label | 0) == 57) {
         $153 = HEAP32[$138 >> 2] | 0; //@line 28080
         break;
        }
       }
      } while (0);
      __ZdlPv($153); //@line 28085
     }
     $154 = $5 + 4 | 0; //@line 28087
     if ((HEAP8[$154 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$154 >> 2] | 0); //@line 28093
      $$1$i$i$i = $$07$i$i$i; //@line 28094
      $$19$i$i$i = $$08$i$i$i; //@line 28094
     } else {
      $$1$i$i$i = $$07$i$i$i; //@line 28096
      $$19$i$i$i = $$08$i$i$i; //@line 28096
     }
    }
   } while (0);
   if ((label | 0) == 35) {
    $101 = ___cxa_find_matching_catch_2() | 0; //@line 28101
    $$1$i$i$i = tempRet0; //@line 28103
    $$19$i$i$i = $101; //@line 28103
   }
   $275 = $4 + 52 | 0; //@line 28105
   if ((HEAP8[$275 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$275 >> 2] | 0); //@line 28111
   }
   $280 = $4 + 40 | 0; //@line 28113
   $281 = HEAP32[$280 >> 2] | 0; //@line 28114
   if ($281 | 0) {
    $283 = $4 + 44 | 0; //@line 28117
    $284 = HEAP32[$283 >> 2] | 0; //@line 28118
    do {
     if (($284 | 0) == ($281 | 0)) {
      $295 = $281; //@line 28122
     } else {
      $286 = $4 + 48 | 0; //@line 28124
      $288 = $284; //@line 28125
      while (1) {
       $287 = $288 + -72 | 0; //@line 28127
       HEAP32[$283 >> 2] = $287; //@line 28128
       __THREW__ = 0; //@line 28129
       HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28130
       invoke_viii(13, $$byval_copy9 | 0, $286 | 0, $287 | 0); //@line 28131
       $289 = __THREW__; //@line 28132
       __THREW__ = 0; //@line 28132
       if ($289 & 1) {
        label = 121; //@line 28135
        break;
       }
       $288 = HEAP32[$283 >> 2] | 0; //@line 28138
       if (($288 | 0) == ($281 | 0)) {
        label = 122; //@line 28141
        break;
       }
      }
      if ((label | 0) == 121) {
       $293 = ___cxa_find_matching_catch_3(0) | 0; //@line 28148
       ___clang_call_terminate($293); //@line 28150
      } else if ((label | 0) == 122) {
       $295 = HEAP32[$280 >> 2] | 0; //@line 28155
       break;
      }
     }
    } while (0);
    __ZdlPv($295); //@line 28160
   }
   $296 = $4 + 4 | 0; //@line 28162
   if ((HEAP8[$296 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$296 >> 2] | 0); //@line 28168
    $$2$i$i$i = $$1$i$i$i; //@line 28169
    $$210$i$i$i = $$19$i$i$i; //@line 28169
   } else {
    $$2$i$i$i = $$1$i$i$i; //@line 28171
    $$210$i$i$i = $$19$i$i$i; //@line 28171
   }
  }
 }
 if ((label | 0) == 34) {
  $99 = ___cxa_find_matching_catch_2() | 0; //@line 28176
  $$2$i$i$i = tempRet0; //@line 28178
  $$210$i$i$i = $99; //@line 28178
 }
 $301 = $3 + 52 | 0; //@line 28180
 if ((HEAP8[$301 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$301 >> 2] | 0); //@line 28186
 }
 $306 = $3 + 40 | 0; //@line 28188
 $307 = HEAP32[$306 >> 2] | 0; //@line 28189
 if ($307 | 0) {
  $309 = $3 + 44 | 0; //@line 28192
  $310 = HEAP32[$309 >> 2] | 0; //@line 28193
  do {
   if (($310 | 0) == ($307 | 0)) {
    $321 = $307; //@line 28197
   } else {
    $312 = $3 + 48 | 0; //@line 28199
    $314 = $310; //@line 28200
    while (1) {
     $313 = $314 + -72 | 0; //@line 28202
     HEAP32[$309 >> 2] = $313; //@line 28203
     __THREW__ = 0; //@line 28204
     HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28205
     invoke_viii(13, $$byval_copy9 | 0, $312 | 0, $313 | 0); //@line 28206
     $315 = __THREW__; //@line 28207
     __THREW__ = 0; //@line 28207
     if ($315 & 1) {
      label = 133; //@line 28210
      break;
     }
     $314 = HEAP32[$309 >> 2] | 0; //@line 28213
     if (($314 | 0) == ($307 | 0)) {
      label = 134; //@line 28216
      break;
     }
    }
    if ((label | 0) == 133) {
     $319 = ___cxa_find_matching_catch_3(0) | 0; //@line 28223
     ___clang_call_terminate($319); //@line 28225
    } else if ((label | 0) == 134) {
     $321 = HEAP32[$306 >> 2] | 0; //@line 28230
     break;
    }
   }
  } while (0);
  __ZdlPv($321); //@line 28235
 }
 $322 = $3 + 4 | 0; //@line 28237
 if ((HEAP8[$322 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$210$i$i$i | 0); //@line 28242
 }
 __ZdlPv(HEAP32[$322 >> 2] | 0); //@line 28246
 ___resumeException($$210$i$i$i | 0); //@line 28247
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07$i$i$i = 0, $$08$i$i$i = 0, $$1$i$i$i = 0, $$19$i$i$i = 0, $$2$i$i$i = 0, $$210$i$i$i = 0, $$byval_copy9 = 0, $$val = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $125 = 0, $127 = 0, $128 = 0, $133 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $160 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $169 = 0, $17 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $187 = 0, $189 = 0, $19 = 0, $190 = 0, $195 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $213 = 0, $215 = 0, $216 = 0, $22 = 0, $221 = 0, $226 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $239 = 0, $24 = 0, $241 = 0, $242 = 0, $247 = 0, $248 = 0, $249 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $267 = 0, $269 = 0, $270 = 0, $275 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $293 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $301 = 0, $306 = 0, $307 = 0, $309 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $327 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $76 = 0, $77 = 0, $84 = 0, $9 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25449
 STACKTOP = STACKTOP + 368 | 0; //@line 25450
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368); //@line 25450
 $$byval_copy9 = sp + 361 | 0; //@line 25451
 $2 = sp + 360 | 0; //@line 25452
 $3 = sp + 288 | 0; //@line 25453
 $4 = sp + 216 | 0; //@line 25454
 $5 = sp + 144 | 0; //@line 25455
 $6 = sp + 72 | 0; //@line 25456
 $7 = sp; //@line 25457
 $$val = HEAP32[$1 >> 2] | 0; //@line 25458
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 25460
 __THREW__ = 0; //@line 25461
 $9 = invoke_ii(143, $$val | 0) | 0; //@line 25462
 $10 = __THREW__; //@line 25463
 __THREW__ = 0; //@line 25463
 if ($10 & 1) {
  label = 34; //@line 25466
 } else {
  __THREW__ = 0; //@line 25468
  invoke_vii(131, $4 | 0, $9 | 0); //@line 25469
  $12 = __THREW__; //@line 25470
  __THREW__ = 0; //@line 25470
  if ($12 & 1) {
   label = 34; //@line 25473
  } else {
   __THREW__ = 0; //@line 25475
   invoke_vii(120, $5 | 0, $3 | 0); //@line 25476
   $14 = __THREW__; //@line 25477
   __THREW__ = 0; //@line 25477
   L4 : do {
    if ($14 & 1) {
     label = 35; //@line 25481
    } else {
     __THREW__ = 0; //@line 25483
     $16 = invoke_ii(144, $5 | 0) | 0; //@line 25484
     $17 = __THREW__; //@line 25485
     __THREW__ = 0; //@line 25485
     L6 : do {
      if ($17 & 1) {
       label = 36; //@line 25489
      } else {
       do {
        if ($16) {
         __THREW__ = 0; //@line 25493
         invoke_vii(120, $6 | 0, $4 | 0); //@line 25494
         $19 = __THREW__; //@line 25495
         __THREW__ = 0; //@line 25495
         if ($19 & 1) {
          label = 36; //@line 25498
          break L6;
         }
         __THREW__ = 0; //@line 25501
         $21 = invoke_ii(144, $6 | 0) | 0; //@line 25502
         $22 = __THREW__; //@line 25503
         __THREW__ = 0; //@line 25503
         if ($22 & 1) {
          $105 = ___cxa_find_matching_catch_2() | 0; //@line 25506
          $106 = tempRet0; //@line 25507
          $107 = $6 + 52 | 0; //@line 25508
          if ((HEAP8[$107 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$107 >> 2] | 0); //@line 25514
          }
          $112 = $6 + 40 | 0; //@line 25516
          $113 = HEAP32[$112 >> 2] | 0; //@line 25517
          if ($113 | 0) {
           $115 = $6 + 44 | 0; //@line 25520
           $116 = HEAP32[$115 >> 2] | 0; //@line 25521
           do {
            if (($116 | 0) == ($113 | 0)) {
             $127 = $113; //@line 25525
            } else {
             $118 = $6 + 48 | 0; //@line 25527
             $120 = $116; //@line 25528
             while (1) {
              $119 = $120 + -72 | 0; //@line 25530
              HEAP32[$115 >> 2] = $119; //@line 25531
              __THREW__ = 0; //@line 25532
              HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25533
              invoke_viii(13, $$byval_copy9 | 0, $118 | 0, $119 | 0); //@line 25534
              $121 = __THREW__; //@line 25535
              __THREW__ = 0; //@line 25535
              if ($121 & 1) {
               label = 44; //@line 25538
               break;
              }
              $120 = HEAP32[$115 >> 2] | 0; //@line 25541
              if (($120 | 0) == ($113 | 0)) {
               label = 45; //@line 25544
               break;
              }
             }
             if ((label | 0) == 44) {
              $125 = ___cxa_find_matching_catch_3(0) | 0; //@line 25551
              ___clang_call_terminate($125); //@line 25553
             } else if ((label | 0) == 45) {
              $127 = HEAP32[$112 >> 2] | 0; //@line 25558
              break;
             }
            }
           } while (0);
           __ZdlPv($127); //@line 25563
          }
          $128 = $6 + 4 | 0; //@line 25565
          if ((HEAP8[$128 + 11 >> 0] | 0) >= 0) {
           $$07$i$i$i = $106; //@line 25570
           $$08$i$i$i = $105; //@line 25570
           break L6;
          }
          __ZdlPv(HEAP32[$128 >> 2] | 0); //@line 25574
          $$07$i$i$i = $106; //@line 25575
          $$08$i$i$i = $105; //@line 25575
          break L6;
         } else {
          $24 = $6 + 52 | 0; //@line 25578
          if ((HEAP8[$24 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 25584
          }
          $29 = $6 + 40 | 0; //@line 25586
          $30 = HEAP32[$29 >> 2] | 0; //@line 25587
          if ($30 | 0) {
           $32 = $6 + 44 | 0; //@line 25590
           $33 = HEAP32[$32 >> 2] | 0; //@line 25591
           do {
            if (($33 | 0) == ($30 | 0)) {
             $44 = $30; //@line 25595
            } else {
             $35 = $6 + 48 | 0; //@line 25597
             $37 = $33; //@line 25598
             while (1) {
              $36 = $37 + -72 | 0; //@line 25600
              HEAP32[$32 >> 2] = $36; //@line 25601
              __THREW__ = 0; //@line 25602
              HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25603
              invoke_viii(13, $$byval_copy9 | 0, $35 | 0, $36 | 0); //@line 25604
              $38 = __THREW__; //@line 25605
              __THREW__ = 0; //@line 25605
              if ($38 & 1) {
               label = 15; //@line 25608
               break;
              }
              $37 = HEAP32[$32 >> 2] | 0; //@line 25611
              if (($37 | 0) == ($30 | 0)) {
               label = 16; //@line 25614
               break;
              }
             }
             if ((label | 0) == 15) {
              $42 = ___cxa_find_matching_catch_3(0) | 0; //@line 25621
              ___clang_call_terminate($42); //@line 25623
             } else if ((label | 0) == 16) {
              $44 = HEAP32[$29 >> 2] | 0; //@line 25628
              break;
             }
            }
           } while (0);
           __ZdlPv($44); //@line 25633
          }
          $45 = $6 + 4 | 0; //@line 25635
          if ((HEAP8[$45 + 11 >> 0] | 0) >= 0) {
           $327 = $21; //@line 25640
           break;
          }
          __ZdlPv(HEAP32[$45 >> 2] | 0); //@line 25644
          $327 = $21; //@line 25645
          break;
         }
        } else {
         $327 = 0; //@line 25649
        }
       } while (0);
       $50 = $5 + 52 | 0; //@line 25652
       if ((HEAP8[$50 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$50 >> 2] | 0); //@line 25658
       }
       $55 = $5 + 40 | 0; //@line 25660
       $56 = HEAP32[$55 >> 2] | 0; //@line 25661
       if ($56 | 0) {
        $58 = $5 + 44 | 0; //@line 25664
        $59 = HEAP32[$58 >> 2] | 0; //@line 25665
        do {
         if (($59 | 0) == ($56 | 0)) {
          $70 = $56; //@line 25669
         } else {
          $61 = $5 + 48 | 0; //@line 25671
          $63 = $59; //@line 25672
          while (1) {
           $62 = $63 + -72 | 0; //@line 25674
           HEAP32[$58 >> 2] = $62; //@line 25675
           __THREW__ = 0; //@line 25676
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25677
           invoke_viii(13, $$byval_copy9 | 0, $61 | 0, $62 | 0); //@line 25678
           $64 = __THREW__; //@line 25679
           __THREW__ = 0; //@line 25679
           if ($64 & 1) {
            label = 27; //@line 25682
            break;
           }
           $63 = HEAP32[$58 >> 2] | 0; //@line 25685
           if (($63 | 0) == ($56 | 0)) {
            label = 28; //@line 25688
            break;
           }
          }
          if ((label | 0) == 27) {
           $68 = ___cxa_find_matching_catch_3(0) | 0; //@line 25695
           ___clang_call_terminate($68); //@line 25697
          } else if ((label | 0) == 28) {
           $70 = HEAP32[$55 >> 2] | 0; //@line 25702
           break;
          }
         }
        } while (0);
        __ZdlPv($70); //@line 25707
       }
       $71 = $5 + 4 | 0; //@line 25709
       if ((HEAP8[$71 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$71 >> 2] | 0); //@line 25715
       }
       if (!$327) {
        $159 = ___cxa_allocate_exception(8) | 0; //@line 25718
        __THREW__ = 0; //@line 25719
        invoke_vii(125, $159 | 0, 15771); //@line 25720
        $160 = __THREW__; //@line 25721
        __THREW__ = 0; //@line 25721
        if ($160 & 1) {
         $163 = ___cxa_find_matching_catch_2() | 0; //@line 25724
         $164 = tempRet0; //@line 25725
         ___cxa_free_exception($159 | 0); //@line 25726
         $$1$i$i$i = $164; //@line 25727
         $$19$i$i$i = $163; //@line 25727
         break L4;
        } else {
         __THREW__ = 0; //@line 25730
         invoke_viii(16, $159 | 0, 2824, 242); //@line 25731
         __THREW__ = 0; //@line 25732
         label = 35; //@line 25733
         break L4;
        }
       }
       $76 = $3 + 24 | 0; //@line 25737
       $77 = $76; //@line 25738
       $84 = $4 + 24 | 0; //@line 25745
       $90 = ___muldi3(HEAP32[$84 >> 2] | 0, HEAP32[$84 + 4 >> 2] | 0, HEAP32[$77 >> 2] | 0, HEAP32[$77 + 4 >> 2] | 0) | 0; //@line 25751
       $92 = $76; //@line 25753
       HEAP32[$92 >> 2] = $90; //@line 25755
       HEAP32[$92 + 4 >> 2] = tempRet0; //@line 25758
       __THREW__ = 0; //@line 25759
       $96 = invoke_ii(143, $$val | 0) | 0; //@line 25760
       $97 = __THREW__; //@line 25761
       __THREW__ = 0; //@line 25761
       if ($97 & 1) {
        label = 35; //@line 25764
        break L4;
       }
       __THREW__ = 0; //@line 25767
       invoke_vii(120, $7 | 0, $3 | 0); //@line 25768
       $165 = __THREW__; //@line 25769
       __THREW__ = 0; //@line 25769
       if ($165 & 1) {
        label = 35; //@line 25772
        break L4;
       }
       __THREW__ = 0; //@line 25775
       invoke_vii(128, $96 | 0, $7 | 0); //@line 25776
       $167 = __THREW__; //@line 25777
       __THREW__ = 0; //@line 25777
       if ($167 & 1) {
        $247 = ___cxa_find_matching_catch_2() | 0; //@line 25780
        $248 = tempRet0; //@line 25781
        $249 = $7 + 52 | 0; //@line 25782
        if ((HEAP8[$249 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$249 >> 2] | 0); //@line 25788
        }
        $254 = $7 + 40 | 0; //@line 25790
        $255 = HEAP32[$254 >> 2] | 0; //@line 25791
        if ($255 | 0) {
         $257 = $7 + 44 | 0; //@line 25794
         $258 = HEAP32[$257 >> 2] | 0; //@line 25795
         do {
          if (($258 | 0) == ($255 | 0)) {
           $269 = $255; //@line 25799
          } else {
           $260 = $7 + 48 | 0; //@line 25801
           $262 = $258; //@line 25802
           while (1) {
            $261 = $262 + -72 | 0; //@line 25804
            HEAP32[$257 >> 2] = $261; //@line 25805
            __THREW__ = 0; //@line 25806
            HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25807
            invoke_viii(13, $$byval_copy9 | 0, $260 | 0, $261 | 0); //@line 25808
            $263 = __THREW__; //@line 25809
            __THREW__ = 0; //@line 25809
            if ($263 & 1) {
             label = 109; //@line 25812
             break;
            }
            $262 = HEAP32[$257 >> 2] | 0; //@line 25815
            if (($262 | 0) == ($255 | 0)) {
             label = 110; //@line 25818
             break;
            }
           }
           if ((label | 0) == 109) {
            $267 = ___cxa_find_matching_catch_3(0) | 0; //@line 25825
            ___clang_call_terminate($267); //@line 25827
           } else if ((label | 0) == 110) {
            $269 = HEAP32[$254 >> 2] | 0; //@line 25832
            break;
           }
          }
         } while (0);
         __ZdlPv($269); //@line 25837
        }
        $270 = $7 + 4 | 0; //@line 25839
        if ((HEAP8[$270 + 11 >> 0] | 0) >= 0) {
         $$1$i$i$i = $248; //@line 25844
         $$19$i$i$i = $247; //@line 25844
         break L4;
        }
        __ZdlPv(HEAP32[$270 >> 2] | 0); //@line 25848
        $$1$i$i$i = $248; //@line 25849
        $$19$i$i$i = $247; //@line 25849
        break L4;
       }
       $169 = $7 + 52 | 0; //@line 25852
       if ((HEAP8[$169 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$169 >> 2] | 0); //@line 25858
       }
       $174 = $7 + 40 | 0; //@line 25860
       $175 = HEAP32[$174 >> 2] | 0; //@line 25861
       if ($175 | 0) {
        $177 = $7 + 44 | 0; //@line 25864
        $178 = HEAP32[$177 >> 2] | 0; //@line 25865
        do {
         if (($178 | 0) == ($175 | 0)) {
          $189 = $175; //@line 25869
         } else {
          $180 = $7 + 48 | 0; //@line 25871
          $182 = $178; //@line 25872
          while (1) {
           $181 = $182 + -72 | 0; //@line 25874
           HEAP32[$177 >> 2] = $181; //@line 25875
           __THREW__ = 0; //@line 25876
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25877
           invoke_viii(13, $$byval_copy9 | 0, $180 | 0, $181 | 0); //@line 25878
           $183 = __THREW__; //@line 25879
           __THREW__ = 0; //@line 25879
           if ($183 & 1) {
            label = 73; //@line 25882
            break;
           }
           $182 = HEAP32[$177 >> 2] | 0; //@line 25885
           if (($182 | 0) == ($175 | 0)) {
            label = 74; //@line 25888
            break;
           }
          }
          if ((label | 0) == 73) {
           $187 = ___cxa_find_matching_catch_3(0) | 0; //@line 25895
           ___clang_call_terminate($187); //@line 25897
          } else if ((label | 0) == 74) {
           $189 = HEAP32[$174 >> 2] | 0; //@line 25902
           break;
          }
         }
        } while (0);
        __ZdlPv($189); //@line 25907
       }
       $190 = $7 + 4 | 0; //@line 25909
       if ((HEAP8[$190 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$190 >> 2] | 0); //@line 25915
       }
       $195 = $4 + 52 | 0; //@line 25917
       if ((HEAP8[$195 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$195 >> 2] | 0); //@line 25923
       }
       $200 = $4 + 40 | 0; //@line 25925
       $201 = HEAP32[$200 >> 2] | 0; //@line 25926
       if ($201 | 0) {
        $203 = $4 + 44 | 0; //@line 25929
        $204 = HEAP32[$203 >> 2] | 0; //@line 25930
        do {
         if (($204 | 0) == ($201 | 0)) {
          $215 = $201; //@line 25934
         } else {
          $206 = $4 + 48 | 0; //@line 25936
          $208 = $204; //@line 25937
          while (1) {
           $207 = $208 + -72 | 0; //@line 25939
           HEAP32[$203 >> 2] = $207; //@line 25940
           __THREW__ = 0; //@line 25941
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25942
           invoke_viii(13, $$byval_copy9 | 0, $206 | 0, $207 | 0); //@line 25943
           $209 = __THREW__; //@line 25944
           __THREW__ = 0; //@line 25944
           if ($209 & 1) {
            label = 85; //@line 25947
            break;
           }
           $208 = HEAP32[$203 >> 2] | 0; //@line 25950
           if (($208 | 0) == ($201 | 0)) {
            label = 86; //@line 25953
            break;
           }
          }
          if ((label | 0) == 85) {
           $213 = ___cxa_find_matching_catch_3(0) | 0; //@line 25960
           ___clang_call_terminate($213); //@line 25962
          } else if ((label | 0) == 86) {
           $215 = HEAP32[$200 >> 2] | 0; //@line 25967
           break;
          }
         }
        } while (0);
        __ZdlPv($215); //@line 25972
       }
       $216 = $4 + 4 | 0; //@line 25974
       if ((HEAP8[$216 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$216 >> 2] | 0); //@line 25980
       }
       $221 = $3 + 52 | 0; //@line 25982
       if ((HEAP8[$221 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$221 >> 2] | 0); //@line 25988
       }
       $226 = $3 + 40 | 0; //@line 25990
       $227 = HEAP32[$226 >> 2] | 0; //@line 25991
       if ($227 | 0) {
        $229 = $3 + 44 | 0; //@line 25994
        $230 = HEAP32[$229 >> 2] | 0; //@line 25995
        do {
         if (($230 | 0) == ($227 | 0)) {
          $241 = $227; //@line 25999
         } else {
          $232 = $3 + 48 | 0; //@line 26001
          $234 = $230; //@line 26002
          while (1) {
           $233 = $234 + -72 | 0; //@line 26004
           HEAP32[$229 >> 2] = $233; //@line 26005
           __THREW__ = 0; //@line 26006
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26007
           invoke_viii(13, $$byval_copy9 | 0, $232 | 0, $233 | 0); //@line 26008
           $235 = __THREW__; //@line 26009
           __THREW__ = 0; //@line 26009
           if ($235 & 1) {
            label = 97; //@line 26012
            break;
           }
           $234 = HEAP32[$229 >> 2] | 0; //@line 26015
           if (($234 | 0) == ($227 | 0)) {
            label = 98; //@line 26018
            break;
           }
          }
          if ((label | 0) == 97) {
           $239 = ___cxa_find_matching_catch_3(0) | 0; //@line 26025
           ___clang_call_terminate($239); //@line 26027
          } else if ((label | 0) == 98) {
           $241 = HEAP32[$226 >> 2] | 0; //@line 26032
           break;
          }
         }
        } while (0);
        __ZdlPv($241); //@line 26037
       }
       $242 = $3 + 4 | 0; //@line 26039
       if ((HEAP8[$242 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 26044
        return;
       }
       __ZdlPv(HEAP32[$242 >> 2] | 0); //@line 26047
       STACKTOP = sp; //@line 26048
       return;
      }
     } while (0);
     if ((label | 0) == 36) {
      $103 = ___cxa_find_matching_catch_2() | 0; //@line 26052
      $$07$i$i$i = tempRet0; //@line 26054
      $$08$i$i$i = $103; //@line 26054
     }
     $133 = $5 + 52 | 0; //@line 26056
     if ((HEAP8[$133 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$133 >> 2] | 0); //@line 26062
     }
     $138 = $5 + 40 | 0; //@line 26064
     $139 = HEAP32[$138 >> 2] | 0; //@line 26065
     if ($139 | 0) {
      $141 = $5 + 44 | 0; //@line 26068
      $142 = HEAP32[$141 >> 2] | 0; //@line 26069
      do {
       if (($142 | 0) == ($139 | 0)) {
        $153 = $139; //@line 26073
       } else {
        $144 = $5 + 48 | 0; //@line 26075
        $146 = $142; //@line 26076
        while (1) {
         $145 = $146 + -72 | 0; //@line 26078
         HEAP32[$141 >> 2] = $145; //@line 26079
         __THREW__ = 0; //@line 26080
         HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26081
         invoke_viii(13, $$byval_copy9 | 0, $144 | 0, $145 | 0); //@line 26082
         $147 = __THREW__; //@line 26083
         __THREW__ = 0; //@line 26083
         if ($147 & 1) {
          label = 56; //@line 26086
          break;
         }
         $146 = HEAP32[$141 >> 2] | 0; //@line 26089
         if (($146 | 0) == ($139 | 0)) {
          label = 57; //@line 26092
          break;
         }
        }
        if ((label | 0) == 56) {
         $151 = ___cxa_find_matching_catch_3(0) | 0; //@line 26099
         ___clang_call_terminate($151); //@line 26101
        } else if ((label | 0) == 57) {
         $153 = HEAP32[$138 >> 2] | 0; //@line 26106
         break;
        }
       }
      } while (0);
      __ZdlPv($153); //@line 26111
     }
     $154 = $5 + 4 | 0; //@line 26113
     if ((HEAP8[$154 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$154 >> 2] | 0); //@line 26119
      $$1$i$i$i = $$07$i$i$i; //@line 26120
      $$19$i$i$i = $$08$i$i$i; //@line 26120
     } else {
      $$1$i$i$i = $$07$i$i$i; //@line 26122
      $$19$i$i$i = $$08$i$i$i; //@line 26122
     }
    }
   } while (0);
   if ((label | 0) == 35) {
    $101 = ___cxa_find_matching_catch_2() | 0; //@line 26127
    $$1$i$i$i = tempRet0; //@line 26129
    $$19$i$i$i = $101; //@line 26129
   }
   $275 = $4 + 52 | 0; //@line 26131
   if ((HEAP8[$275 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$275 >> 2] | 0); //@line 26137
   }
   $280 = $4 + 40 | 0; //@line 26139
   $281 = HEAP32[$280 >> 2] | 0; //@line 26140
   if ($281 | 0) {
    $283 = $4 + 44 | 0; //@line 26143
    $284 = HEAP32[$283 >> 2] | 0; //@line 26144
    do {
     if (($284 | 0) == ($281 | 0)) {
      $295 = $281; //@line 26148
     } else {
      $286 = $4 + 48 | 0; //@line 26150
      $288 = $284; //@line 26151
      while (1) {
       $287 = $288 + -72 | 0; //@line 26153
       HEAP32[$283 >> 2] = $287; //@line 26154
       __THREW__ = 0; //@line 26155
       HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26156
       invoke_viii(13, $$byval_copy9 | 0, $286 | 0, $287 | 0); //@line 26157
       $289 = __THREW__; //@line 26158
       __THREW__ = 0; //@line 26158
       if ($289 & 1) {
        label = 121; //@line 26161
        break;
       }
       $288 = HEAP32[$283 >> 2] | 0; //@line 26164
       if (($288 | 0) == ($281 | 0)) {
        label = 122; //@line 26167
        break;
       }
      }
      if ((label | 0) == 121) {
       $293 = ___cxa_find_matching_catch_3(0) | 0; //@line 26174
       ___clang_call_terminate($293); //@line 26176
      } else if ((label | 0) == 122) {
       $295 = HEAP32[$280 >> 2] | 0; //@line 26181
       break;
      }
     }
    } while (0);
    __ZdlPv($295); //@line 26186
   }
   $296 = $4 + 4 | 0; //@line 26188
   if ((HEAP8[$296 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$296 >> 2] | 0); //@line 26194
    $$2$i$i$i = $$1$i$i$i; //@line 26195
    $$210$i$i$i = $$19$i$i$i; //@line 26195
   } else {
    $$2$i$i$i = $$1$i$i$i; //@line 26197
    $$210$i$i$i = $$19$i$i$i; //@line 26197
   }
  }
 }
 if ((label | 0) == 34) {
  $99 = ___cxa_find_matching_catch_2() | 0; //@line 26202
  $$2$i$i$i = tempRet0; //@line 26204
  $$210$i$i$i = $99; //@line 26204
 }
 $301 = $3 + 52 | 0; //@line 26206
 if ((HEAP8[$301 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$301 >> 2] | 0); //@line 26212
 }
 $306 = $3 + 40 | 0; //@line 26214
 $307 = HEAP32[$306 >> 2] | 0; //@line 26215
 if ($307 | 0) {
  $309 = $3 + 44 | 0; //@line 26218
  $310 = HEAP32[$309 >> 2] | 0; //@line 26219
  do {
   if (($310 | 0) == ($307 | 0)) {
    $321 = $307; //@line 26223
   } else {
    $312 = $3 + 48 | 0; //@line 26225
    $314 = $310; //@line 26226
    while (1) {
     $313 = $314 + -72 | 0; //@line 26228
     HEAP32[$309 >> 2] = $313; //@line 26229
     __THREW__ = 0; //@line 26230
     HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 26231
     invoke_viii(13, $$byval_copy9 | 0, $312 | 0, $313 | 0); //@line 26232
     $315 = __THREW__; //@line 26233
     __THREW__ = 0; //@line 26233
     if ($315 & 1) {
      label = 133; //@line 26236
      break;
     }
     $314 = HEAP32[$309 >> 2] | 0; //@line 26239
     if (($314 | 0) == ($307 | 0)) {
      label = 134; //@line 26242
      break;
     }
    }
    if ((label | 0) == 133) {
     $319 = ___cxa_find_matching_catch_3(0) | 0; //@line 26249
     ___clang_call_terminate($319); //@line 26251
    } else if ((label | 0) == 134) {
     $321 = HEAP32[$306 >> 2] | 0; //@line 26256
     break;
    }
   }
  } while (0);
  __ZdlPv($321); //@line 26261
 }
 $322 = $3 + 4 | 0; //@line 26263
 if ((HEAP8[$322 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$210$i$i$i | 0); //@line 26268
 }
 __ZdlPv(HEAP32[$322 >> 2] | 0); //@line 26272
 ___resumeException($$210$i$i$i | 0); //@line 26273
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07$i$i$i = 0, $$08$i$i$i = 0, $$1$i$i$i = 0, $$19$i$i$i = 0, $$2$i$i$i = 0, $$210$i$i$i = 0, $$byval_copy9 = 0, $$val = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $125 = 0, $127 = 0, $128 = 0, $133 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $160 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $169 = 0, $17 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $187 = 0, $189 = 0, $19 = 0, $190 = 0, $195 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $213 = 0, $215 = 0, $216 = 0, $22 = 0, $221 = 0, $226 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $239 = 0, $24 = 0, $241 = 0, $242 = 0, $247 = 0, $248 = 0, $249 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $267 = 0, $269 = 0, $270 = 0, $275 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $293 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $301 = 0, $306 = 0, $307 = 0, $309 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $327 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $76 = 0, $77 = 0, $84 = 0, $9 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28325
 STACKTOP = STACKTOP + 368 | 0; //@line 28326
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368); //@line 28326
 $$byval_copy9 = sp + 361 | 0; //@line 28327
 $2 = sp + 360 | 0; //@line 28328
 $3 = sp + 288 | 0; //@line 28329
 $4 = sp + 216 | 0; //@line 28330
 $5 = sp + 144 | 0; //@line 28331
 $6 = sp + 72 | 0; //@line 28332
 $7 = sp; //@line 28333
 $$val = HEAP32[$1 >> 2] | 0; //@line 28334
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 28336
 __THREW__ = 0; //@line 28337
 $9 = invoke_ii(143, $$val | 0) | 0; //@line 28338
 $10 = __THREW__; //@line 28339
 __THREW__ = 0; //@line 28339
 if ($10 & 1) {
  label = 34; //@line 28342
 } else {
  __THREW__ = 0; //@line 28344
  invoke_vii(131, $4 | 0, $9 | 0); //@line 28345
  $12 = __THREW__; //@line 28346
  __THREW__ = 0; //@line 28346
  if ($12 & 1) {
   label = 34; //@line 28349
  } else {
   __THREW__ = 0; //@line 28351
   invoke_vii(120, $5 | 0, $3 | 0); //@line 28352
   $14 = __THREW__; //@line 28353
   __THREW__ = 0; //@line 28353
   L4 : do {
    if ($14 & 1) {
     label = 35; //@line 28357
    } else {
     __THREW__ = 0; //@line 28359
     $16 = invoke_ii(144, $5 | 0) | 0; //@line 28360
     $17 = __THREW__; //@line 28361
     __THREW__ = 0; //@line 28361
     L6 : do {
      if ($17 & 1) {
       label = 36; //@line 28365
      } else {
       do {
        if ($16) {
         __THREW__ = 0; //@line 28369
         invoke_vii(120, $6 | 0, $4 | 0); //@line 28370
         $19 = __THREW__; //@line 28371
         __THREW__ = 0; //@line 28371
         if ($19 & 1) {
          label = 36; //@line 28374
          break L6;
         }
         __THREW__ = 0; //@line 28377
         $21 = invoke_ii(144, $6 | 0) | 0; //@line 28378
         $22 = __THREW__; //@line 28379
         __THREW__ = 0; //@line 28379
         if ($22 & 1) {
          $105 = ___cxa_find_matching_catch_2() | 0; //@line 28382
          $106 = tempRet0; //@line 28383
          $107 = $6 + 52 | 0; //@line 28384
          if ((HEAP8[$107 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$107 >> 2] | 0); //@line 28390
          }
          $112 = $6 + 40 | 0; //@line 28392
          $113 = HEAP32[$112 >> 2] | 0; //@line 28393
          if ($113 | 0) {
           $115 = $6 + 44 | 0; //@line 28396
           $116 = HEAP32[$115 >> 2] | 0; //@line 28397
           do {
            if (($116 | 0) == ($113 | 0)) {
             $127 = $113; //@line 28401
            } else {
             $118 = $6 + 48 | 0; //@line 28403
             $120 = $116; //@line 28404
             while (1) {
              $119 = $120 + -72 | 0; //@line 28406
              HEAP32[$115 >> 2] = $119; //@line 28407
              __THREW__ = 0; //@line 28408
              HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28409
              invoke_viii(13, $$byval_copy9 | 0, $118 | 0, $119 | 0); //@line 28410
              $121 = __THREW__; //@line 28411
              __THREW__ = 0; //@line 28411
              if ($121 & 1) {
               label = 44; //@line 28414
               break;
              }
              $120 = HEAP32[$115 >> 2] | 0; //@line 28417
              if (($120 | 0) == ($113 | 0)) {
               label = 45; //@line 28420
               break;
              }
             }
             if ((label | 0) == 44) {
              $125 = ___cxa_find_matching_catch_3(0) | 0; //@line 28427
              ___clang_call_terminate($125); //@line 28429
             } else if ((label | 0) == 45) {
              $127 = HEAP32[$112 >> 2] | 0; //@line 28434
              break;
             }
            }
           } while (0);
           __ZdlPv($127); //@line 28439
          }
          $128 = $6 + 4 | 0; //@line 28441
          if ((HEAP8[$128 + 11 >> 0] | 0) >= 0) {
           $$07$i$i$i = $106; //@line 28446
           $$08$i$i$i = $105; //@line 28446
           break L6;
          }
          __ZdlPv(HEAP32[$128 >> 2] | 0); //@line 28450
          $$07$i$i$i = $106; //@line 28451
          $$08$i$i$i = $105; //@line 28451
          break L6;
         } else {
          $24 = $6 + 52 | 0; //@line 28454
          if ((HEAP8[$24 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$24 >> 2] | 0); //@line 28460
          }
          $29 = $6 + 40 | 0; //@line 28462
          $30 = HEAP32[$29 >> 2] | 0; //@line 28463
          if ($30 | 0) {
           $32 = $6 + 44 | 0; //@line 28466
           $33 = HEAP32[$32 >> 2] | 0; //@line 28467
           do {
            if (($33 | 0) == ($30 | 0)) {
             $44 = $30; //@line 28471
            } else {
             $35 = $6 + 48 | 0; //@line 28473
             $37 = $33; //@line 28474
             while (1) {
              $36 = $37 + -72 | 0; //@line 28476
              HEAP32[$32 >> 2] = $36; //@line 28477
              __THREW__ = 0; //@line 28478
              HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28479
              invoke_viii(13, $$byval_copy9 | 0, $35 | 0, $36 | 0); //@line 28480
              $38 = __THREW__; //@line 28481
              __THREW__ = 0; //@line 28481
              if ($38 & 1) {
               label = 15; //@line 28484
               break;
              }
              $37 = HEAP32[$32 >> 2] | 0; //@line 28487
              if (($37 | 0) == ($30 | 0)) {
               label = 16; //@line 28490
               break;
              }
             }
             if ((label | 0) == 15) {
              $42 = ___cxa_find_matching_catch_3(0) | 0; //@line 28497
              ___clang_call_terminate($42); //@line 28499
             } else if ((label | 0) == 16) {
              $44 = HEAP32[$29 >> 2] | 0; //@line 28504
              break;
             }
            }
           } while (0);
           __ZdlPv($44); //@line 28509
          }
          $45 = $6 + 4 | 0; //@line 28511
          if ((HEAP8[$45 + 11 >> 0] | 0) >= 0) {
           $327 = $21; //@line 28516
           break;
          }
          __ZdlPv(HEAP32[$45 >> 2] | 0); //@line 28520
          $327 = $21; //@line 28521
          break;
         }
        } else {
         $327 = 0; //@line 28525
        }
       } while (0);
       $50 = $5 + 52 | 0; //@line 28528
       if ((HEAP8[$50 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$50 >> 2] | 0); //@line 28534
       }
       $55 = $5 + 40 | 0; //@line 28536
       $56 = HEAP32[$55 >> 2] | 0; //@line 28537
       if ($56 | 0) {
        $58 = $5 + 44 | 0; //@line 28540
        $59 = HEAP32[$58 >> 2] | 0; //@line 28541
        do {
         if (($59 | 0) == ($56 | 0)) {
          $70 = $56; //@line 28545
         } else {
          $61 = $5 + 48 | 0; //@line 28547
          $63 = $59; //@line 28548
          while (1) {
           $62 = $63 + -72 | 0; //@line 28550
           HEAP32[$58 >> 2] = $62; //@line 28551
           __THREW__ = 0; //@line 28552
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28553
           invoke_viii(13, $$byval_copy9 | 0, $61 | 0, $62 | 0); //@line 28554
           $64 = __THREW__; //@line 28555
           __THREW__ = 0; //@line 28555
           if ($64 & 1) {
            label = 27; //@line 28558
            break;
           }
           $63 = HEAP32[$58 >> 2] | 0; //@line 28561
           if (($63 | 0) == ($56 | 0)) {
            label = 28; //@line 28564
            break;
           }
          }
          if ((label | 0) == 27) {
           $68 = ___cxa_find_matching_catch_3(0) | 0; //@line 28571
           ___clang_call_terminate($68); //@line 28573
          } else if ((label | 0) == 28) {
           $70 = HEAP32[$55 >> 2] | 0; //@line 28578
           break;
          }
         }
        } while (0);
        __ZdlPv($70); //@line 28583
       }
       $71 = $5 + 4 | 0; //@line 28585
       if ((HEAP8[$71 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$71 >> 2] | 0); //@line 28591
       }
       if (!$327) {
        $159 = ___cxa_allocate_exception(8) | 0; //@line 28594
        __THREW__ = 0; //@line 28595
        invoke_vii(125, $159 | 0, 15925); //@line 28596
        $160 = __THREW__; //@line 28597
        __THREW__ = 0; //@line 28597
        if ($160 & 1) {
         $163 = ___cxa_find_matching_catch_2() | 0; //@line 28600
         $164 = tempRet0; //@line 28601
         ___cxa_free_exception($159 | 0); //@line 28602
         $$1$i$i$i = $164; //@line 28603
         $$19$i$i$i = $163; //@line 28603
         break L4;
        } else {
         __THREW__ = 0; //@line 28606
         invoke_viii(16, $159 | 0, 2824, 242); //@line 28607
         __THREW__ = 0; //@line 28608
         label = 35; //@line 28609
         break L4;
        }
       }
       $76 = $3 + 24 | 0; //@line 28613
       $77 = $76; //@line 28614
       $84 = $4 + 24 | 0; //@line 28621
       $90 = _i64Add(HEAP32[$84 >> 2] | 0, HEAP32[$84 + 4 >> 2] | 0, HEAP32[$77 >> 2] | 0, HEAP32[$77 + 4 >> 2] | 0) | 0; //@line 28627
       $92 = $76; //@line 28629
       HEAP32[$92 >> 2] = $90; //@line 28631
       HEAP32[$92 + 4 >> 2] = tempRet0; //@line 28634
       __THREW__ = 0; //@line 28635
       $96 = invoke_ii(143, $$val | 0) | 0; //@line 28636
       $97 = __THREW__; //@line 28637
       __THREW__ = 0; //@line 28637
       if ($97 & 1) {
        label = 35; //@line 28640
        break L4;
       }
       __THREW__ = 0; //@line 28643
       invoke_vii(120, $7 | 0, $3 | 0); //@line 28644
       $165 = __THREW__; //@line 28645
       __THREW__ = 0; //@line 28645
       if ($165 & 1) {
        label = 35; //@line 28648
        break L4;
       }
       __THREW__ = 0; //@line 28651
       invoke_vii(128, $96 | 0, $7 | 0); //@line 28652
       $167 = __THREW__; //@line 28653
       __THREW__ = 0; //@line 28653
       if ($167 & 1) {
        $247 = ___cxa_find_matching_catch_2() | 0; //@line 28656
        $248 = tempRet0; //@line 28657
        $249 = $7 + 52 | 0; //@line 28658
        if ((HEAP8[$249 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$249 >> 2] | 0); //@line 28664
        }
        $254 = $7 + 40 | 0; //@line 28666
        $255 = HEAP32[$254 >> 2] | 0; //@line 28667
        if ($255 | 0) {
         $257 = $7 + 44 | 0; //@line 28670
         $258 = HEAP32[$257 >> 2] | 0; //@line 28671
         do {
          if (($258 | 0) == ($255 | 0)) {
           $269 = $255; //@line 28675
          } else {
           $260 = $7 + 48 | 0; //@line 28677
           $262 = $258; //@line 28678
           while (1) {
            $261 = $262 + -72 | 0; //@line 28680
            HEAP32[$257 >> 2] = $261; //@line 28681
            __THREW__ = 0; //@line 28682
            HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28683
            invoke_viii(13, $$byval_copy9 | 0, $260 | 0, $261 | 0); //@line 28684
            $263 = __THREW__; //@line 28685
            __THREW__ = 0; //@line 28685
            if ($263 & 1) {
             label = 109; //@line 28688
             break;
            }
            $262 = HEAP32[$257 >> 2] | 0; //@line 28691
            if (($262 | 0) == ($255 | 0)) {
             label = 110; //@line 28694
             break;
            }
           }
           if ((label | 0) == 109) {
            $267 = ___cxa_find_matching_catch_3(0) | 0; //@line 28701
            ___clang_call_terminate($267); //@line 28703
           } else if ((label | 0) == 110) {
            $269 = HEAP32[$254 >> 2] | 0; //@line 28708
            break;
           }
          }
         } while (0);
         __ZdlPv($269); //@line 28713
        }
        $270 = $7 + 4 | 0; //@line 28715
        if ((HEAP8[$270 + 11 >> 0] | 0) >= 0) {
         $$1$i$i$i = $248; //@line 28720
         $$19$i$i$i = $247; //@line 28720
         break L4;
        }
        __ZdlPv(HEAP32[$270 >> 2] | 0); //@line 28724
        $$1$i$i$i = $248; //@line 28725
        $$19$i$i$i = $247; //@line 28725
        break L4;
       }
       $169 = $7 + 52 | 0; //@line 28728
       if ((HEAP8[$169 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$169 >> 2] | 0); //@line 28734
       }
       $174 = $7 + 40 | 0; //@line 28736
       $175 = HEAP32[$174 >> 2] | 0; //@line 28737
       if ($175 | 0) {
        $177 = $7 + 44 | 0; //@line 28740
        $178 = HEAP32[$177 >> 2] | 0; //@line 28741
        do {
         if (($178 | 0) == ($175 | 0)) {
          $189 = $175; //@line 28745
         } else {
          $180 = $7 + 48 | 0; //@line 28747
          $182 = $178; //@line 28748
          while (1) {
           $181 = $182 + -72 | 0; //@line 28750
           HEAP32[$177 >> 2] = $181; //@line 28751
           __THREW__ = 0; //@line 28752
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28753
           invoke_viii(13, $$byval_copy9 | 0, $180 | 0, $181 | 0); //@line 28754
           $183 = __THREW__; //@line 28755
           __THREW__ = 0; //@line 28755
           if ($183 & 1) {
            label = 73; //@line 28758
            break;
           }
           $182 = HEAP32[$177 >> 2] | 0; //@line 28761
           if (($182 | 0) == ($175 | 0)) {
            label = 74; //@line 28764
            break;
           }
          }
          if ((label | 0) == 73) {
           $187 = ___cxa_find_matching_catch_3(0) | 0; //@line 28771
           ___clang_call_terminate($187); //@line 28773
          } else if ((label | 0) == 74) {
           $189 = HEAP32[$174 >> 2] | 0; //@line 28778
           break;
          }
         }
        } while (0);
        __ZdlPv($189); //@line 28783
       }
       $190 = $7 + 4 | 0; //@line 28785
       if ((HEAP8[$190 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$190 >> 2] | 0); //@line 28791
       }
       $195 = $4 + 52 | 0; //@line 28793
       if ((HEAP8[$195 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$195 >> 2] | 0); //@line 28799
       }
       $200 = $4 + 40 | 0; //@line 28801
       $201 = HEAP32[$200 >> 2] | 0; //@line 28802
       if ($201 | 0) {
        $203 = $4 + 44 | 0; //@line 28805
        $204 = HEAP32[$203 >> 2] | 0; //@line 28806
        do {
         if (($204 | 0) == ($201 | 0)) {
          $215 = $201; //@line 28810
         } else {
          $206 = $4 + 48 | 0; //@line 28812
          $208 = $204; //@line 28813
          while (1) {
           $207 = $208 + -72 | 0; //@line 28815
           HEAP32[$203 >> 2] = $207; //@line 28816
           __THREW__ = 0; //@line 28817
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28818
           invoke_viii(13, $$byval_copy9 | 0, $206 | 0, $207 | 0); //@line 28819
           $209 = __THREW__; //@line 28820
           __THREW__ = 0; //@line 28820
           if ($209 & 1) {
            label = 85; //@line 28823
            break;
           }
           $208 = HEAP32[$203 >> 2] | 0; //@line 28826
           if (($208 | 0) == ($201 | 0)) {
            label = 86; //@line 28829
            break;
           }
          }
          if ((label | 0) == 85) {
           $213 = ___cxa_find_matching_catch_3(0) | 0; //@line 28836
           ___clang_call_terminate($213); //@line 28838
          } else if ((label | 0) == 86) {
           $215 = HEAP32[$200 >> 2] | 0; //@line 28843
           break;
          }
         }
        } while (0);
        __ZdlPv($215); //@line 28848
       }
       $216 = $4 + 4 | 0; //@line 28850
       if ((HEAP8[$216 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$216 >> 2] | 0); //@line 28856
       }
       $221 = $3 + 52 | 0; //@line 28858
       if ((HEAP8[$221 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$221 >> 2] | 0); //@line 28864
       }
       $226 = $3 + 40 | 0; //@line 28866
       $227 = HEAP32[$226 >> 2] | 0; //@line 28867
       if ($227 | 0) {
        $229 = $3 + 44 | 0; //@line 28870
        $230 = HEAP32[$229 >> 2] | 0; //@line 28871
        do {
         if (($230 | 0) == ($227 | 0)) {
          $241 = $227; //@line 28875
         } else {
          $232 = $3 + 48 | 0; //@line 28877
          $234 = $230; //@line 28878
          while (1) {
           $233 = $234 + -72 | 0; //@line 28880
           HEAP32[$229 >> 2] = $233; //@line 28881
           __THREW__ = 0; //@line 28882
           HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28883
           invoke_viii(13, $$byval_copy9 | 0, $232 | 0, $233 | 0); //@line 28884
           $235 = __THREW__; //@line 28885
           __THREW__ = 0; //@line 28885
           if ($235 & 1) {
            label = 97; //@line 28888
            break;
           }
           $234 = HEAP32[$229 >> 2] | 0; //@line 28891
           if (($234 | 0) == ($227 | 0)) {
            label = 98; //@line 28894
            break;
           }
          }
          if ((label | 0) == 97) {
           $239 = ___cxa_find_matching_catch_3(0) | 0; //@line 28901
           ___clang_call_terminate($239); //@line 28903
          } else if ((label | 0) == 98) {
           $241 = HEAP32[$226 >> 2] | 0; //@line 28908
           break;
          }
         }
        } while (0);
        __ZdlPv($241); //@line 28913
       }
       $242 = $3 + 4 | 0; //@line 28915
       if ((HEAP8[$242 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 28920
        return;
       }
       __ZdlPv(HEAP32[$242 >> 2] | 0); //@line 28923
       STACKTOP = sp; //@line 28924
       return;
      }
     } while (0);
     if ((label | 0) == 36) {
      $103 = ___cxa_find_matching_catch_2() | 0; //@line 28928
      $$07$i$i$i = tempRet0; //@line 28930
      $$08$i$i$i = $103; //@line 28930
     }
     $133 = $5 + 52 | 0; //@line 28932
     if ((HEAP8[$133 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$133 >> 2] | 0); //@line 28938
     }
     $138 = $5 + 40 | 0; //@line 28940
     $139 = HEAP32[$138 >> 2] | 0; //@line 28941
     if ($139 | 0) {
      $141 = $5 + 44 | 0; //@line 28944
      $142 = HEAP32[$141 >> 2] | 0; //@line 28945
      do {
       if (($142 | 0) == ($139 | 0)) {
        $153 = $139; //@line 28949
       } else {
        $144 = $5 + 48 | 0; //@line 28951
        $146 = $142; //@line 28952
        while (1) {
         $145 = $146 + -72 | 0; //@line 28954
         HEAP32[$141 >> 2] = $145; //@line 28955
         __THREW__ = 0; //@line 28956
         HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 28957
         invoke_viii(13, $$byval_copy9 | 0, $144 | 0, $145 | 0); //@line 28958
         $147 = __THREW__; //@line 28959
         __THREW__ = 0; //@line 28959
         if ($147 & 1) {
          label = 56; //@line 28962
          break;
         }
         $146 = HEAP32[$141 >> 2] | 0; //@line 28965
         if (($146 | 0) == ($139 | 0)) {
          label = 57; //@line 28968
          break;
         }
        }
        if ((label | 0) == 56) {
         $151 = ___cxa_find_matching_catch_3(0) | 0; //@line 28975
         ___clang_call_terminate($151); //@line 28977
        } else if ((label | 0) == 57) {
         $153 = HEAP32[$138 >> 2] | 0; //@line 28982
         break;
        }
       }
      } while (0);
      __ZdlPv($153); //@line 28987
     }
     $154 = $5 + 4 | 0; //@line 28989
     if ((HEAP8[$154 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$154 >> 2] | 0); //@line 28995
      $$1$i$i$i = $$07$i$i$i; //@line 28996
      $$19$i$i$i = $$08$i$i$i; //@line 28996
     } else {
      $$1$i$i$i = $$07$i$i$i; //@line 28998
      $$19$i$i$i = $$08$i$i$i; //@line 28998
     }
    }
   } while (0);
   if ((label | 0) == 35) {
    $101 = ___cxa_find_matching_catch_2() | 0; //@line 29003
    $$1$i$i$i = tempRet0; //@line 29005
    $$19$i$i$i = $101; //@line 29005
   }
   $275 = $4 + 52 | 0; //@line 29007
   if ((HEAP8[$275 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$275 >> 2] | 0); //@line 29013
   }
   $280 = $4 + 40 | 0; //@line 29015
   $281 = HEAP32[$280 >> 2] | 0; //@line 29016
   if ($281 | 0) {
    $283 = $4 + 44 | 0; //@line 29019
    $284 = HEAP32[$283 >> 2] | 0; //@line 29020
    do {
     if (($284 | 0) == ($281 | 0)) {
      $295 = $281; //@line 29024
     } else {
      $286 = $4 + 48 | 0; //@line 29026
      $288 = $284; //@line 29027
      while (1) {
       $287 = $288 + -72 | 0; //@line 29029
       HEAP32[$283 >> 2] = $287; //@line 29030
       __THREW__ = 0; //@line 29031
       HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 29032
       invoke_viii(13, $$byval_copy9 | 0, $286 | 0, $287 | 0); //@line 29033
       $289 = __THREW__; //@line 29034
       __THREW__ = 0; //@line 29034
       if ($289 & 1) {
        label = 121; //@line 29037
        break;
       }
       $288 = HEAP32[$283 >> 2] | 0; //@line 29040
       if (($288 | 0) == ($281 | 0)) {
        label = 122; //@line 29043
        break;
       }
      }
      if ((label | 0) == 121) {
       $293 = ___cxa_find_matching_catch_3(0) | 0; //@line 29050
       ___clang_call_terminate($293); //@line 29052
      } else if ((label | 0) == 122) {
       $295 = HEAP32[$280 >> 2] | 0; //@line 29057
       break;
      }
     }
    } while (0);
    __ZdlPv($295); //@line 29062
   }
   $296 = $4 + 4 | 0; //@line 29064
   if ((HEAP8[$296 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$296 >> 2] | 0); //@line 29070
    $$2$i$i$i = $$1$i$i$i; //@line 29071
    $$210$i$i$i = $$19$i$i$i; //@line 29071
   } else {
    $$2$i$i$i = $$1$i$i$i; //@line 29073
    $$210$i$i$i = $$19$i$i$i; //@line 29073
   }
  }
 }
 if ((label | 0) == 34) {
  $99 = ___cxa_find_matching_catch_2() | 0; //@line 29078
  $$2$i$i$i = tempRet0; //@line 29080
  $$210$i$i$i = $99; //@line 29080
 }
 $301 = $3 + 52 | 0; //@line 29082
 if ((HEAP8[$301 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$301 >> 2] | 0); //@line 29088
 }
 $306 = $3 + 40 | 0; //@line 29090
 $307 = HEAP32[$306 >> 2] | 0; //@line 29091
 if ($307 | 0) {
  $309 = $3 + 44 | 0; //@line 29094
  $310 = HEAP32[$309 >> 2] | 0; //@line 29095
  do {
   if (($310 | 0) == ($307 | 0)) {
    $321 = $307; //@line 29099
   } else {
    $312 = $3 + 48 | 0; //@line 29101
    $314 = $310; //@line 29102
    while (1) {
     $313 = $314 + -72 | 0; //@line 29104
     HEAP32[$309 >> 2] = $313; //@line 29105
     __THREW__ = 0; //@line 29106
     HEAP8[$$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0; //@line 29107
     invoke_viii(13, $$byval_copy9 | 0, $312 | 0, $313 | 0); //@line 29108
     $315 = __THREW__; //@line 29109
     __THREW__ = 0; //@line 29109
     if ($315 & 1) {
      label = 133; //@line 29112
      break;
     }
     $314 = HEAP32[$309 >> 2] | 0; //@line 29115
     if (($314 | 0) == ($307 | 0)) {
      label = 134; //@line 29118
      break;
     }
    }
    if ((label | 0) == 133) {
     $319 = ___cxa_find_matching_catch_3(0) | 0; //@line 29125
     ___clang_call_terminate($319); //@line 29127
    } else if ((label | 0) == 134) {
     $321 = HEAP32[$306 >> 2] | 0; //@line 29132
     break;
    }
   }
  } while (0);
  __ZdlPv($321); //@line 29137
 }
 $322 = $3 + 4 | 0; //@line 29139
 if ((HEAP8[$322 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$210$i$i$i | 0); //@line 29144
 }
 __ZdlPv(HEAP32[$322 >> 2] | 0); //@line 29148
 ___resumeException($$210$i$i$i | 0); //@line 29149
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$018$i$i$i$i$i$i$i$i = 0, $$018$i$i$i$i$i28$i$i$i = 0, $$04$i$i$i$i = 0, $$05$i$i$i = 0, $$1$i$i$i = 0, $$1$i$i$i$i = 0, $$15$i$i$i$i = 0, $$16$i$i$i = 0, $$2$i$i$i = 0, $$27$i$i$i = 0, $$3$i$i$i = 0, $$38$i$i$i = 0, $$4$i$i$i = 0, $$49$i$i$i = 0, $$5$i$i$i = 0, $$510$i$i$i = 0, $$6$i$i$i = 0, $$611$i$i$i = 0, $$byval_copy8 = 0, $$val = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $11 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $131 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $165 = 0, $167 = 0, $171 = 0, $176 = 0, $177 = 0, $179 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $191 = 0, $197 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $207 = 0, $21 = 0, $213 = 0, $218 = 0, $219 = 0, $221 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $233 = 0, $234 = 0, $239 = 0, $24 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $257 = 0, $259 = 0, $26 = 0, $260 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $49 = 0, $5 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $eh$lpad$body2$i$i$i$index2Z2D = 0, $eh$lpad$body2$i$i$i$indexZ2D = 0, label = 0, sp = 0, $$018$i$i$i$i$i$i$i$i$looptemp = 0, $$018$i$i$i$i$i28$i$i$i$looptemp = 0;
 sp = STACKTOP; //@line 19907
 STACKTOP = STACKTOP + 432 | 0; //@line 19908
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(432); //@line 19908
 $$byval_copy8 = sp + 416 | 0; //@line 19909
 $2 = sp + 228 | 0; //@line 19910
 $3 = sp + 224 | 0; //@line 19911
 $4 = sp + 72 | 0; //@line 19912
 $5 = sp; //@line 19913
 $6 = sp + 184 | 0; //@line 19914
 $7 = sp + 168 | 0; //@line 19915
 $8 = sp + 156 | 0; //@line 19916
 $9 = sp + 144 | 0; //@line 19917
 $$val = HEAP32[$1 >> 2] | 0; //@line 19918
 __ZN5Stack3popEv($4, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 19920
 __THREW__ = 0; //@line 19921
 $11 = invoke_ii(143, $$val | 0) | 0; //@line 19922
 $12 = __THREW__; //@line 19923
 __THREW__ = 0; //@line 19923
 if ($12 & 1) {
  label = 7; //@line 19926
 } else {
  __THREW__ = 0; //@line 19928
  invoke_vii(131, $5 | 0, $11 | 0); //@line 19929
  $14 = __THREW__; //@line 19930
  __THREW__ = 0; //@line 19930
  if ($14 & 1) {
   label = 7; //@line 19933
  } else {
   if ((HEAP32[$4 >> 2] | 0) == 3) {
    if ((HEAP32[$5 >> 2] | 0) == 3) {
     HEAP32[$$byval_copy8 >> 2] = 0; //@line 19941
     HEAP32[$$byval_copy8 + 4 >> 2] = 0; //@line 19941
     HEAP32[$$byval_copy8 + 8 >> 2] = 0; //@line 19941
     $30 = $5 + 4 | 0; //@line 19942
     $31 = $2 + 108 | 0; //@line 19943
     $32 = $2 + 8 | 0; //@line 19944
     HEAP32[$2 >> 2] = 148; //@line 19945
     HEAP32[$31 >> 2] = 168; //@line 19946
     HEAP32[$2 + 4 >> 2] = 0; //@line 19948
     __THREW__ = 0; //@line 19950
     invoke_vii(110, $2 + 108 | 0, $32 | 0); //@line 19951
     $35 = __THREW__; //@line 19952
     __THREW__ = 0; //@line 19952
     L7 : do {
      if ($35 & 1) {
       $61 = ___cxa_find_matching_catch_2() | 0; //@line 19956
       $$1$i$i$i$i = tempRet0; //@line 19958
       $$15$i$i$i$i = $61; //@line 19958
       label = 35; //@line 19959
      } else {
       HEAP32[$2 + 180 >> 2] = 0; //@line 19962
       HEAP32[$2 + 184 >> 2] = -1; //@line 19964
       HEAP32[$2 >> 2] = 4744; //@line 19965
       HEAP32[$31 >> 2] = 4764; //@line 19966
       __THREW__ = 0; //@line 19967
       invoke_vi(261, $32 | 0); //@line 19968
       $39 = __THREW__; //@line 19969
       __THREW__ = 0; //@line 19969
       do {
        if ($39 & 1) {
         $63 = ___cxa_find_matching_catch_2() | 0; //@line 19973
         $$0$i$i$i$i = tempRet0; //@line 19975
         $$04$i$i$i$i = $63; //@line 19975
        } else {
         $41 = $30 + 11 | 0; //@line 19977
         $42 = $2 + 72 | 0; //@line 19978
         if (!(HEAP32[$42 >> 2] | 0)) {
          $49 = _fopen((HEAP8[$41 >> 0] | 0) < 0 ? HEAP32[$30 >> 2] | 0 : $30, 14627) | 0; //@line 19986
          HEAP32[$42 >> 2] = $49; //@line 19987
          if (!$49) {
           label = 14; //@line 19990
          } else {
           HEAP32[$2 + 96 >> 2] = 8; //@line 19993
          }
         } else {
          label = 14; //@line 19996
         }
         if ((label | 0) == 14) {
          $55 = $2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20002
          __THREW__ = 0; //@line 20006
          invoke_vii(112, $55 | 0, HEAP32[$55 + 16 >> 2] | 4 | 0); //@line 20007
          $59 = __THREW__; //@line 20008
          __THREW__ = 0; //@line 20008
          if ($59 & 1) {
           $65 = ___cxa_find_matching_catch_2() | 0; //@line 20011
           $66 = tempRet0; //@line 20012
           __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($32); //@line 20013
           $$0$i$i$i$i = $66; //@line 20014
           $$04$i$i$i$i = $65; //@line 20014
           break;
          }
         }
         __THREW__ = 0; //@line 20018
         invoke_vi(251, $6 | 0); //@line 20019
         $67 = __THREW__; //@line 20020
         __THREW__ = 0; //@line 20020
         if ($67 & 1) {
          $114 = ___cxa_find_matching_catch_2() | 0; //@line 20023
          $$3$i$i$i = tempRet0; //@line 20025
          $$38$i$i$i = $114; //@line 20025
         } else {
          $69 = $4 + 4 | 0; //@line 20027
          $70 = $9 + 11 | 0; //@line 20028
          $71 = $8 + 11 | 0; //@line 20029
          while (1) {
           __THREW__ = 0; //@line 20035
           invoke_vii(132, $3 | 0, $2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 20036
           $76 = __THREW__; //@line 20037
           __THREW__ = 0; //@line 20037
           if ($76 & 1) {
            label = 37; //@line 20040
            break;
           }
           __THREW__ = 0; //@line 20043
           $78 = invoke_iii(63, $3 | 0, 35512) | 0; //@line 20044
           $79 = __THREW__; //@line 20045
           __THREW__ = 0; //@line 20045
           if ($79 & 1) {
            label = 24; //@line 20048
            break;
           }
           __THREW__ = 0; //@line 20054
           $84 = invoke_iii(HEAP32[(HEAP32[$78 >> 2] | 0) + 28 >> 2] | 0, $78 | 0, 10) | 0; //@line 20055
           $85 = __THREW__; //@line 20056
           __THREW__ = 0; //@line 20056
           if ($85 & 1) {
            label = 24; //@line 20059
            break;
           }
           __ZNSt3__26localeD2Ev($3); //@line 20062
           __THREW__ = 0; //@line 20063
           $89 = invoke_iiii(30, $2 | 0, $$byval_copy8 | 0, $84 | 0) | 0; //@line 20064
           $90 = __THREW__; //@line 20065
           __THREW__ = 0; //@line 20065
           if ($90 & 1) {
            label = 37; //@line 20068
            break;
           }
           if (HEAP32[$89 + (HEAP32[(HEAP32[$89 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] & 5 | 0) {
            label = 46; //@line 20080
            break;
           }
           __THREW__ = 0; //@line 20083
           invoke_vii(115, $8 | 0, $$byval_copy8 | 0); //@line 20084
           $100 = __THREW__; //@line 20085
           __THREW__ = 0; //@line 20085
           if ($100 & 1) {
            label = 37; //@line 20088
            break;
           }
           __THREW__ = 0; //@line 20091
           invoke_viii(11, $7 | 0, $6 | 0, $8 | 0); //@line 20092
           $102 = __THREW__; //@line 20093
           __THREW__ = 0; //@line 20093
           if ($102 & 1) {
            label = 39; //@line 20096
            break;
           }
           __THREW__ = 0; //@line 20099
           invoke_vii(115, $9 | 0, $69 | 0); //@line 20100
           $104 = __THREW__; //@line 20101
           __THREW__ = 0; //@line 20101
           if ($104 & 1) {
            label = 40; //@line 20104
            break;
           }
           __THREW__ = 0; //@line 20107
           invoke_viii(12, $$val | 0, $7 | 0, $9 | 0); //@line 20108
           $106 = __THREW__; //@line 20109
           __THREW__ = 0; //@line 20109
           if ($106 & 1) {
            label = 41; //@line 20112
            break;
           }
           if ((HEAP8[$70 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 20119
           }
           __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($7); //@line 20121
           if ((HEAP8[$71 >> 0] | 0) >= 0) {
            continue;
           }
           __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 20128
          }
          if ((label | 0) == 24) {
           $87 = ___cxa_find_matching_catch_2() | 0; //@line 20131
           $88 = tempRet0; //@line 20132
           __ZNSt3__26localeD2Ev($3); //@line 20133
           $eh$lpad$body2$i$i$i$index2Z2D = $88; //@line 20134
           $eh$lpad$body2$i$i$i$indexZ2D = $87; //@line 20134
           label = 38; //@line 20135
          } else if ((label | 0) == 37) {
           $116 = ___cxa_find_matching_catch_2() | 0; //@line 20138
           $eh$lpad$body2$i$i$i$index2Z2D = tempRet0; //@line 20140
           $eh$lpad$body2$i$i$i$indexZ2D = $116; //@line 20140
           label = 38; //@line 20141
          } else if ((label | 0) == 39) {
           $118 = ___cxa_find_matching_catch_2() | 0; //@line 20144
           $$1$i$i$i = tempRet0; //@line 20146
           $$16$i$i$i = $118; //@line 20146
           label = 44; //@line 20147
          } else if ((label | 0) == 40) {
           $120 = ___cxa_find_matching_catch_2() | 0; //@line 20150
           $$0$i$i$i = tempRet0; //@line 20152
           $$05$i$i$i = $120; //@line 20152
           label = 43; //@line 20153
          } else if ((label | 0) == 41) {
           $122 = ___cxa_find_matching_catch_2() | 0; //@line 20156
           $123 = tempRet0; //@line 20157
           if ((HEAP8[$70 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 20162
            $$0$i$i$i = $123; //@line 20163
            $$05$i$i$i = $122; //@line 20163
            label = 43; //@line 20164
           } else {
            $$0$i$i$i = $123; //@line 20166
            $$05$i$i$i = $122; //@line 20166
            label = 43; //@line 20167
           }
          } else if ((label | 0) == 46) {
           $131 = HEAP32[$6 + 28 >> 2] | 0; //@line 20172
           if ($131 | 0) {
            $$018$i$i$i$i$i$i$i$i = $131; //@line 20175
            do {
             $$018$i$i$i$i$i$i$i$i$looptemp = $$018$i$i$i$i$i$i$i$i;
             $$018$i$i$i$i$i$i$i$i = HEAP32[$$018$i$i$i$i$i$i$i$i >> 2] | 0; //@line 20177
             __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureED2Ev($$018$i$i$i$i$i$i$i$i$looptemp + 8 | 0); //@line 20179
             __ZdlPv($$018$i$i$i$i$i$i$i$i$looptemp); //@line 20180
            } while (($$018$i$i$i$i$i$i$i$i | 0) != 0);
           }
           $136 = $6 + 20 | 0; //@line 20189
           $137 = HEAP32[$136 >> 2] | 0; //@line 20190
           HEAP32[$136 >> 2] = 0; //@line 20191
           if ($137 | 0) {
            __ZdlPv($137); //@line 20194
           }
           __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS9_PvEEEE($6, HEAP32[$6 + 8 >> 2] | 0); //@line 20198
           $141 = HEAP32[$6 >> 2] | 0; //@line 20199
           HEAP32[$6 >> 2] = 0; //@line 20200
           if ($141 | 0) {
            __ZdlPv($141); //@line 20203
           }
           HEAP32[$2 >> 2] = 4744; //@line 20205
           HEAP32[$31 >> 2] = 4764; //@line 20206
           __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($32); //@line 20207
           __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($2, 4720); //@line 20208
           __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($31); //@line 20209
           if ((HEAP8[$$byval_copy8 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$$byval_copy8 >> 2] | 0); //@line 20215
           }
           $147 = $5 + 52 | 0; //@line 20217
           if ((HEAP8[$147 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$147 >> 2] | 0); //@line 20223
           }
           $152 = $5 + 40 | 0; //@line 20225
           $153 = HEAP32[$152 >> 2] | 0; //@line 20226
           if ($153 | 0) {
            $155 = $5 + 44 | 0; //@line 20229
            $156 = HEAP32[$155 >> 2] | 0; //@line 20230
            do {
             if (($156 | 0) == ($153 | 0)) {
              $167 = $153; //@line 20234
             } else {
              $158 = $5 + 48 | 0; //@line 20236
              $160 = $156; //@line 20237
              while (1) {
               $159 = $160 + -72 | 0; //@line 20239
               HEAP32[$155 >> 2] = $159; //@line 20240
               __THREW__ = 0; //@line 20241
               HEAP8[$$byval_copy8 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20242
               invoke_viii(13, $$byval_copy8 | 0, $158 | 0, $159 | 0); //@line 20243
               $161 = __THREW__; //@line 20244
               __THREW__ = 0; //@line 20244
               if ($161 & 1) {
                label = 61; //@line 20247
                break;
               }
               $160 = HEAP32[$155 >> 2] | 0; //@line 20250
               if (($160 | 0) == ($153 | 0)) {
                label = 62; //@line 20253
                break;
               }
              }
              if ((label | 0) == 61) {
               $165 = ___cxa_find_matching_catch_3(0) | 0; //@line 20260
               ___clang_call_terminate($165); //@line 20262
              } else if ((label | 0) == 62) {
               $167 = HEAP32[$152 >> 2] | 0; //@line 20267
               break;
              }
             }
            } while (0);
            __ZdlPv($167); //@line 20272
           }
           if ((HEAP8[$41 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 20278
           }
           $171 = $4 + 52 | 0; //@line 20280
           if ((HEAP8[$171 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$171 >> 2] | 0); //@line 20286
           }
           $176 = $4 + 40 | 0; //@line 20288
           $177 = HEAP32[$176 >> 2] | 0; //@line 20289
           if ($177 | 0) {
            $179 = $4 + 44 | 0; //@line 20292
            $180 = HEAP32[$179 >> 2] | 0; //@line 20293
            do {
             if (($180 | 0) == ($177 | 0)) {
              $191 = $177; //@line 20297
             } else {
              $182 = $4 + 48 | 0; //@line 20299
              $184 = $180; //@line 20300
              while (1) {
               $183 = $184 + -72 | 0; //@line 20302
               HEAP32[$179 >> 2] = $183; //@line 20303
               __THREW__ = 0; //@line 20304
               HEAP8[$$byval_copy8 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20305
               invoke_viii(13, $$byval_copy8 | 0, $182 | 0, $183 | 0); //@line 20306
               $185 = __THREW__; //@line 20307
               __THREW__ = 0; //@line 20307
               if ($185 & 1) {
                label = 73; //@line 20310
                break;
               }
               $184 = HEAP32[$179 >> 2] | 0; //@line 20313
               if (($184 | 0) == ($177 | 0)) {
                label = 74; //@line 20316
                break;
               }
              }
              if ((label | 0) == 73) {
               $189 = ___cxa_find_matching_catch_3(0) | 0; //@line 20323
               ___clang_call_terminate($189); //@line 20325
              } else if ((label | 0) == 74) {
               $191 = HEAP32[$176 >> 2] | 0; //@line 20330
               break;
              }
             }
            } while (0);
            __ZdlPv($191); //@line 20335
           }
           if ((HEAP8[$69 + 11 >> 0] | 0) >= 0) {
            STACKTOP = sp; //@line 20341
            return;
           }
           __ZdlPv(HEAP32[$69 >> 2] | 0); //@line 20344
           STACKTOP = sp; //@line 20345
           return;
          }
          if ((label | 0) == 38) {
           $$2$i$i$i = $eh$lpad$body2$i$i$i$index2Z2D; //@line 20348
           $$27$i$i$i = $eh$lpad$body2$i$i$i$indexZ2D; //@line 20348
          } else if ((label | 0) == 43) {
           __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($7); //@line 20351
           $$1$i$i$i = $$0$i$i$i; //@line 20352
           $$16$i$i$i = $$05$i$i$i; //@line 20352
           label = 44; //@line 20353
          }
          if ((label | 0) == 44) {
           if ((HEAP8[$71 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 20360
            $$2$i$i$i = $$1$i$i$i; //@line 20361
            $$27$i$i$i = $$16$i$i$i; //@line 20361
           } else {
            $$2$i$i$i = $$1$i$i$i; //@line 20363
            $$27$i$i$i = $$16$i$i$i; //@line 20363
           }
          }
          $197 = HEAP32[$6 + 28 >> 2] | 0; //@line 20367
          if ($197 | 0) {
           $$018$i$i$i$i$i28$i$i$i = $197; //@line 20370
           do {
            $$018$i$i$i$i$i28$i$i$i$looptemp = $$018$i$i$i$i$i28$i$i$i;
            $$018$i$i$i$i$i28$i$i$i = HEAP32[$$018$i$i$i$i$i28$i$i$i >> 2] | 0; //@line 20372
            __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureED2Ev($$018$i$i$i$i$i28$i$i$i$looptemp + 8 | 0); //@line 20374
            __ZdlPv($$018$i$i$i$i$i28$i$i$i$looptemp); //@line 20375
           } while (($$018$i$i$i$i$i28$i$i$i | 0) != 0);
          }
          $202 = $6 + 20 | 0; //@line 20384
          $203 = HEAP32[$202 >> 2] | 0; //@line 20385
          HEAP32[$202 >> 2] = 0; //@line 20386
          if ($203 | 0) {
           __ZdlPv($203); //@line 20389
          }
          __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS9_PvEEEE($6, HEAP32[$6 + 8 >> 2] | 0); //@line 20393
          $207 = HEAP32[$6 >> 2] | 0; //@line 20394
          HEAP32[$6 >> 2] = 0; //@line 20395
          if (!$207) {
           $$3$i$i$i = $$2$i$i$i; //@line 20398
           $$38$i$i$i = $$27$i$i$i; //@line 20398
          } else {
           __ZdlPv($207); //@line 20400
           $$3$i$i$i = $$2$i$i$i; //@line 20401
           $$38$i$i$i = $$27$i$i$i; //@line 20401
          }
         }
         HEAP32[$2 >> 2] = 4744; //@line 20404
         HEAP32[$31 >> 2] = 4764; //@line 20405
         __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($32); //@line 20406
         __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($2, 4720); //@line 20407
         __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($31); //@line 20408
         $$4$i$i$i = $$3$i$i$i; //@line 20409
         $$49$i$i$i = $$38$i$i$i; //@line 20409
         break L7;
        }
       } while (0);
       __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($2, 4720); //@line 20413
       $$1$i$i$i$i = $$0$i$i$i$i; //@line 20414
       $$15$i$i$i$i = $$04$i$i$i$i; //@line 20414
       label = 35; //@line 20415
      }
     } while (0);
     if ((label | 0) == 35) {
      __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($31); //@line 20419
      $$4$i$i$i = $$1$i$i$i$i; //@line 20420
      $$49$i$i$i = $$15$i$i$i$i; //@line 20420
     }
     if ((HEAP8[$$byval_copy8 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$$byval_copy8 >> 2] | 0); //@line 20427
     }
     $$5$i$i$i = $$4$i$i$i; //@line 20429
     $$510$i$i$i = $$49$i$i$i; //@line 20429
    } else {
     label = 5; //@line 20431
    }
   } else {
    label = 5; //@line 20434
   }
   do {
    if ((label | 0) == 5) {
     $20 = ___cxa_allocate_exception(8) | 0; //@line 20438
     __THREW__ = 0; //@line 20439
     invoke_vii(125, $20 | 0, 14595); //@line 20440
     $21 = __THREW__; //@line 20441
     __THREW__ = 0; //@line 20441
     if ($21 & 1) {
      $28 = ___cxa_find_matching_catch_2() | 0; //@line 20444
      $29 = tempRet0; //@line 20445
      ___cxa_free_exception($20 | 0); //@line 20446
      $$5$i$i$i = $29; //@line 20447
      $$510$i$i$i = $28; //@line 20447
      break;
     } else {
      __THREW__ = 0; //@line 20450
      invoke_viii(16, $20 | 0, 2824, 242); //@line 20451
      __THREW__ = 0; //@line 20452
      $24 = ___cxa_find_matching_catch_2() | 0; //@line 20453
      $$5$i$i$i = tempRet0; //@line 20455
      $$510$i$i$i = $24; //@line 20455
      break;
     }
    }
   } while (0);
   $213 = $5 + 52 | 0; //@line 20460
   if ((HEAP8[$213 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$213 >> 2] | 0); //@line 20466
   }
   $218 = $5 + 40 | 0; //@line 20468
   $219 = HEAP32[$218 >> 2] | 0; //@line 20469
   if ($219 | 0) {
    $221 = $5 + 44 | 0; //@line 20472
    $222 = HEAP32[$221 >> 2] | 0; //@line 20473
    do {
     if (($222 | 0) == ($219 | 0)) {
      $233 = $219; //@line 20477
     } else {
      $224 = $5 + 48 | 0; //@line 20479
      $226 = $222; //@line 20480
      while (1) {
       $225 = $226 + -72 | 0; //@line 20482
       HEAP32[$221 >> 2] = $225; //@line 20483
       __THREW__ = 0; //@line 20484
       HEAP8[$$byval_copy8 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20485
       invoke_viii(13, $$byval_copy8 | 0, $224 | 0, $225 | 0); //@line 20486
       $227 = __THREW__; //@line 20487
       __THREW__ = 0; //@line 20487
       if ($227 & 1) {
        label = 95; //@line 20490
        break;
       }
       $226 = HEAP32[$221 >> 2] | 0; //@line 20493
       if (($226 | 0) == ($219 | 0)) {
        label = 96; //@line 20496
        break;
       }
      }
      if ((label | 0) == 95) {
       $231 = ___cxa_find_matching_catch_3(0) | 0; //@line 20503
       ___clang_call_terminate($231); //@line 20505
      } else if ((label | 0) == 96) {
       $233 = HEAP32[$218 >> 2] | 0; //@line 20510
       break;
      }
     }
    } while (0);
    __ZdlPv($233); //@line 20515
   }
   $234 = $5 + 4 | 0; //@line 20517
   if ((HEAP8[$234 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$234 >> 2] | 0); //@line 20523
    $$6$i$i$i = $$5$i$i$i; //@line 20524
    $$611$i$i$i = $$510$i$i$i; //@line 20524
   } else {
    $$6$i$i$i = $$5$i$i$i; //@line 20526
    $$611$i$i$i = $$510$i$i$i; //@line 20526
   }
  }
 }
 if ((label | 0) == 7) {
  $26 = ___cxa_find_matching_catch_2() | 0; //@line 20531
  $$6$i$i$i = tempRet0; //@line 20533
  $$611$i$i$i = $26; //@line 20533
 }
 $239 = $4 + 52 | 0; //@line 20535
 if ((HEAP8[$239 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$239 >> 2] | 0); //@line 20541
 }
 $244 = $4 + 40 | 0; //@line 20543
 $245 = HEAP32[$244 >> 2] | 0; //@line 20544
 if ($245 | 0) {
  $247 = $4 + 44 | 0; //@line 20547
  $248 = HEAP32[$247 >> 2] | 0; //@line 20548
  do {
   if (($248 | 0) == ($245 | 0)) {
    $259 = $245; //@line 20552
   } else {
    $250 = $4 + 48 | 0; //@line 20554
    $252 = $248; //@line 20555
    while (1) {
     $251 = $252 + -72 | 0; //@line 20557
     HEAP32[$247 >> 2] = $251; //@line 20558
     __THREW__ = 0; //@line 20559
     HEAP8[$$byval_copy8 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20560
     invoke_viii(13, $$byval_copy8 | 0, $250 | 0, $251 | 0); //@line 20561
     $253 = __THREW__; //@line 20562
     __THREW__ = 0; //@line 20562
     if ($253 & 1) {
      label = 107; //@line 20565
      break;
     }
     $252 = HEAP32[$247 >> 2] | 0; //@line 20568
     if (($252 | 0) == ($245 | 0)) {
      label = 108; //@line 20571
      break;
     }
    }
    if ((label | 0) == 107) {
     $257 = ___cxa_find_matching_catch_3(0) | 0; //@line 20578
     ___clang_call_terminate($257); //@line 20580
    } else if ((label | 0) == 108) {
     $259 = HEAP32[$244 >> 2] | 0; //@line 20585
     break;
    }
   }
  } while (0);
  __ZdlPv($259); //@line 20590
 }
 $260 = $4 + 4 | 0; //@line 20592
 if ((HEAP8[$260 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$611$i$i$i | 0); //@line 20597
 }
 __ZdlPv(HEAP32[$260 >> 2] | 0); //@line 20601
 ___resumeException($$611$i$i$i | 0); //@line 20602
}
function __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE6insertENS_16__deque_iteratorIS1_PKS1_RS6_PKS7_iLi0EEEOS1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$0$i39 = 0, $$01922$i = 0, $$020$i = 0, $$byval_copy = 0, $$off0 = 0, $$off32 = 0, $$pre$phi246Z2D = 0, $$pre$phiZ2D = 0, $$pre243 = 0, $$sink$i$i = 0, $$sink$i$i$i$i = 0, $$sink$i$i$i$i48 = 0, $$sink$i$i$i$i50 = 0, $$sink$i$i$i40 = 0, $$sink$i$i44 = 0, $$sroa$0111$0 = 0, $$sroa$060$0$in = 0, $$sroa$10$0 = 0, $$sroa$8$0 = 0, $10 = 0, $103 = 0, $11 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $120 = 0, $122 = 0, $125 = 0, $126 = 0, $13 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $141 = 0, $145 = 0, $147 = 0, $15 = 0, $153 = 0, $161 = 0, $164 = 0, $168 = 0, $17 = 0, $170 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $207 = 0, $209 = 0, $212 = 0, $213 = 0, $219 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $232 = 0, $236 = 0, $238 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $254 = 0, $256 = 0, $259 = 0, $260 = 0, $270 = 0, $273 = 0, $277 = 0, $279 = 0, $289 = 0, $29 = 0, $295 = 0, $298 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $305 = 0, $306 = 0, $308 = 0, $311 = 0, $312 = 0, $315 = 0, $317 = 0, $320 = 0, $321 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $331 = 0, $334 = 0, $337 = 0, $340 = 0, $344 = 0, $346 = 0, $351 = 0, $352 = 0, $359 = 0, $360 = 0, $361 = 0, $363 = 0, $371 = 0, $372 = 0, $376 = 0, $382 = 0, $385 = 0, $389 = 0, $391 = 0, $396 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $86 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $tmpcast$byval_copy = 0, $tmpcast$i$byval_copy = 0, $tmpcast3347$sroa$0$0$in = 0, $tmpcast42$sroa$0$0 = 0, $tmpcast42$sroa$0$0$in = 0, sp = 0;
 sp = STACKTOP; //@line 12041
 STACKTOP = STACKTOP + 64 | 0; //@line 12042
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12042
 $tmpcast$i$byval_copy = sp + 48 | 0; //@line 12043
 $tmpcast$byval_copy = sp + 32 | 0; //@line 12044
 $$byval_copy = sp + 24 | 0; //@line 12045
 $4 = sp; //@line 12046
 $5 = sp + 40 | 0; //@line 12047
 $6 = sp + 16 | 0; //@line 12048
 $7 = sp + 8 | 0; //@line 12049
 $8 = $1 + 4 | 0; //@line 12050
 $9 = HEAP32[$8 >> 2] | 0; //@line 12051
 $10 = $1 + 16 | 0; //@line 12052
 $11 = HEAP32[$10 >> 2] | 0; //@line 12053
 $13 = $9 + ((($11 >>> 0) / 56 | 0) << 2) | 0; //@line 12055
 $14 = $1 + 8 | 0; //@line 12056
 $15 = HEAP32[$14 >> 2] | 0; //@line 12057
 $17 = $15; //@line 12059
 $18 = $9; //@line 12060
 if (($15 | 0) == ($9 | 0)) {
  $25 = 0; //@line 12062
 } else {
  $25 = (HEAP32[$13 >> 2] | 0) + ((($11 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12067
 }
 $23 = HEAP32[$2 + 4 >> 2] | 0; //@line 12070
 if (($23 | 0) == ($25 | 0)) {
  $$0$i39 = 0; //@line 12073
 } else {
  $29 = HEAP32[$2 >> 2] | 0; //@line 12078
  $$0$i39 = (($29 - $13 >> 2) * 56 | 0) + (($23 - (HEAP32[$29 >> 2] | 0) | 0) / 72 | 0) + (($25 - (HEAP32[$13 >> 2] | 0) | 0) / -72 | 0) | 0; //@line 12091
 }
 $41 = $1 + 20 | 0; //@line 12093
 $42 = HEAP32[$41 >> 2] | 0; //@line 12094
 do {
  if ($$0$i39 >>> 0 < ($42 - $$0$i39 | 0) >>> 0) {
   if (!$11) {
    __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE20__add_front_capacityEv($1); //@line 12101
    $48 = HEAP32[$10 >> 2] | 0; //@line 12105
    $50 = HEAP32[$8 >> 2] | 0; //@line 12105
    $51 = HEAP32[$14 >> 2] | 0; //@line 12105
   } else {
    $48 = $11; //@line 12107
    $50 = $9; //@line 12107
    $51 = $15; //@line 12107
   }
   $49 = $50 + ((($48 >>> 0) / 56 | 0) << 2) | 0; //@line 12111
   $52 = ($51 | 0) == ($50 | 0); //@line 12112
   if (!$$0$i39) {
    $$pre243 = HEAP32[$49 >> 2] | 0; //@line 12114
    if ($52) {
     $55 = 0; //@line 12116
    } else {
     $55 = $$pre243 + ((($48 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12120
    }
    if (($55 | 0) == ($$pre243 | 0)) {
     $61 = (HEAP32[$49 + -4 >> 2] | 0) + 4032 | 0; //@line 12127
    } else {
     $61 = $55; //@line 12129
    }
    HEAP32[$61 + -72 >> 2] = HEAP32[$3 >> 2]; //@line 12133
    $63 = $61 + -68 | 0; //@line 12134
    $64 = $3 + 4 | 0; //@line 12135
    HEAP32[$63 >> 2] = HEAP32[$64 >> 2]; //@line 12136
    HEAP32[$63 + 4 >> 2] = HEAP32[$64 + 4 >> 2]; //@line 12136
    HEAP32[$63 + 8 >> 2] = HEAP32[$64 + 8 >> 2]; //@line 12136
    HEAP32[$64 >> 2] = 0; //@line 12137
    HEAP32[$64 + 4 >> 2] = 0; //@line 12137
    HEAP32[$64 + 8 >> 2] = 0; //@line 12137
    $65 = $61 + -56 | 0; //@line 12138
    $66 = $3 + 16 | 0; //@line 12139
    HEAP32[$65 >> 2] = HEAP32[$66 >> 2]; //@line 12140
    HEAP32[$65 + 4 >> 2] = HEAP32[$66 + 4 >> 2]; //@line 12140
    HEAP32[$65 + 8 >> 2] = HEAP32[$66 + 8 >> 2]; //@line 12140
    HEAP32[$65 + 12 >> 2] = HEAP32[$66 + 12 >> 2]; //@line 12140
    HEAP32[$65 + 16 >> 2] = HEAP32[$66 + 16 >> 2]; //@line 12140
    HEAP32[$65 + 20 >> 2] = HEAP32[$66 + 20 >> 2]; //@line 12140
    $67 = $61 + -32 | 0; //@line 12141
    $68 = $3 + 40 | 0; //@line 12142
    HEAP32[$67 >> 2] = 0; //@line 12143
    $69 = $61 + -28 | 0; //@line 12144
    HEAP32[$69 >> 2] = 0; //@line 12145
    HEAP32[$61 + -24 >> 2] = 0; //@line 12147
    HEAP32[$67 >> 2] = HEAP32[$68 >> 2]; //@line 12149
    $72 = $3 + 44 | 0; //@line 12150
    HEAP32[$69 >> 2] = HEAP32[$72 >> 2]; //@line 12152
    $74 = $3 + 48 | 0; //@line 12153
    HEAP32[$61 + -24 >> 2] = HEAP32[$74 >> 2]; //@line 12156
    HEAP32[$74 >> 2] = 0; //@line 12157
    HEAP32[$72 >> 2] = 0; //@line 12158
    HEAP32[$68 >> 2] = 0; //@line 12159
    $77 = $61 + -20 | 0; //@line 12160
    $78 = $3 + 52 | 0; //@line 12161
    HEAP32[$77 >> 2] = HEAP32[$78 >> 2]; //@line 12162
    HEAP32[$77 + 4 >> 2] = HEAP32[$78 + 4 >> 2]; //@line 12162
    HEAP32[$77 + 8 >> 2] = HEAP32[$78 + 8 >> 2]; //@line 12162
    HEAP32[$78 >> 2] = 0; //@line 12163
    HEAP32[$78 + 4 >> 2] = 0; //@line 12163
    HEAP32[$78 + 8 >> 2] = 0; //@line 12163
    HEAP16[$61 + -8 >> 1] = HEAP16[$3 + 64 >> 1] | 0; //@line 12167
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1; //@line 12170
    HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1; //@line 12173
    break;
   }
   if ($52) {
    $$pre$phiZ2D = $49; //@line 12178
    $91 = 0; //@line 12178
    $94 = HEAP32[$49 >> 2] | 0; //@line 12178
   } else {
    $86 = HEAP32[$49 >> 2] | 0; //@line 12180
    $$pre$phiZ2D = $49; //@line 12184
    $91 = $86 + ((($48 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12184
    $94 = $86; //@line 12184
   }
   $90 = $49; //@line 12186
   $92 = $91; //@line 12187
   $93 = $92 - $94 | 0; //@line 12188
   $95 = ($93 | 0) / 72 | 0; //@line 12189
   $96 = $95 + -1 | 0; //@line 12190
   if (($93 | 0) > 72) {
    $$sink$i$i$i$i50 = (HEAP32[$49 + ((($96 >>> 0) / 56 | 0) << 2) >> 2] | 0) + ((($96 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12198
   } else {
    $103 = 56 - $95 | 0; //@line 12200
    $$sink$i$i$i$i50 = (HEAP32[$49 + ((($103 | 0) / -56 | 0) << 2) >> 2] | 0) + ((55 - (($103 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 12207
   }
   HEAP32[$$sink$i$i$i$i50 >> 2] = HEAP32[$91 >> 2]; //@line 12210
   $111 = $$sink$i$i$i$i50 + 4 | 0; //@line 12211
   $112 = $91 + 4 | 0; //@line 12212
   HEAP32[$111 >> 2] = HEAP32[$112 >> 2]; //@line 12213
   HEAP32[$111 + 4 >> 2] = HEAP32[$112 + 4 >> 2]; //@line 12213
   HEAP32[$111 + 8 >> 2] = HEAP32[$112 + 8 >> 2]; //@line 12213
   HEAP32[$112 >> 2] = 0; //@line 12214
   HEAP32[$112 + 4 >> 2] = 0; //@line 12214
   HEAP32[$112 + 8 >> 2] = 0; //@line 12214
   $113 = $$sink$i$i$i$i50 + 16 | 0; //@line 12215
   $114 = $91 + 16 | 0; //@line 12216
   HEAP32[$113 >> 2] = HEAP32[$114 >> 2]; //@line 12217
   HEAP32[$113 + 4 >> 2] = HEAP32[$114 + 4 >> 2]; //@line 12217
   HEAP32[$113 + 8 >> 2] = HEAP32[$114 + 8 >> 2]; //@line 12217
   HEAP32[$113 + 12 >> 2] = HEAP32[$114 + 12 >> 2]; //@line 12217
   HEAP32[$113 + 16 >> 2] = HEAP32[$114 + 16 >> 2]; //@line 12217
   HEAP32[$113 + 20 >> 2] = HEAP32[$114 + 20 >> 2]; //@line 12217
   $115 = $$sink$i$i$i$i50 + 40 | 0; //@line 12218
   $116 = $91 + 40 | 0; //@line 12219
   HEAP32[$115 >> 2] = 0; //@line 12220
   $117 = $$sink$i$i$i$i50 + 44 | 0; //@line 12221
   HEAP32[$117 >> 2] = 0; //@line 12222
   HEAP32[$$sink$i$i$i$i50 + 48 >> 2] = 0; //@line 12224
   HEAP32[$115 >> 2] = HEAP32[$116 >> 2]; //@line 12226
   $120 = $91 + 44 | 0; //@line 12227
   HEAP32[$117 >> 2] = HEAP32[$120 >> 2]; //@line 12229
   $122 = $91 + 48 | 0; //@line 12230
   HEAP32[$$sink$i$i$i$i50 + 48 >> 2] = HEAP32[$122 >> 2]; //@line 12233
   HEAP32[$122 >> 2] = 0; //@line 12234
   HEAP32[$120 >> 2] = 0; //@line 12235
   HEAP32[$116 >> 2] = 0; //@line 12236
   $125 = $$sink$i$i$i$i50 + 52 | 0; //@line 12237
   $126 = $91 + 52 | 0; //@line 12238
   HEAP32[$125 >> 2] = HEAP32[$126 >> 2]; //@line 12239
   HEAP32[$125 + 4 >> 2] = HEAP32[$126 + 4 >> 2]; //@line 12239
   HEAP32[$125 + 8 >> 2] = HEAP32[$126 + 8 >> 2]; //@line 12239
   HEAP32[$126 >> 2] = 0; //@line 12240
   HEAP32[$126 + 4 >> 2] = 0; //@line 12240
   HEAP32[$126 + 8 >> 2] = 0; //@line 12240
   HEAP16[$$sink$i$i$i$i50 + 64 >> 1] = HEAP16[$91 + 64 >> 1] | 0; //@line 12244
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1; //@line 12247
   HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1; //@line 12250
   if (($$0$i39 | 0) == 1) {
    $$sroa$8$0 = $92; //@line 12253
   } else {
    $136 = $92 - (HEAP32[$$pre$phiZ2D >> 2] | 0) | 0; //@line 12256
    $137 = ($136 | 0) / 72 | 0; //@line 12257
    $138 = $137 + 1 | 0; //@line 12258
    if (($136 | 0) > -72) {
     $141 = $49 + ((($138 >>> 0) / 56 | 0) << 2) | 0; //@line 12262
     $$sink$i$i$i$i48 = (HEAP32[$141 >> 2] | 0) + ((($138 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12266
     $tmpcast3347$sroa$0$0$in = $141; //@line 12266
    } else {
     $145 = 54 - $137 | 0; //@line 12268
     $147 = $49 + ((($145 | 0) / -56 | 0) << 2) | 0; //@line 12270
     $$sink$i$i$i$i48 = (HEAP32[$147 >> 2] | 0) + ((55 - (($145 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 12275
     $tmpcast3347$sroa$0$0$in = $147; //@line 12275
    }
    HEAP32[$5 >> 2] = $tmpcast3347$sroa$0$0$in; //@line 12279
    HEAP32[$5 + 4 >> 2] = $$sink$i$i$i$i48; //@line 12281
    $153 = $6; //@line 12282
    HEAP32[$153 >> 2] = $90; //@line 12284
    HEAP32[$153 + 4 >> 2] = $92; //@line 12287
    $161 = (($92 - (HEAP32[$$pre$phiZ2D >> 2] | 0) | 0) / 72 | 0) + $$0$i39 | 0; //@line 12292
    if (($161 | 0) > 0) {
     $164 = $49 + ((($161 >>> 0) / 56 | 0) << 2) | 0; //@line 12296
     HEAP32[$6 >> 2] = $164; //@line 12297
     $$sink$i$i44 = (HEAP32[$164 >> 2] | 0) + ((($161 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12301
    } else {
     $168 = 55 - $161 | 0; //@line 12303
     $170 = $49 + ((($168 | 0) / -56 | 0) << 2) | 0; //@line 12305
     HEAP32[$6 >> 2] = $170; //@line 12306
     $$sink$i$i44 = (HEAP32[$170 >> 2] | 0) + ((55 - (($168 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 12311
    }
    HEAP32[$6 + 4 >> 2] = $$sink$i$i44; //@line 12313
    HEAP32[$7 >> 2] = $90; //@line 12314
    HEAP32[$7 + 4 >> 2] = $92; //@line 12316
    HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 12317
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 12317
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 12318
    HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 12318
    HEAP32[$tmpcast$i$byval_copy >> 2] = HEAP32[$7 >> 2]; //@line 12319
    HEAP32[$tmpcast$i$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 12319
    __ZNSt3__24moveI13CharmFunctionPS1_RS1_PS2_iLi0ES1_S2_S3_S4_iLi0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS5_IT_T0_T1_T2_T3_XT4_EEESH_SB_($4, $$byval_copy, $tmpcast$byval_copy, $tmpcast$i$byval_copy); //@line 12320
    $$sroa$8$0 = HEAP32[$4 + 4 >> 2] | 0; //@line 12323
   }
   __ZN13CharmFunctionaSEOS_($$sroa$8$0, $3) | 0; //@line 12326
  } else {
   $178 = $17 - $18 >> 2; //@line 12329
   if (((($178 | 0) == 0 ? 0 : ($178 * 56 | 0) + -1 | 0) | 0) == ($42 + $11 | 0)) {
    __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE19__add_back_capacityEv($1); //@line 12337
    $184 = HEAP32[$41 >> 2] | 0; //@line 12342
    $187 = HEAP32[$10 >> 2] | 0; //@line 12342
    $190 = HEAP32[$8 >> 2] | 0; //@line 12342
    $191 = HEAP32[$14 >> 2] | 0; //@line 12342
   } else {
    $184 = $42; //@line 12344
    $187 = $11; //@line 12344
    $190 = $9; //@line 12344
    $191 = $15; //@line 12344
   }
   $183 = $184 - $$0$i39 | 0; //@line 12346
   $186 = $187 + $184 | 0; //@line 12348
   $189 = $190 + ((($186 >>> 0) / 56 | 0) << 2) | 0; //@line 12350
   $192 = ($191 | 0) == ($190 | 0); //@line 12351
   if (!$183) {
    if ($192) {
     $197 = 0; //@line 12354
    } else {
     $197 = (HEAP32[$189 >> 2] | 0) + ((($186 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12359
    }
    HEAP32[$197 >> 2] = HEAP32[$3 >> 2]; //@line 12362
    $198 = $197 + 4 | 0; //@line 12363
    $199 = $3 + 4 | 0; //@line 12364
    HEAP32[$198 >> 2] = HEAP32[$199 >> 2]; //@line 12365
    HEAP32[$198 + 4 >> 2] = HEAP32[$199 + 4 >> 2]; //@line 12365
    HEAP32[$198 + 8 >> 2] = HEAP32[$199 + 8 >> 2]; //@line 12365
    HEAP32[$199 >> 2] = 0; //@line 12366
    HEAP32[$199 + 4 >> 2] = 0; //@line 12366
    HEAP32[$199 + 8 >> 2] = 0; //@line 12366
    $200 = $197 + 16 | 0; //@line 12367
    $201 = $3 + 16 | 0; //@line 12368
    HEAP32[$200 >> 2] = HEAP32[$201 >> 2]; //@line 12369
    HEAP32[$200 + 4 >> 2] = HEAP32[$201 + 4 >> 2]; //@line 12369
    HEAP32[$200 + 8 >> 2] = HEAP32[$201 + 8 >> 2]; //@line 12369
    HEAP32[$200 + 12 >> 2] = HEAP32[$201 + 12 >> 2]; //@line 12369
    HEAP32[$200 + 16 >> 2] = HEAP32[$201 + 16 >> 2]; //@line 12369
    HEAP32[$200 + 20 >> 2] = HEAP32[$201 + 20 >> 2]; //@line 12369
    $202 = $197 + 40 | 0; //@line 12370
    $203 = $3 + 40 | 0; //@line 12371
    HEAP32[$202 >> 2] = 0; //@line 12372
    $204 = $197 + 44 | 0; //@line 12373
    HEAP32[$204 >> 2] = 0; //@line 12374
    HEAP32[$197 + 48 >> 2] = 0; //@line 12376
    HEAP32[$202 >> 2] = HEAP32[$203 >> 2]; //@line 12378
    $207 = $3 + 44 | 0; //@line 12379
    HEAP32[$204 >> 2] = HEAP32[$207 >> 2]; //@line 12381
    $209 = $3 + 48 | 0; //@line 12382
    HEAP32[$197 + 48 >> 2] = HEAP32[$209 >> 2]; //@line 12385
    HEAP32[$209 >> 2] = 0; //@line 12386
    HEAP32[$207 >> 2] = 0; //@line 12387
    HEAP32[$203 >> 2] = 0; //@line 12388
    $212 = $197 + 52 | 0; //@line 12389
    $213 = $3 + 52 | 0; //@line 12390
    HEAP32[$212 >> 2] = HEAP32[$213 >> 2]; //@line 12391
    HEAP32[$212 + 4 >> 2] = HEAP32[$213 + 4 >> 2]; //@line 12391
    HEAP32[$212 + 8 >> 2] = HEAP32[$213 + 8 >> 2]; //@line 12391
    HEAP32[$213 >> 2] = 0; //@line 12392
    HEAP32[$213 + 4 >> 2] = 0; //@line 12392
    HEAP32[$213 + 8 >> 2] = 0; //@line 12392
    HEAP16[$197 + 64 >> 1] = HEAP16[$3 + 64 >> 1] | 0; //@line 12396
    HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1; //@line 12399
    break;
   }
   if ($192) {
    $$pre$phi246Z2D = $189; //@line 12404
    $224 = 0; //@line 12404
    $227 = HEAP32[$189 >> 2] | 0; //@line 12404
   } else {
    $219 = HEAP32[$189 >> 2] | 0; //@line 12406
    $$pre$phi246Z2D = $189; //@line 12410
    $224 = $219 + ((($186 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12410
    $227 = $219; //@line 12410
   }
   $223 = $189; //@line 12412
   $225 = $224; //@line 12413
   $226 = $225 - $227 | 0; //@line 12414
   $228 = ($226 | 0) / 72 | 0; //@line 12415
   $229 = $228 + -1 | 0; //@line 12416
   if (($226 | 0) > 72) {
    $232 = $189 + ((($229 >>> 0) / 56 | 0) << 2) | 0; //@line 12420
    $$sink$i$i$i$i = (HEAP32[$232 >> 2] | 0) + ((($229 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12424
    $tmpcast42$sroa$0$0$in = $232; //@line 12424
   } else {
    $236 = 56 - $228 | 0; //@line 12426
    $238 = $189 + ((($236 | 0) / -56 | 0) << 2) | 0; //@line 12428
    $$sink$i$i$i$i = (HEAP32[$238 >> 2] | 0) + ((55 - (($236 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 12433
    $tmpcast42$sroa$0$0$in = $238; //@line 12433
   }
   $tmpcast42$sroa$0$0 = $tmpcast42$sroa$0$0$in; //@line 12435
   $243 = $$sink$i$i$i$i; //@line 12436
   HEAP32[$224 >> 2] = HEAP32[$$sink$i$i$i$i >> 2]; //@line 12438
   $245 = $224 + 4 | 0; //@line 12439
   $246 = $$sink$i$i$i$i + 4 | 0; //@line 12440
   HEAP32[$245 >> 2] = HEAP32[$246 >> 2]; //@line 12441
   HEAP32[$245 + 4 >> 2] = HEAP32[$246 + 4 >> 2]; //@line 12441
   HEAP32[$245 + 8 >> 2] = HEAP32[$246 + 8 >> 2]; //@line 12441
   HEAP32[$246 >> 2] = 0; //@line 12442
   HEAP32[$246 + 4 >> 2] = 0; //@line 12442
   HEAP32[$246 + 8 >> 2] = 0; //@line 12442
   $247 = $224 + 16 | 0; //@line 12443
   $248 = $$sink$i$i$i$i + 16 | 0; //@line 12444
   HEAP32[$247 >> 2] = HEAP32[$248 >> 2]; //@line 12445
   HEAP32[$247 + 4 >> 2] = HEAP32[$248 + 4 >> 2]; //@line 12445
   HEAP32[$247 + 8 >> 2] = HEAP32[$248 + 8 >> 2]; //@line 12445
   HEAP32[$247 + 12 >> 2] = HEAP32[$248 + 12 >> 2]; //@line 12445
   HEAP32[$247 + 16 >> 2] = HEAP32[$248 + 16 >> 2]; //@line 12445
   HEAP32[$247 + 20 >> 2] = HEAP32[$248 + 20 >> 2]; //@line 12445
   $249 = $224 + 40 | 0; //@line 12446
   $250 = $$sink$i$i$i$i + 40 | 0; //@line 12447
   HEAP32[$249 >> 2] = 0; //@line 12448
   $251 = $224 + 44 | 0; //@line 12449
   HEAP32[$251 >> 2] = 0; //@line 12450
   HEAP32[$224 + 48 >> 2] = 0; //@line 12452
   HEAP32[$249 >> 2] = HEAP32[$250 >> 2]; //@line 12454
   $254 = $$sink$i$i$i$i + 44 | 0; //@line 12455
   HEAP32[$251 >> 2] = HEAP32[$254 >> 2]; //@line 12457
   $256 = $$sink$i$i$i$i + 48 | 0; //@line 12458
   HEAP32[$224 + 48 >> 2] = HEAP32[$256 >> 2]; //@line 12461
   HEAP32[$256 >> 2] = 0; //@line 12462
   HEAP32[$254 >> 2] = 0; //@line 12463
   HEAP32[$250 >> 2] = 0; //@line 12464
   $259 = $224 + 52 | 0; //@line 12465
   $260 = $$sink$i$i$i$i + 52 | 0; //@line 12466
   HEAP32[$259 >> 2] = HEAP32[$260 >> 2]; //@line 12467
   HEAP32[$259 + 4 >> 2] = HEAP32[$260 + 4 >> 2]; //@line 12467
   HEAP32[$259 + 8 >> 2] = HEAP32[$260 + 8 >> 2]; //@line 12467
   HEAP32[$260 >> 2] = 0; //@line 12468
   HEAP32[$260 + 4 >> 2] = 0; //@line 12468
   HEAP32[$260 + 8 >> 2] = 0; //@line 12468
   HEAP16[$224 + 64 >> 1] = HEAP16[$$sink$i$i$i$i + 64 >> 1] | 0; //@line 12472
   HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1; //@line 12475
   if (($183 | 0) == 1) {
    $$sroa$0111$0 = $223; //@line 12478
    $$sroa$10$0 = $225; //@line 12478
   } else {
    $270 = (($225 - (HEAP32[$$pre$phi246Z2D >> 2] | 0) | 0) / 72 | 0) - $183 | 0; //@line 12483
    if (($270 | 0) > 0) {
     $273 = $189 + ((($270 >>> 0) / 56 | 0) << 2) | 0; //@line 12487
     $$sink$i$i$i40 = (HEAP32[$273 >> 2] | 0) + ((($270 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12491
     $$sroa$060$0$in = $273; //@line 12491
    } else {
     $277 = 55 - $270 | 0; //@line 12493
     $279 = $189 + ((($277 | 0) / -56 | 0) << 2) | 0; //@line 12495
     $$sink$i$i$i40 = (HEAP32[$279 >> 2] | 0) + ((55 - (($277 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 12500
     $$sroa$060$0$in = $279; //@line 12500
    }
    if (($$sink$i$i$i$i | 0) == ($$sink$i$i$i40 | 0)) {
     $$off0 = $223; //@line 12504
     $$off32 = $225; //@line 12504
    } else {
     $289 = HEAP32[$tmpcast42$sroa$0$0$in >> 2] | 0; //@line 12511
     $295 = (($243 - $289 | 0) / 72 | 0) + (($tmpcast42$sroa$0$0 - $$sroa$060$0$in >> 2) * 56 | 0) + (($$sink$i$i$i40 - (HEAP32[$$sroa$060$0$in >> 2] | 0) | 0) / -72 | 0) | 0; //@line 12518
     if (($295 | 0) > 0) {
      $$01922$i = $295; //@line 12522
      $298 = $$sink$i$i$i$i; //@line 12522
      $300 = $289; //@line 12522
      $302 = $tmpcast42$sroa$0$0$in; //@line 12522
      $317 = $223; //@line 12522
      $320 = $225; //@line 12522
      while (1) {
       if (($298 | 0) == ($300 | 0)) {
        $301 = $302 + -4 | 0; //@line 12526
        $303 = HEAP32[$301 >> 2] | 0; //@line 12527
        $306 = $303 + 4032 | 0; //@line 12529
        $308 = $303; //@line 12529
        $334 = $301; //@line 12529
       } else {
        $306 = $298; //@line 12531
        $308 = $300; //@line 12531
        $334 = $302; //@line 12531
       }
       $305 = $306 + -72 | 0; //@line 12533
       $311 = ($306 - $308 | 0) / 72 | 0; //@line 12537
       $312 = ($311 | 0) > ($$01922$i | 0); //@line 12538
       $$020$i = $312 ? $306 + ((0 - $$01922$i | 0) * 72 | 0) | 0 : $308; //@line 12541
       $$0$i = $312 ? $$01922$i : $311; //@line 12542
       $315 = $$byval_copy; //@line 12543
       HEAP32[$315 >> 2] = $317; //@line 12545
       HEAP32[$315 + 4 >> 2] = $320; //@line 12548
       HEAP32[$tmpcast$i$byval_copy >> 2] = HEAP32[$$byval_copy >> 2]; //@line 12549
       HEAP32[$tmpcast$i$byval_copy + 4 >> 2] = HEAP32[$$byval_copy + 4 >> 2]; //@line 12549
       __ZNSt3__213move_backwardIP13CharmFunctionS1_S2_RS1_PS2_iLi0EEENS_16__deque_iteratorIT0_T1_T2_T3_T4_XT5_EEET_SC_SB_PNS_9enable_ifIXsr27__is_random_access_iteratorISC_EE5valueEvE4typeE($tmpcast$byval_copy, $$020$i, $306, $tmpcast$i$byval_copy, 0); //@line 12550
       $321 = $tmpcast$byval_copy; //@line 12551
       $323 = HEAP32[$321 >> 2] | 0; //@line 12553
       $326 = HEAP32[$321 + 4 >> 2] | 0; //@line 12556
       $327 = $$01922$i - $$0$i | 0; //@line 12557
       $328 = $$0$i + -1 | 0; //@line 12558
       do {
        if (!$328) {
         $331 = $334; //@line 12562
         $396 = $305; //@line 12562
        } else {
         $337 = (($305 - (HEAP32[$334 >> 2] | 0) | 0) / 72 | 0) - $328 | 0; //@line 12568
         if (($337 | 0) > 0) {
          $340 = $334 + ((($337 >>> 0) / 56 | 0) << 2) | 0; //@line 12572
          $331 = $340; //@line 12576
          $396 = (HEAP32[$340 >> 2] | 0) + ((($337 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12576
          break;
         } else {
          $344 = 55 - $337 | 0; //@line 12579
          $346 = $334 + ((($344 | 0) / -56 | 0) << 2) | 0; //@line 12581
          $331 = $346; //@line 12586
          $396 = (HEAP32[$346 >> 2] | 0) + ((55 - (($344 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 12586
          break;
         }
        }
       } while (0);
       if (($327 | 0) <= 0) {
        break;
       }
       $$01922$i = $327; //@line 12596
       $298 = $396; //@line 12596
       $300 = HEAP32[$331 >> 2] | 0; //@line 12596
       $302 = $331; //@line 12596
       $317 = $323; //@line 12596
       $320 = $326; //@line 12596
      }
      $$off0 = $323; //@line 12598
      $$off32 = $326; //@line 12598
     } else {
      $$off0 = $223; //@line 12600
      $$off32 = $225; //@line 12600
     }
    }
    $$sroa$0111$0 = $$off0; //@line 12603
    $$sroa$10$0 = $$off32; //@line 12603
   }
   $351 = $$sroa$10$0; //@line 12605
   $352 = $$sroa$0111$0; //@line 12606
   if ((HEAP32[$352 >> 2] | 0) == ($351 | 0)) {
    $359 = (HEAP32[$352 + -4 >> 2] | 0) + 4032 | 0; //@line 12613
   } else {
    $359 = $351; //@line 12615
   }
   __ZN13CharmFunctionaSEOS_($359 + -72 | 0, $3) | 0; //@line 12618
  }
 } while (0);
 $360 = HEAP32[$8 >> 2] | 0; //@line 12621
 $361 = HEAP32[$10 >> 2] | 0; //@line 12622
 $363 = $360 + ((($361 >>> 0) / 56 | 0) << 2) | 0; //@line 12624
 if ((HEAP32[$14 >> 2] | 0) == ($360 | 0)) {
  $371 = 0; //@line 12628
  $376 = 0; //@line 12628
 } else {
  $371 = 0; //@line 12634
  $376 = (HEAP32[$363 >> 2] | 0) + ((($361 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12634
 }
 $372 = $0; //@line 12638
 HEAP32[$372 >> 2] = $371 | $363; //@line 12640
 HEAP32[$372 + 4 >> 2] = $376; //@line 12643
 if (!$$0$i39) {
  STACKTOP = sp; //@line 12646
  return;
 }
 $382 = (($376 - (HEAP32[$363 >> 2] | 0) | 0) / 72 | 0) + $$0$i39 | 0; //@line 12652
 if (($382 | 0) > 0) {
  $385 = $363 + ((($382 >>> 0) / 56 | 0) << 2) | 0; //@line 12656
  HEAP32[$0 >> 2] = $385; //@line 12657
  $$sink$i$i = (HEAP32[$385 >> 2] | 0) + ((($382 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 12661
 } else {
  $389 = 55 - $382 | 0; //@line 12663
  $391 = $363 + ((($389 | 0) / -56 | 0) << 2) | 0; //@line 12665
  HEAP32[$0 >> 2] = $391; //@line 12666
  $$sink$i$i = (HEAP32[$391 >> 2] | 0) + ((55 - (($389 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 12671
 }
 HEAP32[$0 + 4 >> 2] = $$sink$i$i; //@line 12673
 STACKTOP = sp; //@line 12674
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$010$i$i$i = 0, $$09$i$i$i = 0, $$1$i$i$i = 0, $$111$i$i$i = 0, $$2$i$i$i = 0, $$212$i$i$i = 0, $$byval_copy7 = 0, $$val = 0, $101 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $13 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $169 = 0, $170 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $178 = 0, $18 = 0, $184 = 0, $190 = 0, $192 = 0, $193 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $216 = 0, $218 = 0, $219 = 0, $224 = 0, $229 = 0, $23 = 0, $230 = 0, $232 = 0, $233 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $242 = 0, $244 = 0, $245 = 0, $250 = 0, $255 = 0, $256 = 0, $258 = 0, $259 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $268 = 0, $270 = 0, $271 = 0, $276 = 0, $28 = 0, $281 = 0, $282 = 0, $284 = 0, $285 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $294 = 0, $296 = 0, $297 = 0, $3 = 0, $302 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15460
 STACKTOP = STACKTOP + 304 | 0; //@line 15461
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 15461
 $$byval_copy7 = sp + 289 | 0; //@line 15462
 $2 = sp + 288 | 0; //@line 15463
 $3 = sp + 216 | 0; //@line 15464
 $4 = sp + 144 | 0; //@line 15465
 $5 = sp + 72 | 0; //@line 15466
 $6 = sp; //@line 15467
 $$val = HEAP32[$1 >> 2] | 0; //@line 15468
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 15470
 __THREW__ = 0; //@line 15471
 $8 = invoke_ii(143, $$val | 0) | 0; //@line 15472
 $9 = __THREW__; //@line 15473
 __THREW__ = 0; //@line 15473
 if ($9 & 1) {
  label = 37; //@line 15476
 } else {
  __THREW__ = 0; //@line 15478
  invoke_vii(131, $4 | 0, $8 | 0); //@line 15479
  $11 = __THREW__; //@line 15480
  __THREW__ = 0; //@line 15480
  if ($11 & 1) {
   label = 37; //@line 15483
  } else {
   __THREW__ = 0; //@line 15485
   invoke_vii(120, $5 | 0, $3 | 0); //@line 15486
   $13 = __THREW__; //@line 15487
   __THREW__ = 0; //@line 15487
   L4 : do {
    if ($13 & 1) {
     label = 38; //@line 15491
    } else {
     __THREW__ = 0; //@line 15493
     $15 = invoke_ii(144, $5 | 0) | 0; //@line 15494
     $16 = __THREW__; //@line 15495
     __THREW__ = 0; //@line 15495
     L6 : do {
      if ($16 & 1) {
       label = 39; //@line 15499
      } else {
       do {
        if ($15) {
         __THREW__ = 0; //@line 15503
         invoke_vii(120, $6 | 0, $4 | 0); //@line 15504
         $18 = __THREW__; //@line 15505
         __THREW__ = 0; //@line 15505
         if ($18 & 1) {
          label = 39; //@line 15508
          break L6;
         }
         __THREW__ = 0; //@line 15511
         $20 = invoke_ii(144, $6 | 0) | 0; //@line 15512
         $21 = __THREW__; //@line 15513
         __THREW__ = 0; //@line 15513
         if ($21 & 1) {
          $101 = ___cxa_find_matching_catch_2() | 0; //@line 15516
          $102 = tempRet0; //@line 15517
          $103 = $6 + 52 | 0; //@line 15518
          if ((HEAP8[$103 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$103 >> 2] | 0); //@line 15524
          }
          $108 = $6 + 40 | 0; //@line 15526
          $109 = HEAP32[$108 >> 2] | 0; //@line 15527
          if ($109 | 0) {
           $111 = $6 + 44 | 0; //@line 15530
           $112 = HEAP32[$111 >> 2] | 0; //@line 15531
           do {
            if (($112 | 0) == ($109 | 0)) {
             $123 = $109; //@line 15535
            } else {
             $114 = $6 + 48 | 0; //@line 15537
             $116 = $112; //@line 15538
             while (1) {
              $115 = $116 + -72 | 0; //@line 15540
              HEAP32[$111 >> 2] = $115; //@line 15541
              __THREW__ = 0; //@line 15542
              HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15543
              invoke_viii(13, $$byval_copy7 | 0, $114 | 0, $115 | 0); //@line 15544
              $117 = __THREW__; //@line 15545
              __THREW__ = 0; //@line 15545
              if ($117 & 1) {
               label = 47; //@line 15548
               break;
              }
              $116 = HEAP32[$111 >> 2] | 0; //@line 15551
              if (($116 | 0) == ($109 | 0)) {
               label = 48; //@line 15554
               break;
              }
             }
             if ((label | 0) == 47) {
              $121 = ___cxa_find_matching_catch_3(0) | 0; //@line 15561
              ___clang_call_terminate($121); //@line 15563
             } else if ((label | 0) == 48) {
              $123 = HEAP32[$108 >> 2] | 0; //@line 15568
              break;
             }
            }
           } while (0);
           __ZdlPv($123); //@line 15573
          }
          $124 = $6 + 4 | 0; //@line 15575
          if ((HEAP8[$124 + 11 >> 0] | 0) >= 0) {
           $$010$i$i$i = $101; //@line 15580
           $$09$i$i$i = $102; //@line 15580
           break L6;
          }
          __ZdlPv(HEAP32[$124 >> 2] | 0); //@line 15584
          $$010$i$i$i = $101; //@line 15585
          $$09$i$i$i = $102; //@line 15585
          break L6;
         } else {
          $23 = $6 + 52 | 0; //@line 15588
          if ((HEAP8[$23 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$23 >> 2] | 0); //@line 15594
          }
          $28 = $6 + 40 | 0; //@line 15596
          $29 = HEAP32[$28 >> 2] | 0; //@line 15597
          if ($29 | 0) {
           $31 = $6 + 44 | 0; //@line 15600
           $32 = HEAP32[$31 >> 2] | 0; //@line 15601
           do {
            if (($32 | 0) == ($29 | 0)) {
             $43 = $29; //@line 15605
            } else {
             $34 = $6 + 48 | 0; //@line 15607
             $36 = $32; //@line 15608
             while (1) {
              $35 = $36 + -72 | 0; //@line 15610
              HEAP32[$31 >> 2] = $35; //@line 15611
              __THREW__ = 0; //@line 15612
              HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15613
              invoke_viii(13, $$byval_copy7 | 0, $34 | 0, $35 | 0); //@line 15614
              $37 = __THREW__; //@line 15615
              __THREW__ = 0; //@line 15615
              if ($37 & 1) {
               label = 15; //@line 15618
               break;
              }
              $36 = HEAP32[$31 >> 2] | 0; //@line 15621
              if (($36 | 0) == ($29 | 0)) {
               label = 16; //@line 15624
               break;
              }
             }
             if ((label | 0) == 15) {
              $41 = ___cxa_find_matching_catch_3(0) | 0; //@line 15631
              ___clang_call_terminate($41); //@line 15633
             } else if ((label | 0) == 16) {
              $43 = HEAP32[$28 >> 2] | 0; //@line 15638
              break;
             }
            }
           } while (0);
           __ZdlPv($43); //@line 15643
          }
          $44 = $6 + 4 | 0; //@line 15645
          if ((HEAP8[$44 + 11 >> 0] | 0) >= 0) {
           $302 = $20; //@line 15650
           break;
          }
          __ZdlPv(HEAP32[$44 >> 2] | 0); //@line 15654
          $302 = $20; //@line 15655
          break;
         }
        } else {
         $302 = 0; //@line 15659
        }
       } while (0);
       $49 = $5 + 52 | 0; //@line 15662
       if ((HEAP8[$49 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$49 >> 2] | 0); //@line 15668
       }
       $54 = $5 + 40 | 0; //@line 15670
       $55 = HEAP32[$54 >> 2] | 0; //@line 15671
       if ($55 | 0) {
        $57 = $5 + 44 | 0; //@line 15674
        $58 = HEAP32[$57 >> 2] | 0; //@line 15675
        do {
         if (($58 | 0) == ($55 | 0)) {
          $69 = $55; //@line 15679
         } else {
          $60 = $5 + 48 | 0; //@line 15681
          $62 = $58; //@line 15682
          while (1) {
           $61 = $62 + -72 | 0; //@line 15684
           HEAP32[$57 >> 2] = $61; //@line 15685
           __THREW__ = 0; //@line 15686
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15687
           invoke_viii(13, $$byval_copy7 | 0, $60 | 0, $61 | 0); //@line 15688
           $63 = __THREW__; //@line 15689
           __THREW__ = 0; //@line 15689
           if ($63 & 1) {
            label = 27; //@line 15692
            break;
           }
           $62 = HEAP32[$57 >> 2] | 0; //@line 15695
           if (($62 | 0) == ($55 | 0)) {
            label = 28; //@line 15698
            break;
           }
          }
          if ((label | 0) == 27) {
           $67 = ___cxa_find_matching_catch_3(0) | 0; //@line 15705
           ___clang_call_terminate($67); //@line 15707
          } else if ((label | 0) == 28) {
           $69 = HEAP32[$54 >> 2] | 0; //@line 15712
           break;
          }
         }
        } while (0);
        __ZdlPv($69); //@line 15717
       }
       $70 = $5 + 4 | 0; //@line 15719
       if ((HEAP8[$70 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$70 >> 2] | 0); //@line 15725
       }
       if (!$302) {
        $192 = ___cxa_allocate_exception(8) | 0; //@line 15728
        __THREW__ = 0; //@line 15729
        invoke_vii(125, $192 | 0, 19158); //@line 15730
        $193 = __THREW__; //@line 15731
        __THREW__ = 0; //@line 15731
        if ($193 & 1) {
         $196 = ___cxa_find_matching_catch_2() | 0; //@line 15734
         $197 = tempRet0; //@line 15735
         ___cxa_free_exception($192 | 0); //@line 15736
         $$1$i$i$i = $197; //@line 15737
         $$111$i$i$i = $196; //@line 15737
         break L4;
        } else {
         __THREW__ = 0; //@line 15740
         invoke_viii(16, $192 | 0, 2824, 242); //@line 15741
         __THREW__ = 0; //@line 15742
         label = 38; //@line 15743
         break L4;
        }
       }
       $75 = $3 + 24 | 0; //@line 15747
       $76 = $75; //@line 15748
       $78 = HEAP32[$76 >> 2] | 0; //@line 15750
       $81 = HEAP32[$76 + 4 >> 2] | 0; //@line 15753
       if (($81 | 0) >= 0) {
        $83 = $4 + 24 | 0; //@line 15756
        $84 = $83; //@line 15757
        $89 = HEAP32[$84 + 4 >> 2] | 0; //@line 15762
        if (($89 | 0) >= 0) {
         $158 = HEAP32[$$val + 124 >> 2] | 0; //@line 15766
         if (!((($81 | 0) < 0 | ($81 | 0) == 0 & $78 >>> 0 < $158 >>> 0) & (($89 | 0) < 0 | (($89 | 0) == 0 ? (HEAP32[$84 >> 2] | 0) >>> 0 < $158 >>> 0 : 0)))) {
          $169 = ___cxa_allocate_exception(8) | 0; //@line 15779
          __THREW__ = 0; //@line 15780
          invoke_vii(125, $169 | 0, 19119); //@line 15781
          $170 = __THREW__; //@line 15782
          __THREW__ = 0; //@line 15782
          if ($170 & 1) {
           $173 = ___cxa_find_matching_catch_2() | 0; //@line 15785
           $174 = tempRet0; //@line 15786
           ___cxa_free_exception($169 | 0); //@line 15787
           $$1$i$i$i = $174; //@line 15788
           $$111$i$i$i = $173; //@line 15788
           break L4;
          } else {
           __THREW__ = 0; //@line 15791
           invoke_viii(16, $169 | 0, 2824, 242); //@line 15792
           __THREW__ = 0; //@line 15793
           label = 38; //@line 15794
           break L4;
          }
         }
         __THREW__ = 0; //@line 15798
         $175 = invoke_ii(143, $$val | 0) | 0; //@line 15799
         $176 = __THREW__; //@line 15800
         __THREW__ = 0; //@line 15800
         if ($176 & 1) {
          label = 38; //@line 15803
          break L4;
         }
         $178 = $75; //@line 15806
         $184 = $83; //@line 15812
         __THREW__ = 0; //@line 15818
         invoke_viiiii(4, $175 | 0, HEAP32[$178 >> 2] | 0, HEAP32[$178 + 4 >> 2] | 0, HEAP32[$184 >> 2] | 0, HEAP32[$184 + 4 >> 2] | 0); //@line 15819
         $190 = __THREW__; //@line 15820
         __THREW__ = 0; //@line 15820
         if ($190 & 1) {
          label = 38; //@line 15823
          break L4;
         }
         $198 = $4 + 52 | 0; //@line 15826
         if ((HEAP8[$198 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$198 >> 2] | 0); //@line 15832
         }
         $203 = $4 + 40 | 0; //@line 15834
         $204 = HEAP32[$203 >> 2] | 0; //@line 15835
         if ($204 | 0) {
          $206 = $4 + 44 | 0; //@line 15838
          $207 = HEAP32[$206 >> 2] | 0; //@line 15839
          do {
           if (($207 | 0) == ($204 | 0)) {
            $218 = $204; //@line 15843
           } else {
            $209 = $4 + 48 | 0; //@line 15845
            $211 = $207; //@line 15846
            while (1) {
             $210 = $211 + -72 | 0; //@line 15848
             HEAP32[$206 >> 2] = $210; //@line 15849
             __THREW__ = 0; //@line 15850
             HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15851
             invoke_viii(13, $$byval_copy7 | 0, $209 | 0, $210 | 0); //@line 15852
             $212 = __THREW__; //@line 15853
             __THREW__ = 0; //@line 15853
             if ($212 & 1) {
              label = 81; //@line 15856
              break;
             }
             $211 = HEAP32[$206 >> 2] | 0; //@line 15859
             if (($211 | 0) == ($204 | 0)) {
              label = 82; //@line 15862
              break;
             }
            }
            if ((label | 0) == 81) {
             $216 = ___cxa_find_matching_catch_3(0) | 0; //@line 15869
             ___clang_call_terminate($216); //@line 15871
            } else if ((label | 0) == 82) {
             $218 = HEAP32[$203 >> 2] | 0; //@line 15876
             break;
            }
           }
          } while (0);
          __ZdlPv($218); //@line 15881
         }
         $219 = $4 + 4 | 0; //@line 15883
         if ((HEAP8[$219 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$219 >> 2] | 0); //@line 15889
         }
         $224 = $3 + 52 | 0; //@line 15891
         if ((HEAP8[$224 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$224 >> 2] | 0); //@line 15897
         }
         $229 = $3 + 40 | 0; //@line 15899
         $230 = HEAP32[$229 >> 2] | 0; //@line 15900
         if ($230 | 0) {
          $232 = $3 + 44 | 0; //@line 15903
          $233 = HEAP32[$232 >> 2] | 0; //@line 15904
          do {
           if (($233 | 0) == ($230 | 0)) {
            $244 = $230; //@line 15908
           } else {
            $235 = $3 + 48 | 0; //@line 15910
            $237 = $233; //@line 15911
            while (1) {
             $236 = $237 + -72 | 0; //@line 15913
             HEAP32[$232 >> 2] = $236; //@line 15914
             __THREW__ = 0; //@line 15915
             HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15916
             invoke_viii(13, $$byval_copy7 | 0, $235 | 0, $236 | 0); //@line 15917
             $238 = __THREW__; //@line 15918
             __THREW__ = 0; //@line 15918
             if ($238 & 1) {
              label = 93; //@line 15921
              break;
             }
             $237 = HEAP32[$232 >> 2] | 0; //@line 15924
             if (($237 | 0) == ($230 | 0)) {
              label = 94; //@line 15927
              break;
             }
            }
            if ((label | 0) == 93) {
             $242 = ___cxa_find_matching_catch_3(0) | 0; //@line 15934
             ___clang_call_terminate($242); //@line 15936
            } else if ((label | 0) == 94) {
             $244 = HEAP32[$229 >> 2] | 0; //@line 15941
             break;
            }
           }
          } while (0);
          __ZdlPv($244); //@line 15946
         }
         $245 = $3 + 4 | 0; //@line 15948
         if ((HEAP8[$245 + 11 >> 0] | 0) >= 0) {
          STACKTOP = sp; //@line 15953
          return;
         }
         __ZdlPv(HEAP32[$245 >> 2] | 0); //@line 15956
         STACKTOP = sp; //@line 15957
         return;
        }
       }
       $91 = ___cxa_allocate_exception(8) | 0; //@line 15960
       __THREW__ = 0; //@line 15961
       invoke_vii(125, $91 | 0, 19088); //@line 15962
       $92 = __THREW__; //@line 15963
       __THREW__ = 0; //@line 15963
       if ($92 & 1) {
        $155 = ___cxa_find_matching_catch_2() | 0; //@line 15966
        $156 = tempRet0; //@line 15967
        ___cxa_free_exception($91 | 0); //@line 15968
        $$1$i$i$i = $156; //@line 15969
        $$111$i$i$i = $155; //@line 15969
        break L4;
       } else {
        __THREW__ = 0; //@line 15972
        invoke_viii(16, $91 | 0, 2824, 242); //@line 15973
        __THREW__ = 0; //@line 15974
        label = 38; //@line 15975
        break L4;
       }
      }
     } while (0);
     if ((label | 0) == 39) {
      $99 = ___cxa_find_matching_catch_2() | 0; //@line 15981
      $$010$i$i$i = $99; //@line 15983
      $$09$i$i$i = tempRet0; //@line 15983
     }
     $129 = $5 + 52 | 0; //@line 15985
     if ((HEAP8[$129 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$129 >> 2] | 0); //@line 15991
     }
     $134 = $5 + 40 | 0; //@line 15993
     $135 = HEAP32[$134 >> 2] | 0; //@line 15994
     if ($135 | 0) {
      $137 = $5 + 44 | 0; //@line 15997
      $138 = HEAP32[$137 >> 2] | 0; //@line 15998
      do {
       if (($138 | 0) == ($135 | 0)) {
        $149 = $135; //@line 16002
       } else {
        $140 = $5 + 48 | 0; //@line 16004
        $142 = $138; //@line 16005
        while (1) {
         $141 = $142 + -72 | 0; //@line 16007
         HEAP32[$137 >> 2] = $141; //@line 16008
         __THREW__ = 0; //@line 16009
         HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16010
         invoke_viii(13, $$byval_copy7 | 0, $140 | 0, $141 | 0); //@line 16011
         $143 = __THREW__; //@line 16012
         __THREW__ = 0; //@line 16012
         if ($143 & 1) {
          label = 59; //@line 16015
          break;
         }
         $142 = HEAP32[$137 >> 2] | 0; //@line 16018
         if (($142 | 0) == ($135 | 0)) {
          label = 60; //@line 16021
          break;
         }
        }
        if ((label | 0) == 59) {
         $147 = ___cxa_find_matching_catch_3(0) | 0; //@line 16028
         ___clang_call_terminate($147); //@line 16030
        } else if ((label | 0) == 60) {
         $149 = HEAP32[$134 >> 2] | 0; //@line 16035
         break;
        }
       }
      } while (0);
      __ZdlPv($149); //@line 16040
     }
     $150 = $5 + 4 | 0; //@line 16042
     if ((HEAP8[$150 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$150 >> 2] | 0); //@line 16048
      $$1$i$i$i = $$09$i$i$i; //@line 16049
      $$111$i$i$i = $$010$i$i$i; //@line 16049
     } else {
      $$1$i$i$i = $$09$i$i$i; //@line 16051
      $$111$i$i$i = $$010$i$i$i; //@line 16051
     }
    }
   } while (0);
   if ((label | 0) == 38) {
    $97 = ___cxa_find_matching_catch_2() | 0; //@line 16056
    $$1$i$i$i = tempRet0; //@line 16058
    $$111$i$i$i = $97; //@line 16058
   }
   $250 = $4 + 52 | 0; //@line 16060
   if ((HEAP8[$250 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$250 >> 2] | 0); //@line 16066
   }
   $255 = $4 + 40 | 0; //@line 16068
   $256 = HEAP32[$255 >> 2] | 0; //@line 16069
   if ($256 | 0) {
    $258 = $4 + 44 | 0; //@line 16072
    $259 = HEAP32[$258 >> 2] | 0; //@line 16073
    do {
     if (($259 | 0) == ($256 | 0)) {
      $270 = $256; //@line 16077
     } else {
      $261 = $4 + 48 | 0; //@line 16079
      $263 = $259; //@line 16080
      while (1) {
       $262 = $263 + -72 | 0; //@line 16082
       HEAP32[$258 >> 2] = $262; //@line 16083
       __THREW__ = 0; //@line 16084
       HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16085
       invoke_viii(13, $$byval_copy7 | 0, $261 | 0, $262 | 0); //@line 16086
       $264 = __THREW__; //@line 16087
       __THREW__ = 0; //@line 16087
       if ($264 & 1) {
        label = 105; //@line 16090
        break;
       }
       $263 = HEAP32[$258 >> 2] | 0; //@line 16093
       if (($263 | 0) == ($256 | 0)) {
        label = 106; //@line 16096
        break;
       }
      }
      if ((label | 0) == 105) {
       $268 = ___cxa_find_matching_catch_3(0) | 0; //@line 16103
       ___clang_call_terminate($268); //@line 16105
      } else if ((label | 0) == 106) {
       $270 = HEAP32[$255 >> 2] | 0; //@line 16110
       break;
      }
     }
    } while (0);
    __ZdlPv($270); //@line 16115
   }
   $271 = $4 + 4 | 0; //@line 16117
   if ((HEAP8[$271 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$271 >> 2] | 0); //@line 16123
    $$2$i$i$i = $$1$i$i$i; //@line 16124
    $$212$i$i$i = $$111$i$i$i; //@line 16124
   } else {
    $$2$i$i$i = $$1$i$i$i; //@line 16126
    $$212$i$i$i = $$111$i$i$i; //@line 16126
   }
  }
 }
 if ((label | 0) == 37) {
  $95 = ___cxa_find_matching_catch_2() | 0; //@line 16131
  $$2$i$i$i = tempRet0; //@line 16133
  $$212$i$i$i = $95; //@line 16133
 }
 $276 = $3 + 52 | 0; //@line 16135
 if ((HEAP8[$276 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$276 >> 2] | 0); //@line 16141
 }
 $281 = $3 + 40 | 0; //@line 16143
 $282 = HEAP32[$281 >> 2] | 0; //@line 16144
 if ($282 | 0) {
  $284 = $3 + 44 | 0; //@line 16147
  $285 = HEAP32[$284 >> 2] | 0; //@line 16148
  do {
   if (($285 | 0) == ($282 | 0)) {
    $296 = $282; //@line 16152
   } else {
    $287 = $3 + 48 | 0; //@line 16154
    $289 = $285; //@line 16155
    while (1) {
     $288 = $289 + -72 | 0; //@line 16157
     HEAP32[$284 >> 2] = $288; //@line 16158
     __THREW__ = 0; //@line 16159
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16160
     invoke_viii(13, $$byval_copy7 | 0, $287 | 0, $288 | 0); //@line 16161
     $290 = __THREW__; //@line 16162
     __THREW__ = 0; //@line 16162
     if ($290 & 1) {
      label = 117; //@line 16165
      break;
     }
     $289 = HEAP32[$284 >> 2] | 0; //@line 16168
     if (($289 | 0) == ($282 | 0)) {
      label = 118; //@line 16171
      break;
     }
    }
    if ((label | 0) == 117) {
     $294 = ___cxa_find_matching_catch_3(0) | 0; //@line 16178
     ___clang_call_terminate($294); //@line 16180
    } else if ((label | 0) == 118) {
     $296 = HEAP32[$281 >> 2] | 0; //@line 16185
     break;
    }
   }
  } while (0);
  __ZdlPv($296); //@line 16190
 }
 $297 = $3 + 4 | 0; //@line 16192
 if ((HEAP8[$297 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$212$i$i$i | 0); //@line 16197
 }
 __ZdlPv(HEAP32[$297 >> 2] | 0); //@line 16201
 ___resumeException($$212$i$i$i | 0); //@line 16202
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $280 = 0, $282 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 7318
 STACKTOP = STACKTOP + 64 | 0; //@line 7319
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7319
 $5 = sp + 16 | 0; //@line 7320
 $6 = sp; //@line 7321
 $7 = sp + 24 | 0; //@line 7322
 $8 = sp + 8 | 0; //@line 7323
 $9 = sp + 20 | 0; //@line 7324
 HEAP32[$5 >> 2] = $1; //@line 7325
 $10 = ($0 | 0) != 0; //@line 7326
 $11 = $7 + 40 | 0; //@line 7327
 $12 = $11; //@line 7328
 $13 = $7 + 39 | 0; //@line 7329
 $14 = $8 + 4 | 0; //@line 7330
 $$0243 = 0; //@line 7331
 $$0247 = 0; //@line 7331
 $$0269 = 0; //@line 7331
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 7340
     $$1248 = -1; //@line 7341
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 7345
     break;
    }
   } else {
    $$1248 = $$0247; //@line 7349
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 7352
  $21 = HEAP8[$20 >> 0] | 0; //@line 7353
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 7356
   break;
  } else {
   $23 = $21; //@line 7359
   $25 = $20; //@line 7359
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 7364
     $27 = $25; //@line 7364
     label = 9; //@line 7365
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 7370
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 7377
   HEAP32[$5 >> 2] = $24; //@line 7378
   $23 = HEAP8[$24 >> 0] | 0; //@line 7380
   $25 = $24; //@line 7380
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 7385
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 7390
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 7393
     $27 = $27 + 2 | 0; //@line 7394
     HEAP32[$5 >> 2] = $27; //@line 7395
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 7402
      break;
     } else {
      $$0249303 = $30; //@line 7399
      label = 9; //@line 7400
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 7410
  if ($10) {
   _out_163($0, $20, $36); //@line 7412
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 7416
   $$0247 = $$1248; //@line 7416
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 7424
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 7425
  if ($43) {
   $$0253 = -1; //@line 7427
   $$1270 = $$0269; //@line 7427
   $$sink = 1; //@line 7427
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 7437
    $$1270 = 1; //@line 7437
    $$sink = 3; //@line 7437
   } else {
    $$0253 = -1; //@line 7439
    $$1270 = $$0269; //@line 7439
    $$sink = 1; //@line 7439
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 7442
  HEAP32[$5 >> 2] = $51; //@line 7443
  $52 = HEAP8[$51 >> 0] | 0; //@line 7444
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 7446
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 7453
   $$lcssa291 = $52; //@line 7453
   $$lcssa292 = $51; //@line 7453
  } else {
   $$0262309 = 0; //@line 7455
   $60 = $52; //@line 7455
   $65 = $51; //@line 7455
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 7460
    $64 = $65 + 1 | 0; //@line 7461
    HEAP32[$5 >> 2] = $64; //@line 7462
    $66 = HEAP8[$64 >> 0] | 0; //@line 7463
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 7465
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 7472
     $$lcssa291 = $66; //@line 7472
     $$lcssa292 = $64; //@line 7472
     break;
    } else {
     $$0262309 = $63; //@line 7475
     $60 = $66; //@line 7475
     $65 = $64; //@line 7475
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 7487
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 7489
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 7494
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 7499
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 7511
     $$2271 = 1; //@line 7511
     $storemerge274 = $79 + 3 | 0; //@line 7511
    } else {
     label = 23; //@line 7513
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 7517
    if ($$1270 | 0) {
     $$0 = -1; //@line 7520
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 7535
     $106 = HEAP32[$105 >> 2] | 0; //@line 7536
     HEAP32[$2 >> 2] = $105 + 4; //@line 7538
     $363 = $106; //@line 7539
    } else {
     $363 = 0; //@line 7541
    }
    $$0259 = $363; //@line 7545
    $$2271 = 0; //@line 7545
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 7545
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 7547
   $109 = ($$0259 | 0) < 0; //@line 7548
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 7553
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 7553
   $$3272 = $$2271; //@line 7553
   $115 = $storemerge274; //@line 7553
  } else {
   $112 = _getint_164($5) | 0; //@line 7555
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 7558
    break;
   }
   $$1260 = $112; //@line 7562
   $$1263 = $$0262$lcssa; //@line 7562
   $$3272 = $$1270; //@line 7562
   $115 = HEAP32[$5 >> 2] | 0; //@line 7562
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 7573
     $156 = _getint_164($5) | 0; //@line 7574
     $$0254 = $156; //@line 7576
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 7576
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 7585
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 7590
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 7595
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 7602
      $144 = $125 + 4 | 0; //@line 7606
      HEAP32[$5 >> 2] = $144; //@line 7607
      $$0254 = $140; //@line 7608
      $$pre345 = $144; //@line 7608
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 7614
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 7629
     $152 = HEAP32[$151 >> 2] | 0; //@line 7630
     HEAP32[$2 >> 2] = $151 + 4; //@line 7632
     $364 = $152; //@line 7633
    } else {
     $364 = 0; //@line 7635
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 7638
    HEAP32[$5 >> 2] = $154; //@line 7639
    $$0254 = $364; //@line 7640
    $$pre345 = $154; //@line 7640
   } else {
    $$0254 = -1; //@line 7642
    $$pre345 = $115; //@line 7642
   }
  } while (0);
  $$0252 = 0; //@line 7645
  $158 = $$pre345; //@line 7645
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 7652
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 7655
   HEAP32[$5 >> 2] = $158; //@line 7656
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (26177 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 7661
   $168 = $167 & 255; //@line 7662
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 7666
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 7673
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 7677
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 7681
     break L1;
    } else {
     label = 50; //@line 7684
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 7689
     $176 = $3 + ($$0253 << 3) | 0; //@line 7691
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 7696
     $182 = $6; //@line 7697
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 7699
     HEAP32[$182 + 4 >> 2] = $181; //@line 7702
     label = 50; //@line 7703
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 7707
     break L1;
    }
    _pop_arg_166($6, $168, $2); //@line 7710
    $187 = HEAP32[$5 >> 2] | 0; //@line 7712
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 7716
   if ($10) {
    $187 = $158; //@line 7718
   } else {
    $$0243 = 0; //@line 7720
    $$0247 = $$1248; //@line 7720
    $$0269 = $$3272; //@line 7720
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 7726
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 7732
  $196 = $$1263 & -65537; //@line 7735
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 7736
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 7744
       $$0243 = 0; //@line 7745
       $$0247 = $$1248; //@line 7745
       $$0269 = $$3272; //@line 7745
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 7751
       $$0243 = 0; //@line 7752
       $$0247 = $$1248; //@line 7752
       $$0269 = $$3272; //@line 7752
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 7760
       HEAP32[$208 >> 2] = $$1248; //@line 7762
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 7765
       $$0243 = 0; //@line 7766
       $$0247 = $$1248; //@line 7766
       $$0269 = $$3272; //@line 7766
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 7773
       $$0243 = 0; //@line 7774
       $$0247 = $$1248; //@line 7774
       $$0269 = $$3272; //@line 7774
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 7781
       $$0243 = 0; //@line 7782
       $$0247 = $$1248; //@line 7782
       $$0269 = $$3272; //@line 7782
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 7788
       $$0243 = 0; //@line 7789
       $$0247 = $$1248; //@line 7789
       $$0269 = $$3272; //@line 7789
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 7797
       HEAP32[$220 >> 2] = $$1248; //@line 7799
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 7802
       $$0243 = 0; //@line 7803
       $$0247 = $$1248; //@line 7803
       $$0269 = $$3272; //@line 7803
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 7808
       $$0247 = $$1248; //@line 7808
       $$0269 = $$3272; //@line 7808
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 7818
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 7818
     $$3265 = $$1263$ | 8; //@line 7818
     label = 62; //@line 7819
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 7823
     $$1255 = $$0254; //@line 7823
     $$3265 = $$1263$; //@line 7823
     label = 62; //@line 7824
     break;
    }
   case 111:
    {
     $242 = $6; //@line 7828
     $244 = HEAP32[$242 >> 2] | 0; //@line 7830
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 7833
     $248 = _fmt_o($244, $247, $11) | 0; //@line 7834
     $252 = $12 - $248 | 0; //@line 7838
     $$0228 = $248; //@line 7843
     $$1233 = 0; //@line 7843
     $$1238 = 26641; //@line 7843
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 7843
     $$4266 = $$1263$; //@line 7843
     $280 = $244; //@line 7843
     $282 = $247; //@line 7843
     label = 68; //@line 7844
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 7848
     $258 = HEAP32[$256 >> 2] | 0; //@line 7850
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 7853
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 7856
      $264 = tempRet0; //@line 7857
      $265 = $6; //@line 7858
      HEAP32[$265 >> 2] = $263; //@line 7860
      HEAP32[$265 + 4 >> 2] = $264; //@line 7863
      $$0232 = 1; //@line 7864
      $$0237 = 26641; //@line 7864
      $275 = $263; //@line 7864
      $276 = $264; //@line 7864
      label = 67; //@line 7865
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 7877
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 26641 : 26643 : 26642; //@line 7877
      $275 = $258; //@line 7877
      $276 = $261; //@line 7877
      label = 67; //@line 7878
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 7884
     $$0232 = 0; //@line 7890
     $$0237 = 26641; //@line 7890
     $275 = HEAP32[$197 >> 2] | 0; //@line 7890
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 7890
     label = 67; //@line 7891
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 7902
     $$2 = $13; //@line 7903
     $$2234 = 0; //@line 7903
     $$2239 = 26641; //@line 7903
     $$2251 = $11; //@line 7903
     $$5 = 1; //@line 7903
     $$6268 = $196; //@line 7903
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 7910
     label = 72; //@line 7911
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 7915
     $$1 = $302 | 0 ? $302 : 26651; //@line 7918
     label = 72; //@line 7919
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 7929
     HEAP32[$14 >> 2] = 0; //@line 7930
     HEAP32[$6 >> 2] = $8; //@line 7931
     $$4258354 = -1; //@line 7932
     $365 = $8; //@line 7932
     label = 76; //@line 7933
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 7937
     if (!$$0254) {
      _pad_169($0, 32, $$1260, 0, $$1263$); //@line 7940
      $$0240$lcssa356 = 0; //@line 7941
      label = 85; //@line 7942
     } else {
      $$4258354 = $$0254; //@line 7944
      $365 = $$pre348; //@line 7944
      label = 76; //@line 7945
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 7952
     $$0247 = $$1248; //@line 7952
     $$0269 = $$3272; //@line 7952
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 7957
     $$2234 = 0; //@line 7957
     $$2239 = 26641; //@line 7957
     $$2251 = $11; //@line 7957
     $$5 = $$0254; //@line 7957
     $$6268 = $$1263$; //@line 7957
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 7963
    $227 = $6; //@line 7964
    $229 = HEAP32[$227 >> 2] | 0; //@line 7966
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 7969
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 7971
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 7977
    $$0228 = $234; //@line 7982
    $$1233 = $or$cond278 ? 0 : 2; //@line 7982
    $$1238 = $or$cond278 ? 26641 : 26641 + ($$1236 >> 4) | 0; //@line 7982
    $$2256 = $$1255; //@line 7982
    $$4266 = $$3265; //@line 7982
    $280 = $229; //@line 7982
    $282 = $232; //@line 7982
    label = 68; //@line 7983
   } else if ((label | 0) == 67) {
    label = 0; //@line 7986
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 7988
    $$1233 = $$0232; //@line 7988
    $$1238 = $$0237; //@line 7988
    $$2256 = $$0254; //@line 7988
    $$4266 = $$1263$; //@line 7988
    $280 = $275; //@line 7988
    $282 = $276; //@line 7988
    label = 68; //@line 7989
   } else if ((label | 0) == 72) {
    label = 0; //@line 7992
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 7993
    $306 = ($305 | 0) == 0; //@line 7994
    $$2 = $$1; //@line 8001
    $$2234 = 0; //@line 8001
    $$2239 = 26641; //@line 8001
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 8001
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 8001
    $$6268 = $196; //@line 8001
   } else if ((label | 0) == 76) {
    label = 0; //@line 8004
    $$0229316 = $365; //@line 8005
    $$0240315 = 0; //@line 8005
    $$1244314 = 0; //@line 8005
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 8007
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 8010
      $$2245 = $$1244314; //@line 8010
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 8013
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 8019
      $$2245 = $320; //@line 8019
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 8023
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 8026
      $$0240315 = $325; //@line 8026
      $$1244314 = $320; //@line 8026
     } else {
      $$0240$lcssa = $325; //@line 8028
      $$2245 = $320; //@line 8028
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 8034
     break L1;
    }
    _pad_169($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 8037
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 8040
     label = 85; //@line 8041
    } else {
     $$1230327 = $365; //@line 8043
     $$1241326 = 0; //@line 8043
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 8045
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 8048
       label = 85; //@line 8049
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 8052
      $$1241326 = $331 + $$1241326 | 0; //@line 8053
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 8056
       label = 85; //@line 8057
       break L97;
      }
      _out_163($0, $9, $331); //@line 8061
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 8066
       label = 85; //@line 8067
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 8064
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 8075
   $284 = ($280 | 0) != 0 | ($282 | 0) != 0; //@line 8081
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 8083
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 8088
   $$2 = $or$cond ? $$0228 : $11; //@line 8093
   $$2234 = $$1233; //@line 8093
   $$2239 = $$1238; //@line 8093
   $$2251 = $11; //@line 8093
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 8093
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 8093
  } else if ((label | 0) == 85) {
   label = 0; //@line 8096
   _pad_169($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 8098
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 8101
   $$0247 = $$1248; //@line 8101
   $$0269 = $$3272; //@line 8101
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 8106
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 8108
  $345 = $$$5 + $$2234 | 0; //@line 8109
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 8111
  _pad_169($0, 32, $$2261, $345, $$6268); //@line 8112
  _out_163($0, $$2239, $$2234); //@line 8113
  _pad_169($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 8115
  _pad_169($0, 48, $$$5, $343, 0); //@line 8116
  _out_163($0, $$2, $343); //@line 8117
  _pad_169($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 8119
  $$0243 = $$2261; //@line 8120
  $$0247 = $$1248; //@line 8120
  $$0269 = $$3272; //@line 8120
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 8128
    } else {
     $$2242302 = 1; //@line 8130
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 8133
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 8136
       break;
      }
      _pop_arg_166($3 + ($$2242302 << 3) | 0, $352, $2); //@line 8140
      $356 = $$2242302 + 1 | 0; //@line 8141
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 8144
      } else {
       $$2242$lcssa = $356; //@line 8146
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 8152
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 8158
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 8164
       } else {
        $$0 = 1; //@line 8166
        break;
       }
      }
     } else {
      $$0 = 1; //@line 8171
     }
    }
   } else {
    $$0 = $$1248; //@line 8175
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8179
 return $$0 | 0; //@line 8179
}
function __ZN6RunnerC2Ev($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$018$i$i$i = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$byval_copy4 = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $132 = 0, $133 = 0, $135 = 0, $14 = 0, $142 = 0, $143 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $155 = 0, $157 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $177 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $192 = 0, $193 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $207 = 0, $208 = 0, $21 = 0, $210 = 0, $211 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $220 = 0, $222 = 0, $228 = 0, $231 = 0, $232 = 0, $243 = 0, $245 = 0, $247 = 0, $249 = 0, $250 = 0, $253 = 0, $254 = 0, $256 = 0, $258 = 0, $259 = 0, $262 = 0, $263 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $281 = 0, $283 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $52 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $74 = 0, $79 = 0, $8 = 0, $9 = 0, $91 = 0, $93 = 0, $98 = 0, label = 0, sp = 0, $$018$i$i$i$looptemp = 0;
 sp = STACKTOP; //@line 3345
 STACKTOP = STACKTOP + 256 | 0; //@line 3346
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 3346
 $$byval_copy4 = sp + 249 | 0; //@line 3347
 $1 = sp + 248 | 0; //@line 3348
 $2 = sp + 104 | 0; //@line 3349
 $3 = sp; //@line 3350
 $4 = sp + 176 | 0; //@line 3351
 $5 = $0 + 4 | 0; //@line 3352
 HEAP32[$5 >> 2] = 0; //@line 3353
 HEAP32[$5 + 4 >> 2] = 0; //@line 3353
 HEAP32[$5 + 8 >> 2] = 0; //@line 3353
 $6 = $0 + 40 | 0; //@line 3354
 HEAP32[$6 >> 2] = 0; //@line 3355
 HEAP32[$6 + 4 >> 2] = 0; //@line 3355
 HEAP32[$6 + 8 >> 2] = 0; //@line 3355
 HEAP32[$6 + 12 >> 2] = 0; //@line 3355
 HEAP32[$6 + 16 >> 2] = 0; //@line 3355
 HEAP32[$6 + 20 >> 2] = 0; //@line 3355
 $7 = $0 + 72 | 0; //@line 3356
 $8 = $0 + 76 | 0; //@line 3357
 $9 = $0 + 84 | 0; //@line 3358
 $10 = $0 + 88 | 0; //@line 3359
 $11 = $0 + 104 | 0; //@line 3360
 $12 = $0 + 120 | 0; //@line 3361
 HEAP32[$11 >> 2] = 0; //@line 3362
 HEAP32[$11 + 4 >> 2] = 0; //@line 3362
 HEAP32[$11 + 8 >> 2] = 0; //@line 3362
 HEAP32[$11 + 12 >> 2] = 0; //@line 3362
 HEAP32[$7 >> 2] = 0; //@line 3363
 HEAP32[$7 + 4 >> 2] = 0; //@line 3363
 HEAP32[$7 + 8 >> 2] = 0; //@line 3363
 HEAP32[$7 + 12 >> 2] = 0; //@line 3363
 HEAP32[$7 + 16 >> 2] = 0; //@line 3363
 HEAP32[$7 + 20 >> 2] = 0; //@line 3363
 HEAPF32[$12 >> 2] = 1.0; //@line 3364
 $13 = $0 + 124 | 0; //@line 3365
 HEAP32[$13 >> 2] = 2e4; //@line 3366
 __THREW__ = 0; //@line 3367
 invoke_vi(255, $2 | 0); //@line 3368
 $14 = __THREW__; //@line 3369
 __THREW__ = 0; //@line 3369
 if ($14 & 1) {
  $162 = ___cxa_find_matching_catch_2() | 0; //@line 3372
  $$3 = tempRet0; //@line 3374
  $$35 = $162; //@line 3374
 } else {
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 3377
  $17 = $2 + 4 | 0; //@line 3378
  __THREW__ = 0; //@line 3379
  invoke_iii(55, $5 | 0, $17 | 0) | 0; //@line 3380
  $18 = __THREW__; //@line 3381
  __THREW__ = 0; //@line 3381
  L4 : do {
   if ($18 & 1) {
    label = 41; //@line 3385
   } else {
    $20 = $0 + 16 | 0; //@line 3387
    $21 = $2 + 16 | 0; //@line 3388
    HEAP32[$20 >> 2] = HEAP32[$21 >> 2]; //@line 3389
    HEAP32[$20 + 4 >> 2] = HEAP32[$21 + 4 >> 2]; //@line 3389
    HEAP32[$20 + 8 >> 2] = HEAP32[$21 + 8 >> 2]; //@line 3389
    HEAP32[$20 + 12 >> 2] = HEAP32[$21 + 12 >> 2]; //@line 3389
    HEAP32[$20 + 16 >> 2] = HEAP32[$21 + 16 >> 2]; //@line 3389
    HEAP32[$20 + 20 >> 2] = HEAP32[$21 + 20 >> 2]; //@line 3389
    if (($0 | 0) != ($2 | 0)) {
     __THREW__ = 0; //@line 3397
     invoke_viii(15, $0 + 40 | 0, HEAP32[$2 + 40 >> 2] | 0, HEAP32[$2 + 44 >> 2] | 0); //@line 3398
     $28 = __THREW__; //@line 3399
     __THREW__ = 0; //@line 3399
     if ($28 & 1) {
      label = 41; //@line 3402
      break;
     }
    }
    $31 = $2 + 52 | 0; //@line 3407
    __THREW__ = 0; //@line 3408
    invoke_iii(55, $0 + 52 | 0, $31 | 0) | 0; //@line 3409
    $32 = __THREW__; //@line 3410
    __THREW__ = 0; //@line 3410
    if ($32 & 1) {
     label = 41; //@line 3413
    } else {
     HEAP16[$0 + 64 >> 1] = HEAP16[$2 + 64 >> 1] | 0; //@line 3418
     $37 = HEAP32[$13 >> 2] | 0; //@line 3419
     __THREW__ = 0; //@line 3420
     invoke_vii(120, $4 | 0, $2 | 0); //@line 3421
     $38 = __THREW__; //@line 3422
     __THREW__ = 0; //@line 3422
     if ($38 & 1) {
      $166 = ___cxa_find_matching_catch_2() | 0; //@line 3425
      $$1 = tempRet0; //@line 3427
      $$13 = $166; //@line 3427
     } else {
      __THREW__ = 0; //@line 3429
      invoke_viiii(10, $3 | 0, $37 | 0, 0, $4 | 0); //@line 3430
      $40 = __THREW__; //@line 3431
      __THREW__ = 0; //@line 3431
      do {
       if ($40 & 1) {
        $168 = ___cxa_find_matching_catch_2() | 0; //@line 3435
        $$0 = tempRet0; //@line 3437
        $$02 = $168; //@line 3437
       } else {
        $42 = HEAP32[$8 >> 2] | 0; //@line 3439
        if ($42 >>> 0 < (HEAP32[$0 + 80 >> 2] | 0) >>> 0) {
         $46 = $3; //@line 3444
         $51 = HEAP32[$46 + 4 >> 2] | 0; //@line 3449
         $52 = $42; //@line 3450
         HEAP32[$52 >> 2] = HEAP32[$46 >> 2]; //@line 3452
         HEAP32[$52 + 4 >> 2] = $51; //@line 3455
         HEAP32[$42 + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 3459
         $59 = $42 + 12 | 0; //@line 3460
         $60 = $3 + 12 | 0; //@line 3461
         HEAP32[$59 >> 2] = HEAP32[$60 >> 2]; //@line 3462
         HEAP32[$59 + 4 >> 2] = HEAP32[$60 + 4 >> 2]; //@line 3462
         HEAP32[$59 + 8 >> 2] = HEAP32[$60 + 8 >> 2]; //@line 3462
         HEAP32[$60 >> 2] = 0; //@line 3463
         HEAP32[$60 + 4 >> 2] = 0; //@line 3463
         HEAP32[$60 + 8 >> 2] = 0; //@line 3463
         $61 = $42 + 24 | 0; //@line 3464
         $62 = $3 + 24 | 0; //@line 3465
         HEAP32[$61 >> 2] = HEAP32[$62 >> 2]; //@line 3466
         HEAP32[$61 + 4 >> 2] = HEAP32[$62 + 4 >> 2]; //@line 3466
         HEAP32[$61 + 8 >> 2] = HEAP32[$62 + 8 >> 2]; //@line 3466
         HEAP32[$61 + 12 >> 2] = HEAP32[$62 + 12 >> 2]; //@line 3466
         HEAP32[$61 + 16 >> 2] = HEAP32[$62 + 16 >> 2]; //@line 3466
         HEAP32[$61 + 20 >> 2] = HEAP32[$62 + 20 >> 2]; //@line 3466
         $63 = $42 + 48 | 0; //@line 3467
         $64 = $3 + 48 | 0; //@line 3468
         HEAP32[$63 >> 2] = 0; //@line 3469
         $65 = $42 + 52 | 0; //@line 3470
         HEAP32[$65 >> 2] = 0; //@line 3471
         HEAP32[$42 + 56 >> 2] = 0; //@line 3473
         HEAP32[$63 >> 2] = HEAP32[$64 >> 2]; //@line 3475
         $68 = $3 + 52 | 0; //@line 3476
         HEAP32[$65 >> 2] = HEAP32[$68 >> 2]; //@line 3478
         $70 = $3 + 56 | 0; //@line 3479
         HEAP32[$42 + 56 >> 2] = HEAP32[$70 >> 2]; //@line 3482
         HEAP32[$70 >> 2] = 0; //@line 3483
         HEAP32[$68 >> 2] = 0; //@line 3484
         HEAP32[$64 >> 2] = 0; //@line 3485
         $73 = $42 + 60 | 0; //@line 3486
         $74 = $3 + 60 | 0; //@line 3487
         HEAP32[$73 >> 2] = HEAP32[$74 >> 2]; //@line 3488
         HEAP32[$73 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 3488
         HEAP32[$73 + 8 >> 2] = HEAP32[$74 + 8 >> 2]; //@line 3488
         HEAP32[$74 >> 2] = 0; //@line 3489
         HEAP32[$74 + 4 >> 2] = 0; //@line 3489
         HEAP32[$74 + 8 >> 2] = 0; //@line 3489
         HEAP16[$42 + 72 >> 1] = HEAP16[$3 + 72 >> 1] | 0; //@line 3493
         $79 = $3 + 80 | 0; //@line 3495
         HEAP32[$42 + 80 >> 2] = HEAP32[$79 >> 2]; //@line 3497
         HEAP32[$42 + 84 >> 2] = HEAP32[$3 + 84 >> 2]; //@line 3501
         HEAP32[$42 + 88 >> 2] = HEAP32[$3 + 88 >> 2]; //@line 3505
         HEAP32[$42 + 92 >> 2] = HEAP32[$3 + 92 >> 2]; //@line 3509
         HEAP32[$79 >> 2] = 0; //@line 3510
         HEAP32[$79 + 4 >> 2] = 0; //@line 3510
         HEAP32[$79 + 8 >> 2] = 0; //@line 3510
         HEAP32[$79 + 12 >> 2] = 0; //@line 3510
         $91 = $3 + 96 | 0; //@line 3512
         HEAP32[$42 + 96 >> 2] = HEAP32[$91 >> 2]; //@line 3514
         $93 = $3 + 100 | 0; //@line 3515
         HEAP32[$42 + 100 >> 2] = HEAP32[$93 >> 2]; //@line 3518
         HEAP32[$91 >> 2] = 0; //@line 3519
         HEAP32[$93 >> 2] = 0; //@line 3520
         HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 104; //@line 3523
        } else {
         __THREW__ = 0; //@line 3525
         invoke_vii(121, $7 | 0, $3 | 0); //@line 3526
         $98 = __THREW__; //@line 3527
         __THREW__ = 0; //@line 3527
         if ($98 & 1) {
          $170 = ___cxa_find_matching_catch_2() | 0; //@line 3530
          $171 = tempRet0; //@line 3531
          __ZN5StackD2Ev($3); //@line 3532
          $$0 = $171; //@line 3533
          $$02 = $170; //@line 3533
          break;
         }
        }
        __ZN5StackD2Ev($3); //@line 3537
        $100 = $4 + 52 | 0; //@line 3538
        if ((HEAP8[$100 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$100 >> 2] | 0); //@line 3544
        }
        $105 = $4 + 40 | 0; //@line 3546
        $106 = HEAP32[$105 >> 2] | 0; //@line 3547
        if ($106 | 0) {
         $108 = $4 + 44 | 0; //@line 3550
         $109 = HEAP32[$108 >> 2] | 0; //@line 3551
         do {
          if (($109 | 0) == ($106 | 0)) {
           $120 = $106; //@line 3555
          } else {
           $111 = $4 + 48 | 0; //@line 3557
           $113 = $109; //@line 3558
           while (1) {
            $112 = $113 + -72 | 0; //@line 3560
            HEAP32[$108 >> 2] = $112; //@line 3561
            __THREW__ = 0; //@line 3562
            HEAP8[$$byval_copy4 >> 0] = HEAP8[$1 >> 0] | 0; //@line 3563
            invoke_viii(13, $$byval_copy4 | 0, $111 | 0, $112 | 0); //@line 3564
            $114 = __THREW__; //@line 3565
            __THREW__ = 0; //@line 3565
            if ($114 & 1) {
             label = 18; //@line 3568
             break;
            }
            $113 = HEAP32[$108 >> 2] | 0; //@line 3571
            if (($113 | 0) == ($106 | 0)) {
             label = 19; //@line 3574
             break;
            }
           }
           if ((label | 0) == 18) {
            $118 = ___cxa_find_matching_catch_3(0) | 0; //@line 3581
            ___clang_call_terminate($118); //@line 3583
           } else if ((label | 0) == 19) {
            $120 = HEAP32[$105 >> 2] | 0; //@line 3588
            break;
           }
          }
         } while (0);
         __ZdlPv($120); //@line 3593
        }
        $121 = $4 + 4 | 0; //@line 3595
        if ((HEAP8[$121 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$121 >> 2] | 0); //@line 3601
        }
        __THREW__ = 0; //@line 3603
        $126 = invoke_ii(142, 20) | 0; //@line 3604
        $127 = __THREW__; //@line 3605
        __THREW__ = 0; //@line 3605
        if ($127 & 1) {
         label = 41; //@line 3608
         break L4;
        }
        __THREW__ = 0; //@line 3611
        invoke_vi(256, $126 | 0); //@line 3612
        $129 = __THREW__; //@line 3613
        __THREW__ = 0; //@line 3613
        if ($129 & 1) {
         $198 = ___cxa_find_matching_catch_2() | 0; //@line 3616
         $199 = tempRet0; //@line 3617
         __ZdlPv($126); //@line 3618
         $$2 = $199; //@line 3619
         $$24 = $198; //@line 3619
         $$pre$phiZ2D = $31; //@line 3619
         break L4;
        }
        HEAP32[$0 + 96 >> 2] = $126; //@line 3623
        __THREW__ = 0; //@line 3624
        $132 = invoke_ii(142, 20) | 0; //@line 3625
        $133 = __THREW__; //@line 3626
        __THREW__ = 0; //@line 3626
        if ($133 & 1) {
         label = 41; //@line 3629
         break L4;
        }
        __THREW__ = 0; //@line 3632
        invoke_vi(257, $132 | 0); //@line 3633
        $135 = __THREW__; //@line 3634
        __THREW__ = 0; //@line 3634
        if ($135 & 1) {
         $200 = ___cxa_find_matching_catch_2() | 0; //@line 3637
         $201 = tempRet0; //@line 3638
         __ZdlPv($132); //@line 3639
         $$2 = $201; //@line 3640
         $$24 = $200; //@line 3640
         $$pre$phiZ2D = $31; //@line 3640
         break L4;
        }
        HEAP32[$0 + 100 >> 2] = $132; //@line 3644
        if ((HEAP8[$31 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$31 >> 2] | 0); //@line 3650
        }
        $142 = $2 + 40 | 0; //@line 3652
        $143 = HEAP32[$142 >> 2] | 0; //@line 3653
        if ($143 | 0) {
         $145 = $2 + 44 | 0; //@line 3656
         $146 = HEAP32[$145 >> 2] | 0; //@line 3657
         do {
          if (($146 | 0) == ($143 | 0)) {
           $157 = $143; //@line 3661
          } else {
           $148 = $2 + 48 | 0; //@line 3663
           $150 = $146; //@line 3664
           while (1) {
            $149 = $150 + -72 | 0; //@line 3666
            HEAP32[$145 >> 2] = $149; //@line 3667
            __THREW__ = 0; //@line 3668
            HEAP8[$$byval_copy4 >> 0] = HEAP8[$1 >> 0] | 0; //@line 3669
            invoke_viii(13, $$byval_copy4 | 0, $148 | 0, $149 | 0); //@line 3670
            $151 = __THREW__; //@line 3671
            __THREW__ = 0; //@line 3671
            if ($151 & 1) {
             label = 34; //@line 3674
             break;
            }
            $150 = HEAP32[$145 >> 2] | 0; //@line 3677
            if (($150 | 0) == ($143 | 0)) {
             label = 35; //@line 3680
             break;
            }
           }
           if ((label | 0) == 34) {
            $155 = ___cxa_find_matching_catch_3(0) | 0; //@line 3687
            ___clang_call_terminate($155); //@line 3689
           } else if ((label | 0) == 35) {
            $157 = HEAP32[$142 >> 2] | 0; //@line 3694
            break;
           }
          }
         } while (0);
         __ZdlPv($157); //@line 3699
        }
        if ((HEAP8[$17 + 11 >> 0] | 0) >= 0) {
         STACKTOP = sp; //@line 3705
         return;
        }
        __ZdlPv(HEAP32[$17 >> 2] | 0); //@line 3708
        STACKTOP = sp; //@line 3709
        return;
       }
      } while (0);
      $172 = $4 + 52 | 0; //@line 3712
      if ((HEAP8[$172 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$172 >> 2] | 0); //@line 3718
      }
      $177 = $4 + 40 | 0; //@line 3720
      $178 = HEAP32[$177 >> 2] | 0; //@line 3721
      if ($178 | 0) {
       $180 = $4 + 44 | 0; //@line 3724
       $181 = HEAP32[$180 >> 2] | 0; //@line 3725
       do {
        if (($181 | 0) == ($178 | 0)) {
         $192 = $178; //@line 3729
        } else {
         $183 = $4 + 48 | 0; //@line 3731
         $185 = $181; //@line 3732
         while (1) {
          $184 = $185 + -72 | 0; //@line 3734
          HEAP32[$180 >> 2] = $184; //@line 3735
          __THREW__ = 0; //@line 3736
          HEAP8[$$byval_copy4 >> 0] = HEAP8[$1 >> 0] | 0; //@line 3737
          invoke_viii(13, $$byval_copy4 | 0, $183 | 0, $184 | 0); //@line 3738
          $186 = __THREW__; //@line 3739
          __THREW__ = 0; //@line 3739
          if ($186 & 1) {
           label = 52; //@line 3742
           break;
          }
          $185 = HEAP32[$180 >> 2] | 0; //@line 3745
          if (($185 | 0) == ($178 | 0)) {
           label = 53; //@line 3748
           break;
          }
         }
         if ((label | 0) == 52) {
          $190 = ___cxa_find_matching_catch_3(0) | 0; //@line 3755
          ___clang_call_terminate($190); //@line 3757
         } else if ((label | 0) == 53) {
          $192 = HEAP32[$177 >> 2] | 0; //@line 3762
          break;
         }
        }
       } while (0);
       __ZdlPv($192); //@line 3767
      }
      $193 = $4 + 4 | 0; //@line 3769
      if ((HEAP8[$193 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$193 >> 2] | 0); //@line 3775
       $$1 = $$0; //@line 3776
       $$13 = $$02; //@line 3776
      } else {
       $$1 = $$0; //@line 3778
       $$13 = $$02; //@line 3778
      }
     }
     $$2 = $$1; //@line 3781
     $$24 = $$13; //@line 3781
     $$pre$phiZ2D = $31; //@line 3781
    }
   }
  } while (0);
  if ((label | 0) == 41) {
   $164 = ___cxa_find_matching_catch_2() | 0; //@line 3786
   $$2 = tempRet0; //@line 3789
   $$24 = $164; //@line 3789
   $$pre$phiZ2D = $2 + 52 | 0; //@line 3789
  }
  if ((HEAP8[$$pre$phiZ2D + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$2 + 52 >> 2] | 0); //@line 3797
  }
  $207 = $2 + 40 | 0; //@line 3799
  $208 = HEAP32[$207 >> 2] | 0; //@line 3800
  if ($208 | 0) {
   $210 = $2 + 44 | 0; //@line 3803
   $211 = HEAP32[$210 >> 2] | 0; //@line 3804
   do {
    if (($211 | 0) == ($208 | 0)) {
     $222 = $208; //@line 3808
    } else {
     $213 = $2 + 48 | 0; //@line 3810
     $215 = $211; //@line 3811
     while (1) {
      $214 = $215 + -72 | 0; //@line 3813
      HEAP32[$210 >> 2] = $214; //@line 3814
      __THREW__ = 0; //@line 3815
      HEAP8[$$byval_copy4 >> 0] = HEAP8[$1 >> 0] | 0; //@line 3816
      invoke_viii(13, $$byval_copy4 | 0, $213 | 0, $214 | 0); //@line 3817
      $216 = __THREW__; //@line 3818
      __THREW__ = 0; //@line 3818
      if ($216 & 1) {
       label = 67; //@line 3821
       break;
      }
      $215 = HEAP32[$210 >> 2] | 0; //@line 3824
      if (($215 | 0) == ($208 | 0)) {
       label = 68; //@line 3827
       break;
      }
     }
     if ((label | 0) == 67) {
      $220 = ___cxa_find_matching_catch_3(0) | 0; //@line 3834
      ___clang_call_terminate($220); //@line 3836
     } else if ((label | 0) == 68) {
      $222 = HEAP32[$207 >> 2] | 0; //@line 3841
      break;
     }
    }
   } while (0);
   __ZdlPv($222); //@line 3846
  }
  if ((HEAP8[$17 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$17 >> 2] | 0); //@line 3853
   $$3 = $$2; //@line 3854
   $$35 = $$24; //@line 3854
  } else {
   $$3 = $$2; //@line 3856
   $$35 = $$24; //@line 3856
  }
 }
 $228 = HEAP32[$0 + 112 >> 2] | 0; //@line 3860
 if ($228 | 0) {
  $$018$i$i$i = $228; //@line 3863
  do {
   $$018$i$i$i$looptemp = $$018$i$i$i;
   $$018$i$i$i = HEAP32[$$018$i$i$i >> 2] | 0; //@line 3865
   $231 = $$018$i$i$i$looptemp + 8 | 0; //@line 3866
   $232 = $$018$i$i$i$looptemp + 20 | 0; //@line 3867
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($$018$i$i$i$looptemp + 32 | 0); //@line 3869
   if ((HEAP8[$232 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$232 >> 2] | 0); //@line 3875
   }
   if ((HEAP8[$231 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$231 >> 2] | 0); //@line 3882
   }
   __ZdlPv($$018$i$i$i$looptemp); //@line 3884
  } while (($$018$i$i$i | 0) != 0);
 }
 $243 = HEAP32[$11 >> 2] | 0; //@line 3893
 HEAP32[$11 >> 2] = 0; //@line 3894
 if ($243 | 0) {
  __ZdlPv($243); //@line 3897
 }
 $245 = HEAP32[$9 >> 2] | 0; //@line 3899
 if ($245 | 0) {
  $247 = HEAP32[$10 >> 2] | 0; //@line 3902
  if (($247 | 0) == ($245 | 0)) {
   $253 = $245; //@line 3905
  } else {
   $250 = $247; //@line 3907
   do {
    $249 = $250 + -144 | 0; //@line 3909
    HEAP32[$10 >> 2] = $249; //@line 3910
    __ZN9ReferenceD2Ev($249); //@line 3911
    $250 = HEAP32[$10 >> 2] | 0; //@line 3912
   } while (($250 | 0) != ($245 | 0));
   $253 = HEAP32[$9 >> 2] | 0; //@line 3921
  }
  __ZdlPv($253); //@line 3923
 }
 $254 = HEAP32[$7 >> 2] | 0; //@line 3925
 if ($254 | 0) {
  $256 = HEAP32[$8 >> 2] | 0; //@line 3928
  if (($256 | 0) == ($254 | 0)) {
   $262 = $254; //@line 3931
  } else {
   $259 = $256; //@line 3933
   do {
    $258 = $259 + -104 | 0; //@line 3935
    HEAP32[$8 >> 2] = $258; //@line 3936
    __ZN5StackD2Ev($258); //@line 3937
    $259 = HEAP32[$8 >> 2] | 0; //@line 3938
   } while (($259 | 0) != ($254 | 0));
   $262 = HEAP32[$7 >> 2] | 0; //@line 3947
  }
  __ZdlPv($262); //@line 3949
 }
 $263 = $0 + 52 | 0; //@line 3951
 if ((HEAP8[$263 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$263 >> 2] | 0); //@line 3957
 }
 $268 = $0 + 40 | 0; //@line 3959
 $269 = HEAP32[$268 >> 2] | 0; //@line 3960
 if ($269 | 0) {
  $271 = $0 + 44 | 0; //@line 3963
  $272 = HEAP32[$271 >> 2] | 0; //@line 3964
  do {
   if (($272 | 0) == ($269 | 0)) {
    $283 = $269; //@line 3968
   } else {
    $274 = $0 + 48 | 0; //@line 3970
    $276 = $272; //@line 3971
    while (1) {
     $275 = $276 + -72 | 0; //@line 3973
     HEAP32[$271 >> 2] = $275; //@line 3974
     __THREW__ = 0; //@line 3975
     HEAP8[$$byval_copy4 >> 0] = HEAP8[$1 >> 0] | 0; //@line 3976
     invoke_viii(13, $$byval_copy4 | 0, $274 | 0, $275 | 0); //@line 3977
     $277 = __THREW__; //@line 3978
     __THREW__ = 0; //@line 3978
     if ($277 & 1) {
      label = 97; //@line 3981
      break;
     }
     $276 = HEAP32[$271 >> 2] | 0; //@line 3984
     if (($276 | 0) == ($269 | 0)) {
      label = 98; //@line 3987
      break;
     }
    }
    if ((label | 0) == 97) {
     $281 = ___cxa_find_matching_catch_3(0) | 0; //@line 3994
     ___clang_call_terminate($281); //@line 3996
    } else if ((label | 0) == 98) {
     $283 = HEAP32[$268 >> 2] | 0; //@line 4001
     break;
    }
   }
  } while (0);
  __ZdlPv($283); //@line 4006
 }
 if ((HEAP8[$5 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$35 | 0); //@line 4012
 }
 __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 4016
 ___resumeException($$35 | 0); //@line 4017
}
function __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE19__add_back_capacityEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0115142$lcssa = 0, $$0115142175 = 0, $$0116126 = 0, $$024129 = 0, $$025 = 0, $$026 = 0, $$1117$lcssa = 0, $$1139 = 0, $$2118135 = 0, $$2133 = 0, $$3127 = 0, $$in$i = 0, $$in$i38 = 0, $$in$i51 = 0, $$sroa$13$0$i = 0, $$sroa$13$0$i37 = 0, $$sroa$13$0$i50 = 0, $$sroa$13$1$i = 0, $$sroa$13$1$i42 = 0, $$sroa$13$1$i55 = 0, $$sroa$speculated = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i35 = 0, $$sroa$speculated$i48 = 0, $$sroa$speculated85 = 0, $10 = 0, $108 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $137 = 0, $139 = 0, $142 = 0, $143 = 0, $145 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $157 = 0, $16 = 0, $163 = 0, $166 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $192 = 0, $194 = 0, $195 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $203 = 0, $207 = 0, $208 = 0, $209 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $232 = 0, $234 = 0, $236 = 0, $239 = 0, $240 = 0, $243 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $252 = 0, $253 = 0, $254 = 0, $256 = 0, $259 = 0, $26 = 0, $262 = 0, $268 = 0, $269 = 0, $27 = 0, $276 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $285 = 0, $287 = 0, $29 = 0, $292 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $303 = 0, $305 = 0, $306 = 0, $31 = 0, $313 = 0, $315 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $68 = 0, $7 = 0, $74 = 0, $77 = 0, $79 = 0, $80 = 0, $83 = 0, $84 = 0, $86 = 0, $89 = 0, $95 = 0, $97 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5336
 STACKTOP = STACKTOP + 32 | 0; //@line 5337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5337
 $2 = sp + 4 | 0; //@line 5338
 $3 = sp; //@line 5339
 $4 = $0 + 8 | 0; //@line 5340
 $5 = HEAP32[$4 >> 2] | 0; //@line 5341
 $6 = $0 + 4 | 0; //@line 5342
 $7 = HEAP32[$6 >> 2] | 0; //@line 5343
 $10 = (($5 | 0) == ($7 | 0) & 1) + $1 | 0; //@line 5346
 $15 = (($10 >>> 0) / 56 | 0) + ((($10 >>> 0) % 56 | 0 | 0) != 0 & 1) | 0; //@line 5351
 $16 = $0 + 16 | 0; //@line 5352
 $17 = HEAP32[$16 >> 2] | 0; //@line 5353
 $18 = ($17 >>> 0) / 56 | 0; //@line 5354
 $$sroa$speculated85 = $15 >>> 0 < $18 >>> 0 ? $15 : $18; //@line 5356
 $20 = $15 - $$sroa$speculated85 | 0; //@line 5357
 $22 = $5; //@line 5359
 if (!$20) {
  HEAP32[$16 >> 2] = (Math_imul($$sroa$speculated85, -56) | 0) + $17; //@line 5363
  if (!$$sroa$speculated85) {
   STACKTOP = sp; //@line 5366
   return;
  }
  $26 = $0 + 12 | 0; //@line 5368
  $$0116126 = $$sroa$speculated85; //@line 5369
  $28 = $7; //@line 5369
  $31 = $5; //@line 5369
  L6 : while (1) {
   $27 = HEAP32[$28 >> 2] | 0; //@line 5371
   $29 = $28 + 4 | 0; //@line 5372
   HEAP32[$6 >> 2] = $29; //@line 5373
   $30 = HEAP32[$26 >> 2] | 0; //@line 5374
   $33 = $30; //@line 5376
   do {
    if (($31 | 0) == ($30 | 0)) {
     $34 = HEAP32[$0 >> 2] | 0; //@line 5379
     $36 = $34; //@line 5381
     if ($29 >>> 0 > $34 >>> 0) {
      $37 = $29; //@line 5383
      $41 = (($37 - $36 >> 2) + 1 | 0) / -2 | 0; //@line 5387
      $42 = $29 + ($41 << 2) | 0; //@line 5388
      $43 = $33 - $37 | 0; //@line 5389
      $44 = $43 >> 2; //@line 5390
      if (!$44) {
       $48 = $29; //@line 5393
      } else {
       _memmove($42 | 0, $29 | 0, $43 | 0) | 0; //@line 5395
       $48 = HEAP32[$6 >> 2] | 0; //@line 5397
      }
      $46 = $42 + ($44 << 2) | 0; //@line 5399
      HEAP32[$4 >> 2] = $46; //@line 5400
      HEAP32[$6 >> 2] = $48 + ($41 << 2); //@line 5402
      $77 = $46; //@line 5403
      break;
     }
     $50 = $33 - $36 >> 1; //@line 5407
     $$sroa$speculated$i35 = ($50 | 0) == 0 ? 1 : $50; //@line 5409
     if ($$sroa$speculated$i35 >>> 0 > 1073741823) {
      break L6;
     }
     $60 = __Znwj($$sroa$speculated$i35 << 2) | 0; //@line 5416
     $61 = $60; //@line 5417
     $62 = $60 + ($$sroa$speculated$i35 >>> 2 << 2) | 0; //@line 5418
     $63 = $62; //@line 5419
     $65 = $60 + ($$sroa$speculated$i35 << 2) | 0; //@line 5421
     if (($29 | 0) == ($31 | 0)) {
      $$sroa$13$1$i42 = $63; //@line 5424
      $74 = $34; //@line 5424
     } else {
      $$in$i38 = $62; //@line 5426
      $$sroa$13$0$i37 = $63; //@line 5426
      $68 = $29; //@line 5426
      do {
       HEAP32[$$in$i38 >> 2] = HEAP32[$68 >> 2]; //@line 5429
       $$in$i38 = $$sroa$13$0$i37 + 4 | 0; //@line 5431
       $$sroa$13$0$i37 = $$in$i38; //@line 5432
       $68 = $68 + 4 | 0; //@line 5433
      } while (($68 | 0) != ($31 | 0));
      $$sroa$13$1$i42 = $$sroa$13$0$i37; //@line 5442
      $74 = HEAP32[$0 >> 2] | 0; //@line 5442
     }
     HEAP32[$0 >> 2] = $61; //@line 5444
     HEAP32[$6 >> 2] = $63; //@line 5445
     HEAP32[$4 >> 2] = $$sroa$13$1$i42; //@line 5446
     HEAP32[$26 >> 2] = $65; //@line 5447
     if (!$74) {
      $77 = $$sroa$13$1$i42; //@line 5451
     } else {
      __ZdlPv($74); //@line 5453
      $77 = HEAP32[$4 >> 2] | 0; //@line 5455
     }
    } else {
     $77 = $31; //@line 5458
    }
   } while (0);
   HEAP32[$77 >> 2] = $27; //@line 5461
   $79 = (HEAP32[$4 >> 2] | 0) + 4 | 0; //@line 5463
   HEAP32[$4 >> 2] = $79; //@line 5464
   $80 = $$0116126 + -1 | 0; //@line 5465
   if (!$80) {
    label = 91; //@line 5468
    break;
   }
   $$0116126 = $80; //@line 5472
   $28 = HEAP32[$6 >> 2] | 0; //@line 5472
   $31 = $79; //@line 5472
  }
  if ((label | 0) == 91) {
   STACKTOP = sp; //@line 5475
   return;
  }
  $53 = ___cxa_allocate_exception(8) | 0; //@line 5477
  __THREW__ = 0; //@line 5478
  invoke_vii(119, $53 | 0, 31992); //@line 5479
  $54 = __THREW__; //@line 5480
  __THREW__ = 0; //@line 5480
  if ($54 & 1) {
   $56 = ___cxa_find_matching_catch_2() | 0; //@line 5483
   ___cxa_free_exception($53 | 0); //@line 5485
   ___resumeException($56 | 0); //@line 5486
  } else {
   HEAP32[$53 >> 2] = 13224; //@line 5489
   ___cxa_throw($53 | 0, 2856, 240); //@line 5490
  }
 }
 $83 = $0 + 12 | 0; //@line 5495
 $84 = HEAP32[$83 >> 2] | 0; //@line 5496
 $86 = $84 - (HEAP32[$0 >> 2] | 0) | 0; //@line 5498
 $89 = $22 - $7 >> 2; //@line 5501
 if ($20 >>> 0 <= (($86 >> 2) - $89 | 0) >>> 0) {
  L34 : do {
   if (($84 | 0) == ($22 | 0)) {
    $$0115142$lcssa = $20; //@line 5508
    label = 23; //@line 5509
   } else {
    $$0115142175 = $20; //@line 5511
    while (1) {
     HEAP32[$2 >> 2] = __Znwj(4032) | 0; //@line 5514
     __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE9push_backEOS2_($0, $2); //@line 5515
     $97 = $$0115142175 + -1 | 0; //@line 5516
     if (!$97) {
      break;
     }
     if ((HEAP32[$83 >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) {
      $$0115142$lcssa = $97; //@line 5525
      label = 23; //@line 5526
      break L34;
     } else {
      $$0115142175 = $97; //@line 5529
     }
    }
    $$1117$lcssa = $$sroa$speculated85; //@line 5533
    $114 = HEAP32[$16 >> 2] | 0; //@line 5533
   }
  } while (0);
  if ((label | 0) == 23) {
   $95 = ~($15 >>> 0 > $18 >>> 0 ? $18 : $15); //@line 5539
   $$1139 = $$0115142$lcssa; //@line 5540
   do {
    HEAP32[$2 >> 2] = __Znwj(4032) | 0; //@line 5543
    __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE10push_frontEOS2_($0, $2); //@line 5544
    $$1139 = $$1139 + -1 | 0; //@line 5545
    $108 = (HEAP32[$16 >> 2] | 0) + 56 + ((((HEAP32[$4 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0) == 4) << 31 >> 31) | 0; //@line 5553
    HEAP32[$16 >> 2] = $108; //@line 5554
   } while (($$1139 | 0) != 0);
   $$1117$lcssa = $$0115142$lcssa + -1 - $95 | 0; //@line 5564
   $114 = $108; //@line 5564
  }
  HEAP32[$16 >> 2] = $114 + (Math_imul($$1117$lcssa, -56) | 0); //@line 5568
  if (!$$1117$lcssa) {
   STACKTOP = sp; //@line 5571
   return;
  }
  $$2118135 = $$1117$lcssa; //@line 5574
  $120 = HEAP32[$4 >> 2] | 0; //@line 5574
  L48 : while (1) {
   $116 = HEAP32[$6 >> 2] | 0; //@line 5576
   $117 = HEAP32[$116 >> 2] | 0; //@line 5577
   $118 = $116 + 4 | 0; //@line 5578
   HEAP32[$6 >> 2] = $118; //@line 5579
   $119 = HEAP32[$83 >> 2] | 0; //@line 5580
   $122 = $119; //@line 5582
   do {
    if (($120 | 0) == ($119 | 0)) {
     $123 = HEAP32[$0 >> 2] | 0; //@line 5585
     $125 = $123; //@line 5587
     if ($118 >>> 0 > $123 >>> 0) {
      $126 = $118; //@line 5589
      $130 = (($126 - $125 >> 2) + 1 | 0) / -2 | 0; //@line 5593
      $131 = $118 + ($130 << 2) | 0; //@line 5594
      $132 = $122 - $126 | 0; //@line 5595
      $133 = $132 >> 2; //@line 5596
      if (!$133) {
       $137 = $118; //@line 5599
      } else {
       _memmove($131 | 0, $118 | 0, $132 | 0) | 0; //@line 5601
       $137 = HEAP32[$6 >> 2] | 0; //@line 5603
      }
      $135 = $131 + ($133 << 2) | 0; //@line 5605
      HEAP32[$4 >> 2] = $135; //@line 5606
      HEAP32[$6 >> 2] = $137 + ($130 << 2); //@line 5608
      $166 = $135; //@line 5609
      break;
     }
     $139 = $122 - $125 >> 1; //@line 5613
     $$sroa$speculated$i48 = ($139 | 0) == 0 ? 1 : $139; //@line 5615
     if ($$sroa$speculated$i48 >>> 0 > 1073741823) {
      break L48;
     }
     $149 = __Znwj($$sroa$speculated$i48 << 2) | 0; //@line 5622
     $150 = $149; //@line 5623
     $151 = $149 + ($$sroa$speculated$i48 >>> 2 << 2) | 0; //@line 5624
     $152 = $151; //@line 5625
     $154 = $149 + ($$sroa$speculated$i48 << 2) | 0; //@line 5627
     if (($118 | 0) == ($120 | 0)) {
      $$sroa$13$1$i55 = $152; //@line 5630
      $163 = $123; //@line 5630
     } else {
      $$in$i51 = $151; //@line 5632
      $$sroa$13$0$i50 = $152; //@line 5632
      $157 = $118; //@line 5632
      do {
       HEAP32[$$in$i51 >> 2] = HEAP32[$157 >> 2]; //@line 5635
       $$in$i51 = $$sroa$13$0$i50 + 4 | 0; //@line 5637
       $$sroa$13$0$i50 = $$in$i51; //@line 5638
       $157 = $157 + 4 | 0; //@line 5639
      } while (($157 | 0) != ($120 | 0));
      $$sroa$13$1$i55 = $$sroa$13$0$i50; //@line 5648
      $163 = HEAP32[$0 >> 2] | 0; //@line 5648
     }
     HEAP32[$0 >> 2] = $150; //@line 5650
     HEAP32[$6 >> 2] = $152; //@line 5651
     HEAP32[$4 >> 2] = $$sroa$13$1$i55; //@line 5652
     HEAP32[$83 >> 2] = $154; //@line 5653
     if (!$163) {
      $166 = $$sroa$13$1$i55; //@line 5657
     } else {
      __ZdlPv($163); //@line 5659
      $166 = HEAP32[$4 >> 2] | 0; //@line 5661
     }
    } else {
     $166 = $120; //@line 5664
    }
   } while (0);
   HEAP32[$166 >> 2] = $117; //@line 5667
   $120 = (HEAP32[$4 >> 2] | 0) + 4 | 0; //@line 5669
   HEAP32[$4 >> 2] = $120; //@line 5670
   $$2118135 = $$2118135 + -1 | 0; //@line 5671
   if (!$$2118135) {
    label = 91; //@line 5674
    break;
   }
  }
  if ((label | 0) == 91) {
   STACKTOP = sp; //@line 5681
   return;
  }
  $142 = ___cxa_allocate_exception(8) | 0; //@line 5683
  __THREW__ = 0; //@line 5684
  invoke_vii(119, $142 | 0, 31992); //@line 5685
  $143 = __THREW__; //@line 5686
  __THREW__ = 0; //@line 5686
  if ($143 & 1) {
   $145 = ___cxa_find_matching_catch_2() | 0; //@line 5689
   ___cxa_free_exception($142 | 0); //@line 5691
   ___resumeException($145 | 0); //@line 5692
  } else {
   HEAP32[$142 >> 2] = 13224; //@line 5695
   ___cxa_throw($142 | 0, 2856, 240); //@line 5696
  }
 }
 $171 = $86 >> 1; //@line 5700
 $172 = $89 + $20 | 0; //@line 5701
 $$sroa$speculated = $171 >>> 0 < $172 >>> 0 ? $172 : $171; //@line 5703
 $174 = $89 - $$sroa$speculated85 | 0; //@line 5704
 HEAP32[$2 + 12 >> 2] = 0; //@line 5707
 HEAP32[$2 + 16 >> 2] = $0 + 12; //@line 5709
 do {
  if (!$$sroa$speculated) {
   $187 = 0; //@line 5713
  } else {
   if ($$sroa$speculated >>> 0 <= 1073741823) {
    $187 = __Znwj($$sroa$speculated << 2) | 0; //@line 5719
    break;
   }
   $180 = ___cxa_allocate_exception(8) | 0; //@line 5722
   __THREW__ = 0; //@line 5723
   invoke_vii(119, $180 | 0, 31992); //@line 5724
   $181 = __THREW__; //@line 5725
   __THREW__ = 0; //@line 5725
   if ($181 & 1) {
    $183 = ___cxa_find_matching_catch_2() | 0; //@line 5728
    ___cxa_free_exception($180 | 0); //@line 5730
    ___resumeException($183 | 0); //@line 5731
   } else {
    HEAP32[$180 >> 2] = 13224; //@line 5734
    ___cxa_throw($180 | 0, 2856, 240); //@line 5735
   }
  }
 } while (0);
 HEAP32[$2 >> 2] = $187; //@line 5740
 $188 = $187 + ($174 << 2) | 0; //@line 5741
 $189 = $2 + 8 | 0; //@line 5742
 HEAP32[$189 >> 2] = $188; //@line 5743
 $190 = $2 + 4 | 0; //@line 5744
 HEAP32[$190 >> 2] = $188; //@line 5745
 $192 = $2 + 12 | 0; //@line 5747
 HEAP32[$192 >> 2] = $187 + ($$sroa$speculated << 2); //@line 5748
 $$2133 = $20; //@line 5749
 while (1) {
  __THREW__ = 0; //@line 5751
  $194 = invoke_ii(142, 4032) | 0; //@line 5752
  $195 = __THREW__; //@line 5753
  __THREW__ = 0; //@line 5753
  if ($195 & 1) {
   label = 57; //@line 5756
   break;
  }
  HEAP32[$3 >> 2] = $194; //@line 5759
  __THREW__ = 0; //@line 5760
  invoke_vii(123, $2 | 0, $3 | 0); //@line 5761
  $197 = __THREW__; //@line 5762
  __THREW__ = 0; //@line 5762
  if ($197 & 1) {
   label = 57; //@line 5765
   break;
  }
  $$2133 = $$2133 + -1 | 0; //@line 5768
  if (!$$2133) {
   label = 52; //@line 5771
   break;
  }
 }
 L86 : do {
  if ((label | 0) == 52) {
   L94 : do {
    if ($$sroa$speculated85 | 0) {
     $$3127 = $$sroa$speculated85; //@line 5784
     $216 = HEAP32[$189 >> 2] | 0; //@line 5784
     $268 = HEAP32[$6 >> 2] | 0; //@line 5784
     L96 : while (1) {
      $215 = HEAP32[$192 >> 2] | 0; //@line 5786
      $218 = $215; //@line 5788
      do {
       if (($216 | 0) == ($215 | 0)) {
        $219 = HEAP32[$190 >> 2] | 0; //@line 5791
        $220 = HEAP32[$2 >> 2] | 0; //@line 5792
        $222 = $220; //@line 5794
        if ($219 >>> 0 > $220 >>> 0) {
         $223 = $219; //@line 5796
         $227 = (($223 - $222 >> 2) + 1 | 0) / -2 | 0; //@line 5800
         $228 = $219 + ($227 << 2) | 0; //@line 5801
         $229 = $218 - $223 | 0; //@line 5802
         $230 = $229 >> 2; //@line 5803
         if (!$230) {
          $234 = $219; //@line 5806
         } else {
          _memmove($228 | 0, $219 | 0, $229 | 0) | 0; //@line 5808
          $234 = HEAP32[$190 >> 2] | 0; //@line 5810
         }
         $232 = $228 + ($230 << 2) | 0; //@line 5812
         HEAP32[$189 >> 2] = $232; //@line 5813
         HEAP32[$190 >> 2] = $234 + ($227 << 2); //@line 5815
         $269 = $232; //@line 5816
         break;
        }
        $236 = $218 - $222 >> 1; //@line 5820
        $$sroa$speculated$i = ($236 | 0) == 0 ? 1 : $236; //@line 5822
        if ($$sroa$speculated$i >>> 0 > 1073741823) {
         label = 66; //@line 5825
         break L96;
        }
        __THREW__ = 0; //@line 5829
        $248 = invoke_ii(142, $$sroa$speculated$i << 2 | 0) | 0; //@line 5830
        $249 = __THREW__; //@line 5831
        __THREW__ = 0; //@line 5831
        if ($249 & 1) {
         label = 75; //@line 5834
         break L96;
        }
        $252 = $248; //@line 5838
        $253 = $248 + ($$sroa$speculated$i >>> 2 << 2) | 0; //@line 5839
        $254 = $253; //@line 5840
        $256 = $248 + ($$sroa$speculated$i << 2) | 0; //@line 5842
        if (($219 | 0) == ($216 | 0)) {
         $$sroa$13$1$i = $254; //@line 5845
        } else {
         $$in$i = $253; //@line 5847
         $$sroa$13$0$i = $254; //@line 5847
         $259 = $219; //@line 5847
         while (1) {
          HEAP32[$$in$i >> 2] = HEAP32[$259 >> 2]; //@line 5850
          $$in$i = $$sroa$13$0$i + 4 | 0; //@line 5852
          $262 = $$in$i; //@line 5853
          $259 = $259 + 4 | 0; //@line 5854
          if (($259 | 0) == ($216 | 0)) {
           $$sroa$13$1$i = $262; //@line 5857
           break;
          } else {
           $$sroa$13$0$i = $262; //@line 5860
          }
         }
        }
        HEAP32[$2 >> 2] = $252; //@line 5864
        HEAP32[$190 >> 2] = $254; //@line 5865
        HEAP32[$189 >> 2] = $$sroa$13$1$i; //@line 5866
        HEAP32[$192 >> 2] = $256; //@line 5867
        if (!$220) {
         $269 = $$sroa$13$1$i; //@line 5871
        } else {
         __ZdlPv($220); //@line 5873
         $269 = HEAP32[$189 >> 2] | 0; //@line 5875
        }
       } else {
        $269 = $216; //@line 5878
       }
      } while (0);
      HEAP32[$269 >> 2] = HEAP32[$268 >> 2]; //@line 5882
      $216 = (HEAP32[$189 >> 2] | 0) + 4 | 0; //@line 5884
      HEAP32[$189 >> 2] = $216; //@line 5885
      $268 = (HEAP32[$6 >> 2] | 0) + 4 | 0; //@line 5887
      HEAP32[$6 >> 2] = $268; //@line 5888
      $$3127 = $$3127 + -1 | 0; //@line 5889
      if (!$$3127) {
       break L94;
      }
     }
     do {
      if ((label | 0) == 66) {
       $239 = ___cxa_allocate_exception(8) | 0; //@line 5899
       __THREW__ = 0; //@line 5900
       invoke_vii(119, $239 | 0, 31992); //@line 5901
       $240 = __THREW__; //@line 5902
       __THREW__ = 0; //@line 5902
       if ($240 & 1) {
        $245 = ___cxa_find_matching_catch_2() | 0; //@line 5905
        $246 = tempRet0; //@line 5906
        ___cxa_free_exception($239 | 0); //@line 5907
        $eh$lpad$body$index3Z2D = $246; //@line 5908
        $eh$lpad$body$indexZ2D = $245; //@line 5908
        break;
       } else {
        HEAP32[$239 >> 2] = 13224; //@line 5911
        __THREW__ = 0; //@line 5912
        invoke_viii(16, $239 | 0, 2856, 240); //@line 5913
        __THREW__ = 0; //@line 5914
        $243 = ___cxa_find_matching_catch_2() | 0; //@line 5915
        $eh$lpad$body$index3Z2D = tempRet0; //@line 5917
        $eh$lpad$body$indexZ2D = $243; //@line 5917
        break;
       }
      } else if ((label | 0) == 75) {
       $276 = ___cxa_find_matching_catch_2() | 0; //@line 5922
       $eh$lpad$body$index3Z2D = tempRet0; //@line 5924
       $eh$lpad$body$indexZ2D = $276; //@line 5924
      }
     } while (0);
     $$025 = $eh$lpad$body$index3Z2D; //@line 5927
     $$026 = $eh$lpad$body$indexZ2D; //@line 5927
     break L86;
    }
   } while (0);
   $$0 = HEAP32[$4 >> 2] | 0; //@line 5932
   while (1) {
    $279 = HEAP32[$6 >> 2] | 0; //@line 5934
    if (($$0 | 0) == ($279 | 0)) {
     break;
    }
    $300 = $$0 + -4 | 0; //@line 5939
    __THREW__ = 0; //@line 5940
    invoke_vii(124, $2 | 0, $300 | 0); //@line 5941
    $301 = __THREW__; //@line 5942
    __THREW__ = 0; //@line 5942
    if ($301 & 1) {
     label = 85; //@line 5945
     break;
    } else {
     $$0 = $300; //@line 5948
    }
   }
   if ((label | 0) == 85) {
    $303 = ___cxa_find_matching_catch_2() | 0; //@line 5952
    $$025 = tempRet0; //@line 5954
    $$026 = $303; //@line 5954
    break;
   }
   $281 = $279; //@line 5957
   $282 = HEAP32[$0 >> 2] | 0; //@line 5958
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 5960
   HEAP32[$2 >> 2] = $282; //@line 5961
   HEAP32[$6 >> 2] = HEAP32[$190 >> 2]; //@line 5963
   HEAP32[$190 >> 2] = $281; //@line 5964
   $285 = HEAP32[$4 >> 2] | 0; //@line 5965
   HEAP32[$4 >> 2] = HEAP32[$189 >> 2]; //@line 5967
   HEAP32[$189 >> 2] = $285; //@line 5968
   $287 = HEAP32[$83 >> 2] | 0; //@line 5969
   HEAP32[$83 >> 2] = HEAP32[$192 >> 2]; //@line 5971
   HEAP32[$192 >> 2] = $287; //@line 5972
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + (Math_imul($$sroa$speculated85, -56) | 0); //@line 5976
   $292 = $285; //@line 5977
   if (($$0 | 0) != ($292 | 0)) {
    HEAP32[$189 >> 2] = $292 + (~(($292 + -4 - $281 | 0) >>> 2) << 2); //@line 5986
   }
   if ($282 | 0) {
    __ZdlPv($282); //@line 5991
   }
   STACKTOP = sp; //@line 5993
   return;
  } else if ((label | 0) == 57) {
   $201 = ___cxa_find_matching_catch_3(0) | 0; //@line 5996
   ___cxa_begin_catch($201 | 0) | 0; //@line 5998
   $203 = HEAP32[$190 >> 2] | 0; //@line 5999
   if (($203 | 0) != (HEAP32[$189 >> 2] | 0)) {
    $$024129 = $203; //@line 6003
    do {
     __ZdlPv(HEAP32[$$024129 >> 2] | 0); //@line 6006
     $$024129 = $$024129 + 4 | 0; //@line 6007
    } while (($$024129 | 0) != (HEAP32[$189 >> 2] | 0));
   }
   __THREW__ = 0; //@line 6017
   invoke_v(2); //@line 6018
   __THREW__ = 0; //@line 6019
   $207 = ___cxa_find_matching_catch_2() | 0; //@line 6020
   $208 = tempRet0; //@line 6021
   __THREW__ = 0; //@line 6022
   invoke_v(3); //@line 6023
   $209 = __THREW__; //@line 6024
   __THREW__ = 0; //@line 6024
   if ($209 & 1) {
    $315 = ___cxa_find_matching_catch_3(0) | 0; //@line 6027
    ___clang_call_terminate($315); //@line 6029
   } else {
    $$025 = $208; //@line 6032
    $$026 = $207; //@line 6032
   }
  }
 } while (0);
 $305 = HEAP32[$190 >> 2] | 0; //@line 6036
 $306 = HEAP32[$189 >> 2] | 0; //@line 6037
 if (($306 | 0) != ($305 | 0)) {
  HEAP32[$189 >> 2] = $306 + (~(($306 + -4 - $305 | 0) >>> 2) << 2); //@line 6047
 }
 $313 = HEAP32[$2 >> 2] | 0; //@line 6049
 if (!$313) {
  ___resumeException($$026 | 0); //@line 6052
 }
 __ZdlPv($313); //@line 6055
 ___resumeException($$026 | 0); //@line 6056
}
function __ZN3FFI13loadMutateFFIENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i35 = 0, $$01361 = 0, $$015 = 0, $$01760 = 0, $$03$i = 0, $$03$i34 = 0, $$114 = 0, $$118 = 0, $$21962 = 0, $$263 = 0, $$3 = 0, $$320 = 0, $$4 = 0, $$421 = 0, $100 = 0, $109 = 0, $11 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $133 = 0, $134 = 0, $14 = 0, $143 = 0, $145 = 0, $147 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $158 = 0, $159 = 0, $161 = 0, $162 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $176 = 0, $177 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $191 = 0, $192 = 0, $194 = 0, $197 = 0, $199 = 0, $201 = 0, $202 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $89 = 0, $90 = 0, $92 = 0, $95 = 0, $97 = 0, $99 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$i32$index12Z2D = 0, $eh$lpad$body$i32$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body58$index17Z2D = 0, $eh$lpad$body58$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24471
 STACKTOP = STACKTOP + 288 | 0; //@line 24472
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 24472
 $4 = sp + 272 | 0; //@line 24473
 $5 = sp + 136 | 0; //@line 24474
 $6 = sp; //@line 24475
 $7 = $2 + 11 | 0; //@line 24476
 if ((HEAP8[$7 >> 0] | 0) < 0) {
  $11 = HEAP32[$2 >> 2] | 0; //@line 24481
 } else {
  $11 = $2; //@line 24483
 }
 $12 = _dlopen($11 | 0, 2) | 0; //@line 24485
 if (!$12) {
  $14 = $6 + 56 | 0; //@line 24488
  $15 = $6 + 4 | 0; //@line 24489
  HEAP32[$6 >> 2] = 796; //@line 24490
  HEAP32[$14 >> 2] = 816; //@line 24491
  __THREW__ = 0; //@line 24493
  invoke_vii(110, $6 + 56 | 0, $15 | 0); //@line 24494
  $17 = __THREW__; //@line 24495
  __THREW__ = 0; //@line 24495
  if ($17 & 1) {
   $41 = ___cxa_find_matching_catch_2() | 0; //@line 24498
   $$0$i = tempRet0; //@line 24500
   $$03$i = $41; //@line 24500
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($14); //@line 24501
   ___resumeException($$03$i | 0); //@line 24502
  }
  HEAP32[$6 + 128 >> 2] = 0; //@line 24506
  HEAP32[$6 + 132 >> 2] = -1; //@line 24508
  HEAP32[$6 >> 2] = 2980; //@line 24509
  HEAP32[$14 >> 2] = 3e3; //@line 24510
  __THREW__ = 0; //@line 24511
  invoke_vi(253, $15 | 0); //@line 24512
  $21 = __THREW__; //@line 24513
  __THREW__ = 0; //@line 24513
  do {
   if ($21 & 1) {
    $43 = ___cxa_find_matching_catch_2() | 0; //@line 24517
    $eh$lpad$body$i$index2Z2D = tempRet0; //@line 24519
    $eh$lpad$body$i$indexZ2D = $43; //@line 24519
   } else {
    HEAP32[$15 >> 2] = 3032; //@line 24521
    $23 = $6 + 36 | 0; //@line 24522
    $24 = $6 + 52 | 0; //@line 24523
    HEAP32[$23 >> 2] = 0; //@line 24524
    HEAP32[$23 + 4 >> 2] = 0; //@line 24524
    HEAP32[$23 + 8 >> 2] = 0; //@line 24524
    HEAP32[$23 + 12 >> 2] = 0; //@line 24524
    HEAP32[$24 >> 2] = 16; //@line 24525
    HEAP32[$4 >> 2] = 0; //@line 24526
    HEAP32[$4 + 4 >> 2] = 0; //@line 24526
    HEAP32[$4 + 8 >> 2] = 0; //@line 24526
    __THREW__ = 0; //@line 24527
    invoke_vii(111, $15 | 0, $4 | 0); //@line 24528
    $25 = __THREW__; //@line 24529
    __THREW__ = 0; //@line 24529
    if ($25 & 1) {
     $31 = ___cxa_find_matching_catch_2() | 0; //@line 24532
     $32 = tempRet0; //@line 24533
     if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 24539
     }
     if ((HEAP8[$23 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$23 >> 2] | 0); //@line 24546
     }
     __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($15); //@line 24548
     $eh$lpad$body$i$index2Z2D = $32; //@line 24549
     $eh$lpad$body$i$indexZ2D = $31; //@line 24549
     break;
    }
    if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 24557
    }
    __THREW__ = 0; //@line 24559
    $45 = invoke_iiii(32, $6 | 0, 20807, 28) | 0; //@line 24560
    $46 = __THREW__; //@line 24561
    __THREW__ = 0; //@line 24561
    L26 : do {
     if ($46 & 1) {
      label = 33; //@line 24565
     } else {
      $48 = HEAP8[$7 >> 0] | 0; //@line 24567
      $49 = $48 << 24 >> 24 < 0; //@line 24568
      __THREW__ = 0; //@line 24575
      $56 = invoke_iiii(32, $45 | 0, ($49 ? HEAP32[$2 >> 2] | 0 : $2) | 0, ($49 ? HEAP32[$2 + 4 >> 2] | 0 : $48 & 255) | 0) | 0; //@line 24576
      $57 = __THREW__; //@line 24577
      __THREW__ = 0; //@line 24577
      if ($57 & 1) {
       label = 33; //@line 24580
      } else {
       __THREW__ = 0; //@line 24582
       $59 = invoke_iiii(32, $56 | 0, 20836, 1) | 0; //@line 24583
       $60 = __THREW__; //@line 24584
       __THREW__ = 0; //@line 24584
       if ($60 & 1) {
        label = 33; //@line 24587
       } else {
        __THREW__ = 0; //@line 24593
        invoke_vii(132, $5 | 0, $59 + (HEAP32[(HEAP32[$59 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 24594
        $66 = __THREW__; //@line 24595
        __THREW__ = 0; //@line 24595
        if ($66 & 1) {
         label = 33; //@line 24598
        } else {
         __THREW__ = 0; //@line 24600
         $68 = invoke_iii(63, $5 | 0, 35512) | 0; //@line 24601
         $69 = __THREW__; //@line 24602
         __THREW__ = 0; //@line 24602
         if (!($69 & 1)) {
          __THREW__ = 0; //@line 24608
          $74 = invoke_iii(HEAP32[(HEAP32[$68 >> 2] | 0) + 28 >> 2] | 0, $68 | 0, 10) | 0; //@line 24609
          $75 = __THREW__; //@line 24610
          __THREW__ = 0; //@line 24610
          if (!($75 & 1)) {
           __ZNSt3__26localeD2Ev($5); //@line 24613
           __THREW__ = 0; //@line 24614
           invoke_iii(68, $59 | 0, $74 | 0) | 0; //@line 24615
           $79 = __THREW__; //@line 24616
           __THREW__ = 0; //@line 24616
           if ($79 & 1) {
            label = 33; //@line 24619
            break;
           }
           __THREW__ = 0; //@line 24622
           invoke_ii(146, $59 | 0) | 0; //@line 24623
           $81 = __THREW__; //@line 24624
           __THREW__ = 0; //@line 24624
           if ($81 & 1) {
            label = 33; //@line 24627
            break;
           }
           __THREW__ = 0; //@line 24630
           $83 = invoke_i(1) | 0; //@line 24631
           $84 = __THREW__; //@line 24632
           __THREW__ = 0; //@line 24632
           if ($84 & 1) {
            label = 33; //@line 24635
            break;
           }
           $86 = _strlen($83) | 0; //@line 24638
           __THREW__ = 0; //@line 24639
           invoke_iiii(32, $6 | 0, $83 | 0, $86 | 0) | 0; //@line 24640
           $87 = __THREW__; //@line 24641
           __THREW__ = 0; //@line 24641
           if ($87 & 1) {
            label = 33; //@line 24644
            break;
           }
           $89 = ___cxa_allocate_exception(8) | 0; //@line 24647
           __THREW__ = 0; //@line 24648
           invoke_vii(114, $4 | 0, $15 | 0); //@line 24649
           $90 = __THREW__; //@line 24650
           __THREW__ = 0; //@line 24650
           do {
            if ($90 & 1) {
             $97 = ___cxa_find_matching_catch_2() | 0; //@line 24654
             $$01361 = $97; //@line 24656
             $$01760 = tempRet0; //@line 24656
            } else {
             __THREW__ = 0; //@line 24658
             invoke_vii(127, $89 | 0, $4 | 0); //@line 24659
             $92 = __THREW__; //@line 24660
             __THREW__ = 0; //@line 24660
             if ($92 & 1) {
              $$015 = 1; //@line 24663
             } else {
              __THREW__ = 0; //@line 24665
              invoke_viii(16, $89 | 0, 2824, 242); //@line 24666
              __THREW__ = 0; //@line 24667
              $$015 = 0; //@line 24668
             }
             $99 = ___cxa_find_matching_catch_2() | 0; //@line 24670
             $100 = tempRet0; //@line 24671
             if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
              __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 24677
              if ($$015) {
               $$01361 = $99; //@line 24679
               $$01760 = $100; //@line 24679
               break;
              } else {
               $$114 = $99; //@line 24682
               $$118 = $100; //@line 24682
               break L26;
              }
             } else {
              if ($$015) {
               $$01361 = $99; //@line 24687
               $$01760 = $100; //@line 24687
               break;
              } else {
               $$114 = $99; //@line 24690
               $$118 = $100; //@line 24690
               break L26;
              }
             }
            }
           } while (0);
           ___cxa_free_exception($89 | 0); //@line 24696
           $$114 = $$01361; //@line 24697
           $$118 = $$01760; //@line 24697
           break;
          }
         }
         $77 = ___cxa_find_matching_catch_2() | 0; //@line 24701
         $78 = tempRet0; //@line 24702
         __ZNSt3__26localeD2Ev($5); //@line 24703
         $eh$lpad$body$index7Z2D = $78; //@line 24704
         $eh$lpad$body$indexZ2D = $77; //@line 24704
         label = 34; //@line 24705
        }
       }
      }
     }
    } while (0);
    if ((label | 0) == 33) {
     $95 = ___cxa_find_matching_catch_2() | 0; //@line 24712
     $eh$lpad$body$index7Z2D = tempRet0; //@line 24714
     $eh$lpad$body$indexZ2D = $95; //@line 24714
     label = 34; //@line 24715
    }
    if ((label | 0) == 34) {
     $$114 = $eh$lpad$body$indexZ2D; //@line 24718
     $$118 = $eh$lpad$body$index7Z2D; //@line 24718
    }
    HEAP32[$6 >> 2] = 2980; //@line 24720
    HEAP32[$14 >> 2] = 3e3; //@line 24721
    HEAP32[$15 >> 2] = 3032; //@line 24722
    if ((HEAP8[$23 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$23 >> 2] | 0); //@line 24728
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($15); //@line 24730
    __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($6, 3012); //@line 24731
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($14); //@line 24732
    $$4 = $$114; //@line 24733
    $$421 = $$118; //@line 24733
    ___resumeException($$4 | 0); //@line 24734
   }
  } while (0);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($6, 3012); //@line 24738
  $$0$i = $eh$lpad$body$i$index2Z2D; //@line 24739
  $$03$i = $eh$lpad$body$i$indexZ2D; //@line 24739
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($14); //@line 24740
  ___resumeException($$03$i | 0); //@line 24741
 }
 $109 = $3 + 11 | 0; //@line 24744
 if ((HEAP8[$109 >> 0] | 0) < 0) {
  $113 = HEAP32[$3 >> 2] | 0; //@line 24749
 } else {
  $113 = $3; //@line 24751
 }
 $114 = _dlsym($12 | 0, $113 | 0) | 0; //@line 24753
 if ($114 | 0) {
  HEAP32[(__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEEixERSG_($0, $1) | 0) >> 2] = $114; //@line 24757
  STACKTOP = sp; //@line 24758
  return;
 }
 $116 = $5 + 56 | 0; //@line 24760
 $117 = $5 + 4 | 0; //@line 24761
 HEAP32[$5 >> 2] = 796; //@line 24762
 HEAP32[$116 >> 2] = 816; //@line 24763
 __THREW__ = 0; //@line 24765
 invoke_vii(110, $5 + 56 | 0, $117 | 0); //@line 24766
 $119 = __THREW__; //@line 24767
 __THREW__ = 0; //@line 24767
 if ($119 & 1) {
  $143 = ___cxa_find_matching_catch_2() | 0; //@line 24770
  $$0$i35 = tempRet0; //@line 24772
  $$03$i34 = $143; //@line 24772
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($116); //@line 24773
  ___resumeException($$03$i34 | 0); //@line 24774
 }
 HEAP32[$5 + 128 >> 2] = 0; //@line 24778
 HEAP32[$5 + 132 >> 2] = -1; //@line 24780
 HEAP32[$5 >> 2] = 2980; //@line 24781
 HEAP32[$116 >> 2] = 3e3; //@line 24782
 __THREW__ = 0; //@line 24783
 invoke_vi(253, $117 | 0); //@line 24784
 $123 = __THREW__; //@line 24785
 __THREW__ = 0; //@line 24785
 do {
  if ($123 & 1) {
   $145 = ___cxa_find_matching_catch_2() | 0; //@line 24789
   $eh$lpad$body$i32$index12Z2D = tempRet0; //@line 24791
   $eh$lpad$body$i32$indexZ2D = $145; //@line 24791
  } else {
   HEAP32[$117 >> 2] = 3032; //@line 24793
   $125 = $5 + 36 | 0; //@line 24794
   $126 = $5 + 52 | 0; //@line 24795
   HEAP32[$125 >> 2] = 0; //@line 24796
   HEAP32[$125 + 4 >> 2] = 0; //@line 24796
   HEAP32[$125 + 8 >> 2] = 0; //@line 24796
   HEAP32[$125 + 12 >> 2] = 0; //@line 24796
   HEAP32[$126 >> 2] = 16; //@line 24797
   HEAP32[$4 >> 2] = 0; //@line 24798
   HEAP32[$4 + 4 >> 2] = 0; //@line 24798
   HEAP32[$4 + 8 >> 2] = 0; //@line 24798
   __THREW__ = 0; //@line 24799
   invoke_vii(111, $117 | 0, $4 | 0); //@line 24800
   $127 = __THREW__; //@line 24801
   __THREW__ = 0; //@line 24801
   if ($127 & 1) {
    $133 = ___cxa_find_matching_catch_2() | 0; //@line 24804
    $134 = tempRet0; //@line 24805
    if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 24811
    }
    if ((HEAP8[$125 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$125 >> 2] | 0); //@line 24818
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($117); //@line 24820
    $eh$lpad$body$i32$index12Z2D = $134; //@line 24821
    $eh$lpad$body$i32$indexZ2D = $133; //@line 24821
    break;
   }
   if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 24829
   }
   __THREW__ = 0; //@line 24831
   $147 = invoke_iiii(32, $5 | 0, 20838, 29) | 0; //@line 24832
   $148 = __THREW__; //@line 24833
   __THREW__ = 0; //@line 24833
   L87 : do {
    if ($148 & 1) {
     label = 75; //@line 24837
    } else {
     $150 = HEAP8[$109 >> 0] | 0; //@line 24839
     $151 = $150 << 24 >> 24 < 0; //@line 24840
     __THREW__ = 0; //@line 24847
     $158 = invoke_iiii(32, $147 | 0, ($151 ? HEAP32[$3 >> 2] | 0 : $3) | 0, ($151 ? HEAP32[$3 + 4 >> 2] | 0 : $150 & 255) | 0) | 0; //@line 24848
     $159 = __THREW__; //@line 24849
     __THREW__ = 0; //@line 24849
     if ($159 & 1) {
      label = 75; //@line 24852
     } else {
      __THREW__ = 0; //@line 24854
      $161 = invoke_iiii(32, $158 | 0, 20836, 1) | 0; //@line 24855
      $162 = __THREW__; //@line 24856
      __THREW__ = 0; //@line 24856
      if ($162 & 1) {
       label = 75; //@line 24859
      } else {
       __THREW__ = 0; //@line 24865
       invoke_vii(132, $4 | 0, $161 + (HEAP32[(HEAP32[$161 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 24866
       $168 = __THREW__; //@line 24867
       __THREW__ = 0; //@line 24867
       if ($168 & 1) {
        label = 75; //@line 24870
       } else {
        __THREW__ = 0; //@line 24872
        $170 = invoke_iii(63, $4 | 0, 35512) | 0; //@line 24873
        $171 = __THREW__; //@line 24874
        __THREW__ = 0; //@line 24874
        if (!($171 & 1)) {
         __THREW__ = 0; //@line 24880
         $176 = invoke_iii(HEAP32[(HEAP32[$170 >> 2] | 0) + 28 >> 2] | 0, $170 | 0, 10) | 0; //@line 24881
         $177 = __THREW__; //@line 24882
         __THREW__ = 0; //@line 24882
         if (!($177 & 1)) {
          __ZNSt3__26localeD2Ev($4); //@line 24885
          __THREW__ = 0; //@line 24886
          invoke_iii(68, $161 | 0, $176 | 0) | 0; //@line 24887
          $181 = __THREW__; //@line 24888
          __THREW__ = 0; //@line 24888
          if ($181 & 1) {
           label = 75; //@line 24891
           break;
          }
          __THREW__ = 0; //@line 24894
          invoke_ii(146, $161 | 0) | 0; //@line 24895
          $183 = __THREW__; //@line 24896
          __THREW__ = 0; //@line 24896
          if ($183 & 1) {
           label = 75; //@line 24899
           break;
          }
          __THREW__ = 0; //@line 24902
          $185 = invoke_i(1) | 0; //@line 24903
          $186 = __THREW__; //@line 24904
          __THREW__ = 0; //@line 24904
          if ($186 & 1) {
           label = 75; //@line 24907
           break;
          }
          $188 = _strlen($185) | 0; //@line 24910
          __THREW__ = 0; //@line 24911
          invoke_iiii(32, $5 | 0, $185 | 0, $188 | 0) | 0; //@line 24912
          $189 = __THREW__; //@line 24913
          __THREW__ = 0; //@line 24913
          if ($189 & 1) {
           label = 75; //@line 24916
           break;
          }
          $191 = ___cxa_allocate_exception(8) | 0; //@line 24919
          __THREW__ = 0; //@line 24920
          invoke_vii(114, $4 | 0, $117 | 0); //@line 24921
          $192 = __THREW__; //@line 24922
          __THREW__ = 0; //@line 24922
          do {
           if ($192 & 1) {
            $199 = ___cxa_find_matching_catch_2() | 0; //@line 24926
            $$21962 = tempRet0; //@line 24928
            $$263 = $199; //@line 24928
           } else {
            __THREW__ = 0; //@line 24930
            invoke_vii(127, $191 | 0, $4 | 0); //@line 24931
            $194 = __THREW__; //@line 24932
            __THREW__ = 0; //@line 24932
            if ($194 & 1) {
             $$0 = 1; //@line 24935
            } else {
             __THREW__ = 0; //@line 24937
             invoke_viii(16, $191 | 0, 2824, 242); //@line 24938
             __THREW__ = 0; //@line 24939
             $$0 = 0; //@line 24940
            }
            $201 = ___cxa_find_matching_catch_2() | 0; //@line 24942
            $202 = tempRet0; //@line 24943
            if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 24949
             if ($$0) {
              $$21962 = $202; //@line 24951
              $$263 = $201; //@line 24951
              break;
             } else {
              $$3 = $201; //@line 24954
              $$320 = $202; //@line 24954
              break L87;
             }
            } else {
             if ($$0) {
              $$21962 = $202; //@line 24959
              $$263 = $201; //@line 24959
              break;
             } else {
              $$3 = $201; //@line 24962
              $$320 = $202; //@line 24962
              break L87;
             }
            }
           }
          } while (0);
          ___cxa_free_exception($191 | 0); //@line 24968
          $$3 = $$263; //@line 24969
          $$320 = $$21962; //@line 24969
          break;
         }
        }
        $179 = ___cxa_find_matching_catch_2() | 0; //@line 24973
        $180 = tempRet0; //@line 24974
        __ZNSt3__26localeD2Ev($4); //@line 24975
        $eh$lpad$body58$index17Z2D = $180; //@line 24976
        $eh$lpad$body58$indexZ2D = $179; //@line 24976
        label = 76; //@line 24977
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 75) {
    $197 = ___cxa_find_matching_catch_2() | 0; //@line 24984
    $eh$lpad$body58$index17Z2D = tempRet0; //@line 24986
    $eh$lpad$body58$indexZ2D = $197; //@line 24986
    label = 76; //@line 24987
   }
   if ((label | 0) == 76) {
    $$3 = $eh$lpad$body58$indexZ2D; //@line 24990
    $$320 = $eh$lpad$body58$index17Z2D; //@line 24990
   }
   HEAP32[$5 >> 2] = 2980; //@line 24992
   HEAP32[$116 >> 2] = 3e3; //@line 24993
   HEAP32[$117 >> 2] = 3032; //@line 24994
   if ((HEAP8[$125 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$125 >> 2] | 0); //@line 25000
   }
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($117); //@line 25002
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($5, 3012); //@line 25003
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($116); //@line 25004
   $$4 = $$3; //@line 25005
   $$421 = $$320; //@line 25005
   ___resumeException($$4 | 0); //@line 25006
  }
 } while (0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($5, 3012); //@line 25010
 $$0$i35 = $eh$lpad$body$i32$index12Z2D; //@line 25011
 $$03$i34 = $eh$lpad$body$i32$indexZ2D; //@line 25011
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($116); //@line 25012
 ___resumeException($$03$i34 | 0); //@line 25013
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$05$i$i$i = 0, $$1$i$i$i = 0, $$16$i$i$i = 0, $$byval_copy7 = 0, $$val = 0, $100 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $130 = 0, $132 = 0, $133 = 0, $138 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $165 = 0, $170 = 0, $171 = 0, $172 = 0, $177 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $192 = 0, $193 = 0, $198 = 0, $199 = 0, $2 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $208 = 0, $209 = 0, $210 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $228 = 0, $23 = 0, $230 = 0, $231 = 0, $236 = 0, $24 = 0, $241 = 0, $242 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $254 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24155
 STACKTOP = STACKTOP + 304 | 0; //@line 24156
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 24156
 $$byval_copy7 = sp + 289 | 0; //@line 24157
 $2 = sp + 288 | 0; //@line 24158
 $3 = sp + 216 | 0; //@line 24159
 $4 = sp + 144 | 0; //@line 24160
 $5 = sp + 72 | 0; //@line 24161
 $6 = sp; //@line 24162
 $$val = HEAP32[$1 >> 2] | 0; //@line 24163
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 24165
 __THREW__ = 0; //@line 24166
 $8 = invoke_ii(143, $$val | 0) | 0; //@line 24167
 $9 = __THREW__; //@line 24168
 __THREW__ = 0; //@line 24168
 if ($9 & 1) {
  label = 57; //@line 24171
 } else {
  __THREW__ = 0; //@line 24173
  invoke_vii(131, $4 | 0, $8 | 0); //@line 24174
  $11 = __THREW__; //@line 24175
  __THREW__ = 0; //@line 24175
  if ($11 & 1) {
   label = 57; //@line 24178
  } else {
   __THREW__ = 0; //@line 24180
   invoke_vii(120, $5 | 0, $4 | 0); //@line 24181
   $13 = __THREW__; //@line 24182
   __THREW__ = 0; //@line 24182
   do {
    if ($13 & 1) {
     label = 58; //@line 24186
    } else {
     __THREW__ = 0; //@line 24188
     $15 = invoke_ii(144, $5 | 0) | 0; //@line 24189
     $16 = __THREW__; //@line 24190
     __THREW__ = 0; //@line 24190
     if ($16 & 1) {
      $142 = ___cxa_find_matching_catch_2() | 0; //@line 24193
      $143 = tempRet0; //@line 24194
      $144 = $5 + 52 | 0; //@line 24195
      if ((HEAP8[$144 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$144 >> 2] | 0); //@line 24201
      }
      $149 = $5 + 40 | 0; //@line 24203
      $150 = HEAP32[$149 >> 2] | 0; //@line 24204
      if ($150 | 0) {
       $152 = $5 + 44 | 0; //@line 24207
       $153 = HEAP32[$152 >> 2] | 0; //@line 24208
       do {
        if (($153 | 0) == ($150 | 0)) {
         $164 = $150; //@line 24212
        } else {
         $155 = $5 + 48 | 0; //@line 24214
         $157 = $153; //@line 24215
         while (1) {
          $156 = $157 + -72 | 0; //@line 24217
          HEAP32[$152 >> 2] = $156; //@line 24218
          __THREW__ = 0; //@line 24219
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24220
          invoke_viii(13, $$byval_copy7 | 0, $155 | 0, $156 | 0); //@line 24221
          $158 = __THREW__; //@line 24222
          __THREW__ = 0; //@line 24222
          if ($158 & 1) {
           label = 66; //@line 24225
           break;
          }
          $157 = HEAP32[$152 >> 2] | 0; //@line 24228
          if (($157 | 0) == ($150 | 0)) {
           label = 67; //@line 24231
           break;
          }
         }
         if ((label | 0) == 66) {
          $162 = ___cxa_find_matching_catch_3(0) | 0; //@line 24238
          ___clang_call_terminate($162); //@line 24240
         } else if ((label | 0) == 67) {
          $164 = HEAP32[$149 >> 2] | 0; //@line 24245
          break;
         }
        }
       } while (0);
       __ZdlPv($164); //@line 24250
      }
      $165 = $5 + 4 | 0; //@line 24252
      if ((HEAP8[$165 + 11 >> 0] | 0) >= 0) {
       $$0$i$i$i = $143; //@line 24257
       $$05$i$i$i = $142; //@line 24257
       break;
      }
      __ZdlPv(HEAP32[$165 >> 2] | 0); //@line 24261
      $$0$i$i$i = $143; //@line 24262
      $$05$i$i$i = $142; //@line 24262
      break;
     }
     $18 = $5 + 52 | 0; //@line 24265
     if ((HEAP8[$18 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 24271
     }
     $23 = $5 + 40 | 0; //@line 24273
     $24 = HEAP32[$23 >> 2] | 0; //@line 24274
     if ($24 | 0) {
      $26 = $5 + 44 | 0; //@line 24277
      $27 = HEAP32[$26 >> 2] | 0; //@line 24278
      do {
       if (($27 | 0) == ($24 | 0)) {
        $38 = $24; //@line 24282
       } else {
        $29 = $5 + 48 | 0; //@line 24284
        $31 = $27; //@line 24285
        while (1) {
         $30 = $31 + -72 | 0; //@line 24287
         HEAP32[$26 >> 2] = $30; //@line 24288
         __THREW__ = 0; //@line 24289
         HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24290
         invoke_viii(13, $$byval_copy7 | 0, $29 | 0, $30 | 0); //@line 24291
         $32 = __THREW__; //@line 24292
         __THREW__ = 0; //@line 24292
         if ($32 & 1) {
          label = 12; //@line 24295
          break;
         }
         $31 = HEAP32[$26 >> 2] | 0; //@line 24298
         if (($31 | 0) == ($24 | 0)) {
          label = 13; //@line 24301
          break;
         }
        }
        if ((label | 0) == 12) {
         $36 = ___cxa_find_matching_catch_3(0) | 0; //@line 24308
         ___clang_call_terminate($36); //@line 24310
        } else if ((label | 0) == 13) {
         $38 = HEAP32[$23 >> 2] | 0; //@line 24315
         break;
        }
       }
      } while (0);
      __ZdlPv($38); //@line 24320
     }
     $39 = $5 + 4 | 0; //@line 24322
     if ((HEAP8[$39 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$39 >> 2] | 0); //@line 24328
     }
     if (!$15) {
      $204 = ___cxa_allocate_exception(8) | 0; //@line 24331
      __THREW__ = 0; //@line 24332
      invoke_vii(125, $204 | 0, 15450); //@line 24333
      $205 = __THREW__; //@line 24334
      __THREW__ = 0; //@line 24334
      if ($205 & 1) {
       $208 = ___cxa_find_matching_catch_2() | 0; //@line 24337
       $209 = tempRet0; //@line 24338
       ___cxa_free_exception($204 | 0); //@line 24339
       $$0$i$i$i = $209; //@line 24340
       $$05$i$i$i = $208; //@line 24340
       break;
      } else {
       __THREW__ = 0; //@line 24343
       invoke_viii(16, $204 | 0, 2824, 242); //@line 24344
       __THREW__ = 0; //@line 24345
       label = 58; //@line 24346
       break;
      }
     }
     $45 = $4 + 24 | 0; //@line 24351
     $47 = HEAP32[$45 >> 2] | 0; //@line 24353
     $50 = HEAP32[$45 + 4 >> 2] | 0; //@line 24356
     if (!(($50 | 0) > 0 | ($50 | 0) == 0 & $47 >>> 0 > 0)) {
      $198 = ___cxa_allocate_exception(8) | 0; //@line 24363
      __THREW__ = 0; //@line 24364
      invoke_vii(125, $198 | 0, 15400); //@line 24365
      $199 = __THREW__; //@line 24366
      __THREW__ = 0; //@line 24366
      if ($199 & 1) {
       $202 = ___cxa_find_matching_catch_2() | 0; //@line 24369
       $203 = tempRet0; //@line 24370
       ___cxa_free_exception($198 | 0); //@line 24371
       $$0$i$i$i = $203; //@line 24372
       $$05$i$i$i = $202; //@line 24372
       break;
      } else {
       __THREW__ = 0; //@line 24375
       invoke_viii(16, $198 | 0, 2824, 242); //@line 24376
       __THREW__ = 0; //@line 24377
       label = 58; //@line 24378
       break;
      }
     }
     __THREW__ = 0; //@line 24382
     invoke_vii(120, $6 | 0, $3 | 0); //@line 24383
     $56 = __THREW__; //@line 24384
     __THREW__ = 0; //@line 24384
     if ($56 & 1) {
      label = 58; //@line 24387
     } else {
      __THREW__ = 0; //@line 24389
      invoke_viiii(16, $$val | 0, $47 | 0, $50 | 0, $6 | 0); //@line 24390
      $58 = __THREW__; //@line 24391
      __THREW__ = 0; //@line 24391
      if ($58 & 1) {
       $170 = ___cxa_find_matching_catch_2() | 0; //@line 24394
       $171 = tempRet0; //@line 24395
       $172 = $6 + 52 | 0; //@line 24396
       if ((HEAP8[$172 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$172 >> 2] | 0); //@line 24402
       }
       $177 = $6 + 40 | 0; //@line 24404
       $178 = HEAP32[$177 >> 2] | 0; //@line 24405
       if ($178 | 0) {
        $180 = $6 + 44 | 0; //@line 24408
        $181 = HEAP32[$180 >> 2] | 0; //@line 24409
        do {
         if (($181 | 0) == ($178 | 0)) {
          $192 = $178; //@line 24413
         } else {
          $183 = $6 + 48 | 0; //@line 24415
          $185 = $181; //@line 24416
          while (1) {
           $184 = $185 + -72 | 0; //@line 24418
           HEAP32[$180 >> 2] = $184; //@line 24419
           __THREW__ = 0; //@line 24420
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24421
           invoke_viii(13, $$byval_copy7 | 0, $183 | 0, $184 | 0); //@line 24422
           $186 = __THREW__; //@line 24423
           __THREW__ = 0; //@line 24423
           if ($186 & 1) {
            label = 78; //@line 24426
            break;
           }
           $185 = HEAP32[$180 >> 2] | 0; //@line 24429
           if (($185 | 0) == ($178 | 0)) {
            label = 79; //@line 24432
            break;
           }
          }
          if ((label | 0) == 78) {
           $190 = ___cxa_find_matching_catch_3(0) | 0; //@line 24439
           ___clang_call_terminate($190); //@line 24441
          } else if ((label | 0) == 79) {
           $192 = HEAP32[$177 >> 2] | 0; //@line 24446
           break;
          }
         }
        } while (0);
        __ZdlPv($192); //@line 24451
       }
       $193 = $6 + 4 | 0; //@line 24453
       if ((HEAP8[$193 + 11 >> 0] | 0) >= 0) {
        $$0$i$i$i = $171; //@line 24458
        $$05$i$i$i = $170; //@line 24458
        break;
       }
       __ZdlPv(HEAP32[$193 >> 2] | 0); //@line 24462
       $$0$i$i$i = $171; //@line 24463
       $$05$i$i$i = $170; //@line 24463
       break;
      }
      $60 = $6 + 52 | 0; //@line 24466
      if ((HEAP8[$60 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$60 >> 2] | 0); //@line 24472
      }
      $65 = $6 + 40 | 0; //@line 24474
      $66 = HEAP32[$65 >> 2] | 0; //@line 24475
      if ($66 | 0) {
       $68 = $6 + 44 | 0; //@line 24478
       $69 = HEAP32[$68 >> 2] | 0; //@line 24479
       do {
        if (($69 | 0) == ($66 | 0)) {
         $80 = $66; //@line 24483
        } else {
         $71 = $6 + 48 | 0; //@line 24485
         $73 = $69; //@line 24486
         while (1) {
          $72 = $73 + -72 | 0; //@line 24488
          HEAP32[$68 >> 2] = $72; //@line 24489
          __THREW__ = 0; //@line 24490
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24491
          invoke_viii(13, $$byval_copy7 | 0, $71 | 0, $72 | 0); //@line 24492
          $74 = __THREW__; //@line 24493
          __THREW__ = 0; //@line 24493
          if ($74 & 1) {
           label = 28; //@line 24496
           break;
          }
          $73 = HEAP32[$68 >> 2] | 0; //@line 24499
          if (($73 | 0) == ($66 | 0)) {
           label = 29; //@line 24502
           break;
          }
         }
         if ((label | 0) == 28) {
          $78 = ___cxa_find_matching_catch_3(0) | 0; //@line 24509
          ___clang_call_terminate($78); //@line 24511
         } else if ((label | 0) == 29) {
          $80 = HEAP32[$65 >> 2] | 0; //@line 24516
          break;
         }
        }
       } while (0);
       __ZdlPv($80); //@line 24521
      }
      $81 = $6 + 4 | 0; //@line 24523
      if ((HEAP8[$81 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$81 >> 2] | 0); //@line 24529
      }
      $86 = $4 + 52 | 0; //@line 24531
      if ((HEAP8[$86 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$86 >> 2] | 0); //@line 24537
      }
      $91 = $4 + 40 | 0; //@line 24539
      $92 = HEAP32[$91 >> 2] | 0; //@line 24540
      if ($92 | 0) {
       $94 = $4 + 44 | 0; //@line 24543
       $95 = HEAP32[$94 >> 2] | 0; //@line 24544
       do {
        if (($95 | 0) == ($92 | 0)) {
         $106 = $92; //@line 24548
        } else {
         $97 = $4 + 48 | 0; //@line 24550
         $99 = $95; //@line 24551
         while (1) {
          $98 = $99 + -72 | 0; //@line 24553
          HEAP32[$94 >> 2] = $98; //@line 24554
          __THREW__ = 0; //@line 24555
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24556
          invoke_viii(13, $$byval_copy7 | 0, $97 | 0, $98 | 0); //@line 24557
          $100 = __THREW__; //@line 24558
          __THREW__ = 0; //@line 24558
          if ($100 & 1) {
           label = 40; //@line 24561
           break;
          }
          $99 = HEAP32[$94 >> 2] | 0; //@line 24564
          if (($99 | 0) == ($92 | 0)) {
           label = 41; //@line 24567
           break;
          }
         }
         if ((label | 0) == 40) {
          $104 = ___cxa_find_matching_catch_3(0) | 0; //@line 24574
          ___clang_call_terminate($104); //@line 24576
         } else if ((label | 0) == 41) {
          $106 = HEAP32[$91 >> 2] | 0; //@line 24581
          break;
         }
        }
       } while (0);
       __ZdlPv($106); //@line 24586
      }
      $107 = $4 + 4 | 0; //@line 24588
      if ((HEAP8[$107 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$107 >> 2] | 0); //@line 24594
      }
      $112 = $3 + 52 | 0; //@line 24596
      if ((HEAP8[$112 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$112 >> 2] | 0); //@line 24602
      }
      $117 = $3 + 40 | 0; //@line 24604
      $118 = HEAP32[$117 >> 2] | 0; //@line 24605
      if ($118 | 0) {
       $120 = $3 + 44 | 0; //@line 24608
       $121 = HEAP32[$120 >> 2] | 0; //@line 24609
       do {
        if (($121 | 0) == ($118 | 0)) {
         $132 = $118; //@line 24613
        } else {
         $123 = $3 + 48 | 0; //@line 24615
         $125 = $121; //@line 24616
         while (1) {
          $124 = $125 + -72 | 0; //@line 24618
          HEAP32[$120 >> 2] = $124; //@line 24619
          __THREW__ = 0; //@line 24620
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24621
          invoke_viii(13, $$byval_copy7 | 0, $123 | 0, $124 | 0); //@line 24622
          $126 = __THREW__; //@line 24623
          __THREW__ = 0; //@line 24623
          if ($126 & 1) {
           label = 52; //@line 24626
           break;
          }
          $125 = HEAP32[$120 >> 2] | 0; //@line 24629
          if (($125 | 0) == ($118 | 0)) {
           label = 53; //@line 24632
           break;
          }
         }
         if ((label | 0) == 52) {
          $130 = ___cxa_find_matching_catch_3(0) | 0; //@line 24639
          ___clang_call_terminate($130); //@line 24641
         } else if ((label | 0) == 53) {
          $132 = HEAP32[$117 >> 2] | 0; //@line 24646
          break;
         }
        }
       } while (0);
       __ZdlPv($132); //@line 24651
      }
      $133 = $3 + 4 | 0; //@line 24653
      if ((HEAP8[$133 + 11 >> 0] | 0) >= 0) {
       STACKTOP = sp; //@line 24658
       return;
      }
      __ZdlPv(HEAP32[$133 >> 2] | 0); //@line 24661
      STACKTOP = sp; //@line 24662
      return;
     }
    }
   } while (0);
   if ((label | 0) == 58) {
    $140 = ___cxa_find_matching_catch_2() | 0; //@line 24667
    $$0$i$i$i = tempRet0; //@line 24669
    $$05$i$i$i = $140; //@line 24669
   }
   $210 = $4 + 52 | 0; //@line 24671
   if ((HEAP8[$210 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$210 >> 2] | 0); //@line 24677
   }
   $215 = $4 + 40 | 0; //@line 24679
   $216 = HEAP32[$215 >> 2] | 0; //@line 24680
   if ($216 | 0) {
    $218 = $4 + 44 | 0; //@line 24683
    $219 = HEAP32[$218 >> 2] | 0; //@line 24684
    do {
     if (($219 | 0) == ($216 | 0)) {
      $230 = $216; //@line 24688
     } else {
      $221 = $4 + 48 | 0; //@line 24690
      $223 = $219; //@line 24691
      while (1) {
       $222 = $223 + -72 | 0; //@line 24693
       HEAP32[$218 >> 2] = $222; //@line 24694
       __THREW__ = 0; //@line 24695
       HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24696
       invoke_viii(13, $$byval_copy7 | 0, $221 | 0, $222 | 0); //@line 24697
       $224 = __THREW__; //@line 24698
       __THREW__ = 0; //@line 24698
       if ($224 & 1) {
        label = 96; //@line 24701
        break;
       }
       $223 = HEAP32[$218 >> 2] | 0; //@line 24704
       if (($223 | 0) == ($216 | 0)) {
        label = 97; //@line 24707
        break;
       }
      }
      if ((label | 0) == 96) {
       $228 = ___cxa_find_matching_catch_3(0) | 0; //@line 24714
       ___clang_call_terminate($228); //@line 24716
      } else if ((label | 0) == 97) {
       $230 = HEAP32[$215 >> 2] | 0; //@line 24721
       break;
      }
     }
    } while (0);
    __ZdlPv($230); //@line 24726
   }
   $231 = $4 + 4 | 0; //@line 24728
   if ((HEAP8[$231 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$231 >> 2] | 0); //@line 24734
    $$1$i$i$i = $$0$i$i$i; //@line 24735
    $$16$i$i$i = $$05$i$i$i; //@line 24735
   } else {
    $$1$i$i$i = $$0$i$i$i; //@line 24737
    $$16$i$i$i = $$05$i$i$i; //@line 24737
   }
  }
 }
 if ((label | 0) == 57) {
  $138 = ___cxa_find_matching_catch_2() | 0; //@line 24742
  $$1$i$i$i = tempRet0; //@line 24744
  $$16$i$i$i = $138; //@line 24744
 }
 $236 = $3 + 52 | 0; //@line 24746
 if ((HEAP8[$236 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$236 >> 2] | 0); //@line 24752
 }
 $241 = $3 + 40 | 0; //@line 24754
 $242 = HEAP32[$241 >> 2] | 0; //@line 24755
 if ($242 | 0) {
  $244 = $3 + 44 | 0; //@line 24758
  $245 = HEAP32[$244 >> 2] | 0; //@line 24759
  do {
   if (($245 | 0) == ($242 | 0)) {
    $256 = $242; //@line 24763
   } else {
    $247 = $3 + 48 | 0; //@line 24765
    $249 = $245; //@line 24766
    while (1) {
     $248 = $249 + -72 | 0; //@line 24768
     HEAP32[$244 >> 2] = $248; //@line 24769
     __THREW__ = 0; //@line 24770
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24771
     invoke_viii(13, $$byval_copy7 | 0, $247 | 0, $248 | 0); //@line 24772
     $250 = __THREW__; //@line 24773
     __THREW__ = 0; //@line 24773
     if ($250 & 1) {
      label = 108; //@line 24776
      break;
     }
     $249 = HEAP32[$244 >> 2] | 0; //@line 24779
     if (($249 | 0) == ($242 | 0)) {
      label = 109; //@line 24782
      break;
     }
    }
    if ((label | 0) == 108) {
     $254 = ___cxa_find_matching_catch_3(0) | 0; //@line 24789
     ___clang_call_terminate($254); //@line 24791
    } else if ((label | 0) == 109) {
     $256 = HEAP32[$241 >> 2] | 0; //@line 24796
     break;
    }
   }
  } while (0);
  __ZdlPv($256); //@line 24801
 }
 $257 = $3 + 4 | 0; //@line 24803
 if ((HEAP8[$257 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$16$i$i$i | 0); //@line 24808
 }
 __ZdlPv(HEAP32[$257 >> 2] | 0); //@line 24812
 ___resumeException($$16$i$i$i | 0); //@line 24813
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$05$i$i$i = 0, $$byval_copy7 = 0, $$val = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $109 = 0, $11 = 0, $114 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $134 = 0, $135 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $160 = 0, $162 = 0, $163 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $188 = 0, $19 = 0, $190 = 0, $191 = 0, $196 = 0, $2 = 0, $201 = 0, $202 = 0, $204 = 0, $205 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $214 = 0, $216 = 0, $221 = 0, $226 = 0, $227 = 0, $229 = 0, $23 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $239 = 0, $24 = 0, $241 = 0, $242 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19539
 STACKTOP = STACKTOP + 304 | 0; //@line 19540
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 19540
 $$byval_copy7 = sp + 289 | 0; //@line 19541
 $2 = sp + 288 | 0; //@line 19542
 $3 = sp + 216 | 0; //@line 19543
 $4 = sp + 144 | 0; //@line 19544
 $5 = sp + 72 | 0; //@line 19545
 $6 = sp; //@line 19546
 $$val = HEAP32[$1 >> 2] | 0; //@line 19547
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 19549
 $8 = $4 + 4 | 0; //@line 19550
 HEAP32[$8 >> 2] = 0; //@line 19551
 HEAP32[$8 + 4 >> 2] = 0; //@line 19551
 HEAP32[$8 + 8 >> 2] = 0; //@line 19551
 $9 = $4 + 40 | 0; //@line 19552
 HEAP32[$9 >> 2] = 0; //@line 19553
 HEAP32[$9 + 4 >> 2] = 0; //@line 19553
 HEAP32[$9 + 8 >> 2] = 0; //@line 19553
 HEAP32[$9 + 12 >> 2] = 0; //@line 19553
 HEAP32[$9 + 16 >> 2] = 0; //@line 19553
 HEAP32[$9 + 20 >> 2] = 0; //@line 19553
 HEAP32[$4 >> 2] = 3; //@line 19554
 switch (HEAP32[$3 >> 2] | 0) {
 case 1:
  {
   __THREW__ = 0; //@line 19558
   invoke_iii(67, $8 | 0, 20037) | 0; //@line 19559
   $11 = __THREW__; //@line 19560
   __THREW__ = 0; //@line 19560
   if ($11 & 1) {
    label = 3; //@line 19563
   } else {
    label = 8; //@line 19565
   }
   break;
  }
 case 2:
  {
   __THREW__ = 0; //@line 19570
   invoke_iii(67, $8 | 0, 20051) | 0; //@line 19571
   $15 = __THREW__; //@line 19572
   __THREW__ = 0; //@line 19572
   if ($15 & 1) {
    label = 3; //@line 19575
   } else {
    label = 8; //@line 19577
   }
   break;
  }
 case 3:
  {
   __THREW__ = 0; //@line 19582
   invoke_iii(67, $8 | 0, 20067) | 0; //@line 19583
   $17 = __THREW__; //@line 19584
   __THREW__ = 0; //@line 19584
   if ($17 & 1) {
    label = 3; //@line 19587
   } else {
    label = 8; //@line 19589
   }
   break;
  }
 case 4:
  {
   __THREW__ = 0; //@line 19594
   invoke_iii(67, $8 | 0, 20083) | 0; //@line 19595
   $19 = __THREW__; //@line 19596
   __THREW__ = 0; //@line 19596
   if ($19 & 1) {
    label = 3; //@line 19599
   } else {
    label = 8; //@line 19601
   }
   break;
  }
 case 0:
  {
   __THREW__ = 0; //@line 19606
   invoke_iii(67, $8 | 0, 20100) | 0; //@line 19607
   $21 = __THREW__; //@line 19608
   __THREW__ = 0; //@line 19608
   if ($21 & 1) {
    label = 3; //@line 19611
   } else {
    label = 8; //@line 19613
   }
   break;
  }
 default:
  {
   label = 8; //@line 19618
  }
 }
 do {
  if ((label | 0) == 8) {
   __THREW__ = 0; //@line 19623
   $23 = invoke_ii(143, $$val | 0) | 0; //@line 19624
   $24 = __THREW__; //@line 19625
   __THREW__ = 0; //@line 19625
   if ($24 & 1) {
    label = 3; //@line 19628
   } else {
    __THREW__ = 0; //@line 19630
    invoke_vii(120, $5 | 0, $3 | 0); //@line 19631
    $26 = __THREW__; //@line 19632
    __THREW__ = 0; //@line 19632
    if ($26 & 1) {
     label = 3; //@line 19635
    } else {
     __THREW__ = 0; //@line 19637
     invoke_vii(128, $23 | 0, $5 | 0); //@line 19638
     $28 = __THREW__; //@line 19639
     __THREW__ = 0; //@line 19639
     if ($28 & 1) {
      $140 = ___cxa_find_matching_catch_2() | 0; //@line 19642
      $141 = tempRet0; //@line 19643
      $142 = $5 + 52 | 0; //@line 19644
      if ((HEAP8[$142 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$142 >> 2] | 0); //@line 19650
      }
      $147 = $5 + 40 | 0; //@line 19652
      $148 = HEAP32[$147 >> 2] | 0; //@line 19653
      if ($148 | 0) {
       $150 = $5 + 44 | 0; //@line 19656
       $151 = HEAP32[$150 >> 2] | 0; //@line 19657
       do {
        if (($151 | 0) == ($148 | 0)) {
         $162 = $148; //@line 19661
        } else {
         $153 = $5 + 48 | 0; //@line 19663
         $155 = $151; //@line 19664
         while (1) {
          $154 = $155 + -72 | 0; //@line 19666
          HEAP32[$150 >> 2] = $154; //@line 19667
          __THREW__ = 0; //@line 19668
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 19669
          invoke_viii(13, $$byval_copy7 | 0, $153 | 0, $154 | 0); //@line 19670
          $156 = __THREW__; //@line 19671
          __THREW__ = 0; //@line 19671
          if ($156 & 1) {
           label = 69; //@line 19674
           break;
          }
          $155 = HEAP32[$150 >> 2] | 0; //@line 19677
          if (($155 | 0) == ($148 | 0)) {
           label = 70; //@line 19680
           break;
          }
         }
         if ((label | 0) == 69) {
          $160 = ___cxa_find_matching_catch_3(0) | 0; //@line 19687
          ___clang_call_terminate($160); //@line 19689
         } else if ((label | 0) == 70) {
          $162 = HEAP32[$147 >> 2] | 0; //@line 19694
          break;
         }
        }
       } while (0);
       __ZdlPv($162); //@line 19699
      }
      $163 = $5 + 4 | 0; //@line 19701
      if ((HEAP8[$163 + 11 >> 0] | 0) >= 0) {
       $$0$i$i$i = $141; //@line 19706
       $$05$i$i$i = $140; //@line 19706
       break;
      }
      __ZdlPv(HEAP32[$163 >> 2] | 0); //@line 19710
      $$0$i$i$i = $141; //@line 19711
      $$05$i$i$i = $140; //@line 19711
      break;
     }
     $30 = $5 + 52 | 0; //@line 19714
     if ((HEAP8[$30 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 19720
     }
     $35 = $5 + 40 | 0; //@line 19722
     $36 = HEAP32[$35 >> 2] | 0; //@line 19723
     if ($36 | 0) {
      $38 = $5 + 44 | 0; //@line 19726
      $39 = HEAP32[$38 >> 2] | 0; //@line 19727
      do {
       if (($39 | 0) == ($36 | 0)) {
        $50 = $36; //@line 19731
       } else {
        $41 = $5 + 48 | 0; //@line 19733
        $43 = $39; //@line 19734
        while (1) {
         $42 = $43 + -72 | 0; //@line 19736
         HEAP32[$38 >> 2] = $42; //@line 19737
         __THREW__ = 0; //@line 19738
         HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 19739
         invoke_viii(13, $$byval_copy7 | 0, $41 | 0, $42 | 0); //@line 19740
         $44 = __THREW__; //@line 19741
         __THREW__ = 0; //@line 19741
         if ($44 & 1) {
          label = 18; //@line 19744
          break;
         }
         $43 = HEAP32[$38 >> 2] | 0; //@line 19747
         if (($43 | 0) == ($36 | 0)) {
          label = 19; //@line 19750
          break;
         }
        }
        if ((label | 0) == 18) {
         $48 = ___cxa_find_matching_catch_3(0) | 0; //@line 19757
         ___clang_call_terminate($48); //@line 19759
        } else if ((label | 0) == 19) {
         $50 = HEAP32[$35 >> 2] | 0; //@line 19764
         break;
        }
       }
      } while (0);
      __ZdlPv($50); //@line 19769
     }
     $51 = $5 + 4 | 0; //@line 19771
     if ((HEAP8[$51 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$51 >> 2] | 0); //@line 19777
     }
     __THREW__ = 0; //@line 19779
     $56 = invoke_ii(143, $$val | 0) | 0; //@line 19780
     $57 = __THREW__; //@line 19781
     __THREW__ = 0; //@line 19781
     if ($57 & 1) {
      label = 3; //@line 19784
     } else {
      __THREW__ = 0; //@line 19786
      invoke_vii(120, $6 | 0, $4 | 0); //@line 19787
      $59 = __THREW__; //@line 19788
      __THREW__ = 0; //@line 19788
      if ($59 & 1) {
       label = 3; //@line 19791
      } else {
       __THREW__ = 0; //@line 19793
       invoke_vii(128, $56 | 0, $6 | 0); //@line 19794
       $61 = __THREW__; //@line 19795
       __THREW__ = 0; //@line 19795
       if ($61 & 1) {
        $168 = ___cxa_find_matching_catch_2() | 0; //@line 19798
        $169 = tempRet0; //@line 19799
        $170 = $6 + 52 | 0; //@line 19800
        if ((HEAP8[$170 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$170 >> 2] | 0); //@line 19806
        }
        $175 = $6 + 40 | 0; //@line 19808
        $176 = HEAP32[$175 >> 2] | 0; //@line 19809
        if ($176 | 0) {
         $178 = $6 + 44 | 0; //@line 19812
         $179 = HEAP32[$178 >> 2] | 0; //@line 19813
         do {
          if (($179 | 0) == ($176 | 0)) {
           $190 = $176; //@line 19817
          } else {
           $181 = $6 + 48 | 0; //@line 19819
           $183 = $179; //@line 19820
           while (1) {
            $182 = $183 + -72 | 0; //@line 19822
            HEAP32[$178 >> 2] = $182; //@line 19823
            __THREW__ = 0; //@line 19824
            HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 19825
            invoke_viii(13, $$byval_copy7 | 0, $181 | 0, $182 | 0); //@line 19826
            $184 = __THREW__; //@line 19827
            __THREW__ = 0; //@line 19827
            if ($184 & 1) {
             label = 81; //@line 19830
             break;
            }
            $183 = HEAP32[$178 >> 2] | 0; //@line 19833
            if (($183 | 0) == ($176 | 0)) {
             label = 82; //@line 19836
             break;
            }
           }
           if ((label | 0) == 81) {
            $188 = ___cxa_find_matching_catch_3(0) | 0; //@line 19843
            ___clang_call_terminate($188); //@line 19845
           } else if ((label | 0) == 82) {
            $190 = HEAP32[$175 >> 2] | 0; //@line 19850
            break;
           }
          }
         } while (0);
         __ZdlPv($190); //@line 19855
        }
        $191 = $6 + 4 | 0; //@line 19857
        if ((HEAP8[$191 + 11 >> 0] | 0) >= 0) {
         $$0$i$i$i = $169; //@line 19862
         $$05$i$i$i = $168; //@line 19862
         break;
        }
        __ZdlPv(HEAP32[$191 >> 2] | 0); //@line 19866
        $$0$i$i$i = $169; //@line 19867
        $$05$i$i$i = $168; //@line 19867
        break;
       }
       $63 = $6 + 52 | 0; //@line 19870
       if ((HEAP8[$63 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$63 >> 2] | 0); //@line 19876
       }
       $68 = $6 + 40 | 0; //@line 19878
       $69 = HEAP32[$68 >> 2] | 0; //@line 19879
       if ($69 | 0) {
        $71 = $6 + 44 | 0; //@line 19882
        $72 = HEAP32[$71 >> 2] | 0; //@line 19883
        do {
         if (($72 | 0) == ($69 | 0)) {
          $83 = $69; //@line 19887
         } else {
          $74 = $6 + 48 | 0; //@line 19889
          $76 = $72; //@line 19890
          while (1) {
           $75 = $76 + -72 | 0; //@line 19892
           HEAP32[$71 >> 2] = $75; //@line 19893
           __THREW__ = 0; //@line 19894
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 19895
           invoke_viii(13, $$byval_copy7 | 0, $74 | 0, $75 | 0); //@line 19896
           $77 = __THREW__; //@line 19897
           __THREW__ = 0; //@line 19897
           if ($77 & 1) {
            label = 33; //@line 19900
            break;
           }
           $76 = HEAP32[$71 >> 2] | 0; //@line 19903
           if (($76 | 0) == ($69 | 0)) {
            label = 34; //@line 19906
            break;
           }
          }
          if ((label | 0) == 33) {
           $81 = ___cxa_find_matching_catch_3(0) | 0; //@line 19913
           ___clang_call_terminate($81); //@line 19915
          } else if ((label | 0) == 34) {
           $83 = HEAP32[$68 >> 2] | 0; //@line 19920
           break;
          }
         }
        } while (0);
        __ZdlPv($83); //@line 19925
       }
       $84 = $6 + 4 | 0; //@line 19927
       if ((HEAP8[$84 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$84 >> 2] | 0); //@line 19933
       }
       $89 = $4 + 52 | 0; //@line 19935
       if ((HEAP8[$89 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$89 >> 2] | 0); //@line 19941
       }
       $94 = $4 + 40 | 0; //@line 19943
       $95 = HEAP32[$94 >> 2] | 0; //@line 19944
       if ($95 | 0) {
        $97 = $4 + 44 | 0; //@line 19947
        $98 = HEAP32[$97 >> 2] | 0; //@line 19948
        do {
         if (($98 | 0) == ($95 | 0)) {
          $109 = $95; //@line 19952
         } else {
          $100 = $4 + 48 | 0; //@line 19954
          $102 = $98; //@line 19955
          while (1) {
           $101 = $102 + -72 | 0; //@line 19957
           HEAP32[$97 >> 2] = $101; //@line 19958
           __THREW__ = 0; //@line 19959
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 19960
           invoke_viii(13, $$byval_copy7 | 0, $100 | 0, $101 | 0); //@line 19961
           $103 = __THREW__; //@line 19962
           __THREW__ = 0; //@line 19962
           if ($103 & 1) {
            label = 45; //@line 19965
            break;
           }
           $102 = HEAP32[$97 >> 2] | 0; //@line 19968
           if (($102 | 0) == ($95 | 0)) {
            label = 46; //@line 19971
            break;
           }
          }
          if ((label | 0) == 45) {
           $107 = ___cxa_find_matching_catch_3(0) | 0; //@line 19978
           ___clang_call_terminate($107); //@line 19980
          } else if ((label | 0) == 46) {
           $109 = HEAP32[$94 >> 2] | 0; //@line 19985
           break;
          }
         }
        } while (0);
        __ZdlPv($109); //@line 19990
       }
       if ((HEAP8[$8 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 19997
       }
       $114 = $3 + 52 | 0; //@line 19999
       if ((HEAP8[$114 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$114 >> 2] | 0); //@line 20005
       }
       $119 = $3 + 40 | 0; //@line 20007
       $120 = HEAP32[$119 >> 2] | 0; //@line 20008
       if ($120 | 0) {
        $122 = $3 + 44 | 0; //@line 20011
        $123 = HEAP32[$122 >> 2] | 0; //@line 20012
        do {
         if (($123 | 0) == ($120 | 0)) {
          $134 = $120; //@line 20016
         } else {
          $125 = $3 + 48 | 0; //@line 20018
          $127 = $123; //@line 20019
          while (1) {
           $126 = $127 + -72 | 0; //@line 20021
           HEAP32[$122 >> 2] = $126; //@line 20022
           __THREW__ = 0; //@line 20023
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20024
           invoke_viii(13, $$byval_copy7 | 0, $125 | 0, $126 | 0); //@line 20025
           $128 = __THREW__; //@line 20026
           __THREW__ = 0; //@line 20026
           if ($128 & 1) {
            label = 57; //@line 20029
            break;
           }
           $127 = HEAP32[$122 >> 2] | 0; //@line 20032
           if (($127 | 0) == ($120 | 0)) {
            label = 58; //@line 20035
            break;
           }
          }
          if ((label | 0) == 57) {
           $132 = ___cxa_find_matching_catch_3(0) | 0; //@line 20042
           ___clang_call_terminate($132); //@line 20044
          } else if ((label | 0) == 58) {
           $134 = HEAP32[$119 >> 2] | 0; //@line 20049
           break;
          }
         }
        } while (0);
        __ZdlPv($134); //@line 20054
       }
       $135 = $3 + 4 | 0; //@line 20056
       if ((HEAP8[$135 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 20061
        return;
       }
       __ZdlPv(HEAP32[$135 >> 2] | 0); //@line 20064
       STACKTOP = sp; //@line 20065
       return;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $13 = ___cxa_find_matching_catch_2() | 0; //@line 20073
  $$0$i$i$i = tempRet0; //@line 20075
  $$05$i$i$i = $13; //@line 20075
 }
 $196 = $4 + 52 | 0; //@line 20077
 if ((HEAP8[$196 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$196 >> 2] | 0); //@line 20083
 }
 $201 = $4 + 40 | 0; //@line 20085
 $202 = HEAP32[$201 >> 2] | 0; //@line 20086
 if ($202 | 0) {
  $204 = $4 + 44 | 0; //@line 20089
  $205 = HEAP32[$204 >> 2] | 0; //@line 20090
  do {
   if (($205 | 0) == ($202 | 0)) {
    $216 = $202; //@line 20094
   } else {
    $207 = $4 + 48 | 0; //@line 20096
    $209 = $205; //@line 20097
    while (1) {
     $208 = $209 + -72 | 0; //@line 20099
     HEAP32[$204 >> 2] = $208; //@line 20100
     __THREW__ = 0; //@line 20101
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20102
     invoke_viii(13, $$byval_copy7 | 0, $207 | 0, $208 | 0); //@line 20103
     $210 = __THREW__; //@line 20104
     __THREW__ = 0; //@line 20104
     if ($210 & 1) {
      label = 93; //@line 20107
      break;
     }
     $209 = HEAP32[$204 >> 2] | 0; //@line 20110
     if (($209 | 0) == ($202 | 0)) {
      label = 94; //@line 20113
      break;
     }
    }
    if ((label | 0) == 93) {
     $214 = ___cxa_find_matching_catch_3(0) | 0; //@line 20120
     ___clang_call_terminate($214); //@line 20122
    } else if ((label | 0) == 94) {
     $216 = HEAP32[$201 >> 2] | 0; //@line 20127
     break;
    }
   }
  } while (0);
  __ZdlPv($216); //@line 20132
 }
 if ((HEAP8[$8 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 20139
 }
 $221 = $3 + 52 | 0; //@line 20141
 if ((HEAP8[$221 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$221 >> 2] | 0); //@line 20147
 }
 $226 = $3 + 40 | 0; //@line 20149
 $227 = HEAP32[$226 >> 2] | 0; //@line 20150
 if ($227 | 0) {
  $229 = $3 + 44 | 0; //@line 20153
  $230 = HEAP32[$229 >> 2] | 0; //@line 20154
  do {
   if (($230 | 0) == ($227 | 0)) {
    $241 = $227; //@line 20158
   } else {
    $232 = $3 + 48 | 0; //@line 20160
    $234 = $230; //@line 20161
    while (1) {
     $233 = $234 + -72 | 0; //@line 20163
     HEAP32[$229 >> 2] = $233; //@line 20164
     __THREW__ = 0; //@line 20165
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20166
     invoke_viii(13, $$byval_copy7 | 0, $232 | 0, $233 | 0); //@line 20167
     $235 = __THREW__; //@line 20168
     __THREW__ = 0; //@line 20168
     if ($235 & 1) {
      label = 105; //@line 20171
      break;
     }
     $234 = HEAP32[$229 >> 2] | 0; //@line 20174
     if (($234 | 0) == ($227 | 0)) {
      label = 106; //@line 20177
      break;
     }
    }
    if ((label | 0) == 105) {
     $239 = ___cxa_find_matching_catch_3(0) | 0; //@line 20184
     ___clang_call_terminate($239); //@line 20186
    } else if ((label | 0) == 106) {
     $241 = HEAP32[$226 >> 2] | 0; //@line 20191
     break;
    }
   }
  } while (0);
  __ZdlPv($241); //@line 20196
 }
 $242 = $3 + 4 | 0; //@line 20198
 if ((HEAP8[$242 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$05$i$i$i | 0); //@line 20203
 }
 __ZdlPv(HEAP32[$242 >> 2] | 0); //@line 20207
 ___resumeException($$05$i$i$i | 0); //@line 20208
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$018$i$i$i = 0, $$1$i$i$i = 0, $$119$i$i$i = 0, $$byval_copy7 = 0, $$sink$sink$shrunk$i$i$i = 0, $$val = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $116 = 0, $118 = 0, $119 = 0, $124 = 0, $129 = 0, $13 = 0, $130 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $142 = 0, $144 = 0, $149 = 0, $15 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $167 = 0, $169 = 0, $170 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $197 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $205 = 0, $21 = 0, $210 = 0, $211 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $223 = 0, $225 = 0, $23 = 0, $230 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $24 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $248 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $72 = 0, $74 = 0, $75 = 0, $8 = 0, $82 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14731
 STACKTOP = STACKTOP + 304 | 0; //@line 14732
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 14732
 $$byval_copy7 = sp + 289 | 0; //@line 14733
 $2 = sp + 288 | 0; //@line 14734
 $3 = sp + 216 | 0; //@line 14735
 $4 = sp + 144 | 0; //@line 14736
 $5 = sp + 72 | 0; //@line 14737
 $6 = sp; //@line 14738
 $$val = HEAP32[$1 >> 2] | 0; //@line 14739
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 14741
 __THREW__ = 0; //@line 14742
 $8 = invoke_ii(143, $$val | 0) | 0; //@line 14743
 $9 = __THREW__; //@line 14744
 __THREW__ = 0; //@line 14744
 do {
  if ($9 & 1) {
   label = 18; //@line 14748
  } else {
   __THREW__ = 0; //@line 14750
   invoke_vii(120, $4 | 0, $3 | 0); //@line 14751
   $11 = __THREW__; //@line 14752
   __THREW__ = 0; //@line 14752
   if ($11 & 1) {
    label = 18; //@line 14755
   } else {
    __THREW__ = 0; //@line 14757
    invoke_vii(128, $8 | 0, $4 | 0); //@line 14758
    $13 = __THREW__; //@line 14759
    __THREW__ = 0; //@line 14759
    if ($13 & 1) {
     $52 = ___cxa_find_matching_catch_2() | 0; //@line 14762
     $53 = tempRet0; //@line 14763
     $54 = $4 + 52 | 0; //@line 14764
     if ((HEAP8[$54 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$54 >> 2] | 0); //@line 14770
     }
     $59 = $4 + 40 | 0; //@line 14772
     $60 = HEAP32[$59 >> 2] | 0; //@line 14773
     if ($60 | 0) {
      $62 = $4 + 44 | 0; //@line 14776
      $63 = HEAP32[$62 >> 2] | 0; //@line 14777
      do {
       if (($63 | 0) == ($60 | 0)) {
        $74 = $60; //@line 14781
       } else {
        $65 = $4 + 48 | 0; //@line 14783
        $67 = $63; //@line 14784
        while (1) {
         $66 = $67 + -72 | 0; //@line 14786
         HEAP32[$62 >> 2] = $66; //@line 14787
         __THREW__ = 0; //@line 14788
         HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14789
         invoke_viii(13, $$byval_copy7 | 0, $65 | 0, $66 | 0); //@line 14790
         $68 = __THREW__; //@line 14791
         __THREW__ = 0; //@line 14791
         if ($68 & 1) {
          label = 26; //@line 14794
          break;
         }
         $67 = HEAP32[$62 >> 2] | 0; //@line 14797
         if (($67 | 0) == ($60 | 0)) {
          label = 27; //@line 14800
          break;
         }
        }
        if ((label | 0) == 26) {
         $72 = ___cxa_find_matching_catch_3(0) | 0; //@line 14807
         ___clang_call_terminate($72); //@line 14809
        } else if ((label | 0) == 27) {
         $74 = HEAP32[$59 >> 2] | 0; //@line 14814
         break;
        }
       }
      } while (0);
      __ZdlPv($74); //@line 14819
     }
     $75 = $4 + 4 | 0; //@line 14821
     if ((HEAP8[$75 + 11 >> 0] | 0) >= 0) {
      $$1$i$i$i = $52; //@line 14826
      $$119$i$i$i = $53; //@line 14826
      break;
     }
     __ZdlPv(HEAP32[$75 >> 2] | 0); //@line 14830
     $$1$i$i$i = $52; //@line 14831
     $$119$i$i$i = $53; //@line 14831
     break;
    }
    $15 = $4 + 52 | 0; //@line 14834
    if ((HEAP8[$15 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$15 >> 2] | 0); //@line 14840
    }
    $20 = $4 + 40 | 0; //@line 14842
    $21 = HEAP32[$20 >> 2] | 0; //@line 14843
    if ($21 | 0) {
     $23 = $4 + 44 | 0; //@line 14846
     $24 = HEAP32[$23 >> 2] | 0; //@line 14847
     do {
      if (($24 | 0) == ($21 | 0)) {
       $35 = $21; //@line 14851
      } else {
       $26 = $4 + 48 | 0; //@line 14853
       $28 = $24; //@line 14854
       while (1) {
        $27 = $28 + -72 | 0; //@line 14856
        HEAP32[$23 >> 2] = $27; //@line 14857
        __THREW__ = 0; //@line 14858
        HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14859
        invoke_viii(13, $$byval_copy7 | 0, $26 | 0, $27 | 0); //@line 14860
        $29 = __THREW__; //@line 14861
        __THREW__ = 0; //@line 14861
        if ($29 & 1) {
         label = 11; //@line 14864
         break;
        }
        $28 = HEAP32[$23 >> 2] | 0; //@line 14867
        if (($28 | 0) == ($21 | 0)) {
         label = 12; //@line 14870
         break;
        }
       }
       if ((label | 0) == 11) {
        $33 = ___cxa_find_matching_catch_3(0) | 0; //@line 14877
        ___clang_call_terminate($33); //@line 14879
       } else if ((label | 0) == 12) {
        $35 = HEAP32[$20 >> 2] | 0; //@line 14884
        break;
       }
      }
     } while (0);
     __ZdlPv($35); //@line 14889
    }
    $36 = $4 + 4 | 0; //@line 14891
    if ((HEAP8[$36 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$36 >> 2] | 0); //@line 14897
    }
    $41 = $5 + 4 | 0; //@line 14899
    HEAP32[$41 >> 2] = 0; //@line 14900
    HEAP32[$41 + 4 >> 2] = 0; //@line 14900
    HEAP32[$41 + 8 >> 2] = 0; //@line 14900
    $42 = $5 + 40 | 0; //@line 14901
    HEAP32[$42 >> 2] = 0; //@line 14902
    HEAP32[$42 + 4 >> 2] = 0; //@line 14902
    HEAP32[$42 + 8 >> 2] = 0; //@line 14902
    HEAP32[$42 + 12 >> 2] = 0; //@line 14902
    HEAP32[$42 + 16 >> 2] = 0; //@line 14902
    HEAP32[$42 + 20 >> 2] = 0; //@line 14902
    HEAP32[$5 >> 2] = 2; //@line 14903
    L41 : do {
     switch (HEAP32[$3 >> 2] | 0) {
     case 1:
      {
       $$sink$sink$shrunk$i$i$i = ((HEAP32[$3 + 44 >> 2] | 0) - (HEAP32[$3 + 40 >> 2] | 0) | 0) / 72 | 0; //@line 14914
       break;
      }
     case 3:
      {
       $82 = HEAP8[$3 + 4 + 11 >> 0] | 0; //@line 14920
       if ($82 << 24 >> 24 < 0) {
        $$sink$sink$shrunk$i$i$i = HEAP32[$3 + 8 >> 2] | 0; //@line 14925
        break L41;
       } else {
        $$sink$sink$shrunk$i$i$i = $82 & 255; //@line 14929
        break L41;
       }
       break;
      }
     default:
      {
       $$sink$sink$shrunk$i$i$i = 1; //@line 14935
      }
     }
    } while (0);
    HEAP32[$5 + 16 >> 2] = 0; //@line 14940
    $87 = $5 + 24 | 0; //@line 14942
    HEAP32[$87 >> 2] = $$sink$sink$shrunk$i$i$i; //@line 14944
    HEAP32[$87 + 4 >> 2] = 0; //@line 14947
    __THREW__ = 0; //@line 14948
    $91 = invoke_ii(143, $$val | 0) | 0; //@line 14949
    $92 = __THREW__; //@line 14950
    __THREW__ = 0; //@line 14950
    do {
     if ($92 & 1) {
      label = 73; //@line 14954
     } else {
      __THREW__ = 0; //@line 14956
      invoke_vii(120, $6 | 0, $5 | 0); //@line 14957
      $94 = __THREW__; //@line 14958
      __THREW__ = 0; //@line 14958
      if ($94 & 1) {
       label = 73; //@line 14961
      } else {
       __THREW__ = 0; //@line 14963
       invoke_vii(128, $91 | 0, $6 | 0); //@line 14964
       $96 = __THREW__; //@line 14965
       __THREW__ = 0; //@line 14965
       if ($96 & 1) {
        $177 = ___cxa_find_matching_catch_2() | 0; //@line 14968
        $178 = tempRet0; //@line 14969
        $179 = $6 + 52 | 0; //@line 14970
        if ((HEAP8[$179 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$179 >> 2] | 0); //@line 14976
        }
        $184 = $6 + 40 | 0; //@line 14978
        $185 = HEAP32[$184 >> 2] | 0; //@line 14979
        if ($185 | 0) {
         $187 = $6 + 44 | 0; //@line 14982
         $188 = HEAP32[$187 >> 2] | 0; //@line 14983
         do {
          if (($188 | 0) == ($185 | 0)) {
           $199 = $185; //@line 14987
          } else {
           $190 = $6 + 48 | 0; //@line 14989
           $192 = $188; //@line 14990
           while (1) {
            $191 = $192 + -72 | 0; //@line 14992
            HEAP32[$187 >> 2] = $191; //@line 14993
            __THREW__ = 0; //@line 14994
            HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 14995
            invoke_viii(13, $$byval_copy7 | 0, $190 | 0, $191 | 0); //@line 14996
            $193 = __THREW__; //@line 14997
            __THREW__ = 0; //@line 14997
            if ($193 & 1) {
             label = 81; //@line 15000
             break;
            }
            $192 = HEAP32[$187 >> 2] | 0; //@line 15003
            if (($192 | 0) == ($185 | 0)) {
             label = 82; //@line 15006
             break;
            }
           }
           if ((label | 0) == 81) {
            $197 = ___cxa_find_matching_catch_3(0) | 0; //@line 15013
            ___clang_call_terminate($197); //@line 15015
           } else if ((label | 0) == 82) {
            $199 = HEAP32[$184 >> 2] | 0; //@line 15020
            break;
           }
          }
         } while (0);
         __ZdlPv($199); //@line 15025
        }
        $200 = $6 + 4 | 0; //@line 15027
        if ((HEAP8[$200 + 11 >> 0] | 0) >= 0) {
         $$0$i$i$i = $177; //@line 15032
         $$018$i$i$i = $178; //@line 15032
         break;
        }
        __ZdlPv(HEAP32[$200 >> 2] | 0); //@line 15036
        $$0$i$i$i = $177; //@line 15037
        $$018$i$i$i = $178; //@line 15037
        break;
       }
       $98 = $6 + 52 | 0; //@line 15040
       if ((HEAP8[$98 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$98 >> 2] | 0); //@line 15046
       }
       $103 = $6 + 40 | 0; //@line 15048
       $104 = HEAP32[$103 >> 2] | 0; //@line 15049
       if ($104 | 0) {
        $106 = $6 + 44 | 0; //@line 15052
        $107 = HEAP32[$106 >> 2] | 0; //@line 15053
        do {
         if (($107 | 0) == ($104 | 0)) {
          $118 = $104; //@line 15057
         } else {
          $109 = $6 + 48 | 0; //@line 15059
          $111 = $107; //@line 15060
          while (1) {
           $110 = $111 + -72 | 0; //@line 15062
           HEAP32[$106 >> 2] = $110; //@line 15063
           __THREW__ = 0; //@line 15064
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15065
           invoke_viii(13, $$byval_copy7 | 0, $109 | 0, $110 | 0); //@line 15066
           $112 = __THREW__; //@line 15067
           __THREW__ = 0; //@line 15067
           if ($112 & 1) {
            label = 44; //@line 15070
            break;
           }
           $111 = HEAP32[$106 >> 2] | 0; //@line 15073
           if (($111 | 0) == ($104 | 0)) {
            label = 45; //@line 15076
            break;
           }
          }
          if ((label | 0) == 44) {
           $116 = ___cxa_find_matching_catch_3(0) | 0; //@line 15083
           ___clang_call_terminate($116); //@line 15085
          } else if ((label | 0) == 45) {
           $118 = HEAP32[$103 >> 2] | 0; //@line 15090
           break;
          }
         }
        } while (0);
        __ZdlPv($118); //@line 15095
       }
       $119 = $6 + 4 | 0; //@line 15097
       if ((HEAP8[$119 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$119 >> 2] | 0); //@line 15103
       }
       $124 = $5 + 52 | 0; //@line 15105
       if ((HEAP8[$124 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$124 >> 2] | 0); //@line 15111
       }
       $129 = $5 + 40 | 0; //@line 15113
       $130 = HEAP32[$129 >> 2] | 0; //@line 15114
       if ($130 | 0) {
        $132 = $5 + 44 | 0; //@line 15117
        $133 = HEAP32[$132 >> 2] | 0; //@line 15118
        do {
         if (($133 | 0) == ($130 | 0)) {
          $144 = $130; //@line 15122
         } else {
          $135 = $5 + 48 | 0; //@line 15124
          $137 = $133; //@line 15125
          while (1) {
           $136 = $137 + -72 | 0; //@line 15127
           HEAP32[$132 >> 2] = $136; //@line 15128
           __THREW__ = 0; //@line 15129
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15130
           invoke_viii(13, $$byval_copy7 | 0, $135 | 0, $136 | 0); //@line 15131
           $138 = __THREW__; //@line 15132
           __THREW__ = 0; //@line 15132
           if ($138 & 1) {
            label = 56; //@line 15135
            break;
           }
           $137 = HEAP32[$132 >> 2] | 0; //@line 15138
           if (($137 | 0) == ($130 | 0)) {
            label = 57; //@line 15141
            break;
           }
          }
          if ((label | 0) == 56) {
           $142 = ___cxa_find_matching_catch_3(0) | 0; //@line 15148
           ___clang_call_terminate($142); //@line 15150
          } else if ((label | 0) == 57) {
           $144 = HEAP32[$129 >> 2] | 0; //@line 15155
           break;
          }
         }
        } while (0);
        __ZdlPv($144); //@line 15160
       }
       if ((HEAP8[$41 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$41 >> 2] | 0); //@line 15167
       }
       $149 = $3 + 52 | 0; //@line 15169
       if ((HEAP8[$149 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$149 >> 2] | 0); //@line 15175
       }
       $154 = $3 + 40 | 0; //@line 15177
       $155 = HEAP32[$154 >> 2] | 0; //@line 15178
       if ($155 | 0) {
        $157 = $3 + 44 | 0; //@line 15181
        $158 = HEAP32[$157 >> 2] | 0; //@line 15182
        do {
         if (($158 | 0) == ($155 | 0)) {
          $169 = $155; //@line 15186
         } else {
          $160 = $3 + 48 | 0; //@line 15188
          $162 = $158; //@line 15189
          while (1) {
           $161 = $162 + -72 | 0; //@line 15191
           HEAP32[$157 >> 2] = $161; //@line 15192
           __THREW__ = 0; //@line 15193
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15194
           invoke_viii(13, $$byval_copy7 | 0, $160 | 0, $161 | 0); //@line 15195
           $163 = __THREW__; //@line 15196
           __THREW__ = 0; //@line 15196
           if ($163 & 1) {
            label = 68; //@line 15199
            break;
           }
           $162 = HEAP32[$157 >> 2] | 0; //@line 15202
           if (($162 | 0) == ($155 | 0)) {
            label = 69; //@line 15205
            break;
           }
          }
          if ((label | 0) == 68) {
           $167 = ___cxa_find_matching_catch_3(0) | 0; //@line 15212
           ___clang_call_terminate($167); //@line 15214
          } else if ((label | 0) == 69) {
           $169 = HEAP32[$154 >> 2] | 0; //@line 15219
           break;
          }
         }
        } while (0);
        __ZdlPv($169); //@line 15224
       }
       $170 = $3 + 4 | 0; //@line 15226
       if ((HEAP8[$170 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 15231
        return;
       }
       __ZdlPv(HEAP32[$170 >> 2] | 0); //@line 15234
       STACKTOP = sp; //@line 15235
       return;
      }
     }
    } while (0);
    if ((label | 0) == 73) {
     $175 = ___cxa_find_matching_catch_2() | 0; //@line 15240
     $$0$i$i$i = $175; //@line 15242
     $$018$i$i$i = tempRet0; //@line 15242
    }
    $205 = $5 + 52 | 0; //@line 15244
    if ((HEAP8[$205 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$205 >> 2] | 0); //@line 15250
    }
    $210 = $5 + 40 | 0; //@line 15252
    $211 = HEAP32[$210 >> 2] | 0; //@line 15253
    if ($211 | 0) {
     $213 = $5 + 44 | 0; //@line 15256
     $214 = HEAP32[$213 >> 2] | 0; //@line 15257
     do {
      if (($214 | 0) == ($211 | 0)) {
       $225 = $211; //@line 15261
      } else {
       $216 = $5 + 48 | 0; //@line 15263
       $218 = $214; //@line 15264
       while (1) {
        $217 = $218 + -72 | 0; //@line 15266
        HEAP32[$213 >> 2] = $217; //@line 15267
        __THREW__ = 0; //@line 15268
        HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15269
        invoke_viii(13, $$byval_copy7 | 0, $216 | 0, $217 | 0); //@line 15270
        $219 = __THREW__; //@line 15271
        __THREW__ = 0; //@line 15271
        if ($219 & 1) {
         label = 93; //@line 15274
         break;
        }
        $218 = HEAP32[$213 >> 2] | 0; //@line 15277
        if (($218 | 0) == ($211 | 0)) {
         label = 94; //@line 15280
         break;
        }
       }
       if ((label | 0) == 93) {
        $223 = ___cxa_find_matching_catch_3(0) | 0; //@line 15287
        ___clang_call_terminate($223); //@line 15289
       } else if ((label | 0) == 94) {
        $225 = HEAP32[$210 >> 2] | 0; //@line 15294
        break;
       }
      }
     } while (0);
     __ZdlPv($225); //@line 15299
    }
    if ((HEAP8[$41 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$41 >> 2] | 0); //@line 15306
    }
    $$1$i$i$i = $$0$i$i$i; //@line 15308
    $$119$i$i$i = $$018$i$i$i; //@line 15308
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $50 = ___cxa_find_matching_catch_2() | 0; //@line 15313
  $$1$i$i$i = $50; //@line 15315
  $$119$i$i$i = tempRet0; //@line 15315
 }
 $230 = $3 + 52 | 0; //@line 15317
 if ((HEAP8[$230 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$230 >> 2] | 0); //@line 15323
 }
 $235 = $3 + 40 | 0; //@line 15325
 $236 = HEAP32[$235 >> 2] | 0; //@line 15326
 if ($236 | 0) {
  $238 = $3 + 44 | 0; //@line 15329
  $239 = HEAP32[$238 >> 2] | 0; //@line 15330
  do {
   if (($239 | 0) == ($236 | 0)) {
    $250 = $236; //@line 15334
   } else {
    $241 = $3 + 48 | 0; //@line 15336
    $243 = $239; //@line 15337
    while (1) {
     $242 = $243 + -72 | 0; //@line 15339
     HEAP32[$238 >> 2] = $242; //@line 15340
     __THREW__ = 0; //@line 15341
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 15342
     invoke_viii(13, $$byval_copy7 | 0, $241 | 0, $242 | 0); //@line 15343
     $244 = __THREW__; //@line 15344
     __THREW__ = 0; //@line 15344
     if ($244 & 1) {
      label = 106; //@line 15347
      break;
     }
     $243 = HEAP32[$238 >> 2] | 0; //@line 15350
     if (($243 | 0) == ($236 | 0)) {
      label = 107; //@line 15353
      break;
     }
    }
    if ((label | 0) == 106) {
     $248 = ___cxa_find_matching_catch_3(0) | 0; //@line 15360
     ___clang_call_terminate($248); //@line 15362
    } else if ((label | 0) == 107) {
     $250 = HEAP32[$235 >> 2] | 0; //@line 15367
     break;
    }
   }
  } while (0);
  __ZdlPv($250); //@line 15372
 }
 $251 = $3 + 4 | 0; //@line 15374
 if ((HEAP8[$251 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$1$i$i$i | 0); //@line 15379
 }
 __ZdlPv(HEAP32[$251 >> 2] | 0); //@line 15383
 ___resumeException($$1$i$i$i | 0); //@line 15384
}
function __ZN6Parser15parseDefinitionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$02729$i$i$i = 0, $$07 = 0, $$1 = 0, $$18 = 0, $$2 = 0, $$2$i$i$i = 0, $$29 = 0, $$byval_copy9 = 0, $$phi$trans$insert42 = 0, $$pre = 0, $$pre41 = 0, $$sink$i = 0, $$sroa$0$0$copyload$i$i = 0, $$sroa$0$0$copyload$i$i3$i$i = 0, $$sroa$4$0$i = 0, $$sroa$4$1$i = 0, $103 = 0, $105 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $120 = 0, $121 = 0, $126 = 0, $128 = 0, $131 = 0, $138 = 0, $140 = 0, $142 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $160 = 0, $162 = 0, $163 = 0, $168 = 0, $169 = 0, $17 = 0, $176 = 0, $178 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $194 = 0, $199 = 0, $20 = 0, $200 = 0, $202 = 0, $203 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $212 = 0, $214 = 0, $215 = 0, $220 = 0, $229 = 0, $23 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $247 = 0, $249 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $60 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $9 = 0, $92 = 0, $95 = 0, $97 = 0, $98 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29638
 STACKTOP = STACKTOP + 144 | 0; //@line 29639
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 29639
 $$byval_copy9 = sp + 120 | 0; //@line 29640
 $3 = sp + 96 | 0; //@line 29641
 $4 = sp + 72 | 0; //@line 29642
 $5 = sp + 108 | 0; //@line 29643
 $6 = sp + 136 | 0; //@line 29644
 $7 = sp; //@line 29645
 $8 = $0 + 4 | 0; //@line 29646
 $9 = $0 + 40 | 0; //@line 29647
 HEAP32[$9 >> 2] = 0; //@line 29648
 HEAP32[$9 + 4 >> 2] = 0; //@line 29648
 HEAP32[$9 + 8 >> 2] = 0; //@line 29648
 HEAP32[$9 + 12 >> 2] = 0; //@line 29648
 HEAP32[$9 + 16 >> 2] = 0; //@line 29648
 HEAP32[$9 + 20 >> 2] = 0; //@line 29648
 HEAP32[$0 >> 2] = 0; //@line 29649
 HEAP32[$0 + 4 >> 2] = 0; //@line 29649
 HEAP32[$0 + 8 >> 2] = 0; //@line 29649
 HEAP32[$0 + 12 >> 2] = 0; //@line 29649
 HEAP32[$4 >> 2] = 0; //@line 29650
 HEAP32[$4 + 4 >> 2] = 0; //@line 29650
 HEAP32[$4 + 8 >> 2] = 0; //@line 29650
 HEAP32[$4 + 12 >> 2] = 0; //@line 29650
 HEAP32[$4 + 16 >> 2] = 0; //@line 29650
 HEAP32[$4 + 20 >> 2] = 0; //@line 29650
 $11 = HEAP8[$2 + 11 >> 0] | 0; //@line 29652
 if ($11 << 24 >> 24 < 0) {
  $18 = HEAP32[$2 >> 2] | 0; //@line 29658
  $19 = HEAP32[$2 + 4 >> 2] | 0; //@line 29658
 } else {
  $18 = $2; //@line 29661
  $19 = $11 & 255; //@line 29661
 }
 $17 = $18 + $19 | 0; //@line 29663
 $20 = $17; //@line 29664
 $21 = $18; //@line 29665
 L5 : do {
  if (($19 | 0) < 2) {
   $$2$i$i$i = $17; //@line 29669
  } else {
   $$02729$i$i$i = $18; //@line 29671
   $24 = $19; //@line 29671
   while (1) {
    $23 = $24 + -1 | 0; //@line 29673
    if (!$23) {
     $$2$i$i$i = $17; //@line 29676
     break L5;
    }
    $26 = _memchr($$02729$i$i$i, 58, $23) | 0; //@line 29679
    if (!$26) {
     $$2$i$i$i = $17; //@line 29682
     break L5;
    }
    if (!(_memcmp($26, 20986, 2) | 0)) {
     $$2$i$i$i = $26; //@line 29688
     break L5;
    }
    $$02729$i$i$i = $26 + 1 | 0; //@line 29691
    $24 = $20 - $$02729$i$i$i | 0; //@line 29693
    if (($24 | 0) < 2) {
     $$2$i$i$i = $17; //@line 29696
     break;
    }
   }
  }
 } while (0);
 $$0$i$i = ($$2$i$i$i | 0) == ($17 | 0) ? -1 : $$2$i$i$i - $21 | 0; //@line 29707
 __THREW__ = 0; //@line 29708
 invoke_viiiii(5, $$byval_copy9 | 0, $2 | 0, 0, $$0$i$i | 0, $2 | 0); //@line 29709
 $37 = __THREW__; //@line 29710
 __THREW__ = 0; //@line 29710
 L12 : do {
  if ($37 & 1) {
   $176 = ___cxa_find_matching_catch_2() | 0; //@line 29714
   $$2 = tempRet0; //@line 29716
   $$29 = $176; //@line 29716
  } else {
   $39 = $4 + 11 | 0; //@line 29718
   if ((HEAP8[$39 >> 0] | 0) < 0) {
    HEAP8[HEAP32[$4 >> 2] >> 0] = 0; //@line 29723
    HEAP32[$4 + 4 >> 2] = 0; //@line 29725
   } else {
    HEAP8[$4 >> 0] = 0; //@line 29727
    HEAP8[$39 >> 0] = 0; //@line 29728
   }
   __THREW__ = 0; //@line 29730
   invoke_vii(129, $4 | 0, 0); //@line 29731
   $44 = __THREW__; //@line 29732
   __THREW__ = 0; //@line 29732
   if ($44 & 1) {
    $46 = ___cxa_find_matching_catch_3(0) | 0; //@line 29735
    ___clang_call_terminate($46); //@line 29737
   }
   HEAP32[$4 >> 2] = HEAP32[$$byval_copy9 >> 2]; //@line 29740
   HEAP32[$4 + 4 >> 2] = HEAP32[$$byval_copy9 + 4 >> 2]; //@line 29740
   HEAP32[$4 + 8 >> 2] = HEAP32[$$byval_copy9 + 8 >> 2]; //@line 29740
   $$pre = HEAP8[$39 >> 0] | 0; //@line 29741
   $$pre41 = HEAP32[$4 >> 2] | 0; //@line 29742
   $$phi$trans$insert42 = $4 + 4 | 0; //@line 29743
   $48 = $$pre << 24 >> 24 < 0; //@line 29745
   $51 = $4 + ($$pre & 255) | 0; //@line 29748
   $$sink$i = $48 ? $$pre41 + (HEAP32[$$phi$trans$insert42 >> 2] | 0) | 0 : $51; //@line 29749
   $52 = $48 ? $$pre41 : $4; //@line 29750
   $53 = $$sink$i; //@line 29751
   L22 : do {
    if (($$sink$i | 0) == ($52 | 0)) {
     $$sroa$4$1$i = $53; //@line 29755
    } else {
     $$sroa$0$0$copyload$i$i3$i$i = $$sink$i; //@line 29757
     $$sroa$4$0$i = $53; //@line 29757
     while (1) {
      $$sroa$0$0$copyload$i$i3$i$i = $$sroa$0$0$copyload$i$i3$i$i + -1 | 0; //@line 29759
      if (!(_isspace(HEAP8[$$sroa$0$0$copyload$i$i3$i$i >> 0] | 0) | 0)) {
       $$sroa$4$1$i = $$sroa$4$0$i; //@line 29765
       break L22;
      }
      $60 = $$sroa$0$0$copyload$i$i3$i$i; //@line 29768
      if (($$sroa$0$0$copyload$i$i3$i$i | 0) == ($52 | 0)) {
       $$sroa$4$1$i = $60; //@line 29771
       break;
      } else {
       $$sroa$4$0$i = $60; //@line 29774
      }
     }
    }
   } while (0);
   __THREW__ = 0; //@line 29786
   invoke_iiii(36, $4 | 0, $$sroa$4$1$i - $52 | 0, ($48 ? $$pre41 + (HEAP32[$$phi$trans$insert42 >> 2] | 0) | 0 : $51) - $$sroa$4$1$i | 0) | 0; //@line 29787
   $68 = __THREW__; //@line 29788
   __THREW__ = 0; //@line 29788
   if (!($68 & 1)) {
    $70 = HEAP8[$39 >> 0] | 0; //@line 29791
    $71 = $70 << 24 >> 24 < 0; //@line 29792
    $72 = HEAP32[$4 >> 2] | 0; //@line 29793
    $74 = $71 ? $72 : $4; //@line 29796
    $75 = $71 ? $72 : $4; //@line 29797
    $78 = $71 ? HEAP32[$$phi$trans$insert42 >> 2] | 0 : $70 & 255; //@line 29800
    $79 = $75 + $78 | 0; //@line 29801
    L29 : do {
     if (!$78) {
      $$sroa$0$0$copyload$i$i = $75; //@line 29805
     } else {
      $82 = $75; //@line 29807
      while (1) {
       if (!(_isspace(HEAP8[$82 >> 0] | 0) | 0)) {
        $$sroa$0$0$copyload$i$i = $82; //@line 29814
        break L29;
       }
       $82 = $82 + 1 | 0; //@line 29817
       if (($82 | 0) == ($79 | 0)) {
        $$sroa$0$0$copyload$i$i = $79; //@line 29820
        break;
       }
      }
     }
    } while (0);
    __THREW__ = 0; //@line 29832
    invoke_iiii(36, $4 | 0, $74 - $75 | 0, $$sroa$0$0$copyload$i$i - $74 | 0) | 0; //@line 29833
    $92 = __THREW__; //@line 29834
    __THREW__ = 0; //@line 29834
    if (!($92 & 1)) {
     __THREW__ = 0; //@line 29838
     invoke_viiiii(5, $$byval_copy9 | 0, $2 | 0, $$0$i$i + 2 | 0, -1, $2 | 0); //@line 29839
     $95 = __THREW__; //@line 29840
     __THREW__ = 0; //@line 29840
     if ($95 & 1) {
      $180 = ___cxa_find_matching_catch_2() | 0; //@line 29843
      $$2 = tempRet0; //@line 29845
      $$29 = $180; //@line 29845
      break;
     }
     $97 = $4 + 12 | 0; //@line 29848
     $98 = $97 + 11 | 0; //@line 29849
     if ((HEAP8[$98 >> 0] | 0) < 0) {
      HEAP8[HEAP32[$97 >> 2] >> 0] = 0; //@line 29854
      HEAP32[$4 + 16 >> 2] = 0; //@line 29856
     } else {
      HEAP8[$97 >> 0] = 0; //@line 29858
      HEAP8[$98 >> 0] = 0; //@line 29859
     }
     __THREW__ = 0; //@line 29861
     invoke_vii(129, $97 | 0, 0); //@line 29862
     $103 = __THREW__; //@line 29863
     __THREW__ = 0; //@line 29863
     if ($103 & 1) {
      $105 = ___cxa_find_matching_catch_3(0) | 0; //@line 29866
      ___clang_call_terminate($105); //@line 29868
     }
     HEAP32[$97 >> 2] = HEAP32[$$byval_copy9 >> 2]; //@line 29871
     HEAP32[$97 + 4 >> 2] = HEAP32[$$byval_copy9 + 4 >> 2]; //@line 29871
     HEAP32[$97 + 8 >> 2] = HEAP32[$$byval_copy9 + 8 >> 2]; //@line 29871
     __THREW__ = 0; //@line 29873
     invoke_iii(55, $0 + 52 | 0, $4 | 0) | 0; //@line 29874
     $108 = __THREW__; //@line 29875
     __THREW__ = 0; //@line 29875
     if (!($108 & 1)) {
      __THREW__ = 0; //@line 29878
      invoke_vii(115, $5 | 0, $97 | 0); //@line 29879
      $110 = __THREW__; //@line 29880
      __THREW__ = 0; //@line 29880
      if ($110 & 1) {
       $182 = ___cxa_find_matching_catch_2() | 0; //@line 29883
       $$0 = tempRet0; //@line 29885
       $$07 = $182; //@line 29885
      } else {
       __THREW__ = 0; //@line 29887
       invoke_vii(115, $3 | 0, $5 | 0); //@line 29888
       $112 = __THREW__; //@line 29889
       __THREW__ = 0; //@line 29889
       do {
        if ($112 & 1) {
         $184 = ___cxa_find_matching_catch_2() | 0; //@line 29893
         $eh$lpad$body$index3Z2D = tempRet0; //@line 29895
         $eh$lpad$body$indexZ2D = $184; //@line 29895
        } else {
         __THREW__ = 0; //@line 29897
         invoke_viiii(18, $$byval_copy9 | 0, $1 | 0, $3 | 0, 1); //@line 29898
         $114 = __THREW__; //@line 29899
         __THREW__ = 0; //@line 29899
         if ($114 & 1) {
          $120 = ___cxa_find_matching_catch_2() | 0; //@line 29902
          $121 = tempRet0; //@line 29903
          if ((HEAP8[$3 + 11 >> 0] | 0) >= 0) {
           $eh$lpad$body$index3Z2D = $121; //@line 29908
           $eh$lpad$body$indexZ2D = $120; //@line 29908
           break;
          }
          __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 29912
          $eh$lpad$body$index3Z2D = $121; //@line 29913
          $eh$lpad$body$indexZ2D = $120; //@line 29913
          break;
         }
         if ((HEAP8[$3 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 29921
         }
         $126 = $0 + 40 | 0; //@line 29923
         __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($126); //@line 29924
         HEAP32[$126 >> 2] = HEAP32[$$byval_copy9 >> 2]; //@line 29926
         $128 = $$byval_copy9 + 4 | 0; //@line 29927
         HEAP32[$0 + 44 >> 2] = HEAP32[$128 >> 2]; //@line 29930
         $131 = $$byval_copy9 + 8 | 0; //@line 29931
         HEAP32[$0 + 48 >> 2] = HEAP32[$131 >> 2]; //@line 29934
         HEAP32[$131 >> 2] = 0; //@line 29935
         HEAP32[$128 >> 2] = 0; //@line 29936
         HEAP32[$$byval_copy9 >> 2] = 0; //@line 29937
         __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($$byval_copy9); //@line 29938
         if ((HEAP8[$5 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 29944
         }
         __THREW__ = 0; //@line 29946
         invoke_vii(120, $7 | 0, $0 | 0); //@line 29947
         $138 = __THREW__; //@line 29948
         __THREW__ = 0; //@line 29948
         do {
          if ($138 & 1) {
           $190 = ___cxa_find_matching_catch_2() | 0; //@line 29952
           $$1 = tempRet0; //@line 29954
           $$18 = $190; //@line 29954
          } else {
           __THREW__ = 0; //@line 29956
           invoke_viii(29, $6 | 0, $1 | 0, $7 | 0); //@line 29957
           $140 = __THREW__; //@line 29958
           __THREW__ = 0; //@line 29958
           if ($140 & 1) {
            $192 = ___cxa_find_matching_catch_2() | 0; //@line 29961
            $193 = tempRet0; //@line 29962
            $194 = $7 + 52 | 0; //@line 29963
            if ((HEAP8[$194 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$194 >> 2] | 0); //@line 29969
            }
            $199 = $7 + 40 | 0; //@line 29971
            $200 = HEAP32[$199 >> 2] | 0; //@line 29972
            if ($200 | 0) {
             $202 = $7 + 44 | 0; //@line 29975
             $203 = HEAP32[$202 >> 2] | 0; //@line 29976
             do {
              if (($203 | 0) == ($200 | 0)) {
               $214 = $200; //@line 29980
              } else {
               $205 = $7 + 48 | 0; //@line 29982
               $207 = $203; //@line 29983
               while (1) {
                $206 = $207 + -72 | 0; //@line 29985
                HEAP32[$202 >> 2] = $206; //@line 29986
                __THREW__ = 0; //@line 29987
                HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 29988
                invoke_viii(13, $$byval_copy9 | 0, $205 | 0, $206 | 0); //@line 29989
                $208 = __THREW__; //@line 29990
                __THREW__ = 0; //@line 29990
                if ($208 & 1) {
                 label = 74; //@line 29993
                 break;
                }
                $207 = HEAP32[$202 >> 2] | 0; //@line 29996
                if (($207 | 0) == ($200 | 0)) {
                 label = 75; //@line 29999
                 break;
                }
               }
               if ((label | 0) == 74) {
                $212 = ___cxa_find_matching_catch_3(0) | 0; //@line 30006
                ___clang_call_terminate($212); //@line 30008
               } else if ((label | 0) == 75) {
                $214 = HEAP32[$199 >> 2] | 0; //@line 30013
                break;
               }
              }
             } while (0);
             __ZdlPv($214); //@line 30018
            }
            $215 = $7 + 4 | 0; //@line 30020
            if ((HEAP8[$215 + 11 >> 0] | 0) >= 0) {
             $$1 = $193; //@line 30025
             $$18 = $192; //@line 30025
             break;
            }
            __ZdlPv(HEAP32[$215 >> 2] | 0); //@line 30029
            $$1 = $193; //@line 30030
            $$18 = $192; //@line 30030
            break;
           }
           $142 = $7 + 52 | 0; //@line 30033
           if ((HEAP8[$142 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$142 >> 2] | 0); //@line 30039
           }
           $147 = $7 + 40 | 0; //@line 30041
           $148 = HEAP32[$147 >> 2] | 0; //@line 30042
           if ($148 | 0) {
            $150 = $7 + 44 | 0; //@line 30045
            $151 = HEAP32[$150 >> 2] | 0; //@line 30046
            do {
             if (($151 | 0) == ($148 | 0)) {
              $162 = $148; //@line 30050
             } else {
              $153 = $7 + 48 | 0; //@line 30052
              $155 = $151; //@line 30053
              while (1) {
               $154 = $155 + -72 | 0; //@line 30055
               HEAP32[$150 >> 2] = $154; //@line 30056
               __THREW__ = 0; //@line 30057
               HEAP8[$$byval_copy9 >> 0] = HEAP8[$3 >> 0] | 0; //@line 30058
               invoke_viii(13, $$byval_copy9 | 0, $153 | 0, $154 | 0); //@line 30059
               $156 = __THREW__; //@line 30060
               __THREW__ = 0; //@line 30060
               if ($156 & 1) {
                label = 48; //@line 30063
                break;
               }
               $155 = HEAP32[$150 >> 2] | 0; //@line 30066
               if (($155 | 0) == ($148 | 0)) {
                label = 49; //@line 30069
                break;
               }
              }
              if ((label | 0) == 48) {
               $160 = ___cxa_find_matching_catch_3(0) | 0; //@line 30076
               ___clang_call_terminate($160); //@line 30078
              } else if ((label | 0) == 49) {
               $162 = HEAP32[$147 >> 2] | 0; //@line 30083
               break;
              }
             }
            } while (0);
            __ZdlPv($162); //@line 30088
           }
           $163 = $7 + 4 | 0; //@line 30090
           if ((HEAP8[$163 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$163 >> 2] | 0); //@line 30096
           }
           $168 = $0 + 64 | 0; //@line 30098
           $169 = HEAP16[$6 >> 1] | 0; //@line 30099
           HEAP8[$168 >> 0] = $169; //@line 30100
           HEAP8[$168 + 1 >> 0] = $169 >> 8; //@line 30100
           if ((HEAP8[$98 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$97 >> 2] | 0); //@line 30105
           }
           if ((HEAP8[$39 >> 0] | 0) >= 0) {
            STACKTOP = sp; //@line 30110
            return;
           }
           __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 30113
           STACKTOP = sp; //@line 30114
           return;
          }
         } while (0);
         $$2 = $$1; //@line 30117
         $$29 = $$18; //@line 30117
         break L12;
        }
       } while (0);
       if ((HEAP8[$5 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 30126
        $$0 = $eh$lpad$body$index3Z2D; //@line 30127
        $$07 = $eh$lpad$body$indexZ2D; //@line 30127
       } else {
        $$0 = $eh$lpad$body$index3Z2D; //@line 30129
        $$07 = $eh$lpad$body$indexZ2D; //@line 30129
       }
      }
      $$2 = $$0; //@line 30132
      $$29 = $$07; //@line 30132
      break;
     }
    }
   }
   $178 = ___cxa_find_matching_catch_2() | 0; //@line 30137
   $$2 = tempRet0; //@line 30139
   $$29 = $178; //@line 30139
  }
 } while (0);
 $220 = $4 + 12 | 0; //@line 30142
 if ((HEAP8[$220 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$220 >> 2] | 0); //@line 30148
 }
 if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 30155
 }
 $229 = $0 + 52 | 0; //@line 30157
 if ((HEAP8[$229 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$229 >> 2] | 0); //@line 30163
 }
 $234 = $0 + 40 | 0; //@line 30165
 $235 = HEAP32[$234 >> 2] | 0; //@line 30166
 if ($235 | 0) {
  $237 = $0 + 44 | 0; //@line 30169
  $238 = HEAP32[$237 >> 2] | 0; //@line 30170
  do {
   if (($238 | 0) == ($235 | 0)) {
    $249 = $235; //@line 30174
   } else {
    $240 = $0 + 48 | 0; //@line 30176
    $242 = $238; //@line 30177
    while (1) {
     $241 = $242 + -72 | 0; //@line 30179
     HEAP32[$237 >> 2] = $241; //@line 30180
     __THREW__ = 0; //@line 30181
     HEAP8[$$byval_copy9 >> 0] = HEAP8[$4 >> 0] | 0; //@line 30182
     invoke_viii(13, $$byval_copy9 | 0, $240 | 0, $241 | 0); //@line 30183
     $243 = __THREW__; //@line 30184
     __THREW__ = 0; //@line 30184
     if ($243 & 1) {
      label = 91; //@line 30187
      break;
     }
     $242 = HEAP32[$237 >> 2] | 0; //@line 30190
     if (($242 | 0) == ($235 | 0)) {
      label = 92; //@line 30193
      break;
     }
    }
    if ((label | 0) == 91) {
     $247 = ___cxa_find_matching_catch_3(0) | 0; //@line 30200
     ___clang_call_terminate($247); //@line 30202
    } else if ((label | 0) == 92) {
     $249 = HEAP32[$234 >> 2] | 0; //@line 30207
     break;
    }
   }
  } while (0);
  __ZdlPv($249); //@line 30212
 }
 if ((HEAP8[$8 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$29 | 0); //@line 30218
 }
 __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 30222
 ___resumeException($$29 | 0); //@line 30223
}
function __ZN6Parser17parseListFunctionERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i24 = 0, $$014 = 0, $$016 = 0, $$03$i = 0, $$04$i = 0, $$1 = 0, $$115 = 0, $$117 = 0, $$2 = 0, $$218 = 0, $$3 = 0, $$319 = 0, $$byval_copy = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $117 = 0, $118 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $133 = 0, $135 = 0, $138 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $179 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $197 = 0, $199 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $30 = 0, $31 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $96 = 0, $98 = 0, $99 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$i22$index7Z2D = 0, $eh$lpad$body$i22$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1733
 STACKTOP = STACKTOP + 352 | 0; //@line 1734
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352); //@line 1734
 $$byval_copy = sp + 200 | 0; //@line 1735
 $4 = sp + 56 | 0; //@line 1736
 $5 = sp + 16 | 0; //@line 1737
 $6 = sp + 40 | 0; //@line 1738
 $7 = sp; //@line 1739
 $8 = sp + 28 | 0; //@line 1740
 $9 = $0 + 4 | 0; //@line 1741
 HEAP32[$9 >> 2] = 0; //@line 1742
 HEAP32[$9 + 4 >> 2] = 0; //@line 1742
 HEAP32[$9 + 8 >> 2] = 0; //@line 1742
 $10 = $0 + 40 | 0; //@line 1743
 HEAP32[$10 >> 2] = 0; //@line 1744
 HEAP32[$10 + 4 >> 2] = 0; //@line 1744
 HEAP32[$10 + 8 >> 2] = 0; //@line 1744
 HEAP32[$10 + 12 >> 2] = 0; //@line 1744
 HEAP32[$10 + 16 >> 2] = 0; //@line 1744
 HEAP32[$10 + 20 >> 2] = 0; //@line 1744
 HEAP32[$0 >> 2] = 1; //@line 1745
 $11 = $4 + 64 | 0; //@line 1746
 $12 = $4 + 8 | 0; //@line 1747
 HEAP32[$12 >> 2] = 4868; //@line 1748
 $13 = $4 + 12 | 0; //@line 1749
 HEAP32[$4 >> 2] = 692; //@line 1750
 HEAP32[$11 >> 2] = 712; //@line 1751
 HEAP32[$4 + 4 >> 2] = 0; //@line 1753
 __THREW__ = 0; //@line 1755
 invoke_vii(110, $4 + 64 | 0, $13 | 0); //@line 1756
 $16 = __THREW__; //@line 1757
 __THREW__ = 0; //@line 1757
 L1 : do {
  if ($16 & 1) {
   $40 = ___cxa_find_matching_catch_2() | 0; //@line 1761
   $$0$i = tempRet0; //@line 1763
   $$03$i = $40; //@line 1763
   label = 33; //@line 1764
  } else {
   HEAP32[$4 + 136 >> 2] = 0; //@line 1767
   HEAP32[$4 + 140 >> 2] = -1; //@line 1769
   HEAP32[$4 >> 2] = 4848; //@line 1770
   HEAP32[$11 >> 2] = 4888; //@line 1771
   HEAP32[$12 >> 2] = 4868; //@line 1772
   __THREW__ = 0; //@line 1773
   invoke_vi(253, $13 | 0); //@line 1774
   $20 = __THREW__; //@line 1775
   __THREW__ = 0; //@line 1775
   do {
    if ($20 & 1) {
     $42 = ___cxa_find_matching_catch_2() | 0; //@line 1779
     $eh$lpad$body$i$index2Z2D = tempRet0; //@line 1781
     $eh$lpad$body$i$indexZ2D = $42; //@line 1781
    } else {
     HEAP32[$13 >> 2] = 3032; //@line 1783
     $22 = $4 + 44 | 0; //@line 1784
     $23 = $4 + 60 | 0; //@line 1785
     HEAP32[$22 >> 2] = 0; //@line 1786
     HEAP32[$22 + 4 >> 2] = 0; //@line 1786
     HEAP32[$22 + 8 >> 2] = 0; //@line 1786
     HEAP32[$22 + 12 >> 2] = 0; //@line 1786
     HEAP32[$23 >> 2] = 24; //@line 1787
     HEAP32[$$byval_copy >> 2] = 0; //@line 1788
     HEAP32[$$byval_copy + 4 >> 2] = 0; //@line 1788
     HEAP32[$$byval_copy + 8 >> 2] = 0; //@line 1788
     __THREW__ = 0; //@line 1789
     invoke_vii(111, $13 | 0, $$byval_copy | 0); //@line 1790
     $24 = __THREW__; //@line 1791
     __THREW__ = 0; //@line 1791
     if ($24 & 1) {
      $30 = ___cxa_find_matching_catch_2() | 0; //@line 1794
      $31 = tempRet0; //@line 1795
      if ((HEAP8[$$byval_copy + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 1801
      }
      if ((HEAP8[$22 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 1808
      }
      __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($13); //@line 1810
      $eh$lpad$body$i$index2Z2D = $31; //@line 1811
      $eh$lpad$body$i$indexZ2D = $30; //@line 1811
      break;
     }
     if ((HEAP8[$$byval_copy + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 1819
     }
     $44 = $$byval_copy + 64 | 0; //@line 1821
     $45 = $$byval_copy + 8 | 0; //@line 1822
     HEAP32[$45 >> 2] = 4868; //@line 1823
     $46 = $$byval_copy + 12 | 0; //@line 1824
     HEAP32[$$byval_copy >> 2] = 692; //@line 1825
     HEAP32[$44 >> 2] = 712; //@line 1826
     HEAP32[$$byval_copy + 4 >> 2] = 0; //@line 1828
     __THREW__ = 0; //@line 1830
     invoke_vii(110, $$byval_copy + 64 | 0, $46 | 0); //@line 1831
     $49 = __THREW__; //@line 1832
     __THREW__ = 0; //@line 1832
     L19 : do {
      if ($49 & 1) {
       $65 = ___cxa_find_matching_catch_2() | 0; //@line 1836
       $$0$i24 = tempRet0; //@line 1838
       $$04$i = $65; //@line 1838
       label = 34; //@line 1839
      } else {
       HEAP32[$$byval_copy + 136 >> 2] = 0; //@line 1842
       HEAP32[$$byval_copy + 140 >> 2] = -1; //@line 1844
       HEAP32[$$byval_copy >> 2] = 4848; //@line 1845
       HEAP32[$44 >> 2] = 4888; //@line 1846
       HEAP32[$45 >> 2] = 4868; //@line 1847
       __THREW__ = 0; //@line 1848
       invoke_vi(253, $46 | 0); //@line 1849
       $53 = __THREW__; //@line 1850
       __THREW__ = 0; //@line 1850
       do {
        if ($53 & 1) {
         $67 = ___cxa_find_matching_catch_2() | 0; //@line 1854
         $eh$lpad$body$i22$index7Z2D = tempRet0; //@line 1856
         $eh$lpad$body$i22$indexZ2D = $67; //@line 1856
        } else {
         HEAP32[$46 >> 2] = 3032; //@line 1858
         $55 = $$byval_copy + 44 | 0; //@line 1859
         $56 = $$byval_copy + 60 | 0; //@line 1860
         HEAP32[$55 >> 2] = 0; //@line 1861
         HEAP32[$55 + 4 >> 2] = 0; //@line 1861
         HEAP32[$55 + 8 >> 2] = 0; //@line 1861
         HEAP32[$55 + 12 >> 2] = 0; //@line 1861
         HEAP32[$56 >> 2] = 24; //@line 1862
         __THREW__ = 0; //@line 1863
         invoke_vii(111, $46 | 0, $3 | 0); //@line 1864
         $57 = __THREW__; //@line 1865
         __THREW__ = 0; //@line 1865
         if ($57 & 1) {
          $59 = ___cxa_find_matching_catch_2() | 0; //@line 1868
          $60 = tempRet0; //@line 1869
          if ((HEAP8[$55 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$55 >> 2] | 0); //@line 1875
          }
          __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($46); //@line 1877
          $eh$lpad$body$i22$index7Z2D = $60; //@line 1878
          $eh$lpad$body$i22$indexZ2D = $59; //@line 1878
          break;
         }
         HEAP32[$5 >> 2] = 0; //@line 1881
         HEAP32[$5 + 4 >> 2] = 0; //@line 1881
         HEAP32[$5 + 8 >> 2] = 0; //@line 1881
         $69 = $6 + 11 | 0; //@line 1882
         $70 = $4 + 8 | 0; //@line 1883
         $71 = $2 + 11 | 0; //@line 1884
         $72 = $2 + 4 | 0; //@line 1885
         $$0 = 1; //@line 1886
         L31 : while (1) {
          __THREW__ = 0; //@line 1888
          $73 = invoke_iiii(30, $$byval_copy | 0, $5 | 0, 32) | 0; //@line 1889
          $74 = __THREW__; //@line 1890
          __THREW__ = 0; //@line 1890
          if ($74 & 1) {
           label = 35; //@line 1893
           break;
          }
          if (HEAP32[$73 + (HEAP32[(HEAP32[$73 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] & 5 | 0) {
           label = 45; //@line 1905
           break;
          }
          __THREW__ = 0; //@line 1908
          invoke_iiii(37, 0, $2 | 0, $3 | 0) | 0; //@line 1909
          $84 = __THREW__; //@line 1910
          __THREW__ = 0; //@line 1910
          if ($84 & 1) {
           label = 35; //@line 1913
           break;
          }
          __THREW__ = 0; //@line 1916
          invoke_vii(115, $6 | 0, $2 | 0); //@line 1917
          $86 = __THREW__; //@line 1918
          __THREW__ = 0; //@line 1918
          if ($86 & 1) {
           label = 35; //@line 1921
           break;
          }
          __THREW__ = 0; //@line 1924
          $88 = invoke_iii(69, 0, $6 | 0) | 0; //@line 1925
          $89 = __THREW__; //@line 1926
          __THREW__ = 0; //@line 1926
          if ($89 & 1) {
           label = 36; //@line 1929
           break;
          }
          if ((HEAP8[$69 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 1937
          }
          do {
           if (($88 | 0) == 1) {
            $$1 = $$0 + 1 | 0; //@line 1942
           } else {
            $103 = HEAP8[$71 >> 0] | 0; //@line 1944
            if ((($103 << 24 >> 24 < 0 ? HEAP32[$72 >> 2] | 0 : $103 & 255) | 0) != 1) {
             $$1 = $$0; //@line 1951
             break;
            }
            __THREW__ = 0; //@line 1954
            $109 = invoke_iiiiii(21, $2 | 0, 0, -1, 20980, 1) | 0; //@line 1955
            $110 = __THREW__; //@line 1956
            __THREW__ = 0; //@line 1956
            if ($110 & 1) {
             label = 40; //@line 1959
             break L31;
            }
            if ($109 | 0) {
             $$1 = $$0; //@line 1964
             break;
            }
            if (($$0 | 0) < 2) {
             label = 45; //@line 1970
             break L31;
            } else {
             $$1 = $$0 + -1 | 0; //@line 1973
            }
           }
          } while (0);
          $117 = HEAP8[$71 >> 0] | 0; //@line 1977
          $118 = $117 << 24 >> 24 < 0; //@line 1978
          __THREW__ = 0; //@line 1984
          $124 = invoke_iiii(32, $70 | 0, ($118 ? HEAP32[$2 >> 2] | 0 : $2) | 0, ($118 ? HEAP32[$72 >> 2] | 0 : $117 & 255) | 0) | 0; //@line 1985
          $125 = __THREW__; //@line 1986
          __THREW__ = 0; //@line 1986
          if ($125 & 1) {
           label = 35; //@line 1989
           break;
          }
          __THREW__ = 0; //@line 1992
          invoke_iiii(32, $124 | 0, 21108, 1) | 0; //@line 1993
          $127 = __THREW__; //@line 1994
          __THREW__ = 0; //@line 1994
          if ($127 & 1) {
           label = 35; //@line 1997
           break;
          } else {
           $$0 = $$1; //@line 2000
          }
         }
         if ((label | 0) == 35) {
          $96 = ___cxa_find_matching_catch_2() | 0; //@line 2004
          $$115 = tempRet0; //@line 2006
          $$117 = $96; //@line 2006
         } else if ((label | 0) == 36) {
          $98 = ___cxa_find_matching_catch_2() | 0; //@line 2009
          $99 = tempRet0; //@line 2010
          if ((HEAP8[$69 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 2015
           $$115 = $99; //@line 2016
           $$117 = $98; //@line 2016
          } else {
           $$115 = $99; //@line 2018
           $$117 = $98; //@line 2018
          }
         } else if ((label | 0) == 40) {
          $112 = ___cxa_find_matching_catch_3(0) | 0; //@line 2022
          ___clang_call_terminate($112); //@line 2024
         } else if ((label | 0) == 45) {
          __THREW__ = 0; //@line 2028
          invoke_vii(114, $8 | 0, $13 | 0); //@line 2029
          $129 = __THREW__; //@line 2030
          __THREW__ = 0; //@line 2030
          do {
           if ($129 & 1) {
            $158 = ___cxa_find_matching_catch_2() | 0; //@line 2034
            $$014 = tempRet0; //@line 2036
            $$016 = $158; //@line 2036
           } else {
            __THREW__ = 0; //@line 2038
            invoke_viiii(18, $7 | 0, $1 | 0, $8 | 0, 0); //@line 2039
            $131 = __THREW__; //@line 2040
            __THREW__ = 0; //@line 2040
            if ($131 & 1) {
             $160 = ___cxa_find_matching_catch_2() | 0; //@line 2043
             $161 = tempRet0; //@line 2044
             if ((HEAP8[$8 + 11 >> 0] | 0) >= 0) {
              $$014 = $161; //@line 2049
              $$016 = $160; //@line 2049
              break;
             }
             __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 2053
             $$014 = $161; //@line 2054
             $$016 = $160; //@line 2054
             break;
            }
            $133 = $0 + 40 | 0; //@line 2057
            __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($133); //@line 2058
            HEAP32[$133 >> 2] = HEAP32[$7 >> 2]; //@line 2060
            $135 = $7 + 4 | 0; //@line 2061
            HEAP32[$0 + 44 >> 2] = HEAP32[$135 >> 2]; //@line 2064
            $138 = $7 + 8 | 0; //@line 2065
            HEAP32[$0 + 48 >> 2] = HEAP32[$138 >> 2]; //@line 2068
            HEAP32[$138 >> 2] = 0; //@line 2069
            HEAP32[$135 >> 2] = 0; //@line 2070
            HEAP32[$7 >> 2] = 0; //@line 2071
            __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($7); //@line 2072
            if ((HEAP8[$8 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 2078
            }
            if ((HEAP8[$5 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 2085
            }
            HEAP32[$$byval_copy >> 2] = 4848; //@line 2087
            HEAP32[$44 >> 2] = 4888; //@line 2088
            HEAP32[$$byval_copy + 8 >> 2] = 4868; //@line 2090
            HEAP32[$46 >> 2] = 3032; //@line 2091
            if ((HEAP8[$55 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$55 >> 2] | 0); //@line 2097
            }
            __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($46); //@line 2099
            __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($$byval_copy, 4900); //@line 2100
            __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($44); //@line 2101
            HEAP32[$4 >> 2] = 4848; //@line 2102
            HEAP32[$11 >> 2] = 4888; //@line 2103
            HEAP32[$70 >> 2] = 4868; //@line 2104
            HEAP32[$13 >> 2] = 3032; //@line 2105
            if ((HEAP8[$22 + 11 >> 0] | 0) >= 0) {
             __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($13); //@line 2110
             __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 2111
             __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($11); //@line 2112
             STACKTOP = sp; //@line 2113
             return;
            }
            __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 2116
            __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($13); //@line 2117
            __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 2118
            __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($11); //@line 2119
            STACKTOP = sp; //@line 2120
            return;
           }
          } while (0);
          $$115 = $$014; //@line 2123
          $$117 = $$016; //@line 2123
         }
         if ((HEAP8[$5 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 2130
         }
         HEAP32[$$byval_copy >> 2] = 4848; //@line 2132
         HEAP32[$44 >> 2] = 4888; //@line 2133
         HEAP32[$$byval_copy + 8 >> 2] = 4868; //@line 2135
         HEAP32[$46 >> 2] = 3032; //@line 2136
         if ((HEAP8[$55 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$55 >> 2] | 0); //@line 2142
         }
         __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($46); //@line 2144
         __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($$byval_copy, 4900); //@line 2145
         __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($44); //@line 2146
         $$2 = $$115; //@line 2147
         $$218 = $$117; //@line 2147
         $$pre$phiZ2D = $70; //@line 2147
         break L19;
        }
       } while (0);
       __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($$byval_copy, 4900); //@line 2151
       $$0$i24 = $eh$lpad$body$i22$index7Z2D; //@line 2152
       $$04$i = $eh$lpad$body$i22$indexZ2D; //@line 2152
       label = 34; //@line 2153
      }
     } while (0);
     if ((label | 0) == 34) {
      __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($44); //@line 2157
      $$2 = $$0$i24; //@line 2159
      $$218 = $$04$i; //@line 2159
      $$pre$phiZ2D = $4 + 8 | 0; //@line 2159
     }
     HEAP32[$4 >> 2] = 4848; //@line 2161
     HEAP32[$11 >> 2] = 4888; //@line 2162
     HEAP32[$$pre$phiZ2D >> 2] = 4868; //@line 2163
     HEAP32[$13 >> 2] = 3032; //@line 2164
     if ((HEAP8[$22 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 2170
     }
     __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($13); //@line 2172
     __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 2173
     __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($11); //@line 2174
     $$3 = $$2; //@line 2175
     $$319 = $$218; //@line 2175
     break L1;
    }
   } while (0);
   __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 2179
   $$0$i = $eh$lpad$body$i$index2Z2D; //@line 2180
   $$03$i = $eh$lpad$body$i$indexZ2D; //@line 2180
   label = 33; //@line 2181
  }
 } while (0);
 if ((label | 0) == 33) {
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($11); //@line 2185
  $$3 = $$0$i; //@line 2186
  $$319 = $$03$i; //@line 2186
 }
 $179 = $0 + 52 | 0; //@line 2188
 if ((HEAP8[$179 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$179 >> 2] | 0); //@line 2194
 }
 $184 = $0 + 40 | 0; //@line 2196
 $185 = HEAP32[$184 >> 2] | 0; //@line 2197
 if ($185 | 0) {
  $187 = $0 + 44 | 0; //@line 2200
  $188 = HEAP32[$187 >> 2] | 0; //@line 2201
  do {
   if (($188 | 0) == ($185 | 0)) {
    $199 = $185; //@line 2205
   } else {
    $190 = $0 + 48 | 0; //@line 2207
    $192 = $188; //@line 2208
    while (1) {
     $191 = $192 + -72 | 0; //@line 2210
     HEAP32[$187 >> 2] = $191; //@line 2211
     __THREW__ = 0; //@line 2212
     HEAP8[$$byval_copy >> 0] = HEAP8[$4 >> 0] | 0; //@line 2213
     invoke_viii(13, $$byval_copy | 0, $190 | 0, $191 | 0); //@line 2214
     $193 = __THREW__; //@line 2215
     __THREW__ = 0; //@line 2215
     if ($193 & 1) {
      label = 75; //@line 2218
      break;
     }
     $192 = HEAP32[$187 >> 2] | 0; //@line 2221
     if (($192 | 0) == ($185 | 0)) {
      label = 76; //@line 2224
      break;
     }
    }
    if ((label | 0) == 75) {
     $197 = ___cxa_find_matching_catch_3(0) | 0; //@line 2231
     ___clang_call_terminate($197); //@line 2233
    } else if ((label | 0) == 76) {
     $199 = HEAP32[$184 >> 2] | 0; //@line 2238
     break;
    }
   }
  } while (0);
  __ZdlPv($199); //@line 2243
 }
 if ((HEAP8[$9 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$319 | 0); //@line 2249
 }
 __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 2253
 ___resumeException($$319 | 0); //@line 2254
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$06$i$i$i = 0, $$1$i$i$i = 0, $$17$i$i$i = 0, $$2$i$i$i = 0, $$28$i$i$i = 0, $$3$i$i$i = 0, $$39$i$i$i = 0, $$4$i$i$i = 0, $$410$i$i$i = 0, $$byval_copy5 = 0, $$val = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $106 = 0, $108 = 0, $11 = 0, $113 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $131 = 0, $133 = 0, $138 = 0, $140 = 0, $142 = 0, $143 = 0, $15 = 0, $156 = 0, $16 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $187 = 0, $188 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $200 = 0, $202 = 0, $203 = 0, $208 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $226 = 0, $228 = 0, $229 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $6 = 0, $63 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17635
 STACKTOP = STACKTOP + 256 | 0; //@line 17636
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 17636
 $$byval_copy5 = sp + 253 | 0; //@line 17637
 $2 = sp + 252 | 0; //@line 17638
 $3 = sp + 144 | 0; //@line 17639
 $4 = sp + 72 | 0; //@line 17640
 $5 = sp; //@line 17641
 $6 = sp + 240 | 0; //@line 17642
 $7 = sp + 228 | 0; //@line 17643
 $8 = sp + 216 | 0; //@line 17644
 $$val = HEAP32[$1 >> 2] | 0; //@line 17645
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 17647
 __THREW__ = 0; //@line 17648
 $10 = invoke_ii(143, $$val | 0) | 0; //@line 17649
 $11 = __THREW__; //@line 17650
 __THREW__ = 0; //@line 17650
 if ($11 & 1) {
  label = 10; //@line 17653
 } else {
  __THREW__ = 0; //@line 17655
  invoke_vii(131, $4 | 0, $10 | 0); //@line 17656
  $13 = __THREW__; //@line 17657
  __THREW__ = 0; //@line 17657
  if ($13 & 1) {
   label = 10; //@line 17660
  } else {
   __THREW__ = 0; //@line 17662
   $15 = invoke_ii(143, $$val | 0) | 0; //@line 17663
   $16 = __THREW__; //@line 17664
   __THREW__ = 0; //@line 17664
   if ($16 & 1) {
    label = 11; //@line 17667
   } else {
    __THREW__ = 0; //@line 17669
    invoke_vii(131, $5 | 0, $15 | 0); //@line 17670
    $18 = __THREW__; //@line 17671
    __THREW__ = 0; //@line 17671
    if ($18 & 1) {
     label = 11; //@line 17674
    } else {
     if ((HEAP32[$3 >> 2] | 0) == 3) {
      if ((HEAP32[$4 >> 2] | 0) == 3) {
       if ((HEAP32[$5 >> 2] | 0) == 3) {
        $39 = HEAP32[$$val + 100 >> 2] | 0; //@line 17686
        $40 = $5 + 4 | 0; //@line 17687
        __THREW__ = 0; //@line 17688
        invoke_vii(115, $6 | 0, $40 | 0); //@line 17689
        $41 = __THREW__; //@line 17690
        __THREW__ = 0; //@line 17690
        if ($41 & 1) {
         label = 13; //@line 17693
        } else {
         $43 = $4 + 4 | 0; //@line 17695
         __THREW__ = 0; //@line 17696
         invoke_vii(115, $7 | 0, $43 | 0); //@line 17697
         $44 = __THREW__; //@line 17698
         __THREW__ = 0; //@line 17698
         if ($44 & 1) {
          $138 = ___cxa_find_matching_catch_2() | 0; //@line 17701
          $$1$i$i$i = tempRet0; //@line 17703
          $$17$i$i$i = $138; //@line 17703
         } else {
          $46 = $3 + 4 | 0; //@line 17705
          __THREW__ = 0; //@line 17706
          invoke_vii(115, $8 | 0, $46 | 0); //@line 17707
          $47 = __THREW__; //@line 17708
          __THREW__ = 0; //@line 17708
          do {
           if ($47 & 1) {
            $140 = ___cxa_find_matching_catch_2() | 0; //@line 17712
            $$0$i$i$i = tempRet0; //@line 17714
            $$06$i$i$i = $140; //@line 17714
           } else {
            __THREW__ = 0; //@line 17716
            invoke_viiii(17, $39 | 0, $6 | 0, $7 | 0, $8 | 0); //@line 17717
            $49 = __THREW__; //@line 17718
            __THREW__ = 0; //@line 17718
            if ($49 & 1) {
             $142 = ___cxa_find_matching_catch_2() | 0; //@line 17721
             $143 = tempRet0; //@line 17722
             if ((HEAP8[$8 + 11 >> 0] | 0) >= 0) {
              $$0$i$i$i = $143; //@line 17727
              $$06$i$i$i = $142; //@line 17727
              break;
             }
             __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 17731
             $$0$i$i$i = $143; //@line 17732
             $$06$i$i$i = $142; //@line 17732
             break;
            }
            if ((HEAP8[$8 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 17740
            }
            if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 17747
            }
            if ((HEAP8[$6 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 17754
            }
            $63 = $5 + 52 | 0; //@line 17756
            if ((HEAP8[$63 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$63 >> 2] | 0); //@line 17762
            }
            $68 = $5 + 40 | 0; //@line 17764
            $69 = HEAP32[$68 >> 2] | 0; //@line 17765
            if ($69 | 0) {
             $71 = $5 + 44 | 0; //@line 17768
             $72 = HEAP32[$71 >> 2] | 0; //@line 17769
             do {
              if (($72 | 0) == ($69 | 0)) {
               $83 = $69; //@line 17773
              } else {
               $74 = $5 + 48 | 0; //@line 17775
               $76 = $72; //@line 17776
               while (1) {
                $75 = $76 + -72 | 0; //@line 17778
                HEAP32[$71 >> 2] = $75; //@line 17779
                __THREW__ = 0; //@line 17780
                HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17781
                invoke_viii(13, $$byval_copy5 | 0, $74 | 0, $75 | 0); //@line 17782
                $77 = __THREW__; //@line 17783
                __THREW__ = 0; //@line 17783
                if ($77 & 1) {
                 label = 31; //@line 17786
                 break;
                }
                $76 = HEAP32[$71 >> 2] | 0; //@line 17789
                if (($76 | 0) == ($69 | 0)) {
                 label = 32; //@line 17792
                 break;
                }
               }
               if ((label | 0) == 31) {
                $81 = ___cxa_find_matching_catch_3(0) | 0; //@line 17799
                ___clang_call_terminate($81); //@line 17801
               } else if ((label | 0) == 32) {
                $83 = HEAP32[$68 >> 2] | 0; //@line 17806
                break;
               }
              }
             } while (0);
             __ZdlPv($83); //@line 17811
            }
            if ((HEAP8[$40 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$40 >> 2] | 0); //@line 17818
            }
            $88 = $4 + 52 | 0; //@line 17820
            if ((HEAP8[$88 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$88 >> 2] | 0); //@line 17826
            }
            $93 = $4 + 40 | 0; //@line 17828
            $94 = HEAP32[$93 >> 2] | 0; //@line 17829
            if ($94 | 0) {
             $96 = $4 + 44 | 0; //@line 17832
             $97 = HEAP32[$96 >> 2] | 0; //@line 17833
             do {
              if (($97 | 0) == ($94 | 0)) {
               $108 = $94; //@line 17837
              } else {
               $99 = $4 + 48 | 0; //@line 17839
               $101 = $97; //@line 17840
               while (1) {
                $100 = $101 + -72 | 0; //@line 17842
                HEAP32[$96 >> 2] = $100; //@line 17843
                __THREW__ = 0; //@line 17844
                HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17845
                invoke_viii(13, $$byval_copy5 | 0, $99 | 0, $100 | 0); //@line 17846
                $102 = __THREW__; //@line 17847
                __THREW__ = 0; //@line 17847
                if ($102 & 1) {
                 label = 43; //@line 17850
                 break;
                }
                $101 = HEAP32[$96 >> 2] | 0; //@line 17853
                if (($101 | 0) == ($94 | 0)) {
                 label = 44; //@line 17856
                 break;
                }
               }
               if ((label | 0) == 43) {
                $106 = ___cxa_find_matching_catch_3(0) | 0; //@line 17863
                ___clang_call_terminate($106); //@line 17865
               } else if ((label | 0) == 44) {
                $108 = HEAP32[$93 >> 2] | 0; //@line 17870
                break;
               }
              }
             } while (0);
             __ZdlPv($108); //@line 17875
            }
            if ((HEAP8[$43 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$43 >> 2] | 0); //@line 17882
            }
            $113 = $3 + 52 | 0; //@line 17884
            if ((HEAP8[$113 + 11 >> 0] | 0) < 0) {
             __ZdlPv(HEAP32[$113 >> 2] | 0); //@line 17890
            }
            $118 = $3 + 40 | 0; //@line 17892
            $119 = HEAP32[$118 >> 2] | 0; //@line 17893
            if ($119 | 0) {
             $121 = $3 + 44 | 0; //@line 17896
             $122 = HEAP32[$121 >> 2] | 0; //@line 17897
             do {
              if (($122 | 0) == ($119 | 0)) {
               $133 = $119; //@line 17901
              } else {
               $124 = $3 + 48 | 0; //@line 17903
               $126 = $122; //@line 17904
               while (1) {
                $125 = $126 + -72 | 0; //@line 17906
                HEAP32[$121 >> 2] = $125; //@line 17907
                __THREW__ = 0; //@line 17908
                HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17909
                invoke_viii(13, $$byval_copy5 | 0, $124 | 0, $125 | 0); //@line 17910
                $127 = __THREW__; //@line 17911
                __THREW__ = 0; //@line 17911
                if ($127 & 1) {
                 label = 55; //@line 17914
                 break;
                }
                $126 = HEAP32[$121 >> 2] | 0; //@line 17917
                if (($126 | 0) == ($119 | 0)) {
                 label = 56; //@line 17920
                 break;
                }
               }
               if ((label | 0) == 55) {
                $131 = ___cxa_find_matching_catch_3(0) | 0; //@line 17927
                ___clang_call_terminate($131); //@line 17929
               } else if ((label | 0) == 56) {
                $133 = HEAP32[$118 >> 2] | 0; //@line 17934
                break;
               }
              }
             } while (0);
             __ZdlPv($133); //@line 17939
            }
            if ((HEAP8[$46 + 11 >> 0] | 0) >= 0) {
             STACKTOP = sp; //@line 17945
             return;
            }
            __ZdlPv(HEAP32[$46 >> 2] | 0); //@line 17948
            STACKTOP = sp; //@line 17949
            return;
           }
          } while (0);
          if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
           __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 17957
           $$1$i$i$i = $$0$i$i$i; //@line 17958
           $$17$i$i$i = $$06$i$i$i; //@line 17958
          } else {
           $$1$i$i$i = $$0$i$i$i; //@line 17960
           $$17$i$i$i = $$06$i$i$i; //@line 17960
          }
         }
         if ((HEAP8[$6 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 17968
          $$2$i$i$i = $$1$i$i$i; //@line 17969
          $$28$i$i$i = $$17$i$i$i; //@line 17969
         } else {
          $$2$i$i$i = $$1$i$i$i; //@line 17971
          $$28$i$i$i = $$17$i$i$i; //@line 17971
         }
        }
       } else {
        label = 8; //@line 17975
       }
      } else {
       label = 8; //@line 17978
      }
     } else {
      label = 8; //@line 17981
     }
     do {
      if ((label | 0) == 8) {
       $26 = ___cxa_allocate_exception(8) | 0; //@line 17985
       __THREW__ = 0; //@line 17986
       invoke_vii(125, $26 | 0, 19689); //@line 17987
       $27 = __THREW__; //@line 17988
       __THREW__ = 0; //@line 17988
       if ($27 & 1) {
        $34 = ___cxa_find_matching_catch_2() | 0; //@line 17991
        $35 = tempRet0; //@line 17992
        ___cxa_free_exception($26 | 0); //@line 17993
        $$2$i$i$i = $35; //@line 17994
        $$28$i$i$i = $34; //@line 17994
        break;
       } else {
        __THREW__ = 0; //@line 17997
        invoke_viii(16, $26 | 0, 2824, 242); //@line 17998
        __THREW__ = 0; //@line 17999
        label = 13; //@line 18000
        break;
       }
      }
     } while (0);
     if ((label | 0) == 13) {
      $36 = ___cxa_find_matching_catch_2() | 0; //@line 18006
      $$2$i$i$i = tempRet0; //@line 18008
      $$28$i$i$i = $36; //@line 18008
     }
     $156 = $5 + 52 | 0; //@line 18010
     if ((HEAP8[$156 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$156 >> 2] | 0); //@line 18016
     }
     $161 = $5 + 40 | 0; //@line 18018
     $162 = HEAP32[$161 >> 2] | 0; //@line 18019
     if ($162 | 0) {
      $164 = $5 + 44 | 0; //@line 18022
      $165 = HEAP32[$164 >> 2] | 0; //@line 18023
      do {
       if (($165 | 0) == ($162 | 0)) {
        $176 = $162; //@line 18027
       } else {
        $167 = $5 + 48 | 0; //@line 18029
        $169 = $165; //@line 18030
        while (1) {
         $168 = $169 + -72 | 0; //@line 18032
         HEAP32[$164 >> 2] = $168; //@line 18033
         __THREW__ = 0; //@line 18034
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 18035
         invoke_viii(13, $$byval_copy5 | 0, $167 | 0, $168 | 0); //@line 18036
         $170 = __THREW__; //@line 18037
         __THREW__ = 0; //@line 18037
         if ($170 & 1) {
          label = 75; //@line 18040
          break;
         }
         $169 = HEAP32[$164 >> 2] | 0; //@line 18043
         if (($169 | 0) == ($162 | 0)) {
          label = 76; //@line 18046
          break;
         }
        }
        if ((label | 0) == 75) {
         $174 = ___cxa_find_matching_catch_3(0) | 0; //@line 18053
         ___clang_call_terminate($174); //@line 18055
        } else if ((label | 0) == 76) {
         $176 = HEAP32[$161 >> 2] | 0; //@line 18060
         break;
        }
       }
      } while (0);
      __ZdlPv($176); //@line 18065
     }
     $177 = $5 + 4 | 0; //@line 18067
     if ((HEAP8[$177 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$177 >> 2] | 0); //@line 18073
      $$3$i$i$i = $$2$i$i$i; //@line 18074
      $$39$i$i$i = $$28$i$i$i; //@line 18074
     } else {
      $$3$i$i$i = $$2$i$i$i; //@line 18076
      $$39$i$i$i = $$28$i$i$i; //@line 18076
     }
    }
   }
   if ((label | 0) == 11) {
    $32 = ___cxa_find_matching_catch_2() | 0; //@line 18081
    $$3$i$i$i = tempRet0; //@line 18083
    $$39$i$i$i = $32; //@line 18083
   }
   $182 = $4 + 52 | 0; //@line 18085
   if ((HEAP8[$182 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$182 >> 2] | 0); //@line 18091
   }
   $187 = $4 + 40 | 0; //@line 18093
   $188 = HEAP32[$187 >> 2] | 0; //@line 18094
   if ($188 | 0) {
    $190 = $4 + 44 | 0; //@line 18097
    $191 = HEAP32[$190 >> 2] | 0; //@line 18098
    do {
     if (($191 | 0) == ($188 | 0)) {
      $202 = $188; //@line 18102
     } else {
      $193 = $4 + 48 | 0; //@line 18104
      $195 = $191; //@line 18105
      while (1) {
       $194 = $195 + -72 | 0; //@line 18107
       HEAP32[$190 >> 2] = $194; //@line 18108
       __THREW__ = 0; //@line 18109
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 18110
       invoke_viii(13, $$byval_copy5 | 0, $193 | 0, $194 | 0); //@line 18111
       $196 = __THREW__; //@line 18112
       __THREW__ = 0; //@line 18112
       if ($196 & 1) {
        label = 87; //@line 18115
        break;
       }
       $195 = HEAP32[$190 >> 2] | 0; //@line 18118
       if (($195 | 0) == ($188 | 0)) {
        label = 88; //@line 18121
        break;
       }
      }
      if ((label | 0) == 87) {
       $200 = ___cxa_find_matching_catch_3(0) | 0; //@line 18128
       ___clang_call_terminate($200); //@line 18130
      } else if ((label | 0) == 88) {
       $202 = HEAP32[$187 >> 2] | 0; //@line 18135
       break;
      }
     }
    } while (0);
    __ZdlPv($202); //@line 18140
   }
   $203 = $4 + 4 | 0; //@line 18142
   if ((HEAP8[$203 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$203 >> 2] | 0); //@line 18148
    $$4$i$i$i = $$3$i$i$i; //@line 18149
    $$410$i$i$i = $$39$i$i$i; //@line 18149
   } else {
    $$4$i$i$i = $$3$i$i$i; //@line 18151
    $$410$i$i$i = $$39$i$i$i; //@line 18151
   }
  }
 }
 if ((label | 0) == 10) {
  $30 = ___cxa_find_matching_catch_2() | 0; //@line 18156
  $$4$i$i$i = tempRet0; //@line 18158
  $$410$i$i$i = $30; //@line 18158
 }
 $208 = $3 + 52 | 0; //@line 18160
 if ((HEAP8[$208 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$208 >> 2] | 0); //@line 18166
 }
 $213 = $3 + 40 | 0; //@line 18168
 $214 = HEAP32[$213 >> 2] | 0; //@line 18169
 if ($214 | 0) {
  $216 = $3 + 44 | 0; //@line 18172
  $217 = HEAP32[$216 >> 2] | 0; //@line 18173
  do {
   if (($217 | 0) == ($214 | 0)) {
    $228 = $214; //@line 18177
   } else {
    $219 = $3 + 48 | 0; //@line 18179
    $221 = $217; //@line 18180
    while (1) {
     $220 = $221 + -72 | 0; //@line 18182
     HEAP32[$216 >> 2] = $220; //@line 18183
     __THREW__ = 0; //@line 18184
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 18185
     invoke_viii(13, $$byval_copy5 | 0, $219 | 0, $220 | 0); //@line 18186
     $222 = __THREW__; //@line 18187
     __THREW__ = 0; //@line 18187
     if ($222 & 1) {
      label = 99; //@line 18190
      break;
     }
     $221 = HEAP32[$216 >> 2] | 0; //@line 18193
     if (($221 | 0) == ($214 | 0)) {
      label = 100; //@line 18196
      break;
     }
    }
    if ((label | 0) == 99) {
     $226 = ___cxa_find_matching_catch_3(0) | 0; //@line 18203
     ___clang_call_terminate($226); //@line 18205
    } else if ((label | 0) == 100) {
     $228 = HEAP32[$213 >> 2] | 0; //@line 18210
     break;
    }
   }
  } while (0);
  __ZdlPv($228); //@line 18215
 }
 $229 = $3 + 4 | 0; //@line 18217
 if ((HEAP8[$229 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$410$i$i$i | 0); //@line 18222
 }
 __ZdlPv(HEAP32[$229 >> 2] | 0); //@line 18226
 ___resumeException($$410$i$i$i | 0); //@line 18227
}
function __ZNSt3__26locale5__impC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i$i = 0, $$03 = 0, $$1 = 0, $$14 = 0, $101 = 0, $103 = 0, $105 = 0, $107 = 0, $109 = 0, $111 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $131 = 0, $133 = 0, $135 = 0, $137 = 0, $139 = 0, $140 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 58911
 STACKTOP = STACKTOP + 16 | 0; //@line 58912
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 58912
 $2 = sp; //@line 58913
 HEAP32[$0 + 4 >> 2] = $1 + -1; //@line 58916
 HEAP32[$0 >> 2] = 12520; //@line 58917
 $5 = $0 + 8 | 0; //@line 58918
 __THREW__ = 0; //@line 58919
 invoke_vii(150, $5 | 0, 28); //@line 58920
 $6 = __THREW__; //@line 58921
 __THREW__ = 0; //@line 58921
 if ($6 & 1) {
  $135 = ___cxa_find_matching_catch_2() | 0; //@line 58924
  $$1 = tempRet0; //@line 58926
  $$14 = $135; //@line 58926
 } else {
  $8 = $0 + 144 | 0; //@line 58928
  HEAP32[$8 >> 2] = 0; //@line 58929
  HEAP32[$8 + 4 >> 2] = 0; //@line 58929
  HEAP32[$8 + 8 >> 2] = 0; //@line 58929
  $9 = __ZNSt3__211char_traitsIcE6lengthEPKc(29802) | 0; //@line 58930
  do {
   if ($9 >>> 0 > 4294967279) {
    __THREW__ = 0; //@line 58934
    invoke_vi(258, $8 | 0); //@line 58935
    __THREW__ = 0; //@line 58936
    label = 66; //@line 58937
   } else {
    if ($9 >>> 0 < 11) {
     HEAP8[$8 + 11 >> 0] = $9; //@line 58943
     $$0$i$i = $8; //@line 58944
    } else {
     $16 = $9 + 16 & -16; //@line 58947
     __THREW__ = 0; //@line 58948
     $17 = invoke_ii(142, $16 | 0) | 0; //@line 58949
     $18 = __THREW__; //@line 58950
     __THREW__ = 0; //@line 58950
     if ($18 & 1) {
      label = 66; //@line 58953
      break;
     }
     HEAP32[$8 >> 2] = $17; //@line 58956
     HEAP32[$0 + 152 >> 2] = $16 | -2147483648; //@line 58959
     HEAP32[$0 + 148 >> 2] = $9; //@line 58961
     $$0$i$i = $17; //@line 58962
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 29802, $9) | 0; //@line 58964
    HEAP8[$2 >> 0] = 0; //@line 58966
    __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $9 | 0, $2); //@line 58967
    $24 = HEAP32[$5 >> 2] | 0; //@line 58968
    $25 = $0 + 12 | 0; //@line 58969
    $26 = HEAP32[$25 >> 2] | 0; //@line 58971
    while (1) {
     if (($26 | 0) == ($24 | 0)) {
      break;
     }
     $28 = $26 + -4 | 0; //@line 58977
     HEAP32[$25 >> 2] = $28; //@line 58978
     $26 = $28; //@line 58979
    }
    __THREW__ = 0; //@line 58981
    invoke_v(11); //@line 58982
    $29 = __THREW__; //@line 58983
    __THREW__ = 0; //@line 58983
    do {
     if (!($29 & 1)) {
      __THREW__ = 0; //@line 58987
      invoke_vii(151, $0 | 0, 33344); //@line 58988
      $31 = __THREW__; //@line 58989
      __THREW__ = 0; //@line 58989
      if (!($31 & 1)) {
       __THREW__ = 0; //@line 58992
       invoke_v(12); //@line 58993
       $33 = __THREW__; //@line 58994
       __THREW__ = 0; //@line 58994
       if (!($33 & 1)) {
        __THREW__ = 0; //@line 58997
        invoke_vii(152, $0 | 0, 33352); //@line 58998
        $35 = __THREW__; //@line 58999
        __THREW__ = 0; //@line 58999
        if (!($35 & 1)) {
         __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_(); //@line 59002
         __THREW__ = 0; //@line 59003
         invoke_vii(153, $0 | 0, 33360); //@line 59004
         $37 = __THREW__; //@line 59005
         __THREW__ = 0; //@line 59005
         if (!($37 & 1)) {
          __THREW__ = 0; //@line 59008
          invoke_v(13); //@line 59009
          $39 = __THREW__; //@line 59010
          __THREW__ = 0; //@line 59010
          if (!($39 & 1)) {
           __THREW__ = 0; //@line 59013
           invoke_vii(154, $0 | 0, 33376); //@line 59014
           $41 = __THREW__; //@line 59015
           __THREW__ = 0; //@line 59015
           if (!($41 & 1)) {
            __THREW__ = 0; //@line 59018
            invoke_v(14); //@line 59019
            $43 = __THREW__; //@line 59020
            __THREW__ = 0; //@line 59020
            if (!($43 & 1)) {
             __THREW__ = 0; //@line 59023
             invoke_vii(155, $0 | 0, 33384); //@line 59024
             $45 = __THREW__; //@line 59025
             __THREW__ = 0; //@line 59025
             if (!($45 & 1)) {
              __THREW__ = 0; //@line 59028
              invoke_v(15); //@line 59029
              $47 = __THREW__; //@line 59030
              __THREW__ = 0; //@line 59030
              if (!($47 & 1)) {
               __THREW__ = 0; //@line 59033
               invoke_vii(156, $0 | 0, 33392); //@line 59034
               $49 = __THREW__; //@line 59035
               __THREW__ = 0; //@line 59035
               if (!($49 & 1)) {
                __THREW__ = 0; //@line 59038
                invoke_v(16); //@line 59039
                $51 = __THREW__; //@line 59040
                __THREW__ = 0; //@line 59040
                if (!($51 & 1)) {
                 __THREW__ = 0; //@line 59043
                 invoke_vii(157, $0 | 0, 33408); //@line 59044
                 $53 = __THREW__; //@line 59045
                 __THREW__ = 0; //@line 59045
                 if (!($53 & 1)) {
                  __THREW__ = 0; //@line 59048
                  invoke_v(17); //@line 59049
                  $55 = __THREW__; //@line 59050
                  __THREW__ = 0; //@line 59050
                  if (!($55 & 1)) {
                   __THREW__ = 0; //@line 59053
                   invoke_vii(158, $0 | 0, 33416); //@line 59054
                   $57 = __THREW__; //@line 59055
                   __THREW__ = 0; //@line 59055
                   if ($57 & 1) {
                    break;
                   }
                   __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_(); //@line 59060
                   __THREW__ = 0; //@line 59061
                   invoke_vii(159, $0 | 0, 33424); //@line 59062
                   $59 = __THREW__; //@line 59063
                   __THREW__ = 0; //@line 59063
                   if ($59 & 1) {
                    break;
                   }
                   __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_(); //@line 59068
                   __THREW__ = 0; //@line 59069
                   invoke_vii(160, $0 | 0, 33448); //@line 59070
                   $61 = __THREW__; //@line 59071
                   __THREW__ = 0; //@line 59071
                   if ($61 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59076
                   invoke_v(18); //@line 59077
                   $63 = __THREW__; //@line 59078
                   __THREW__ = 0; //@line 59078
                   if ($63 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59083
                   invoke_vii(161, $0 | 0, 33480); //@line 59084
                   $65 = __THREW__; //@line 59085
                   __THREW__ = 0; //@line 59085
                   if ($65 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59090
                   invoke_v(19); //@line 59091
                   $67 = __THREW__; //@line 59092
                   __THREW__ = 0; //@line 59092
                   if ($67 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59097
                   invoke_vii(162, $0 | 0, 33488); //@line 59098
                   $69 = __THREW__; //@line 59099
                   __THREW__ = 0; //@line 59099
                   if ($69 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59104
                   invoke_v(20); //@line 59105
                   $71 = __THREW__; //@line 59106
                   __THREW__ = 0; //@line 59106
                   if ($71 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59111
                   invoke_vii(163, $0 | 0, 33496); //@line 59112
                   $73 = __THREW__; //@line 59113
                   __THREW__ = 0; //@line 59113
                   if ($73 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59118
                   invoke_v(21); //@line 59119
                   $75 = __THREW__; //@line 59120
                   __THREW__ = 0; //@line 59120
                   if ($75 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59125
                   invoke_vii(164, $0 | 0, 33504); //@line 59126
                   $77 = __THREW__; //@line 59127
                   __THREW__ = 0; //@line 59127
                   if ($77 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59132
                   invoke_v(22); //@line 59133
                   $79 = __THREW__; //@line 59134
                   __THREW__ = 0; //@line 59134
                   if ($79 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59139
                   invoke_vii(165, $0 | 0, 33512); //@line 59140
                   $81 = __THREW__; //@line 59141
                   __THREW__ = 0; //@line 59141
                   if ($81 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59146
                   invoke_v(23); //@line 59147
                   $83 = __THREW__; //@line 59148
                   __THREW__ = 0; //@line 59148
                   if ($83 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59153
                   invoke_vii(166, $0 | 0, 33520); //@line 59154
                   $85 = __THREW__; //@line 59155
                   __THREW__ = 0; //@line 59155
                   if ($85 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59160
                   invoke_v(24); //@line 59161
                   $87 = __THREW__; //@line 59162
                   __THREW__ = 0; //@line 59162
                   if ($87 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59167
                   invoke_vii(167, $0 | 0, 33528); //@line 59168
                   $89 = __THREW__; //@line 59169
                   __THREW__ = 0; //@line 59169
                   if ($89 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59174
                   invoke_v(25); //@line 59175
                   $91 = __THREW__; //@line 59176
                   __THREW__ = 0; //@line 59176
                   if ($91 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59181
                   invoke_vii(168, $0 | 0, 33536); //@line 59182
                   $93 = __THREW__; //@line 59183
                   __THREW__ = 0; //@line 59183
                   if ($93 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59188
                   invoke_v(26); //@line 59189
                   $95 = __THREW__; //@line 59190
                   __THREW__ = 0; //@line 59190
                   if ($95 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59195
                   invoke_vii(169, $0 | 0, 33544); //@line 59196
                   $97 = __THREW__; //@line 59197
                   __THREW__ = 0; //@line 59197
                   if ($97 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59202
                   invoke_v(27); //@line 59203
                   $99 = __THREW__; //@line 59204
                   __THREW__ = 0; //@line 59204
                   if ($99 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59209
                   invoke_vii(170, $0 | 0, 33552); //@line 59210
                   $101 = __THREW__; //@line 59211
                   __THREW__ = 0; //@line 59211
                   if ($101 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59216
                   invoke_v(28); //@line 59217
                   $103 = __THREW__; //@line 59218
                   __THREW__ = 0; //@line 59218
                   if ($103 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59223
                   invoke_vii(171, $0 | 0, 33560); //@line 59224
                   $105 = __THREW__; //@line 59225
                   __THREW__ = 0; //@line 59225
                   if ($105 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59230
                   invoke_v(29); //@line 59231
                   $107 = __THREW__; //@line 59232
                   __THREW__ = 0; //@line 59232
                   if ($107 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59237
                   invoke_vii(172, $0 | 0, 33568); //@line 59238
                   $109 = __THREW__; //@line 59239
                   __THREW__ = 0; //@line 59239
                   if ($109 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59244
                   invoke_v(30); //@line 59245
                   $111 = __THREW__; //@line 59246
                   __THREW__ = 0; //@line 59246
                   if ($111 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59251
                   invoke_vii(173, $0 | 0, 33576); //@line 59252
                   $113 = __THREW__; //@line 59253
                   __THREW__ = 0; //@line 59253
                   if ($113 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59258
                   invoke_v(31); //@line 59259
                   $115 = __THREW__; //@line 59260
                   __THREW__ = 0; //@line 59260
                   if ($115 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59265
                   invoke_vii(174, $0 | 0, 33592); //@line 59266
                   $117 = __THREW__; //@line 59267
                   __THREW__ = 0; //@line 59267
                   if ($117 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59272
                   invoke_v(32); //@line 59273
                   $119 = __THREW__; //@line 59274
                   __THREW__ = 0; //@line 59274
                   if ($119 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59279
                   invoke_vii(175, $0 | 0, 33608); //@line 59280
                   $121 = __THREW__; //@line 59281
                   __THREW__ = 0; //@line 59281
                   if ($121 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59286
                   invoke_v(33); //@line 59287
                   $123 = __THREW__; //@line 59288
                   __THREW__ = 0; //@line 59288
                   if ($123 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59293
                   invoke_vii(176, $0 | 0, 33624); //@line 59294
                   $125 = __THREW__; //@line 59295
                   __THREW__ = 0; //@line 59295
                   if ($125 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59300
                   invoke_v(34); //@line 59301
                   $127 = __THREW__; //@line 59302
                   __THREW__ = 0; //@line 59302
                   if ($127 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59307
                   invoke_vii(177, $0 | 0, 33640); //@line 59308
                   $129 = __THREW__; //@line 59309
                   __THREW__ = 0; //@line 59309
                   if ($129 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59314
                   invoke_v(35); //@line 59315
                   $131 = __THREW__; //@line 59316
                   __THREW__ = 0; //@line 59316
                   if ($131 & 1) {
                    break;
                   }
                   __THREW__ = 0; //@line 59321
                   invoke_vii(178, $0 | 0, 33648); //@line 59322
                   $133 = __THREW__; //@line 59323
                   __THREW__ = 0; //@line 59323
                   if ($133 & 1) {
                    break;
                   }
                   STACKTOP = sp; //@line 59328
                   return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while (0);
    $139 = ___cxa_find_matching_catch_2() | 0; //@line 59344
    $140 = tempRet0; //@line 59345
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 59346
    $$0 = $140; //@line 59347
    $$03 = $139; //@line 59347
   }
  } while (0);
  if ((label | 0) == 66) {
   $137 = ___cxa_find_matching_catch_2() | 0; //@line 59351
   $$0 = tempRet0; //@line 59353
   $$03 = $137; //@line 59353
  }
  __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($5); //@line 59355
  $$1 = $$0; //@line 59356
  $$14 = $$03; //@line 59356
 }
 __ZNSt3__26locale5facetD2Ev($0); //@line 59358
 ___resumeException($$14 | 0); //@line 59359
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$05$i$i$i = 0, $$1$i$i$i = 0, $$16$i$i$i = 0, $$byval_copy7 = 0, $$val = 0, $101 = 0, $103 = 0, $104 = 0, $109 = 0, $11 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $135 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $167 = 0, $17 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $185 = 0, $187 = 0, $192 = 0, $197 = 0, $198 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $210 = 0, $212 = 0, $213 = 0, $218 = 0, $223 = 0, $224 = 0, $226 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $238 = 0, $239 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $78 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16947
 STACKTOP = STACKTOP + 304 | 0; //@line 16948
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 16948
 $$byval_copy7 = sp + 289 | 0; //@line 16949
 $2 = sp + 288 | 0; //@line 16950
 $3 = sp + 216 | 0; //@line 16951
 $4 = sp + 144 | 0; //@line 16952
 $5 = sp + 72 | 0; //@line 16953
 $6 = sp; //@line 16954
 $$val = HEAP32[$1 >> 2] | 0; //@line 16955
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 16957
 __THREW__ = 0; //@line 16958
 $8 = invoke_ii(143, $$val | 0) | 0; //@line 16959
 $9 = __THREW__; //@line 16960
 __THREW__ = 0; //@line 16960
 if ($9 & 1) {
  label = 55; //@line 16963
 } else {
  __THREW__ = 0; //@line 16965
  invoke_vii(131, $4 | 0, $8 | 0); //@line 16966
  $11 = __THREW__; //@line 16967
  __THREW__ = 0; //@line 16967
  if ($11 & 1) {
   label = 55; //@line 16970
  } else {
   $13 = $5 + 4 | 0; //@line 16972
   HEAP32[$13 >> 2] = 0; //@line 16973
   HEAP32[$13 + 4 >> 2] = 0; //@line 16973
   HEAP32[$13 + 8 >> 2] = 0; //@line 16973
   $14 = $5 + 40 | 0; //@line 16974
   HEAP32[$14 >> 2] = 0; //@line 16975
   HEAP32[$14 + 4 >> 2] = 0; //@line 16975
   HEAP32[$14 + 8 >> 2] = 0; //@line 16975
   HEAP32[$14 + 12 >> 2] = 0; //@line 16975
   HEAP32[$14 + 16 >> 2] = 0; //@line 16975
   HEAP32[$14 + 20 >> 2] = 0; //@line 16975
   HEAP32[$5 >> 2] = 2; //@line 16976
   HEAP32[$5 + 16 >> 2] = 0; //@line 16978
   __THREW__ = 0; //@line 16979
   $16 = invoke_iii(58, $3 | 0, $4 | 0) | 0; //@line 16980
   $17 = __THREW__; //@line 16981
   __THREW__ = 0; //@line 16981
   do {
    if ($17 & 1) {
     label = 56; //@line 16985
    } else {
     $21 = $5 + 24 | 0; //@line 16989
     HEAP32[$21 >> 2] = $16 & 1; //@line 16991
     HEAP32[$21 + 4 >> 2] = 0; //@line 16994
     __THREW__ = 0; //@line 16995
     $25 = invoke_ii(143, $$val | 0) | 0; //@line 16996
     $26 = __THREW__; //@line 16997
     __THREW__ = 0; //@line 16997
     if ($26 & 1) {
      label = 56; //@line 17000
     } else {
      __THREW__ = 0; //@line 17002
      invoke_vii(120, $6 | 0, $5 | 0); //@line 17003
      $28 = __THREW__; //@line 17004
      __THREW__ = 0; //@line 17004
      if ($28 & 1) {
       label = 56; //@line 17007
      } else {
       __THREW__ = 0; //@line 17009
       invoke_vii(128, $25 | 0, $6 | 0); //@line 17010
       $30 = __THREW__; //@line 17011
       __THREW__ = 0; //@line 17011
       if ($30 & 1) {
        $139 = ___cxa_find_matching_catch_2() | 0; //@line 17014
        $140 = tempRet0; //@line 17015
        $141 = $6 + 52 | 0; //@line 17016
        if ((HEAP8[$141 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$141 >> 2] | 0); //@line 17022
        }
        $146 = $6 + 40 | 0; //@line 17024
        $147 = HEAP32[$146 >> 2] | 0; //@line 17025
        if ($147 | 0) {
         $149 = $6 + 44 | 0; //@line 17028
         $150 = HEAP32[$149 >> 2] | 0; //@line 17029
         do {
          if (($150 | 0) == ($147 | 0)) {
           $161 = $147; //@line 17033
          } else {
           $152 = $6 + 48 | 0; //@line 17035
           $154 = $150; //@line 17036
           while (1) {
            $153 = $154 + -72 | 0; //@line 17038
            HEAP32[$149 >> 2] = $153; //@line 17039
            __THREW__ = 0; //@line 17040
            HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17041
            invoke_viii(13, $$byval_copy7 | 0, $152 | 0, $153 | 0); //@line 17042
            $155 = __THREW__; //@line 17043
            __THREW__ = 0; //@line 17043
            if ($155 & 1) {
             label = 64; //@line 17046
             break;
            }
            $154 = HEAP32[$149 >> 2] | 0; //@line 17049
            if (($154 | 0) == ($147 | 0)) {
             label = 65; //@line 17052
             break;
            }
           }
           if ((label | 0) == 64) {
            $159 = ___cxa_find_matching_catch_3(0) | 0; //@line 17059
            ___clang_call_terminate($159); //@line 17061
           } else if ((label | 0) == 65) {
            $161 = HEAP32[$146 >> 2] | 0; //@line 17066
            break;
           }
          }
         } while (0);
         __ZdlPv($161); //@line 17071
        }
        $162 = $6 + 4 | 0; //@line 17073
        if ((HEAP8[$162 + 11 >> 0] | 0) >= 0) {
         $$0$i$i$i = $140; //@line 17078
         $$05$i$i$i = $139; //@line 17078
         break;
        }
        __ZdlPv(HEAP32[$162 >> 2] | 0); //@line 17082
        $$0$i$i$i = $140; //@line 17083
        $$05$i$i$i = $139; //@line 17083
        break;
       }
       $32 = $6 + 52 | 0; //@line 17086
       if ((HEAP8[$32 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$32 >> 2] | 0); //@line 17092
       }
       $37 = $6 + 40 | 0; //@line 17094
       $38 = HEAP32[$37 >> 2] | 0; //@line 17095
       if ($38 | 0) {
        $40 = $6 + 44 | 0; //@line 17098
        $41 = HEAP32[$40 >> 2] | 0; //@line 17099
        do {
         if (($41 | 0) == ($38 | 0)) {
          $52 = $38; //@line 17103
         } else {
          $43 = $6 + 48 | 0; //@line 17105
          $45 = $41; //@line 17106
          while (1) {
           $44 = $45 + -72 | 0; //@line 17108
           HEAP32[$40 >> 2] = $44; //@line 17109
           __THREW__ = 0; //@line 17110
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17111
           invoke_viii(13, $$byval_copy7 | 0, $43 | 0, $44 | 0); //@line 17112
           $46 = __THREW__; //@line 17113
           __THREW__ = 0; //@line 17113
           if ($46 & 1) {
            label = 14; //@line 17116
            break;
           }
           $45 = HEAP32[$40 >> 2] | 0; //@line 17119
           if (($45 | 0) == ($38 | 0)) {
            label = 15; //@line 17122
            break;
           }
          }
          if ((label | 0) == 14) {
           $50 = ___cxa_find_matching_catch_3(0) | 0; //@line 17129
           ___clang_call_terminate($50); //@line 17131
          } else if ((label | 0) == 15) {
           $52 = HEAP32[$37 >> 2] | 0; //@line 17136
           break;
          }
         }
        } while (0);
        __ZdlPv($52); //@line 17141
       }
       $53 = $6 + 4 | 0; //@line 17143
       if ((HEAP8[$53 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$53 >> 2] | 0); //@line 17149
       }
       $58 = $5 + 52 | 0; //@line 17151
       if ((HEAP8[$58 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$58 >> 2] | 0); //@line 17157
       }
       $63 = $5 + 40 | 0; //@line 17159
       $64 = HEAP32[$63 >> 2] | 0; //@line 17160
       if ($64 | 0) {
        $66 = $5 + 44 | 0; //@line 17163
        $67 = HEAP32[$66 >> 2] | 0; //@line 17164
        do {
         if (($67 | 0) == ($64 | 0)) {
          $78 = $64; //@line 17168
         } else {
          $69 = $5 + 48 | 0; //@line 17170
          $71 = $67; //@line 17171
          while (1) {
           $70 = $71 + -72 | 0; //@line 17173
           HEAP32[$66 >> 2] = $70; //@line 17174
           __THREW__ = 0; //@line 17175
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17176
           invoke_viii(13, $$byval_copy7 | 0, $69 | 0, $70 | 0); //@line 17177
           $72 = __THREW__; //@line 17178
           __THREW__ = 0; //@line 17178
           if ($72 & 1) {
            label = 26; //@line 17181
            break;
           }
           $71 = HEAP32[$66 >> 2] | 0; //@line 17184
           if (($71 | 0) == ($64 | 0)) {
            label = 27; //@line 17187
            break;
           }
          }
          if ((label | 0) == 26) {
           $76 = ___cxa_find_matching_catch_3(0) | 0; //@line 17194
           ___clang_call_terminate($76); //@line 17196
          } else if ((label | 0) == 27) {
           $78 = HEAP32[$63 >> 2] | 0; //@line 17201
           break;
          }
         }
        } while (0);
        __ZdlPv($78); //@line 17206
       }
       if ((HEAP8[$13 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$13 >> 2] | 0); //@line 17213
       }
       $83 = $4 + 52 | 0; //@line 17215
       if ((HEAP8[$83 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$83 >> 2] | 0); //@line 17221
       }
       $88 = $4 + 40 | 0; //@line 17223
       $89 = HEAP32[$88 >> 2] | 0; //@line 17224
       if ($89 | 0) {
        $91 = $4 + 44 | 0; //@line 17227
        $92 = HEAP32[$91 >> 2] | 0; //@line 17228
        do {
         if (($92 | 0) == ($89 | 0)) {
          $103 = $89; //@line 17232
         } else {
          $94 = $4 + 48 | 0; //@line 17234
          $96 = $92; //@line 17235
          while (1) {
           $95 = $96 + -72 | 0; //@line 17237
           HEAP32[$91 >> 2] = $95; //@line 17238
           __THREW__ = 0; //@line 17239
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17240
           invoke_viii(13, $$byval_copy7 | 0, $94 | 0, $95 | 0); //@line 17241
           $97 = __THREW__; //@line 17242
           __THREW__ = 0; //@line 17242
           if ($97 & 1) {
            label = 38; //@line 17245
            break;
           }
           $96 = HEAP32[$91 >> 2] | 0; //@line 17248
           if (($96 | 0) == ($89 | 0)) {
            label = 39; //@line 17251
            break;
           }
          }
          if ((label | 0) == 38) {
           $101 = ___cxa_find_matching_catch_3(0) | 0; //@line 17258
           ___clang_call_terminate($101); //@line 17260
          } else if ((label | 0) == 39) {
           $103 = HEAP32[$88 >> 2] | 0; //@line 17265
           break;
          }
         }
        } while (0);
        __ZdlPv($103); //@line 17270
       }
       $104 = $4 + 4 | 0; //@line 17272
       if ((HEAP8[$104 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$104 >> 2] | 0); //@line 17278
       }
       $109 = $3 + 52 | 0; //@line 17280
       if ((HEAP8[$109 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$109 >> 2] | 0); //@line 17286
       }
       $114 = $3 + 40 | 0; //@line 17288
       $115 = HEAP32[$114 >> 2] | 0; //@line 17289
       if ($115 | 0) {
        $117 = $3 + 44 | 0; //@line 17292
        $118 = HEAP32[$117 >> 2] | 0; //@line 17293
        do {
         if (($118 | 0) == ($115 | 0)) {
          $129 = $115; //@line 17297
         } else {
          $120 = $3 + 48 | 0; //@line 17299
          $122 = $118; //@line 17300
          while (1) {
           $121 = $122 + -72 | 0; //@line 17302
           HEAP32[$117 >> 2] = $121; //@line 17303
           __THREW__ = 0; //@line 17304
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17305
           invoke_viii(13, $$byval_copy7 | 0, $120 | 0, $121 | 0); //@line 17306
           $123 = __THREW__; //@line 17307
           __THREW__ = 0; //@line 17307
           if ($123 & 1) {
            label = 50; //@line 17310
            break;
           }
           $122 = HEAP32[$117 >> 2] | 0; //@line 17313
           if (($122 | 0) == ($115 | 0)) {
            label = 51; //@line 17316
            break;
           }
          }
          if ((label | 0) == 50) {
           $127 = ___cxa_find_matching_catch_3(0) | 0; //@line 17323
           ___clang_call_terminate($127); //@line 17325
          } else if ((label | 0) == 51) {
           $129 = HEAP32[$114 >> 2] | 0; //@line 17330
           break;
          }
         }
        } while (0);
        __ZdlPv($129); //@line 17335
       }
       $130 = $3 + 4 | 0; //@line 17337
       if ((HEAP8[$130 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 17342
        return;
       }
       __ZdlPv(HEAP32[$130 >> 2] | 0); //@line 17345
       STACKTOP = sp; //@line 17346
       return;
      }
     }
    }
   } while (0);
   if ((label | 0) == 56) {
    $137 = ___cxa_find_matching_catch_2() | 0; //@line 17352
    $$0$i$i$i = tempRet0; //@line 17354
    $$05$i$i$i = $137; //@line 17354
   }
   $167 = $5 + 52 | 0; //@line 17356
   if ((HEAP8[$167 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$167 >> 2] | 0); //@line 17362
   }
   $172 = $5 + 40 | 0; //@line 17364
   $173 = HEAP32[$172 >> 2] | 0; //@line 17365
   if ($173 | 0) {
    $175 = $5 + 44 | 0; //@line 17368
    $176 = HEAP32[$175 >> 2] | 0; //@line 17369
    do {
     if (($176 | 0) == ($173 | 0)) {
      $187 = $173; //@line 17373
     } else {
      $178 = $5 + 48 | 0; //@line 17375
      $180 = $176; //@line 17376
      while (1) {
       $179 = $180 + -72 | 0; //@line 17378
       HEAP32[$175 >> 2] = $179; //@line 17379
       __THREW__ = 0; //@line 17380
       HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17381
       invoke_viii(13, $$byval_copy7 | 0, $178 | 0, $179 | 0); //@line 17382
       $181 = __THREW__; //@line 17383
       __THREW__ = 0; //@line 17383
       if ($181 & 1) {
        label = 76; //@line 17386
        break;
       }
       $180 = HEAP32[$175 >> 2] | 0; //@line 17389
       if (($180 | 0) == ($173 | 0)) {
        label = 77; //@line 17392
        break;
       }
      }
      if ((label | 0) == 76) {
       $185 = ___cxa_find_matching_catch_3(0) | 0; //@line 17399
       ___clang_call_terminate($185); //@line 17401
      } else if ((label | 0) == 77) {
       $187 = HEAP32[$172 >> 2] | 0; //@line 17406
       break;
      }
     }
    } while (0);
    __ZdlPv($187); //@line 17411
   }
   if ((HEAP8[$13 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$13 >> 2] | 0); //@line 17418
   }
   $192 = $4 + 52 | 0; //@line 17420
   if ((HEAP8[$192 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$192 >> 2] | 0); //@line 17426
   }
   $197 = $4 + 40 | 0; //@line 17428
   $198 = HEAP32[$197 >> 2] | 0; //@line 17429
   if ($198 | 0) {
    $200 = $4 + 44 | 0; //@line 17432
    $201 = HEAP32[$200 >> 2] | 0; //@line 17433
    do {
     if (($201 | 0) == ($198 | 0)) {
      $212 = $198; //@line 17437
     } else {
      $203 = $4 + 48 | 0; //@line 17439
      $205 = $201; //@line 17440
      while (1) {
       $204 = $205 + -72 | 0; //@line 17442
       HEAP32[$200 >> 2] = $204; //@line 17443
       __THREW__ = 0; //@line 17444
       HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17445
       invoke_viii(13, $$byval_copy7 | 0, $203 | 0, $204 | 0); //@line 17446
       $206 = __THREW__; //@line 17447
       __THREW__ = 0; //@line 17447
       if ($206 & 1) {
        label = 88; //@line 17450
        break;
       }
       $205 = HEAP32[$200 >> 2] | 0; //@line 17453
       if (($205 | 0) == ($198 | 0)) {
        label = 89; //@line 17456
        break;
       }
      }
      if ((label | 0) == 88) {
       $210 = ___cxa_find_matching_catch_3(0) | 0; //@line 17463
       ___clang_call_terminate($210); //@line 17465
      } else if ((label | 0) == 89) {
       $212 = HEAP32[$197 >> 2] | 0; //@line 17470
       break;
      }
     }
    } while (0);
    __ZdlPv($212); //@line 17475
   }
   $213 = $4 + 4 | 0; //@line 17477
   if ((HEAP8[$213 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$213 >> 2] | 0); //@line 17483
    $$1$i$i$i = $$0$i$i$i; //@line 17484
    $$16$i$i$i = $$05$i$i$i; //@line 17484
   } else {
    $$1$i$i$i = $$0$i$i$i; //@line 17486
    $$16$i$i$i = $$05$i$i$i; //@line 17486
   }
  }
 }
 if ((label | 0) == 55) {
  $135 = ___cxa_find_matching_catch_2() | 0; //@line 17491
  $$1$i$i$i = tempRet0; //@line 17493
  $$16$i$i$i = $135; //@line 17493
 }
 $218 = $3 + 52 | 0; //@line 17495
 if ((HEAP8[$218 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$218 >> 2] | 0); //@line 17501
 }
 $223 = $3 + 40 | 0; //@line 17503
 $224 = HEAP32[$223 >> 2] | 0; //@line 17504
 if ($224 | 0) {
  $226 = $3 + 44 | 0; //@line 17507
  $227 = HEAP32[$226 >> 2] | 0; //@line 17508
  do {
   if (($227 | 0) == ($224 | 0)) {
    $238 = $224; //@line 17512
   } else {
    $229 = $3 + 48 | 0; //@line 17514
    $231 = $227; //@line 17515
    while (1) {
     $230 = $231 + -72 | 0; //@line 17517
     HEAP32[$226 >> 2] = $230; //@line 17518
     __THREW__ = 0; //@line 17519
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 17520
     invoke_viii(13, $$byval_copy7 | 0, $229 | 0, $230 | 0); //@line 17521
     $232 = __THREW__; //@line 17522
     __THREW__ = 0; //@line 17522
     if ($232 & 1) {
      label = 100; //@line 17525
      break;
     }
     $231 = HEAP32[$226 >> 2] | 0; //@line 17528
     if (($231 | 0) == ($224 | 0)) {
      label = 101; //@line 17531
      break;
     }
    }
    if ((label | 0) == 100) {
     $236 = ___cxa_find_matching_catch_3(0) | 0; //@line 17538
     ___clang_call_terminate($236); //@line 17540
    } else if ((label | 0) == 101) {
     $238 = HEAP32[$223 >> 2] | 0; //@line 17545
     break;
    }
   }
  } while (0);
  __ZdlPv($238); //@line 17550
 }
 $239 = $3 + 4 | 0; //@line 17552
 if ((HEAP8[$239 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$16$i$i$i | 0); //@line 17557
 }
 __ZdlPv(HEAP32[$239 >> 2] | 0); //@line 17561
 ___resumeException($$16$i$i$i | 0); //@line 17562
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$04$i$i$i = 0, $$1$i$i$i = 0, $$15$i$i$i = 0, $$byval_copy7 = 0, $$phi$trans$insert$i$i$i = 0, $$val = 0, $10 = 0, $100 = 0, $104 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $122 = 0, $124 = 0, $125 = 0, $13 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $139 = 0, $140 = 0, $142 = 0, $143 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $152 = 0, $154 = 0, $155 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $182 = 0, $184 = 0, $185 = 0, $190 = 0, $195 = 0, $196 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $208 = 0, $210 = 0, $215 = 0, $22 = 0, $220 = 0, $221 = 0, $223 = 0, $224 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $235 = 0, $236 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $80 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7269
 STACKTOP = STACKTOP + 304 | 0; //@line 7270
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 7270
 $$byval_copy7 = sp + 301 | 0; //@line 7271
 $2 = sp + 300 | 0; //@line 7272
 $3 = sp + 216 | 0; //@line 7273
 $4 = sp + 144 | 0; //@line 7274
 $5 = sp + 288 | 0; //@line 7275
 $6 = sp + 72 | 0; //@line 7276
 $7 = sp; //@line 7277
 $$val = HEAP32[$1 >> 2] | 0; //@line 7278
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 7280
 $9 = $4 + 4 | 0; //@line 7281
 HEAP32[$9 >> 2] = 0; //@line 7282
 HEAP32[$9 + 4 >> 2] = 0; //@line 7282
 HEAP32[$9 + 8 >> 2] = 0; //@line 7282
 $10 = $4 + 40 | 0; //@line 7283
 HEAP32[$10 >> 2] = 0; //@line 7284
 HEAP32[$10 + 4 >> 2] = 0; //@line 7284
 HEAP32[$10 + 8 >> 2] = 0; //@line 7284
 HEAP32[$10 + 12 >> 2] = 0; //@line 7284
 HEAP32[$10 + 16 >> 2] = 0; //@line 7284
 HEAP32[$10 + 20 >> 2] = 0; //@line 7284
 HEAP32[$4 >> 2] = 3; //@line 7285
 __THREW__ = 0; //@line 7286
 invoke_vii(120, $6 | 0, $3 | 0); //@line 7287
 $11 = __THREW__; //@line 7288
 __THREW__ = 0; //@line 7288
 do {
  if ($11 & 1) {
   $130 = ___cxa_find_matching_catch_2() | 0; //@line 7292
   $$0$i$i$i = tempRet0; //@line 7294
   $$04$i$i$i = $130; //@line 7294
   label = 72; //@line 7295
  } else {
   __THREW__ = 0; //@line 7297
   invoke_vii(135, $5 | 0, $6 | 0); //@line 7298
   $13 = __THREW__; //@line 7299
   __THREW__ = 0; //@line 7299
   if ($13 & 1) {
    $132 = ___cxa_find_matching_catch_2() | 0; //@line 7302
    $133 = tempRet0; //@line 7303
    $134 = $6 + 52 | 0; //@line 7304
    if ((HEAP8[$134 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$134 >> 2] | 0); //@line 7310
    }
    $139 = $6 + 40 | 0; //@line 7312
    $140 = HEAP32[$139 >> 2] | 0; //@line 7313
    if ($140 | 0) {
     $142 = $6 + 44 | 0; //@line 7316
     $143 = HEAP32[$142 >> 2] | 0; //@line 7317
     do {
      if (($143 | 0) == ($140 | 0)) {
       $154 = $140; //@line 7321
      } else {
       $145 = $6 + 48 | 0; //@line 7323
       $147 = $143; //@line 7324
       while (1) {
        $146 = $147 + -72 | 0; //@line 7326
        HEAP32[$142 >> 2] = $146; //@line 7327
        __THREW__ = 0; //@line 7328
        HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7329
        invoke_viii(13, $$byval_copy7 | 0, $145 | 0, $146 | 0); //@line 7330
        $148 = __THREW__; //@line 7331
        __THREW__ = 0; //@line 7331
        if ($148 & 1) {
         label = 67; //@line 7334
         break;
        }
        $147 = HEAP32[$142 >> 2] | 0; //@line 7337
        if (($147 | 0) == ($140 | 0)) {
         label = 68; //@line 7340
         break;
        }
       }
       if ((label | 0) == 67) {
        $152 = ___cxa_find_matching_catch_3(0) | 0; //@line 7347
        ___clang_call_terminate($152); //@line 7349
       } else if ((label | 0) == 68) {
        $154 = HEAP32[$139 >> 2] | 0; //@line 7354
        break;
       }
      }
     } while (0);
     __ZdlPv($154); //@line 7359
    }
    $155 = $6 + 4 | 0; //@line 7361
    if ((HEAP8[$155 + 11 >> 0] | 0) >= 0) {
     $$0$i$i$i = $133; //@line 7366
     $$04$i$i$i = $132; //@line 7366
     label = 72; //@line 7367
     break;
    }
    __ZdlPv(HEAP32[$155 >> 2] | 0); //@line 7371
    $$0$i$i$i = $133; //@line 7372
    $$04$i$i$i = $132; //@line 7372
    label = 72; //@line 7373
    break;
   }
   $15 = $9 + 11 | 0; //@line 7376
   if ((HEAP8[$15 >> 0] | 0) < 0) {
    HEAP8[HEAP32[$9 >> 2] >> 0] = 0; //@line 7381
    HEAP32[$4 + 8 >> 2] = 0; //@line 7383
   } else {
    HEAP8[$9 >> 0] = 0; //@line 7385
    HEAP8[$15 >> 0] = 0; //@line 7386
   }
   __THREW__ = 0; //@line 7388
   invoke_vii(129, $9 | 0, 0); //@line 7389
   $20 = __THREW__; //@line 7390
   __THREW__ = 0; //@line 7390
   if ($20 & 1) {
    $22 = ___cxa_find_matching_catch_3(0) | 0; //@line 7393
    ___clang_call_terminate($22); //@line 7395
   }
   HEAP32[$9 >> 2] = HEAP32[$5 >> 2]; //@line 7398
   HEAP32[$9 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 7398
   HEAP32[$9 + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 7398
   HEAP32[$5 >> 2] = 0; //@line 7399
   HEAP32[$5 + 4 >> 2] = 0; //@line 7399
   HEAP32[$5 + 8 >> 2] = 0; //@line 7399
   $$phi$trans$insert$i$i$i = $6 + 52 | 0; //@line 7400
   if ((HEAP8[$$phi$trans$insert$i$i$i + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$$phi$trans$insert$i$i$i >> 2] | 0); //@line 7406
   }
   $26 = $6 + 40 | 0; //@line 7408
   $27 = HEAP32[$26 >> 2] | 0; //@line 7409
   if ($27 | 0) {
    $29 = $6 + 44 | 0; //@line 7412
    $30 = HEAP32[$29 >> 2] | 0; //@line 7413
    do {
     if (($30 | 0) == ($27 | 0)) {
      $41 = $27; //@line 7417
     } else {
      $32 = $6 + 48 | 0; //@line 7419
      $34 = $30; //@line 7420
      while (1) {
       $33 = $34 + -72 | 0; //@line 7422
       HEAP32[$29 >> 2] = $33; //@line 7423
       __THREW__ = 0; //@line 7424
       HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7425
       invoke_viii(13, $$byval_copy7 | 0, $32 | 0, $33 | 0); //@line 7426
       $35 = __THREW__; //@line 7427
       __THREW__ = 0; //@line 7427
       if ($35 & 1) {
        label = 15; //@line 7430
        break;
       }
       $34 = HEAP32[$29 >> 2] | 0; //@line 7433
       if (($34 | 0) == ($27 | 0)) {
        label = 16; //@line 7436
        break;
       }
      }
      if ((label | 0) == 15) {
       $39 = ___cxa_find_matching_catch_3(0) | 0; //@line 7443
       ___clang_call_terminate($39); //@line 7445
      } else if ((label | 0) == 16) {
       $41 = HEAP32[$26 >> 2] | 0; //@line 7450
       break;
      }
     }
    } while (0);
    __ZdlPv($41); //@line 7455
   }
   $42 = $6 + 4 | 0; //@line 7457
   if ((HEAP8[$42 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$42 >> 2] | 0); //@line 7463
   }
   __THREW__ = 0; //@line 7465
   $47 = invoke_ii(143, $$val | 0) | 0; //@line 7466
   $48 = __THREW__; //@line 7467
   __THREW__ = 0; //@line 7467
   if (!($48 & 1)) {
    __THREW__ = 0; //@line 7470
    invoke_vii(120, $7 | 0, $4 | 0); //@line 7471
    $50 = __THREW__; //@line 7472
    __THREW__ = 0; //@line 7472
    if (!($50 & 1)) {
     __THREW__ = 0; //@line 7475
     invoke_vii(128, $47 | 0, $7 | 0); //@line 7476
     $52 = __THREW__; //@line 7477
     __THREW__ = 0; //@line 7477
     if ($52 & 1) {
      $162 = ___cxa_find_matching_catch_2() | 0; //@line 7480
      $163 = tempRet0; //@line 7481
      $164 = $7 + 52 | 0; //@line 7482
      if ((HEAP8[$164 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$164 >> 2] | 0); //@line 7488
      }
      $169 = $7 + 40 | 0; //@line 7490
      $170 = HEAP32[$169 >> 2] | 0; //@line 7491
      if ($170 | 0) {
       $172 = $7 + 44 | 0; //@line 7494
       $173 = HEAP32[$172 >> 2] | 0; //@line 7495
       do {
        if (($173 | 0) == ($170 | 0)) {
         $184 = $170; //@line 7499
        } else {
         $175 = $7 + 48 | 0; //@line 7501
         $177 = $173; //@line 7502
         while (1) {
          $176 = $177 + -72 | 0; //@line 7504
          HEAP32[$172 >> 2] = $176; //@line 7505
          __THREW__ = 0; //@line 7506
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7507
          invoke_viii(13, $$byval_copy7 | 0, $175 | 0, $176 | 0); //@line 7508
          $178 = __THREW__; //@line 7509
          __THREW__ = 0; //@line 7509
          if ($178 & 1) {
           label = 81; //@line 7512
           break;
          }
          $177 = HEAP32[$172 >> 2] | 0; //@line 7515
          if (($177 | 0) == ($170 | 0)) {
           label = 82; //@line 7518
           break;
          }
         }
         if ((label | 0) == 81) {
          $182 = ___cxa_find_matching_catch_3(0) | 0; //@line 7525
          ___clang_call_terminate($182); //@line 7527
         } else if ((label | 0) == 82) {
          $184 = HEAP32[$169 >> 2] | 0; //@line 7532
          break;
         }
        }
       } while (0);
       __ZdlPv($184); //@line 7537
      }
      $185 = $7 + 4 | 0; //@line 7539
      if ((HEAP8[$185 + 11 >> 0] | 0) >= 0) {
       $$1$i$i$i = $163; //@line 7544
       $$15$i$i$i = $162; //@line 7544
       break;
      }
      __ZdlPv(HEAP32[$185 >> 2] | 0); //@line 7548
      $$1$i$i$i = $163; //@line 7549
      $$15$i$i$i = $162; //@line 7549
      break;
     }
     $54 = $7 + 52 | 0; //@line 7552
     if ((HEAP8[$54 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$54 >> 2] | 0); //@line 7558
     }
     $59 = $7 + 40 | 0; //@line 7560
     $60 = HEAP32[$59 >> 2] | 0; //@line 7561
     if ($60 | 0) {
      $62 = $7 + 44 | 0; //@line 7564
      $63 = HEAP32[$62 >> 2] | 0; //@line 7565
      do {
       if (($63 | 0) == ($60 | 0)) {
        $74 = $60; //@line 7569
       } else {
        $65 = $7 + 48 | 0; //@line 7571
        $67 = $63; //@line 7572
        while (1) {
         $66 = $67 + -72 | 0; //@line 7574
         HEAP32[$62 >> 2] = $66; //@line 7575
         __THREW__ = 0; //@line 7576
         HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7577
         invoke_viii(13, $$byval_copy7 | 0, $65 | 0, $66 | 0); //@line 7578
         $68 = __THREW__; //@line 7579
         __THREW__ = 0; //@line 7579
         if ($68 & 1) {
          label = 30; //@line 7582
          break;
         }
         $67 = HEAP32[$62 >> 2] | 0; //@line 7585
         if (($67 | 0) == ($60 | 0)) {
          label = 31; //@line 7588
          break;
         }
        }
        if ((label | 0) == 30) {
         $72 = ___cxa_find_matching_catch_3(0) | 0; //@line 7595
         ___clang_call_terminate($72); //@line 7597
        } else if ((label | 0) == 31) {
         $74 = HEAP32[$59 >> 2] | 0; //@line 7602
         break;
        }
       }
      } while (0);
      __ZdlPv($74); //@line 7607
     }
     $75 = $7 + 4 | 0; //@line 7609
     if ((HEAP8[$75 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$75 >> 2] | 0); //@line 7615
     }
     $80 = $4 + 52 | 0; //@line 7617
     if ((HEAP8[$80 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$80 >> 2] | 0); //@line 7623
     }
     $85 = $4 + 40 | 0; //@line 7625
     $86 = HEAP32[$85 >> 2] | 0; //@line 7626
     if ($86 | 0) {
      $88 = $4 + 44 | 0; //@line 7629
      $89 = HEAP32[$88 >> 2] | 0; //@line 7630
      do {
       if (($89 | 0) == ($86 | 0)) {
        $100 = $86; //@line 7634
       } else {
        $91 = $4 + 48 | 0; //@line 7636
        $93 = $89; //@line 7637
        while (1) {
         $92 = $93 + -72 | 0; //@line 7639
         HEAP32[$88 >> 2] = $92; //@line 7640
         __THREW__ = 0; //@line 7641
         HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7642
         invoke_viii(13, $$byval_copy7 | 0, $91 | 0, $92 | 0); //@line 7643
         $94 = __THREW__; //@line 7644
         __THREW__ = 0; //@line 7644
         if ($94 & 1) {
          label = 42; //@line 7647
          break;
         }
         $93 = HEAP32[$88 >> 2] | 0; //@line 7650
         if (($93 | 0) == ($86 | 0)) {
          label = 43; //@line 7653
          break;
         }
        }
        if ((label | 0) == 42) {
         $98 = ___cxa_find_matching_catch_3(0) | 0; //@line 7660
         ___clang_call_terminate($98); //@line 7662
        } else if ((label | 0) == 43) {
         $100 = HEAP32[$85 >> 2] | 0; //@line 7667
         break;
        }
       }
      } while (0);
      __ZdlPv($100); //@line 7672
     }
     if ((HEAP8[$15 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 7678
     }
     $104 = $3 + 52 | 0; //@line 7680
     if ((HEAP8[$104 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$104 >> 2] | 0); //@line 7686
     }
     $109 = $3 + 40 | 0; //@line 7688
     $110 = HEAP32[$109 >> 2] | 0; //@line 7689
     if ($110 | 0) {
      $112 = $3 + 44 | 0; //@line 7692
      $113 = HEAP32[$112 >> 2] | 0; //@line 7693
      do {
       if (($113 | 0) == ($110 | 0)) {
        $124 = $110; //@line 7697
       } else {
        $115 = $3 + 48 | 0; //@line 7699
        $117 = $113; //@line 7700
        while (1) {
         $116 = $117 + -72 | 0; //@line 7702
         HEAP32[$112 >> 2] = $116; //@line 7703
         __THREW__ = 0; //@line 7704
         HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7705
         invoke_viii(13, $$byval_copy7 | 0, $115 | 0, $116 | 0); //@line 7706
         $118 = __THREW__; //@line 7707
         __THREW__ = 0; //@line 7707
         if ($118 & 1) {
          label = 54; //@line 7710
          break;
         }
         $117 = HEAP32[$112 >> 2] | 0; //@line 7713
         if (($117 | 0) == ($110 | 0)) {
          label = 55; //@line 7716
          break;
         }
        }
        if ((label | 0) == 54) {
         $122 = ___cxa_find_matching_catch_3(0) | 0; //@line 7723
         ___clang_call_terminate($122); //@line 7725
        } else if ((label | 0) == 55) {
         $124 = HEAP32[$109 >> 2] | 0; //@line 7730
         break;
        }
       }
      } while (0);
      __ZdlPv($124); //@line 7735
     }
     $125 = $3 + 4 | 0; //@line 7737
     if ((HEAP8[$125 + 11 >> 0] | 0) >= 0) {
      STACKTOP = sp; //@line 7742
      return;
     }
     __ZdlPv(HEAP32[$125 >> 2] | 0); //@line 7745
     STACKTOP = sp; //@line 7746
     return;
    }
   }
   $160 = ___cxa_find_matching_catch_2() | 0; //@line 7749
   $$1$i$i$i = tempRet0; //@line 7751
   $$15$i$i$i = $160; //@line 7751
  }
 } while (0);
 if ((label | 0) == 72) {
  $$1$i$i$i = $$0$i$i$i; //@line 7755
  $$15$i$i$i = $$04$i$i$i; //@line 7755
 }
 $190 = $4 + 52 | 0; //@line 7757
 if ((HEAP8[$190 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$190 >> 2] | 0); //@line 7763
 }
 $195 = $4 + 40 | 0; //@line 7765
 $196 = HEAP32[$195 >> 2] | 0; //@line 7766
 if ($196 | 0) {
  $198 = $4 + 44 | 0; //@line 7769
  $199 = HEAP32[$198 >> 2] | 0; //@line 7770
  do {
   if (($199 | 0) == ($196 | 0)) {
    $210 = $196; //@line 7774
   } else {
    $201 = $4 + 48 | 0; //@line 7776
    $203 = $199; //@line 7777
    while (1) {
     $202 = $203 + -72 | 0; //@line 7779
     HEAP32[$198 >> 2] = $202; //@line 7780
     __THREW__ = 0; //@line 7781
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7782
     invoke_viii(13, $$byval_copy7 | 0, $201 | 0, $202 | 0); //@line 7783
     $204 = __THREW__; //@line 7784
     __THREW__ = 0; //@line 7784
     if ($204 & 1) {
      label = 93; //@line 7787
      break;
     }
     $203 = HEAP32[$198 >> 2] | 0; //@line 7790
     if (($203 | 0) == ($196 | 0)) {
      label = 94; //@line 7793
      break;
     }
    }
    if ((label | 0) == 93) {
     $208 = ___cxa_find_matching_catch_3(0) | 0; //@line 7800
     ___clang_call_terminate($208); //@line 7802
    } else if ((label | 0) == 94) {
     $210 = HEAP32[$195 >> 2] | 0; //@line 7807
     break;
    }
   }
  } while (0);
  __ZdlPv($210); //@line 7812
 }
 if ((HEAP8[$9 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 7819
 }
 $215 = $3 + 52 | 0; //@line 7821
 if ((HEAP8[$215 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$215 >> 2] | 0); //@line 7827
 }
 $220 = $3 + 40 | 0; //@line 7829
 $221 = HEAP32[$220 >> 2] | 0; //@line 7830
 if ($221 | 0) {
  $223 = $3 + 44 | 0; //@line 7833
  $224 = HEAP32[$223 >> 2] | 0; //@line 7834
  do {
   if (($224 | 0) == ($221 | 0)) {
    $235 = $221; //@line 7838
   } else {
    $226 = $3 + 48 | 0; //@line 7840
    $228 = $224; //@line 7841
    while (1) {
     $227 = $228 + -72 | 0; //@line 7843
     HEAP32[$223 >> 2] = $227; //@line 7844
     __THREW__ = 0; //@line 7845
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7846
     invoke_viii(13, $$byval_copy7 | 0, $226 | 0, $227 | 0); //@line 7847
     $229 = __THREW__; //@line 7848
     __THREW__ = 0; //@line 7848
     if ($229 & 1) {
      label = 105; //@line 7851
      break;
     }
     $228 = HEAP32[$223 >> 2] | 0; //@line 7854
     if (($228 | 0) == ($221 | 0)) {
      label = 106; //@line 7857
      break;
     }
    }
    if ((label | 0) == 105) {
     $233 = ___cxa_find_matching_catch_3(0) | 0; //@line 7864
     ___clang_call_terminate($233); //@line 7866
    } else if ((label | 0) == 106) {
     $235 = HEAP32[$220 >> 2] | 0; //@line 7871
     break;
    }
   }
  } while (0);
  __ZdlPv($235); //@line 7876
 }
 $236 = $3 + 4 | 0; //@line 7878
 if ((HEAP8[$236 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$15$i$i$i | 0); //@line 7883
 }
 __ZdlPv(HEAP32[$236 >> 2] | 0); //@line 7887
 ___resumeException($$15$i$i$i | 0); //@line 7888
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$05$i$i$i = 0, $$1$i$i$i = 0, $$16$i$i$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy8 = 0, $$val = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $106 = 0, $108 = 0, $109 = 0, $114 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $134 = 0, $135 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $160 = 0, $162 = 0, $163 = 0, $168 = 0, $17 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $186 = 0, $188 = 0, $189 = 0, $194 = 0, $199 = 0, $2 = 0, $200 = 0, $202 = 0, $203 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $212 = 0, $214 = 0, $215 = 0, $24 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $80 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10979
 STACKTOP = STACKTOP + 256 | 0; //@line 10980
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 10980
 $$byval_copy8 = sp + 236 | 0; //@line 10981
 $$byval_copy1 = sp + 232 | 0; //@line 10982
 $$byval_copy = sp + 228 | 0; //@line 10983
 $2 = sp + 144 | 0; //@line 10984
 $3 = sp + 72 | 0; //@line 10985
 $4 = sp + 224 | 0; //@line 10986
 $5 = sp + 220 | 0; //@line 10987
 $6 = sp + 216 | 0; //@line 10988
 $7 = sp; //@line 10989
 $$val = HEAP32[$1 >> 2] | 0; //@line 10990
 __ZN5Stack3popEv($2, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 10992
 __THREW__ = 0; //@line 10993
 $9 = invoke_ii(143, $$val | 0) | 0; //@line 10994
 $10 = __THREW__; //@line 10995
 __THREW__ = 0; //@line 10995
 if ($10 & 1) {
  label = 6; //@line 10998
 } else {
  __THREW__ = 0; //@line 11000
  invoke_vii(131, $3 | 0, $9 | 0); //@line 11001
  $12 = __THREW__; //@line 11002
  __THREW__ = 0; //@line 11002
  if ($12 & 1) {
   label = 6; //@line 11005
  } else {
   L4 : do {
    switch (HEAP32[$2 >> 2] | 0) {
    case 1:
     {
      if ((HEAP32[$3 >> 2] | 0) == 1) {
       $17 = $3 + 40 | 0; //@line 11014
       HEAP32[$4 >> 2] = HEAP32[$3 + 44 >> 2]; //@line 11017
       HEAP32[$5 >> 2] = HEAP32[$2 + 40 >> 2]; //@line 11020
       HEAP32[$6 >> 2] = HEAP32[$2 + 44 >> 2]; //@line 11023
       __THREW__ = 0; //@line 11024
       HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 11025
       HEAP32[$$byval_copy1 >> 2] = HEAP32[$5 >> 2]; //@line 11026
       HEAP32[$$byval_copy8 >> 2] = HEAP32[$6 >> 2]; //@line 11027
       invoke_iiiii(6, $17 | 0, $$byval_copy | 0, $$byval_copy1 | 0, $$byval_copy8 | 0) | 0; //@line 11028
       $24 = __THREW__; //@line 11029
       __THREW__ = 0; //@line 11029
       if ($24 & 1) {
        $28 = ___cxa_find_matching_catch_2() | 0; //@line 11032
        $$0$i$i$i = $28; //@line 11034
        $$05$i$i$i = tempRet0; //@line 11034
       } else {
        label = 21; //@line 11036
       }
      } else {
       label = 17; //@line 11039
      }
      break;
     }
    case 3:
     {
      if ((HEAP32[$3 >> 2] | 0) == 3) {
       $32 = $3 + 4 | 0; //@line 11047
       __THREW__ = 0; //@line 11049
       invoke_viii(27, $$byval_copy8 | 0, $32 | 0, $2 + 4 | 0); //@line 11050
       $34 = __THREW__; //@line 11051
       __THREW__ = 0; //@line 11051
       if ($34 & 1) {
        $45 = ___cxa_find_matching_catch_2() | 0; //@line 11054
        $$0$i$i$i = $45; //@line 11056
        $$05$i$i$i = tempRet0; //@line 11056
        break L4;
       }
       $36 = $32 + 11 | 0; //@line 11059
       if ((HEAP8[$36 >> 0] | 0) < 0) {
        HEAP8[HEAP32[$32 >> 2] >> 0] = 0; //@line 11064
        HEAP32[$3 + 8 >> 2] = 0; //@line 11066
       } else {
        HEAP8[$32 >> 0] = 0; //@line 11068
        HEAP8[$36 >> 0] = 0; //@line 11069
       }
       __THREW__ = 0; //@line 11071
       invoke_vii(129, $32 | 0, 0); //@line 11072
       $41 = __THREW__; //@line 11073
       __THREW__ = 0; //@line 11073
       if ($41 & 1) {
        $43 = ___cxa_find_matching_catch_3(0) | 0; //@line 11076
        ___clang_call_terminate($43); //@line 11078
       } else {
        HEAP32[$32 >> 2] = HEAP32[$$byval_copy8 >> 2]; //@line 11081
        HEAP32[$32 + 4 >> 2] = HEAP32[$$byval_copy8 + 4 >> 2]; //@line 11081
        HEAP32[$32 + 8 >> 2] = HEAP32[$$byval_copy8 + 8 >> 2]; //@line 11081
        label = 21; //@line 11082
        break L4;
       }
      } else {
       label = 17; //@line 11086
      }
      break;
     }
    default:
     {
      label = 17; //@line 11091
     }
    }
   } while (0);
   do {
    if ((label | 0) == 17) {
     $47 = ___cxa_allocate_exception(8) | 0; //@line 11097
     __THREW__ = 0; //@line 11098
     invoke_vii(125, $47 | 0, 18273); //@line 11099
     $48 = __THREW__; //@line 11100
     __THREW__ = 0; //@line 11100
     if ($48 & 1) {
      $51 = ___cxa_find_matching_catch_2() | 0; //@line 11103
      $52 = tempRet0; //@line 11104
      ___cxa_free_exception($47 | 0); //@line 11105
      $$0$i$i$i = $51; //@line 11106
      $$05$i$i$i = $52; //@line 11106
      break;
     } else {
      __THREW__ = 0; //@line 11109
      invoke_viii(16, $47 | 0, 2824, 242); //@line 11110
      __THREW__ = 0; //@line 11111
      label = 20; //@line 11112
      break;
     }
    } else if ((label | 0) == 21) {
     __THREW__ = 0; //@line 11117
     $55 = invoke_ii(143, $$val | 0) | 0; //@line 11118
     $56 = __THREW__; //@line 11119
     __THREW__ = 0; //@line 11119
     if ($56 & 1) {
      label = 20; //@line 11122
     } else {
      __THREW__ = 0; //@line 11124
      invoke_vii(120, $7 | 0, $3 | 0); //@line 11125
      $58 = __THREW__; //@line 11126
      __THREW__ = 0; //@line 11126
      if ($58 & 1) {
       label = 20; //@line 11129
      } else {
       __THREW__ = 0; //@line 11131
       invoke_vii(128, $55 | 0, $7 | 0); //@line 11132
       $60 = __THREW__; //@line 11133
       __THREW__ = 0; //@line 11133
       if ($60 & 1) {
        $140 = ___cxa_find_matching_catch_2() | 0; //@line 11136
        $141 = tempRet0; //@line 11137
        $142 = $7 + 52 | 0; //@line 11138
        if ((HEAP8[$142 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$142 >> 2] | 0); //@line 11144
        }
        $147 = $7 + 40 | 0; //@line 11146
        $148 = HEAP32[$147 >> 2] | 0; //@line 11147
        if ($148 | 0) {
         $150 = $7 + 44 | 0; //@line 11150
         $151 = HEAP32[$150 >> 2] | 0; //@line 11151
         do {
          if (($151 | 0) == ($148 | 0)) {
           $162 = $148; //@line 11155
          } else {
           $153 = $7 + 48 | 0; //@line 11157
           $155 = $151; //@line 11158
           while (1) {
            $154 = $155 + -72 | 0; //@line 11160
            HEAP32[$150 >> 2] = $154; //@line 11161
            __THREW__ = 0; //@line 11162
            HEAP8[$$byval_copy8 >> 0] = HEAP8[$$byval_copy1 >> 0] | 0; //@line 11163
            invoke_viii(13, $$byval_copy8 | 0, $153 | 0, $154 | 0); //@line 11164
            $156 = __THREW__; //@line 11165
            __THREW__ = 0; //@line 11165
            if ($156 & 1) {
             label = 67; //@line 11168
             break;
            }
            $155 = HEAP32[$150 >> 2] | 0; //@line 11171
            if (($155 | 0) == ($148 | 0)) {
             label = 68; //@line 11174
             break;
            }
           }
           if ((label | 0) == 67) {
            $160 = ___cxa_find_matching_catch_3(0) | 0; //@line 11181
            ___clang_call_terminate($160); //@line 11183
           } else if ((label | 0) == 68) {
            $162 = HEAP32[$147 >> 2] | 0; //@line 11188
            break;
           }
          }
         } while (0);
         __ZdlPv($162); //@line 11193
        }
        $163 = $7 + 4 | 0; //@line 11195
        if ((HEAP8[$163 + 11 >> 0] | 0) >= 0) {
         $$0$i$i$i = $140; //@line 11200
         $$05$i$i$i = $141; //@line 11200
         break;
        }
        __ZdlPv(HEAP32[$163 >> 2] | 0); //@line 11204
        $$0$i$i$i = $140; //@line 11205
        $$05$i$i$i = $141; //@line 11205
        break;
       }
       $62 = $7 + 52 | 0; //@line 11208
       if ((HEAP8[$62 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$62 >> 2] | 0); //@line 11214
       }
       $67 = $7 + 40 | 0; //@line 11216
       $68 = HEAP32[$67 >> 2] | 0; //@line 11217
       if ($68 | 0) {
        $70 = $7 + 44 | 0; //@line 11220
        $71 = HEAP32[$70 >> 2] | 0; //@line 11221
        do {
         if (($71 | 0) == ($68 | 0)) {
          $82 = $68; //@line 11225
         } else {
          $73 = $7 + 48 | 0; //@line 11227
          $75 = $71; //@line 11228
          while (1) {
           $74 = $75 + -72 | 0; //@line 11230
           HEAP32[$70 >> 2] = $74; //@line 11231
           __THREW__ = 0; //@line 11232
           HEAP8[$$byval_copy8 >> 0] = HEAP8[$$byval_copy1 >> 0] | 0; //@line 11233
           invoke_viii(13, $$byval_copy8 | 0, $73 | 0, $74 | 0); //@line 11234
           $76 = __THREW__; //@line 11235
           __THREW__ = 0; //@line 11235
           if ($76 & 1) {
            label = 31; //@line 11238
            break;
           }
           $75 = HEAP32[$70 >> 2] | 0; //@line 11241
           if (($75 | 0) == ($68 | 0)) {
            label = 32; //@line 11244
            break;
           }
          }
          if ((label | 0) == 31) {
           $80 = ___cxa_find_matching_catch_3(0) | 0; //@line 11251
           ___clang_call_terminate($80); //@line 11253
          } else if ((label | 0) == 32) {
           $82 = HEAP32[$67 >> 2] | 0; //@line 11258
           break;
          }
         }
        } while (0);
        __ZdlPv($82); //@line 11263
       }
       $83 = $7 + 4 | 0; //@line 11265
       if ((HEAP8[$83 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$83 >> 2] | 0); //@line 11271
       }
       $88 = $3 + 52 | 0; //@line 11273
       if ((HEAP8[$88 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$88 >> 2] | 0); //@line 11279
       }
       $93 = $3 + 40 | 0; //@line 11281
       $94 = HEAP32[$93 >> 2] | 0; //@line 11282
       if ($94 | 0) {
        $96 = $3 + 44 | 0; //@line 11285
        $97 = HEAP32[$96 >> 2] | 0; //@line 11286
        do {
         if (($97 | 0) == ($94 | 0)) {
          $108 = $94; //@line 11290
         } else {
          $99 = $3 + 48 | 0; //@line 11292
          $101 = $97; //@line 11293
          while (1) {
           $100 = $101 + -72 | 0; //@line 11295
           HEAP32[$96 >> 2] = $100; //@line 11296
           __THREW__ = 0; //@line 11297
           HEAP8[$$byval_copy8 >> 0] = HEAP8[$$byval_copy1 >> 0] | 0; //@line 11298
           invoke_viii(13, $$byval_copy8 | 0, $99 | 0, $100 | 0); //@line 11299
           $102 = __THREW__; //@line 11300
           __THREW__ = 0; //@line 11300
           if ($102 & 1) {
            label = 43; //@line 11303
            break;
           }
           $101 = HEAP32[$96 >> 2] | 0; //@line 11306
           if (($101 | 0) == ($94 | 0)) {
            label = 44; //@line 11309
            break;
           }
          }
          if ((label | 0) == 43) {
           $106 = ___cxa_find_matching_catch_3(0) | 0; //@line 11316
           ___clang_call_terminate($106); //@line 11318
          } else if ((label | 0) == 44) {
           $108 = HEAP32[$93 >> 2] | 0; //@line 11323
           break;
          }
         }
        } while (0);
        __ZdlPv($108); //@line 11328
       }
       $109 = $3 + 4 | 0; //@line 11330
       if ((HEAP8[$109 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$109 >> 2] | 0); //@line 11336
       }
       $114 = $2 + 52 | 0; //@line 11338
       if ((HEAP8[$114 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$114 >> 2] | 0); //@line 11344
       }
       $119 = $2 + 40 | 0; //@line 11346
       $120 = HEAP32[$119 >> 2] | 0; //@line 11347
       if ($120 | 0) {
        $122 = $2 + 44 | 0; //@line 11350
        $123 = HEAP32[$122 >> 2] | 0; //@line 11351
        do {
         if (($123 | 0) == ($120 | 0)) {
          $134 = $120; //@line 11355
         } else {
          $125 = $2 + 48 | 0; //@line 11357
          $127 = $123; //@line 11358
          while (1) {
           $126 = $127 + -72 | 0; //@line 11360
           HEAP32[$122 >> 2] = $126; //@line 11361
           __THREW__ = 0; //@line 11362
           HEAP8[$$byval_copy8 >> 0] = HEAP8[$$byval_copy1 >> 0] | 0; //@line 11363
           invoke_viii(13, $$byval_copy8 | 0, $125 | 0, $126 | 0); //@line 11364
           $128 = __THREW__; //@line 11365
           __THREW__ = 0; //@line 11365
           if ($128 & 1) {
            label = 55; //@line 11368
            break;
           }
           $127 = HEAP32[$122 >> 2] | 0; //@line 11371
           if (($127 | 0) == ($120 | 0)) {
            label = 56; //@line 11374
            break;
           }
          }
          if ((label | 0) == 55) {
           $132 = ___cxa_find_matching_catch_3(0) | 0; //@line 11381
           ___clang_call_terminate($132); //@line 11383
          } else if ((label | 0) == 56) {
           $134 = HEAP32[$119 >> 2] | 0; //@line 11388
           break;
          }
         }
        } while (0);
        __ZdlPv($134); //@line 11393
       }
       $135 = $2 + 4 | 0; //@line 11395
       if ((HEAP8[$135 + 11 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 11400
        return;
       }
       __ZdlPv(HEAP32[$135 >> 2] | 0); //@line 11403
       STACKTOP = sp; //@line 11404
       return;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    $53 = ___cxa_find_matching_catch_2() | 0; //@line 11410
    $$0$i$i$i = $53; //@line 11412
    $$05$i$i$i = tempRet0; //@line 11412
   }
   $168 = $3 + 52 | 0; //@line 11414
   if ((HEAP8[$168 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$168 >> 2] | 0); //@line 11420
   }
   $173 = $3 + 40 | 0; //@line 11422
   $174 = HEAP32[$173 >> 2] | 0; //@line 11423
   if ($174 | 0) {
    $176 = $3 + 44 | 0; //@line 11426
    $177 = HEAP32[$176 >> 2] | 0; //@line 11427
    do {
     if (($177 | 0) == ($174 | 0)) {
      $188 = $174; //@line 11431
     } else {
      $179 = $3 + 48 | 0; //@line 11433
      $181 = $177; //@line 11434
      while (1) {
       $180 = $181 + -72 | 0; //@line 11436
       HEAP32[$176 >> 2] = $180; //@line 11437
       __THREW__ = 0; //@line 11438
       HEAP8[$$byval_copy8 >> 0] = HEAP8[$$byval_copy1 >> 0] | 0; //@line 11439
       invoke_viii(13, $$byval_copy8 | 0, $179 | 0, $180 | 0); //@line 11440
       $182 = __THREW__; //@line 11441
       __THREW__ = 0; //@line 11441
       if ($182 & 1) {
        label = 79; //@line 11444
        break;
       }
       $181 = HEAP32[$176 >> 2] | 0; //@line 11447
       if (($181 | 0) == ($174 | 0)) {
        label = 80; //@line 11450
        break;
       }
      }
      if ((label | 0) == 79) {
       $186 = ___cxa_find_matching_catch_3(0) | 0; //@line 11457
       ___clang_call_terminate($186); //@line 11459
      } else if ((label | 0) == 80) {
       $188 = HEAP32[$173 >> 2] | 0; //@line 11464
       break;
      }
     }
    } while (0);
    __ZdlPv($188); //@line 11469
   }
   $189 = $3 + 4 | 0; //@line 11471
   if ((HEAP8[$189 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$189 >> 2] | 0); //@line 11477
    $$1$i$i$i = $$0$i$i$i; //@line 11478
    $$16$i$i$i = $$05$i$i$i; //@line 11478
   } else {
    $$1$i$i$i = $$0$i$i$i; //@line 11480
    $$16$i$i$i = $$05$i$i$i; //@line 11480
   }
  }
 }
 if ((label | 0) == 6) {
  $26 = ___cxa_find_matching_catch_2() | 0; //@line 11485
  $$1$i$i$i = $26; //@line 11487
  $$16$i$i$i = tempRet0; //@line 11487
 }
 $194 = $2 + 52 | 0; //@line 11489
 if ((HEAP8[$194 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$194 >> 2] | 0); //@line 11495
 }
 $199 = $2 + 40 | 0; //@line 11497
 $200 = HEAP32[$199 >> 2] | 0; //@line 11498
 if ($200 | 0) {
  $202 = $2 + 44 | 0; //@line 11501
  $203 = HEAP32[$202 >> 2] | 0; //@line 11502
  do {
   if (($203 | 0) == ($200 | 0)) {
    $214 = $200; //@line 11506
   } else {
    $205 = $2 + 48 | 0; //@line 11508
    $207 = $203; //@line 11509
    while (1) {
     $206 = $207 + -72 | 0; //@line 11511
     HEAP32[$202 >> 2] = $206; //@line 11512
     __THREW__ = 0; //@line 11513
     HEAP8[$$byval_copy8 >> 0] = HEAP8[$$byval_copy1 >> 0] | 0; //@line 11514
     invoke_viii(13, $$byval_copy8 | 0, $205 | 0, $206 | 0); //@line 11515
     $208 = __THREW__; //@line 11516
     __THREW__ = 0; //@line 11516
     if ($208 & 1) {
      label = 91; //@line 11519
      break;
     }
     $207 = HEAP32[$202 >> 2] | 0; //@line 11522
     if (($207 | 0) == ($200 | 0)) {
      label = 92; //@line 11525
      break;
     }
    }
    if ((label | 0) == 91) {
     $212 = ___cxa_find_matching_catch_3(0) | 0; //@line 11532
     ___clang_call_terminate($212); //@line 11534
    } else if ((label | 0) == 92) {
     $214 = HEAP32[$199 >> 2] | 0; //@line 11539
     break;
    }
   }
  } while (0);
  __ZdlPv($214); //@line 11544
 }
 $215 = $2 + 4 | 0; //@line 11546
 if ((HEAP8[$215 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$1$i$i$i | 0); //@line 11551
 }
 __ZdlPv(HEAP32[$215 >> 2] | 0); //@line 11555
 ___resumeException($$1$i$i$i | 0); //@line 11556
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$05$i$i$i = 0, $$1$i$i$i = 0, $$16$i$i$i = 0, $$2$i$i$i = 0, $$27$i$i$i = 0, $$byval_copy7 = 0, $$val = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $115 = 0, $117 = 0, $118 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $136 = 0, $137 = 0, $139 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $149 = 0, $15 = 0, $151 = 0, $152 = 0, $157 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $175 = 0, $177 = 0, $178 = 0, $183 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $201 = 0, $203 = 0, $204 = 0, $209 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $229 = 0, $230 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $65 = 0, $66 = 0, $71 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22382
 STACKTOP = STACKTOP + 304 | 0; //@line 22383
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 22383
 $$byval_copy7 = sp + 289 | 0; //@line 22384
 $2 = sp + 288 | 0; //@line 22385
 $3 = sp + 216 | 0; //@line 22386
 $4 = sp + 144 | 0; //@line 22387
 $5 = sp + 72 | 0; //@line 22388
 $6 = sp; //@line 22389
 $$val = HEAP32[$1 >> 2] | 0; //@line 22390
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 22392
 __THREW__ = 0; //@line 22393
 $8 = invoke_ii(143, $$val | 0) | 0; //@line 22394
 $9 = __THREW__; //@line 22395
 __THREW__ = 0; //@line 22395
 if ($9 & 1) {
  label = 54; //@line 22398
 } else {
  __THREW__ = 0; //@line 22400
  invoke_vii(131, $4 | 0, $8 | 0); //@line 22401
  $11 = __THREW__; //@line 22402
  __THREW__ = 0; //@line 22402
  if ($11 & 1) {
   label = 54; //@line 22405
  } else {
   __THREW__ = 0; //@line 22407
   invoke_vii(120, $5 | 0, $4 | 0); //@line 22408
   $13 = __THREW__; //@line 22409
   __THREW__ = 0; //@line 22409
   if ($13 & 1) {
    $125 = ___cxa_find_matching_catch_2() | 0; //@line 22412
    $$1$i$i$i = tempRet0; //@line 22414
    $$16$i$i$i = $125; //@line 22414
   } else {
    __THREW__ = 0; //@line 22416
    invoke_vii(120, $6 | 0, $3 | 0); //@line 22417
    $15 = __THREW__; //@line 22418
    __THREW__ = 0; //@line 22418
    do {
     if ($15 & 1) {
      $127 = ___cxa_find_matching_catch_2() | 0; //@line 22422
      $$0$i$i$i = tempRet0; //@line 22424
      $$05$i$i$i = $127; //@line 22424
     } else {
      __THREW__ = 0; //@line 22426
      invoke_viii(24, $$val | 0, $5 | 0, $6 | 0); //@line 22427
      $17 = __THREW__; //@line 22428
      __THREW__ = 0; //@line 22428
      if ($17 & 1) {
       $129 = ___cxa_find_matching_catch_2() | 0; //@line 22431
       $130 = tempRet0; //@line 22432
       $131 = $6 + 52 | 0; //@line 22433
       if ((HEAP8[$131 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$131 >> 2] | 0); //@line 22439
       }
       $136 = $6 + 40 | 0; //@line 22441
       $137 = HEAP32[$136 >> 2] | 0; //@line 22442
       if ($137 | 0) {
        $139 = $6 + 44 | 0; //@line 22445
        $140 = HEAP32[$139 >> 2] | 0; //@line 22446
        do {
         if (($140 | 0) == ($137 | 0)) {
          $151 = $137; //@line 22450
         } else {
          $142 = $6 + 48 | 0; //@line 22452
          $144 = $140; //@line 22453
          while (1) {
           $143 = $144 + -72 | 0; //@line 22455
           HEAP32[$139 >> 2] = $143; //@line 22456
           __THREW__ = 0; //@line 22457
           HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22458
           invoke_viii(13, $$byval_copy7 | 0, $142 | 0, $143 | 0); //@line 22459
           $145 = __THREW__; //@line 22460
           __THREW__ = 0; //@line 22460
           if ($145 & 1) {
            label = 64; //@line 22463
            break;
           }
           $144 = HEAP32[$139 >> 2] | 0; //@line 22466
           if (($144 | 0) == ($137 | 0)) {
            label = 65; //@line 22469
            break;
           }
          }
          if ((label | 0) == 64) {
           $149 = ___cxa_find_matching_catch_3(0) | 0; //@line 22476
           ___clang_call_terminate($149); //@line 22478
          } else if ((label | 0) == 65) {
           $151 = HEAP32[$136 >> 2] | 0; //@line 22483
           break;
          }
         }
        } while (0);
        __ZdlPv($151); //@line 22488
       }
       $152 = $6 + 4 | 0; //@line 22490
       if ((HEAP8[$152 + 11 >> 0] | 0) >= 0) {
        $$0$i$i$i = $130; //@line 22495
        $$05$i$i$i = $129; //@line 22495
        break;
       }
       __ZdlPv(HEAP32[$152 >> 2] | 0); //@line 22499
       $$0$i$i$i = $130; //@line 22500
       $$05$i$i$i = $129; //@line 22500
       break;
      }
      $19 = $6 + 52 | 0; //@line 22503
      if ((HEAP8[$19 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 22509
      }
      $24 = $6 + 40 | 0; //@line 22511
      $25 = HEAP32[$24 >> 2] | 0; //@line 22512
      if ($25 | 0) {
       $27 = $6 + 44 | 0; //@line 22515
       $28 = HEAP32[$27 >> 2] | 0; //@line 22516
       do {
        if (($28 | 0) == ($25 | 0)) {
         $39 = $25; //@line 22520
        } else {
         $30 = $6 + 48 | 0; //@line 22522
         $32 = $28; //@line 22523
         while (1) {
          $31 = $32 + -72 | 0; //@line 22525
          HEAP32[$27 >> 2] = $31; //@line 22526
          __THREW__ = 0; //@line 22527
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22528
          invoke_viii(13, $$byval_copy7 | 0, $30 | 0, $31 | 0); //@line 22529
          $33 = __THREW__; //@line 22530
          __THREW__ = 0; //@line 22530
          if ($33 & 1) {
           label = 13; //@line 22533
           break;
          }
          $32 = HEAP32[$27 >> 2] | 0; //@line 22536
          if (($32 | 0) == ($25 | 0)) {
           label = 14; //@line 22539
           break;
          }
         }
         if ((label | 0) == 13) {
          $37 = ___cxa_find_matching_catch_3(0) | 0; //@line 22546
          ___clang_call_terminate($37); //@line 22548
         } else if ((label | 0) == 14) {
          $39 = HEAP32[$24 >> 2] | 0; //@line 22553
          break;
         }
        }
       } while (0);
       __ZdlPv($39); //@line 22558
      }
      $40 = $6 + 4 | 0; //@line 22560
      if ((HEAP8[$40 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$40 >> 2] | 0); //@line 22566
      }
      $45 = $5 + 52 | 0; //@line 22568
      if ((HEAP8[$45 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$45 >> 2] | 0); //@line 22574
      }
      $50 = $5 + 40 | 0; //@line 22576
      $51 = HEAP32[$50 >> 2] | 0; //@line 22577
      if ($51 | 0) {
       $53 = $5 + 44 | 0; //@line 22580
       $54 = HEAP32[$53 >> 2] | 0; //@line 22581
       do {
        if (($54 | 0) == ($51 | 0)) {
         $65 = $51; //@line 22585
        } else {
         $56 = $5 + 48 | 0; //@line 22587
         $58 = $54; //@line 22588
         while (1) {
          $57 = $58 + -72 | 0; //@line 22590
          HEAP32[$53 >> 2] = $57; //@line 22591
          __THREW__ = 0; //@line 22592
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22593
          invoke_viii(13, $$byval_copy7 | 0, $56 | 0, $57 | 0); //@line 22594
          $59 = __THREW__; //@line 22595
          __THREW__ = 0; //@line 22595
          if ($59 & 1) {
           label = 25; //@line 22598
           break;
          }
          $58 = HEAP32[$53 >> 2] | 0; //@line 22601
          if (($58 | 0) == ($51 | 0)) {
           label = 26; //@line 22604
           break;
          }
         }
         if ((label | 0) == 25) {
          $63 = ___cxa_find_matching_catch_3(0) | 0; //@line 22611
          ___clang_call_terminate($63); //@line 22613
         } else if ((label | 0) == 26) {
          $65 = HEAP32[$50 >> 2] | 0; //@line 22618
          break;
         }
        }
       } while (0);
       __ZdlPv($65); //@line 22623
      }
      $66 = $5 + 4 | 0; //@line 22625
      if ((HEAP8[$66 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$66 >> 2] | 0); //@line 22631
      }
      $71 = $4 + 52 | 0; //@line 22633
      if ((HEAP8[$71 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$71 >> 2] | 0); //@line 22639
      }
      $76 = $4 + 40 | 0; //@line 22641
      $77 = HEAP32[$76 >> 2] | 0; //@line 22642
      if ($77 | 0) {
       $79 = $4 + 44 | 0; //@line 22645
       $80 = HEAP32[$79 >> 2] | 0; //@line 22646
       do {
        if (($80 | 0) == ($77 | 0)) {
         $91 = $77; //@line 22650
        } else {
         $82 = $4 + 48 | 0; //@line 22652
         $84 = $80; //@line 22653
         while (1) {
          $83 = $84 + -72 | 0; //@line 22655
          HEAP32[$79 >> 2] = $83; //@line 22656
          __THREW__ = 0; //@line 22657
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22658
          invoke_viii(13, $$byval_copy7 | 0, $82 | 0, $83 | 0); //@line 22659
          $85 = __THREW__; //@line 22660
          __THREW__ = 0; //@line 22660
          if ($85 & 1) {
           label = 37; //@line 22663
           break;
          }
          $84 = HEAP32[$79 >> 2] | 0; //@line 22666
          if (($84 | 0) == ($77 | 0)) {
           label = 38; //@line 22669
           break;
          }
         }
         if ((label | 0) == 37) {
          $89 = ___cxa_find_matching_catch_3(0) | 0; //@line 22676
          ___clang_call_terminate($89); //@line 22678
         } else if ((label | 0) == 38) {
          $91 = HEAP32[$76 >> 2] | 0; //@line 22683
          break;
         }
        }
       } while (0);
       __ZdlPv($91); //@line 22688
      }
      $92 = $4 + 4 | 0; //@line 22690
      if ((HEAP8[$92 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$92 >> 2] | 0); //@line 22696
      }
      $97 = $3 + 52 | 0; //@line 22698
      if ((HEAP8[$97 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$97 >> 2] | 0); //@line 22704
      }
      $102 = $3 + 40 | 0; //@line 22706
      $103 = HEAP32[$102 >> 2] | 0; //@line 22707
      if ($103 | 0) {
       $105 = $3 + 44 | 0; //@line 22710
       $106 = HEAP32[$105 >> 2] | 0; //@line 22711
       do {
        if (($106 | 0) == ($103 | 0)) {
         $117 = $103; //@line 22715
        } else {
         $108 = $3 + 48 | 0; //@line 22717
         $110 = $106; //@line 22718
         while (1) {
          $109 = $110 + -72 | 0; //@line 22720
          HEAP32[$105 >> 2] = $109; //@line 22721
          __THREW__ = 0; //@line 22722
          HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22723
          invoke_viii(13, $$byval_copy7 | 0, $108 | 0, $109 | 0); //@line 22724
          $111 = __THREW__; //@line 22725
          __THREW__ = 0; //@line 22725
          if ($111 & 1) {
           label = 49; //@line 22728
           break;
          }
          $110 = HEAP32[$105 >> 2] | 0; //@line 22731
          if (($110 | 0) == ($103 | 0)) {
           label = 50; //@line 22734
           break;
          }
         }
         if ((label | 0) == 49) {
          $115 = ___cxa_find_matching_catch_3(0) | 0; //@line 22741
          ___clang_call_terminate($115); //@line 22743
         } else if ((label | 0) == 50) {
          $117 = HEAP32[$102 >> 2] | 0; //@line 22748
          break;
         }
        }
       } while (0);
       __ZdlPv($117); //@line 22753
      }
      $118 = $3 + 4 | 0; //@line 22755
      if ((HEAP8[$118 + 11 >> 0] | 0) >= 0) {
       STACKTOP = sp; //@line 22760
       return;
      }
      __ZdlPv(HEAP32[$118 >> 2] | 0); //@line 22763
      STACKTOP = sp; //@line 22764
      return;
     }
    } while (0);
    $157 = $5 + 52 | 0; //@line 22767
    if ((HEAP8[$157 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$157 >> 2] | 0); //@line 22773
    }
    $162 = $5 + 40 | 0; //@line 22775
    $163 = HEAP32[$162 >> 2] | 0; //@line 22776
    if ($163 | 0) {
     $165 = $5 + 44 | 0; //@line 22779
     $166 = HEAP32[$165 >> 2] | 0; //@line 22780
     do {
      if (($166 | 0) == ($163 | 0)) {
       $177 = $163; //@line 22784
      } else {
       $168 = $5 + 48 | 0; //@line 22786
       $170 = $166; //@line 22787
       while (1) {
        $169 = $170 + -72 | 0; //@line 22789
        HEAP32[$165 >> 2] = $169; //@line 22790
        __THREW__ = 0; //@line 22791
        HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22792
        invoke_viii(13, $$byval_copy7 | 0, $168 | 0, $169 | 0); //@line 22793
        $171 = __THREW__; //@line 22794
        __THREW__ = 0; //@line 22794
        if ($171 & 1) {
         label = 76; //@line 22797
         break;
        }
        $170 = HEAP32[$165 >> 2] | 0; //@line 22800
        if (($170 | 0) == ($163 | 0)) {
         label = 77; //@line 22803
         break;
        }
       }
       if ((label | 0) == 76) {
        $175 = ___cxa_find_matching_catch_3(0) | 0; //@line 22810
        ___clang_call_terminate($175); //@line 22812
       } else if ((label | 0) == 77) {
        $177 = HEAP32[$162 >> 2] | 0; //@line 22817
        break;
       }
      }
     } while (0);
     __ZdlPv($177); //@line 22822
    }
    $178 = $5 + 4 | 0; //@line 22824
    if ((HEAP8[$178 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$178 >> 2] | 0); //@line 22830
     $$1$i$i$i = $$0$i$i$i; //@line 22831
     $$16$i$i$i = $$05$i$i$i; //@line 22831
    } else {
     $$1$i$i$i = $$0$i$i$i; //@line 22833
     $$16$i$i$i = $$05$i$i$i; //@line 22833
    }
   }
   $183 = $4 + 52 | 0; //@line 22836
   if ((HEAP8[$183 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$183 >> 2] | 0); //@line 22842
   }
   $188 = $4 + 40 | 0; //@line 22844
   $189 = HEAP32[$188 >> 2] | 0; //@line 22845
   if ($189 | 0) {
    $191 = $4 + 44 | 0; //@line 22848
    $192 = HEAP32[$191 >> 2] | 0; //@line 22849
    do {
     if (($192 | 0) == ($189 | 0)) {
      $203 = $189; //@line 22853
     } else {
      $194 = $4 + 48 | 0; //@line 22855
      $196 = $192; //@line 22856
      while (1) {
       $195 = $196 + -72 | 0; //@line 22858
       HEAP32[$191 >> 2] = $195; //@line 22859
       __THREW__ = 0; //@line 22860
       HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22861
       invoke_viii(13, $$byval_copy7 | 0, $194 | 0, $195 | 0); //@line 22862
       $197 = __THREW__; //@line 22863
       __THREW__ = 0; //@line 22863
       if ($197 & 1) {
        label = 88; //@line 22866
        break;
       }
       $196 = HEAP32[$191 >> 2] | 0; //@line 22869
       if (($196 | 0) == ($189 | 0)) {
        label = 89; //@line 22872
        break;
       }
      }
      if ((label | 0) == 88) {
       $201 = ___cxa_find_matching_catch_3(0) | 0; //@line 22879
       ___clang_call_terminate($201); //@line 22881
      } else if ((label | 0) == 89) {
       $203 = HEAP32[$188 >> 2] | 0; //@line 22886
       break;
      }
     }
    } while (0);
    __ZdlPv($203); //@line 22891
   }
   $204 = $4 + 4 | 0; //@line 22893
   if ((HEAP8[$204 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$204 >> 2] | 0); //@line 22899
    $$2$i$i$i = $$1$i$i$i; //@line 22900
    $$27$i$i$i = $$16$i$i$i; //@line 22900
   } else {
    $$2$i$i$i = $$1$i$i$i; //@line 22902
    $$27$i$i$i = $$16$i$i$i; //@line 22902
   }
  }
 }
 if ((label | 0) == 54) {
  $123 = ___cxa_find_matching_catch_2() | 0; //@line 22907
  $$2$i$i$i = tempRet0; //@line 22909
  $$27$i$i$i = $123; //@line 22909
 }
 $209 = $3 + 52 | 0; //@line 22911
 if ((HEAP8[$209 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$209 >> 2] | 0); //@line 22917
 }
 $214 = $3 + 40 | 0; //@line 22919
 $215 = HEAP32[$214 >> 2] | 0; //@line 22920
 if ($215 | 0) {
  $217 = $3 + 44 | 0; //@line 22923
  $218 = HEAP32[$217 >> 2] | 0; //@line 22924
  do {
   if (($218 | 0) == ($215 | 0)) {
    $229 = $215; //@line 22928
   } else {
    $220 = $3 + 48 | 0; //@line 22930
    $222 = $218; //@line 22931
    while (1) {
     $221 = $222 + -72 | 0; //@line 22933
     HEAP32[$217 >> 2] = $221; //@line 22934
     __THREW__ = 0; //@line 22935
     HEAP8[$$byval_copy7 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22936
     invoke_viii(13, $$byval_copy7 | 0, $220 | 0, $221 | 0); //@line 22937
     $223 = __THREW__; //@line 22938
     __THREW__ = 0; //@line 22938
     if ($223 & 1) {
      label = 100; //@line 22941
      break;
     }
     $222 = HEAP32[$217 >> 2] | 0; //@line 22944
     if (($222 | 0) == ($215 | 0)) {
      label = 101; //@line 22947
      break;
     }
    }
    if ((label | 0) == 100) {
     $227 = ___cxa_find_matching_catch_3(0) | 0; //@line 22954
     ___clang_call_terminate($227); //@line 22956
    } else if ((label | 0) == 101) {
     $229 = HEAP32[$214 >> 2] | 0; //@line 22961
     break;
    }
   }
  } while (0);
  __ZdlPv($229); //@line 22966
 }
 $230 = $3 + 4 | 0; //@line 22968
 if ((HEAP8[$230 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$27$i$i$i | 0); //@line 22973
 }
 __ZdlPv(HEAP32[$230 >> 2] | 0); //@line 22977
 ___resumeException($$27$i$i$i | 0); //@line 22978
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $113 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 4803
 $3 = HEAP32[8465] | 0; //@line 4804
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 4807
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 4811
 $7 = $6 & 3; //@line 4812
 if (($7 | 0) == 1) {
  _abort(); //@line 4815
 }
 $9 = $6 & -8; //@line 4818
 $10 = $2 + $9 | 0; //@line 4819
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 4824
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 4830
   $17 = $13 + $9 | 0; //@line 4831
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 4834
   }
   if ((HEAP32[8466] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 4840
    $106 = HEAP32[$105 >> 2] | 0; //@line 4841
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 4845
     $$1382 = $17; //@line 4845
     $113 = $16; //@line 4845
     break;
    }
    HEAP32[8463] = $17; //@line 4848
    HEAP32[$105 >> 2] = $106 & -2; //@line 4850
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 4853
    HEAP32[$16 + $17 >> 2] = $17; //@line 4855
    return;
   }
   $21 = $13 >>> 3; //@line 4858
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 4862
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 4864
    $28 = 33884 + ($21 << 1 << 2) | 0; //@line 4866
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 4871
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 4878
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[8461] = HEAP32[8461] & ~(1 << $21); //@line 4888
     $$1 = $16; //@line 4889
     $$1382 = $17; //@line 4889
     $113 = $16; //@line 4889
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 4895
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 4899
     }
     $41 = $26 + 8 | 0; //@line 4902
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 4906
     } else {
      _abort(); //@line 4908
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 4913
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 4914
    $$1 = $16; //@line 4915
    $$1382 = $17; //@line 4915
    $113 = $16; //@line 4915
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 4919
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 4921
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 4925
     $60 = $59 + 4 | 0; //@line 4926
     $61 = HEAP32[$60 >> 2] | 0; //@line 4927
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 4930
      if (!$63) {
       $$3 = 0; //@line 4933
       break;
      } else {
       $$1387 = $63; //@line 4936
       $$1390 = $59; //@line 4936
      }
     } else {
      $$1387 = $61; //@line 4939
      $$1390 = $60; //@line 4939
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 4942
      $66 = HEAP32[$65 >> 2] | 0; //@line 4943
      if ($66 | 0) {
       $$1387 = $66; //@line 4946
       $$1390 = $65; //@line 4946
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 4949
      $69 = HEAP32[$68 >> 2] | 0; //@line 4950
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 4955
       $$1390 = $68; //@line 4955
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 4960
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 4963
      $$3 = $$1387; //@line 4964
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 4969
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 4972
     }
     $53 = $51 + 12 | 0; //@line 4975
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 4979
     }
     $56 = $48 + 8 | 0; //@line 4982
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 4986
      HEAP32[$56 >> 2] = $51; //@line 4987
      $$3 = $48; //@line 4988
      break;
     } else {
      _abort(); //@line 4991
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 4998
    $$1382 = $17; //@line 4998
    $113 = $16; //@line 4998
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 5001
    $75 = 34148 + ($74 << 2) | 0; //@line 5002
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 5007
      if (!$$3) {
       HEAP32[8462] = HEAP32[8462] & ~(1 << $74); //@line 5014
       $$1 = $16; //@line 5015
       $$1382 = $17; //@line 5015
       $113 = $16; //@line 5015
       break L10;
      }
     } else {
      if ((HEAP32[8465] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 5022
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 5030
       if (!$$3) {
        $$1 = $16; //@line 5033
        $$1382 = $17; //@line 5033
        $113 = $16; //@line 5033
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[8465] | 0; //@line 5041
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 5044
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 5048
    $92 = $16 + 16 | 0; //@line 5049
    $93 = HEAP32[$92 >> 2] | 0; //@line 5050
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 5056
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 5060
       HEAP32[$93 + 24 >> 2] = $$3; //@line 5062
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 5068
    if (!$99) {
     $$1 = $16; //@line 5071
     $$1382 = $17; //@line 5071
     $113 = $16; //@line 5071
    } else {
     if ((HEAP32[8465] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 5076
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 5080
      HEAP32[$99 + 24 >> 2] = $$3; //@line 5082
      $$1 = $16; //@line 5083
      $$1382 = $17; //@line 5083
      $113 = $16; //@line 5083
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 5089
   $$1382 = $9; //@line 5089
   $113 = $2; //@line 5089
  }
 } while (0);
 if ($113 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 5094
 }
 $115 = $10 + 4 | 0; //@line 5097
 $116 = HEAP32[$115 >> 2] | 0; //@line 5098
 if (!($116 & 1)) {
  _abort(); //@line 5102
 }
 if (!($116 & 2)) {
  if ((HEAP32[8467] | 0) == ($10 | 0)) {
   $124 = (HEAP32[8464] | 0) + $$1382 | 0; //@line 5112
   HEAP32[8464] = $124; //@line 5113
   HEAP32[8467] = $$1; //@line 5114
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 5117
   if (($$1 | 0) != (HEAP32[8466] | 0)) {
    return;
   }
   HEAP32[8466] = 0; //@line 5123
   HEAP32[8463] = 0; //@line 5124
   return;
  }
  if ((HEAP32[8466] | 0) == ($10 | 0)) {
   $132 = (HEAP32[8463] | 0) + $$1382 | 0; //@line 5131
   HEAP32[8463] = $132; //@line 5132
   HEAP32[8466] = $113; //@line 5133
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 5136
   HEAP32[$113 + $132 >> 2] = $132; //@line 5138
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 5142
  $138 = $116 >>> 3; //@line 5143
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 5148
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 5150
    $145 = 33884 + ($138 << 1 << 2) | 0; //@line 5152
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[8465] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 5158
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 5165
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[8461] = HEAP32[8461] & ~(1 << $138); //@line 5175
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 5181
    } else {
     if ((HEAP32[8465] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 5186
     }
     $160 = $143 + 8 | 0; //@line 5189
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 5193
     } else {
      _abort(); //@line 5195
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 5200
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 5201
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 5204
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 5206
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 5210
      $180 = $179 + 4 | 0; //@line 5211
      $181 = HEAP32[$180 >> 2] | 0; //@line 5212
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 5215
       if (!$183) {
        $$3400 = 0; //@line 5218
        break;
       } else {
        $$1398 = $183; //@line 5221
        $$1402 = $179; //@line 5221
       }
      } else {
       $$1398 = $181; //@line 5224
       $$1402 = $180; //@line 5224
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 5227
       $186 = HEAP32[$185 >> 2] | 0; //@line 5228
       if ($186 | 0) {
        $$1398 = $186; //@line 5231
        $$1402 = $185; //@line 5231
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 5234
       $189 = HEAP32[$188 >> 2] | 0; //@line 5235
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 5240
        $$1402 = $188; //@line 5240
       }
      }
      if ((HEAP32[8465] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 5246
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 5249
       $$3400 = $$1398; //@line 5250
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 5255
      if ((HEAP32[8465] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 5259
      }
      $173 = $170 + 12 | 0; //@line 5262
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 5266
      }
      $176 = $167 + 8 | 0; //@line 5269
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 5273
       HEAP32[$176 >> 2] = $170; //@line 5274
       $$3400 = $167; //@line 5275
       break;
      } else {
       _abort(); //@line 5278
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 5286
     $196 = 34148 + ($195 << 2) | 0; //@line 5287
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 5292
       if (!$$3400) {
        HEAP32[8462] = HEAP32[8462] & ~(1 << $195); //@line 5299
        break L108;
       }
      } else {
       if ((HEAP32[8465] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 5306
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 5314
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[8465] | 0; //@line 5324
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 5327
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 5331
     $213 = $10 + 16 | 0; //@line 5332
     $214 = HEAP32[$213 >> 2] | 0; //@line 5333
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 5339
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 5343
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 5345
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 5351
     if ($220 | 0) {
      if ((HEAP32[8465] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 5357
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 5361
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 5363
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 5372
  HEAP32[$113 + $137 >> 2] = $137; //@line 5374
  if (($$1 | 0) == (HEAP32[8466] | 0)) {
   HEAP32[8463] = $137; //@line 5378
   return;
  } else {
   $$2 = $137; //@line 5381
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 5385
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 5388
  HEAP32[$113 + $$1382 >> 2] = $$1382; //@line 5390
  $$2 = $$1382; //@line 5391
 }
 $235 = $$2 >>> 3; //@line 5393
 if ($$2 >>> 0 < 256) {
  $238 = 33884 + ($235 << 1 << 2) | 0; //@line 5397
  $239 = HEAP32[8461] | 0; //@line 5398
  $240 = 1 << $235; //@line 5399
  if (!($239 & $240)) {
   HEAP32[8461] = $239 | $240; //@line 5404
   $$0403 = $238; //@line 5406
   $$pre$phiZ2D = $238 + 8 | 0; //@line 5406
  } else {
   $244 = $238 + 8 | 0; //@line 5408
   $245 = HEAP32[$244 >> 2] | 0; //@line 5409
   if ((HEAP32[8465] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 5413
   } else {
    $$0403 = $245; //@line 5416
    $$pre$phiZ2D = $244; //@line 5416
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 5419
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 5421
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 5423
  HEAP32[$$1 + 12 >> 2] = $238; //@line 5425
  return;
 }
 $251 = $$2 >>> 8; //@line 5428
 if (!$251) {
  $$0396 = 0; //@line 5431
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 5435
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 5439
   $257 = $251 << $256; //@line 5440
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 5443
   $262 = $257 << $260; //@line 5445
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 5448
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 5453
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 5459
  }
 }
 $276 = 34148 + ($$0396 << 2) | 0; //@line 5462
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 5464
 HEAP32[$$1 + 20 >> 2] = 0; //@line 5467
 HEAP32[$$1 + 16 >> 2] = 0; //@line 5468
 $280 = HEAP32[8462] | 0; //@line 5469
 $281 = 1 << $$0396; //@line 5470
 do {
  if (!($280 & $281)) {
   HEAP32[8462] = $280 | $281; //@line 5476
   HEAP32[$276 >> 2] = $$1; //@line 5477
   HEAP32[$$1 + 24 >> 2] = $276; //@line 5479
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 5481
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 5483
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 5491
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 5491
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 5498
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 5502
    $301 = HEAP32[$299 >> 2] | 0; //@line 5504
    if (!$301) {
     label = 121; //@line 5507
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 5510
     $$0384 = $301; //@line 5510
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[8465] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 5517
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 5520
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 5522
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 5524
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 5526
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 5531
    $309 = HEAP32[$308 >> 2] | 0; //@line 5532
    $310 = HEAP32[8465] | 0; //@line 5533
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 5539
     HEAP32[$308 >> 2] = $$1; //@line 5540
     HEAP32[$$1 + 8 >> 2] = $309; //@line 5542
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 5544
     HEAP32[$$1 + 24 >> 2] = 0; //@line 5546
     break;
    } else {
     _abort(); //@line 5549
    }
   }
  }
 } while (0);
 $319 = (HEAP32[8469] | 0) + -1 | 0; //@line 5556
 HEAP32[8469] = $319; //@line 5557
 if (!$319) {
  $$0212$in$i = 34300; //@line 5560
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 5565
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 5571
  }
 }
 HEAP32[8469] = -1; //@line 5574
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$04$i$i$i = 0, $$1$i$i$i = 0, $$15$i$i$i = 0, $$byval_copy5 = 0, $$sroa$9$0$$sroa_idx$i$i$i = 0, $$val = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $111 = 0, $113 = 0, $114 = 0, $119 = 0, $121 = 0, $122 = 0, $123 = 0, $128 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $141 = 0, $143 = 0, $144 = 0, $149 = 0, $15 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $167 = 0, $169 = 0, $173 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $183 = 0, $184 = 0, $185 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $203 = 0, $205 = 0, $206 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $63 = 0, $64 = 0, $69 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $87 = 0, $89 = 0, $93 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6652
 STACKTOP = STACKTOP + 224 | 0; //@line 6653
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 6653
 $$byval_copy5 = sp + 216 | 0; //@line 6654
 $2 = sp + 223 | 0; //@line 6655
 $3 = sp + 144 | 0; //@line 6656
 $4 = sp + 72 | 0; //@line 6657
 $5 = sp; //@line 6658
 $$val = HEAP32[$1 >> 2] | 0; //@line 6659
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 6661
 do {
  if ((HEAP32[$3 >> 2] | 0) == 2) {
   if (HEAP32[$3 + 16 >> 2] | 0) {
    $173 = ___cxa_allocate_exception(8) | 0; //@line 6670
    __THREW__ = 0; //@line 6671
    invoke_vii(125, $173 | 0, 17636); //@line 6672
    $174 = __THREW__; //@line 6673
    __THREW__ = 0; //@line 6673
    if ($174 & 1) {
     $177 = ___cxa_find_matching_catch_2() | 0; //@line 6676
     $178 = tempRet0; //@line 6677
     ___cxa_free_exception($173 | 0); //@line 6678
     $$1$i$i$i = $178; //@line 6679
     $$15$i$i$i = $177; //@line 6679
     break;
    } else {
     __THREW__ = 0; //@line 6682
     invoke_viii(16, $173 | 0, 2824, 242); //@line 6683
     __THREW__ = 0; //@line 6684
     label = 7; //@line 6685
     break;
    }
   }
   $13 = $3 + 24 | 0; //@line 6690
   $15 = HEAP32[$13 >> 2] | 0; //@line 6692
   if ((HEAP32[$13 + 4 >> 2] | 0) < 0) {
    $20 = ___cxa_allocate_exception(8) | 0; //@line 6698
    __THREW__ = 0; //@line 6699
    invoke_vii(125, $20 | 0, 17601); //@line 6700
    $21 = __THREW__; //@line 6701
    __THREW__ = 0; //@line 6701
    if ($21 & 1) {
     $24 = ___cxa_find_matching_catch_2() | 0; //@line 6704
     $25 = tempRet0; //@line 6705
     ___cxa_free_exception($20 | 0); //@line 6706
     $$1$i$i$i = $25; //@line 6707
     $$15$i$i$i = $24; //@line 6707
     break;
    } else {
     __THREW__ = 0; //@line 6710
     invoke_viii(16, $20 | 0, 2824, 242); //@line 6711
     __THREW__ = 0; //@line 6712
     label = 7; //@line 6713
     break;
    }
   }
   $28 = $4 + 4 | 0; //@line 6717
   HEAP32[$28 >> 2] = 0; //@line 6718
   HEAP32[$28 + 4 >> 2] = 0; //@line 6718
   HEAP32[$28 + 8 >> 2] = 0; //@line 6718
   $29 = $4 + 40 | 0; //@line 6719
   HEAP32[$29 >> 2] = 0; //@line 6720
   HEAP32[$29 + 4 >> 2] = 0; //@line 6720
   HEAP32[$29 + 8 >> 2] = 0; //@line 6720
   HEAP32[$29 + 12 >> 2] = 0; //@line 6720
   HEAP32[$29 + 16 >> 2] = 0; //@line 6720
   HEAP32[$29 + 20 >> 2] = 0; //@line 6720
   HEAP32[$4 >> 2] = 3; //@line 6721
   HEAP32[$$byval_copy5 >> 2] = 0; //@line 6722
   HEAP16[$$byval_copy5 + 4 >> 1] = 0; //@line 6722
   HEAP8[$$byval_copy5 + 6 >> 0] = 0; //@line 6722
   $30 = $28 + 11 | 0; //@line 6723
   HEAP8[$28 >> 0] = 0; //@line 6724
   HEAP8[$30 >> 0] = 0; //@line 6725
   __THREW__ = 0; //@line 6726
   invoke_vii(129, $28 | 0, 0); //@line 6727
   $31 = __THREW__; //@line 6728
   __THREW__ = 0; //@line 6728
   if ($31 & 1) {
    $33 = ___cxa_find_matching_catch_3(0) | 0; //@line 6731
    ___clang_call_terminate($33); //@line 6733
   }
   HEAP32[$4 + 4 >> 2] = $15 & 255; //@line 6739
   $$sroa$9$0$$sroa_idx$i$i$i = $4 + 8 | 0; //@line 6740
   HEAP32[$$sroa$9$0$$sroa_idx$i$i$i >> 2] = HEAP32[$$byval_copy5 >> 2]; //@line 6741
   HEAP16[$$sroa$9$0$$sroa_idx$i$i$i + 4 >> 1] = HEAP16[$$byval_copy5 + 4 >> 1] | 0; //@line 6741
   HEAP8[$$sroa$9$0$$sroa_idx$i$i$i + 6 >> 0] = HEAP8[$$byval_copy5 + 6 >> 0] | 0; //@line 6741
   HEAP8[$4 + 15 >> 0] = 1; //@line 6743
   __THREW__ = 0; //@line 6744
   $36 = invoke_ii(143, $$val | 0) | 0; //@line 6745
   $37 = __THREW__; //@line 6746
   __THREW__ = 0; //@line 6746
   do {
    if ($37 & 1) {
     label = 49; //@line 6750
    } else {
     __THREW__ = 0; //@line 6752
     invoke_vii(120, $5 | 0, $4 | 0); //@line 6753
     $39 = __THREW__; //@line 6754
     __THREW__ = 0; //@line 6754
     if ($39 & 1) {
      label = 49; //@line 6757
     } else {
      __THREW__ = 0; //@line 6759
      invoke_vii(128, $36 | 0, $5 | 0); //@line 6760
      $41 = __THREW__; //@line 6761
      __THREW__ = 0; //@line 6761
      if ($41 & 1) {
       $121 = ___cxa_find_matching_catch_2() | 0; //@line 6764
       $122 = tempRet0; //@line 6765
       $123 = $5 + 52 | 0; //@line 6766
       if ((HEAP8[$123 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$123 >> 2] | 0); //@line 6772
       }
       $128 = $5 + 40 | 0; //@line 6774
       $129 = HEAP32[$128 >> 2] | 0; //@line 6775
       if ($129 | 0) {
        $131 = $5 + 44 | 0; //@line 6778
        $132 = HEAP32[$131 >> 2] | 0; //@line 6779
        do {
         if (($132 | 0) == ($129 | 0)) {
          $143 = $129; //@line 6783
         } else {
          $134 = $5 + 48 | 0; //@line 6785
          $136 = $132; //@line 6786
          while (1) {
           $135 = $136 + -72 | 0; //@line 6788
           HEAP32[$131 >> 2] = $135; //@line 6789
           __THREW__ = 0; //@line 6790
           HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6791
           invoke_viii(13, $$byval_copy5 | 0, $134 | 0, $135 | 0); //@line 6792
           $137 = __THREW__; //@line 6793
           __THREW__ = 0; //@line 6793
           if ($137 & 1) {
            label = 57; //@line 6796
            break;
           }
           $136 = HEAP32[$131 >> 2] | 0; //@line 6799
           if (($136 | 0) == ($129 | 0)) {
            label = 58; //@line 6802
            break;
           }
          }
          if ((label | 0) == 57) {
           $141 = ___cxa_find_matching_catch_3(0) | 0; //@line 6809
           ___clang_call_terminate($141); //@line 6811
          } else if ((label | 0) == 58) {
           $143 = HEAP32[$128 >> 2] | 0; //@line 6816
           break;
          }
         }
        } while (0);
        __ZdlPv($143); //@line 6821
       }
       $144 = $5 + 4 | 0; //@line 6823
       if ((HEAP8[$144 + 11 >> 0] | 0) >= 0) {
        $$0$i$i$i = $122; //@line 6828
        $$04$i$i$i = $121; //@line 6828
        break;
       }
       __ZdlPv(HEAP32[$144 >> 2] | 0); //@line 6832
       $$0$i$i$i = $122; //@line 6833
       $$04$i$i$i = $121; //@line 6833
       break;
      }
      $43 = $5 + 52 | 0; //@line 6836
      if ((HEAP8[$43 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$43 >> 2] | 0); //@line 6842
      }
      $48 = $5 + 40 | 0; //@line 6844
      $49 = HEAP32[$48 >> 2] | 0; //@line 6845
      if ($49 | 0) {
       $51 = $5 + 44 | 0; //@line 6848
       $52 = HEAP32[$51 >> 2] | 0; //@line 6849
       do {
        if (($52 | 0) == ($49 | 0)) {
         $63 = $49; //@line 6853
        } else {
         $54 = $5 + 48 | 0; //@line 6855
         $56 = $52; //@line 6856
         while (1) {
          $55 = $56 + -72 | 0; //@line 6858
          HEAP32[$51 >> 2] = $55; //@line 6859
          __THREW__ = 0; //@line 6860
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6861
          invoke_viii(13, $$byval_copy5 | 0, $54 | 0, $55 | 0); //@line 6862
          $57 = __THREW__; //@line 6863
          __THREW__ = 0; //@line 6863
          if ($57 & 1) {
           label = 20; //@line 6866
           break;
          }
          $56 = HEAP32[$51 >> 2] | 0; //@line 6869
          if (($56 | 0) == ($49 | 0)) {
           label = 21; //@line 6872
           break;
          }
         }
         if ((label | 0) == 20) {
          $61 = ___cxa_find_matching_catch_3(0) | 0; //@line 6879
          ___clang_call_terminate($61); //@line 6881
         } else if ((label | 0) == 21) {
          $63 = HEAP32[$48 >> 2] | 0; //@line 6886
          break;
         }
        }
       } while (0);
       __ZdlPv($63); //@line 6891
      }
      $64 = $5 + 4 | 0; //@line 6893
      if ((HEAP8[$64 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$64 >> 2] | 0); //@line 6899
      }
      $69 = $4 + 52 | 0; //@line 6901
      if ((HEAP8[$69 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$69 >> 2] | 0); //@line 6907
      }
      $74 = $4 + 40 | 0; //@line 6909
      $75 = HEAP32[$74 >> 2] | 0; //@line 6910
      if ($75 | 0) {
       $77 = $4 + 44 | 0; //@line 6913
       $78 = HEAP32[$77 >> 2] | 0; //@line 6914
       do {
        if (($78 | 0) == ($75 | 0)) {
         $89 = $75; //@line 6918
        } else {
         $80 = $4 + 48 | 0; //@line 6920
         $82 = $78; //@line 6921
         while (1) {
          $81 = $82 + -72 | 0; //@line 6923
          HEAP32[$77 >> 2] = $81; //@line 6924
          __THREW__ = 0; //@line 6925
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6926
          invoke_viii(13, $$byval_copy5 | 0, $80 | 0, $81 | 0); //@line 6927
          $83 = __THREW__; //@line 6928
          __THREW__ = 0; //@line 6928
          if ($83 & 1) {
           label = 32; //@line 6931
           break;
          }
          $82 = HEAP32[$77 >> 2] | 0; //@line 6934
          if (($82 | 0) == ($75 | 0)) {
           label = 33; //@line 6937
           break;
          }
         }
         if ((label | 0) == 32) {
          $87 = ___cxa_find_matching_catch_3(0) | 0; //@line 6944
          ___clang_call_terminate($87); //@line 6946
         } else if ((label | 0) == 33) {
          $89 = HEAP32[$74 >> 2] | 0; //@line 6951
          break;
         }
        }
       } while (0);
       __ZdlPv($89); //@line 6956
      }
      if ((HEAP8[$30 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 6962
      }
      $93 = $3 + 52 | 0; //@line 6964
      if ((HEAP8[$93 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$93 >> 2] | 0); //@line 6970
      }
      $98 = $3 + 40 | 0; //@line 6972
      $99 = HEAP32[$98 >> 2] | 0; //@line 6973
      if ($99 | 0) {
       $101 = $3 + 44 | 0; //@line 6976
       $102 = HEAP32[$101 >> 2] | 0; //@line 6977
       do {
        if (($102 | 0) == ($99 | 0)) {
         $113 = $99; //@line 6981
        } else {
         $104 = $3 + 48 | 0; //@line 6983
         $106 = $102; //@line 6984
         while (1) {
          $105 = $106 + -72 | 0; //@line 6986
          HEAP32[$101 >> 2] = $105; //@line 6987
          __THREW__ = 0; //@line 6988
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6989
          invoke_viii(13, $$byval_copy5 | 0, $104 | 0, $105 | 0); //@line 6990
          $107 = __THREW__; //@line 6991
          __THREW__ = 0; //@line 6991
          if ($107 & 1) {
           label = 44; //@line 6994
           break;
          }
          $106 = HEAP32[$101 >> 2] | 0; //@line 6997
          if (($106 | 0) == ($99 | 0)) {
           label = 45; //@line 7000
           break;
          }
         }
         if ((label | 0) == 44) {
          $111 = ___cxa_find_matching_catch_3(0) | 0; //@line 7007
          ___clang_call_terminate($111); //@line 7009
         } else if ((label | 0) == 45) {
          $113 = HEAP32[$98 >> 2] | 0; //@line 7014
          break;
         }
        }
       } while (0);
       __ZdlPv($113); //@line 7019
      }
      $114 = $3 + 4 | 0; //@line 7021
      if ((HEAP8[$114 + 11 >> 0] | 0) >= 0) {
       STACKTOP = sp; //@line 7026
       return;
      }
      __ZdlPv(HEAP32[$114 >> 2] | 0); //@line 7029
      STACKTOP = sp; //@line 7030
      return;
     }
    }
   } while (0);
   if ((label | 0) == 49) {
    $119 = ___cxa_find_matching_catch_2() | 0; //@line 7035
    $$0$i$i$i = tempRet0; //@line 7037
    $$04$i$i$i = $119; //@line 7037
   }
   $149 = $4 + 52 | 0; //@line 7039
   if ((HEAP8[$149 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$149 >> 2] | 0); //@line 7045
   }
   $154 = $4 + 40 | 0; //@line 7047
   $155 = HEAP32[$154 >> 2] | 0; //@line 7048
   if ($155 | 0) {
    $157 = $4 + 44 | 0; //@line 7051
    $158 = HEAP32[$157 >> 2] | 0; //@line 7052
    do {
     if (($158 | 0) == ($155 | 0)) {
      $169 = $155; //@line 7056
     } else {
      $160 = $4 + 48 | 0; //@line 7058
      $162 = $158; //@line 7059
      while (1) {
       $161 = $162 + -72 | 0; //@line 7061
       HEAP32[$157 >> 2] = $161; //@line 7062
       __THREW__ = 0; //@line 7063
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7064
       invoke_viii(13, $$byval_copy5 | 0, $160 | 0, $161 | 0); //@line 7065
       $163 = __THREW__; //@line 7066
       __THREW__ = 0; //@line 7066
       if ($163 & 1) {
        label = 69; //@line 7069
        break;
       }
       $162 = HEAP32[$157 >> 2] | 0; //@line 7072
       if (($162 | 0) == ($155 | 0)) {
        label = 70; //@line 7075
        break;
       }
      }
      if ((label | 0) == 69) {
       $167 = ___cxa_find_matching_catch_3(0) | 0; //@line 7082
       ___clang_call_terminate($167); //@line 7084
      } else if ((label | 0) == 70) {
       $169 = HEAP32[$154 >> 2] | 0; //@line 7089
       break;
      }
     }
    } while (0);
    __ZdlPv($169); //@line 7094
   }
   if ((HEAP8[$30 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 7100
   }
   $$1$i$i$i = $$0$i$i$i; //@line 7102
   $$15$i$i$i = $$04$i$i$i; //@line 7102
  } else {
   $179 = ___cxa_allocate_exception(8) | 0; //@line 7104
   __THREW__ = 0; //@line 7105
   invoke_vii(125, $179 | 0, 17666); //@line 7106
   $180 = __THREW__; //@line 7107
   __THREW__ = 0; //@line 7107
   if ($180 & 1) {
    $183 = ___cxa_find_matching_catch_2() | 0; //@line 7110
    $184 = tempRet0; //@line 7111
    ___cxa_free_exception($179 | 0); //@line 7112
    $$1$i$i$i = $184; //@line 7113
    $$15$i$i$i = $183; //@line 7113
    break;
   } else {
    __THREW__ = 0; //@line 7116
    invoke_viii(16, $179 | 0, 2824, 242); //@line 7117
    __THREW__ = 0; //@line 7118
    label = 7; //@line 7119
    break;
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $26 = ___cxa_find_matching_catch_2() | 0; //@line 7125
  $$1$i$i$i = tempRet0; //@line 7127
  $$15$i$i$i = $26; //@line 7127
 }
 $185 = $3 + 52 | 0; //@line 7129
 if ((HEAP8[$185 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$185 >> 2] | 0); //@line 7135
 }
 $190 = $3 + 40 | 0; //@line 7137
 $191 = HEAP32[$190 >> 2] | 0; //@line 7138
 if ($191 | 0) {
  $193 = $3 + 44 | 0; //@line 7141
  $194 = HEAP32[$193 >> 2] | 0; //@line 7142
  do {
   if (($194 | 0) == ($191 | 0)) {
    $205 = $191; //@line 7146
   } else {
    $196 = $3 + 48 | 0; //@line 7148
    $198 = $194; //@line 7149
    while (1) {
     $197 = $198 + -72 | 0; //@line 7151
     HEAP32[$193 >> 2] = $197; //@line 7152
     __THREW__ = 0; //@line 7153
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7154
     invoke_viii(13, $$byval_copy5 | 0, $196 | 0, $197 | 0); //@line 7155
     $199 = __THREW__; //@line 7156
     __THREW__ = 0; //@line 7156
     if ($199 & 1) {
      label = 88; //@line 7159
      break;
     }
     $198 = HEAP32[$193 >> 2] | 0; //@line 7162
     if (($198 | 0) == ($191 | 0)) {
      label = 89; //@line 7165
      break;
     }
    }
    if ((label | 0) == 88) {
     $203 = ___cxa_find_matching_catch_3(0) | 0; //@line 7172
     ___clang_call_terminate($203); //@line 7174
    } else if ((label | 0) == 89) {
     $205 = HEAP32[$190 >> 2] | 0; //@line 7179
     break;
    }
   }
  } while (0);
  __ZdlPv($205); //@line 7184
 }
 $206 = $3 + 4 | 0; //@line 7186
 if ((HEAP8[$206 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$15$i$i$i | 0); //@line 7191
 }
 __ZdlPv(HEAP32[$206 >> 2] | 0); //@line 7195
 ___resumeException($$15$i$i$i | 0); //@line 7196
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 6070
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 6072
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 6077
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 6084
   $12 = $7 + $1 | 0; //@line 6085
   $13 = HEAP32[8465] | 0; //@line 6086
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 6089
   }
   if ((HEAP32[8466] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 6095
    $102 = HEAP32[$101 >> 2] | 0; //@line 6096
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 6100
     $$1418 = $12; //@line 6100
     break;
    }
    HEAP32[8463] = $12; //@line 6103
    HEAP32[$101 >> 2] = $102 & -2; //@line 6105
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 6108
    HEAP32[$2 >> 2] = $12; //@line 6109
    return;
   }
   $17 = $7 >>> 3; //@line 6112
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 6116
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 6118
    $24 = 33884 + ($17 << 1 << 2) | 0; //@line 6120
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 6125
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 6132
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[8461] = HEAP32[8461] & ~(1 << $17); //@line 6142
     $$1 = $11; //@line 6143
     $$1418 = $12; //@line 6143
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 6149
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 6153
     }
     $37 = $22 + 8 | 0; //@line 6156
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 6160
     } else {
      _abort(); //@line 6162
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 6167
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 6168
    $$1 = $11; //@line 6169
    $$1418 = $12; //@line 6169
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 6173
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 6175
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 6179
     $56 = $55 + 4 | 0; //@line 6180
     $57 = HEAP32[$56 >> 2] | 0; //@line 6181
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 6184
      if (!$59) {
       $$3 = 0; //@line 6187
       break;
      } else {
       $$1426 = $59; //@line 6190
       $$1429 = $55; //@line 6190
      }
     } else {
      $$1426 = $57; //@line 6193
      $$1429 = $56; //@line 6193
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 6196
      $62 = HEAP32[$61 >> 2] | 0; //@line 6197
      if ($62 | 0) {
       $$1426 = $62; //@line 6200
       $$1429 = $61; //@line 6200
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 6203
      $65 = HEAP32[$64 >> 2] | 0; //@line 6204
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 6209
       $$1429 = $64; //@line 6209
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 6214
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 6217
      $$3 = $$1426; //@line 6218
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 6223
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 6226
     }
     $49 = $47 + 12 | 0; //@line 6229
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 6233
     }
     $52 = $44 + 8 | 0; //@line 6236
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 6240
      HEAP32[$52 >> 2] = $47; //@line 6241
      $$3 = $44; //@line 6242
      break;
     } else {
      _abort(); //@line 6245
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 6252
    $$1418 = $12; //@line 6252
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 6255
    $71 = 34148 + ($70 << 2) | 0; //@line 6256
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 6261
      if (!$$3) {
       HEAP32[8462] = HEAP32[8462] & ~(1 << $70); //@line 6268
       $$1 = $11; //@line 6269
       $$1418 = $12; //@line 6269
       break L1;
      }
     } else {
      if ((HEAP32[8465] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 6276
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 6284
       if (!$$3) {
        $$1 = $11; //@line 6287
        $$1418 = $12; //@line 6287
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[8465] | 0; //@line 6295
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 6298
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 6302
    $88 = $11 + 16 | 0; //@line 6303
    $89 = HEAP32[$88 >> 2] | 0; //@line 6304
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 6310
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 6314
       HEAP32[$89 + 24 >> 2] = $$3; //@line 6316
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 6322
    if (!$95) {
     $$1 = $11; //@line 6325
     $$1418 = $12; //@line 6325
    } else {
     if ((HEAP32[8465] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 6330
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 6334
      HEAP32[$95 + 24 >> 2] = $$3; //@line 6336
      $$1 = $11; //@line 6337
      $$1418 = $12; //@line 6337
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 6343
   $$1418 = $1; //@line 6343
  }
 } while (0);
 $108 = HEAP32[8465] | 0; //@line 6346
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 6349
 }
 $110 = $2 + 4 | 0; //@line 6352
 $111 = HEAP32[$110 >> 2] | 0; //@line 6353
 if (!($111 & 2)) {
  if ((HEAP32[8467] | 0) == ($2 | 0)) {
   $117 = (HEAP32[8464] | 0) + $$1418 | 0; //@line 6361
   HEAP32[8464] = $117; //@line 6362
   HEAP32[8467] = $$1; //@line 6363
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 6366
   if (($$1 | 0) != (HEAP32[8466] | 0)) {
    return;
   }
   HEAP32[8466] = 0; //@line 6372
   HEAP32[8463] = 0; //@line 6373
   return;
  }
  if ((HEAP32[8466] | 0) == ($2 | 0)) {
   $125 = (HEAP32[8463] | 0) + $$1418 | 0; //@line 6380
   HEAP32[8463] = $125; //@line 6381
   HEAP32[8466] = $$1; //@line 6382
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 6385
   HEAP32[$$1 + $125 >> 2] = $125; //@line 6387
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 6391
  $131 = $111 >>> 3; //@line 6392
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 6397
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 6399
    $138 = 33884 + ($131 << 1 << 2) | 0; //@line 6401
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 6406
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 6413
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[8461] = HEAP32[8461] & ~(1 << $131); //@line 6423
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 6429
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 6433
     }
     $151 = $136 + 8 | 0; //@line 6436
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 6440
     } else {
      _abort(); //@line 6442
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 6447
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 6448
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 6451
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 6453
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 6457
      $170 = $169 + 4 | 0; //@line 6458
      $171 = HEAP32[$170 >> 2] | 0; //@line 6459
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 6462
       if (!$173) {
        $$3435 = 0; //@line 6465
        break;
       } else {
        $$1433 = $173; //@line 6468
        $$1437 = $169; //@line 6468
       }
      } else {
       $$1433 = $171; //@line 6471
       $$1437 = $170; //@line 6471
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 6474
       $176 = HEAP32[$175 >> 2] | 0; //@line 6475
       if ($176 | 0) {
        $$1433 = $176; //@line 6478
        $$1437 = $175; //@line 6478
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 6481
       $179 = HEAP32[$178 >> 2] | 0; //@line 6482
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 6487
        $$1437 = $178; //@line 6487
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 6492
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 6495
       $$3435 = $$1433; //@line 6496
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 6501
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 6504
      }
      $163 = $161 + 12 | 0; //@line 6507
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 6511
      }
      $166 = $158 + 8 | 0; //@line 6514
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 6518
       HEAP32[$166 >> 2] = $161; //@line 6519
       $$3435 = $158; //@line 6520
       break;
      } else {
       _abort(); //@line 6523
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 6531
     $185 = 34148 + ($184 << 2) | 0; //@line 6532
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 6537
       if (!$$3435) {
        HEAP32[8462] = HEAP32[8462] & ~(1 << $184); //@line 6544
        break L96;
       }
      } else {
       if ((HEAP32[8465] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 6551
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 6559
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[8465] | 0; //@line 6569
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 6572
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 6576
     $202 = $2 + 16 | 0; //@line 6577
     $203 = HEAP32[$202 >> 2] | 0; //@line 6578
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 6584
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 6588
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 6590
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 6596
     if ($209 | 0) {
      if ((HEAP32[8465] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 6602
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 6606
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 6608
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 6617
  HEAP32[$$1 + $130 >> 2] = $130; //@line 6619
  if (($$1 | 0) == (HEAP32[8466] | 0)) {
   HEAP32[8463] = $130; //@line 6623
   return;
  } else {
   $$2 = $130; //@line 6626
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 6630
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 6633
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 6635
  $$2 = $$1418; //@line 6636
 }
 $224 = $$2 >>> 3; //@line 6638
 if ($$2 >>> 0 < 256) {
  $227 = 33884 + ($224 << 1 << 2) | 0; //@line 6642
  $228 = HEAP32[8461] | 0; //@line 6643
  $229 = 1 << $224; //@line 6644
  if (!($228 & $229)) {
   HEAP32[8461] = $228 | $229; //@line 6649
   $$0438 = $227; //@line 6651
   $$pre$phiZ2D = $227 + 8 | 0; //@line 6651
  } else {
   $233 = $227 + 8 | 0; //@line 6653
   $234 = HEAP32[$233 >> 2] | 0; //@line 6654
   if ((HEAP32[8465] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 6658
   } else {
    $$0438 = $234; //@line 6661
    $$pre$phiZ2D = $233; //@line 6661
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 6664
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 6666
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 6668
  HEAP32[$$1 + 12 >> 2] = $227; //@line 6670
  return;
 }
 $240 = $$2 >>> 8; //@line 6673
 if (!$240) {
  $$0431 = 0; //@line 6676
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 6680
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 6684
   $246 = $240 << $245; //@line 6685
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 6688
   $251 = $246 << $249; //@line 6690
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 6693
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 6698
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 6704
  }
 }
 $265 = 34148 + ($$0431 << 2) | 0; //@line 6707
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 6709
 HEAP32[$$1 + 20 >> 2] = 0; //@line 6712
 HEAP32[$$1 + 16 >> 2] = 0; //@line 6713
 $269 = HEAP32[8462] | 0; //@line 6714
 $270 = 1 << $$0431; //@line 6715
 if (!($269 & $270)) {
  HEAP32[8462] = $269 | $270; //@line 6720
  HEAP32[$265 >> 2] = $$1; //@line 6721
  HEAP32[$$1 + 24 >> 2] = $265; //@line 6723
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 6725
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 6727
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 6736
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 6736
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 6743
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 6747
  $290 = HEAP32[$288 >> 2] | 0; //@line 6749
  if (!$290) {
   label = 118; //@line 6752
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 6755
   $$0420 = $290; //@line 6755
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[8465] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 6762
  }
  HEAP32[$288 >> 2] = $$1; //@line 6765
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 6767
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 6769
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 6771
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 6775
  $298 = HEAP32[$297 >> 2] | 0; //@line 6776
  $299 = HEAP32[8465] | 0; //@line 6777
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 6782
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 6786
  HEAP32[$297 >> 2] = $$1; //@line 6787
  HEAP32[$$1 + 8 >> 2] = $298; //@line 6789
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 6791
  HEAP32[$$1 + 24 >> 2] = 0; //@line 6793
  return;
 }
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $210 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $262 = 0, $264 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 10469
   $289 = 0; //@line 10470
   $290 = 0; //@line 10470
  } else {
   $6 = $0 + 4 | 0; //@line 10472
   $7 = $0 + 100 | 0; //@line 10473
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 10475
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 10480
     $16 = HEAPU8[$9 >> 0] | 0; //@line 10483
    } else {
     $16 = ___shgetc($0) | 0; //@line 10486
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 10498
      $21 = HEAP32[$6 >> 2] | 0; //@line 10499
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 10504
       $$0157 = $20; //@line 10507
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 10507
       break L11;
      } else {
       $$0157 = $20; //@line 10511
       $$0159 = ___shgetc($0) | 0; //@line 10511
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 10517
      $$0159 = $16; //@line 10517
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 10521
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 10528
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 10533
      $40 = HEAPU8[$32 >> 0] | 0; //@line 10536
     } else {
      $40 = ___shgetc($0) | 0; //@line 10539
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 10545
       $$1165167 = 8; //@line 10545
       label = 46; //@line 10546
       break;
      } else {
       $$1160 = $40; //@line 10549
       $$1165 = $1; //@line 10549
       label = 32; //@line 10550
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 10554
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 10559
      $50 = HEAPU8[$42 >> 0] | 0; //@line 10562
     } else {
      $50 = ___shgetc($0) | 0; //@line 10565
     }
     if ((HEAPU8[28600 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 10572
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 10576
      }
      if (!$2) {
       ___shlim($0, 0); //@line 10580
       $289 = 0; //@line 10581
       $290 = 0; //@line 10581
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 10585
       $290 = 0; //@line 10585
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 10590
      $289 = 0; //@line 10591
      $290 = 0; //@line 10591
      break L1;
     } else {
      $$1160169 = $50; //@line 10594
      $$1165167 = 16; //@line 10594
      label = 46; //@line 10595
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 10598
     if ($$166 >>> 0 > (HEAPU8[28600 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 10604
      $$1165 = $$166; //@line 10604
      label = 32; //@line 10605
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 10612
      }
      ___shlim($0, 0); //@line 10614
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 10616
      $289 = 0; //@line 10617
      $290 = 0; //@line 10617
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 10626
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 10629
       $74 = $70; //@line 10629
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 10632
        $75 = HEAP32[$6 >> 2] | 0; //@line 10633
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 10638
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 10641
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 10644
        }
        $74 = $$2161$be + -48 | 0; //@line 10646
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 10656
       $291 = $$0154222; //@line 10656
       $292 = 0; //@line 10656
      } else {
       $$2161$lcssa = $$1160; //@line 10658
       $291 = 0; //@line 10658
       $292 = 0; //@line 10658
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 10660
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 10663
       $88 = $291; //@line 10663
       $89 = $292; //@line 10663
       $92 = $86; //@line 10663
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 10665
        $91 = tempRet0; //@line 10666
        $94 = (($92 | 0) < 0) << 31 >> 31; //@line 10668
        $96 = ~$94; //@line 10670
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$92 >>> 0) {
         $$1165168 = 10; //@line 10677
         $$8 = $$3162215; //@line 10677
         $293 = $88; //@line 10677
         $294 = $89; //@line 10677
         label = 72; //@line 10678
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $92 | 0, $94 | 0) | 0; //@line 10681
        $89 = tempRet0; //@line 10682
        $104 = HEAP32[$6 >> 2] | 0; //@line 10683
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 10688
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 10691
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 10694
        }
        $92 = $$3162$be + -48 | 0; //@line 10696
        if (!($92 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 10705
        }
       }
       if ($92 >>> 0 > 9) {
        $$1158 = $$0157; //@line 10712
        $262 = $89; //@line 10712
        $264 = $88; //@line 10712
       } else {
        $$1165168 = 10; //@line 10714
        $$8 = $$3162$be; //@line 10714
        $293 = $88; //@line 10714
        $294 = $89; //@line 10714
        label = 72; //@line 10715
       }
      } else {
       $$1158 = $$0157; //@line 10718
       $262 = $292; //@line 10718
       $264 = $291; //@line 10718
      }
     } else {
      $$1160169 = $$1160; //@line 10721
      $$1165167 = $$1165; //@line 10721
      label = 46; //@line 10722
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[28856 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 10737
      $133 = HEAP8[28600 + $$1160169 >> 0] | 0; //@line 10739
      $134 = $133 & 255; //@line 10740
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 10743
       $138 = $134; //@line 10743
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 10746
        $139 = HEAP32[$6 >> 2] | 0; //@line 10747
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 10752
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 10755
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 10758
        }
        $147 = HEAP8[28600 + $$4163$be >> 0] | 0; //@line 10761
        $138 = $147 & 255; //@line 10762
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 10772
       $155 = $147; //@line 10772
       $158 = 0; //@line 10772
       $160 = $$1155192; //@line 10772
      } else {
       $$4163$lcssa = $$1160169; //@line 10774
       $155 = $133; //@line 10774
       $158 = 0; //@line 10774
       $160 = 0; //@line 10774
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 10776
      $153 = tempRet0; //@line 10777
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 10787
       $$8 = $$4163$lcssa; //@line 10787
       $293 = $160; //@line 10787
       $294 = $158; //@line 10787
       label = 72; //@line 10788
       break;
      } else {
       $164 = $160; //@line 10791
       $165 = $158; //@line 10791
       $169 = $155; //@line 10791
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 10794
       $167 = tempRet0; //@line 10795
       $170 = $166 | $169 & 255; //@line 10797
       $171 = HEAP32[$6 >> 2] | 0; //@line 10798
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 10803
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 10806
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 10809
       }
       $169 = HEAP8[28600 + $$5$be >> 0] | 0; //@line 10812
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 10822
        $$8 = $$5$be; //@line 10822
        $293 = $170; //@line 10822
        $294 = $167; //@line 10822
        label = 72; //@line 10823
        break L63;
       } else {
        $164 = $170; //@line 10826
        $165 = $167; //@line 10826
       }
      }
     }
     $123 = HEAP8[28600 + $$1160169 >> 0] | 0; //@line 10831
     $124 = $123 & 255; //@line 10832
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 10835
      $189 = $124; //@line 10835
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 10838
       $190 = HEAP32[$6 >> 2] | 0; //@line 10839
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 10844
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 10847
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 10850
       }
       $198 = HEAP8[28600 + $$6$be >> 0] | 0; //@line 10853
       $189 = $198 & 255; //@line 10854
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 10864
      $204 = $198; //@line 10864
      $295 = $$2156210; //@line 10864
      $296 = 0; //@line 10864
     } else {
      $$6$lcssa = $$1160169; //@line 10866
      $204 = $123; //@line 10866
      $295 = 0; //@line 10866
      $296 = 0; //@line 10866
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 10871
      $207 = tempRet0; //@line 10872
      $$7198 = $$6$lcssa; //@line 10873
      $208 = $296; //@line 10873
      $210 = $295; //@line 10873
      $218 = $204; //@line 10873
      while (1) {
       if ($208 >>> 0 > $207 >>> 0 | ($208 | 0) == ($207 | 0) & $210 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 10881
        $$8 = $$7198; //@line 10881
        $293 = $210; //@line 10881
        $294 = $208; //@line 10881
        label = 72; //@line 10882
        break L63;
       }
       $215 = ___muldi3($210 | 0, $208 | 0, $$1165167 | 0, 0) | 0; //@line 10885
       $216 = tempRet0; //@line 10886
       $217 = $218 & 255; //@line 10887
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 10895
        $$8 = $$7198; //@line 10895
        $293 = $210; //@line 10895
        $294 = $208; //@line 10895
        label = 72; //@line 10896
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 10899
       $226 = tempRet0; //@line 10900
       $227 = HEAP32[$6 >> 2] | 0; //@line 10901
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 10906
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 10909
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 10912
       }
       $218 = HEAP8[28600 + $$7$be >> 0] | 0; //@line 10915
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 10921
        $$8 = $$7$be; //@line 10921
        $293 = $225; //@line 10921
        $294 = $226; //@line 10921
        label = 72; //@line 10922
        break;
       } else {
        $$7198 = $$7$be; //@line 10919
        $208 = $226; //@line 10919
        $210 = $225; //@line 10919
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 10927
      $$8 = $$6$lcssa; //@line 10927
      $293 = $295; //@line 10927
      $294 = $296; //@line 10927
      label = 72; //@line 10928
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[28600 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 10939
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 10944
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 10947
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 10950
      }
     } while ($$1165168 >>> 0 > (HEAPU8[28600 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 10961
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 10967
     $262 = $4; //@line 10967
     $264 = $3; //@line 10967
    } else {
     $$1158 = $$0157; //@line 10969
     $262 = $294; //@line 10969
     $264 = $293; //@line 10969
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 10977
   }
   if (!($262 >>> 0 < $4 >>> 0 | ($262 | 0) == ($4 | 0) & $264 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 10993
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 10994
     $289 = tempRet0; //@line 10996
     $290 = $275; //@line 10996
     break;
    }
    if ($262 >>> 0 > $4 >>> 0 | ($262 | 0) == ($4 | 0) & $264 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 11006
     $289 = $4; //@line 11007
     $290 = $3; //@line 11007
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 11012
   $287 = _i64Subtract($264 ^ $$1158 | 0, $262 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 11015
   $289 = tempRet0; //@line 11017
   $290 = $287; //@line 11017
  }
 } while (0);
 tempRet0 = $289; //@line 11020
 return $290 | 0; //@line 11021
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$015$i$i$i = 0, $$1$i$i$i = 0, $$116$i$i$i = 0, $$byval_copy5 = 0, $$val = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $106 = 0, $108 = 0, $11 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $134 = 0, $136 = 0, $137 = 0, $142 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $160 = 0, $162 = 0, $167 = 0, $168 = 0, $171 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $186 = 0, $187 = 0, $189 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $199 = 0, $2 = 0, $201 = 0, $202 = 0, $23 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $58 = 0, $63 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $81 = 0, $83 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6065
 STACKTOP = STACKTOP + 224 | 0; //@line 6066
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 6066
 $$byval_copy5 = sp + 217 | 0; //@line 6067
 $2 = sp + 216 | 0; //@line 6068
 $3 = sp + 144 | 0; //@line 6069
 $4 = sp + 72 | 0; //@line 6070
 $5 = sp; //@line 6071
 $$val = HEAP32[$1 >> 2] | 0; //@line 6072
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 6074
 do {
  if ((HEAP32[$3 >> 2] | 0) == 3) {
   $9 = $3 + 4 | 0; //@line 6079
   $10 = $9 + 11 | 0; //@line 6080
   $11 = HEAP8[$10 >> 0] | 0; //@line 6081
   $12 = $11 << 24 >> 24 < 0; //@line 6082
   if (!(($12 ? HEAP32[$3 + 8 >> 2] | 0 : $11 & 255) | 0)) {
    $167 = ___cxa_allocate_exception(8) | 0; //@line 6089
    __THREW__ = 0; //@line 6090
    invoke_vii(125, $167 | 0, 17416); //@line 6091
    $168 = __THREW__; //@line 6092
    __THREW__ = 0; //@line 6092
    if ($168 & 1) {
     $171 = ___cxa_find_matching_catch_2() | 0; //@line 6095
     $172 = tempRet0; //@line 6096
     ___cxa_free_exception($167 | 0); //@line 6097
     $$1$i$i$i = $172; //@line 6098
     $$116$i$i$i = $171; //@line 6098
     break;
    } else {
     __THREW__ = 0; //@line 6101
     invoke_viii(16, $167 | 0, 2824, 242); //@line 6102
     __THREW__ = 0; //@line 6103
     label = 71; //@line 6104
     break;
    }
   }
   $18 = $4 + 4 | 0; //@line 6108
   HEAP32[$18 >> 2] = 0; //@line 6109
   HEAP32[$18 + 4 >> 2] = 0; //@line 6109
   HEAP32[$18 + 8 >> 2] = 0; //@line 6109
   $19 = $4 + 40 | 0; //@line 6110
   HEAP32[$19 >> 2] = 0; //@line 6111
   HEAP32[$19 + 4 >> 2] = 0; //@line 6111
   HEAP32[$19 + 8 >> 2] = 0; //@line 6111
   HEAP32[$19 + 12 >> 2] = 0; //@line 6111
   HEAP32[$19 + 16 >> 2] = 0; //@line 6111
   HEAP32[$19 + 20 >> 2] = 0; //@line 6111
   $23 = HEAP8[($12 ? HEAP32[$9 >> 2] | 0 : $9) >> 0] | 0; //@line 6115
   HEAP32[$4 >> 2] = 2; //@line 6118
   HEAP32[$4 + 16 >> 2] = 0; //@line 6120
   $26 = $4 + 24 | 0; //@line 6122
   HEAP32[$26 >> 2] = $23; //@line 6124
   HEAP32[$26 + 4 >> 2] = (($23 | 0) < 0) << 31 >> 31; //@line 6127
   __THREW__ = 0; //@line 6128
   $30 = invoke_ii(143, $$val | 0) | 0; //@line 6129
   $31 = __THREW__; //@line 6130
   __THREW__ = 0; //@line 6130
   do {
    if ($31 & 1) {
     label = 42; //@line 6134
    } else {
     __THREW__ = 0; //@line 6136
     invoke_vii(120, $5 | 0, $4 | 0); //@line 6137
     $33 = __THREW__; //@line 6138
     __THREW__ = 0; //@line 6138
     if ($33 & 1) {
      label = 42; //@line 6141
     } else {
      __THREW__ = 0; //@line 6143
      invoke_vii(128, $30 | 0, $5 | 0); //@line 6144
      $35 = __THREW__; //@line 6145
      __THREW__ = 0; //@line 6145
      if ($35 & 1) {
       $114 = ___cxa_find_matching_catch_2() | 0; //@line 6148
       $115 = tempRet0; //@line 6149
       $116 = $5 + 52 | 0; //@line 6150
       if ((HEAP8[$116 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$116 >> 2] | 0); //@line 6156
       }
       $121 = $5 + 40 | 0; //@line 6158
       $122 = HEAP32[$121 >> 2] | 0; //@line 6159
       if ($122 | 0) {
        $124 = $5 + 44 | 0; //@line 6162
        $125 = HEAP32[$124 >> 2] | 0; //@line 6163
        do {
         if (($125 | 0) == ($122 | 0)) {
          $136 = $122; //@line 6167
         } else {
          $127 = $5 + 48 | 0; //@line 6169
          $129 = $125; //@line 6170
          while (1) {
           $128 = $129 + -72 | 0; //@line 6172
           HEAP32[$124 >> 2] = $128; //@line 6173
           __THREW__ = 0; //@line 6174
           HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6175
           invoke_viii(13, $$byval_copy5 | 0, $127 | 0, $128 | 0); //@line 6176
           $130 = __THREW__; //@line 6177
           __THREW__ = 0; //@line 6177
           if ($130 & 1) {
            label = 50; //@line 6180
            break;
           }
           $129 = HEAP32[$124 >> 2] | 0; //@line 6183
           if (($129 | 0) == ($122 | 0)) {
            label = 51; //@line 6186
            break;
           }
          }
          if ((label | 0) == 50) {
           $134 = ___cxa_find_matching_catch_3(0) | 0; //@line 6193
           ___clang_call_terminate($134); //@line 6195
          } else if ((label | 0) == 51) {
           $136 = HEAP32[$121 >> 2] | 0; //@line 6200
           break;
          }
         }
        } while (0);
        __ZdlPv($136); //@line 6205
       }
       $137 = $5 + 4 | 0; //@line 6207
       if ((HEAP8[$137 + 11 >> 0] | 0) >= 0) {
        $$0$i$i$i = $115; //@line 6212
        $$015$i$i$i = $114; //@line 6212
        break;
       }
       __ZdlPv(HEAP32[$137 >> 2] | 0); //@line 6216
       $$0$i$i$i = $115; //@line 6217
       $$015$i$i$i = $114; //@line 6217
       break;
      }
      $37 = $5 + 52 | 0; //@line 6220
      if ((HEAP8[$37 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$37 >> 2] | 0); //@line 6226
      }
      $42 = $5 + 40 | 0; //@line 6228
      $43 = HEAP32[$42 >> 2] | 0; //@line 6229
      if ($43 | 0) {
       $45 = $5 + 44 | 0; //@line 6232
       $46 = HEAP32[$45 >> 2] | 0; //@line 6233
       do {
        if (($46 | 0) == ($43 | 0)) {
         $57 = $43; //@line 6237
        } else {
         $48 = $5 + 48 | 0; //@line 6239
         $50 = $46; //@line 6240
         while (1) {
          $49 = $50 + -72 | 0; //@line 6242
          HEAP32[$45 >> 2] = $49; //@line 6243
          __THREW__ = 0; //@line 6244
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6245
          invoke_viii(13, $$byval_copy5 | 0, $48 | 0, $49 | 0); //@line 6246
          $51 = __THREW__; //@line 6247
          __THREW__ = 0; //@line 6247
          if ($51 & 1) {
           label = 13; //@line 6250
           break;
          }
          $50 = HEAP32[$45 >> 2] | 0; //@line 6253
          if (($50 | 0) == ($43 | 0)) {
           label = 14; //@line 6256
           break;
          }
         }
         if ((label | 0) == 13) {
          $55 = ___cxa_find_matching_catch_3(0) | 0; //@line 6263
          ___clang_call_terminate($55); //@line 6265
         } else if ((label | 0) == 14) {
          $57 = HEAP32[$42 >> 2] | 0; //@line 6270
          break;
         }
        }
       } while (0);
       __ZdlPv($57); //@line 6275
      }
      $58 = $5 + 4 | 0; //@line 6277
      if ((HEAP8[$58 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$58 >> 2] | 0); //@line 6283
      }
      $63 = $4 + 52 | 0; //@line 6285
      if ((HEAP8[$63 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$63 >> 2] | 0); //@line 6291
      }
      $68 = $4 + 40 | 0; //@line 6293
      $69 = HEAP32[$68 >> 2] | 0; //@line 6294
      if ($69 | 0) {
       $71 = $4 + 44 | 0; //@line 6297
       $72 = HEAP32[$71 >> 2] | 0; //@line 6298
       do {
        if (($72 | 0) == ($69 | 0)) {
         $83 = $69; //@line 6302
        } else {
         $74 = $4 + 48 | 0; //@line 6304
         $76 = $72; //@line 6305
         while (1) {
          $75 = $76 + -72 | 0; //@line 6307
          HEAP32[$71 >> 2] = $75; //@line 6308
          __THREW__ = 0; //@line 6309
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6310
          invoke_viii(13, $$byval_copy5 | 0, $74 | 0, $75 | 0); //@line 6311
          $77 = __THREW__; //@line 6312
          __THREW__ = 0; //@line 6312
          if ($77 & 1) {
           label = 25; //@line 6315
           break;
          }
          $76 = HEAP32[$71 >> 2] | 0; //@line 6318
          if (($76 | 0) == ($69 | 0)) {
           label = 26; //@line 6321
           break;
          }
         }
         if ((label | 0) == 25) {
          $81 = ___cxa_find_matching_catch_3(0) | 0; //@line 6328
          ___clang_call_terminate($81); //@line 6330
         } else if ((label | 0) == 26) {
          $83 = HEAP32[$68 >> 2] | 0; //@line 6335
          break;
         }
        }
       } while (0);
       __ZdlPv($83); //@line 6340
      }
      if ((HEAP8[$18 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 6347
      }
      $88 = $3 + 52 | 0; //@line 6349
      if ((HEAP8[$88 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$88 >> 2] | 0); //@line 6355
      }
      $93 = $3 + 40 | 0; //@line 6357
      $94 = HEAP32[$93 >> 2] | 0; //@line 6358
      if ($94 | 0) {
       $96 = $3 + 44 | 0; //@line 6361
       $97 = HEAP32[$96 >> 2] | 0; //@line 6362
       do {
        if (($97 | 0) == ($94 | 0)) {
         $108 = $94; //@line 6366
        } else {
         $99 = $3 + 48 | 0; //@line 6368
         $101 = $97; //@line 6369
         while (1) {
          $100 = $101 + -72 | 0; //@line 6371
          HEAP32[$96 >> 2] = $100; //@line 6372
          __THREW__ = 0; //@line 6373
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6374
          invoke_viii(13, $$byval_copy5 | 0, $99 | 0, $100 | 0); //@line 6375
          $102 = __THREW__; //@line 6376
          __THREW__ = 0; //@line 6376
          if ($102 & 1) {
           label = 37; //@line 6379
           break;
          }
          $101 = HEAP32[$96 >> 2] | 0; //@line 6382
          if (($101 | 0) == ($94 | 0)) {
           label = 38; //@line 6385
           break;
          }
         }
         if ((label | 0) == 37) {
          $106 = ___cxa_find_matching_catch_3(0) | 0; //@line 6392
          ___clang_call_terminate($106); //@line 6394
         } else if ((label | 0) == 38) {
          $108 = HEAP32[$93 >> 2] | 0; //@line 6399
          break;
         }
        }
       } while (0);
       __ZdlPv($108); //@line 6404
      }
      if ((HEAP8[$10 >> 0] | 0) >= 0) {
       STACKTOP = sp; //@line 6409
       return;
      }
      __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 6412
      STACKTOP = sp; //@line 6413
      return;
     }
    }
   } while (0);
   if ((label | 0) == 42) {
    $112 = ___cxa_find_matching_catch_2() | 0; //@line 6418
    $$0$i$i$i = tempRet0; //@line 6420
    $$015$i$i$i = $112; //@line 6420
   }
   $142 = $4 + 52 | 0; //@line 6422
   if ((HEAP8[$142 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$142 >> 2] | 0); //@line 6428
   }
   $147 = $4 + 40 | 0; //@line 6430
   $148 = HEAP32[$147 >> 2] | 0; //@line 6431
   if ($148 | 0) {
    $150 = $4 + 44 | 0; //@line 6434
    $151 = HEAP32[$150 >> 2] | 0; //@line 6435
    do {
     if (($151 | 0) == ($148 | 0)) {
      $162 = $148; //@line 6439
     } else {
      $153 = $4 + 48 | 0; //@line 6441
      $155 = $151; //@line 6442
      while (1) {
       $154 = $155 + -72 | 0; //@line 6444
       HEAP32[$150 >> 2] = $154; //@line 6445
       __THREW__ = 0; //@line 6446
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6447
       invoke_viii(13, $$byval_copy5 | 0, $153 | 0, $154 | 0); //@line 6448
       $156 = __THREW__; //@line 6449
       __THREW__ = 0; //@line 6449
       if ($156 & 1) {
        label = 62; //@line 6452
        break;
       }
       $155 = HEAP32[$150 >> 2] | 0; //@line 6455
       if (($155 | 0) == ($148 | 0)) {
        label = 63; //@line 6458
        break;
       }
      }
      if ((label | 0) == 62) {
       $160 = ___cxa_find_matching_catch_3(0) | 0; //@line 6465
       ___clang_call_terminate($160); //@line 6467
      } else if ((label | 0) == 63) {
       $162 = HEAP32[$147 >> 2] | 0; //@line 6472
       break;
      }
     }
    } while (0);
    __ZdlPv($162); //@line 6477
   }
   if ((HEAP8[$18 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 6484
   }
   $$1$i$i$i = $$0$i$i$i; //@line 6486
   $$116$i$i$i = $$015$i$i$i; //@line 6486
  } else {
   $175 = ___cxa_allocate_exception(8) | 0; //@line 6488
   __THREW__ = 0; //@line 6489
   invoke_vii(125, $175 | 0, 17446); //@line 6490
   $176 = __THREW__; //@line 6491
   __THREW__ = 0; //@line 6491
   if ($176 & 1) {
    $179 = ___cxa_find_matching_catch_2() | 0; //@line 6494
    $180 = tempRet0; //@line 6495
    ___cxa_free_exception($175 | 0); //@line 6496
    $$1$i$i$i = $180; //@line 6497
    $$116$i$i$i = $179; //@line 6497
    break;
   } else {
    __THREW__ = 0; //@line 6500
    invoke_viii(16, $175 | 0, 2824, 242); //@line 6501
    __THREW__ = 0; //@line 6502
    label = 71; //@line 6503
    break;
   }
  }
 } while (0);
 if ((label | 0) == 71) {
  $173 = ___cxa_find_matching_catch_2() | 0; //@line 6509
  $$1$i$i$i = tempRet0; //@line 6511
  $$116$i$i$i = $173; //@line 6511
 }
 $181 = $3 + 52 | 0; //@line 6513
 if ((HEAP8[$181 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$181 >> 2] | 0); //@line 6519
 }
 $186 = $3 + 40 | 0; //@line 6521
 $187 = HEAP32[$186 >> 2] | 0; //@line 6522
 if ($187 | 0) {
  $189 = $3 + 44 | 0; //@line 6525
  $190 = HEAP32[$189 >> 2] | 0; //@line 6526
  do {
   if (($190 | 0) == ($187 | 0)) {
    $201 = $187; //@line 6530
   } else {
    $192 = $3 + 48 | 0; //@line 6532
    $194 = $190; //@line 6533
    while (1) {
     $193 = $194 + -72 | 0; //@line 6535
     HEAP32[$189 >> 2] = $193; //@line 6536
     __THREW__ = 0; //@line 6537
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6538
     invoke_viii(13, $$byval_copy5 | 0, $192 | 0, $193 | 0); //@line 6539
     $195 = __THREW__; //@line 6540
     __THREW__ = 0; //@line 6540
     if ($195 & 1) {
      label = 82; //@line 6543
      break;
     }
     $194 = HEAP32[$189 >> 2] | 0; //@line 6546
     if (($194 | 0) == ($187 | 0)) {
      label = 83; //@line 6549
      break;
     }
    }
    if ((label | 0) == 82) {
     $199 = ___cxa_find_matching_catch_3(0) | 0; //@line 6556
     ___clang_call_terminate($199); //@line 6558
    } else if ((label | 0) == 83) {
     $201 = HEAP32[$186 >> 2] | 0; //@line 6563
     break;
    }
   }
  } while (0);
  __ZdlPv($201); //@line 6568
 }
 $202 = $3 + 4 | 0; //@line 6570
 if ((HEAP8[$202 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$116$i$i$i | 0); //@line 6575
 }
 __ZdlPv(HEAP32[$202 >> 2] | 0); //@line 6579
 ___resumeException($$116$i$i$i | 0); //@line 6580
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i51 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i57 = 0, $$0$i$i33 = 0, $$0$i$i46 = 0, $$025 = 0, $$028 = 0, $$126 = 0, $$2 = 0, $$227 = 0, $$230 = 0, $$3 = 0, $$331 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i53 = 0, $$pre$i4$i$i59 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $112 = 0, $113 = 0, $117 = 0, $118 = 0, $12 = 0, $121 = 0, $127 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $143 = 0, $144 = 0, $149 = 0, $15 = 0, $154 = 0, $157 = 0, $158 = 0, $166 = 0, $17 = 0, $173 = 0, $174 = 0, $18 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $23 = 0, $27 = 0, $33 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $44 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $9 = 0, $90 = 0, $91 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29466
 STACKTOP = STACKTOP + 320 | 0; //@line 29467
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320); //@line 29467
 $vararg_buffer = sp; //@line 29468
 $6 = sp + 208 | 0; //@line 29469
 $7 = sp + 192 | 0; //@line 29470
 $8 = sp + 180 | 0; //@line 29471
 $9 = sp + 176 | 0; //@line 29472
 $10 = sp + 16 | 0; //@line 29473
 $11 = sp + 8 | 0; //@line 29474
 $12 = sp + 4 | 0; //@line 29475
 HEAP32[$7 >> 2] = 0; //@line 29476
 HEAP32[$7 + 4 >> 2] = 0; //@line 29476
 HEAP32[$7 + 8 >> 2] = 0; //@line 29476
 $$0$i$i = 0; //@line 29477
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$7 + ($$0$i$i << 2) >> 2] = 0; //@line 29484
  $$0$i$i = $$0$i$i + 1 | 0; //@line 29486
 }
 __THREW__ = 0; //@line 29488
 invoke_vii(132, $8 | 0, $3 | 0); //@line 29489
 $15 = __THREW__; //@line 29490
 __THREW__ = 0; //@line 29490
 do {
  if ($15 & 1) {
   $98 = ___cxa_find_matching_catch_2() | 0; //@line 29494
   $$0 = $98; //@line 29496
   $$028 = tempRet0; //@line 29496
   label = 36; //@line 29497
  } else {
   __THREW__ = 0; //@line 29499
   $17 = invoke_iii(63, $8 | 0, 35544) | 0; //@line 29500
   $18 = __THREW__; //@line 29501
   __THREW__ = 0; //@line 29501
   if (!($18 & 1)) {
    __THREW__ = 0; //@line 29507
    invoke_iiiii(HEAP32[(HEAP32[$17 >> 2] | 0) + 48 >> 2] | 0, $17 | 0, 29766, 29792, $6 | 0) | 0; //@line 29508
    $23 = __THREW__; //@line 29509
    __THREW__ = 0; //@line 29509
    if (!($23 & 1)) {
     __ZNSt3__26localeD2Ev($8); //@line 29512
     HEAP32[$8 >> 2] = 0; //@line 29513
     HEAP32[$8 + 4 >> 2] = 0; //@line 29513
     HEAP32[$8 + 8 >> 2] = 0; //@line 29513
     $$0$i$i33 = 0; //@line 29514
     while (1) {
      if (($$0$i$i33 | 0) == 3) {
       break;
      }
      HEAP32[$8 + ($$0$i$i33 << 2) >> 2] = 0; //@line 29521
      $$0$i$i33 = $$0$i$i33 + 1 | 0; //@line 29523
     }
     $27 = $8 + 11 | 0; //@line 29525
     if ((HEAP8[$27 >> 0] | 0) < 0) {
      $33 = (HEAP32[$8 + 8 >> 2] & 2147483647) + -1 | 0; //@line 29533
     } else {
      $33 = 10; //@line 29535
     }
     __THREW__ = 0; //@line 29537
     invoke_viii(14, $8 | 0, $33 | 0, 0); //@line 29538
     $34 = __THREW__; //@line 29539
     __THREW__ = 0; //@line 29539
     if ($34 & 1) {
      $102 = ___cxa_find_matching_catch_2() | 0; //@line 29542
      $$2 = $102; //@line 29544
      $$230 = tempRet0; //@line 29544
     } else {
      $39 = (HEAP8[$27 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8; //@line 29549
      HEAP32[$9 >> 2] = $39; //@line 29550
      HEAP32[$11 >> 2] = $10; //@line 29551
      HEAP32[$12 >> 2] = 0; //@line 29552
      $40 = $8 + 4 | 0; //@line 29553
      $41 = $8 + 8 | 0; //@line 29554
      $$pre = HEAP32[$1 >> 2] | 0; //@line 29555
      $$025 = $39; //@line 29556
      $$pre$i$i$i = $$pre; //@line 29556
      $184 = $$pre; //@line 29556
      L21 : while (1) {
       if (!$$pre$i$i$i) {
        $$pre$i$i$i53 = 0; //@line 29560
        $154 = 0; //@line 29560
        $185 = 1; //@line 29560
       } else {
        $44 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 29563
        if (($44 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 29571
         $51 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 29572
         $52 = __THREW__; //@line 29573
         __THREW__ = 0; //@line 29573
         if ($52 & 1) {
          break;
         } else {
          $$0$i$i$i$i = $51; //@line 29578
         }
        } else {
         $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$44 >> 2] | 0) | 0; //@line 29583
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$1 >> 2] = 0; //@line 29588
         $$pre$i$i$i53 = 0; //@line 29589
         $154 = 0; //@line 29589
         $185 = 1; //@line 29589
        } else {
         $$pre$i$i$i53 = $$pre$i$i$i; //@line 29591
         $154 = $184; //@line 29591
         $185 = 0; //@line 29591
        }
       }
       $58 = HEAP32[$2 >> 2] | 0; //@line 29594
       do {
        if (!$58) {
         label = 26; //@line 29598
        } else {
         $61 = HEAP32[$58 + 12 >> 2] | 0; //@line 29601
         if (($61 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 29609
          $68 = invoke_ii(HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] | 0, $58 | 0) | 0; //@line 29610
          $69 = __THREW__; //@line 29611
          __THREW__ = 0; //@line 29611
          if ($69 & 1) {
           break L21;
          } else {
           $$0$i$i2$i$i = $68; //@line 29616
          }
         } else {
          $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$61 >> 2] | 0) | 0; //@line 29621
         }
         if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
          HEAP32[$2 >> 2] = 0; //@line 29626
          label = 26; //@line 29627
          break;
         } else {
          if ($185) {
           $186 = $58; //@line 29631
           break;
          } else {
           $$227 = $$025; //@line 29634
           $$pre$i4$i$i59 = $58; //@line 29634
           label = 46; //@line 29635
           break L21;
          }
         }
        }
       } while (0);
       if ((label | 0) == 26) {
        label = 0; //@line 29642
        if ($185) {
         $$227 = $$025; //@line 29644
         $$pre$i4$i$i59 = 0; //@line 29644
         label = 46; //@line 29645
         break;
        } else {
         $186 = 0; //@line 29648
        }
       }
       $76 = HEAP8[$27 >> 0] | 0; //@line 29652
       $80 = $76 << 24 >> 24 < 0 ? HEAP32[$40 >> 2] | 0 : $76 & 255; //@line 29656
       if ((HEAP32[$9 >> 2] | 0) == ($$025 + $80 | 0)) {
        __THREW__ = 0; //@line 29661
        invoke_viii(14, $8 | 0, $80 << 1 | 0, 0); //@line 29662
        $84 = __THREW__; //@line 29663
        __THREW__ = 0; //@line 29663
        if ($84 & 1) {
         break;
        }
        if ((HEAP8[$27 >> 0] | 0) < 0) {
         $90 = (HEAP32[$41 >> 2] & 2147483647) + -1 | 0; //@line 29674
        } else {
         $90 = 10; //@line 29676
        }
        __THREW__ = 0; //@line 29678
        invoke_viii(14, $8 | 0, $90 | 0, 0); //@line 29679
        $91 = __THREW__; //@line 29680
        __THREW__ = 0; //@line 29680
        if ($91 & 1) {
         break;
        }
        $96 = (HEAP8[$27 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8; //@line 29688
        HEAP32[$9 >> 2] = $96 + $80; //@line 29690
        $$126 = $96; //@line 29691
       } else {
        $$126 = $$025; //@line 29693
       }
       $104 = $$pre$i$i$i53 + 12 | 0; //@line 29695
       $105 = HEAP32[$104 >> 2] | 0; //@line 29696
       $106 = $$pre$i$i$i53 + 16 | 0; //@line 29697
       if (($105 | 0) == (HEAP32[$106 >> 2] | 0)) {
        __THREW__ = 0; //@line 29704
        $112 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i53 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i53 | 0) | 0; //@line 29705
        $113 = __THREW__; //@line 29706
        __THREW__ = 0; //@line 29706
        if ($113 & 1) {
         break;
        } else {
         $$0$i$i46 = $112; //@line 29711
        }
       } else {
        $$0$i$i46 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$105 >> 2] | 0) | 0; //@line 29716
       }
       __THREW__ = 0; //@line 29718
       $117 = invoke_iiiiiiiiiii(2, $$0$i$i46 | 0, 16, $$126 | 0, $9 | 0, $12 | 0, 0, $7 | 0, $10 | 0, $11 | 0, $6 | 0) | 0; //@line 29719
       $118 = __THREW__; //@line 29720
       __THREW__ = 0; //@line 29720
       if ($118 & 1) {
        break;
       }
       if ($117 | 0) {
        $$227 = $$126; //@line 29727
        $$pre$i4$i$i59 = $186; //@line 29727
        label = 46; //@line 29728
        break;
       }
       $121 = HEAP32[$104 >> 2] | 0; //@line 29731
       if (($121 | 0) == (HEAP32[$106 >> 2] | 0)) {
        __THREW__ = 0; //@line 29738
        invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i53 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i53 | 0) | 0; //@line 29739
        $127 = __THREW__; //@line 29740
        __THREW__ = 0; //@line 29740
        if ($127 & 1) {
         break;
        } else {
         $$025 = $$126; //@line 29745
         $$pre$i$i$i = $$pre$i$i$i53; //@line 29745
         $184 = $154; //@line 29745
         continue;
        }
       } else {
        HEAP32[$104 >> 2] = $121 + 4; //@line 29750
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$121 >> 2] | 0) | 0; //@line 29752
        $$025 = $$126; //@line 29753
        $$pre$i$i$i = $$pre$i$i$i53; //@line 29753
        $184 = $154; //@line 29753
        continue;
       }
      }
      L60 : do {
       if ((label | 0) == 46) {
        __THREW__ = 0; //@line 29762
        invoke_viii(14, $8 | 0, (HEAP32[$9 >> 2] | 0) - $$227 | 0, 0); //@line 29763
        $134 = __THREW__; //@line 29764
        __THREW__ = 0; //@line 29764
        if (!($134 & 1)) {
         $136 = HEAP8[$27 >> 0] | 0; //@line 29767
         $137 = HEAP32[$8 >> 2] | 0; //@line 29768
         __THREW__ = 0; //@line 29769
         $138 = invoke_i(2) | 0; //@line 29770
         $139 = __THREW__; //@line 29771
         __THREW__ = 0; //@line 29771
         if (!($139 & 1)) {
          __THREW__ = 0; //@line 29776
          HEAP32[$vararg_buffer >> 2] = $5; //@line 29777
          $143 = invoke_iiiii(8, ($136 << 24 >> 24 < 0 ? $137 : $8) | 0, $138 | 0, 29799, $vararg_buffer | 0) | 0; //@line 29778
          $144 = __THREW__; //@line 29779
          __THREW__ = 0; //@line 29779
          if (!($144 & 1)) {
           if (($143 | 0) != 1) {
            HEAP32[$4 >> 2] = 4; //@line 29784
           }
           if (!$$pre$i$i$i53) {
            $187 = 1; //@line 29788
           } else {
            $149 = HEAP32[$$pre$i$i$i53 + 12 >> 2] | 0; //@line 29791
            if (($149 | 0) == (HEAP32[$$pre$i$i$i53 + 16 >> 2] | 0)) {
             __THREW__ = 0; //@line 29799
             $157 = invoke_ii(HEAP32[(HEAP32[$154 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i53 | 0) | 0; //@line 29800
             $158 = __THREW__; //@line 29801
             __THREW__ = 0; //@line 29801
             if ($158 & 1) {
              break;
             } else {
              $$0$i$i$i$i51 = $157; //@line 29806
             }
            } else {
             $$0$i$i$i$i51 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$149 >> 2] | 0) | 0; //@line 29811
            }
            if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i51, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
             HEAP32[$1 >> 2] = 0; //@line 29816
             $187 = 1; //@line 29817
            } else {
             $187 = 0; //@line 29819
            }
           }
           do {
            if (!$$pre$i4$i$i59) {
             label = 63; //@line 29825
            } else {
             $166 = HEAP32[$$pre$i4$i$i59 + 12 >> 2] | 0; //@line 29828
             if (($166 | 0) == (HEAP32[$$pre$i4$i$i59 + 16 >> 2] | 0)) {
              __THREW__ = 0; //@line 29836
              $173 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i59 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i59 | 0) | 0; //@line 29837
              $174 = __THREW__; //@line 29838
              __THREW__ = 0; //@line 29838
              if ($174 & 1) {
               break L60;
              } else {
               $$0$i$i2$i$i57 = $173; //@line 29843
              }
             } else {
              $$0$i$i2$i$i57 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$166 >> 2] | 0) | 0; //@line 29848
             }
             if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i57, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
              HEAP32[$2 >> 2] = 0; //@line 29853
              label = 63; //@line 29854
              break;
             } else {
              if ($187) {
               break;
              } else {
               label = 65; //@line 29860
               break;
              }
             }
            }
           } while (0);
           if ((label | 0) == 63) {
            if ($187) {
             label = 65; //@line 29868
            }
           }
           if ((label | 0) == 65) {
            HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 29874
           }
           $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 29876
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 29877
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 29878
           STACKTOP = sp; //@line 29879
           return $$sroa$0$0$copyload | 0; //@line 29879
          }
         }
        }
       }
      } while (0);
      $182 = ___cxa_find_matching_catch_2() | 0; //@line 29885
      $$2 = $182; //@line 29887
      $$230 = tempRet0; //@line 29887
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 29889
     $$3 = $$2; //@line 29890
     $$331 = $$230; //@line 29890
     break;
    }
   }
   $100 = ___cxa_find_matching_catch_2() | 0; //@line 29894
   $101 = tempRet0; //@line 29895
   __ZNSt3__26localeD2Ev($8); //@line 29896
   $$0 = $100; //@line 29897
   $$028 = $101; //@line 29897
   label = 36; //@line 29898
  }
 } while (0);
 if ((label | 0) == 36) {
  $$3 = $$0; //@line 29902
  $$331 = $$028; //@line 29902
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 29904
 ___resumeException($$3 | 0); //@line 29905
 return 0; //@line 29907
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i48 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i54 = 0, $$0$i$i30 = 0, $$0$i$i43 = 0, $$022 = 0, $$025 = 0, $$123 = 0, $$2 = 0, $$224 = 0, $$227 = 0, $$3 = 0, $$328 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i50 = 0, $$pre$i4$i$i56 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $112 = 0, $113 = 0, $118 = 0, $119 = 0, $12 = 0, $122 = 0, $128 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $144 = 0, $145 = 0, $15 = 0, $150 = 0, $155 = 0, $158 = 0, $159 = 0, $167 = 0, $17 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $23 = 0, $27 = 0, $33 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $44 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $9 = 0, $90 = 0, $91 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22941
 STACKTOP = STACKTOP + 240 | 0; //@line 22942
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240); //@line 22942
 $vararg_buffer = sp; //@line 22943
 $6 = sp + 204 | 0; //@line 22944
 $7 = sp + 192 | 0; //@line 22945
 $8 = sp + 180 | 0; //@line 22946
 $9 = sp + 176 | 0; //@line 22947
 $10 = sp + 16 | 0; //@line 22948
 $11 = sp + 8 | 0; //@line 22949
 $12 = sp + 4 | 0; //@line 22950
 HEAP32[$7 >> 2] = 0; //@line 22951
 HEAP32[$7 + 4 >> 2] = 0; //@line 22951
 HEAP32[$7 + 8 >> 2] = 0; //@line 22951
 $$0$i$i = 0; //@line 22952
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$7 + ($$0$i$i << 2) >> 2] = 0; //@line 22959
  $$0$i$i = $$0$i$i + 1 | 0; //@line 22961
 }
 __THREW__ = 0; //@line 22963
 invoke_vii(132, $8 | 0, $3 | 0); //@line 22964
 $15 = __THREW__; //@line 22965
 __THREW__ = 0; //@line 22965
 do {
  if ($15 & 1) {
   $98 = ___cxa_find_matching_catch_2() | 0; //@line 22969
   $$0 = $98; //@line 22971
   $$025 = tempRet0; //@line 22971
   label = 36; //@line 22972
  } else {
   __THREW__ = 0; //@line 22974
   $17 = invoke_iii(63, $8 | 0, 35512) | 0; //@line 22975
   $18 = __THREW__; //@line 22976
   __THREW__ = 0; //@line 22976
   if (!($18 & 1)) {
    __THREW__ = 0; //@line 22982
    invoke_iiiii(HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] | 0, $17 | 0, 29766, 29792, $6 | 0) | 0; //@line 22983
    $23 = __THREW__; //@line 22984
    __THREW__ = 0; //@line 22984
    if (!($23 & 1)) {
     __ZNSt3__26localeD2Ev($8); //@line 22987
     HEAP32[$8 >> 2] = 0; //@line 22988
     HEAP32[$8 + 4 >> 2] = 0; //@line 22988
     HEAP32[$8 + 8 >> 2] = 0; //@line 22988
     $$0$i$i30 = 0; //@line 22989
     while (1) {
      if (($$0$i$i30 | 0) == 3) {
       break;
      }
      HEAP32[$8 + ($$0$i$i30 << 2) >> 2] = 0; //@line 22996
      $$0$i$i30 = $$0$i$i30 + 1 | 0; //@line 22998
     }
     $27 = $8 + 11 | 0; //@line 23000
     if ((HEAP8[$27 >> 0] | 0) < 0) {
      $33 = (HEAP32[$8 + 8 >> 2] & 2147483647) + -1 | 0; //@line 23008
     } else {
      $33 = 10; //@line 23010
     }
     __THREW__ = 0; //@line 23012
     invoke_viii(14, $8 | 0, $33 | 0, 0); //@line 23013
     $34 = __THREW__; //@line 23014
     __THREW__ = 0; //@line 23014
     if ($34 & 1) {
      $102 = ___cxa_find_matching_catch_2() | 0; //@line 23017
      $$2 = $102; //@line 23019
      $$227 = tempRet0; //@line 23019
     } else {
      $39 = (HEAP8[$27 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8; //@line 23024
      HEAP32[$9 >> 2] = $39; //@line 23025
      HEAP32[$11 >> 2] = $10; //@line 23026
      HEAP32[$12 >> 2] = 0; //@line 23027
      $40 = $8 + 4 | 0; //@line 23028
      $41 = $8 + 8 | 0; //@line 23029
      $$pre = HEAP32[$1 >> 2] | 0; //@line 23030
      $$022 = $39; //@line 23031
      $$pre$i$i$i = $$pre; //@line 23031
      $185 = $$pre; //@line 23031
      L21 : while (1) {
       if (!$$pre$i$i$i) {
        $$pre$i$i$i50 = 0; //@line 23035
        $155 = 0; //@line 23035
        $186 = 1; //@line 23035
       } else {
        $44 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 23038
        if (($44 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 23046
         $51 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 23047
         $52 = __THREW__; //@line 23048
         __THREW__ = 0; //@line 23048
         if ($52 & 1) {
          break;
         } else {
          $$0$i$i$i$i = $51; //@line 23053
         }
        } else {
         $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$44 >> 0] | 0) | 0; //@line 23058
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$1 >> 2] = 0; //@line 23063
         $$pre$i$i$i50 = 0; //@line 23064
         $155 = 0; //@line 23064
         $186 = 1; //@line 23064
        } else {
         $$pre$i$i$i50 = $$pre$i$i$i; //@line 23066
         $155 = $185; //@line 23066
         $186 = 0; //@line 23066
        }
       }
       $58 = HEAP32[$2 >> 2] | 0; //@line 23069
       do {
        if (!$58) {
         label = 26; //@line 23073
        } else {
         $61 = HEAP32[$58 + 12 >> 2] | 0; //@line 23076
         if (($61 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) {
          __THREW__ = 0; //@line 23084
          $68 = invoke_ii(HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] | 0, $58 | 0) | 0; //@line 23085
          $69 = __THREW__; //@line 23086
          __THREW__ = 0; //@line 23086
          if ($69 & 1) {
           break L21;
          } else {
           $$0$i$i2$i$i = $68; //@line 23091
          }
         } else {
          $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$61 >> 0] | 0) | 0; //@line 23096
         }
         if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
          HEAP32[$2 >> 2] = 0; //@line 23101
          label = 26; //@line 23102
          break;
         } else {
          if ($186) {
           $187 = $58; //@line 23106
           break;
          } else {
           $$224 = $$022; //@line 23109
           $$pre$i4$i$i56 = $58; //@line 23109
           label = 46; //@line 23110
           break L21;
          }
         }
        }
       } while (0);
       if ((label | 0) == 26) {
        label = 0; //@line 23117
        if ($186) {
         $$224 = $$022; //@line 23119
         $$pre$i4$i$i56 = 0; //@line 23119
         label = 46; //@line 23120
         break;
        } else {
         $187 = 0; //@line 23123
        }
       }
       $76 = HEAP8[$27 >> 0] | 0; //@line 23127
       $80 = $76 << 24 >> 24 < 0 ? HEAP32[$40 >> 2] | 0 : $76 & 255; //@line 23131
       if ((HEAP32[$9 >> 2] | 0) == ($$022 + $80 | 0)) {
        __THREW__ = 0; //@line 23136
        invoke_viii(14, $8 | 0, $80 << 1 | 0, 0); //@line 23137
        $84 = __THREW__; //@line 23138
        __THREW__ = 0; //@line 23138
        if ($84 & 1) {
         break;
        }
        if ((HEAP8[$27 >> 0] | 0) < 0) {
         $90 = (HEAP32[$41 >> 2] & 2147483647) + -1 | 0; //@line 23149
        } else {
         $90 = 10; //@line 23151
        }
        __THREW__ = 0; //@line 23153
        invoke_viii(14, $8 | 0, $90 | 0, 0); //@line 23154
        $91 = __THREW__; //@line 23155
        __THREW__ = 0; //@line 23155
        if ($91 & 1) {
         break;
        }
        $96 = (HEAP8[$27 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8; //@line 23163
        HEAP32[$9 >> 2] = $96 + $80; //@line 23165
        $$123 = $96; //@line 23166
       } else {
        $$123 = $$022; //@line 23168
       }
       $104 = $$pre$i$i$i50 + 12 | 0; //@line 23170
       $105 = HEAP32[$104 >> 2] | 0; //@line 23171
       $106 = $$pre$i$i$i50 + 16 | 0; //@line 23172
       if (($105 | 0) == (HEAP32[$106 >> 2] | 0)) {
        __THREW__ = 0; //@line 23179
        $112 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i50 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i50 | 0) | 0; //@line 23180
        $113 = __THREW__; //@line 23181
        __THREW__ = 0; //@line 23181
        if ($113 & 1) {
         break;
        } else {
         $$0$i$i43 = $112; //@line 23186
        }
       } else {
        $$0$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$105 >> 0] | 0) | 0; //@line 23191
       }
       __THREW__ = 0; //@line 23194
       $118 = invoke_iiiiiiiiiii(1, $$0$i$i43 & 255 | 0, 16, $$123 | 0, $9 | 0, $12 | 0, 0, $7 | 0, $10 | 0, $11 | 0, $6 | 0) | 0; //@line 23195
       $119 = __THREW__; //@line 23196
       __THREW__ = 0; //@line 23196
       if ($119 & 1) {
        break;
       }
       if ($118 | 0) {
        $$224 = $$123; //@line 23203
        $$pre$i4$i$i56 = $187; //@line 23203
        label = 46; //@line 23204
        break;
       }
       $122 = HEAP32[$104 >> 2] | 0; //@line 23207
       if (($122 | 0) == (HEAP32[$106 >> 2] | 0)) {
        __THREW__ = 0; //@line 23214
        invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i50 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i50 | 0) | 0; //@line 23215
        $128 = __THREW__; //@line 23216
        __THREW__ = 0; //@line 23216
        if ($128 & 1) {
         break;
        } else {
         $$022 = $$123; //@line 23221
         $$pre$i$i$i = $$pre$i$i$i50; //@line 23221
         $185 = $155; //@line 23221
         continue;
        }
       } else {
        HEAP32[$104 >> 2] = $122 + 1; //@line 23226
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$122 >> 0] | 0) | 0; //@line 23228
        $$022 = $$123; //@line 23229
        $$pre$i$i$i = $$pre$i$i$i50; //@line 23229
        $185 = $155; //@line 23229
        continue;
       }
      }
      L60 : do {
       if ((label | 0) == 46) {
        __THREW__ = 0; //@line 23238
        invoke_viii(14, $8 | 0, (HEAP32[$9 >> 2] | 0) - $$224 | 0, 0); //@line 23239
        $135 = __THREW__; //@line 23240
        __THREW__ = 0; //@line 23240
        if (!($135 & 1)) {
         $137 = HEAP8[$27 >> 0] | 0; //@line 23243
         $138 = HEAP32[$8 >> 2] | 0; //@line 23244
         __THREW__ = 0; //@line 23245
         $139 = invoke_i(2) | 0; //@line 23246
         $140 = __THREW__; //@line 23247
         __THREW__ = 0; //@line 23247
         if (!($140 & 1)) {
          __THREW__ = 0; //@line 23252
          HEAP32[$vararg_buffer >> 2] = $5; //@line 23253
          $144 = invoke_iiiii(8, ($137 << 24 >> 24 < 0 ? $138 : $8) | 0, $139 | 0, 29799, $vararg_buffer | 0) | 0; //@line 23254
          $145 = __THREW__; //@line 23255
          __THREW__ = 0; //@line 23255
          if (!($145 & 1)) {
           if (($144 | 0) != 1) {
            HEAP32[$4 >> 2] = 4; //@line 23260
           }
           if (!$$pre$i$i$i50) {
            $188 = 1; //@line 23264
           } else {
            $150 = HEAP32[$$pre$i$i$i50 + 12 >> 2] | 0; //@line 23267
            if (($150 | 0) == (HEAP32[$$pre$i$i$i50 + 16 >> 2] | 0)) {
             __THREW__ = 0; //@line 23275
             $158 = invoke_ii(HEAP32[(HEAP32[$155 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i50 | 0) | 0; //@line 23276
             $159 = __THREW__; //@line 23277
             __THREW__ = 0; //@line 23277
             if ($159 & 1) {
              break;
             } else {
              $$0$i$i$i$i48 = $158; //@line 23282
             }
            } else {
             $$0$i$i$i$i48 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$150 >> 0] | 0) | 0; //@line 23287
            }
            if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i48, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
             HEAP32[$1 >> 2] = 0; //@line 23292
             $188 = 1; //@line 23293
            } else {
             $188 = 0; //@line 23295
            }
           }
           do {
            if (!$$pre$i4$i$i56) {
             label = 63; //@line 23301
            } else {
             $167 = HEAP32[$$pre$i4$i$i56 + 12 >> 2] | 0; //@line 23304
             if (($167 | 0) == (HEAP32[$$pre$i4$i$i56 + 16 >> 2] | 0)) {
              __THREW__ = 0; //@line 23312
              $174 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i56 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i56 | 0) | 0; //@line 23313
              $175 = __THREW__; //@line 23314
              __THREW__ = 0; //@line 23314
              if ($175 & 1) {
               break L60;
              } else {
               $$0$i$i2$i$i54 = $174; //@line 23319
              }
             } else {
              $$0$i$i2$i$i54 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$167 >> 0] | 0) | 0; //@line 23324
             }
             if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i54, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
              HEAP32[$2 >> 2] = 0; //@line 23329
              label = 63; //@line 23330
              break;
             } else {
              if ($188) {
               break;
              } else {
               label = 65; //@line 23336
               break;
              }
             }
            }
           } while (0);
           if ((label | 0) == 63) {
            if ($188) {
             label = 65; //@line 23344
            }
           }
           if ((label | 0) == 65) {
            HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 23350
           }
           $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 23352
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 23353
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 23354
           STACKTOP = sp; //@line 23355
           return $$sroa$0$0$copyload | 0; //@line 23355
          }
         }
        }
       }
      } while (0);
      $183 = ___cxa_find_matching_catch_2() | 0; //@line 23361
      $$2 = $183; //@line 23363
      $$227 = tempRet0; //@line 23363
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 23365
     $$3 = $$2; //@line 23366
     $$328 = $$227; //@line 23366
     break;
    }
   }
   $100 = ___cxa_find_matching_catch_2() | 0; //@line 23370
   $101 = tempRet0; //@line 23371
   __ZNSt3__26localeD2Ev($8); //@line 23372
   $$0 = $100; //@line 23373
   $$025 = $101; //@line 23373
   label = 36; //@line 23374
  }
 } while (0);
 if ((label | 0) == 36) {
  $$3 = $$0; //@line 23378
  $$328 = $$025; //@line 23378
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 23380
 ___resumeException($$3 | 0); //@line 23381
 return 0; //@line 23383
}
function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$053100$i = 0, $$053101$i = 0, $$053101$i$us = 0, $$053101$us$i = 0, $$053101$us$i$us = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$sink$i = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $11 = 0, $121 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $133 = 0, $136 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $155 = 0, $157 = 0, $160 = 0.0, $163 = 0.0, $173 = 0, $176 = 0, $178 = 0, $180 = 0, $181 = 0, $187 = 0, $189 = 0, $190 = 0, $194 = 0, $196 = 0, $2 = 0, $203 = 0, $204 = 0, $206 = 0, $208 = 0, $211 = 0, $212 = 0, $22 = 0, $220 = 0, $224 = 0, $23 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $56 = 0, $57 = 0, $60 = 0, $62 = 0, $66 = 0, $70 = 0, $79 = 0, $85 = 0, $94 = 0, $98 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14909
 STACKTOP = STACKTOP + 16 | 0; //@line 14910
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14910
 $2 = sp; //@line 14911
 $4 = HEAP8[$1 + 11 >> 0] | 0; //@line 14913
 $5 = $4 << 24 >> 24 < 0; //@line 14914
 $10 = $5 ? HEAP32[$1 >> 2] | 0 : $1; //@line 14919
 $11 = $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255; //@line 14920
 if ($11 >>> 0 > 3) {
  $$03639$i$i$i$i$i = $10; //@line 14923
  $$03738$i$i$i$i$i = $11; //@line 14923
  $$040$i$i$i$i$i = $11; //@line 14923
  while (1) {
   $13 = Math_imul(HEAPU8[$$03639$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 14926
   $$03738$i$i$i$i$i = (Math_imul($13 >>> 24 ^ $13, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i, 1540483477) | 0); //@line 14931
   $$040$i$i$i$i$i = $$040$i$i$i$i$i + -4 | 0; //@line 14933
   if ($$040$i$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i$i = $$03639$i$i$i$i$i + 4 | 0; //@line 14936
   }
  }
  $22 = $11 + -4 | 0; //@line 14941
  $23 = $22 & -4; //@line 14942
  $$0$lcssa$i$i$i$i$i = $22 - $23 | 0; //@line 14946
  $$036$lcssa$i$i$i$i$i = $10 + ($23 + 4) | 0; //@line 14946
  $$037$lcssa$i$i$i$i$i = $$03738$i$i$i$i$i; //@line 14946
 } else {
  $$0$lcssa$i$i$i$i$i = $11; //@line 14948
  $$036$lcssa$i$i$i$i$i = $10; //@line 14948
  $$037$lcssa$i$i$i$i$i = $11; //@line 14948
 }
 switch ($$0$lcssa$i$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i; //@line 14957
   label = 6; //@line 14958
   break;
  }
 case 2:
  {
   $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 14962
   label = 6; //@line 14963
   break;
  }
 case 1:
  {
   $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 14967
   label = 7; //@line 14968
   break;
  }
 default:
  {
   $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 14972
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i; //@line 14981
  label = 7; //@line 14982
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i$i = Math_imul($$2$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i >> 0], 1540483477) | 0; //@line 14989
 }
 $42 = Math_imul($$3$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i, 1540483477) | 0; //@line 14993
 $44 = $42 >>> 15 ^ $42; //@line 14995
 $45 = $0 + 4 | 0; //@line 14996
 $46 = HEAP32[$45 >> 2] | 0; //@line 14997
 $47 = ($46 | 0) == 0; //@line 14998
 L13 : do {
  if ($47) {
   $$054$i = 0; //@line 15001
  } else {
   $48 = $46 + -1 | 0; //@line 15003
   $50 = ($48 & $46 | 0) == 0; //@line 15005
   if ($50) {
    $56 = $44 & $48; //@line 15008
   } else {
    if ($44 >>> 0 < $46 >>> 0) {
     $56 = $44; //@line 15012
    } else {
     $56 = ($44 >>> 0) % ($46 >>> 0) | 0; //@line 15015
    }
   }
   $57 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($56 << 2) >> 2] | 0; //@line 15020
   if (!$57) {
    $$054$i = $56; //@line 15023
   } else {
    $$053100$i = HEAP32[$57 >> 2] | 0; //@line 15025
    if (!$$053100$i) {
     $$054$i = $56; //@line 15028
    } else {
     $60 = ($11 | 0) == 0; //@line 15030
     if ($50) {
      if ($60) {
       $$053101$us$i$us = $$053100$i; //@line 15033
       while (1) {
        $79 = HEAP32[$$053101$us$i$us + 4 >> 2] | 0; //@line 15036
        if (!(($79 | 0) == ($44 | 0) | ($79 & $48 | 0) == ($56 | 0))) {
         $$054$i = $56; //@line 15042
         break L13;
        }
        $85 = HEAP8[$$053101$us$i$us + 8 + 11 >> 0] | 0; //@line 15047
        if (!(($85 << 24 >> 24 < 0 ? HEAP32[$$053101$us$i$us + 12 >> 2] | 0 : $85 & 255) | 0)) {
         $$1$i = $$053101$us$i$us; //@line 15055
         break;
        }
        $$053101$us$i$us = HEAP32[$$053101$us$i$us >> 2] | 0; //@line 15058
        if (!$$053101$us$i$us) {
         $$054$i = $56; //@line 15061
         break L13;
        }
       }
       $224 = $$1$i + 24 | 0; //@line 15067
       STACKTOP = sp; //@line 15068
       return $224 | 0; //@line 15068
      } else {
       $$053101$us$i = $$053100$i; //@line 15070
      }
      L30 : while (1) {
       $94 = HEAP32[$$053101$us$i + 4 >> 2] | 0; //@line 15074
       if (!(($94 | 0) == ($44 | 0) | ($94 & $48 | 0) == ($56 | 0))) {
        $$054$i = $56; //@line 15080
        break L13;
       }
       $98 = $$053101$us$i + 8 | 0; //@line 15083
       $100 = HEAP8[$98 + 11 >> 0] | 0; //@line 15085
       $101 = $100 << 24 >> 24 < 0; //@line 15086
       $104 = $100 & 255; //@line 15089
       do {
        if ((($101 ? HEAP32[$$053101$us$i + 12 >> 2] | 0 : $104) | 0) == ($11 | 0)) {
         $107 = HEAP32[$98 >> 2] | 0; //@line 15094
         if ($101) {
          if (!(_memcmp($107, $10, $11) | 0)) {
           $$1$i = $$053101$us$i; //@line 15099
           label = 73; //@line 15100
           break L30;
          } else {
           break;
          }
         }
         if ((HEAP8[$10 >> 0] | 0) == ($107 & 255) << 24 >> 24) {
          $$02026$i$i4$i$us$i = $98; //@line 15111
          $$02125$i$i5$i$us$i = $104; //@line 15111
          $$027$i$i3$i$us$i = $10; //@line 15111
          do {
           $$02125$i$i5$i$us$i = $$02125$i$i5$i$us$i + -1 | 0; //@line 15113
           $$02026$i$i4$i$us$i = $$02026$i$i4$i$us$i + 1 | 0; //@line 15114
           if (!$$02125$i$i5$i$us$i) {
            $$1$i = $$053101$us$i; //@line 15117
            label = 73; //@line 15118
            break L30;
           }
           $$027$i$i3$i$us$i = $$027$i$i3$i$us$i + 1 | 0; //@line 15121
          } while ((HEAP8[$$02026$i$i4$i$us$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i >> 0] | 0));
         }
        }
       } while (0);
       $$053101$us$i = HEAP32[$$053101$us$i >> 2] | 0; //@line 15134
       if (!$$053101$us$i) {
        $$054$i = $56; //@line 15137
        break L13;
       }
      }
      if ((label | 0) == 73) {
       $224 = $$1$i + 24 | 0; //@line 15144
       STACKTOP = sp; //@line 15145
       return $224 | 0; //@line 15145
      }
     }
     if ($60) {
      $$053101$i$us = $$053100$i; //@line 15149
      while (1) {
       $62 = HEAP32[$$053101$i$us + 4 >> 2] | 0; //@line 15152
       if (($62 | 0) != ($44 | 0)) {
        if ($62 >>> 0 < $46 >>> 0) {
         $66 = $62; //@line 15157
        } else {
         $66 = ($62 >>> 0) % ($46 >>> 0) | 0; //@line 15160
        }
        if (($66 | 0) != ($56 | 0)) {
         $$054$i = $56; //@line 15164
         break L13;
        }
       }
       $70 = HEAP8[$$053101$i$us + 8 + 11 >> 0] | 0; //@line 15170
       if (!(($70 << 24 >> 24 < 0 ? HEAP32[$$053101$i$us + 12 >> 2] | 0 : $70 & 255) | 0)) {
        $$1$i = $$053101$i$us; //@line 15178
        break;
       }
       $$053101$i$us = HEAP32[$$053101$i$us >> 2] | 0; //@line 15181
       if (!$$053101$i$us) {
        $$054$i = $56; //@line 15184
        break L13;
       }
      }
      $224 = $$1$i + 24 | 0; //@line 15190
      STACKTOP = sp; //@line 15191
      return $224 | 0; //@line 15191
     } else {
      $$053101$i = $$053100$i; //@line 15193
     }
     L58 : while (1) {
      $121 = HEAP32[$$053101$i + 4 >> 2] | 0; //@line 15197
      if (($121 | 0) != ($44 | 0)) {
       if ($121 >>> 0 < $46 >>> 0) {
        $125 = $121; //@line 15202
       } else {
        $125 = ($121 >>> 0) % ($46 >>> 0) | 0; //@line 15205
       }
       if (($125 | 0) != ($56 | 0)) {
        $$054$i = $56; //@line 15209
        break L13;
       }
      }
      $127 = $$053101$i + 8 | 0; //@line 15213
      $129 = HEAP8[$127 + 11 >> 0] | 0; //@line 15215
      $130 = $129 << 24 >> 24 < 0; //@line 15216
      $133 = $129 & 255; //@line 15219
      do {
       if ((($130 ? HEAP32[$$053101$i + 12 >> 2] | 0 : $133) | 0) == ($11 | 0)) {
        $136 = HEAP32[$127 >> 2] | 0; //@line 15224
        if ($130) {
         if (!(_memcmp($136, $10, $11) | 0)) {
          $$1$i = $$053101$i; //@line 15229
          label = 73; //@line 15230
          break L58;
         } else {
          break;
         }
        }
        if ((HEAP8[$10 >> 0] | 0) == ($136 & 255) << 24 >> 24) {
         $$02026$i$i4$i$i = $127; //@line 15241
         $$02125$i$i5$i$i = $133; //@line 15241
         $$027$i$i3$i$i = $10; //@line 15241
         do {
          $$02125$i$i5$i$i = $$02125$i$i5$i$i + -1 | 0; //@line 15243
          $$02026$i$i4$i$i = $$02026$i$i4$i$i + 1 | 0; //@line 15244
          if (!$$02125$i$i5$i$i) {
           $$1$i = $$053101$i; //@line 15247
           label = 73; //@line 15248
           break L58;
          }
          $$027$i$i3$i$i = $$027$i$i3$i$i + 1 | 0; //@line 15251
         } while ((HEAP8[$$02026$i$i4$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i >> 0] | 0));
        }
       }
      } while (0);
      $$053101$i = HEAP32[$$053101$i >> 2] | 0; //@line 15264
      if (!$$053101$i) {
       $$054$i = $56; //@line 15267
       break L13;
      }
     }
     if ((label | 0) == 73) {
      $224 = $$1$i + 24 | 0; //@line 15274
      STACKTOP = sp; //@line 15275
      return $224 | 0; //@line 15275
     }
    }
   }
  }
 } while (0);
 $149 = __Znwj(64) | 0; //@line 15281
 $150 = $149 + 8 | 0; //@line 15282
 __THREW__ = 0; //@line 15283
 invoke_vii(115, $150 | 0, $1 | 0); //@line 15284
 $151 = __THREW__; //@line 15285
 __THREW__ = 0; //@line 15285
 if ($151 & 1) {
  $153 = ___cxa_find_matching_catch_2() | 0; //@line 15288
  __ZdlPv($149); //@line 15290
  ___resumeException($153 | 0); //@line 15291
 }
 $155 = $149 + 24 | 0; //@line 15294
 dest = $155; //@line 15295
 stop = dest + 40 | 0; //@line 15295
 do {
  HEAP32[dest >> 2] = 0; //@line 15295
  dest = dest + 4 | 0; //@line 15295
 } while ((dest | 0) < (stop | 0));
 HEAP32[$149 + 4 >> 2] = $44; //@line 15297
 HEAP32[$149 >> 2] = 0; //@line 15298
 $157 = $0 + 12 | 0; //@line 15299
 $160 = +(((HEAP32[$157 >> 2] | 0) + 1 | 0) >>> 0); //@line 15302
 $163 = +HEAPF32[$0 + 16 >> 2]; //@line 15305
 do {
  if ($47 | $163 * +($46 >>> 0) < $160) {
   $173 = $46 << 1 | ($46 >>> 0 < 3 | ($46 + -1 & $46 | 0) != 0) & 1; //@line 15318
   $176 = ~~+Math_ceil(+($160 / $163)) >>> 0; //@line 15321
   __THREW__ = 0; //@line 15324
   invoke_vii(130, $0 | 0, ($173 >>> 0 < $176 >>> 0 ? $176 : $173) | 0); //@line 15325
   $178 = __THREW__; //@line 15326
   __THREW__ = 0; //@line 15326
   if (!($178 & 1)) {
    $180 = HEAP32[$45 >> 2] | 0; //@line 15329
    $181 = $180 + -1 | 0; //@line 15330
    if (!($181 & $180)) {
     $$0$i = $180; //@line 15335
     $$155$i = $181 & $44; //@line 15335
     break;
    }
    if ($44 >>> 0 < $180 >>> 0) {
     $$0$i = $180; //@line 15340
     $$155$i = $44; //@line 15340
     break;
    }
    $$0$i = $180; //@line 15344
    $$155$i = ($44 >>> 0) % ($180 >>> 0) | 0; //@line 15344
    break;
   }
   $187 = ___cxa_find_matching_catch_2() | 0; //@line 15347
   $189 = $149 + 48 | 0; //@line 15349
   $190 = HEAP32[$189 >> 2] | 0; //@line 15350
   do {
    if (($190 | 0) != -1) {
     __THREW__ = 0; //@line 15356
     invoke_vii(HEAP32[3088 + ($190 << 2) >> 2] | 0, $2 | 0, $155 | 0); //@line 15357
     $194 = __THREW__; //@line 15358
     __THREW__ = 0; //@line 15358
     if ($194 & 1) {
      $196 = ___cxa_find_matching_catch_3(0) | 0; //@line 15361
      ___clang_call_terminate($196); //@line 15363
     } else {
      break;
     }
    }
   } while (0);
   HEAP32[$189 >> 2] = -1; //@line 15370
   if ((HEAP8[$149 + 19 >> 0] | 0) >= 0) {
    __ZdlPv($149); //@line 15375
    ___resumeException($187 | 0); //@line 15376
   }
   __ZdlPv(HEAP32[$150 >> 2] | 0); //@line 15380
   __ZdlPv($149); //@line 15381
   ___resumeException($187 | 0); //@line 15382
  } else {
   $$0$i = $46; //@line 15385
   $$155$i = $$054$i; //@line 15385
  }
 } while (0);
 $203 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0; //@line 15389
 $204 = HEAP32[$203 >> 2] | 0; //@line 15390
 if (!$204) {
  $206 = $0 + 8 | 0; //@line 15393
  HEAP32[$149 >> 2] = HEAP32[$206 >> 2]; //@line 15395
  HEAP32[$206 >> 2] = $149; //@line 15396
  HEAP32[$203 >> 2] = $206; //@line 15397
  $208 = HEAP32[$149 >> 2] | 0; //@line 15398
  if ($208 | 0) {
   $211 = HEAP32[$208 + 4 >> 2] | 0; //@line 15402
   $212 = $$0$i + -1 | 0; //@line 15403
   if (!($212 & $$0$i)) {
    $220 = $211 & $212; //@line 15408
   } else {
    if ($211 >>> 0 < $$0$i >>> 0) {
     $220 = $211; //@line 15412
    } else {
     $220 = ($211 >>> 0) % ($$0$i >>> 0) | 0; //@line 15415
    }
   }
   $$sink$i = (HEAP32[$0 >> 2] | 0) + ($220 << 2) | 0; //@line 15420
   label = 71; //@line 15421
  }
 } else {
  HEAP32[$149 >> 2] = HEAP32[$204 >> 2]; //@line 15425
  $$sink$i = $204; //@line 15426
  label = 71; //@line 15427
 }
 if ((label | 0) == 71) {
  HEAP32[$$sink$i >> 2] = $149; //@line 15430
 }
 HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 1; //@line 15434
 $$1$i = $149; //@line 15435
 $224 = $$1$i + 24 | 0; //@line 15436
 STACKTOP = sp; //@line 15437
 return $224 | 0; //@line 15437
}
function __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE5eraseENS_16__deque_iteratorIS1_PKS1_RS6_PKS7_iLi0EEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i138 = 0, $$0$i138139 = 0, $$0$i138140 = 0, $$0$i29 = 0, $$01922$i = 0, $$020$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$sink$i$i = 0, $$sink$i$i$i$i = 0, $$sink$i$i$i$i22 = 0, $$sink$i$i17 = 0, $$sroa$081$0$in = 0, $$sroa$081$1 = 0, $$sroa$081$1142 = 0, $$sroa$8$0 = 0, $$sroa$8$0141 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $106 = 0, $107 = 0, $110 = 0, $112 = 0, $115 = 0, $116 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $131 = 0, $134 = 0, $138 = 0, $140 = 0, $145 = 0, $15 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $160 = 0, $161 = 0, $167 = 0, $170 = 0, $177 = 0, $178 = 0, $181 = 0, $182 = 0, $183 = 0, $186 = 0, $19 = 0, $190 = 0, $192 = 0, $198 = 0, $20 = 0, $200 = 0, $205 = 0, $207 = 0, $208 = 0, $21 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $219 = 0, $220 = 0, $223 = 0, $224 = 0, $23 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $246 = 0, $248 = 0, $249 = 0, $257 = 0, $258 = 0, $262 = 0, $267 = 0, $27 = 0, $270 = 0, $274 = 0, $276 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $3 = 0, $38 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $50 = 0, $52 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $75 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $9 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $tmpcast11$byval_copy = 0, $tmpcast1520$sroa$0$0 = 0, $tmpcast1520$sroa$0$0$in = 0, $tmpcast21$sroa$0$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13826
 STACKTOP = STACKTOP + 64 | 0; //@line 13827
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 13827
 $tmpcast11$byval_copy = sp + 48 | 0; //@line 13828
 $$byval_copy1 = sp + 16 | 0; //@line 13829
 $$byval_copy = sp + 8 | 0; //@line 13830
 $3 = sp + 24 | 0; //@line 13831
 $4 = sp + 40 | 0; //@line 13832
 $5 = sp + 32 | 0; //@line 13833
 $6 = sp; //@line 13834
 $7 = $1 + 4 | 0; //@line 13835
 $8 = HEAP32[$7 >> 2] | 0; //@line 13836
 $9 = $1 + 16 | 0; //@line 13837
 $10 = HEAP32[$9 >> 2] | 0; //@line 13838
 $12 = $8 + ((($10 >>> 0) / 56 | 0) << 2) | 0; //@line 13840
 $13 = $1 + 8 | 0; //@line 13841
 $15 = (HEAP32[$13 >> 2] | 0) == ($8 | 0); //@line 13843
 if ($15) {
  $20 = 0; //@line 13845
 } else {
  $20 = (HEAP32[$12 >> 2] | 0) + ((($10 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13850
 }
 $19 = $12; //@line 13852
 $21 = $20; //@line 13853
 $23 = HEAP32[$2 + 4 >> 2] | 0; //@line 13855
 if (($23 | 0) == ($20 | 0)) {
  $$0$i138140 = 0; //@line 13859
  $$sroa$081$1142 = $19; //@line 13859
  $$sroa$8$0141 = $21; //@line 13859
  $167 = $1 + 20 | 0; //@line 13859
  $281 = 1; //@line 13859
  label = 11; //@line 13860
 } else {
  $27 = HEAP32[$2 >> 2] | 0; //@line 13863
  $38 = (($27 - $19 >> 2) * 56 | 0) + (($23 - (HEAP32[$27 >> 2] | 0) | 0) / 72 | 0) + (($21 - (HEAP32[$12 >> 2] | 0) | 0) / -72 | 0) | 0; //@line 13875
  if (!$38) {
   $$0$i138 = 0; //@line 13878
   $$sroa$081$1 = $19; //@line 13878
   $$sroa$8$0 = $21; //@line 13878
   $282 = 1; //@line 13878
  } else {
   $43 = (($21 - (HEAP32[$12 >> 2] | 0) | 0) / 72 | 0) + $38 | 0; //@line 13883
   if (($43 | 0) > 0) {
    $46 = $12 + ((($43 >>> 0) / 56 | 0) << 2) | 0; //@line 13887
    $$sink$i$i17 = (HEAP32[$46 >> 2] | 0) + ((($43 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13891
    $$sroa$081$0$in = $46; //@line 13891
   } else {
    $50 = 55 - $43 | 0; //@line 13893
    $52 = $12 + ((($50 | 0) / -56 | 0) << 2) | 0; //@line 13895
    $$sink$i$i17 = (HEAP32[$52 >> 2] | 0) + ((55 - (($50 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 13900
    $$sroa$081$0$in = $52; //@line 13900
   }
   $$0$i138 = $38; //@line 13904
   $$sroa$081$1 = $$sroa$081$0$in; //@line 13904
   $$sroa$8$0 = $$sink$i$i17; //@line 13904
   $282 = 0; //@line 13904
  }
  $58 = $1 + 20 | 0; //@line 13906
  $59 = HEAP32[$58 >> 2] | 0; //@line 13907
  if ($$0$i138 >>> 0 > ($59 + -1 | 0) >>> 1 >>> 0) {
   $178 = $$sroa$081$1; //@line 13912
   $181 = $$sroa$8$0 - (HEAP32[$$sroa$081$1 >> 2] | 0) | 0; //@line 13915
   $182 = ($181 | 0) / 72 | 0; //@line 13916
   $183 = $182 + 1 | 0; //@line 13917
   if (($181 | 0) > -72) {
    $186 = $178 + ((($183 >>> 0) / 56 | 0) << 2) | 0; //@line 13921
    $$sink$i$i$i$i22 = (HEAP32[$186 >> 2] | 0) + ((($183 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13925
    $tmpcast21$sroa$0$0$in = $186; //@line 13925
   } else {
    $190 = 54 - $182 | 0; //@line 13927
    $192 = $178 + ((($190 | 0) / -56 | 0) << 2) | 0; //@line 13929
    $$sink$i$i$i$i22 = (HEAP32[$192 >> 2] | 0) + ((55 - (($190 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 13934
    $tmpcast21$sroa$0$0$in = $192; //@line 13934
   }
   HEAP32[$4 >> 2] = $tmpcast21$sroa$0$0$in; //@line 13938
   HEAP32[$4 + 4 >> 2] = $$sink$i$i$i$i22; //@line 13940
   $198 = $10 + $59 | 0; //@line 13941
   $200 = $8 + ((($198 >>> 0) / 56 | 0) << 2) | 0; //@line 13943
   if ($15) {
    $205 = 0; //@line 13945
   } else {
    $205 = (HEAP32[$200 >> 2] | 0) + ((($198 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13950
   }
   HEAP32[$5 >> 2] = $200; //@line 13952
   HEAP32[$5 + 4 >> 2] = $205; //@line 13954
   HEAP32[$6 >> 2] = $$sroa$081$1; //@line 13955
   HEAP32[$6 + 4 >> 2] = $$sroa$8$0; //@line 13957
   HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 13958
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 13958
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$5 >> 2]; //@line 13959
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 13959
   HEAP32[$tmpcast11$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 13960
   HEAP32[$tmpcast11$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 13960
   __ZNSt3__24moveI13CharmFunctionPS1_RS1_PS2_iLi0ES1_S2_S3_S4_iLi0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS5_IT_T0_T1_T2_T3_XT4_EEESH_SB_($3, $$byval_copy, $$byval_copy1, $tmpcast11$byval_copy); //@line 13961
   $207 = HEAP32[$3 + 4 >> 2] | 0; //@line 13963
   $208 = $207 + 52 | 0; //@line 13964
   if ((HEAP8[$208 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$208 >> 2] | 0); //@line 13970
   }
   $213 = $207 + 40 | 0; //@line 13972
   $214 = HEAP32[$213 >> 2] | 0; //@line 13973
   if ($214 | 0) {
    $216 = $207 + 44 | 0; //@line 13976
    $217 = HEAP32[$216 >> 2] | 0; //@line 13977
    if (($217 | 0) == ($214 | 0)) {
     $223 = $214; //@line 13980
    } else {
     $220 = $217; //@line 13982
     do {
      $219 = $220 + -72 | 0; //@line 13984
      HEAP32[$216 >> 2] = $219; //@line 13985
      __ZN13CharmFunctionD2Ev($219); //@line 13986
      $220 = HEAP32[$216 >> 2] | 0; //@line 13987
     } while (($220 | 0) != ($214 | 0));
     $223 = HEAP32[$213 >> 2] | 0; //@line 13996
    }
    __ZdlPv($223); //@line 13998
   }
   $224 = $207 + 4 | 0; //@line 14000
   if ((HEAP8[$224 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$224 >> 2] | 0); //@line 14006
   }
   $230 = (HEAP32[$58 >> 2] | 0) + -1 | 0; //@line 14009
   HEAP32[$58 >> 2] = $230; //@line 14010
   $231 = HEAP32[$13 >> 2] | 0; //@line 14011
   $234 = $231 - (HEAP32[$7 >> 2] | 0) >> 2; //@line 14014
   $238 = HEAP32[$9 >> 2] | 0; //@line 14019
   if (((($234 | 0) == 0 ? 0 : ($234 * 56 | 0) + -1 | 0) - ($230 + $238) | 0) >>> 0 > 111) {
    __ZdlPv(HEAP32[$231 + -4 >> 2] | 0); //@line 14027
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -4; //@line 14030
    $$pre = HEAP32[$9 >> 2] | 0; //@line 14032
   } else {
    $$pre = $238; //@line 14034
   }
   $$0$i138139 = $$0$i138; //@line 14036
   $248 = $$pre; //@line 14036
   $285 = $282; //@line 14036
  } else {
   $$0$i138140 = $$0$i138; //@line 14038
   $$sroa$081$1142 = $$sroa$081$1; //@line 14038
   $$sroa$8$0141 = $$sroa$8$0; //@line 14038
   $167 = $58; //@line 14038
   $281 = $282; //@line 14038
   label = 11; //@line 14039
  }
 }
 if ((label | 0) == 11) {
  $63 = $$sroa$081$1142; //@line 14043
  $66 = $$sroa$8$0141 - (HEAP32[$$sroa$081$1142 >> 2] | 0) | 0; //@line 14046
  $67 = ($66 | 0) / 72 | 0; //@line 14047
  $68 = $67 + 1 | 0; //@line 14048
  if (($66 | 0) > -72) {
   $71 = $63 + ((($68 >>> 0) / 56 | 0) << 2) | 0; //@line 14052
   $$sink$i$i$i$i = (HEAP32[$71 >> 2] | 0) + ((($68 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14056
   $tmpcast1520$sroa$0$0$in = $71; //@line 14056
  } else {
   $75 = 54 - $67 | 0; //@line 14058
   $77 = $63 + ((($75 | 0) / -56 | 0) << 2) | 0; //@line 14060
   $$sink$i$i$i$i = (HEAP32[$77 >> 2] | 0) + ((55 - (($75 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 14065
   $tmpcast1520$sroa$0$0$in = $77; //@line 14065
  }
  $tmpcast1520$sroa$0$0 = $tmpcast1520$sroa$0$0$in; //@line 14067
  $82 = $$sink$i$i$i$i; //@line 14068
  $83 = $$sroa$8$0141; //@line 14069
  if (($20 | 0) != ($83 | 0)) {
   $91 = $67 + (($$sroa$081$1142 - $19 >> 2) * 56 | 0) + (($21 - (HEAP32[$12 >> 2] | 0) | 0) / -72 | 0) | 0; //@line 14079
   if (($91 | 0) > 0) {
    $$01922$i = $91; //@line 14082
    $112 = $tmpcast1520$sroa$0$0; //@line 14082
    $115 = $82; //@line 14082
    $94 = $63; //@line 14082
    $95 = $83; //@line 14082
    while (1) {
     $93 = HEAP32[$94 >> 2] | 0; //@line 14084
     if (($95 | 0) == ($93 | 0)) {
      $97 = $94 + -4 | 0; //@line 14087
      $98 = HEAP32[$97 >> 2] | 0; //@line 14088
      $101 = $98 + 4032 | 0; //@line 14090
      $103 = $98; //@line 14090
      $128 = $97; //@line 14090
     } else {
      $101 = $95; //@line 14092
      $103 = $93; //@line 14092
      $128 = $94; //@line 14092
     }
     $100 = $101 + -72 | 0; //@line 14094
     $106 = ($101 - $103 | 0) / 72 | 0; //@line 14098
     $107 = ($106 | 0) > ($$01922$i | 0); //@line 14099
     $$020$i = $107 ? $101 + ((0 - $$01922$i | 0) * 72 | 0) | 0 : $103; //@line 14102
     $$0$i29 = $107 ? $$01922$i : $106; //@line 14103
     $110 = $$byval_copy; //@line 14104
     HEAP32[$110 >> 2] = $112; //@line 14106
     HEAP32[$110 + 4 >> 2] = $115; //@line 14109
     HEAP32[$tmpcast11$byval_copy >> 2] = HEAP32[$$byval_copy >> 2]; //@line 14110
     HEAP32[$tmpcast11$byval_copy + 4 >> 2] = HEAP32[$$byval_copy + 4 >> 2]; //@line 14110
     __ZNSt3__213move_backwardIP13CharmFunctionS1_S2_RS1_PS2_iLi0EEENS_16__deque_iteratorIT0_T1_T2_T3_T4_XT5_EEET_SC_SB_PNS_9enable_ifIXsr27__is_random_access_iteratorISC_EE5valueEvE4typeE($$byval_copy1, $$020$i, $101, $tmpcast11$byval_copy, 0); //@line 14111
     $116 = $$byval_copy1; //@line 14112
     $112 = HEAP32[$116 >> 2] | 0; //@line 14114
     $115 = HEAP32[$116 + 4 >> 2] | 0; //@line 14117
     $$01922$i = $$01922$i - $$0$i29 | 0; //@line 14118
     $123 = $$0$i29 + -1 | 0; //@line 14119
     do {
      if (!$123) {
       $283 = $128; //@line 14123
       $284 = $100; //@line 14123
      } else {
       $131 = (($100 - (HEAP32[$128 >> 2] | 0) | 0) / 72 | 0) - $123 | 0; //@line 14129
       if (($131 | 0) > 0) {
        $134 = $128 + ((($131 >>> 0) / 56 | 0) << 2) | 0; //@line 14133
        $283 = $134; //@line 14137
        $284 = (HEAP32[$134 >> 2] | 0) + ((($131 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14137
        break;
       } else {
        $138 = 55 - $131 | 0; //@line 14140
        $140 = $128 + ((($138 | 0) / -56 | 0) << 2) | 0; //@line 14142
        $283 = $140; //@line 14147
        $284 = (HEAP32[$140 >> 2] | 0) + ((55 - (($138 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 14147
        break;
       }
      }
     } while (0);
     if (($$01922$i | 0) <= 0) {
      break;
     } else {
      $94 = $283; //@line 14154
      $95 = $284; //@line 14154
     }
    }
   }
  }
  $145 = $20 + 52 | 0; //@line 14161
  if ((HEAP8[$145 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$145 >> 2] | 0); //@line 14167
  }
  $150 = $20 + 40 | 0; //@line 14169
  $151 = HEAP32[$150 >> 2] | 0; //@line 14170
  if ($151 | 0) {
   $153 = $20 + 44 | 0; //@line 14173
   $154 = HEAP32[$153 >> 2] | 0; //@line 14174
   if (($154 | 0) == ($151 | 0)) {
    $160 = $151; //@line 14177
   } else {
    $157 = $154; //@line 14179
    do {
     $156 = $157 + -72 | 0; //@line 14181
     HEAP32[$153 >> 2] = $156; //@line 14182
     __ZN13CharmFunctionD2Ev($156); //@line 14183
     $157 = HEAP32[$153 >> 2] | 0; //@line 14184
    } while (($157 | 0) != ($151 | 0));
    $160 = HEAP32[$150 >> 2] | 0; //@line 14193
   }
   __ZdlPv($160); //@line 14195
  }
  $161 = $20 + 4 | 0; //@line 14197
  if ((HEAP8[$161 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$161 >> 2] | 0); //@line 14203
  }
  HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + -1; //@line 14207
  $170 = (HEAP32[$9 >> 2] | 0) + 1 | 0; //@line 14209
  HEAP32[$9 >> 2] = $170; //@line 14210
  if ($170 >>> 0 > 111) {
   __ZdlPv(HEAP32[HEAP32[$7 >> 2] >> 2] | 0); //@line 14215
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 4; //@line 14218
   $177 = (HEAP32[$9 >> 2] | 0) + -56 | 0; //@line 14220
   HEAP32[$9 >> 2] = $177; //@line 14221
   $$0$i138139 = $$0$i138140; //@line 14222
   $248 = $177; //@line 14222
   $285 = $281; //@line 14222
  } else {
   $$0$i138139 = $$0$i138140; //@line 14224
   $248 = $170; //@line 14224
   $285 = $281; //@line 14224
  }
 }
 $246 = HEAP32[$7 >> 2] | 0; //@line 14227
 $249 = $246 + ((($248 >>> 0) / 56 | 0) << 2) | 0; //@line 14229
 if ((HEAP32[$13 >> 2] | 0) == ($246 | 0)) {
  $257 = 0; //@line 14233
  $262 = 0; //@line 14233
 } else {
  $257 = 0; //@line 14239
  $262 = (HEAP32[$249 >> 2] | 0) + ((($248 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14239
 }
 $258 = $0; //@line 14243
 HEAP32[$258 >> 2] = $257 | $249; //@line 14245
 HEAP32[$258 + 4 >> 2] = $262; //@line 14248
 if ($285) {
  STACKTOP = sp; //@line 14250
  return;
 }
 $267 = (($262 - (HEAP32[$249 >> 2] | 0) | 0) / 72 | 0) + $$0$i138139 | 0; //@line 14256
 if (($267 | 0) > 0) {
  $270 = $249 + ((($267 >>> 0) / 56 | 0) << 2) | 0; //@line 14260
  HEAP32[$0 >> 2] = $270; //@line 14261
  $$sink$i$i = (HEAP32[$270 >> 2] | 0) + ((($267 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14265
 } else {
  $274 = 55 - $267 | 0; //@line 14267
  $276 = $249 + ((($274 | 0) / -56 | 0) << 2) | 0; //@line 14269
  HEAP32[$0 >> 2] = $276; //@line 14270
  $$sink$i$i = (HEAP32[$276 >> 2] | 0) + ((55 - (($274 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 14275
 }
 HEAP32[$0 + 4 >> 2] = $$sink$i$i; //@line 14277
 STACKTOP = sp; //@line 14278
 return;
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i48 = 0, $$0$i$i$i53 = 0, $$0$i$i$i58 = 0, $$0$i$i$i63 = 0, $$0$i$i$i68 = 0, $$0$i$i$i73 = 0, $$0$i$i$i78 = 0, $$pre$phi81Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $11 = 0, $111 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $137 = 0, $140 = 0, $142 = 0, $144 = 0, $151 = 0, $154 = 0, $156 = 0, $158 = 0, $16 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $34 = 0, $38 = 0, $41 = 0, $43 = 0, $45 = 0, $60 = 0, $63 = 0, $65 = 0, $67 = 0, $74 = 0, $77 = 0, $79 = 0, $81 = 0, $89 = 0, $93 = 0, $97 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 52442
 STACKTOP = STACKTOP + 16 | 0; //@line 52443
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 52443
 $10 = sp + 12 | 0; //@line 52444
 $11 = sp; //@line 52445
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 37232) | 0; //@line 52447
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 255]($10, $12); //@line 52452
   $16 = HEAP32[$10 >> 2] | 0; //@line 52453
   HEAP8[$3 >> 0] = $16; //@line 52454
   HEAP8[$3 + 1 >> 0] = $16 >> 8; //@line 52454
   HEAP8[$3 + 2 >> 0] = $16 >> 16; //@line 52454
   HEAP8[$3 + 3 >> 0] = $16 >> 24; //@line 52454
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 255]($11, $12); //@line 52458
   $20 = $8 + 11 | 0; //@line 52459
   if ((HEAP8[$20 >> 0] | 0) < 0) {
    $23 = HEAP32[$8 >> 2] | 0; //@line 52463
    HEAP8[$10 >> 0] = 0; //@line 52464
    __ZNSt3__211char_traitsIcE6assignERcRKc($23, $10); //@line 52465
    HEAP32[$8 + 4 >> 2] = 0; //@line 52467
   } else {
    HEAP8[$10 >> 0] = 0; //@line 52469
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10); //@line 52470
    HEAP8[$20 >> 0] = 0; //@line 52471
   }
   __THREW__ = 0; //@line 52473
   invoke_vii(129, $8 | 0, 0); //@line 52474
   $25 = __THREW__; //@line 52475
   __THREW__ = 0; //@line 52475
   if ($25 & 1) {
    $27 = ___cxa_find_matching_catch_3(0) | 0; //@line 52478
    ___clang_call_terminate($27); //@line 52480
   }
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 52483
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 52483
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 52483
   $$0$i$i$i = 0; //@line 52484
   while (1) {
    if (($$0$i$i$i | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0; //@line 52491
    $$0$i$i$i = $$0$i$i$i + 1 | 0; //@line 52493
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52495
   $$pre$phiZ2D = $12; //@line 52496
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 40 >> 2] & 255]($10, $12); //@line 52501
   $34 = HEAP32[$10 >> 2] | 0; //@line 52502
   HEAP8[$3 >> 0] = $34; //@line 52503
   HEAP8[$3 + 1 >> 0] = $34 >> 8; //@line 52503
   HEAP8[$3 + 2 >> 0] = $34 >> 16; //@line 52503
   HEAP8[$3 + 3 >> 0] = $34 >> 24; //@line 52503
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 255]($11, $12); //@line 52507
   $38 = $8 + 11 | 0; //@line 52508
   if ((HEAP8[$38 >> 0] | 0) < 0) {
    $41 = HEAP32[$8 >> 2] | 0; //@line 52512
    HEAP8[$10 >> 0] = 0; //@line 52513
    __ZNSt3__211char_traitsIcE6assignERcRKc($41, $10); //@line 52514
    HEAP32[$8 + 4 >> 2] = 0; //@line 52516
   } else {
    HEAP8[$10 >> 0] = 0; //@line 52518
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10); //@line 52519
    HEAP8[$38 >> 0] = 0; //@line 52520
   }
   __THREW__ = 0; //@line 52522
   invoke_vii(129, $8 | 0, 0); //@line 52523
   $43 = __THREW__; //@line 52524
   __THREW__ = 0; //@line 52524
   if ($43 & 1) {
    $45 = ___cxa_find_matching_catch_3(0) | 0; //@line 52527
    ___clang_call_terminate($45); //@line 52529
   }
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 52532
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 52532
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 52532
   $$0$i$i$i48 = 0; //@line 52533
   while (1) {
    if (($$0$i$i$i48 | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i$i48 << 2) >> 2] = 0; //@line 52540
    $$0$i$i$i48 = $$0$i$i$i48 + 1 | 0; //@line 52542
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52544
   $$pre$phiZ2D = $12; //@line 52545
  }
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 255]($12) | 0; //@line 52551
  HEAP8[$5 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 255]($12) | 0; //@line 52556
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 255]($11, $12); //@line 52560
  $60 = $6 + 11 | 0; //@line 52561
  if ((HEAP8[$60 >> 0] | 0) < 0) {
   $63 = HEAP32[$6 >> 2] | 0; //@line 52565
   HEAP8[$10 >> 0] = 0; //@line 52566
   __ZNSt3__211char_traitsIcE6assignERcRKc($63, $10); //@line 52567
   HEAP32[$6 + 4 >> 2] = 0; //@line 52569
  } else {
   HEAP8[$10 >> 0] = 0; //@line 52571
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10); //@line 52572
   HEAP8[$60 >> 0] = 0; //@line 52573
  }
  __THREW__ = 0; //@line 52575
  invoke_vii(129, $6 | 0, 0); //@line 52576
  $65 = __THREW__; //@line 52577
  __THREW__ = 0; //@line 52577
  if ($65 & 1) {
   $67 = ___cxa_find_matching_catch_3(0) | 0; //@line 52580
   ___clang_call_terminate($67); //@line 52582
  }
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2]; //@line 52585
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 52585
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 52585
  $$0$i$i$i53 = 0; //@line 52586
  while (1) {
   if (($$0$i$i$i53 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i53 << 2) >> 2] = 0; //@line 52593
   $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0; //@line 52595
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52597
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 255]($11, $12); //@line 52601
  $74 = $7 + 11 | 0; //@line 52602
  if ((HEAP8[$74 >> 0] | 0) < 0) {
   $77 = HEAP32[$7 >> 2] | 0; //@line 52606
   HEAP8[$10 >> 0] = 0; //@line 52607
   __ZNSt3__211char_traitsIcE6assignERcRKc($77, $10); //@line 52608
   HEAP32[$7 + 4 >> 2] = 0; //@line 52610
  } else {
   HEAP8[$10 >> 0] = 0; //@line 52612
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10); //@line 52613
   HEAP8[$74 >> 0] = 0; //@line 52614
  }
  __THREW__ = 0; //@line 52616
  invoke_vii(129, $7 | 0, 0); //@line 52617
  $79 = __THREW__; //@line 52618
  __THREW__ = 0; //@line 52618
  if ($79 & 1) {
   $81 = ___cxa_find_matching_catch_3(0) | 0; //@line 52621
   ___clang_call_terminate($81); //@line 52623
  }
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2]; //@line 52626
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 52626
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 52626
  $$0$i$i$i58 = 0; //@line 52627
  while (1) {
   if (($$0$i$i$i58 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i58 << 2) >> 2] = 0; //@line 52634
   $$0$i$i$i58 = $$0$i$i$i58 + 1 | 0; //@line 52636
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52638
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 255]($12) | 0; //@line 52643
 } else {
  $89 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 37224) | 0; //@line 52645
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$89 >> 2] | 0) + 44 >> 2] & 255]($10, $89); //@line 52650
   $93 = HEAP32[$10 >> 2] | 0; //@line 52651
   HEAP8[$3 >> 0] = $93; //@line 52652
   HEAP8[$3 + 1 >> 0] = $93 >> 8; //@line 52652
   HEAP8[$3 + 2 >> 0] = $93 >> 16; //@line 52652
   HEAP8[$3 + 3 >> 0] = $93 >> 24; //@line 52652
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$89 >> 2] | 0) + 32 >> 2] & 255]($11, $89); //@line 52656
   $97 = $8 + 11 | 0; //@line 52657
   if ((HEAP8[$97 >> 0] | 0) < 0) {
    $100 = HEAP32[$8 >> 2] | 0; //@line 52661
    HEAP8[$10 >> 0] = 0; //@line 52662
    __ZNSt3__211char_traitsIcE6assignERcRKc($100, $10); //@line 52663
    HEAP32[$8 + 4 >> 2] = 0; //@line 52665
   } else {
    HEAP8[$10 >> 0] = 0; //@line 52667
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10); //@line 52668
    HEAP8[$97 >> 0] = 0; //@line 52669
   }
   __THREW__ = 0; //@line 52671
   invoke_vii(129, $8 | 0, 0); //@line 52672
   $102 = __THREW__; //@line 52673
   __THREW__ = 0; //@line 52673
   if ($102 & 1) {
    $104 = ___cxa_find_matching_catch_3(0) | 0; //@line 52676
    ___clang_call_terminate($104); //@line 52678
   }
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 52681
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 52681
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 52681
   $$0$i$i$i63 = 0; //@line 52682
   while (1) {
    if (($$0$i$i$i63 | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i$i63 << 2) >> 2] = 0; //@line 52689
    $$0$i$i$i63 = $$0$i$i$i63 + 1 | 0; //@line 52691
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52693
   $$pre$phi81Z2D = $89; //@line 52694
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$89 >> 2] | 0) + 40 >> 2] & 255]($10, $89); //@line 52699
   $111 = HEAP32[$10 >> 2] | 0; //@line 52700
   HEAP8[$3 >> 0] = $111; //@line 52701
   HEAP8[$3 + 1 >> 0] = $111 >> 8; //@line 52701
   HEAP8[$3 + 2 >> 0] = $111 >> 16; //@line 52701
   HEAP8[$3 + 3 >> 0] = $111 >> 24; //@line 52701
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$89 >> 2] | 0) + 28 >> 2] & 255]($11, $89); //@line 52705
   $115 = $8 + 11 | 0; //@line 52706
   if ((HEAP8[$115 >> 0] | 0) < 0) {
    $118 = HEAP32[$8 >> 2] | 0; //@line 52710
    HEAP8[$10 >> 0] = 0; //@line 52711
    __ZNSt3__211char_traitsIcE6assignERcRKc($118, $10); //@line 52712
    HEAP32[$8 + 4 >> 2] = 0; //@line 52714
   } else {
    HEAP8[$10 >> 0] = 0; //@line 52716
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10); //@line 52717
    HEAP8[$115 >> 0] = 0; //@line 52718
   }
   __THREW__ = 0; //@line 52720
   invoke_vii(129, $8 | 0, 0); //@line 52721
   $120 = __THREW__; //@line 52722
   __THREW__ = 0; //@line 52722
   if ($120 & 1) {
    $122 = ___cxa_find_matching_catch_3(0) | 0; //@line 52725
    ___clang_call_terminate($122); //@line 52727
   }
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 52730
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 52730
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 52730
   $$0$i$i$i68 = 0; //@line 52731
   while (1) {
    if (($$0$i$i$i68 | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i$i68 << 2) >> 2] = 0; //@line 52738
    $$0$i$i$i68 = $$0$i$i$i68 + 1 | 0; //@line 52740
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52742
   $$pre$phi81Z2D = $89; //@line 52743
  }
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 12 >> 2] & 255]($89) | 0; //@line 52749
  HEAP8[$5 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 16 >> 2] & 255]($89) | 0; //@line 52754
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi81Z2D >> 2] | 0) + 20 >> 2] & 255]($11, $89); //@line 52758
  $137 = $6 + 11 | 0; //@line 52759
  if ((HEAP8[$137 >> 0] | 0) < 0) {
   $140 = HEAP32[$6 >> 2] | 0; //@line 52763
   HEAP8[$10 >> 0] = 0; //@line 52764
   __ZNSt3__211char_traitsIcE6assignERcRKc($140, $10); //@line 52765
   HEAP32[$6 + 4 >> 2] = 0; //@line 52767
  } else {
   HEAP8[$10 >> 0] = 0; //@line 52769
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10); //@line 52770
   HEAP8[$137 >> 0] = 0; //@line 52771
  }
  __THREW__ = 0; //@line 52773
  invoke_vii(129, $6 | 0, 0); //@line 52774
  $142 = __THREW__; //@line 52775
  __THREW__ = 0; //@line 52775
  if ($142 & 1) {
   $144 = ___cxa_find_matching_catch_3(0) | 0; //@line 52778
   ___clang_call_terminate($144); //@line 52780
  }
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2]; //@line 52783
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 52783
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 52783
  $$0$i$i$i73 = 0; //@line 52784
  while (1) {
   if (($$0$i$i$i73 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i73 << 2) >> 2] = 0; //@line 52791
   $$0$i$i$i73 = $$0$i$i$i73 + 1 | 0; //@line 52793
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52795
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi81Z2D >> 2] | 0) + 24 >> 2] & 255]($11, $89); //@line 52799
  $151 = $7 + 11 | 0; //@line 52800
  if ((HEAP8[$151 >> 0] | 0) < 0) {
   $154 = HEAP32[$7 >> 2] | 0; //@line 52804
   HEAP8[$10 >> 0] = 0; //@line 52805
   __ZNSt3__211char_traitsIcE6assignERcRKc($154, $10); //@line 52806
   HEAP32[$7 + 4 >> 2] = 0; //@line 52808
  } else {
   HEAP8[$10 >> 0] = 0; //@line 52810
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10); //@line 52811
   HEAP8[$151 >> 0] = 0; //@line 52812
  }
  __THREW__ = 0; //@line 52814
  invoke_vii(129, $7 | 0, 0); //@line 52815
  $156 = __THREW__; //@line 52816
  __THREW__ = 0; //@line 52816
  if ($156 & 1) {
   $158 = ___cxa_find_matching_catch_3(0) | 0; //@line 52819
   ___clang_call_terminate($158); //@line 52821
  }
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2]; //@line 52824
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 52824
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 52824
  $$0$i$i$i78 = 0; //@line 52825
  while (1) {
   if (($$0$i$i$i78 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i78 << 2) >> 2] = 0; //@line 52832
   $$0$i$i$i78 = $$0$i$i$i78 + 1 | 0; //@line 52834
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52836
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 36 >> 2] & 255]($89) | 0; //@line 52841
 }
 HEAP32[$9 >> 2] = $storemerge; //@line 52843
 STACKTOP = sp; //@line 52844
 return;
}
function __ZN6Parser19parseStringFunctionERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $$03$i = 0, $$07 = 0, $$1 = 0, $$18 = 0, $$2 = 0, $$29 = 0, $$3 = 0, $$310 = 0, $$byval_copy = 0, $$pre = 0, $$sink29 = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $109 = 0, $113 = 0, $117 = 0, $123 = 0, $126 = 0, $128 = 0, $13 = 0, $130 = 0, $140 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $158 = 0, $160 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $27 = 0, $28 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $98 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1295
 STACKTOP = STACKTOP + 176 | 0; //@line 1296
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 1296
 $$byval_copy = sp + 156 | 0; //@line 1297
 $4 = sp; //@line 1298
 $5 = sp + 144 | 0; //@line 1299
 $6 = $0 + 4 | 0; //@line 1300
 HEAP32[$6 >> 2] = 0; //@line 1301
 HEAP32[$6 + 4 >> 2] = 0; //@line 1301
 HEAP32[$6 + 8 >> 2] = 0; //@line 1301
 $7 = $0 + 40 | 0; //@line 1302
 HEAP32[$7 >> 2] = 0; //@line 1303
 HEAP32[$7 + 4 >> 2] = 0; //@line 1303
 HEAP32[$7 + 8 >> 2] = 0; //@line 1303
 HEAP32[$7 + 12 >> 2] = 0; //@line 1303
 HEAP32[$7 + 16 >> 2] = 0; //@line 1303
 HEAP32[$7 + 20 >> 2] = 0; //@line 1303
 HEAP32[$0 >> 2] = 3; //@line 1304
 $8 = $4 + 64 | 0; //@line 1305
 $9 = $4 + 8 | 0; //@line 1306
 HEAP32[$9 >> 2] = 4868; //@line 1307
 $10 = $4 + 12 | 0; //@line 1308
 HEAP32[$4 >> 2] = 692; //@line 1309
 HEAP32[$8 >> 2] = 712; //@line 1310
 HEAP32[$4 + 4 >> 2] = 0; //@line 1312
 __THREW__ = 0; //@line 1314
 invoke_vii(110, $4 + 64 | 0, $10 | 0); //@line 1315
 $13 = __THREW__; //@line 1316
 __THREW__ = 0; //@line 1316
 L1 : do {
  if ($13 & 1) {
   $37 = ___cxa_find_matching_catch_2() | 0; //@line 1320
   $$0$i = tempRet0; //@line 1322
   $$03$i = $37; //@line 1322
   label = 21; //@line 1323
  } else {
   HEAP32[$4 + 136 >> 2] = 0; //@line 1326
   HEAP32[$4 + 140 >> 2] = -1; //@line 1328
   HEAP32[$4 >> 2] = 4848; //@line 1329
   HEAP32[$8 >> 2] = 4888; //@line 1330
   HEAP32[$9 >> 2] = 4868; //@line 1331
   __THREW__ = 0; //@line 1332
   invoke_vi(253, $10 | 0); //@line 1333
   $17 = __THREW__; //@line 1334
   __THREW__ = 0; //@line 1334
   do {
    if ($17 & 1) {
     $39 = ___cxa_find_matching_catch_2() | 0; //@line 1338
     $eh$lpad$body$i$index2Z2D = tempRet0; //@line 1340
     $eh$lpad$body$i$indexZ2D = $39; //@line 1340
    } else {
     HEAP32[$10 >> 2] = 3032; //@line 1342
     $19 = $4 + 44 | 0; //@line 1343
     $20 = $4 + 60 | 0; //@line 1344
     HEAP32[$19 >> 2] = 0; //@line 1345
     HEAP32[$19 + 4 >> 2] = 0; //@line 1345
     HEAP32[$19 + 8 >> 2] = 0; //@line 1345
     HEAP32[$19 + 12 >> 2] = 0; //@line 1345
     HEAP32[$20 >> 2] = 24; //@line 1346
     HEAP32[$$byval_copy >> 2] = 0; //@line 1347
     HEAP32[$$byval_copy + 4 >> 2] = 0; //@line 1347
     HEAP32[$$byval_copy + 8 >> 2] = 0; //@line 1347
     __THREW__ = 0; //@line 1348
     invoke_vii(111, $10 | 0, $$byval_copy | 0); //@line 1349
     $21 = __THREW__; //@line 1350
     __THREW__ = 0; //@line 1350
     if ($21 & 1) {
      $27 = ___cxa_find_matching_catch_2() | 0; //@line 1353
      $28 = tempRet0; //@line 1354
      if ((HEAP8[$$byval_copy + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 1360
      }
      if ((HEAP8[$19 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 1367
      }
      __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 1369
      $eh$lpad$body$i$index2Z2D = $28; //@line 1370
      $eh$lpad$body$i$indexZ2D = $27; //@line 1370
      break;
     }
     if ((HEAP8[$$byval_copy + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 1378
     }
     $41 = $2 + 11 | 0; //@line 1380
     $42 = $2 + 4 | 0; //@line 1381
     $43 = $4 + 8 | 0; //@line 1382
     $44 = $$byval_copy + 11 | 0; //@line 1383
     $45 = $$byval_copy + 4 | 0; //@line 1384
     $46 = $5 + 11 | 0; //@line 1385
     while (1) {
      __THREW__ = 0; //@line 1387
      $47 = invoke_iiii(37, 0, $2 | 0, $3 | 0) | 0; //@line 1388
      $48 = __THREW__; //@line 1389
      __THREW__ = 0; //@line 1389
      if ($48 & 1) {
       label = 22; //@line 1392
       break;
      }
      if (!$47) {
       label = 39; //@line 1396
       break;
      }
      $50 = HEAP8[$41 >> 0] | 0; //@line 1399
      if ((($50 << 24 >> 24 < 0 ? HEAP32[$42 >> 2] | 0 : $50 & 255) | 0) == 1) {
       __THREW__ = 0; //@line 1406
       $56 = invoke_iiiiii(21, $2 | 0, 0, -1, 20984, 1) | 0; //@line 1407
       $57 = __THREW__; //@line 1408
       __THREW__ = 0; //@line 1408
       if ($57 & 1) {
        label = 19; //@line 1411
        break;
       }
       if (!$56) {
        label = 39; //@line 1416
        break;
       }
      }
      __THREW__ = 0; //@line 1420
      invoke_vii(115, $5 | 0, $2 | 0); //@line 1421
      $64 = __THREW__; //@line 1422
      __THREW__ = 0; //@line 1422
      if ($64 & 1) {
       label = 32; //@line 1425
       break;
      }
      __THREW__ = 0; //@line 1428
      invoke_viii(34, $$byval_copy | 0, 0, $5 | 0); //@line 1429
      $66 = __THREW__; //@line 1430
      __THREW__ = 0; //@line 1430
      if ($66 & 1) {
       label = 33; //@line 1433
       break;
      }
      $68 = HEAP8[$44 >> 0] | 0; //@line 1436
      $69 = $68 << 24 >> 24 < 0; //@line 1437
      __THREW__ = 0; //@line 1443
      $75 = invoke_iiii(32, $43 | 0, ($69 ? HEAP32[$$byval_copy >> 2] | 0 : $$byval_copy) | 0, ($69 ? HEAP32[$45 >> 2] | 0 : $68 & 255) | 0) | 0; //@line 1444
      $76 = __THREW__; //@line 1445
      __THREW__ = 0; //@line 1445
      if ($76 & 1) {
       label = 34; //@line 1448
       break;
      }
      __THREW__ = 0; //@line 1451
      invoke_iiii(32, $75 | 0, 21108, 1) | 0; //@line 1452
      $78 = __THREW__; //@line 1453
      __THREW__ = 0; //@line 1453
      if ($78 & 1) {
       label = 34; //@line 1456
       break;
      }
      if ((HEAP8[$44 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 1463
      }
      if ((HEAP8[$46 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 1469
      }
     }
     do {
      if ((label | 0) == 19) {
       $59 = ___cxa_find_matching_catch_3(0) | 0; //@line 1474
       ___clang_call_terminate($59); //@line 1476
      } else if ((label | 0) == 22) {
       $62 = ___cxa_find_matching_catch_2() | 0; //@line 1480
       $$2 = tempRet0; //@line 1482
       $$29 = $62; //@line 1482
      } else if ((label | 0) == 32) {
       $86 = ___cxa_find_matching_catch_2() | 0; //@line 1485
       $$1 = tempRet0; //@line 1487
       $$18 = $86; //@line 1487
       label = 38; //@line 1488
      } else if ((label | 0) == 33) {
       $88 = ___cxa_find_matching_catch_2() | 0; //@line 1491
       $$0 = tempRet0; //@line 1493
       $$07 = $88; //@line 1493
       label = 36; //@line 1494
      } else if ((label | 0) == 34) {
       $90 = ___cxa_find_matching_catch_2() | 0; //@line 1497
       $91 = tempRet0; //@line 1498
       if ((HEAP8[$44 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 1503
        $$0 = $91; //@line 1504
        $$07 = $90; //@line 1504
        label = 36; //@line 1505
       } else {
        $$0 = $91; //@line 1507
        $$07 = $90; //@line 1507
        label = 36; //@line 1508
       }
      } else if ((label | 0) == 39) {
       __THREW__ = 0; //@line 1512
       invoke_vii(114, $$byval_copy | 0, $10 | 0); //@line 1513
       $98 = __THREW__; //@line 1514
       __THREW__ = 0; //@line 1514
       if ($98 & 1) {
        $128 = ___cxa_find_matching_catch_2() | 0; //@line 1517
        $$2 = tempRet0; //@line 1519
        $$29 = $128; //@line 1519
        break;
       }
       $100 = $6 + 11 | 0; //@line 1522
       if ((HEAP8[$100 >> 0] | 0) < 0) {
        HEAP8[HEAP32[$6 >> 2] >> 0] = 0; //@line 1527
        HEAP32[$0 + 8 >> 2] = 0; //@line 1529
       } else {
        HEAP8[$6 >> 0] = 0; //@line 1531
        HEAP8[$100 >> 0] = 0; //@line 1532
       }
       __THREW__ = 0; //@line 1534
       invoke_vii(129, $6 | 0, 0); //@line 1535
       $105 = __THREW__; //@line 1536
       __THREW__ = 0; //@line 1536
       if ($105 & 1) {
        $107 = ___cxa_find_matching_catch_3(0) | 0; //@line 1539
        ___clang_call_terminate($107); //@line 1541
       }
       HEAP32[$6 >> 2] = HEAP32[$$byval_copy >> 2]; //@line 1544
       HEAP32[$6 + 4 >> 2] = HEAP32[$$byval_copy + 4 >> 2]; //@line 1544
       HEAP32[$6 + 8 >> 2] = HEAP32[$$byval_copy + 8 >> 2]; //@line 1544
       $$pre = HEAP8[$100 >> 0] | 0; //@line 1545
       $109 = $$pre << 24 >> 24 < 0; //@line 1546
       if ($109) {
        $113 = HEAP32[$0 + 8 >> 2] | 0; //@line 1550
       } else {
        $113 = $$pre & 255; //@line 1553
       }
       if ($113 | 0) {
        if ($109) {
         $117 = HEAP32[$6 >> 2] | 0; //@line 1558
         $$sink29 = $117 + (HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 1562
         $123 = $117; //@line 1562
        } else {
         $$sink29 = $6 + ($$pre & 255) | 0; //@line 1566
         $123 = $6; //@line 1566
        }
        __THREW__ = 0; //@line 1572
        invoke_iiii(36, $6 | 0, $$sink29 + -1 - $123 | 0, 1) | 0; //@line 1573
        $126 = __THREW__; //@line 1574
        __THREW__ = 0; //@line 1574
        if ($126 & 1) {
         $130 = ___cxa_find_matching_catch_2() | 0; //@line 1577
         $$2 = tempRet0; //@line 1579
         $$29 = $130; //@line 1579
         break;
        }
       }
       HEAP32[$4 >> 2] = 4848; //@line 1583
       HEAP32[$8 >> 2] = 4888; //@line 1584
       HEAP32[$43 >> 2] = 4868; //@line 1585
       HEAP32[$10 >> 2] = 3032; //@line 1586
       if ((HEAP8[$19 + 11 >> 0] | 0) >= 0) {
        __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 1591
        __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 1592
        __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 1593
        STACKTOP = sp; //@line 1594
        return;
       }
       __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 1597
       __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 1598
       __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 1599
       __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 1600
       STACKTOP = sp; //@line 1601
       return;
      }
     } while (0);
     if ((label | 0) == 36) {
      if ((HEAP8[$46 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 1609
       $$1 = $$0; //@line 1610
       $$18 = $$07; //@line 1610
       label = 38; //@line 1611
      } else {
       $$1 = $$0; //@line 1613
       $$18 = $$07; //@line 1613
       label = 38; //@line 1614
      }
     }
     if ((label | 0) == 38) {
      $$2 = $$1; //@line 1618
      $$29 = $$18; //@line 1618
     }
     HEAP32[$4 >> 2] = 4848; //@line 1620
     HEAP32[$8 >> 2] = 4888; //@line 1621
     HEAP32[$43 >> 2] = 4868; //@line 1622
     HEAP32[$10 >> 2] = 3032; //@line 1623
     if ((HEAP8[$19 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 1629
     }
     __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($10); //@line 1631
     __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 1632
     __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 1633
     $$3 = $$2; //@line 1634
     $$310 = $$29; //@line 1634
     break L1;
    }
   } while (0);
   __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 1638
   $$0$i = $eh$lpad$body$i$index2Z2D; //@line 1639
   $$03$i = $eh$lpad$body$i$indexZ2D; //@line 1639
   label = 21; //@line 1640
  }
 } while (0);
 if ((label | 0) == 21) {
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($8); //@line 1644
  $$3 = $$0$i; //@line 1645
  $$310 = $$03$i; //@line 1645
 }
 $140 = $0 + 52 | 0; //@line 1647
 if ((HEAP8[$140 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$140 >> 2] | 0); //@line 1653
 }
 $145 = $0 + 40 | 0; //@line 1655
 $146 = HEAP32[$145 >> 2] | 0; //@line 1656
 if ($146 | 0) {
  $148 = $0 + 44 | 0; //@line 1659
  $149 = HEAP32[$148 >> 2] | 0; //@line 1660
  do {
   if (($149 | 0) == ($146 | 0)) {
    $160 = $146; //@line 1664
   } else {
    $151 = $0 + 48 | 0; //@line 1666
    $153 = $149; //@line 1667
    while (1) {
     $152 = $153 + -72 | 0; //@line 1669
     HEAP32[$148 >> 2] = $152; //@line 1670
     __THREW__ = 0; //@line 1671
     HEAP8[$$byval_copy >> 0] = HEAP8[$4 >> 0] | 0; //@line 1672
     invoke_viii(13, $$byval_copy | 0, $151 | 0, $152 | 0); //@line 1673
     $154 = __THREW__; //@line 1674
     __THREW__ = 0; //@line 1674
     if ($154 & 1) {
      label = 68; //@line 1677
      break;
     }
     $153 = HEAP32[$148 >> 2] | 0; //@line 1680
     if (($153 | 0) == ($146 | 0)) {
      label = 69; //@line 1683
      break;
     }
    }
    if ((label | 0) == 68) {
     $158 = ___cxa_find_matching_catch_3(0) | 0; //@line 1690
     ___clang_call_terminate($158); //@line 1692
    } else if ((label | 0) == 69) {
     $160 = HEAP32[$145 >> 2] | 0; //@line 1697
     break;
    }
   }
  } while (0);
  __ZdlPv($160); //@line 1702
 }
 if ((HEAP8[$6 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$310 | 0); //@line 1708
 }
 __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 1712
 ___resumeException($$310 | 0); //@line 1713
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i48 = 0, $$0$i$i$i51 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $$0$i$i$i75 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $108 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $127 = 0, $142 = 0, $145 = 0, $147 = 0, $149 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $164 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $35 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $62 = 0, $65 = 0, $67 = 0, $69 = 0, $77 = 0, $80 = 0, $82 = 0, $84 = 0, $92 = 0, $96 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 53792
 STACKTOP = STACKTOP + 16 | 0; //@line 53793
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 53793
 $10 = sp + 12 | 0; //@line 53794
 $11 = sp; //@line 53795
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 37248) | 0; //@line 53797
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 255]($10, $12); //@line 53802
   $16 = HEAP32[$10 >> 2] | 0; //@line 53803
   HEAP8[$3 >> 0] = $16; //@line 53804
   HEAP8[$3 + 1 >> 0] = $16 >> 8; //@line 53804
   HEAP8[$3 + 2 >> 0] = $16 >> 16; //@line 53804
   HEAP8[$3 + 3 >> 0] = $16 >> 24; //@line 53804
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 255]($11, $12); //@line 53808
   $21 = $8 + 8 + 3 | 0; //@line 53810
   if ((HEAP8[$21 >> 0] | 0) < 0) {
    $24 = HEAP32[$8 >> 2] | 0; //@line 53814
    HEAP32[$10 >> 2] = 0; //@line 53815
    __ZNSt3__211char_traitsIwE6assignERwRKw($24, $10); //@line 53816
    HEAP32[$8 + 4 >> 2] = 0; //@line 53818
   } else {
    HEAP32[$10 >> 2] = 0; //@line 53820
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10); //@line 53821
    HEAP8[$21 >> 0] = 0; //@line 53822
   }
   __THREW__ = 0; //@line 53824
   invoke_vii(149, $8 | 0, 0); //@line 53825
   $26 = __THREW__; //@line 53826
   __THREW__ = 0; //@line 53826
   if ($26 & 1) {
    $28 = ___cxa_find_matching_catch_3(0) | 0; //@line 53829
    ___clang_call_terminate($28); //@line 53831
   }
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 53834
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 53834
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 53834
   $$0$i$i$i = 0; //@line 53835
   while (1) {
    if (($$0$i$i$i | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0; //@line 53842
    $$0$i$i$i = $$0$i$i$i + 1 | 0; //@line 53844
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 53846
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 40 >> 2] & 255]($10, $12); //@line 53851
   $35 = HEAP32[$10 >> 2] | 0; //@line 53852
   HEAP8[$3 >> 0] = $35; //@line 53853
   HEAP8[$3 + 1 >> 0] = $35 >> 8; //@line 53853
   HEAP8[$3 + 2 >> 0] = $35 >> 16; //@line 53853
   HEAP8[$3 + 3 >> 0] = $35 >> 24; //@line 53853
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 255]($11, $12); //@line 53857
   $40 = $8 + 8 + 3 | 0; //@line 53859
   if ((HEAP8[$40 >> 0] | 0) < 0) {
    $43 = HEAP32[$8 >> 2] | 0; //@line 53863
    HEAP32[$10 >> 2] = 0; //@line 53864
    __ZNSt3__211char_traitsIwE6assignERwRKw($43, $10); //@line 53865
    HEAP32[$8 + 4 >> 2] = 0; //@line 53867
   } else {
    HEAP32[$10 >> 2] = 0; //@line 53869
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10); //@line 53870
    HEAP8[$40 >> 0] = 0; //@line 53871
   }
   __THREW__ = 0; //@line 53873
   invoke_vii(149, $8 | 0, 0); //@line 53874
   $45 = __THREW__; //@line 53875
   __THREW__ = 0; //@line 53875
   if ($45 & 1) {
    $47 = ___cxa_find_matching_catch_3(0) | 0; //@line 53878
    ___clang_call_terminate($47); //@line 53880
   }
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 53883
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 53883
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 53883
   $$0$i$i$i48 = 0; //@line 53884
   while (1) {
    if (($$0$i$i$i48 | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i$i48 << 2) >> 2] = 0; //@line 53891
    $$0$i$i$i48 = $$0$i$i$i48 + 1 | 0; //@line 53893
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 53895
  }
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 255]($12) | 0; //@line 53901
  HEAP32[$5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 255]($12) | 0; //@line 53906
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 255]($11, $12); //@line 53910
  $62 = $6 + 11 | 0; //@line 53911
  if ((HEAP8[$62 >> 0] | 0) < 0) {
   $65 = HEAP32[$6 >> 2] | 0; //@line 53915
   HEAP8[$10 >> 0] = 0; //@line 53916
   __ZNSt3__211char_traitsIcE6assignERcRKc($65, $10); //@line 53917
   HEAP32[$6 + 4 >> 2] = 0; //@line 53919
  } else {
   HEAP8[$10 >> 0] = 0; //@line 53921
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10); //@line 53922
   HEAP8[$62 >> 0] = 0; //@line 53923
  }
  __THREW__ = 0; //@line 53925
  invoke_vii(129, $6 | 0, 0); //@line 53926
  $67 = __THREW__; //@line 53927
  __THREW__ = 0; //@line 53927
  if ($67 & 1) {
   $69 = ___cxa_find_matching_catch_3(0) | 0; //@line 53930
   ___clang_call_terminate($69); //@line 53932
  }
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2]; //@line 53935
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 53935
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 53935
  $$0$i$i$i51 = 0; //@line 53936
  while (1) {
   if (($$0$i$i$i51 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i51 << 2) >> 2] = 0; //@line 53943
   $$0$i$i$i51 = $$0$i$i$i51 + 1 | 0; //@line 53945
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 53947
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 255]($11, $12); //@line 53951
  $77 = $7 + 8 + 3 | 0; //@line 53953
  if ((HEAP8[$77 >> 0] | 0) < 0) {
   $80 = HEAP32[$7 >> 2] | 0; //@line 53957
   HEAP32[$10 >> 2] = 0; //@line 53958
   __ZNSt3__211char_traitsIwE6assignERwRKw($80, $10); //@line 53959
   HEAP32[$7 + 4 >> 2] = 0; //@line 53961
  } else {
   HEAP32[$10 >> 2] = 0; //@line 53963
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10); //@line 53964
   HEAP8[$77 >> 0] = 0; //@line 53965
  }
  __THREW__ = 0; //@line 53967
  invoke_vii(149, $7 | 0, 0); //@line 53968
  $82 = __THREW__; //@line 53969
  __THREW__ = 0; //@line 53969
  if ($82 & 1) {
   $84 = ___cxa_find_matching_catch_3(0) | 0; //@line 53972
   ___clang_call_terminate($84); //@line 53974
  }
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2]; //@line 53977
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 53977
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 53977
  $$0$i$i$i55 = 0; //@line 53978
  while (1) {
   if (($$0$i$i$i55 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i55 << 2) >> 2] = 0; //@line 53985
   $$0$i$i$i55 = $$0$i$i$i55 + 1 | 0; //@line 53987
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 53989
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 255]($12) | 0; //@line 53994
 } else {
  $92 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 37240) | 0; //@line 53996
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 44 >> 2] & 255]($10, $92); //@line 54001
   $96 = HEAP32[$10 >> 2] | 0; //@line 54002
   HEAP8[$3 >> 0] = $96; //@line 54003
   HEAP8[$3 + 1 >> 0] = $96 >> 8; //@line 54003
   HEAP8[$3 + 2 >> 0] = $96 >> 16; //@line 54003
   HEAP8[$3 + 3 >> 0] = $96 >> 24; //@line 54003
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 32 >> 2] & 255]($11, $92); //@line 54007
   $101 = $8 + 8 + 3 | 0; //@line 54009
   if ((HEAP8[$101 >> 0] | 0) < 0) {
    $104 = HEAP32[$8 >> 2] | 0; //@line 54013
    HEAP32[$10 >> 2] = 0; //@line 54014
    __ZNSt3__211char_traitsIwE6assignERwRKw($104, $10); //@line 54015
    HEAP32[$8 + 4 >> 2] = 0; //@line 54017
   } else {
    HEAP32[$10 >> 2] = 0; //@line 54019
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10); //@line 54020
    HEAP8[$101 >> 0] = 0; //@line 54021
   }
   __THREW__ = 0; //@line 54023
   invoke_vii(149, $8 | 0, 0); //@line 54024
   $106 = __THREW__; //@line 54025
   __THREW__ = 0; //@line 54025
   if ($106 & 1) {
    $108 = ___cxa_find_matching_catch_3(0) | 0; //@line 54028
    ___clang_call_terminate($108); //@line 54030
   }
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 54033
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 54033
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 54033
   $$0$i$i$i60 = 0; //@line 54034
   while (1) {
    if (($$0$i$i$i60 | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i$i60 << 2) >> 2] = 0; //@line 54041
    $$0$i$i$i60 = $$0$i$i$i60 + 1 | 0; //@line 54043
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 54045
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 40 >> 2] & 255]($10, $92); //@line 54050
   $115 = HEAP32[$10 >> 2] | 0; //@line 54051
   HEAP8[$3 >> 0] = $115; //@line 54052
   HEAP8[$3 + 1 >> 0] = $115 >> 8; //@line 54052
   HEAP8[$3 + 2 >> 0] = $115 >> 16; //@line 54052
   HEAP8[$3 + 3 >> 0] = $115 >> 24; //@line 54052
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 28 >> 2] & 255]($11, $92); //@line 54056
   $120 = $8 + 8 + 3 | 0; //@line 54058
   if ((HEAP8[$120 >> 0] | 0) < 0) {
    $123 = HEAP32[$8 >> 2] | 0; //@line 54062
    HEAP32[$10 >> 2] = 0; //@line 54063
    __ZNSt3__211char_traitsIwE6assignERwRKw($123, $10); //@line 54064
    HEAP32[$8 + 4 >> 2] = 0; //@line 54066
   } else {
    HEAP32[$10 >> 2] = 0; //@line 54068
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10); //@line 54069
    HEAP8[$120 >> 0] = 0; //@line 54070
   }
   __THREW__ = 0; //@line 54072
   invoke_vii(149, $8 | 0, 0); //@line 54073
   $125 = __THREW__; //@line 54074
   __THREW__ = 0; //@line 54074
   if ($125 & 1) {
    $127 = ___cxa_find_matching_catch_3(0) | 0; //@line 54077
    ___clang_call_terminate($127); //@line 54079
   }
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 54082
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 54082
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 54082
   $$0$i$i$i65 = 0; //@line 54083
   while (1) {
    if (($$0$i$i$i65 | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i$i65 << 2) >> 2] = 0; //@line 54090
    $$0$i$i$i65 = $$0$i$i$i65 + 1 | 0; //@line 54092
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 54094
  }
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$92 >> 2] | 0) + 12 >> 2] & 255]($92) | 0; //@line 54100
  HEAP32[$5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$92 >> 2] | 0) + 16 >> 2] & 255]($92) | 0; //@line 54105
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 20 >> 2] & 255]($11, $92); //@line 54109
  $142 = $6 + 11 | 0; //@line 54110
  if ((HEAP8[$142 >> 0] | 0) < 0) {
   $145 = HEAP32[$6 >> 2] | 0; //@line 54114
   HEAP8[$10 >> 0] = 0; //@line 54115
   __ZNSt3__211char_traitsIcE6assignERcRKc($145, $10); //@line 54116
   HEAP32[$6 + 4 >> 2] = 0; //@line 54118
  } else {
   HEAP8[$10 >> 0] = 0; //@line 54120
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10); //@line 54121
   HEAP8[$142 >> 0] = 0; //@line 54122
  }
  __THREW__ = 0; //@line 54124
  invoke_vii(129, $6 | 0, 0); //@line 54125
  $147 = __THREW__; //@line 54126
  __THREW__ = 0; //@line 54126
  if ($147 & 1) {
   $149 = ___cxa_find_matching_catch_3(0) | 0; //@line 54129
   ___clang_call_terminate($149); //@line 54131
  }
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2]; //@line 54134
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 54134
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 54134
  $$0$i$i$i70 = 0; //@line 54135
  while (1) {
   if (($$0$i$i$i70 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i70 << 2) >> 2] = 0; //@line 54142
   $$0$i$i$i70 = $$0$i$i$i70 + 1 | 0; //@line 54144
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 54146
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 24 >> 2] & 255]($11, $92); //@line 54150
  $157 = $7 + 8 + 3 | 0; //@line 54152
  if ((HEAP8[$157 >> 0] | 0) < 0) {
   $160 = HEAP32[$7 >> 2] | 0; //@line 54156
   HEAP32[$10 >> 2] = 0; //@line 54157
   __ZNSt3__211char_traitsIwE6assignERwRKw($160, $10); //@line 54158
   HEAP32[$7 + 4 >> 2] = 0; //@line 54160
  } else {
   HEAP32[$10 >> 2] = 0; //@line 54162
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10); //@line 54163
   HEAP8[$157 >> 0] = 0; //@line 54164
  }
  __THREW__ = 0; //@line 54166
  invoke_vii(149, $7 | 0, 0); //@line 54167
  $162 = __THREW__; //@line 54168
  __THREW__ = 0; //@line 54168
  if ($162 & 1) {
   $164 = ___cxa_find_matching_catch_3(0) | 0; //@line 54171
   ___clang_call_terminate($164); //@line 54173
  }
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2]; //@line 54176
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 54176
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 54176
  $$0$i$i$i75 = 0; //@line 54177
  while (1) {
   if (($$0$i$i$i75 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i75 << 2) >> 2] = 0; //@line 54184
   $$0$i$i$i75 = $$0$i$i$i75 + 1 | 0; //@line 54186
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 54188
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$92 >> 2] | 0) + 36 >> 2] & 255]($92) | 0; //@line 54193
 }
 HEAP32[$9 >> 2] = $storemerge; //@line 54195
 STACKTOP = sp; //@line 54196
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$03$i$i$i = 0, $$byval_copy5 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $109 = 0, $110 = 0, $111 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $129 = 0, $131 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $142 = 0, $143 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $161 = 0, $163 = 0, $164 = 0, $169 = 0, $17 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $187 = 0, $189 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $4 = 0, $40 = 0.0, $42 = 0, $44 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $78 = 0, $80 = 0, $81 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24884
 STACKTOP = STACKTOP + 224 | 0; //@line 24885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 24885
 $$byval_copy5 = sp + 217 | 0; //@line 24886
 $2 = sp + 216 | 0; //@line 24887
 $3 = sp + 144 | 0; //@line 24888
 $4 = sp + 72 | 0; //@line 24889
 $5 = sp; //@line 24890
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv(HEAP32[$1 >> 2] | 0) | 0); //@line 24893
 __THREW__ = 0; //@line 24894
 invoke_vii(120, $4 | 0, $3 | 0); //@line 24895
 $7 = __THREW__; //@line 24896
 __THREW__ = 0; //@line 24896
 do {
  if ($7 & 1) {
   label = 17; //@line 24900
  } else {
   __THREW__ = 0; //@line 24902
   $9 = invoke_ii(145, $4 | 0) | 0; //@line 24903
   $10 = __THREW__; //@line 24904
   __THREW__ = 0; //@line 24904
   if ($10 & 1) {
    $50 = ___cxa_find_matching_catch_2() | 0; //@line 24907
    $51 = tempRet0; //@line 24908
    $52 = $4 + 52 | 0; //@line 24909
    if ((HEAP8[$52 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$52 >> 2] | 0); //@line 24915
    }
    $57 = $4 + 40 | 0; //@line 24917
    $58 = HEAP32[$57 >> 2] | 0; //@line 24918
    if ($58 | 0) {
     $60 = $4 + 44 | 0; //@line 24921
     $61 = HEAP32[$60 >> 2] | 0; //@line 24922
     do {
      if (($61 | 0) == ($58 | 0)) {
       $72 = $58; //@line 24926
      } else {
       $63 = $4 + 48 | 0; //@line 24928
       $65 = $61; //@line 24929
       while (1) {
        $64 = $65 + -72 | 0; //@line 24931
        HEAP32[$60 >> 2] = $64; //@line 24932
        __THREW__ = 0; //@line 24933
        HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24934
        invoke_viii(13, $$byval_copy5 | 0, $63 | 0, $64 | 0); //@line 24935
        $66 = __THREW__; //@line 24936
        __THREW__ = 0; //@line 24936
        if ($66 & 1) {
         label = 25; //@line 24939
         break;
        }
        $65 = HEAP32[$60 >> 2] | 0; //@line 24942
        if (($65 | 0) == ($58 | 0)) {
         label = 26; //@line 24945
         break;
        }
       }
       if ((label | 0) == 25) {
        $70 = ___cxa_find_matching_catch_3(0) | 0; //@line 24952
        ___clang_call_terminate($70); //@line 24954
       } else if ((label | 0) == 26) {
        $72 = HEAP32[$57 >> 2] | 0; //@line 24959
        break;
       }
      }
     } while (0);
     __ZdlPv($72); //@line 24964
    }
    $73 = $4 + 4 | 0; //@line 24966
    if ((HEAP8[$73 + 11 >> 0] | 0) >= 0) {
     $$0$i$i$i = $51; //@line 24971
     $$03$i$i$i = $50; //@line 24971
     break;
    }
    __ZdlPv(HEAP32[$73 >> 2] | 0); //@line 24975
    $$0$i$i$i = $51; //@line 24976
    $$03$i$i$i = $50; //@line 24976
    break;
   }
   $12 = $4 + 52 | 0; //@line 24979
   if ((HEAP8[$12 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 24985
   }
   $17 = $4 + 40 | 0; //@line 24987
   $18 = HEAP32[$17 >> 2] | 0; //@line 24988
   if ($18 | 0) {
    $20 = $4 + 44 | 0; //@line 24991
    $21 = HEAP32[$20 >> 2] | 0; //@line 24992
    do {
     if (($21 | 0) == ($18 | 0)) {
      $32 = $18; //@line 24996
     } else {
      $23 = $4 + 48 | 0; //@line 24998
      $25 = $21; //@line 24999
      while (1) {
       $24 = $25 + -72 | 0; //@line 25001
       HEAP32[$20 >> 2] = $24; //@line 25002
       __THREW__ = 0; //@line 25003
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25004
       invoke_viii(13, $$byval_copy5 | 0, $23 | 0, $24 | 0); //@line 25005
       $26 = __THREW__; //@line 25006
       __THREW__ = 0; //@line 25006
       if ($26 & 1) {
        label = 10; //@line 25009
        break;
       }
       $25 = HEAP32[$20 >> 2] | 0; //@line 25012
       if (($25 | 0) == ($18 | 0)) {
        label = 11; //@line 25015
        break;
       }
      }
      if ((label | 0) == 10) {
       $30 = ___cxa_find_matching_catch_3(0) | 0; //@line 25022
       ___clang_call_terminate($30); //@line 25024
      } else if ((label | 0) == 11) {
       $32 = HEAP32[$17 >> 2] | 0; //@line 25029
       break;
      }
     }
    } while (0);
    __ZdlPv($32); //@line 25034
   }
   $33 = $4 + 4 | 0; //@line 25036
   if ((HEAP8[$33 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$33 >> 2] | 0); //@line 25042
   }
   if ($9) {
    HEAP32[$3 + 16 >> 2] = 0; //@line 25046
    $40 = +HEAPF64[$3 + 32 >> 3]; //@line 25048
    $42 = +Math_abs($40) >= 1.0 ? $40 > 0.0 ? ~~+Math_min(+Math_floor($40 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil(($40 - +(~~$40 >>> 0)) / 4294967296.0) >>> 0 : 0; //@line 25050
    $44 = $3 + 24 | 0; //@line 25052
    HEAP32[$44 >> 2] = ~~$40 >>> 0; //@line 25054
    HEAP32[$44 + 4 >> 2] = $42; //@line 25057
   } else {
    __THREW__ = 0; //@line 25059
    invoke_vii(120, $5 | 0, $3 | 0); //@line 25060
    $78 = __THREW__; //@line 25061
    __THREW__ = 0; //@line 25061
    if ($78 & 1) {
     label = 17; //@line 25064
     break;
    }
    __THREW__ = 0; //@line 25067
    $80 = invoke_ii(144, $5 | 0) | 0; //@line 25068
    $81 = __THREW__; //@line 25069
    __THREW__ = 0; //@line 25069
    if ($81 & 1) {
     $109 = ___cxa_find_matching_catch_2() | 0; //@line 25072
     $110 = tempRet0; //@line 25073
     $111 = $5 + 52 | 0; //@line 25074
     if ((HEAP8[$111 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$111 >> 2] | 0); //@line 25080
     }
     $116 = $5 + 40 | 0; //@line 25082
     $117 = HEAP32[$116 >> 2] | 0; //@line 25083
     if ($117 | 0) {
      $119 = $5 + 44 | 0; //@line 25086
      $120 = HEAP32[$119 >> 2] | 0; //@line 25087
      do {
       if (($120 | 0) == ($117 | 0)) {
        $131 = $117; //@line 25091
       } else {
        $122 = $5 + 48 | 0; //@line 25093
        $124 = $120; //@line 25094
        while (1) {
         $123 = $124 + -72 | 0; //@line 25096
         HEAP32[$119 >> 2] = $123; //@line 25097
         __THREW__ = 0; //@line 25098
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25099
         invoke_viii(13, $$byval_copy5 | 0, $122 | 0, $123 | 0); //@line 25100
         $125 = __THREW__; //@line 25101
         __THREW__ = 0; //@line 25101
         if ($125 & 1) {
          label = 52; //@line 25104
          break;
         }
         $124 = HEAP32[$119 >> 2] | 0; //@line 25107
         if (($124 | 0) == ($117 | 0)) {
          label = 53; //@line 25110
          break;
         }
        }
        if ((label | 0) == 52) {
         $129 = ___cxa_find_matching_catch_3(0) | 0; //@line 25117
         ___clang_call_terminate($129); //@line 25119
        } else if ((label | 0) == 53) {
         $131 = HEAP32[$116 >> 2] | 0; //@line 25124
         break;
        }
       }
      } while (0);
      __ZdlPv($131); //@line 25129
     }
     $132 = $5 + 4 | 0; //@line 25131
     if ((HEAP8[$132 + 11 >> 0] | 0) >= 0) {
      $$0$i$i$i = $110; //@line 25136
      $$03$i$i$i = $109; //@line 25136
      break;
     }
     __ZdlPv(HEAP32[$132 >> 2] | 0); //@line 25140
     $$0$i$i$i = $110; //@line 25141
     $$03$i$i$i = $109; //@line 25141
     break;
    }
    $83 = $5 + 52 | 0; //@line 25144
    if ((HEAP8[$83 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$83 >> 2] | 0); //@line 25150
    }
    $88 = $5 + 40 | 0; //@line 25152
    $89 = HEAP32[$88 >> 2] | 0; //@line 25153
    if ($89 | 0) {
     $91 = $5 + 44 | 0; //@line 25156
     $92 = HEAP32[$91 >> 2] | 0; //@line 25157
     do {
      if (($92 | 0) == ($89 | 0)) {
       $103 = $89; //@line 25161
      } else {
       $94 = $5 + 48 | 0; //@line 25163
       $96 = $92; //@line 25164
       while (1) {
        $95 = $96 + -72 | 0; //@line 25166
        HEAP32[$91 >> 2] = $95; //@line 25167
        __THREW__ = 0; //@line 25168
        HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25169
        invoke_viii(13, $$byval_copy5 | 0, $94 | 0, $95 | 0); //@line 25170
        $97 = __THREW__; //@line 25171
        __THREW__ = 0; //@line 25171
        if ($97 & 1) {
         label = 39; //@line 25174
         break;
        }
        $96 = HEAP32[$91 >> 2] | 0; //@line 25177
        if (($96 | 0) == ($89 | 0)) {
         label = 40; //@line 25180
         break;
        }
       }
       if ((label | 0) == 39) {
        $101 = ___cxa_find_matching_catch_3(0) | 0; //@line 25187
        ___clang_call_terminate($101); //@line 25189
       } else if ((label | 0) == 40) {
        $103 = HEAP32[$88 >> 2] | 0; //@line 25194
        break;
       }
      }
     } while (0);
     __ZdlPv($103); //@line 25199
    }
    $104 = $5 + 4 | 0; //@line 25201
    if ((HEAP8[$104 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$104 >> 2] | 0); //@line 25207
    }
    if (!$80) {
     $137 = ___cxa_allocate_exception(8) | 0; //@line 25210
     __THREW__ = 0; //@line 25211
     invoke_vii(125, $137 | 0, 15614); //@line 25212
     $138 = __THREW__; //@line 25213
     __THREW__ = 0; //@line 25213
     if ($138 & 1) {
      $141 = ___cxa_find_matching_catch_2() | 0; //@line 25216
      $142 = tempRet0; //@line 25217
      ___cxa_free_exception($137 | 0); //@line 25218
      $$0$i$i$i = $142; //@line 25219
      $$03$i$i$i = $141; //@line 25219
      break;
     } else {
      __THREW__ = 0; //@line 25222
      invoke_viii(16, $137 | 0, 2824, 242); //@line 25223
      __THREW__ = 0; //@line 25224
      label = 17; //@line 25225
      break;
     }
    }
   }
   $143 = $3 + 52 | 0; //@line 25230
   if ((HEAP8[$143 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$143 >> 2] | 0); //@line 25236
   }
   $148 = $3 + 40 | 0; //@line 25238
   $149 = HEAP32[$148 >> 2] | 0; //@line 25239
   if ($149 | 0) {
    $151 = $3 + 44 | 0; //@line 25242
    $152 = HEAP32[$151 >> 2] | 0; //@line 25243
    do {
     if (($152 | 0) == ($149 | 0)) {
      $163 = $149; //@line 25247
     } else {
      $154 = $3 + 48 | 0; //@line 25249
      $156 = $152; //@line 25250
      while (1) {
       $155 = $156 + -72 | 0; //@line 25252
       HEAP32[$151 >> 2] = $155; //@line 25253
       __THREW__ = 0; //@line 25254
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25255
       invoke_viii(13, $$byval_copy5 | 0, $154 | 0, $155 | 0); //@line 25256
       $157 = __THREW__; //@line 25257
       __THREW__ = 0; //@line 25257
       if ($157 & 1) {
        label = 67; //@line 25260
        break;
       }
       $156 = HEAP32[$151 >> 2] | 0; //@line 25263
       if (($156 | 0) == ($149 | 0)) {
        label = 68; //@line 25266
        break;
       }
      }
      if ((label | 0) == 67) {
       $161 = ___cxa_find_matching_catch_3(0) | 0; //@line 25273
       ___clang_call_terminate($161); //@line 25275
      } else if ((label | 0) == 68) {
       $163 = HEAP32[$148 >> 2] | 0; //@line 25280
       break;
      }
     }
    } while (0);
    __ZdlPv($163); //@line 25285
   }
   $164 = $3 + 4 | 0; //@line 25287
   if ((HEAP8[$164 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 25292
    return;
   }
   __ZdlPv(HEAP32[$164 >> 2] | 0); //@line 25295
   STACKTOP = sp; //@line 25296
   return;
  }
 } while (0);
 if ((label | 0) == 17) {
  $48 = ___cxa_find_matching_catch_2() | 0; //@line 25300
  $$0$i$i$i = tempRet0; //@line 25302
  $$03$i$i$i = $48; //@line 25302
 }
 $169 = $3 + 52 | 0; //@line 25304
 if ((HEAP8[$169 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$169 >> 2] | 0); //@line 25310
 }
 $174 = $3 + 40 | 0; //@line 25312
 $175 = HEAP32[$174 >> 2] | 0; //@line 25313
 if ($175 | 0) {
  $177 = $3 + 44 | 0; //@line 25316
  $178 = HEAP32[$177 >> 2] | 0; //@line 25317
  do {
   if (($178 | 0) == ($175 | 0)) {
    $189 = $175; //@line 25321
   } else {
    $180 = $3 + 48 | 0; //@line 25323
    $182 = $178; //@line 25324
    while (1) {
     $181 = $182 + -72 | 0; //@line 25326
     HEAP32[$177 >> 2] = $181; //@line 25327
     __THREW__ = 0; //@line 25328
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 25329
     invoke_viii(13, $$byval_copy5 | 0, $180 | 0, $181 | 0); //@line 25330
     $183 = __THREW__; //@line 25331
     __THREW__ = 0; //@line 25331
     if ($183 & 1) {
      label = 79; //@line 25334
      break;
     }
     $182 = HEAP32[$177 >> 2] | 0; //@line 25337
     if (($182 | 0) == ($175 | 0)) {
      label = 80; //@line 25340
      break;
     }
    }
    if ((label | 0) == 79) {
     $187 = ___cxa_find_matching_catch_3(0) | 0; //@line 25347
     ___clang_call_terminate($187); //@line 25349
    } else if ((label | 0) == 80) {
     $189 = HEAP32[$174 >> 2] | 0; //@line 25354
     break;
    }
   }
  } while (0);
  __ZdlPv($189); //@line 25359
 }
 $190 = $3 + 4 | 0; //@line 25361
 if ((HEAP8[$190 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$03$i$i$i | 0); //@line 25366
 }
 __ZdlPv(HEAP32[$190 >> 2] | 0); //@line 25370
 ___resumeException($$03$i$i$i | 0); //@line 25371
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$03$i$i$i = 0, $$byval_copy5 = 0, $10 = 0, $100 = 0.0, $103 = 0, $104 = 0, $105 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $123 = 0, $125 = 0, $126 = 0, $131 = 0, $132 = 0, $135 = 0, $136 = 0, $137 = 0, $142 = 0, $143 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $155 = 0, $157 = 0, $158 = 0, $163 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $91 = 0, $93 = 0, $94 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29219
 STACKTOP = STACKTOP + 224 | 0; //@line 29220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 29220
 $$byval_copy5 = sp + 217 | 0; //@line 29221
 $2 = sp + 216 | 0; //@line 29222
 $3 = sp + 144 | 0; //@line 29223
 $4 = sp + 72 | 0; //@line 29224
 $5 = sp; //@line 29225
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv(HEAP32[$1 >> 2] | 0) | 0); //@line 29228
 __THREW__ = 0; //@line 29229
 invoke_vii(120, $4 | 0, $3 | 0); //@line 29230
 $7 = __THREW__; //@line 29231
 __THREW__ = 0; //@line 29231
 L1 : do {
  if ($7 & 1) {
   label = 16; //@line 29235
  } else {
   __THREW__ = 0; //@line 29237
   $9 = invoke_ii(144, $4 | 0) | 0; //@line 29238
   $10 = __THREW__; //@line 29239
   __THREW__ = 0; //@line 29239
   if ($10 & 1) {
    $40 = ___cxa_find_matching_catch_2() | 0; //@line 29242
    $41 = tempRet0; //@line 29243
    $42 = $4 + 52 | 0; //@line 29244
    if ((HEAP8[$42 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$42 >> 2] | 0); //@line 29250
    }
    $47 = $4 + 40 | 0; //@line 29252
    $48 = HEAP32[$47 >> 2] | 0; //@line 29253
    if ($48 | 0) {
     $50 = $4 + 44 | 0; //@line 29256
     $51 = HEAP32[$50 >> 2] | 0; //@line 29257
     do {
      if (($51 | 0) == ($48 | 0)) {
       $62 = $48; //@line 29261
      } else {
       $53 = $4 + 48 | 0; //@line 29263
       $55 = $51; //@line 29264
       while (1) {
        $54 = $55 + -72 | 0; //@line 29266
        HEAP32[$50 >> 2] = $54; //@line 29267
        __THREW__ = 0; //@line 29268
        HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 29269
        invoke_viii(13, $$byval_copy5 | 0, $53 | 0, $54 | 0); //@line 29270
        $56 = __THREW__; //@line 29271
        __THREW__ = 0; //@line 29271
        if ($56 & 1) {
         label = 24; //@line 29274
         break;
        }
        $55 = HEAP32[$50 >> 2] | 0; //@line 29277
        if (($55 | 0) == ($48 | 0)) {
         label = 25; //@line 29280
         break;
        }
       }
       if ((label | 0) == 24) {
        $60 = ___cxa_find_matching_catch_3(0) | 0; //@line 29287
        ___clang_call_terminate($60); //@line 29289
       } else if ((label | 0) == 25) {
        $62 = HEAP32[$47 >> 2] | 0; //@line 29294
        break;
       }
      }
     } while (0);
     __ZdlPv($62); //@line 29299
    }
    $63 = $4 + 4 | 0; //@line 29301
    if ((HEAP8[$63 + 11 >> 0] | 0) >= 0) {
     $$0$i$i$i = $41; //@line 29306
     $$03$i$i$i = $40; //@line 29306
     break;
    }
    __ZdlPv(HEAP32[$63 >> 2] | 0); //@line 29310
    $$0$i$i$i = $41; //@line 29311
    $$03$i$i$i = $40; //@line 29311
    break;
   }
   $12 = $4 + 52 | 0; //@line 29314
   if ((HEAP8[$12 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 29320
   }
   $17 = $4 + 40 | 0; //@line 29322
   $18 = HEAP32[$17 >> 2] | 0; //@line 29323
   if ($18 | 0) {
    $20 = $4 + 44 | 0; //@line 29326
    $21 = HEAP32[$20 >> 2] | 0; //@line 29327
    do {
     if (($21 | 0) == ($18 | 0)) {
      $32 = $18; //@line 29331
     } else {
      $23 = $4 + 48 | 0; //@line 29333
      $25 = $21; //@line 29334
      while (1) {
       $24 = $25 + -72 | 0; //@line 29336
       HEAP32[$20 >> 2] = $24; //@line 29337
       __THREW__ = 0; //@line 29338
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 29339
       invoke_viii(13, $$byval_copy5 | 0, $23 | 0, $24 | 0); //@line 29340
       $26 = __THREW__; //@line 29341
       __THREW__ = 0; //@line 29341
       if ($26 & 1) {
        label = 10; //@line 29344
        break;
       }
       $25 = HEAP32[$20 >> 2] | 0; //@line 29347
       if (($25 | 0) == ($18 | 0)) {
        label = 11; //@line 29350
        break;
       }
      }
      if ((label | 0) == 10) {
       $30 = ___cxa_find_matching_catch_3(0) | 0; //@line 29357
       ___clang_call_terminate($30); //@line 29359
      } else if ((label | 0) == 11) {
       $32 = HEAP32[$17 >> 2] | 0; //@line 29364
       break;
      }
     }
    } while (0);
    __ZdlPv($32); //@line 29369
   }
   $33 = $4 + 4 | 0; //@line 29371
   if ((HEAP8[$33 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$33 >> 2] | 0); //@line 29377
   }
   do {
    if (!$9) {
     __THREW__ = 0; //@line 29381
     invoke_vii(120, $5 | 0, $3 | 0); //@line 29382
     $68 = __THREW__; //@line 29383
     __THREW__ = 0; //@line 29383
     if ($68 & 1) {
      label = 16; //@line 29386
      break L1;
     }
     __THREW__ = 0; //@line 29389
     $70 = invoke_ii(145, $5 | 0) | 0; //@line 29390
     $71 = __THREW__; //@line 29391
     __THREW__ = 0; //@line 29391
     if ($71 & 1) {
      $103 = ___cxa_find_matching_catch_2() | 0; //@line 29394
      $104 = tempRet0; //@line 29395
      $105 = $5 + 52 | 0; //@line 29396
      if ((HEAP8[$105 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$105 >> 2] | 0); //@line 29402
      }
      $110 = $5 + 40 | 0; //@line 29404
      $111 = HEAP32[$110 >> 2] | 0; //@line 29405
      if ($111 | 0) {
       $113 = $5 + 44 | 0; //@line 29408
       $114 = HEAP32[$113 >> 2] | 0; //@line 29409
       do {
        if (($114 | 0) == ($111 | 0)) {
         $125 = $111; //@line 29413
        } else {
         $116 = $5 + 48 | 0; //@line 29415
         $118 = $114; //@line 29416
         while (1) {
          $117 = $118 + -72 | 0; //@line 29418
          HEAP32[$113 >> 2] = $117; //@line 29419
          __THREW__ = 0; //@line 29420
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 29421
          invoke_viii(13, $$byval_copy5 | 0, $116 | 0, $117 | 0); //@line 29422
          $119 = __THREW__; //@line 29423
          __THREW__ = 0; //@line 29423
          if ($119 & 1) {
           label = 53; //@line 29426
           break;
          }
          $118 = HEAP32[$113 >> 2] | 0; //@line 29429
          if (($118 | 0) == ($111 | 0)) {
           label = 54; //@line 29432
           break;
          }
         }
         if ((label | 0) == 53) {
          $123 = ___cxa_find_matching_catch_3(0) | 0; //@line 29439
          ___clang_call_terminate($123); //@line 29441
         } else if ((label | 0) == 54) {
          $125 = HEAP32[$110 >> 2] | 0; //@line 29446
          break;
         }
        }
       } while (0);
       __ZdlPv($125); //@line 29451
      }
      $126 = $5 + 4 | 0; //@line 29453
      if ((HEAP8[$126 + 11 >> 0] | 0) >= 0) {
       $$0$i$i$i = $104; //@line 29458
       $$03$i$i$i = $103; //@line 29458
       break L1;
      }
      __ZdlPv(HEAP32[$126 >> 2] | 0); //@line 29462
      $$0$i$i$i = $104; //@line 29463
      $$03$i$i$i = $103; //@line 29463
      break L1;
     }
     $73 = $5 + 52 | 0; //@line 29466
     if ((HEAP8[$73 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$73 >> 2] | 0); //@line 29472
     }
     $78 = $5 + 40 | 0; //@line 29474
     $79 = HEAP32[$78 >> 2] | 0; //@line 29475
     if ($79 | 0) {
      $81 = $5 + 44 | 0; //@line 29478
      $82 = HEAP32[$81 >> 2] | 0; //@line 29479
      do {
       if (($82 | 0) == ($79 | 0)) {
        $93 = $79; //@line 29483
       } else {
        $84 = $5 + 48 | 0; //@line 29485
        $86 = $82; //@line 29486
        while (1) {
         $85 = $86 + -72 | 0; //@line 29488
         HEAP32[$81 >> 2] = $85; //@line 29489
         __THREW__ = 0; //@line 29490
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 29491
         invoke_viii(13, $$byval_copy5 | 0, $84 | 0, $85 | 0); //@line 29492
         $87 = __THREW__; //@line 29493
         __THREW__ = 0; //@line 29493
         if ($87 & 1) {
          label = 38; //@line 29496
          break;
         }
         $86 = HEAP32[$81 >> 2] | 0; //@line 29499
         if (($86 | 0) == ($79 | 0)) {
          label = 39; //@line 29502
          break;
         }
        }
        if ((label | 0) == 38) {
         $91 = ___cxa_find_matching_catch_3(0) | 0; //@line 29509
         ___clang_call_terminate($91); //@line 29511
        } else if ((label | 0) == 39) {
         $93 = HEAP32[$78 >> 2] | 0; //@line 29516
         break;
        }
       }
      } while (0);
      __ZdlPv($93); //@line 29521
     }
     $94 = $5 + 4 | 0; //@line 29523
     if ((HEAP8[$94 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$94 >> 2] | 0); //@line 29529
     }
     if ($70) {
      $99 = $3 + 32 | 0; //@line 29532
      $100 = +HEAPF64[$99 >> 3]; //@line 29533
      if (!($100 < 0.0)) {
       break;
      }
      HEAPF64[$99 >> 3] = -$100; //@line 29539
      break;
     }
     $131 = ___cxa_allocate_exception(8) | 0; //@line 29542
     __THREW__ = 0; //@line 29543
     invoke_vii(125, $131 | 0, 16360); //@line 29544
     $132 = __THREW__; //@line 29545
     __THREW__ = 0; //@line 29545
     if ($132 & 1) {
      $135 = ___cxa_find_matching_catch_2() | 0; //@line 29548
      $136 = tempRet0; //@line 29549
      ___cxa_free_exception($131 | 0); //@line 29550
      $$0$i$i$i = $136; //@line 29551
      $$03$i$i$i = $135; //@line 29551
      break L1;
     } else {
      __THREW__ = 0; //@line 29554
      invoke_viii(16, $131 | 0, 2824, 242); //@line 29555
      __THREW__ = 0; //@line 29556
      label = 16; //@line 29557
      break L1;
     }
    }
   } while (0);
   $137 = $3 + 52 | 0; //@line 29562
   if ((HEAP8[$137 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$137 >> 2] | 0); //@line 29568
   }
   $142 = $3 + 40 | 0; //@line 29570
   $143 = HEAP32[$142 >> 2] | 0; //@line 29571
   if ($143 | 0) {
    $145 = $3 + 44 | 0; //@line 29574
    $146 = HEAP32[$145 >> 2] | 0; //@line 29575
    do {
     if (($146 | 0) == ($143 | 0)) {
      $157 = $143; //@line 29579
     } else {
      $148 = $3 + 48 | 0; //@line 29581
      $150 = $146; //@line 29582
      while (1) {
       $149 = $150 + -72 | 0; //@line 29584
       HEAP32[$145 >> 2] = $149; //@line 29585
       __THREW__ = 0; //@line 29586
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 29587
       invoke_viii(13, $$byval_copy5 | 0, $148 | 0, $149 | 0); //@line 29588
       $151 = __THREW__; //@line 29589
       __THREW__ = 0; //@line 29589
       if ($151 & 1) {
        label = 68; //@line 29592
        break;
       }
       $150 = HEAP32[$145 >> 2] | 0; //@line 29595
       if (($150 | 0) == ($143 | 0)) {
        label = 69; //@line 29598
        break;
       }
      }
      if ((label | 0) == 68) {
       $155 = ___cxa_find_matching_catch_3(0) | 0; //@line 29605
       ___clang_call_terminate($155); //@line 29607
      } else if ((label | 0) == 69) {
       $157 = HEAP32[$142 >> 2] | 0; //@line 29612
       break;
      }
     }
    } while (0);
    __ZdlPv($157); //@line 29617
   }
   $158 = $3 + 4 | 0; //@line 29619
   if ((HEAP8[$158 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 29624
    return;
   }
   __ZdlPv(HEAP32[$158 >> 2] | 0); //@line 29627
   STACKTOP = sp; //@line 29628
   return;
  }
 } while (0);
 if ((label | 0) == 16) {
  $38 = ___cxa_find_matching_catch_2() | 0; //@line 29632
  $$0$i$i$i = tempRet0; //@line 29634
  $$03$i$i$i = $38; //@line 29634
 }
 $163 = $3 + 52 | 0; //@line 29636
 if ((HEAP8[$163 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$163 >> 2] | 0); //@line 29642
 }
 $168 = $3 + 40 | 0; //@line 29644
 $169 = HEAP32[$168 >> 2] | 0; //@line 29645
 if ($169 | 0) {
  $171 = $3 + 44 | 0; //@line 29648
  $172 = HEAP32[$171 >> 2] | 0; //@line 29649
  do {
   if (($172 | 0) == ($169 | 0)) {
    $183 = $169; //@line 29653
   } else {
    $174 = $3 + 48 | 0; //@line 29655
    $176 = $172; //@line 29656
    while (1) {
     $175 = $176 + -72 | 0; //@line 29658
     HEAP32[$171 >> 2] = $175; //@line 29659
     __THREW__ = 0; //@line 29660
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 29661
     invoke_viii(13, $$byval_copy5 | 0, $174 | 0, $175 | 0); //@line 29662
     $177 = __THREW__; //@line 29663
     __THREW__ = 0; //@line 29663
     if ($177 & 1) {
      label = 80; //@line 29666
      break;
     }
     $176 = HEAP32[$171 >> 2] | 0; //@line 29669
     if (($176 | 0) == ($169 | 0)) {
      label = 81; //@line 29672
      break;
     }
    }
    if ((label | 0) == 80) {
     $181 = ___cxa_find_matching_catch_3(0) | 0; //@line 29679
     ___clang_call_terminate($181); //@line 29681
    } else if ((label | 0) == 81) {
     $183 = HEAP32[$168 >> 2] | 0; //@line 29686
     break;
    }
   }
  } while (0);
  __ZdlPv($183); //@line 29691
 }
 $184 = $3 + 4 | 0; //@line 29693
 if ((HEAP8[$184 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$03$i$i$i | 0); //@line 29698
 }
 __ZdlPv(HEAP32[$184 >> 2] | 0); //@line 29702
 ___resumeException($$03$i$i$i | 0); //@line 29703
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$05$i$i$i = 0, $$byval_copy5 = 0, $$val = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $131 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $149 = 0, $151 = 0, $152 = 0, $157 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $175 = 0, $177 = 0, $178 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $73 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $91 = 0, $93 = 0, $94 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16407
 STACKTOP = STACKTOP + 224 | 0; //@line 16408
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 16408
 $$byval_copy5 = sp + 217 | 0; //@line 16409
 $2 = sp + 216 | 0; //@line 16410
 $3 = sp + 144 | 0; //@line 16411
 $4 = sp + 72 | 0; //@line 16412
 $5 = sp; //@line 16413
 $$val = HEAP32[$1 >> 2] | 0; //@line 16414
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 16416
 __THREW__ = 0; //@line 16417
 $7 = invoke_ii(143, $$val | 0) | 0; //@line 16418
 $8 = __THREW__; //@line 16419
 __THREW__ = 0; //@line 16419
 do {
  if ($8 & 1) {
   label = 43; //@line 16423
  } else {
   __THREW__ = 0; //@line 16425
   invoke_vii(120, $4 | 0, $3 | 0); //@line 16426
   $10 = __THREW__; //@line 16427
   __THREW__ = 0; //@line 16427
   if ($10 & 1) {
    label = 43; //@line 16430
   } else {
    __THREW__ = 0; //@line 16432
    invoke_vii(128, $7 | 0, $4 | 0); //@line 16433
    $12 = __THREW__; //@line 16434
    __THREW__ = 0; //@line 16434
    if ($12 & 1) {
     $101 = ___cxa_find_matching_catch_2() | 0; //@line 16437
     $102 = tempRet0; //@line 16438
     $103 = $4 + 52 | 0; //@line 16439
     if ((HEAP8[$103 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$103 >> 2] | 0); //@line 16445
     }
     $108 = $4 + 40 | 0; //@line 16447
     $109 = HEAP32[$108 >> 2] | 0; //@line 16448
     if ($109 | 0) {
      $111 = $4 + 44 | 0; //@line 16451
      $112 = HEAP32[$111 >> 2] | 0; //@line 16452
      do {
       if (($112 | 0) == ($109 | 0)) {
        $123 = $109; //@line 16456
       } else {
        $114 = $4 + 48 | 0; //@line 16458
        $116 = $112; //@line 16459
        while (1) {
         $115 = $116 + -72 | 0; //@line 16461
         HEAP32[$111 >> 2] = $115; //@line 16462
         __THREW__ = 0; //@line 16463
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16464
         invoke_viii(13, $$byval_copy5 | 0, $114 | 0, $115 | 0); //@line 16465
         $117 = __THREW__; //@line 16466
         __THREW__ = 0; //@line 16466
         if ($117 & 1) {
          label = 51; //@line 16469
          break;
         }
         $116 = HEAP32[$111 >> 2] | 0; //@line 16472
         if (($116 | 0) == ($109 | 0)) {
          label = 52; //@line 16475
          break;
         }
        }
        if ((label | 0) == 51) {
         $121 = ___cxa_find_matching_catch_3(0) | 0; //@line 16482
         ___clang_call_terminate($121); //@line 16484
        } else if ((label | 0) == 52) {
         $123 = HEAP32[$108 >> 2] | 0; //@line 16489
         break;
        }
       }
      } while (0);
      __ZdlPv($123); //@line 16494
     }
     $124 = $4 + 4 | 0; //@line 16496
     if ((HEAP8[$124 + 11 >> 0] | 0) >= 0) {
      $$0$i$i$i = $102; //@line 16501
      $$05$i$i$i = $101; //@line 16501
      break;
     }
     __ZdlPv(HEAP32[$124 >> 2] | 0); //@line 16505
     $$0$i$i$i = $102; //@line 16506
     $$05$i$i$i = $101; //@line 16506
     break;
    }
    $14 = $4 + 52 | 0; //@line 16509
    if ((HEAP8[$14 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$14 >> 2] | 0); //@line 16515
    }
    $19 = $4 + 40 | 0; //@line 16517
    $20 = HEAP32[$19 >> 2] | 0; //@line 16518
    if ($20 | 0) {
     $22 = $4 + 44 | 0; //@line 16521
     $23 = HEAP32[$22 >> 2] | 0; //@line 16522
     do {
      if (($23 | 0) == ($20 | 0)) {
       $34 = $20; //@line 16526
      } else {
       $25 = $4 + 48 | 0; //@line 16528
       $27 = $23; //@line 16529
       while (1) {
        $26 = $27 + -72 | 0; //@line 16531
        HEAP32[$22 >> 2] = $26; //@line 16532
        __THREW__ = 0; //@line 16533
        HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16534
        invoke_viii(13, $$byval_copy5 | 0, $25 | 0, $26 | 0); //@line 16535
        $28 = __THREW__; //@line 16536
        __THREW__ = 0; //@line 16536
        if ($28 & 1) {
         label = 11; //@line 16539
         break;
        }
        $27 = HEAP32[$22 >> 2] | 0; //@line 16542
        if (($27 | 0) == ($20 | 0)) {
         label = 12; //@line 16545
         break;
        }
       }
       if ((label | 0) == 11) {
        $32 = ___cxa_find_matching_catch_3(0) | 0; //@line 16552
        ___clang_call_terminate($32); //@line 16554
       } else if ((label | 0) == 12) {
        $34 = HEAP32[$19 >> 2] | 0; //@line 16559
        break;
       }
      }
     } while (0);
     __ZdlPv($34); //@line 16564
    }
    $35 = $4 + 4 | 0; //@line 16566
    if ((HEAP8[$35 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$35 >> 2] | 0); //@line 16572
    }
    __THREW__ = 0; //@line 16574
    $40 = invoke_ii(143, $$val | 0) | 0; //@line 16575
    $41 = __THREW__; //@line 16576
    __THREW__ = 0; //@line 16576
    if ($41 & 1) {
     label = 43; //@line 16579
    } else {
     __THREW__ = 0; //@line 16581
     invoke_vii(120, $5 | 0, $3 | 0); //@line 16582
     $43 = __THREW__; //@line 16583
     __THREW__ = 0; //@line 16583
     if ($43 & 1) {
      label = 43; //@line 16586
     } else {
      __THREW__ = 0; //@line 16588
      invoke_vii(128, $40 | 0, $5 | 0); //@line 16589
      $45 = __THREW__; //@line 16590
      __THREW__ = 0; //@line 16590
      if ($45 & 1) {
       $129 = ___cxa_find_matching_catch_2() | 0; //@line 16593
       $130 = tempRet0; //@line 16594
       $131 = $5 + 52 | 0; //@line 16595
       if ((HEAP8[$131 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$131 >> 2] | 0); //@line 16601
       }
       $136 = $5 + 40 | 0; //@line 16603
       $137 = HEAP32[$136 >> 2] | 0; //@line 16604
       if ($137 | 0) {
        $139 = $5 + 44 | 0; //@line 16607
        $140 = HEAP32[$139 >> 2] | 0; //@line 16608
        do {
         if (($140 | 0) == ($137 | 0)) {
          $151 = $137; //@line 16612
         } else {
          $142 = $5 + 48 | 0; //@line 16614
          $144 = $140; //@line 16615
          while (1) {
           $143 = $144 + -72 | 0; //@line 16617
           HEAP32[$139 >> 2] = $143; //@line 16618
           __THREW__ = 0; //@line 16619
           HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16620
           invoke_viii(13, $$byval_copy5 | 0, $142 | 0, $143 | 0); //@line 16621
           $145 = __THREW__; //@line 16622
           __THREW__ = 0; //@line 16622
           if ($145 & 1) {
            label = 63; //@line 16625
            break;
           }
           $144 = HEAP32[$139 >> 2] | 0; //@line 16628
           if (($144 | 0) == ($137 | 0)) {
            label = 64; //@line 16631
            break;
           }
          }
          if ((label | 0) == 63) {
           $149 = ___cxa_find_matching_catch_3(0) | 0; //@line 16638
           ___clang_call_terminate($149); //@line 16640
          } else if ((label | 0) == 64) {
           $151 = HEAP32[$136 >> 2] | 0; //@line 16645
           break;
          }
         }
        } while (0);
        __ZdlPv($151); //@line 16650
       }
       $152 = $5 + 4 | 0; //@line 16652
       if ((HEAP8[$152 + 11 >> 0] | 0) >= 0) {
        $$0$i$i$i = $130; //@line 16657
        $$05$i$i$i = $129; //@line 16657
        break;
       }
       __ZdlPv(HEAP32[$152 >> 2] | 0); //@line 16661
       $$0$i$i$i = $130; //@line 16662
       $$05$i$i$i = $129; //@line 16662
       break;
      }
      $47 = $5 + 52 | 0; //@line 16665
      if ((HEAP8[$47 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$47 >> 2] | 0); //@line 16671
      }
      $52 = $5 + 40 | 0; //@line 16673
      $53 = HEAP32[$52 >> 2] | 0; //@line 16674
      if ($53 | 0) {
       $55 = $5 + 44 | 0; //@line 16677
       $56 = HEAP32[$55 >> 2] | 0; //@line 16678
       do {
        if (($56 | 0) == ($53 | 0)) {
         $67 = $53; //@line 16682
        } else {
         $58 = $5 + 48 | 0; //@line 16684
         $60 = $56; //@line 16685
         while (1) {
          $59 = $60 + -72 | 0; //@line 16687
          HEAP32[$55 >> 2] = $59; //@line 16688
          __THREW__ = 0; //@line 16689
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16690
          invoke_viii(13, $$byval_copy5 | 0, $58 | 0, $59 | 0); //@line 16691
          $61 = __THREW__; //@line 16692
          __THREW__ = 0; //@line 16692
          if ($61 & 1) {
           label = 26; //@line 16695
           break;
          }
          $60 = HEAP32[$55 >> 2] | 0; //@line 16698
          if (($60 | 0) == ($53 | 0)) {
           label = 27; //@line 16701
           break;
          }
         }
         if ((label | 0) == 26) {
          $65 = ___cxa_find_matching_catch_3(0) | 0; //@line 16708
          ___clang_call_terminate($65); //@line 16710
         } else if ((label | 0) == 27) {
          $67 = HEAP32[$52 >> 2] | 0; //@line 16715
          break;
         }
        }
       } while (0);
       __ZdlPv($67); //@line 16720
      }
      $68 = $5 + 4 | 0; //@line 16722
      if ((HEAP8[$68 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$68 >> 2] | 0); //@line 16728
      }
      $73 = $3 + 52 | 0; //@line 16730
      if ((HEAP8[$73 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$73 >> 2] | 0); //@line 16736
      }
      $78 = $3 + 40 | 0; //@line 16738
      $79 = HEAP32[$78 >> 2] | 0; //@line 16739
      if ($79 | 0) {
       $81 = $3 + 44 | 0; //@line 16742
       $82 = HEAP32[$81 >> 2] | 0; //@line 16743
       do {
        if (($82 | 0) == ($79 | 0)) {
         $93 = $79; //@line 16747
        } else {
         $84 = $3 + 48 | 0; //@line 16749
         $86 = $82; //@line 16750
         while (1) {
          $85 = $86 + -72 | 0; //@line 16752
          HEAP32[$81 >> 2] = $85; //@line 16753
          __THREW__ = 0; //@line 16754
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16755
          invoke_viii(13, $$byval_copy5 | 0, $84 | 0, $85 | 0); //@line 16756
          $87 = __THREW__; //@line 16757
          __THREW__ = 0; //@line 16757
          if ($87 & 1) {
           label = 38; //@line 16760
           break;
          }
          $86 = HEAP32[$81 >> 2] | 0; //@line 16763
          if (($86 | 0) == ($79 | 0)) {
           label = 39; //@line 16766
           break;
          }
         }
         if ((label | 0) == 38) {
          $91 = ___cxa_find_matching_catch_3(0) | 0; //@line 16773
          ___clang_call_terminate($91); //@line 16775
         } else if ((label | 0) == 39) {
          $93 = HEAP32[$78 >> 2] | 0; //@line 16780
          break;
         }
        }
       } while (0);
       __ZdlPv($93); //@line 16785
      }
      $94 = $3 + 4 | 0; //@line 16787
      if ((HEAP8[$94 + 11 >> 0] | 0) >= 0) {
       STACKTOP = sp; //@line 16792
       return;
      }
      __ZdlPv(HEAP32[$94 >> 2] | 0); //@line 16795
      STACKTOP = sp; //@line 16796
      return;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 43) {
  $99 = ___cxa_find_matching_catch_2() | 0; //@line 16803
  $$0$i$i$i = tempRet0; //@line 16805
  $$05$i$i$i = $99; //@line 16805
 }
 $157 = $3 + 52 | 0; //@line 16807
 if ((HEAP8[$157 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$157 >> 2] | 0); //@line 16813
 }
 $162 = $3 + 40 | 0; //@line 16815
 $163 = HEAP32[$162 >> 2] | 0; //@line 16816
 if ($163 | 0) {
  $165 = $3 + 44 | 0; //@line 16819
  $166 = HEAP32[$165 >> 2] | 0; //@line 16820
  do {
   if (($166 | 0) == ($163 | 0)) {
    $177 = $163; //@line 16824
   } else {
    $168 = $3 + 48 | 0; //@line 16826
    $170 = $166; //@line 16827
    while (1) {
     $169 = $170 + -72 | 0; //@line 16829
     HEAP32[$165 >> 2] = $169; //@line 16830
     __THREW__ = 0; //@line 16831
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 16832
     invoke_viii(13, $$byval_copy5 | 0, $168 | 0, $169 | 0); //@line 16833
     $171 = __THREW__; //@line 16834
     __THREW__ = 0; //@line 16834
     if ($171 & 1) {
      label = 75; //@line 16837
      break;
     }
     $170 = HEAP32[$165 >> 2] | 0; //@line 16840
     if (($170 | 0) == ($163 | 0)) {
      label = 76; //@line 16843
      break;
     }
    }
    if ((label | 0) == 75) {
     $175 = ___cxa_find_matching_catch_3(0) | 0; //@line 16850
     ___clang_call_terminate($175); //@line 16852
    } else if ((label | 0) == 76) {
     $177 = HEAP32[$162 >> 2] | 0; //@line 16857
     break;
    }
   }
  } while (0);
  __ZdlPv($177); //@line 16862
 }
 $178 = $3 + 4 | 0; //@line 16864
 if ((HEAP8[$178 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$05$i$i$i | 0); //@line 16869
 }
 __ZdlPv(HEAP32[$178 >> 2] | 0); //@line 16873
 ___resumeException($$05$i$i$i | 0); //@line 16874
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i56 = 0, $$0$i$i$i$i71 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i62 = 0, $$0$i$i2$i$i77 = 0, $$0$i$i68 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$052 = 0, $$053 = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i58 = 0, $$pre$i$i$i73 = 0, $$pre$i4$i$i64 = 0, $$pre$i4$i$i6495 = 0, $$pre$i4$i$i6496 = 0, $$sroa$050$0$copyload = 0, $10 = 0, $109 = 0, $11 = 0, $112 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $146 = 0, $15 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $17 = 0, $170 = 0, $177 = 0, $188 = 0, $19 = 0, $200 = 0, $203 = 0, $21 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $33 = 0, $35 = 0, $37 = 0, $49 = 0, $57 = 0, $63 = 0, $64 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $88 = 0, $9 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 39351
 STACKTOP = STACKTOP + 16 | 0; //@line 39352
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39352
 $$byval_copy1 = sp + 12 | 0; //@line 39353
 $$byval_copy = sp + 8 | 0; //@line 39354
 $8 = sp + 4 | 0; //@line 39355
 $9 = sp; //@line 39356
 __ZNKSt3__28ios_base6getlocEv($$byval_copy1, $3); //@line 39357
 __THREW__ = 0; //@line 39358
 $10 = invoke_iii(63, $$byval_copy1 | 0, 35512) | 0; //@line 39359
 $11 = __THREW__; //@line 39360
 __THREW__ = 0; //@line 39360
 if ($11 & 1) {
  $49 = ___cxa_find_matching_catch_2() | 0; //@line 39363
  __ZNSt3__26localeD2Ev($$byval_copy1); //@line 39365
  ___resumeException($49 | 0); //@line 39366
 }
 __ZNSt3__26localeD2Ev($$byval_copy1); //@line 39369
 HEAP32[$4 >> 2] = 0; //@line 39370
 $13 = $10 + 8 | 0; //@line 39371
 $$0$ph = $6; //@line 39372
 $$pre = 0; //@line 39372
 L4 : while (1) {
  $14 = ($$0$ph | 0) != ($7 | 0); //@line 39374
  $15 = $$pre; //@line 39375
  while (1) {
   $17 = HEAP32[$1 >> 2] | 0; //@line 39379
   if (!($14 & ($15 | 0) == 0)) {
    $$pre$i$i$i73 = $17; //@line 39381
    break L4;
   }
   $19 = $17; //@line 39385
   if (!$17) {
    $155 = 0; //@line 39387
    $217 = 1; //@line 39387
    $74 = $19; //@line 39387
   } else {
    $21 = HEAP32[$17 + 12 >> 2] | 0; //@line 39390
    if (($21 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 255]($17) | 0; //@line 39399
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$21 >> 0] | 0) | 0; //@line 39403
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 39408
     $155 = 0; //@line 39409
     $217 = 1; //@line 39409
     $74 = 0; //@line 39409
    } else {
     $155 = $17; //@line 39411
     $217 = 0; //@line 39411
     $74 = $19; //@line 39411
    }
   }
   $33 = HEAP32[$2 >> 2] | 0; //@line 39414
   $35 = $33; //@line 39416
   do {
    if (!$33) {
     $$ph = $35; //@line 39419
     label = 17; //@line 39420
    } else {
     $37 = HEAP32[$33 + 12 >> 2] | 0; //@line 39423
     if (($37 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
      $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 255]($33) | 0; //@line 39432
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0; //@line 39436
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 39441
      $$ph = 0; //@line 39442
      label = 17; //@line 39443
      break;
     } else {
      if ($217) {
       $218 = $33; //@line 39447
       $75 = $35; //@line 39447
       break;
      } else {
       label = 64; //@line 39450
       break L4;
      }
     }
    }
   } while (0);
   if ((label | 0) == 17) {
    label = 0; //@line 39457
    if ($217) {
     label = 64; //@line 39459
     break L4;
    } else {
     $218 = 0; //@line 39462
     $75 = $$ph; //@line 39462
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10, HEAP8[$$0$ph >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    label = 21; //@line 39472
    break;
   }
   $79 = HEAP8[$$0$ph >> 0] | 0; //@line 39475
   if ($79 << 24 >> 24 > -1) {
    $82 = HEAP32[$13 >> 2] | 0; //@line 39479
    if (HEAP16[$82 + ($79 << 24 >> 24 << 1) >> 1] & 8192) {
     $$0$pn = $$0$ph; //@line 39485
     label = 28; //@line 39486
     break;
    }
   }
   $154 = $155 + 12 | 0; //@line 39490
   $156 = HEAP32[$154 >> 2] | 0; //@line 39491
   $157 = $155 + 16 | 0; //@line 39492
   if (($156 | 0) == (HEAP32[$157 >> 2] | 0)) {
    $$0$i$i68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$155 >> 2] | 0) + 36 >> 2] & 255]($155) | 0; //@line 39500
   } else {
    $$0$i$i68 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$156 >> 0] | 0) | 0; //@line 39504
   }
   $170 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 127]($10, $$0$i$i68 & 255) | 0; //@line 39510
   if ($170 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 127]($10, HEAP8[$$0$ph >> 0] | 0) | 0) << 24 >> 24) {
    label = 58; //@line 39518
    break;
   }
   HEAP32[$4 >> 2] = 4; //@line 39521
   $15 = 4; //@line 39522
  }
  L38 : do {
   if ((label | 0) == 21) {
    label = 0; //@line 39526
    $57 = $$0$ph + 1 | 0; //@line 39527
    if (($57 | 0) == ($7 | 0)) {
     label = 64; //@line 39530
     break L4;
    }
    $63 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10, HEAP8[$57 >> 0] | 0, 0) | 0; //@line 39537
    switch ($63 << 24 >> 24) {
    case 48:
    case 69:
     {
      $64 = $$0$ph + 2 | 0; //@line 39540
      if (($64 | 0) == ($7 | 0)) {
       label = 64; //@line 39543
       break L4;
      }
      $$052 = $63; //@line 39551
      $$053 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10, HEAP8[$64 >> 0] | 0, 0) | 0; //@line 39551
      $78 = $57; //@line 39551
      break;
     }
    default:
     {
      $$052 = 0; //@line 39555
      $$053 = $63; //@line 39555
      $78 = $$0$ph; //@line 39555
     }
    }
    $73 = HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] | 0; //@line 39560
    HEAP32[$8 >> 2] = $74; //@line 39561
    HEAP32[$9 >> 2] = $75; //@line 39562
    HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 39563
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$9 >> 2]; //@line 39564
    HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiiiii[$73 & 15]($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $$053, $$052) | 0; //@line 39566
    $$0$ph$be = $78 + 2 | 0; //@line 39568
   } else if ((label | 0) == 28) {
    while (1) {
     label = 0; //@line 39572
     $$3 = $$0$pn + 1 | 0; //@line 39573
     if (($$3 | 0) == ($7 | 0)) {
      $$3$lcssa = $7; //@line 39576
      break;
     }
     $88 = HEAP8[$$3 >> 0] | 0; //@line 39579
     if ($88 << 24 >> 24 <= -1) {
      $$3$lcssa = $$3; //@line 39582
      break;
     }
     if (!(HEAP16[$82 + ($88 << 24 >> 24 << 1) >> 1] & 8192)) {
      $$3$lcssa = $$3; //@line 39591
      break;
     } else {
      $$0$pn = $$3; //@line 39594
      label = 28; //@line 39595
     }
    }
    $$pre$i$i$i58 = $155; //@line 39598
    $$pre$i4$i$i64 = $218; //@line 39598
    $109 = $218; //@line 39598
    while (1) {
     if (!$$pre$i$i$i58) {
      $125 = 1; //@line 39602
      $127 = 0; //@line 39602
     } else {
      $97 = HEAP32[$$pre$i$i$i58 + 12 >> 2] | 0; //@line 39605
      if (($97 | 0) == (HEAP32[$$pre$i$i$i58 + 16 >> 2] | 0)) {
       $$0$i$i$i$i56 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i58 >> 2] | 0) + 36 >> 2] & 255]($$pre$i$i$i58) | 0; //@line 39614
      } else {
       $$0$i$i$i$i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$97 >> 0] | 0) | 0; //@line 39618
      }
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i56, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 39623
       $125 = 1; //@line 39624
       $127 = 0; //@line 39624
      } else {
       $125 = 0; //@line 39626
       $127 = $$pre$i$i$i58; //@line 39626
      }
     }
     do {
      if (!$109) {
       $$pre$i4$i$i6496 = $$pre$i4$i$i64; //@line 39632
       label = 44; //@line 39633
      } else {
       $112 = HEAP32[$109 + 12 >> 2] | 0; //@line 39636
       if (($112 | 0) == (HEAP32[$109 + 16 >> 2] | 0)) {
        $$0$i$i2$i$i62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$109 >> 2] | 0) + 36 >> 2] & 255]($109) | 0; //@line 39645
       } else {
        $$0$i$i2$i$i62 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$112 >> 0] | 0) | 0; //@line 39649
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i62, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$2 >> 2] = 0; //@line 39654
        $$pre$i4$i$i6496 = 0; //@line 39655
        label = 44; //@line 39656
        break;
       } else {
        if ($125 ^ ($$pre$i4$i$i64 | 0) == 0) {
         $$pre$i4$i$i6495 = $$pre$i4$i$i64; //@line 39662
         $219 = $$pre$i4$i$i64; //@line 39662
         break;
        } else {
         $$0$ph$be = $$3$lcssa; //@line 39665
         break L38;
        }
       }
      }
     } while (0);
     if ((label | 0) == 44) {
      label = 0; //@line 39672
      if ($125) {
       $$0$ph$be = $$3$lcssa; //@line 39674
       break L38;
      } else {
       $$pre$i4$i$i6495 = $$pre$i4$i$i6496; //@line 39677
       $219 = 0; //@line 39677
      }
     }
     $126 = $127 + 12 | 0; //@line 39680
     $128 = HEAP32[$126 >> 2] | 0; //@line 39681
     $129 = $127 + 16 | 0; //@line 39682
     if (($128 | 0) == (HEAP32[$129 >> 2] | 0)) {
      $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$127 >> 2] | 0) + 36 >> 2] & 255]($127) | 0; //@line 39690
     } else {
      $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$128 >> 0] | 0) | 0; //@line 39694
     }
     if (($$0$i$i & 255) << 24 >> 24 <= -1) {
      $$0$ph$be = $$3$lcssa; //@line 39699
      break L38;
     }
     if (!(HEAP16[(HEAP32[$13 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
      $$0$ph$be = $$3$lcssa; //@line 39710
      break L38;
     }
     $146 = HEAP32[$126 >> 2] | 0; //@line 39713
     if (($146 | 0) == (HEAP32[$129 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$127 >> 2] | 0) + 40 >> 2] & 255]($127) | 0; //@line 39720
      $$pre$i$i$i58 = $127; //@line 39721
      $$pre$i4$i$i64 = $$pre$i4$i$i6495; //@line 39721
      $109 = $219; //@line 39721
      continue;
     } else {
      HEAP32[$126 >> 2] = $146 + 1; //@line 39725
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$146 >> 0] | 0) | 0; //@line 39727
      $$pre$i$i$i58 = $127; //@line 39728
      $$pre$i4$i$i64 = $$pre$i4$i$i6495; //@line 39728
      $109 = $219; //@line 39728
      continue;
     }
    }
   } else if ((label | 0) == 58) {
    label = 0; //@line 39734
    $177 = HEAP32[$154 >> 2] | 0; //@line 39735
    if (($177 | 0) == (HEAP32[$157 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$155 >> 2] | 0) + 40 >> 2] & 255]($155) | 0; //@line 39742
    } else {
     HEAP32[$154 >> 2] = $177 + 1; //@line 39745
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$177 >> 0] | 0) | 0; //@line 39747
    }
    $$0$ph$be = $$0$ph + 1 | 0; //@line 39750
   }
  } while (0);
  $$0$ph = $$0$ph$be; //@line 39754
  $$pre = HEAP32[$4 >> 2] | 0; //@line 39754
 }
 if ((label | 0) == 64) {
  HEAP32[$4 >> 2] = 4; //@line 39757
  $$pre$i$i$i73 = $155; //@line 39758
 }
 if (!$$pre$i$i$i73) {
  $$sroa$050$0$copyload = 0; //@line 39762
  $220 = 1; //@line 39762
 } else {
  $188 = HEAP32[$$pre$i$i$i73 + 12 >> 2] | 0; //@line 39765
  if (($188 | 0) == (HEAP32[$$pre$i$i$i73 + 16 >> 2] | 0)) {
   $$0$i$i$i$i71 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i73 >> 2] | 0) + 36 >> 2] & 255]($$pre$i$i$i73) | 0; //@line 39774
  } else {
   $$0$i$i$i$i71 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$188 >> 0] | 0) | 0; //@line 39778
  }
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i71, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0; //@line 39783
   $$sroa$050$0$copyload = 0; //@line 39784
   $220 = 1; //@line 39784
  } else {
   $$sroa$050$0$copyload = $$pre$i$i$i73; //@line 39786
   $220 = 0; //@line 39786
  }
 }
 $200 = HEAP32[$2 >> 2] | 0; //@line 39789
 do {
  if (!$200) {
   label = 77; //@line 39793
  } else {
   $203 = HEAP32[$200 + 12 >> 2] | 0; //@line 39796
   if (($203 | 0) == (HEAP32[$200 + 16 >> 2] | 0)) {
    $$0$i$i2$i$i77 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$200 >> 2] | 0) + 36 >> 2] & 255]($200) | 0; //@line 39805
   } else {
    $$0$i$i2$i$i77 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$203 >> 0] | 0) | 0; //@line 39809
   }
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i77, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0; //@line 39814
    label = 77; //@line 39815
    break;
   } else {
    if ($220) {
     break;
    } else {
     label = 79; //@line 39821
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 77) {
  if ($220) {
   label = 79; //@line 39829
  }
 }
 if ((label | 0) == 79) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 39835
 }
 STACKTOP = sp; //@line 39837
 return $$sroa$050$0$copyload | 0; //@line 39837
}
function __ZN6Parser11tokenToTypeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i19 = 0, $$03$i = 0, $$0425 = 0, $$0624 = 0, $$08 = 0, $$15 = 0, $$17 = 0, $107 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $122 = 0, $123 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $137 = 0, $138 = 0, $140 = 0, $141 = 0, $142 = 0, $144 = 0, $146 = 0, $147 = 0, $149 = 0, $15 = 0, $152 = 0, $154 = 0, $156 = 0, $157 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $60 = 0, $61 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $97 = 0, $98 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27027
 STACKTOP = STACKTOP + 160 | 0; //@line 27028
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 27028
 $2 = sp + 144 | 0; //@line 27029
 $3 = sp; //@line 27030
 $4 = $1 + 11 | 0; //@line 27031
 $5 = HEAP8[$4 >> 0] | 0; //@line 27032
 $7 = $1 + 4 | 0; //@line 27034
 $8 = HEAP32[$7 >> 2] | 0; //@line 27035
 do {
  if ((($5 << 24 >> 24 < 0 ? $8 : $5 & 255) | 0) == 3) {
   __THREW__ = 0; //@line 27041
   $12 = invoke_iiiiii(21, $1 | 0, 0, -1, 20992, 3) | 0; //@line 27042
   $13 = __THREW__; //@line 27043
   __THREW__ = 0; //@line 27043
   if ($13 & 1) {
    $15 = ___cxa_find_matching_catch_3(0) | 0; //@line 27046
    ___clang_call_terminate($15); //@line 27048
   }
   if (!$12) {
    $$08 = 0; //@line 27053
    STACKTOP = sp; //@line 27054
    return $$08 | 0; //@line 27054
   } else {
    $18 = HEAP8[$4 >> 0] | 0; //@line 27058
    $21 = HEAP32[$7 >> 2] | 0; //@line 27058
    break;
   }
  } else {
   $18 = $5; //@line 27062
   $21 = $8; //@line 27062
  }
 } while (0);
 do {
  if ((($18 << 24 >> 24 < 0 ? $21 : $18 & 255) | 0) == 4) {
   __THREW__ = 0; //@line 27071
   $24 = invoke_iiiiii(21, $1 | 0, 0, -1, 20996, 4) | 0; //@line 27072
   $25 = __THREW__; //@line 27073
   __THREW__ = 0; //@line 27073
   if ($25 & 1) {
    $27 = ___cxa_find_matching_catch_3(0) | 0; //@line 27076
    ___clang_call_terminate($27); //@line 27078
   }
   if (!$24) {
    $$08 = 1; //@line 27083
    STACKTOP = sp; //@line 27084
    return $$08 | 0; //@line 27084
   } else {
    $30 = HEAP8[$4 >> 0] | 0; //@line 27088
    $33 = HEAP32[$7 >> 2] | 0; //@line 27088
    break;
   }
  } else {
   $30 = $18; //@line 27092
   $33 = $21; //@line 27092
  }
 } while (0);
 do {
  if ((($30 << 24 >> 24 < 0 ? $33 : $30 & 255) | 0) == 11) {
   __THREW__ = 0; //@line 27101
   $36 = invoke_iiiiii(21, $1 | 0, 0, -1, 21001, 11) | 0; //@line 27102
   $37 = __THREW__; //@line 27103
   __THREW__ = 0; //@line 27103
   if ($37 & 1) {
    $39 = ___cxa_find_matching_catch_3(0) | 0; //@line 27106
    ___clang_call_terminate($39); //@line 27108
   }
   if (!$36) {
    $$08 = 2; //@line 27113
    STACKTOP = sp; //@line 27114
    return $$08 | 0; //@line 27114
   } else {
    $42 = HEAP8[$4 >> 0] | 0; //@line 27118
    $45 = HEAP32[$7 >> 2] | 0; //@line 27118
    break;
   }
  } else {
   $42 = $30; //@line 27122
   $45 = $33; //@line 27122
  }
 } while (0);
 do {
  if ((($42 << 24 >> 24 < 0 ? $45 : $42 & 255) | 0) == 6) {
   __THREW__ = 0; //@line 27131
   $48 = invoke_iiiiii(21, $1 | 0, 0, -1, 21013, 6) | 0; //@line 27132
   $49 = __THREW__; //@line 27133
   __THREW__ = 0; //@line 27133
   if ($49 & 1) {
    $51 = ___cxa_find_matching_catch_3(0) | 0; //@line 27136
    ___clang_call_terminate($51); //@line 27138
   }
   if (!$48) {
    $$08 = 3; //@line 27143
    STACKTOP = sp; //@line 27144
    return $$08 | 0; //@line 27144
   } else {
    $54 = HEAP8[$4 >> 0] | 0; //@line 27148
    $57 = HEAP32[$7 >> 2] | 0; //@line 27148
    break;
   }
  } else {
   $54 = $42; //@line 27152
   $57 = $45; //@line 27152
  }
 } while (0);
 do {
  if ((($54 << 24 >> 24 < 0 ? $57 : $54 & 255) | 0) == 3) {
   __THREW__ = 0; //@line 27161
   $60 = invoke_iiiiii(21, $1 | 0, 0, -1, 21020, 3) | 0; //@line 27162
   $61 = __THREW__; //@line 27163
   __THREW__ = 0; //@line 27163
   if ($61 & 1) {
    $63 = ___cxa_find_matching_catch_3(0) | 0; //@line 27166
    ___clang_call_terminate($63); //@line 27168
   }
   if (!$60) {
    $$08 = 4; //@line 27173
    STACKTOP = sp; //@line 27174
    return $$08 | 0; //@line 27174
   } else {
    $66 = HEAP8[$4 >> 0] | 0; //@line 27178
    $69 = HEAP32[$7 >> 2] | 0; //@line 27178
    break;
   }
  } else {
   $66 = $54; //@line 27182
   $69 = $57; //@line 27182
  }
 } while (0);
 if ((($66 << 24 >> 24 < 0 ? $69 : $66 & 255) | 0) == 5) {
  __THREW__ = 0; //@line 27190
  $72 = invoke_iiiiii(21, $1 | 0, 0, -1, 21024, 5) | 0; //@line 27191
  $73 = __THREW__; //@line 27192
  __THREW__ = 0; //@line 27192
  if ($73 & 1) {
   $75 = ___cxa_find_matching_catch_3(0) | 0; //@line 27195
   ___clang_call_terminate($75); //@line 27197
  }
  if (!$72) {
   $$08 = 5; //@line 27202
   STACKTOP = sp; //@line 27203
   return $$08 | 0; //@line 27203
  }
 }
 $78 = $3 + 64 | 0; //@line 27206
 $79 = $3 + 8 | 0; //@line 27207
 HEAP32[$79 >> 2] = 4868; //@line 27208
 $80 = $3 + 12 | 0; //@line 27209
 HEAP32[$3 >> 2] = 692; //@line 27210
 HEAP32[$78 >> 2] = 712; //@line 27211
 HEAP32[$3 + 4 >> 2] = 0; //@line 27213
 __THREW__ = 0; //@line 27215
 invoke_vii(110, $3 + 64 | 0, $80 | 0); //@line 27216
 $83 = __THREW__; //@line 27217
 __THREW__ = 0; //@line 27217
 if ($83 & 1) {
  $107 = ___cxa_find_matching_catch_2() | 0; //@line 27220
  $$0$i19 = tempRet0; //@line 27222
  $$03$i = $107; //@line 27222
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($78); //@line 27223
  ___resumeException($$03$i | 0); //@line 27224
 }
 HEAP32[$3 + 136 >> 2] = 0; //@line 27228
 HEAP32[$3 + 140 >> 2] = -1; //@line 27230
 HEAP32[$3 >> 2] = 4848; //@line 27231
 HEAP32[$78 >> 2] = 4888; //@line 27232
 HEAP32[$79 >> 2] = 4868; //@line 27233
 __THREW__ = 0; //@line 27234
 invoke_vi(253, $80 | 0); //@line 27235
 $87 = __THREW__; //@line 27236
 __THREW__ = 0; //@line 27236
 do {
  if ($87 & 1) {
   $109 = ___cxa_find_matching_catch_2() | 0; //@line 27240
   $eh$lpad$body$i$index2Z2D = tempRet0; //@line 27242
   $eh$lpad$body$i$indexZ2D = $109; //@line 27242
  } else {
   HEAP32[$80 >> 2] = 3032; //@line 27244
   $89 = $3 + 44 | 0; //@line 27245
   $90 = $3 + 60 | 0; //@line 27246
   HEAP32[$89 >> 2] = 0; //@line 27247
   HEAP32[$89 + 4 >> 2] = 0; //@line 27247
   HEAP32[$89 + 8 >> 2] = 0; //@line 27247
   HEAP32[$89 + 12 >> 2] = 0; //@line 27247
   HEAP32[$90 >> 2] = 24; //@line 27248
   HEAP32[$2 >> 2] = 0; //@line 27249
   HEAP32[$2 + 4 >> 2] = 0; //@line 27249
   HEAP32[$2 + 8 >> 2] = 0; //@line 27249
   __THREW__ = 0; //@line 27250
   invoke_vii(111, $80 | 0, $2 | 0); //@line 27251
   $91 = __THREW__; //@line 27252
   __THREW__ = 0; //@line 27252
   if ($91 & 1) {
    $97 = ___cxa_find_matching_catch_2() | 0; //@line 27255
    $98 = tempRet0; //@line 27256
    if ((HEAP8[$2 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 27262
    }
    if ((HEAP8[$89 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$89 >> 2] | 0); //@line 27269
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($80); //@line 27271
    $eh$lpad$body$i$index2Z2D = $98; //@line 27272
    $eh$lpad$body$i$indexZ2D = $97; //@line 27272
    break;
   }
   if ((HEAP8[$2 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 27280
   }
   $111 = $3 + 8 | 0; //@line 27282
   __THREW__ = 0; //@line 27283
   $112 = invoke_iiii(32, $111 | 0, 21030, 19) | 0; //@line 27284
   $113 = __THREW__; //@line 27285
   __THREW__ = 0; //@line 27285
   L72 : do {
    if ($113 & 1) {
     label = 55; //@line 27289
    } else {
     $115 = HEAP8[$4 >> 0] | 0; //@line 27291
     $116 = $115 << 24 >> 24 < 0; //@line 27292
     __THREW__ = 0; //@line 27298
     $122 = invoke_iiii(32, $112 | 0, ($116 ? HEAP32[$1 >> 2] | 0 : $1) | 0, ($116 ? HEAP32[$7 >> 2] | 0 : $115 & 255) | 0) | 0; //@line 27299
     $123 = __THREW__; //@line 27300
     __THREW__ = 0; //@line 27300
     if ($123 & 1) {
      label = 55; //@line 27303
     } else {
      __THREW__ = 0; //@line 27309
      invoke_vii(132, $2 | 0, $122 + (HEAP32[(HEAP32[$122 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 27310
      $129 = __THREW__; //@line 27311
      __THREW__ = 0; //@line 27311
      if ($129 & 1) {
       label = 55; //@line 27314
      } else {
       __THREW__ = 0; //@line 27316
       $131 = invoke_iii(63, $2 | 0, 35512) | 0; //@line 27317
       $132 = __THREW__; //@line 27318
       __THREW__ = 0; //@line 27318
       if (!($132 & 1)) {
        __THREW__ = 0; //@line 27324
        $137 = invoke_iii(HEAP32[(HEAP32[$131 >> 2] | 0) + 28 >> 2] | 0, $131 | 0, 10) | 0; //@line 27325
        $138 = __THREW__; //@line 27326
        __THREW__ = 0; //@line 27326
        if (!($138 & 1)) {
         __ZNSt3__26localeD2Ev($2); //@line 27329
         __THREW__ = 0; //@line 27330
         invoke_iii(68, $122 | 0, $137 | 0) | 0; //@line 27331
         $142 = __THREW__; //@line 27332
         __THREW__ = 0; //@line 27332
         if ($142 & 1) {
          label = 55; //@line 27335
          break;
         }
         __THREW__ = 0; //@line 27338
         invoke_ii(146, $122 | 0) | 0; //@line 27339
         $144 = __THREW__; //@line 27340
         __THREW__ = 0; //@line 27340
         if ($144 & 1) {
          label = 55; //@line 27343
          break;
         }
         $146 = ___cxa_allocate_exception(8) | 0; //@line 27346
         __THREW__ = 0; //@line 27347
         invoke_vii(114, $2 | 0, $80 | 0); //@line 27348
         $147 = __THREW__; //@line 27349
         __THREW__ = 0; //@line 27349
         do {
          if ($147 & 1) {
           $154 = ___cxa_find_matching_catch_2() | 0; //@line 27353
           $$0425 = tempRet0; //@line 27355
           $$0624 = $154; //@line 27355
          } else {
           __THREW__ = 0; //@line 27357
           invoke_vii(127, $146 | 0, $2 | 0); //@line 27358
           $149 = __THREW__; //@line 27359
           __THREW__ = 0; //@line 27359
           if ($149 & 1) {
            $$0 = 1; //@line 27362
           } else {
            __THREW__ = 0; //@line 27364
            invoke_viii(16, $146 | 0, 2824, 242); //@line 27365
            __THREW__ = 0; //@line 27366
            $$0 = 0; //@line 27367
           }
           $156 = ___cxa_find_matching_catch_2() | 0; //@line 27369
           $157 = tempRet0; //@line 27370
           if ((HEAP8[$2 + 11 >> 0] | 0) < 0) {
            __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 27376
            if ($$0) {
             $$0425 = $157; //@line 27378
             $$0624 = $156; //@line 27378
             break;
            } else {
             $$15 = $157; //@line 27381
             $$17 = $156; //@line 27381
             break L72;
            }
           } else {
            if ($$0) {
             $$0425 = $157; //@line 27386
             $$0624 = $156; //@line 27386
             break;
            } else {
             $$15 = $157; //@line 27389
             $$17 = $156; //@line 27389
             break L72;
            }
           }
          }
         } while (0);
         ___cxa_free_exception($146 | 0); //@line 27395
         $$15 = $$0425; //@line 27396
         $$17 = $$0624; //@line 27396
         break;
        }
       }
       $140 = ___cxa_find_matching_catch_2() | 0; //@line 27400
       $141 = tempRet0; //@line 27401
       __ZNSt3__26localeD2Ev($2); //@line 27402
       $eh$lpad$body$index7Z2D = $141; //@line 27403
       $eh$lpad$body$indexZ2D = $140; //@line 27403
       label = 56; //@line 27404
      }
     }
    }
   } while (0);
   if ((label | 0) == 55) {
    $152 = ___cxa_find_matching_catch_2() | 0; //@line 27410
    $eh$lpad$body$index7Z2D = tempRet0; //@line 27412
    $eh$lpad$body$indexZ2D = $152; //@line 27412
    label = 56; //@line 27413
   }
   if ((label | 0) == 56) {
    $$15 = $eh$lpad$body$index7Z2D; //@line 27416
    $$17 = $eh$lpad$body$indexZ2D; //@line 27416
   }
   HEAP32[$3 >> 2] = 4848; //@line 27418
   HEAP32[$78 >> 2] = 4888; //@line 27419
   HEAP32[$111 >> 2] = 4868; //@line 27420
   HEAP32[$80 >> 2] = 3032; //@line 27421
   if ((HEAP8[$89 + 11 >> 0] | 0) >= 0) {
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($80); //@line 27426
    __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 4900); //@line 27427
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($78); //@line 27428
    ___resumeException($$17 | 0); //@line 27429
   }
   __ZdlPv(HEAP32[$89 >> 2] | 0); //@line 27433
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($80); //@line 27434
   __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 4900); //@line 27435
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($78); //@line 27436
   ___resumeException($$17 | 0); //@line 27437
  }
 } while (0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($3, 4900); //@line 27441
 $$0$i19 = $eh$lpad$body$i$index2Z2D; //@line 27442
 $$03$i = $eh$lpad$body$i$indexZ2D; //@line 27442
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($78); //@line 27443
 ___resumeException($$03$i | 0); //@line 27444
 return 0; //@line 27446
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i137 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i143 = 0, $$0100 = 0, $$0101 = 0, $$0102 = 0, $$0103 = 0, $$0106 = 0, $$0110 = 0, $$0126 = 0, $$0127 = 0, $$0127189 = 0, $$097 = 0, $$098 = 0, $$099$off0 = 0, $$1104 = 0, $$1107 = 0, $$1111 = 0, $$2$off0 = 0, $$2105 = 0, $$2108 = 0, $$2112 = 0, $$3 = 0, $$3109 = 0, $$3113 = 0, $$5 = 0, $$5115 = 0, $$6 = 0, $$7 = 0, $$pre$i4$i$i145 = 0, $$sink134$sink135196$index = 0, $$sink134$sink135196$index5 = 0, $$sroa$0158$0 = 0, $105 = 0, $11 = 0, $112 = 0, $113 = 0, $117 = 0, $121 = 0, $122 = 0, $124 = 0, $128 = 0, $13 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $142 = 0, $147 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $163 = 0, $173 = 0, $178 = 0, $194 = 0, $195 = 0, $198 = 0, $21 = 0, $26 = 0, $32 = 0, $35 = 0, $42 = 0, $43 = 0, $49 = 0, $52 = 0, $59 = 0, $60 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $74 = 0, $81 = 0, $82 = 0, $90 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28582
 STACKTOP = STACKTOP + 112 | 0; //@line 28583
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 28583
 $7 = sp; //@line 28584
 $11 = ($3 - $2 | 0) / 12 | 0; //@line 28588
 do {
  if ($11 >>> 0 > 100) {
   $13 = _malloc($11) | 0; //@line 28592
   if (!$13) {
    __THREW__ = 0; //@line 28595
    invoke_v(4); //@line 28596
    __THREW__ = 0; //@line 28597
    $16 = ___cxa_find_matching_catch_2() | 0; //@line 28598
    $$sink134$sink135196$index = $16; //@line 28600
    $$sink134$sink135196$index5 = tempRet0; //@line 28600
    break;
   } else {
    $$0126 = $13; //@line 28604
    $$sroa$0158$0 = $13; //@line 28604
    label = 5; //@line 28605
    break;
   }
  } else {
   $$0126 = $7; //@line 28609
   $$sroa$0158$0 = 0; //@line 28609
   label = 5; //@line 28610
  }
 } while (0);
 if ((label | 0) == 5) {
  $$0102 = $2; //@line 28614
  $$0103 = $$0126; //@line 28614
  $$0106 = 0; //@line 28614
  $$0110 = $11; //@line 28614
  while (1) {
   if (($$0102 | 0) == ($3 | 0)) {
    break;
   }
   $21 = HEAP8[$$0102 + 11 >> 0] | 0; //@line 28621
   if ($21 << 24 >> 24 < 0) {
    $26 = HEAP32[$$0102 + 4 >> 2] | 0; //@line 28626
   } else {
    $26 = $21 & 255; //@line 28629
   }
   if (!$26) {
    HEAP8[$$0103 >> 0] = 2; //@line 28633
    $$1107 = $$0106 + 1 | 0; //@line 28636
    $$1111 = $$0110 + -1 | 0; //@line 28636
   } else {
    HEAP8[$$0103 >> 0] = 1; //@line 28638
    $$1107 = $$0106; //@line 28639
    $$1111 = $$0110; //@line 28639
   }
   $$0102 = $$0102 + 12 | 0; //@line 28643
   $$0103 = $$0103 + 1 | 0; //@line 28643
   $$0106 = $$1107; //@line 28643
   $$0110 = $$1111; //@line 28643
  }
  $$0101 = 0; //@line 28645
  $$2108 = $$0106; //@line 28645
  $$2112 = $$0110; //@line 28645
  L20 : while (1) {
   $32 = HEAP32[$0 >> 2] | 0; //@line 28647
   do {
    if (!$32) {
     $68 = 1; //@line 28651
    } else {
     $35 = HEAP32[$32 + 12 >> 2] | 0; //@line 28654
     if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 28662
      $42 = invoke_ii(HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] | 0, $32 | 0) | 0; //@line 28663
      $43 = __THREW__; //@line 28664
      __THREW__ = 0; //@line 28664
      if ($43 & 1) {
       break L20;
      } else {
       $$0$i$i$i$i = $42; //@line 28669
      }
     } else {
      $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$35 >> 0] | 0) | 0; //@line 28674
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0; //@line 28679
      $68 = 1; //@line 28680
      break;
     } else {
      $68 = (HEAP32[$0 >> 2] | 0) == 0; //@line 28685
      break;
     }
    }
   } while (0);
   $49 = HEAP32[$1 >> 2] | 0; //@line 28690
   if (!$49) {
    $$pre$i4$i$i145 = 0; //@line 28693
    $67 = 1; //@line 28693
   } else {
    $52 = HEAP32[$49 + 12 >> 2] | 0; //@line 28696
    if (($52 | 0) == (HEAP32[$49 + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 28704
     $59 = invoke_ii(HEAP32[(HEAP32[$49 >> 2] | 0) + 36 >> 2] | 0, $49 | 0) | 0; //@line 28705
     $60 = __THREW__; //@line 28706
     __THREW__ = 0; //@line 28706
     if ($60 & 1) {
      break;
     } else {
      $$0$i$i2$i$i = $59; //@line 28711
     }
    } else {
     $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$52 >> 0] | 0) | 0; //@line 28716
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 28721
     $$pre$i4$i$i145 = 0; //@line 28722
     $67 = 1; //@line 28722
    } else {
     $$pre$i4$i$i145 = $49; //@line 28724
     $67 = 0; //@line 28724
    }
   }
   $71 = HEAP32[$0 >> 2] | 0; //@line 28730
   if (!(($$2112 | 0) != 0 & ($68 ^ $67))) {
    label = 29; //@line 28732
    break;
   }
   $105 = HEAP32[$71 + 12 >> 2] | 0; //@line 28736
   if (($105 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
    __THREW__ = 0; //@line 28744
    $112 = invoke_ii(HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] | 0, $71 | 0) | 0; //@line 28745
    $113 = __THREW__; //@line 28746
    __THREW__ = 0; //@line 28746
    if ($113 & 1) {
     break;
    } else {
     $$0$i$i = $112; //@line 28751
    }
   } else {
    $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$105 >> 0] | 0) | 0; //@line 28756
   }
   $117 = $$0$i$i & 255; //@line 28758
   if ($6) {
    $$0100 = $117; //@line 28760
   } else {
    __THREW__ = 0; //@line 28765
    $121 = invoke_iii(HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0, $4 | 0, $117 | 0) | 0; //@line 28766
    $122 = __THREW__; //@line 28767
    __THREW__ = 0; //@line 28767
    if ($122 & 1) {
     break;
    } else {
     $$0100 = $121; //@line 28772
    }
   }
   $124 = $$0101 + 1 | 0; //@line 28775
   $$098 = $2; //@line 28776
   $$099$off0 = 0; //@line 28776
   $$1104 = $$0126; //@line 28776
   $$3109 = $$2108; //@line 28776
   $$3113 = $$2112; //@line 28776
   while (1) {
    if (($$098 | 0) == ($3 | 0)) {
     break;
    }
    do {
     if ((HEAP8[$$1104 >> 0] | 0) == 1) {
      $128 = $$098 + 11 | 0; //@line 28786
      if ((HEAP8[$128 >> 0] | 0) < 0) {
       $133 = HEAP32[$$098 >> 2] | 0; //@line 28791
      } else {
       $133 = $$098; //@line 28793
      }
      $134 = HEAP8[$133 + $$0101 >> 0] | 0; //@line 28796
      if ($6) {
       $$097 = $134; //@line 28798
      } else {
       __THREW__ = 0; //@line 28803
       $138 = invoke_iii(HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0, $4 | 0, $134 | 0) | 0; //@line 28804
       $139 = __THREW__; //@line 28805
       __THREW__ = 0; //@line 28805
       if ($139 & 1) {
        break L20;
       } else {
        $$097 = $138; //@line 28810
       }
      }
      if ($$0100 << 24 >> 24 != $$097 << 24 >> 24) {
       HEAP8[$$1104 >> 0] = 0; //@line 28815
       $$2$off0 = $$099$off0; //@line 28817
       $$5 = $$3109; //@line 28817
       $$5115 = $$3113 + -1 | 0; //@line 28817
       break;
      }
      $142 = HEAP8[$128 >> 0] | 0; //@line 28820
      if ($142 << 24 >> 24 < 0) {
       $147 = HEAP32[$$098 + 4 >> 2] | 0; //@line 28825
      } else {
       $147 = $142 & 255; //@line 28828
      }
      if (($147 | 0) == ($124 | 0)) {
       HEAP8[$$1104 >> 0] = 2; //@line 28834
       $$2$off0 = 1; //@line 28835
       $$5 = $$3109 + 1 | 0; //@line 28835
       $$5115 = $$3113 + -1 | 0; //@line 28835
      } else {
       $$2$off0 = 1; //@line 28837
       $$5 = $$3109; //@line 28837
       $$5115 = $$3113; //@line 28837
      }
     } else {
      $$2$off0 = $$099$off0; //@line 28840
      $$5 = $$3109; //@line 28840
      $$5115 = $$3113; //@line 28840
     }
    } while (0);
    $$098 = $$098 + 12 | 0; //@line 28845
    $$099$off0 = $$2$off0; //@line 28845
    $$1104 = $$1104 + 1 | 0; //@line 28845
    $$3109 = $$5; //@line 28845
    $$3113 = $$5115; //@line 28845
   }
   if (!$$099$off0) {
    $$0101 = $124; //@line 28848
    $$2108 = $$3109; //@line 28848
    $$2112 = $$3113; //@line 28848
    continue;
   }
   $154 = HEAP32[$0 >> 2] | 0; //@line 28851
   $155 = $154 + 12 | 0; //@line 28852
   $156 = HEAP32[$155 >> 2] | 0; //@line 28853
   if (($156 | 0) == (HEAP32[$154 + 16 >> 2] | 0)) {
    __THREW__ = 0; //@line 28861
    invoke_ii(HEAP32[(HEAP32[$154 >> 2] | 0) + 40 >> 2] | 0, $154 | 0) | 0; //@line 28862
    $163 = __THREW__; //@line 28863
    __THREW__ = 0; //@line 28863
    if ($163 & 1) {
     break;
    }
   } else {
    HEAP32[$155 >> 2] = $156 + 1; //@line 28870
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$156 >> 0] | 0) | 0; //@line 28872
   }
   if (($$3109 + $$3113 | 0) >>> 0 > 1) {
    $$0 = $2; //@line 28877
    $$2105 = $$0126; //@line 28877
    $$6 = $$3109; //@line 28877
   } else {
    $$0101 = $124; //@line 28879
    $$2108 = $$3109; //@line 28879
    $$2112 = $$3113; //@line 28879
    continue;
   }
   while (1) {
    if (($$0 | 0) == ($3 | 0)) {
     $$0101 = $124; //@line 28885
     $$2108 = $$6; //@line 28885
     $$2112 = $$3113; //@line 28885
     continue L20;
    }
    if ((HEAP8[$$2105 >> 0] | 0) == 2) {
     $173 = HEAP8[$$0 + 11 >> 0] | 0; //@line 28892
     if ($173 << 24 >> 24 < 0) {
      $178 = HEAP32[$$0 + 4 >> 2] | 0; //@line 28897
     } else {
      $178 = $173 & 255; //@line 28900
     }
     if (($178 | 0) == ($124 | 0)) {
      $$7 = $$6; //@line 28904
     } else {
      HEAP8[$$2105 >> 0] = 0; //@line 28907
      $$7 = $$6 + -1 | 0; //@line 28908
     }
    } else {
     $$7 = $$6; //@line 28911
    }
    $$0 = $$0 + 12 | 0; //@line 28915
    $$2105 = $$2105 + 1 | 0; //@line 28915
    $$6 = $$7; //@line 28915
   }
  }
  L86 : do {
   if ((label | 0) == 29) {
    do {
     if (!$71) {
      $198 = 1; //@line 28923
     } else {
      $74 = HEAP32[$71 + 12 >> 2] | 0; //@line 28926
      if (($74 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 28934
       $81 = invoke_ii(HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] | 0, $71 | 0) | 0; //@line 28935
       $82 = __THREW__; //@line 28936
       __THREW__ = 0; //@line 28936
       if ($82 & 1) {
        break L86;
       } else {
        $$0$i$i$i$i137 = $81; //@line 28941
       }
      } else {
       $$0$i$i$i$i137 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$74 >> 0] | 0) | 0; //@line 28946
      }
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i137, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0; //@line 28951
       $198 = 1; //@line 28952
       break;
      } else {
       $198 = (HEAP32[$0 >> 2] | 0) == 0; //@line 28957
       break;
      }
     }
    } while (0);
    do {
     if (!$$pre$i4$i$i145) {
      label = 76; //@line 28965
     } else {
      $90 = HEAP32[$$pre$i4$i$i145 + 12 >> 2] | 0; //@line 28968
      if (($90 | 0) == (HEAP32[$$pre$i4$i$i145 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 28976
       $97 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i145 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i145 | 0) | 0; //@line 28977
       $98 = __THREW__; //@line 28978
       __THREW__ = 0; //@line 28978
       if ($98 & 1) {
        break L86;
       } else {
        $$0$i$i2$i$i143 = $97; //@line 28983
       }
      } else {
       $$0$i$i2$i$i143 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$90 >> 0] | 0) | 0; //@line 28988
      }
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i143, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 28993
       label = 76; //@line 28994
       break;
      } else {
       if ($198) {
        $$0127 = $2; //@line 28998
        $$3 = $$0126; //@line 28998
        break;
       } else {
        label = 78; //@line 29001
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 76) {
     if ($198) {
      label = 78; //@line 29009
     } else {
      $$0127 = $2; //@line 29011
      $$3 = $$0126; //@line 29011
     }
    }
    if ((label | 0) == 78) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2; //@line 29017
     $$0127 = $2; //@line 29018
     $$3 = $$0126; //@line 29018
    }
    while (1) {
     if (($$0127 | 0) == ($3 | 0)) {
      label = 82; //@line 29023
      break;
     }
     if ((HEAP8[$$3 >> 0] | 0) == 2) {
      $$0127189 = $$0127; //@line 29029
      break;
     }
     $$0127 = $$0127 + 12 | 0; //@line 29034
     $$3 = $$3 + 1 | 0; //@line 29034
    }
    if ((label | 0) == 82) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 29039
     $$0127189 = $3; //@line 29040
    }
    if ($$sroa$0158$0 | 0) {
     _free($$sroa$0158$0); //@line 29045
    }
    STACKTOP = sp; //@line 29047
    return $$0127189 | 0; //@line 29047
   }
  } while (0);
  $194 = ___cxa_find_matching_catch_2() | 0; //@line 29050
  $195 = tempRet0; //@line 29051
  if (!$$sroa$0158$0) {
   $$sink134$sink135196$index = $194; //@line 29054
   $$sink134$sink135196$index5 = $195; //@line 29054
  } else {
   _free($$sroa$0158$0); //@line 29057
   $$sink134$sink135196$index = $194; //@line 29058
   $$sink134$sink135196$index5 = $195; //@line 29058
  }
 }
 ___resumeException($$sink134$sink135196$index | 0); //@line 29061
 return 0; //@line 29063
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i143 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i149 = 0, $$0103 = 0, $$0104 = 0, $$0105$off0 = 0, $$0106 = 0, $$0107 = 0, $$0108 = 0, $$0109 = 0, $$0112 = 0, $$0116 = 0, $$0132 = 0, $$0133 = 0, $$0133195 = 0, $$1110 = 0, $$1113 = 0, $$1117 = 0, $$2$off0 = 0, $$2111 = 0, $$2114 = 0, $$2118 = 0, $$3 = 0, $$3115 = 0, $$3119 = 0, $$5 = 0, $$5121 = 0, $$6 = 0, $$7 = 0, $$pre$i4$i$i151 = 0, $$sink140$sink141202$index = 0, $$sink140$sink141202$index5 = 0, $$sroa$0164$0 = 0, $106 = 0, $11 = 0, $113 = 0, $114 = 0, $121 = 0, $122 = 0, $124 = 0, $129 = 0, $13 = 0, $134 = 0, $135 = 0, $139 = 0, $140 = 0, $143 = 0, $148 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $164 = 0, $175 = 0, $180 = 0, $196 = 0, $197 = 0, $200 = 0, $22 = 0, $27 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $60 = 0, $61 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $75 = 0, $82 = 0, $83 = 0, $91 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 34226
 STACKTOP = STACKTOP + 112 | 0; //@line 34227
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 34227
 $7 = sp; //@line 34228
 $11 = ($3 - $2 | 0) / 12 | 0; //@line 34232
 do {
  if ($11 >>> 0 > 100) {
   $13 = _malloc($11) | 0; //@line 34236
   if (!$13) {
    __THREW__ = 0; //@line 34239
    invoke_v(4); //@line 34240
    __THREW__ = 0; //@line 34241
    $16 = ___cxa_find_matching_catch_2() | 0; //@line 34242
    $$sink140$sink141202$index = $16; //@line 34244
    $$sink140$sink141202$index5 = tempRet0; //@line 34244
    break;
   } else {
    $$0132 = $13; //@line 34248
    $$sroa$0164$0 = $13; //@line 34248
    label = 5; //@line 34249
    break;
   }
  } else {
   $$0132 = $7; //@line 34253
   $$sroa$0164$0 = 0; //@line 34253
   label = 5; //@line 34254
  }
 } while (0);
 if ((label | 0) == 5) {
  $$0108 = $2; //@line 34258
  $$0109 = $$0132; //@line 34258
  $$0112 = 0; //@line 34258
  $$0116 = $11; //@line 34258
  while (1) {
   if (($$0108 | 0) == ($3 | 0)) {
    break;
   }
   $22 = HEAP8[$$0108 + 8 + 3 >> 0] | 0; //@line 34266
   if ($22 << 24 >> 24 < 0) {
    $27 = HEAP32[$$0108 + 4 >> 2] | 0; //@line 34271
   } else {
    $27 = $22 & 255; //@line 34274
   }
   if (!$27) {
    HEAP8[$$0109 >> 0] = 2; //@line 34278
    $$1113 = $$0112 + 1 | 0; //@line 34281
    $$1117 = $$0116 + -1 | 0; //@line 34281
   } else {
    HEAP8[$$0109 >> 0] = 1; //@line 34283
    $$1113 = $$0112; //@line 34284
    $$1117 = $$0116; //@line 34284
   }
   $$0108 = $$0108 + 12 | 0; //@line 34288
   $$0109 = $$0109 + 1 | 0; //@line 34288
   $$0112 = $$1113; //@line 34288
   $$0116 = $$1117; //@line 34288
  }
  $$0107 = 0; //@line 34290
  $$2114 = $$0112; //@line 34290
  $$2118 = $$0116; //@line 34290
  L20 : while (1) {
   $33 = HEAP32[$0 >> 2] | 0; //@line 34292
   do {
    if (!$33) {
     $69 = 1; //@line 34296
    } else {
     $36 = HEAP32[$33 + 12 >> 2] | 0; //@line 34299
     if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 34307
      $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0; //@line 34308
      $44 = __THREW__; //@line 34309
      __THREW__ = 0; //@line 34309
      if ($44 & 1) {
       break L20;
      } else {
       $$0$i$i$i$i = $43; //@line 34314
      }
     } else {
      $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0; //@line 34319
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0; //@line 34324
      $69 = 1; //@line 34325
      break;
     } else {
      $69 = (HEAP32[$0 >> 2] | 0) == 0; //@line 34330
      break;
     }
    }
   } while (0);
   $50 = HEAP32[$1 >> 2] | 0; //@line 34335
   if (!$50) {
    $$pre$i4$i$i151 = 0; //@line 34338
    $68 = 1; //@line 34338
   } else {
    $53 = HEAP32[$50 + 12 >> 2] | 0; //@line 34341
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 34349
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0; //@line 34350
     $61 = __THREW__; //@line 34351
     __THREW__ = 0; //@line 34351
     if ($61 & 1) {
      break;
     } else {
      $$0$i$i2$i$i = $60; //@line 34356
     }
    } else {
     $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0; //@line 34361
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 34366
     $$pre$i4$i$i151 = 0; //@line 34367
     $68 = 1; //@line 34367
    } else {
     $$pre$i4$i$i151 = $50; //@line 34369
     $68 = 0; //@line 34369
    }
   }
   $72 = HEAP32[$0 >> 2] | 0; //@line 34375
   if (!(($$2118 | 0) != 0 & ($69 ^ $68))) {
    label = 29; //@line 34377
    break;
   }
   $106 = HEAP32[$72 + 12 >> 2] | 0; //@line 34381
   if (($106 | 0) == (HEAP32[$72 + 16 >> 2] | 0)) {
    __THREW__ = 0; //@line 34389
    $113 = invoke_ii(HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] | 0, $72 | 0) | 0; //@line 34390
    $114 = __THREW__; //@line 34391
    __THREW__ = 0; //@line 34391
    if ($114 & 1) {
     break;
    } else {
     $$0$i$i = $113; //@line 34396
    }
   } else {
    $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$106 >> 2] | 0) | 0; //@line 34401
   }
   if ($6) {
    $$0106 = $$0$i$i; //@line 34404
   } else {
    __THREW__ = 0; //@line 34409
    $121 = invoke_iii(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0, $4 | 0, $$0$i$i | 0) | 0; //@line 34410
    $122 = __THREW__; //@line 34411
    __THREW__ = 0; //@line 34411
    if ($122 & 1) {
     break;
    } else {
     $$0106 = $121; //@line 34416
    }
   }
   $124 = $$0107 + 1 | 0; //@line 34419
   $$0104 = $2; //@line 34420
   $$0105$off0 = 0; //@line 34420
   $$1110 = $$0132; //@line 34420
   $$3115 = $$2114; //@line 34420
   $$3119 = $$2118; //@line 34420
   while (1) {
    if (($$0104 | 0) == ($3 | 0)) {
     break;
    }
    do {
     if ((HEAP8[$$1110 >> 0] | 0) == 1) {
      $129 = $$0104 + 8 + 3 | 0; //@line 34431
      if ((HEAP8[$129 >> 0] | 0) < 0) {
       $134 = HEAP32[$$0104 >> 2] | 0; //@line 34436
      } else {
       $134 = $$0104; //@line 34438
      }
      $135 = HEAP32[$134 + ($$0107 << 2) >> 2] | 0; //@line 34441
      if ($6) {
       $$0103 = $135; //@line 34443
      } else {
       __THREW__ = 0; //@line 34448
       $139 = invoke_iii(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0, $4 | 0, $135 | 0) | 0; //@line 34449
       $140 = __THREW__; //@line 34450
       __THREW__ = 0; //@line 34450
       if ($140 & 1) {
        break L20;
       } else {
        $$0103 = $139; //@line 34455
       }
      }
      if (($$0106 | 0) != ($$0103 | 0)) {
       HEAP8[$$1110 >> 0] = 0; //@line 34460
       $$2$off0 = $$0105$off0; //@line 34462
       $$5 = $$3115; //@line 34462
       $$5121 = $$3119 + -1 | 0; //@line 34462
       break;
      }
      $143 = HEAP8[$129 >> 0] | 0; //@line 34465
      if ($143 << 24 >> 24 < 0) {
       $148 = HEAP32[$$0104 + 4 >> 2] | 0; //@line 34470
      } else {
       $148 = $143 & 255; //@line 34473
      }
      if (($148 | 0) == ($124 | 0)) {
       HEAP8[$$1110 >> 0] = 2; //@line 34479
       $$2$off0 = 1; //@line 34480
       $$5 = $$3115 + 1 | 0; //@line 34480
       $$5121 = $$3119 + -1 | 0; //@line 34480
      } else {
       $$2$off0 = 1; //@line 34482
       $$5 = $$3115; //@line 34482
       $$5121 = $$3119; //@line 34482
      }
     } else {
      $$2$off0 = $$0105$off0; //@line 34485
      $$5 = $$3115; //@line 34485
      $$5121 = $$3119; //@line 34485
     }
    } while (0);
    $$0104 = $$0104 + 12 | 0; //@line 34490
    $$0105$off0 = $$2$off0; //@line 34490
    $$1110 = $$1110 + 1 | 0; //@line 34490
    $$3115 = $$5; //@line 34490
    $$3119 = $$5121; //@line 34490
   }
   if (!$$0105$off0) {
    $$0107 = $124; //@line 34493
    $$2114 = $$3115; //@line 34493
    $$2118 = $$3119; //@line 34493
    continue;
   }
   $155 = HEAP32[$0 >> 2] | 0; //@line 34496
   $156 = $155 + 12 | 0; //@line 34497
   $157 = HEAP32[$156 >> 2] | 0; //@line 34498
   if (($157 | 0) == (HEAP32[$155 + 16 >> 2] | 0)) {
    __THREW__ = 0; //@line 34506
    invoke_ii(HEAP32[(HEAP32[$155 >> 2] | 0) + 40 >> 2] | 0, $155 | 0) | 0; //@line 34507
    $164 = __THREW__; //@line 34508
    __THREW__ = 0; //@line 34508
    if ($164 & 1) {
     break;
    }
   } else {
    HEAP32[$156 >> 2] = $157 + 4; //@line 34515
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$157 >> 2] | 0) | 0; //@line 34517
   }
   if (($$3115 + $$3119 | 0) >>> 0 > 1) {
    $$0 = $2; //@line 34522
    $$2111 = $$0132; //@line 34522
    $$6 = $$3115; //@line 34522
   } else {
    $$0107 = $124; //@line 34524
    $$2114 = $$3115; //@line 34524
    $$2118 = $$3119; //@line 34524
    continue;
   }
   while (1) {
    if (($$0 | 0) == ($3 | 0)) {
     $$0107 = $124; //@line 34530
     $$2114 = $$6; //@line 34530
     $$2118 = $$3119; //@line 34530
     continue L20;
    }
    if ((HEAP8[$$2111 >> 0] | 0) == 2) {
     $175 = HEAP8[$$0 + 8 + 3 >> 0] | 0; //@line 34538
     if ($175 << 24 >> 24 < 0) {
      $180 = HEAP32[$$0 + 4 >> 2] | 0; //@line 34543
     } else {
      $180 = $175 & 255; //@line 34546
     }
     if (($180 | 0) == ($124 | 0)) {
      $$7 = $$6; //@line 34550
     } else {
      HEAP8[$$2111 >> 0] = 0; //@line 34553
      $$7 = $$6 + -1 | 0; //@line 34554
     }
    } else {
     $$7 = $$6; //@line 34557
    }
    $$0 = $$0 + 12 | 0; //@line 34561
    $$2111 = $$2111 + 1 | 0; //@line 34561
    $$6 = $$7; //@line 34561
   }
  }
  L86 : do {
   if ((label | 0) == 29) {
    do {
     if (!$72) {
      $200 = 1; //@line 34569
     } else {
      $75 = HEAP32[$72 + 12 >> 2] | 0; //@line 34572
      if (($75 | 0) == (HEAP32[$72 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 34580
       $82 = invoke_ii(HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] | 0, $72 | 0) | 0; //@line 34581
       $83 = __THREW__; //@line 34582
       __THREW__ = 0; //@line 34582
       if ($83 & 1) {
        break L86;
       } else {
        $$0$i$i$i$i143 = $82; //@line 34587
       }
      } else {
       $$0$i$i$i$i143 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$75 >> 2] | 0) | 0; //@line 34592
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i143, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0; //@line 34597
       $200 = 1; //@line 34598
       break;
      } else {
       $200 = (HEAP32[$0 >> 2] | 0) == 0; //@line 34603
       break;
      }
     }
    } while (0);
    do {
     if (!$$pre$i4$i$i151) {
      label = 76; //@line 34611
     } else {
      $91 = HEAP32[$$pre$i4$i$i151 + 12 >> 2] | 0; //@line 34614
      if (($91 | 0) == (HEAP32[$$pre$i4$i$i151 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 34622
       $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i151 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i151 | 0) | 0; //@line 34623
       $99 = __THREW__; //@line 34624
       __THREW__ = 0; //@line 34624
       if ($99 & 1) {
        break L86;
       } else {
        $$0$i$i2$i$i149 = $98; //@line 34629
       }
      } else {
       $$0$i$i2$i$i149 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$91 >> 2] | 0) | 0; //@line 34634
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i149, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 34639
       label = 76; //@line 34640
       break;
      } else {
       if ($200) {
        $$0133 = $2; //@line 34644
        $$3 = $$0132; //@line 34644
        break;
       } else {
        label = 78; //@line 34647
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 76) {
     if ($200) {
      label = 78; //@line 34655
     } else {
      $$0133 = $2; //@line 34657
      $$3 = $$0132; //@line 34657
     }
    }
    if ((label | 0) == 78) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2; //@line 34663
     $$0133 = $2; //@line 34664
     $$3 = $$0132; //@line 34664
    }
    while (1) {
     if (($$0133 | 0) == ($3 | 0)) {
      label = 82; //@line 34669
      break;
     }
     if ((HEAP8[$$3 >> 0] | 0) == 2) {
      $$0133195 = $$0133; //@line 34675
      break;
     }
     $$0133 = $$0133 + 12 | 0; //@line 34680
     $$3 = $$3 + 1 | 0; //@line 34680
    }
    if ((label | 0) == 82) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4; //@line 34685
     $$0133195 = $3; //@line 34686
    }
    if ($$sroa$0164$0 | 0) {
     _free($$sroa$0164$0); //@line 34691
    }
    STACKTOP = sp; //@line 34693
    return $$0133195 | 0; //@line 34693
   }
  } while (0);
  $196 = ___cxa_find_matching_catch_2() | 0; //@line 34696
  $197 = tempRet0; //@line 34697
  if (!$$sroa$0164$0) {
   $$sink140$sink141202$index = $196; //@line 34700
   $$sink140$sink141202$index5 = $197; //@line 34700
  } else {
   _free($$sroa$0164$0); //@line 34703
   $$sink140$sink141202$index = $196; //@line 34704
   $$sink140$sink141202$index5 = $197; //@line 34704
  }
 }
 ___resumeException($$sink140$sink141202$index | 0); //@line 34707
 return 0; //@line 34709
}
function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$053100$i = 0, $$053100$i$us = 0, $$053100$us$i = 0, $$053100$us$i$us = 0, $$05399$i = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$sink$i = 0, $10 = 0, $100 = 0, $103 = 0, $106 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $132 = 0, $135 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $159 = 0.0, $162 = 0.0, $172 = 0, $175 = 0, $177 = 0, $179 = 0, $180 = 0, $186 = 0, $198 = 0, $199 = 0, $201 = 0, $203 = 0, $206 = 0, $207 = 0, $21 = 0, $215 = 0, $219 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $65 = 0, $69 = 0, $78 = 0, $84 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0; //@line 1814
 $4 = $3 << 24 >> 24 < 0; //@line 1815
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1; //@line 1820
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255; //@line 1821
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i$i = $9; //@line 1824
  $$03738$i$i$i$i$i = $10; //@line 1824
  $$040$i$i$i$i$i = $10; //@line 1824
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 1827
   $$03738$i$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i, 1540483477) | 0); //@line 1832
   $$040$i$i$i$i$i = $$040$i$i$i$i$i + -4 | 0; //@line 1834
   if ($$040$i$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i$i = $$03639$i$i$i$i$i + 4 | 0; //@line 1837
   }
  }
  $21 = $10 + -4 | 0; //@line 1842
  $22 = $21 & -4; //@line 1843
  $$0$lcssa$i$i$i$i$i = $21 - $22 | 0; //@line 1847
  $$036$lcssa$i$i$i$i$i = $9 + ($22 + 4) | 0; //@line 1847
  $$037$lcssa$i$i$i$i$i = $$03738$i$i$i$i$i; //@line 1847
 } else {
  $$0$lcssa$i$i$i$i$i = $10; //@line 1849
  $$036$lcssa$i$i$i$i$i = $9; //@line 1849
  $$037$lcssa$i$i$i$i$i = $10; //@line 1849
 }
 switch ($$0$lcssa$i$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i; //@line 1858
   label = 6; //@line 1859
   break;
  }
 case 2:
  {
   $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 1863
   label = 6; //@line 1864
   break;
  }
 case 1:
  {
   $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 1868
   label = 7; //@line 1869
   break;
  }
 default:
  {
   $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 1873
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i; //@line 1882
  label = 7; //@line 1883
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i$i = Math_imul($$2$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i >> 0], 1540483477) | 0; //@line 1890
 }
 $41 = Math_imul($$3$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i, 1540483477) | 0; //@line 1894
 $43 = $41 >>> 15 ^ $41; //@line 1896
 $44 = $0 + 4 | 0; //@line 1897
 $45 = HEAP32[$44 >> 2] | 0; //@line 1898
 $46 = ($45 | 0) == 0; //@line 1899
 L13 : do {
  if ($46) {
   $$054$i = 0; //@line 1902
  } else {
   $47 = $45 + -1 | 0; //@line 1904
   $49 = ($47 & $45 | 0) == 0; //@line 1906
   if ($49) {
    $55 = $43 & $47; //@line 1909
   } else {
    if ($43 >>> 0 < $45 >>> 0) {
     $55 = $43; //@line 1913
    } else {
     $55 = ($43 >>> 0) % ($45 >>> 0) | 0; //@line 1916
    }
   }
   $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0; //@line 1921
   if (!$56) {
    $$054$i = $55; //@line 1924
   } else {
    $$05399$i = HEAP32[$56 >> 2] | 0; //@line 1926
    if (!$$05399$i) {
     $$054$i = $55; //@line 1929
    } else {
     $59 = ($10 | 0) == 0; //@line 1931
     if ($49) {
      if ($59) {
       $$053100$us$i$us = $$05399$i; //@line 1934
       while (1) {
        $78 = HEAP32[$$053100$us$i$us + 4 >> 2] | 0; //@line 1937
        if (!(($78 | 0) == ($43 | 0) | ($78 & $47 | 0) == ($55 | 0))) {
         $$054$i = $55; //@line 1943
         break L13;
        }
        $84 = HEAP8[$$053100$us$i$us + 8 + 11 >> 0] | 0; //@line 1948
        if (!(($84 << 24 >> 24 < 0 ? HEAP32[$$053100$us$i$us + 12 >> 2] | 0 : $84 & 255) | 0)) {
         $$1$i = $$053100$us$i$us; //@line 1956
         break;
        }
        $$053100$us$i$us = HEAP32[$$053100$us$i$us >> 2] | 0; //@line 1959
        if (!$$053100$us$i$us) {
         $$054$i = $55; //@line 1962
         break L13;
        }
       }
       $219 = $$1$i + 20 | 0; //@line 1968
       return $219 | 0; //@line 1969
      } else {
       $$053100$us$i = $$05399$i; //@line 1971
      }
      L30 : while (1) {
       $93 = HEAP32[$$053100$us$i + 4 >> 2] | 0; //@line 1975
       if (!(($93 | 0) == ($43 | 0) | ($93 & $47 | 0) == ($55 | 0))) {
        $$054$i = $55; //@line 1981
        break L13;
       }
       $97 = $$053100$us$i + 8 | 0; //@line 1984
       $99 = HEAP8[$97 + 11 >> 0] | 0; //@line 1986
       $100 = $99 << 24 >> 24 < 0; //@line 1987
       $103 = $99 & 255; //@line 1990
       do {
        if ((($100 ? HEAP32[$$053100$us$i + 12 >> 2] | 0 : $103) | 0) == ($10 | 0)) {
         $106 = HEAP32[$97 >> 2] | 0; //@line 1995
         if ($100) {
          if (!(_memcmp($106, $9, $10) | 0)) {
           $$1$i = $$053100$us$i; //@line 2000
           label = 71; //@line 2001
           break L30;
          } else {
           break;
          }
         }
         if ((HEAP8[$9 >> 0] | 0) == ($106 & 255) << 24 >> 24) {
          $$02026$i$i4$i$us$i = $97; //@line 2012
          $$02125$i$i5$i$us$i = $103; //@line 2012
          $$027$i$i3$i$us$i = $9; //@line 2012
          do {
           $$02125$i$i5$i$us$i = $$02125$i$i5$i$us$i + -1 | 0; //@line 2014
           $$02026$i$i4$i$us$i = $$02026$i$i4$i$us$i + 1 | 0; //@line 2015
           if (!$$02125$i$i5$i$us$i) {
            $$1$i = $$053100$us$i; //@line 2018
            label = 71; //@line 2019
            break L30;
           }
           $$027$i$i3$i$us$i = $$027$i$i3$i$us$i + 1 | 0; //@line 2022
          } while ((HEAP8[$$02026$i$i4$i$us$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i >> 0] | 0));
         }
        }
       } while (0);
       $$053100$us$i = HEAP32[$$053100$us$i >> 2] | 0; //@line 2035
       if (!$$053100$us$i) {
        $$054$i = $55; //@line 2038
        break L13;
       }
      }
      if ((label | 0) == 71) {
       $219 = $$1$i + 20 | 0; //@line 2045
       return $219 | 0; //@line 2046
      }
     }
     if ($59) {
      $$053100$i$us = $$05399$i; //@line 2050
      while (1) {
       $61 = HEAP32[$$053100$i$us + 4 >> 2] | 0; //@line 2053
       if (($61 | 0) != ($43 | 0)) {
        if ($61 >>> 0 < $45 >>> 0) {
         $65 = $61; //@line 2058
        } else {
         $65 = ($61 >>> 0) % ($45 >>> 0) | 0; //@line 2061
        }
        if (($65 | 0) != ($55 | 0)) {
         $$054$i = $55; //@line 2065
         break L13;
        }
       }
       $69 = HEAP8[$$053100$i$us + 8 + 11 >> 0] | 0; //@line 2071
       if (!(($69 << 24 >> 24 < 0 ? HEAP32[$$053100$i$us + 12 >> 2] | 0 : $69 & 255) | 0)) {
        $$1$i = $$053100$i$us; //@line 2079
        break;
       }
       $$053100$i$us = HEAP32[$$053100$i$us >> 2] | 0; //@line 2082
       if (!$$053100$i$us) {
        $$054$i = $55; //@line 2085
        break L13;
       }
      }
      $219 = $$1$i + 20 | 0; //@line 2091
      return $219 | 0; //@line 2092
     } else {
      $$053100$i = $$05399$i; //@line 2094
     }
     L58 : while (1) {
      $120 = HEAP32[$$053100$i + 4 >> 2] | 0; //@line 2098
      if (($120 | 0) != ($43 | 0)) {
       if ($120 >>> 0 < $45 >>> 0) {
        $124 = $120; //@line 2103
       } else {
        $124 = ($120 >>> 0) % ($45 >>> 0) | 0; //@line 2106
       }
       if (($124 | 0) != ($55 | 0)) {
        $$054$i = $55; //@line 2110
        break L13;
       }
      }
      $126 = $$053100$i + 8 | 0; //@line 2114
      $128 = HEAP8[$126 + 11 >> 0] | 0; //@line 2116
      $129 = $128 << 24 >> 24 < 0; //@line 2117
      $132 = $128 & 255; //@line 2120
      do {
       if ((($129 ? HEAP32[$$053100$i + 12 >> 2] | 0 : $132) | 0) == ($10 | 0)) {
        $135 = HEAP32[$126 >> 2] | 0; //@line 2125
        if ($129) {
         if (!(_memcmp($135, $9, $10) | 0)) {
          $$1$i = $$053100$i; //@line 2130
          label = 71; //@line 2131
          break L58;
         } else {
          break;
         }
        }
        if ((HEAP8[$9 >> 0] | 0) == ($135 & 255) << 24 >> 24) {
         $$02026$i$i4$i$i = $126; //@line 2142
         $$02125$i$i5$i$i = $132; //@line 2142
         $$027$i$i3$i$i = $9; //@line 2142
         do {
          $$02125$i$i5$i$i = $$02125$i$i5$i$i + -1 | 0; //@line 2144
          $$02026$i$i4$i$i = $$02026$i$i4$i$i + 1 | 0; //@line 2145
          if (!$$02125$i$i5$i$i) {
           $$1$i = $$053100$i; //@line 2148
           label = 71; //@line 2149
           break L58;
          }
          $$027$i$i3$i$i = $$027$i$i3$i$i + 1 | 0; //@line 2152
         } while ((HEAP8[$$02026$i$i4$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i >> 0] | 0));
        }
       }
      } while (0);
      $$053100$i = HEAP32[$$053100$i >> 2] | 0; //@line 2165
      if (!$$053100$i) {
       $$054$i = $55; //@line 2168
       break L13;
      }
     }
     if ((label | 0) == 71) {
      $219 = $$1$i + 20 | 0; //@line 2175
      return $219 | 0; //@line 2176
     }
    }
   }
  }
 } while (0);
 $148 = __Znwj(48) | 0; //@line 2182
 $149 = $148 + 8 | 0; //@line 2183
 __THREW__ = 0; //@line 2184
 invoke_vii(115, $149 | 0, $1 | 0); //@line 2185
 $150 = __THREW__; //@line 2186
 __THREW__ = 0; //@line 2186
 if ($150 & 1) {
  $152 = ___cxa_find_matching_catch_2() | 0; //@line 2189
  __ZdlPv($148); //@line 2191
  ___resumeException($152 | 0); //@line 2192
 }
 $154 = $148 + 20 | 0; //@line 2195
 HEAP32[$154 >> 2] = 0; //@line 2196
 HEAP32[$154 + 4 >> 2] = 0; //@line 2196
 HEAP32[$154 + 8 >> 2] = 0; //@line 2196
 HEAP32[$154 + 12 >> 2] = 0; //@line 2196
 HEAP32[$154 + 16 >> 2] = 0; //@line 2196
 HEAP32[$154 + 20 >> 2] = 0; //@line 2196
 HEAP32[$154 + 24 >> 2] = 0; //@line 2196
 HEAP32[$148 + 4 >> 2] = $43; //@line 2198
 HEAP32[$148 >> 2] = 0; //@line 2199
 $156 = $0 + 12 | 0; //@line 2200
 $159 = +(((HEAP32[$156 >> 2] | 0) + 1 | 0) >>> 0); //@line 2203
 $162 = +HEAPF32[$0 + 16 >> 2]; //@line 2206
 do {
  if ($46 | $162 * +($45 >>> 0) < $159) {
   $172 = $45 << 1 | ($45 >>> 0 < 3 | ($45 + -1 & $45 | 0) != 0) & 1; //@line 2219
   $175 = ~~+Math_ceil(+($159 / $162)) >>> 0; //@line 2222
   __THREW__ = 0; //@line 2225
   invoke_vii(117, $0 | 0, ($172 >>> 0 < $175 >>> 0 ? $175 : $172) | 0); //@line 2226
   $177 = __THREW__; //@line 2227
   __THREW__ = 0; //@line 2227
   if (!($177 & 1)) {
    $179 = HEAP32[$44 >> 2] | 0; //@line 2230
    $180 = $179 + -1 | 0; //@line 2231
    if (!($180 & $179)) {
     $$0$i = $179; //@line 2236
     $$155$i = $180 & $43; //@line 2236
     break;
    }
    if ($43 >>> 0 < $179 >>> 0) {
     $$0$i = $179; //@line 2241
     $$155$i = $43; //@line 2241
     break;
    }
    $$0$i = $179; //@line 2245
    $$155$i = ($43 >>> 0) % ($179 >>> 0) | 0; //@line 2245
    break;
   }
   $186 = ___cxa_find_matching_catch_2() | 0; //@line 2248
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($148 + 32 | 0); //@line 2251
   if ((HEAP8[$148 + 31 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$154 >> 2] | 0); //@line 2257
   }
   if ((HEAP8[$148 + 19 >> 0] | 0) >= 0) {
    __ZdlPv($148); //@line 2263
    ___resumeException($186 | 0); //@line 2264
   }
   __ZdlPv(HEAP32[$149 >> 2] | 0); //@line 2268
   __ZdlPv($148); //@line 2269
   ___resumeException($186 | 0); //@line 2270
  } else {
   $$0$i = $45; //@line 2273
   $$155$i = $$054$i; //@line 2273
  }
 } while (0);
 $198 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0; //@line 2277
 $199 = HEAP32[$198 >> 2] | 0; //@line 2278
 if (!$199) {
  $201 = $0 + 8 | 0; //@line 2281
  HEAP32[$148 >> 2] = HEAP32[$201 >> 2]; //@line 2283
  HEAP32[$201 >> 2] = $148; //@line 2284
  HEAP32[$198 >> 2] = $201; //@line 2285
  $203 = HEAP32[$148 >> 2] | 0; //@line 2286
  if ($203 | 0) {
   $206 = HEAP32[$203 + 4 >> 2] | 0; //@line 2290
   $207 = $$0$i + -1 | 0; //@line 2291
   if (!($207 & $$0$i)) {
    $215 = $206 & $207; //@line 2296
   } else {
    if ($206 >>> 0 < $$0$i >>> 0) {
     $215 = $206; //@line 2300
    } else {
     $215 = ($206 >>> 0) % ($$0$i >>> 0) | 0; //@line 2303
    }
   }
   $$sink$i = (HEAP32[$0 >> 2] | 0) + ($215 << 2) | 0; //@line 2308
   label = 69; //@line 2309
  }
 } else {
  HEAP32[$148 >> 2] = HEAP32[$199 >> 2]; //@line 2313
  $$sink$i = $199; //@line 2314
  label = 69; //@line 2315
 }
 if ((label | 0) == 69) {
  HEAP32[$$sink$i >> 2] = $148; //@line 2318
 }
 HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1; //@line 2322
 $$1$i = $148; //@line 2323
 $219 = $$1$i + 20 | 0; //@line 2324
 return $219 | 0; //@line 2325
}
function __ZN6Runner22handleDefinedFunctionsE13CharmFunctionP13RunnerContext($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$110 = 0, $$113 = 0, $$211 = 0, $$214 = 0, $$4 = 0, $$416 = 0, $$5 = 0, $$517 = 0, $$61854 = 0, $$655 = 0, $$8 = 0, $$820 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $106 = 0, $11 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $154 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $6 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8573
 STACKTOP = STACKTOP + 144 | 0; //@line 8574
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 8574
 $$byval_copy = sp + 132 | 0; //@line 8575
 $3 = sp + 120 | 0; //@line 8576
 $4 = sp + 80 | 0; //@line 8577
 $5 = sp + 56 | 0; //@line 8578
 $6 = sp + 92 | 0; //@line 8579
 $7 = sp + 68 | 0; //@line 8580
 $8 = sp + 40 | 0; //@line 8581
 $9 = sp + 24 | 0; //@line 8582
 $10 = sp + 12 | 0; //@line 8583
 $11 = sp; //@line 8584
 $12 = $0 + 96 | 0; //@line 8585
 $14 = $1 + 52 | 0; //@line 8587
 $16 = (__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_(HEAP32[$12 >> 2] | 0, $14) | 0) == 0; //@line 8589
 $17 = $0 + 100 | 0; //@line 8590
 $19 = __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEERKT_(HEAP32[$17 >> 2] | 0, $14) | 0; //@line 8592
 $20 = HEAP32[$17 >> 2] | 0; //@line 8593
 if (!$16) {
  $21 = HEAP32[$12 >> 2] | 0; //@line 8595
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4, $14); //@line 8596
  __THREW__ = 0; //@line 8597
  invoke_viiii(13, $21 | 0, $4 | 0, $0 | 0, $2 | 0); //@line 8598
  $22 = __THREW__; //@line 8599
  __THREW__ = 0; //@line 8599
  if ($22 & 1) {
   $28 = ___cxa_find_matching_catch_2() | 0; //@line 8602
   $29 = tempRet0; //@line 8603
   if ((HEAP8[$4 + 11 >> 0] | 0) >= 0) {
    $$8 = $29; //@line 8608
    $$820 = $28; //@line 8608
    ___resumeException($$820 | 0); //@line 8609
   }
   __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 8613
   $$8 = $29; //@line 8614
   $$820 = $28; //@line 8614
   ___resumeException($$820 | 0); //@line 8615
  } else {
   if ((HEAP8[$4 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 8622
    return;
   }
   __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 8625
   STACKTOP = sp; //@line 8626
   return;
  }
 }
 if ($19 | 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($5, $14); //@line 8631
  __THREW__ = 0; //@line 8632
  invoke_viii(17, $20 | 0, $5 | 0, $0 | 0); //@line 8633
  $35 = __THREW__; //@line 8634
  __THREW__ = 0; //@line 8634
  if ($35 & 1) {
   $41 = ___cxa_find_matching_catch_2() | 0; //@line 8637
   $42 = tempRet0; //@line 8638
   if ((HEAP8[$5 + 11 >> 0] | 0) >= 0) {
    $$8 = $42; //@line 8643
    $$820 = $41; //@line 8643
    ___resumeException($$820 | 0); //@line 8644
   }
   __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 8648
   $$8 = $42; //@line 8649
   $$820 = $41; //@line 8649
   ___resumeException($$820 | 0); //@line 8650
  } else {
   if ((HEAP8[$5 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 8657
    return;
   }
   __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 8660
   STACKTOP = sp; //@line 8661
   return;
  }
 }
 $48 = __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_($0 + 104 | 0, $14) | 0; //@line 8665
 if (!$48) {
  $145 = ___cxa_allocate_exception(8) | 0; //@line 8668
  __THREW__ = 0; //@line 8669
  invoke_viii(18, $3 | 0, 14330, $14 | 0); //@line 8670
  $146 = __THREW__; //@line 8671
  __THREW__ = 0; //@line 8671
  do {
   if ($146 & 1) {
    $154 = ___cxa_find_matching_catch_2() | 0; //@line 8675
    $$61854 = $154; //@line 8677
    $$655 = tempRet0; //@line 8677
   } else {
    __THREW__ = 0; //@line 8679
    $148 = invoke_iii(59, $3 | 0, 14349) | 0; //@line 8680
    $149 = __THREW__; //@line 8681
    __THREW__ = 0; //@line 8681
    if ($149 & 1) {
     $156 = ___cxa_find_matching_catch_2() | 0; //@line 8684
     $$1 = 1; //@line 8686
     $$5 = tempRet0; //@line 8686
     $$517 = $156; //@line 8686
    } else {
     HEAP32[$$byval_copy >> 2] = HEAP32[$148 >> 2]; //@line 8688
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$148 + 4 >> 2]; //@line 8688
     HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$148 + 8 >> 2]; //@line 8688
     HEAP32[$148 >> 2] = 0; //@line 8689
     HEAP32[$148 + 4 >> 2] = 0; //@line 8689
     HEAP32[$148 + 8 >> 2] = 0; //@line 8689
     __THREW__ = 0; //@line 8690
     invoke_vii(127, $145 | 0, $$byval_copy | 0); //@line 8691
     $151 = __THREW__; //@line 8692
     __THREW__ = 0; //@line 8692
     if ($151 & 1) {
      $$0 = 1; //@line 8695
     } else {
      __THREW__ = 0; //@line 8697
      invoke_viii(16, $145 | 0, 2824, 242); //@line 8698
      __THREW__ = 0; //@line 8699
      $$0 = 0; //@line 8700
     }
     $158 = ___cxa_find_matching_catch_2() | 0; //@line 8702
     $159 = tempRet0; //@line 8703
     if ((HEAP8[$$byval_copy + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 8709
      $$1 = $$0; //@line 8710
      $$5 = $159; //@line 8710
      $$517 = $158; //@line 8710
     } else {
      $$1 = $$0; //@line 8712
      $$5 = $159; //@line 8712
      $$517 = $158; //@line 8712
     }
    }
    if ((HEAP8[$3 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 8720
     if ($$1) {
      $$61854 = $$517; //@line 8722
      $$655 = $$5; //@line 8722
      break;
     } else {
      $$8 = $$5; //@line 8725
      $$820 = $$517; //@line 8725
     }
     ___resumeException($$820 | 0); //@line 8727
    } else {
     if ($$1) {
      $$61854 = $$517; //@line 8731
      $$655 = $$5; //@line 8731
      break;
     } else {
      $$8 = $$5; //@line 8734
      $$820 = $$517; //@line 8734
     }
     ___resumeException($$820 | 0); //@line 8736
    }
   }
  } while (0);
  ___cxa_free_exception($145 | 0); //@line 8741
  $$8 = $$655; //@line 8742
  $$820 = $$61854; //@line 8742
  ___resumeException($$820 | 0); //@line 8743
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($6, $48 + 20 | 0); //@line 8747
 $51 = $6 + 12 | 0; //@line 8748
 __THREW__ = 0; //@line 8750
 invoke_vii(118, $51 | 0, $48 + 32 | 0); //@line 8751
 $53 = __THREW__; //@line 8752
 __THREW__ = 0; //@line 8752
 if ($53 & 1) {
  $55 = ___cxa_find_matching_catch_2() | 0; //@line 8755
  if ((HEAP8[$6 + 11 >> 0] | 0) >= 0) {
   ___resumeException($55 | 0); //@line 8761
  }
  __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 8765
  ___resumeException($55 | 0); //@line 8766
 }
 $63 = HEAP16[$48 + 44 >> 1] | 0; //@line 8771
 HEAP16[$6 + 24 >> 1] = $63; //@line 8772
 do {
  if (($63 & 65535) < 256) {
   HEAP32[$2 >> 2] = $6; //@line 8776
   __THREW__ = 0; //@line 8777
   invoke_vii(118, $10 | 0, $51 | 0); //@line 8778
   $120 = __THREW__; //@line 8779
   __THREW__ = 0; //@line 8779
   if ($120 & 1) {
    $133 = ___cxa_find_matching_catch_2() | 0; //@line 8782
    $$4 = tempRet0; //@line 8784
    $$416 = $133; //@line 8784
    break;
   }
   $122 = $11 + 11 | 0; //@line 8787
   HEAP32[$11 >> 2] = 0; //@line 8788
   HEAP32[$11 + 4 >> 2] = 0; //@line 8788
   HEAP32[$11 + 8 >> 2] = 0; //@line 8788
   __THREW__ = 0; //@line 8789
   invoke_viiii(14, $0 | 0, $10 | 0, $2 | 0, $11 | 0); //@line 8790
   $123 = __THREW__; //@line 8791
   __THREW__ = 0; //@line 8791
   if ($123 & 1) {
    $135 = ___cxa_find_matching_catch_2() | 0; //@line 8794
    $136 = tempRet0; //@line 8795
    if ((HEAP8[$122 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 8800
    }
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($10); //@line 8802
    $$4 = $136; //@line 8803
    $$416 = $135; //@line 8803
    break;
   }
   if ((HEAP8[$122 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 8810
   }
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($10); //@line 8812
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($6 + 12 | 0); //@line 8814
   if ((HEAP8[$6 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 8820
   }
   STACKTOP = sp; //@line 8822
   return;
  } else {
   __THREW__ = 0; //@line 8824
   invoke_vii(118, $7 | 0, $51 | 0); //@line 8825
   $65 = __THREW__; //@line 8826
   __THREW__ = 0; //@line 8826
   if ($65 & 1) {
    $111 = ___cxa_find_matching_catch_2() | 0; //@line 8829
    $$211 = tempRet0; //@line 8831
    $$214 = $111; //@line 8831
   } else {
    $67 = $7 + 4 | 0; //@line 8833
    $68 = HEAP32[$67 >> 2] | 0; //@line 8834
    $69 = $68 + -72 | 0; //@line 8835
    $71 = $68; //@line 8836
    L79 : do {
     HEAP32[$67 >> 2] = $71 + -72; //@line 8839
     $72 = $71 + -20 | 0; //@line 8840
     if ((HEAP8[$72 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$72 >> 2] | 0); //@line 8846
     }
     $77 = $71 + -32 | 0; //@line 8848
     $78 = HEAP32[$77 >> 2] | 0; //@line 8849
     if ($78 | 0) {
      $80 = $71 + -28 | 0; //@line 8852
      $81 = HEAP32[$80 >> 2] | 0; //@line 8853
      if (($81 | 0) == ($78 | 0)) {
       $92 = $78; //@line 8856
      } else {
       $83 = $71 + -24 | 0; //@line 8858
       $85 = $81; //@line 8859
       do {
        $84 = $85 + -72 | 0; //@line 8861
        HEAP32[$80 >> 2] = $84; //@line 8862
        __THREW__ = 0; //@line 8863
        HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 8864
        invoke_viii(13, $$byval_copy | 0, $83 | 0, $84 | 0); //@line 8865
        $86 = __THREW__; //@line 8866
        __THREW__ = 0; //@line 8866
        if ($86 & 1) {
         label = 28; //@line 8869
         break L79;
        }
        $85 = HEAP32[$80 >> 2] | 0; //@line 8872
       } while (($85 | 0) != ($78 | 0));
       $92 = HEAP32[$77 >> 2] | 0; //@line 8881
      }
      __ZdlPv($92); //@line 8883
     }
     $93 = $71 + -68 | 0; //@line 8885
     if ((HEAP8[$93 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$93 >> 2] | 0); //@line 8891
     }
     $71 = HEAP32[$67 >> 2] | 0; //@line 8893
    } while (($71 | 0) != ($69 | 0));
    if ((label | 0) == 28) {
     $90 = ___cxa_find_matching_catch_3(0) | 0; //@line 8902
     ___clang_call_terminate($90); //@line 8904
    }
    $100 = $2 + 4 | 0; //@line 8907
    $101 = $8 + 12 | 0; //@line 8908
    $102 = $9 + 11 | 0; //@line 8909
    while (1) {
     __THREW__ = 0; //@line 8911
     invoke_vii(118, $8 | 0, $7 | 0); //@line 8912
     $103 = __THREW__; //@line 8913
     __THREW__ = 0; //@line 8913
     if ($103 & 1) {
      label = 41; //@line 8916
      break;
     }
     HEAP32[$101 >> 2] = HEAP32[$100 >> 2]; //@line 8920
     HEAP32[$9 >> 2] = 0; //@line 8921
     HEAP32[$9 + 4 >> 2] = 0; //@line 8921
     HEAP32[$9 + 8 >> 2] = 0; //@line 8921
     __THREW__ = 0; //@line 8922
     invoke_viii(12, $0 | 0, $8 | 0, $9 | 0); //@line 8923
     $106 = __THREW__; //@line 8924
     __THREW__ = 0; //@line 8924
     if ($106 & 1) {
      label = 42; //@line 8927
      break;
     }
     if ((HEAP8[$102 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 8934
     }
     __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($8); //@line 8936
    }
    if ((label | 0) == 41) {
     $113 = ___cxa_find_matching_catch_2() | 0; //@line 8939
     $$110 = tempRet0; //@line 8941
     $$113 = $113; //@line 8941
    } else if ((label | 0) == 42) {
     $115 = ___cxa_find_matching_catch_2() | 0; //@line 8944
     $116 = tempRet0; //@line 8945
     if ((HEAP8[$102 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 8950
     }
     __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($8); //@line 8952
     $$110 = $116; //@line 8953
     $$113 = $115; //@line 8953
    }
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($7); //@line 8955
    $$211 = $$110; //@line 8956
    $$214 = $$113; //@line 8956
   }
   $$4 = $$211; //@line 8958
   $$416 = $$214; //@line 8958
  }
 } while (0);
 __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($6 + 12 | 0); //@line 8962
 if ((HEAP8[$6 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 8968
 }
 $$8 = $$4; //@line 8970
 $$820 = $$416; //@line 8970
 ___resumeException($$820 | 0); //@line 8971
}
function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$05398$i = 0, $$05399$i = 0, $$05399$i$us = 0, $$05399$us$i = 0, $$05399$us$i$us = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$sink$i = 0, $10 = 0, $100 = 0, $103 = 0, $106 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $132 = 0, $135 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $159 = 0.0, $162 = 0.0, $172 = 0, $175 = 0, $177 = 0, $179 = 0, $180 = 0, $186 = 0, $193 = 0, $194 = 0, $196 = 0, $198 = 0, $201 = 0, $202 = 0, $21 = 0, $210 = 0, $214 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $65 = 0, $69 = 0, $78 = 0, $84 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, dest = 0, label = 0, stop = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0; //@line 22834
 $4 = $3 << 24 >> 24 < 0; //@line 22835
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1; //@line 22840
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255; //@line 22841
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i$i = $9; //@line 22844
  $$03738$i$i$i$i$i = $10; //@line 22844
  $$040$i$i$i$i$i = $10; //@line 22844
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 22847
   $$03738$i$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i, 1540483477) | 0); //@line 22852
   $$040$i$i$i$i$i = $$040$i$i$i$i$i + -4 | 0; //@line 22854
   if ($$040$i$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i$i = $$03639$i$i$i$i$i + 4 | 0; //@line 22857
   }
  }
  $21 = $10 + -4 | 0; //@line 22862
  $22 = $21 & -4; //@line 22863
  $$0$lcssa$i$i$i$i$i = $21 - $22 | 0; //@line 22867
  $$036$lcssa$i$i$i$i$i = $9 + ($22 + 4) | 0; //@line 22867
  $$037$lcssa$i$i$i$i$i = $$03738$i$i$i$i$i; //@line 22867
 } else {
  $$0$lcssa$i$i$i$i$i = $10; //@line 22869
  $$036$lcssa$i$i$i$i$i = $9; //@line 22869
  $$037$lcssa$i$i$i$i$i = $10; //@line 22869
 }
 switch ($$0$lcssa$i$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i; //@line 22878
   label = 6; //@line 22879
   break;
  }
 case 2:
  {
   $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 22883
   label = 6; //@line 22884
   break;
  }
 case 1:
  {
   $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 22888
   label = 7; //@line 22889
   break;
  }
 default:
  {
   $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 22893
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i; //@line 22902
  label = 7; //@line 22903
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i$i = Math_imul($$2$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i >> 0], 1540483477) | 0; //@line 22910
 }
 $41 = Math_imul($$3$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i, 1540483477) | 0; //@line 22914
 $43 = $41 >>> 15 ^ $41; //@line 22916
 $44 = $0 + 4 | 0; //@line 22917
 $45 = HEAP32[$44 >> 2] | 0; //@line 22918
 $46 = ($45 | 0) == 0; //@line 22919
 L13 : do {
  if ($46) {
   $$054$i = 0; //@line 22922
  } else {
   $47 = $45 + -1 | 0; //@line 22924
   $49 = ($47 & $45 | 0) == 0; //@line 22926
   if ($49) {
    $55 = $43 & $47; //@line 22929
   } else {
    if ($43 >>> 0 < $45 >>> 0) {
     $55 = $43; //@line 22933
    } else {
     $55 = ($43 >>> 0) % ($45 >>> 0) | 0; //@line 22936
    }
   }
   $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0; //@line 22941
   if (!$56) {
    $$054$i = $55; //@line 22944
   } else {
    $$05398$i = HEAP32[$56 >> 2] | 0; //@line 22946
    if (!$$05398$i) {
     $$054$i = $55; //@line 22949
    } else {
     $59 = ($10 | 0) == 0; //@line 22951
     if ($49) {
      if ($59) {
       $$05399$us$i$us = $$05398$i; //@line 22954
       while (1) {
        $78 = HEAP32[$$05399$us$i$us + 4 >> 2] | 0; //@line 22957
        if (!(($78 | 0) == ($43 | 0) | ($78 & $47 | 0) == ($55 | 0))) {
         $$054$i = $55; //@line 22963
         break L13;
        }
        $84 = HEAP8[$$05399$us$i$us + 8 + 11 >> 0] | 0; //@line 22968
        if (!(($84 << 24 >> 24 < 0 ? HEAP32[$$05399$us$i$us + 12 >> 2] | 0 : $84 & 255) | 0)) {
         $$1$i = $$05399$us$i$us; //@line 22976
         break;
        }
        $$05399$us$i$us = HEAP32[$$05399$us$i$us >> 2] | 0; //@line 22979
        if (!$$05399$us$i$us) {
         $$054$i = $55; //@line 22982
         break L13;
        }
       }
       $214 = $$1$i + 24 | 0; //@line 22988
       return $214 | 0; //@line 22989
      } else {
       $$05399$us$i = $$05398$i; //@line 22991
      }
      L30 : while (1) {
       $93 = HEAP32[$$05399$us$i + 4 >> 2] | 0; //@line 22995
       if (!(($93 | 0) == ($43 | 0) | ($93 & $47 | 0) == ($55 | 0))) {
        $$054$i = $55; //@line 23001
        break L13;
       }
       $97 = $$05399$us$i + 8 | 0; //@line 23004
       $99 = HEAP8[$97 + 11 >> 0] | 0; //@line 23006
       $100 = $99 << 24 >> 24 < 0; //@line 23007
       $103 = $99 & 255; //@line 23010
       do {
        if ((($100 ? HEAP32[$$05399$us$i + 12 >> 2] | 0 : $103) | 0) == ($10 | 0)) {
         $106 = HEAP32[$97 >> 2] | 0; //@line 23015
         if ($100) {
          if (!(_memcmp($106, $9, $10) | 0)) {
           $$1$i = $$05399$us$i; //@line 23020
           label = 69; //@line 23021
           break L30;
          } else {
           break;
          }
         }
         if ((HEAP8[$9 >> 0] | 0) == ($106 & 255) << 24 >> 24) {
          $$02026$i$i4$i$us$i = $97; //@line 23032
          $$02125$i$i5$i$us$i = $103; //@line 23032
          $$027$i$i3$i$us$i = $9; //@line 23032
          do {
           $$02125$i$i5$i$us$i = $$02125$i$i5$i$us$i + -1 | 0; //@line 23034
           $$02026$i$i4$i$us$i = $$02026$i$i4$i$us$i + 1 | 0; //@line 23035
           if (!$$02125$i$i5$i$us$i) {
            $$1$i = $$05399$us$i; //@line 23038
            label = 69; //@line 23039
            break L30;
           }
           $$027$i$i3$i$us$i = $$027$i$i3$i$us$i + 1 | 0; //@line 23042
          } while ((HEAP8[$$02026$i$i4$i$us$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i >> 0] | 0));
         }
        }
       } while (0);
       $$05399$us$i = HEAP32[$$05399$us$i >> 2] | 0; //@line 23055
       if (!$$05399$us$i) {
        $$054$i = $55; //@line 23058
        break L13;
       }
      }
      if ((label | 0) == 69) {
       $214 = $$1$i + 24 | 0; //@line 23065
       return $214 | 0; //@line 23066
      }
     }
     if ($59) {
      $$05399$i$us = $$05398$i; //@line 23070
      while (1) {
       $61 = HEAP32[$$05399$i$us + 4 >> 2] | 0; //@line 23073
       if (($61 | 0) != ($43 | 0)) {
        if ($61 >>> 0 < $45 >>> 0) {
         $65 = $61; //@line 23078
        } else {
         $65 = ($61 >>> 0) % ($45 >>> 0) | 0; //@line 23081
        }
        if (($65 | 0) != ($55 | 0)) {
         $$054$i = $55; //@line 23085
         break L13;
        }
       }
       $69 = HEAP8[$$05399$i$us + 8 + 11 >> 0] | 0; //@line 23091
       if (!(($69 << 24 >> 24 < 0 ? HEAP32[$$05399$i$us + 12 >> 2] | 0 : $69 & 255) | 0)) {
        $$1$i = $$05399$i$us; //@line 23099
        break;
       }
       $$05399$i$us = HEAP32[$$05399$i$us >> 2] | 0; //@line 23102
       if (!$$05399$i$us) {
        $$054$i = $55; //@line 23105
        break L13;
       }
      }
      $214 = $$1$i + 24 | 0; //@line 23111
      return $214 | 0; //@line 23112
     } else {
      $$05399$i = $$05398$i; //@line 23114
     }
     L58 : while (1) {
      $120 = HEAP32[$$05399$i + 4 >> 2] | 0; //@line 23118
      if (($120 | 0) != ($43 | 0)) {
       if ($120 >>> 0 < $45 >>> 0) {
        $124 = $120; //@line 23123
       } else {
        $124 = ($120 >>> 0) % ($45 >>> 0) | 0; //@line 23126
       }
       if (($124 | 0) != ($55 | 0)) {
        $$054$i = $55; //@line 23130
        break L13;
       }
      }
      $126 = $$05399$i + 8 | 0; //@line 23134
      $128 = HEAP8[$126 + 11 >> 0] | 0; //@line 23136
      $129 = $128 << 24 >> 24 < 0; //@line 23137
      $132 = $128 & 255; //@line 23140
      do {
       if ((($129 ? HEAP32[$$05399$i + 12 >> 2] | 0 : $132) | 0) == ($10 | 0)) {
        $135 = HEAP32[$126 >> 2] | 0; //@line 23145
        if ($129) {
         if (!(_memcmp($135, $9, $10) | 0)) {
          $$1$i = $$05399$i; //@line 23150
          label = 69; //@line 23151
          break L58;
         } else {
          break;
         }
        }
        if ((HEAP8[$9 >> 0] | 0) == ($135 & 255) << 24 >> 24) {
         $$02026$i$i4$i$i = $126; //@line 23162
         $$02125$i$i5$i$i = $132; //@line 23162
         $$027$i$i3$i$i = $9; //@line 23162
         do {
          $$02125$i$i5$i$i = $$02125$i$i5$i$i + -1 | 0; //@line 23164
          $$02026$i$i4$i$i = $$02026$i$i4$i$i + 1 | 0; //@line 23165
          if (!$$02125$i$i5$i$i) {
           $$1$i = $$05399$i; //@line 23168
           label = 69; //@line 23169
           break L58;
          }
          $$027$i$i3$i$i = $$027$i$i3$i$i + 1 | 0; //@line 23172
         } while ((HEAP8[$$02026$i$i4$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i >> 0] | 0));
        }
       }
      } while (0);
      $$05399$i = HEAP32[$$05399$i >> 2] | 0; //@line 23185
      if (!$$05399$i) {
       $$054$i = $55; //@line 23188
       break L13;
      }
     }
     if ((label | 0) == 69) {
      $214 = $$1$i + 24 | 0; //@line 23195
      return $214 | 0; //@line 23196
     }
    }
   }
  }
 } while (0);
 $148 = __Znwj(96) | 0; //@line 23202
 $149 = $148 + 8 | 0; //@line 23203
 __THREW__ = 0; //@line 23204
 invoke_vii(115, $149 | 0, $1 | 0); //@line 23205
 $150 = __THREW__; //@line 23206
 __THREW__ = 0; //@line 23206
 if ($150 & 1) {
  $152 = ___cxa_find_matching_catch_2() | 0; //@line 23209
  __ZdlPv($148); //@line 23211
  ___resumeException($152 | 0); //@line 23212
 }
 $154 = $148 + 24 | 0; //@line 23215
 dest = $154; //@line 23216
 stop = dest + 72 | 0; //@line 23216
 do {
  HEAP32[dest >> 2] = 0; //@line 23216
  dest = dest + 4 | 0; //@line 23216
 } while ((dest | 0) < (stop | 0));
 HEAP32[$148 + 4 >> 2] = $43; //@line 23218
 HEAP32[$148 >> 2] = 0; //@line 23219
 $156 = $0 + 12 | 0; //@line 23220
 $159 = +(((HEAP32[$156 >> 2] | 0) + 1 | 0) >>> 0); //@line 23223
 $162 = +HEAPF32[$0 + 16 >> 2]; //@line 23226
 do {
  if ($46 | $162 * +($45 >>> 0) < $159) {
   $172 = $45 << 1 | ($45 >>> 0 < 3 | ($45 + -1 & $45 | 0) != 0) & 1; //@line 23239
   $175 = ~~+Math_ceil(+($159 / $162)) >>> 0; //@line 23242
   __THREW__ = 0; //@line 23245
   invoke_vii(141, $0 | 0, ($172 >>> 0 < $175 >>> 0 ? $175 : $172) | 0); //@line 23246
   $177 = __THREW__; //@line 23247
   __THREW__ = 0; //@line 23247
   if ($177 & 1) {
    $186 = ___cxa_find_matching_catch_2() | 0; //@line 23250
    __ZN13CharmFunctionD2Ev($154); //@line 23252
    if ((HEAP8[$148 + 19 >> 0] | 0) >= 0) {
     __ZdlPv($148); //@line 23257
     ___resumeException($186 | 0); //@line 23258
    }
    __ZdlPv(HEAP32[$149 >> 2] | 0); //@line 23262
    __ZdlPv($148); //@line 23263
    ___resumeException($186 | 0); //@line 23264
   } else {
    $179 = HEAP32[$44 >> 2] | 0; //@line 23267
    $180 = $179 + -1 | 0; //@line 23268
    if (!($180 & $179)) {
     $$0$i = $179; //@line 23273
     $$155$i = $180 & $43; //@line 23273
     break;
    }
    if ($43 >>> 0 < $179 >>> 0) {
     $$0$i = $179; //@line 23278
     $$155$i = $43; //@line 23278
     break;
    }
    $$0$i = $179; //@line 23282
    $$155$i = ($43 >>> 0) % ($179 >>> 0) | 0; //@line 23282
    break;
   }
  } else {
   $$0$i = $45; //@line 23286
   $$155$i = $$054$i; //@line 23286
  }
 } while (0);
 $193 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0; //@line 23290
 $194 = HEAP32[$193 >> 2] | 0; //@line 23291
 if (!$194) {
  $196 = $0 + 8 | 0; //@line 23294
  HEAP32[$148 >> 2] = HEAP32[$196 >> 2]; //@line 23296
  HEAP32[$196 >> 2] = $148; //@line 23297
  HEAP32[$193 >> 2] = $196; //@line 23298
  $198 = HEAP32[$148 >> 2] | 0; //@line 23299
  if ($198 | 0) {
   $201 = HEAP32[$198 + 4 >> 2] | 0; //@line 23303
   $202 = $$0$i + -1 | 0; //@line 23304
   if (!($202 & $$0$i)) {
    $210 = $201 & $202; //@line 23309
   } else {
    if ($201 >>> 0 < $$0$i >>> 0) {
     $210 = $201; //@line 23313
    } else {
     $210 = ($201 >>> 0) % ($$0$i >>> 0) | 0; //@line 23316
    }
   }
   $$sink$i = (HEAP32[$0 >> 2] | 0) + ($210 << 2) | 0; //@line 23321
   label = 67; //@line 23322
  }
 } else {
  HEAP32[$148 >> 2] = HEAP32[$194 >> 2]; //@line 23326
  $$sink$i = $194; //@line 23327
  label = 67; //@line 23328
 }
 if ((label | 0) == 67) {
  HEAP32[$$sink$i >> 2] = $148; //@line 23331
 }
 HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1; //@line 23335
 $$1$i = $148; //@line 23336
 $214 = $$1$i + 24 | 0; //@line 23337
 return $214 | 0; //@line 23338
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$098$0 = 0, $10 = 0, $103 = 0, $107 = 0, $11 = 0, $111 = 0, $116 = 0, $117 = 0, $12 = 0, $122 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $49 = 0, $53 = 0, $58 = 0, $59 = 0, $64 = 0, $66 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 41282
 STACKTOP = STACKTOP + 144 | 0; //@line 41283
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 41283
 $$byval_copy30 = sp + 128 | 0; //@line 41284
 $$byval_copy26 = sp + 112 | 0; //@line 41285
 $8 = sp + 124 | 0; //@line 41286
 $9 = sp + 120 | 0; //@line 41287
 $10 = sp + 116 | 0; //@line 41288
 $11 = sp + 108 | 0; //@line 41289
 $12 = sp + 104 | 0; //@line 41290
 $13 = sp + 100 | 0; //@line 41291
 $14 = sp + 96 | 0; //@line 41292
 $15 = sp + 92 | 0; //@line 41293
 $16 = sp + 88 | 0; //@line 41294
 $17 = sp + 84 | 0; //@line 41295
 $18 = sp + 80 | 0; //@line 41296
 $19 = sp + 76 | 0; //@line 41297
 $20 = sp + 72 | 0; //@line 41298
 $21 = sp + 68 | 0; //@line 41299
 $22 = sp + 64 | 0; //@line 41300
 $23 = sp + 60 | 0; //@line 41301
 $24 = sp + 56 | 0; //@line 41302
 $25 = sp + 52 | 0; //@line 41303
 $26 = sp + 48 | 0; //@line 41304
 $27 = sp + 44 | 0; //@line 41305
 $28 = sp + 40 | 0; //@line 41306
 $29 = sp + 36 | 0; //@line 41307
 $30 = sp + 32 | 0; //@line 41308
 $31 = sp + 28 | 0; //@line 41309
 $32 = sp + 24 | 0; //@line 41310
 $33 = sp + 20 | 0; //@line 41311
 $34 = sp + 16 | 0; //@line 41312
 $35 = sp + 12 | 0; //@line 41313
 $36 = sp + 8 | 0; //@line 41314
 $37 = sp + 4 | 0; //@line 41315
 $38 = sp; //@line 41316
 HEAP32[$4 >> 2] = 0; //@line 41317
 __ZNKSt3__28ios_base6getlocEv($$byval_copy30, $3); //@line 41318
 __THREW__ = 0; //@line 41319
 $39 = invoke_iii(63, $$byval_copy30 | 0, 35544) | 0; //@line 41320
 $40 = __THREW__; //@line 41321
 __THREW__ = 0; //@line 41321
 if ($40 & 1) {
  $43 = ___cxa_find_matching_catch_2() | 0; //@line 41324
  __ZNSt3__26localeD2Ev($$byval_copy30); //@line 41326
  ___resumeException($43 | 0); //@line 41327
 }
 __ZNSt3__26localeD2Ev($$byval_copy30); //@line 41330
 do {
  switch ($6 << 24 >> 24 | 0) {
  case 65:
  case 97:
   {
    HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 41337
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2]; //@line 41338
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39); //@line 41339
    label = 28; //@line 41340
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    HEAP32[$9 >> 2] = HEAP32[$2 >> 2]; //@line 41346
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$9 >> 2]; //@line 41347
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39); //@line 41348
    label = 28; //@line 41349
    break;
   }
  case 99:
   {
    $49 = $0 + 8 | 0; //@line 41353
    $53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 12 >> 2] & 255]($49) | 0; //@line 41357
    HEAP32[$10 >> 2] = HEAP32[$1 >> 2]; //@line 41359
    HEAP32[$11 >> 2] = HEAP32[$2 >> 2]; //@line 41361
    $58 = HEAP8[$53 + 8 + 3 >> 0] | 0; //@line 41364
    $59 = $58 << 24 >> 24 < 0; //@line 41365
    $64 = $59 ? HEAP32[$53 >> 2] | 0 : $53; //@line 41370
    $66 = $64 + (($59 ? HEAP32[$53 + 4 >> 2] | 0 : $58 & 255) << 2) | 0; //@line 41372
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$10 >> 2]; //@line 41373
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2]; //@line 41374
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $64, $66) | 0; //@line 41376
    label = 28; //@line 41377
    break;
   }
  case 101:
  case 100:
   {
    HEAP32[$12 >> 2] = HEAP32[$2 >> 2]; //@line 41383
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2]; //@line 41384
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 12 | 0, $1, $$byval_copy30, $4, $39); //@line 41385
    label = 28; //@line 41386
    break;
   }
  case 68:
   {
    HEAP32[$13 >> 2] = HEAP32[$1 >> 2]; //@line 41391
    HEAP32[$14 >> 2] = HEAP32[$2 >> 2]; //@line 41393
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$13 >> 2]; //@line 41394
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2]; //@line 41395
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 11728, 11760) | 0; //@line 41397
    label = 28; //@line 41398
    break;
   }
  case 70:
   {
    HEAP32[$15 >> 2] = HEAP32[$1 >> 2]; //@line 41403
    HEAP32[$16 >> 2] = HEAP32[$2 >> 2]; //@line 41405
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$15 >> 2]; //@line 41406
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2]; //@line 41407
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 11760, 11792) | 0; //@line 41409
    label = 28; //@line 41410
    break;
   }
  case 72:
   {
    HEAP32[$17 >> 2] = HEAP32[$2 >> 2]; //@line 41416
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2]; //@line 41417
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39); //@line 41418
    label = 28; //@line 41419
    break;
   }
  case 73:
   {
    HEAP32[$18 >> 2] = HEAP32[$2 >> 2]; //@line 41425
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$18 >> 2]; //@line 41426
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39); //@line 41427
    label = 28; //@line 41428
    break;
   }
  case 106:
   {
    HEAP32[$19 >> 2] = HEAP32[$2 >> 2]; //@line 41434
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2]; //@line 41435
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 28 | 0, $1, $$byval_copy30, $4, $39); //@line 41436
    label = 28; //@line 41437
    break;
   }
  case 109:
   {
    HEAP32[$20 >> 2] = HEAP32[$2 >> 2]; //@line 41443
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$20 >> 2]; //@line 41444
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39); //@line 41445
    label = 28; //@line 41446
    break;
   }
  case 77:
   {
    HEAP32[$21 >> 2] = HEAP32[$2 >> 2]; //@line 41452
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2]; //@line 41453
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 4 | 0, $1, $$byval_copy30, $4, $39); //@line 41454
    label = 28; //@line 41455
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[$22 >> 2] = HEAP32[$2 >> 2]; //@line 41460
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2]; //@line 41461
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $$byval_copy30, $4, $39); //@line 41462
    label = 28; //@line 41463
    break;
   }
  case 112:
   {
    HEAP32[$23 >> 2] = HEAP32[$2 >> 2]; //@line 41469
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$23 >> 2]; //@line 41470
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39); //@line 41471
    label = 28; //@line 41472
    break;
   }
  case 114:
   {
    HEAP32[$24 >> 2] = HEAP32[$1 >> 2]; //@line 41477
    HEAP32[$25 >> 2] = HEAP32[$2 >> 2]; //@line 41479
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$24 >> 2]; //@line 41480
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2]; //@line 41481
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 11792, 11836) | 0; //@line 41483
    label = 28; //@line 41484
    break;
   }
  case 82:
   {
    HEAP32[$26 >> 2] = HEAP32[$1 >> 2]; //@line 41489
    HEAP32[$27 >> 2] = HEAP32[$2 >> 2]; //@line 41491
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2]; //@line 41492
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2]; //@line 41493
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 11836, 11856) | 0; //@line 41495
    label = 28; //@line 41496
    break;
   }
  case 83:
   {
    HEAP32[$28 >> 2] = HEAP32[$2 >> 2]; //@line 41501
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$28 >> 2]; //@line 41502
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5, $1, $$byval_copy30, $4, $39); //@line 41503
    label = 28; //@line 41504
    break;
   }
  case 84:
   {
    HEAP32[$29 >> 2] = HEAP32[$1 >> 2]; //@line 41509
    HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 41511
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$29 >> 2]; //@line 41512
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2]; //@line 41513
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 11856, 11888) | 0; //@line 41515
    label = 28; //@line 41516
    break;
   }
  case 119:
   {
    HEAP32[$31 >> 2] = HEAP32[$2 >> 2]; //@line 41522
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2]; //@line 41523
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39); //@line 41524
    label = 28; //@line 41525
    break;
   }
  case 120:
   {
    $103 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 41531
    HEAP32[$32 >> 2] = HEAP32[$1 >> 2]; //@line 41533
    HEAP32[$33 >> 2] = HEAP32[$2 >> 2]; //@line 41535
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$32 >> 2]; //@line 41536
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$33 >> 2]; //@line 41537
    $$sroa$098$0 = FUNCTION_TABLE_iiiiiii[$103 & 63]($0, $$byval_copy26, $$byval_copy30, $3, $4, $5) | 0; //@line 41539
    break;
   }
  case 88:
   {
    $107 = $0 + 8 | 0; //@line 41543
    $111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 24 >> 2] & 255]($107) | 0; //@line 41547
    HEAP32[$34 >> 2] = HEAP32[$1 >> 2]; //@line 41549
    HEAP32[$35 >> 2] = HEAP32[$2 >> 2]; //@line 41551
    $116 = HEAP8[$111 + 8 + 3 >> 0] | 0; //@line 41554
    $117 = $116 << 24 >> 24 < 0; //@line 41555
    $122 = $117 ? HEAP32[$111 >> 2] | 0 : $111; //@line 41560
    $124 = $122 + (($117 ? HEAP32[$111 + 4 >> 2] | 0 : $116 & 255) << 2) | 0; //@line 41562
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$34 >> 2]; //@line 41563
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$35 >> 2]; //@line 41564
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $122, $124) | 0; //@line 41566
    label = 28; //@line 41567
    break;
   }
  case 121:
   {
    HEAP32[$36 >> 2] = HEAP32[$2 >> 2]; //@line 41573
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$36 >> 2]; //@line 41574
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39); //@line 41575
    label = 28; //@line 41576
    break;
   }
  case 89:
   {
    HEAP32[$37 >> 2] = HEAP32[$2 >> 2]; //@line 41582
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$37 >> 2]; //@line 41583
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39); //@line 41584
    label = 28; //@line 41585
    break;
   }
  case 37:
   {
    HEAP32[$38 >> 2] = HEAP32[$2 >> 2]; //@line 41590
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$38 >> 2]; //@line 41591
    __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $$byval_copy30, $4, $39); //@line 41592
    label = 28; //@line 41593
    break;
   }
  default:
   {
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 41599
    label = 28; //@line 41600
   }
  }
 } while (0);
 if ((label | 0) == 28) {
  $$sroa$098$0 = HEAP32[$1 >> 2] | 0; //@line 41606
 }
 STACKTOP = sp; //@line 41608
 return $$sroa$098$0 | 0; //@line 41608
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$098$0 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $110 = 0, $114 = 0, $115 = 0, $12 = 0, $120 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $49 = 0, $53 = 0, $57 = 0, $58 = 0, $63 = 0, $65 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 38463
 STACKTOP = STACKTOP + 144 | 0; //@line 38464
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 38464
 $$byval_copy30 = sp + 128 | 0; //@line 38465
 $$byval_copy26 = sp + 112 | 0; //@line 38466
 $8 = sp + 124 | 0; //@line 38467
 $9 = sp + 120 | 0; //@line 38468
 $10 = sp + 116 | 0; //@line 38469
 $11 = sp + 108 | 0; //@line 38470
 $12 = sp + 104 | 0; //@line 38471
 $13 = sp + 100 | 0; //@line 38472
 $14 = sp + 96 | 0; //@line 38473
 $15 = sp + 92 | 0; //@line 38474
 $16 = sp + 88 | 0; //@line 38475
 $17 = sp + 84 | 0; //@line 38476
 $18 = sp + 80 | 0; //@line 38477
 $19 = sp + 76 | 0; //@line 38478
 $20 = sp + 72 | 0; //@line 38479
 $21 = sp + 68 | 0; //@line 38480
 $22 = sp + 64 | 0; //@line 38481
 $23 = sp + 60 | 0; //@line 38482
 $24 = sp + 56 | 0; //@line 38483
 $25 = sp + 52 | 0; //@line 38484
 $26 = sp + 48 | 0; //@line 38485
 $27 = sp + 44 | 0; //@line 38486
 $28 = sp + 40 | 0; //@line 38487
 $29 = sp + 36 | 0; //@line 38488
 $30 = sp + 32 | 0; //@line 38489
 $31 = sp + 28 | 0; //@line 38490
 $32 = sp + 24 | 0; //@line 38491
 $33 = sp + 20 | 0; //@line 38492
 $34 = sp + 16 | 0; //@line 38493
 $35 = sp + 12 | 0; //@line 38494
 $36 = sp + 8 | 0; //@line 38495
 $37 = sp + 4 | 0; //@line 38496
 $38 = sp; //@line 38497
 HEAP32[$4 >> 2] = 0; //@line 38498
 __ZNKSt3__28ios_base6getlocEv($$byval_copy30, $3); //@line 38499
 __THREW__ = 0; //@line 38500
 $39 = invoke_iii(63, $$byval_copy30 | 0, 35512) | 0; //@line 38501
 $40 = __THREW__; //@line 38502
 __THREW__ = 0; //@line 38502
 if ($40 & 1) {
  $43 = ___cxa_find_matching_catch_2() | 0; //@line 38505
  __ZNSt3__26localeD2Ev($$byval_copy30); //@line 38507
  ___resumeException($43 | 0); //@line 38508
 }
 __ZNSt3__26localeD2Ev($$byval_copy30); //@line 38511
 do {
  switch ($6 << 24 >> 24 | 0) {
  case 65:
  case 97:
   {
    HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 38518
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2]; //@line 38519
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39); //@line 38520
    label = 28; //@line 38521
    break;
   }
  case 104:
  case 66:
  case 98:
   {
    HEAP32[$9 >> 2] = HEAP32[$2 >> 2]; //@line 38527
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$9 >> 2]; //@line 38528
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39); //@line 38529
    label = 28; //@line 38530
    break;
   }
  case 99:
   {
    $49 = $0 + 8 | 0; //@line 38534
    $53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 12 >> 2] & 255]($49) | 0; //@line 38538
    HEAP32[$10 >> 2] = HEAP32[$1 >> 2]; //@line 38540
    HEAP32[$11 >> 2] = HEAP32[$2 >> 2]; //@line 38542
    $57 = HEAP8[$53 + 11 >> 0] | 0; //@line 38544
    $58 = $57 << 24 >> 24 < 0; //@line 38545
    $63 = $58 ? HEAP32[$53 >> 2] | 0 : $53; //@line 38550
    $65 = $63 + ($58 ? HEAP32[$53 + 4 >> 2] | 0 : $57 & 255) | 0; //@line 38552
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$10 >> 2]; //@line 38553
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2]; //@line 38554
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $63, $65) | 0; //@line 38556
    label = 28; //@line 38557
    break;
   }
  case 101:
  case 100:
   {
    HEAP32[$12 >> 2] = HEAP32[$2 >> 2]; //@line 38563
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2]; //@line 38564
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 12 | 0, $1, $$byval_copy30, $4, $39); //@line 38565
    label = 28; //@line 38566
    break;
   }
  case 68:
   {
    HEAP32[$13 >> 2] = HEAP32[$1 >> 2]; //@line 38571
    HEAP32[$14 >> 2] = HEAP32[$2 >> 2]; //@line 38573
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$13 >> 2]; //@line 38574
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2]; //@line 38575
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 30505, 30513) | 0; //@line 38577
    label = 28; //@line 38578
    break;
   }
  case 70:
   {
    HEAP32[$15 >> 2] = HEAP32[$1 >> 2]; //@line 38583
    HEAP32[$16 >> 2] = HEAP32[$2 >> 2]; //@line 38585
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$15 >> 2]; //@line 38586
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2]; //@line 38587
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 30513, 30521) | 0; //@line 38589
    label = 28; //@line 38590
    break;
   }
  case 72:
   {
    HEAP32[$17 >> 2] = HEAP32[$2 >> 2]; //@line 38596
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2]; //@line 38597
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39); //@line 38598
    label = 28; //@line 38599
    break;
   }
  case 73:
   {
    HEAP32[$18 >> 2] = HEAP32[$2 >> 2]; //@line 38605
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$18 >> 2]; //@line 38606
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39); //@line 38607
    label = 28; //@line 38608
    break;
   }
  case 106:
   {
    HEAP32[$19 >> 2] = HEAP32[$2 >> 2]; //@line 38614
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2]; //@line 38615
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 28 | 0, $1, $$byval_copy30, $4, $39); //@line 38616
    label = 28; //@line 38617
    break;
   }
  case 109:
   {
    HEAP32[$20 >> 2] = HEAP32[$2 >> 2]; //@line 38623
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$20 >> 2]; //@line 38624
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39); //@line 38625
    label = 28; //@line 38626
    break;
   }
  case 77:
   {
    HEAP32[$21 >> 2] = HEAP32[$2 >> 2]; //@line 38632
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2]; //@line 38633
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 4 | 0, $1, $$byval_copy30, $4, $39); //@line 38634
    label = 28; //@line 38635
    break;
   }
  case 116:
  case 110:
   {
    HEAP32[$22 >> 2] = HEAP32[$2 >> 2]; //@line 38640
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2]; //@line 38641
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $$byval_copy30, $4, $39); //@line 38642
    label = 28; //@line 38643
    break;
   }
  case 112:
   {
    HEAP32[$23 >> 2] = HEAP32[$2 >> 2]; //@line 38649
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$23 >> 2]; //@line 38650
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39); //@line 38651
    label = 28; //@line 38652
    break;
   }
  case 114:
   {
    HEAP32[$24 >> 2] = HEAP32[$1 >> 2]; //@line 38657
    HEAP32[$25 >> 2] = HEAP32[$2 >> 2]; //@line 38659
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$24 >> 2]; //@line 38660
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2]; //@line 38661
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 30521, 30532) | 0; //@line 38663
    label = 28; //@line 38664
    break;
   }
  case 82:
   {
    HEAP32[$26 >> 2] = HEAP32[$1 >> 2]; //@line 38669
    HEAP32[$27 >> 2] = HEAP32[$2 >> 2]; //@line 38671
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2]; //@line 38672
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2]; //@line 38673
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 30532, 30537) | 0; //@line 38675
    label = 28; //@line 38676
    break;
   }
  case 83:
   {
    HEAP32[$28 >> 2] = HEAP32[$2 >> 2]; //@line 38681
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$28 >> 2]; //@line 38682
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5, $1, $$byval_copy30, $4, $39); //@line 38683
    label = 28; //@line 38684
    break;
   }
  case 84:
   {
    HEAP32[$29 >> 2] = HEAP32[$1 >> 2]; //@line 38689
    HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 38691
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$29 >> 2]; //@line 38692
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2]; //@line 38693
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 30537, 30545) | 0; //@line 38695
    label = 28; //@line 38696
    break;
   }
  case 119:
   {
    HEAP32[$31 >> 2] = HEAP32[$2 >> 2]; //@line 38702
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2]; //@line 38703
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39); //@line 38704
    label = 28; //@line 38705
    break;
   }
  case 120:
   {
    $102 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 38711
    HEAP32[$32 >> 2] = HEAP32[$1 >> 2]; //@line 38713
    HEAP32[$33 >> 2] = HEAP32[$2 >> 2]; //@line 38715
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$32 >> 2]; //@line 38716
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$33 >> 2]; //@line 38717
    $$sroa$098$0 = FUNCTION_TABLE_iiiiiii[$102 & 63]($0, $$byval_copy26, $$byval_copy30, $3, $4, $5) | 0; //@line 38719
    break;
   }
  case 88:
   {
    $106 = $0 + 8 | 0; //@line 38723
    $110 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 24 >> 2] & 255]($106) | 0; //@line 38727
    HEAP32[$34 >> 2] = HEAP32[$1 >> 2]; //@line 38729
    HEAP32[$35 >> 2] = HEAP32[$2 >> 2]; //@line 38731
    $114 = HEAP8[$110 + 11 >> 0] | 0; //@line 38733
    $115 = $114 << 24 >> 24 < 0; //@line 38734
    $120 = $115 ? HEAP32[$110 >> 2] | 0 : $110; //@line 38739
    $122 = $120 + ($115 ? HEAP32[$110 + 4 >> 2] | 0 : $114 & 255) | 0; //@line 38741
    HEAP32[$$byval_copy26 >> 2] = HEAP32[$34 >> 2]; //@line 38742
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$35 >> 2]; //@line 38743
    HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $120, $122) | 0; //@line 38745
    label = 28; //@line 38746
    break;
   }
  case 121:
   {
    HEAP32[$36 >> 2] = HEAP32[$2 >> 2]; //@line 38752
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$36 >> 2]; //@line 38753
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39); //@line 38754
    label = 28; //@line 38755
    break;
   }
  case 89:
   {
    HEAP32[$37 >> 2] = HEAP32[$2 >> 2]; //@line 38761
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$37 >> 2]; //@line 38762
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39); //@line 38763
    label = 28; //@line 38764
    break;
   }
  case 37:
   {
    HEAP32[$38 >> 2] = HEAP32[$2 >> 2]; //@line 38769
    HEAP32[$$byval_copy30 >> 2] = HEAP32[$38 >> 2]; //@line 38770
    __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $$byval_copy30, $4, $39); //@line 38771
    label = 28; //@line 38772
    break;
   }
  default:
   {
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 38778
    label = 28; //@line 38779
   }
  }
 } while (0);
 if ((label | 0) == 28) {
  $$sroa$098$0 = HEAP32[$1 >> 2] | 0; //@line 38785
 }
 STACKTOP = sp; //@line 38787
 return $$sroa$098$0 | 0; //@line 38787
}
function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$05398$i = 0, $$05399$i = 0, $$05399$i$us = 0, $$05399$us$i = 0, $$05399$us$i$us = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$sink$i = 0, $10 = 0, $100 = 0, $103 = 0, $106 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $132 = 0, $135 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $159 = 0.0, $162 = 0.0, $172 = 0, $175 = 0, $177 = 0, $179 = 0, $180 = 0, $186 = 0, $189 = 0, $190 = 0, $192 = 0, $194 = 0, $197 = 0, $198 = 0, $206 = 0, $21 = 0, $210 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $65 = 0, $69 = 0, $78 = 0, $84 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0; //@line 21361
 $4 = $3 << 24 >> 24 < 0; //@line 21362
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1; //@line 21367
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255; //@line 21368
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i$i = $9; //@line 21371
  $$03738$i$i$i$i$i = $10; //@line 21371
  $$040$i$i$i$i$i = $10; //@line 21371
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 21374
   $$03738$i$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i, 1540483477) | 0); //@line 21379
   $$040$i$i$i$i$i = $$040$i$i$i$i$i + -4 | 0; //@line 21381
   if ($$040$i$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i$i = $$03639$i$i$i$i$i + 4 | 0; //@line 21384
   }
  }
  $21 = $10 + -4 | 0; //@line 21389
  $22 = $21 & -4; //@line 21390
  $$0$lcssa$i$i$i$i$i = $21 - $22 | 0; //@line 21394
  $$036$lcssa$i$i$i$i$i = $9 + ($22 + 4) | 0; //@line 21394
  $$037$lcssa$i$i$i$i$i = $$03738$i$i$i$i$i; //@line 21394
 } else {
  $$0$lcssa$i$i$i$i$i = $10; //@line 21396
  $$036$lcssa$i$i$i$i$i = $9; //@line 21396
  $$037$lcssa$i$i$i$i$i = $10; //@line 21396
 }
 switch ($$0$lcssa$i$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i; //@line 21405
   label = 6; //@line 21406
   break;
  }
 case 2:
  {
   $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 21410
   label = 6; //@line 21411
   break;
  }
 case 1:
  {
   $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 21415
   label = 7; //@line 21416
   break;
  }
 default:
  {
   $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 21420
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i; //@line 21429
  label = 7; //@line 21430
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i$i = Math_imul($$2$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i >> 0], 1540483477) | 0; //@line 21437
 }
 $41 = Math_imul($$3$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i, 1540483477) | 0; //@line 21441
 $43 = $41 >>> 15 ^ $41; //@line 21443
 $44 = $0 + 4 | 0; //@line 21444
 $45 = HEAP32[$44 >> 2] | 0; //@line 21445
 $46 = ($45 | 0) == 0; //@line 21446
 L13 : do {
  if ($46) {
   $$054$i = 0; //@line 21449
  } else {
   $47 = $45 + -1 | 0; //@line 21451
   $49 = ($47 & $45 | 0) == 0; //@line 21453
   if ($49) {
    $55 = $43 & $47; //@line 21456
   } else {
    if ($43 >>> 0 < $45 >>> 0) {
     $55 = $43; //@line 21460
    } else {
     $55 = ($43 >>> 0) % ($45 >>> 0) | 0; //@line 21463
    }
   }
   $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0; //@line 21468
   if (!$56) {
    $$054$i = $55; //@line 21471
   } else {
    $$05398$i = HEAP32[$56 >> 2] | 0; //@line 21473
    if (!$$05398$i) {
     $$054$i = $55; //@line 21476
    } else {
     $59 = ($10 | 0) == 0; //@line 21478
     if ($49) {
      if ($59) {
       $$05399$us$i$us = $$05398$i; //@line 21481
       while (1) {
        $78 = HEAP32[$$05399$us$i$us + 4 >> 2] | 0; //@line 21484
        if (!(($78 | 0) == ($43 | 0) | ($78 & $47 | 0) == ($55 | 0))) {
         $$054$i = $55; //@line 21490
         break L13;
        }
        $84 = HEAP8[$$05399$us$i$us + 8 + 11 >> 0] | 0; //@line 21495
        if (!(($84 << 24 >> 24 < 0 ? HEAP32[$$05399$us$i$us + 12 >> 2] | 0 : $84 & 255) | 0)) {
         $$1$i = $$05399$us$i$us; //@line 21503
         break;
        }
        $$05399$us$i$us = HEAP32[$$05399$us$i$us >> 2] | 0; //@line 21506
        if (!$$05399$us$i$us) {
         $$054$i = $55; //@line 21509
         break L13;
        }
       }
       $210 = $$1$i + 20 | 0; //@line 21515
       return $210 | 0; //@line 21516
      } else {
       $$05399$us$i = $$05398$i; //@line 21518
      }
      L30 : while (1) {
       $93 = HEAP32[$$05399$us$i + 4 >> 2] | 0; //@line 21522
       if (!(($93 | 0) == ($43 | 0) | ($93 & $47 | 0) == ($55 | 0))) {
        $$054$i = $55; //@line 21528
        break L13;
       }
       $97 = $$05399$us$i + 8 | 0; //@line 21531
       $99 = HEAP8[$97 + 11 >> 0] | 0; //@line 21533
       $100 = $99 << 24 >> 24 < 0; //@line 21534
       $103 = $99 & 255; //@line 21537
       do {
        if ((($100 ? HEAP32[$$05399$us$i + 12 >> 2] | 0 : $103) | 0) == ($10 | 0)) {
         $106 = HEAP32[$97 >> 2] | 0; //@line 21542
         if ($100) {
          if (!(_memcmp($106, $9, $10) | 0)) {
           $$1$i = $$05399$us$i; //@line 21547
           label = 67; //@line 21548
           break L30;
          } else {
           break;
          }
         }
         if ((HEAP8[$9 >> 0] | 0) == ($106 & 255) << 24 >> 24) {
          $$02026$i$i4$i$us$i = $97; //@line 21559
          $$02125$i$i5$i$us$i = $103; //@line 21559
          $$027$i$i3$i$us$i = $9; //@line 21559
          do {
           $$02125$i$i5$i$us$i = $$02125$i$i5$i$us$i + -1 | 0; //@line 21561
           $$02026$i$i4$i$us$i = $$02026$i$i4$i$us$i + 1 | 0; //@line 21562
           if (!$$02125$i$i5$i$us$i) {
            $$1$i = $$05399$us$i; //@line 21565
            label = 67; //@line 21566
            break L30;
           }
           $$027$i$i3$i$us$i = $$027$i$i3$i$us$i + 1 | 0; //@line 21569
          } while ((HEAP8[$$02026$i$i4$i$us$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i >> 0] | 0));
         }
        }
       } while (0);
       $$05399$us$i = HEAP32[$$05399$us$i >> 2] | 0; //@line 21582
       if (!$$05399$us$i) {
        $$054$i = $55; //@line 21585
        break L13;
       }
      }
      if ((label | 0) == 67) {
       $210 = $$1$i + 20 | 0; //@line 21592
       return $210 | 0; //@line 21593
      }
     }
     if ($59) {
      $$05399$i$us = $$05398$i; //@line 21597
      while (1) {
       $61 = HEAP32[$$05399$i$us + 4 >> 2] | 0; //@line 21600
       if (($61 | 0) != ($43 | 0)) {
        if ($61 >>> 0 < $45 >>> 0) {
         $65 = $61; //@line 21605
        } else {
         $65 = ($61 >>> 0) % ($45 >>> 0) | 0; //@line 21608
        }
        if (($65 | 0) != ($55 | 0)) {
         $$054$i = $55; //@line 21612
         break L13;
        }
       }
       $69 = HEAP8[$$05399$i$us + 8 + 11 >> 0] | 0; //@line 21618
       if (!(($69 << 24 >> 24 < 0 ? HEAP32[$$05399$i$us + 12 >> 2] | 0 : $69 & 255) | 0)) {
        $$1$i = $$05399$i$us; //@line 21626
        break;
       }
       $$05399$i$us = HEAP32[$$05399$i$us >> 2] | 0; //@line 21629
       if (!$$05399$i$us) {
        $$054$i = $55; //@line 21632
        break L13;
       }
      }
      $210 = $$1$i + 20 | 0; //@line 21638
      return $210 | 0; //@line 21639
     } else {
      $$05399$i = $$05398$i; //@line 21641
     }
     L58 : while (1) {
      $120 = HEAP32[$$05399$i + 4 >> 2] | 0; //@line 21645
      if (($120 | 0) != ($43 | 0)) {
       if ($120 >>> 0 < $45 >>> 0) {
        $124 = $120; //@line 21650
       } else {
        $124 = ($120 >>> 0) % ($45 >>> 0) | 0; //@line 21653
       }
       if (($124 | 0) != ($55 | 0)) {
        $$054$i = $55; //@line 21657
        break L13;
       }
      }
      $126 = $$05399$i + 8 | 0; //@line 21661
      $128 = HEAP8[$126 + 11 >> 0] | 0; //@line 21663
      $129 = $128 << 24 >> 24 < 0; //@line 21664
      $132 = $128 & 255; //@line 21667
      do {
       if ((($129 ? HEAP32[$$05399$i + 12 >> 2] | 0 : $132) | 0) == ($10 | 0)) {
        $135 = HEAP32[$126 >> 2] | 0; //@line 21672
        if ($129) {
         if (!(_memcmp($135, $9, $10) | 0)) {
          $$1$i = $$05399$i; //@line 21677
          label = 67; //@line 21678
          break L58;
         } else {
          break;
         }
        }
        if ((HEAP8[$9 >> 0] | 0) == ($135 & 255) << 24 >> 24) {
         $$02026$i$i4$i$i = $126; //@line 21689
         $$02125$i$i5$i$i = $132; //@line 21689
         $$027$i$i3$i$i = $9; //@line 21689
         do {
          $$02125$i$i5$i$i = $$02125$i$i5$i$i + -1 | 0; //@line 21691
          $$02026$i$i4$i$i = $$02026$i$i4$i$i + 1 | 0; //@line 21692
          if (!$$02125$i$i5$i$i) {
           $$1$i = $$05399$i; //@line 21695
           label = 67; //@line 21696
           break L58;
          }
          $$027$i$i3$i$i = $$027$i$i3$i$i + 1 | 0; //@line 21699
         } while ((HEAP8[$$02026$i$i4$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i >> 0] | 0));
        }
       }
      } while (0);
      $$05399$i = HEAP32[$$05399$i >> 2] | 0; //@line 21712
      if (!$$05399$i) {
       $$054$i = $55; //@line 21715
       break L13;
      }
     }
     if ((label | 0) == 67) {
      $210 = $$1$i + 20 | 0; //@line 21722
      return $210 | 0; //@line 21723
     }
    }
   }
  }
 } while (0);
 $148 = __Znwj(44) | 0; //@line 21729
 $149 = $148 + 8 | 0; //@line 21730
 __THREW__ = 0; //@line 21731
 invoke_vii(115, $149 | 0, $1 | 0); //@line 21732
 $150 = __THREW__; //@line 21733
 __THREW__ = 0; //@line 21733
 if ($150 & 1) {
  $152 = ___cxa_find_matching_catch_2() | 0; //@line 21736
  __ZdlPv($148); //@line 21738
  ___resumeException($152 | 0); //@line 21739
 }
 $154 = $148 + 20 | 0; //@line 21742
 HEAP32[$154 >> 2] = 0; //@line 21743
 HEAP32[$154 + 4 >> 2] = 0; //@line 21743
 HEAP32[$154 + 8 >> 2] = 0; //@line 21743
 HEAP32[$154 + 12 >> 2] = 0; //@line 21743
 HEAP32[$154 + 16 >> 2] = 0; //@line 21743
 HEAP32[$154 + 20 >> 2] = 0; //@line 21743
 HEAP32[$148 + 4 >> 2] = $43; //@line 21745
 HEAP32[$148 >> 2] = 0; //@line 21746
 $156 = $0 + 12 | 0; //@line 21747
 $159 = +(((HEAP32[$156 >> 2] | 0) + 1 | 0) >>> 0); //@line 21750
 $162 = +HEAPF32[$0 + 16 >> 2]; //@line 21753
 do {
  if ($46 | $162 * +($45 >>> 0) < $159) {
   $172 = $45 << 1 | ($45 >>> 0 < 3 | ($45 + -1 & $45 | 0) != 0) & 1; //@line 21766
   $175 = ~~+Math_ceil(+($159 / $162)) >>> 0; //@line 21769
   __THREW__ = 0; //@line 21772
   invoke_vii(139, $0 | 0, ($172 >>> 0 < $175 >>> 0 ? $175 : $172) | 0); //@line 21773
   $177 = __THREW__; //@line 21774
   __THREW__ = 0; //@line 21774
   if ($177 & 1) {
    $186 = ___cxa_find_matching_catch_2() | 0; //@line 21777
    __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureED2Ev($149); //@line 21779
    __ZdlPv($148); //@line 21780
    ___resumeException($186 | 0); //@line 21781
   }
   $179 = HEAP32[$44 >> 2] | 0; //@line 21784
   $180 = $179 + -1 | 0; //@line 21785
   if (!($180 & $179)) {
    $$0$i = $179; //@line 21790
    $$155$i = $180 & $43; //@line 21790
    break;
   }
   if ($43 >>> 0 < $179 >>> 0) {
    $$0$i = $179; //@line 21795
    $$155$i = $43; //@line 21795
   } else {
    $$0$i = $179; //@line 21798
    $$155$i = ($43 >>> 0) % ($179 >>> 0) | 0; //@line 21798
   }
  } else {
   $$0$i = $45; //@line 21801
   $$155$i = $$054$i; //@line 21801
  }
 } while (0);
 $189 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0; //@line 21805
 $190 = HEAP32[$189 >> 2] | 0; //@line 21806
 if (!$190) {
  $192 = $0 + 8 | 0; //@line 21809
  HEAP32[$148 >> 2] = HEAP32[$192 >> 2]; //@line 21811
  HEAP32[$192 >> 2] = $148; //@line 21812
  HEAP32[$189 >> 2] = $192; //@line 21813
  $194 = HEAP32[$148 >> 2] | 0; //@line 21814
  if ($194 | 0) {
   $197 = HEAP32[$194 + 4 >> 2] | 0; //@line 21818
   $198 = $$0$i + -1 | 0; //@line 21819
   if (!($198 & $$0$i)) {
    $206 = $197 & $198; //@line 21824
   } else {
    if ($197 >>> 0 < $$0$i >>> 0) {
     $206 = $197; //@line 21828
    } else {
     $206 = ($197 >>> 0) % ($$0$i >>> 0) | 0; //@line 21831
    }
   }
   $$sink$i = (HEAP32[$0 >> 2] | 0) + ($206 << 2) | 0; //@line 21836
   label = 65; //@line 21837
  }
 } else {
  HEAP32[$148 >> 2] = HEAP32[$190 >> 2]; //@line 21841
  $$sink$i = $190; //@line 21842
  label = 65; //@line 21843
 }
 if ((label | 0) == 65) {
  HEAP32[$$sink$i >> 2] = $148; //@line 21846
 }
 HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1; //@line 21850
 $$1$i = $148; //@line 21851
 $210 = $$1$i + 20 | 0; //@line 21852
 return $210 | 0; //@line 21853
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i55 = 0, $$0$i$i$i$i69 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i61 = 0, $$0$i$i2$i$i75 = 0, $$0$i$i66 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$052 = 0, $$053 = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i57 = 0, $$pre$i$i$i71 = 0, $$pre$i4$i$i63 = 0, $$pre$i4$i$i6395 = 0, $$pre$i4$i$i6396 = 0, $$sroa$050$0$copyload = 0, $10 = 0, $103 = 0, $106 = 0, $11 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $136 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $159 = 0, $16 = 0, $166 = 0, $177 = 0, $18 = 0, $189 = 0, $192 = 0, $20 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $32 = 0, $34 = 0, $36 = 0, $48 = 0, $56 = 0, $62 = 0, $63 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 42302
 STACKTOP = STACKTOP + 16 | 0; //@line 42303
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42303
 $$byval_copy1 = sp + 12 | 0; //@line 42304
 $$byval_copy = sp + 8 | 0; //@line 42305
 $8 = sp + 4 | 0; //@line 42306
 $9 = sp; //@line 42307
 __ZNKSt3__28ios_base6getlocEv($$byval_copy1, $3); //@line 42308
 __THREW__ = 0; //@line 42309
 $10 = invoke_iii(63, $$byval_copy1 | 0, 35544) | 0; //@line 42310
 $11 = __THREW__; //@line 42311
 __THREW__ = 0; //@line 42311
 if ($11 & 1) {
  $48 = ___cxa_find_matching_catch_2() | 0; //@line 42314
  __ZNSt3__26localeD2Ev($$byval_copy1); //@line 42316
  ___resumeException($48 | 0); //@line 42317
 }
 __ZNSt3__26localeD2Ev($$byval_copy1); //@line 42320
 HEAP32[$4 >> 2] = 0; //@line 42321
 $$0$ph = $6; //@line 42322
 $$pre = 0; //@line 42322
 L4 : while (1) {
  $13 = ($$0$ph | 0) != ($7 | 0); //@line 42324
  $14 = $$pre; //@line 42325
  while (1) {
   $16 = HEAP32[$1 >> 2] | 0; //@line 42329
   if (!($13 & ($14 | 0) == 0)) {
    $$pre$i$i$i71 = $16; //@line 42331
    break L4;
   }
   $18 = $16; //@line 42335
   if (!$16) {
    $145 = 0; //@line 42337
    $206 = 1; //@line 42337
    $73 = $18; //@line 42337
   } else {
    $20 = HEAP32[$16 + 12 >> 2] | 0; //@line 42340
    if (($20 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 255]($16) | 0; //@line 42349
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$20 >> 2] | 0) | 0; //@line 42353
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 42358
     $145 = 0; //@line 42359
     $206 = 1; //@line 42359
     $73 = 0; //@line 42359
    } else {
     $145 = $16; //@line 42361
     $206 = 0; //@line 42361
     $73 = $18; //@line 42361
    }
   }
   $32 = HEAP32[$2 >> 2] | 0; //@line 42364
   $34 = $32; //@line 42366
   do {
    if (!$32) {
     $$ph = $34; //@line 42369
     label = 17; //@line 42370
    } else {
     $36 = HEAP32[$32 + 12 >> 2] | 0; //@line 42373
     if (($36 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) {
      $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 255]($32) | 0; //@line 42382
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0; //@line 42386
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 42391
      $$ph = 0; //@line 42392
      label = 17; //@line 42393
      break;
     } else {
      if ($206) {
       $207 = $32; //@line 42397
       $74 = $34; //@line 42397
       break;
      } else {
       label = 61; //@line 42400
       break L4;
      }
     }
    }
   } while (0);
   if ((label | 0) == 17) {
    label = 0; //@line 42407
    if ($206) {
     label = 61; //@line 42409
     break L4;
    } else {
     $207 = 0; //@line 42412
     $74 = $$ph; //@line 42412
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 63]($10, HEAP32[$$0$ph >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    label = 21; //@line 42422
    break;
   }
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, 8192, HEAP32[$$0$ph >> 2] | 0) | 0) {
    $$0$pn = $$0$ph; //@line 42431
    label = 27; //@line 42432
    break;
   }
   $144 = $145 + 12 | 0; //@line 42435
   $146 = HEAP32[$144 >> 2] | 0; //@line 42436
   $147 = $145 + 16 | 0; //@line 42437
   if (($146 | 0) == (HEAP32[$147 >> 2] | 0)) {
    $$0$i$i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$145 >> 2] | 0) + 36 >> 2] & 255]($145) | 0; //@line 42445
   } else {
    $$0$i$i66 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$146 >> 2] | 0) | 0; //@line 42449
   }
   $159 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 127]($10, $$0$i$i66) | 0; //@line 42454
   if (($159 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 127]($10, HEAP32[$$0$ph >> 2] | 0) | 0)) {
    label = 55; //@line 42462
    break;
   }
   HEAP32[$4 >> 2] = 4; //@line 42465
   $14 = 4; //@line 42466
  }
  L36 : do {
   if ((label | 0) == 21) {
    label = 0; //@line 42470
    $56 = $$0$ph + 4 | 0; //@line 42471
    if (($56 | 0) == ($7 | 0)) {
     label = 61; //@line 42474
     break L4;
    }
    $62 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 63]($10, HEAP32[$56 >> 2] | 0, 0) | 0; //@line 42481
    switch ($62 << 24 >> 24) {
    case 48:
    case 69:
     {
      $63 = $$0$ph + 8 | 0; //@line 42484
      if (($63 | 0) == ($7 | 0)) {
       label = 61; //@line 42487
       break L4;
      }
      $$052 = $62; //@line 42495
      $$053 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 63]($10, HEAP32[$63 >> 2] | 0, 0) | 0; //@line 42495
      $77 = $56; //@line 42495
      break;
     }
    default:
     {
      $$052 = 0; //@line 42499
      $$053 = $62; //@line 42499
      $77 = $$0$ph; //@line 42499
     }
    }
    $72 = HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] | 0; //@line 42504
    HEAP32[$8 >> 2] = $73; //@line 42505
    HEAP32[$9 >> 2] = $74; //@line 42506
    HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 42507
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$9 >> 2]; //@line 42508
    HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiiiii[$72 & 15]($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $$053, $$052) | 0; //@line 42510
    $$0$ph$be = $77 + 8 | 0; //@line 42512
   } else if ((label | 0) == 27) {
    while (1) {
     label = 0; //@line 42516
     $$3 = $$0$pn + 4 | 0; //@line 42517
     if (($$3 | 0) == ($7 | 0)) {
      $$3$lcssa = $7; //@line 42520
      break;
     }
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, 8192, HEAP32[$$3 >> 2] | 0) | 0) {
      $$0$pn = $$3; //@line 42529
      label = 27; //@line 42530
     } else {
      $$3$lcssa = $$3; //@line 42532
      break;
     }
    }
    $$pre$i$i$i57 = $145; //@line 42536
    $$pre$i4$i$i63 = $207; //@line 42536
    $103 = $207; //@line 42536
    while (1) {
     if (!$$pre$i$i$i57) {
      $119 = 1; //@line 42540
      $121 = 0; //@line 42540
     } else {
      $91 = HEAP32[$$pre$i$i$i57 + 12 >> 2] | 0; //@line 42543
      if (($91 | 0) == (HEAP32[$$pre$i$i$i57 + 16 >> 2] | 0)) {
       $$0$i$i$i$i55 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i57 >> 2] | 0) + 36 >> 2] & 255]($$pre$i$i$i57) | 0; //@line 42552
      } else {
       $$0$i$i$i$i55 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$91 >> 2] | 0) | 0; //@line 42556
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i55, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 42561
       $119 = 1; //@line 42562
       $121 = 0; //@line 42562
      } else {
       $119 = 0; //@line 42564
       $121 = $$pre$i$i$i57; //@line 42564
      }
     }
     do {
      if (!$103) {
       $$pre$i4$i$i6396 = $$pre$i4$i$i63; //@line 42570
       label = 42; //@line 42571
      } else {
       $106 = HEAP32[$103 + 12 >> 2] | 0; //@line 42574
       if (($106 | 0) == (HEAP32[$103 + 16 >> 2] | 0)) {
        $$0$i$i2$i$i61 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$103 >> 2] | 0) + 36 >> 2] & 255]($103) | 0; //@line 42583
       } else {
        $$0$i$i2$i$i61 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$106 >> 2] | 0) | 0; //@line 42587
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i61, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$2 >> 2] = 0; //@line 42592
        $$pre$i4$i$i6396 = 0; //@line 42593
        label = 42; //@line 42594
        break;
       } else {
        if ($119 ^ ($$pre$i4$i$i63 | 0) == 0) {
         $$pre$i4$i$i6395 = $$pre$i4$i$i63; //@line 42600
         $208 = $$pre$i4$i$i63; //@line 42600
         break;
        } else {
         $$0$ph$be = $$3$lcssa; //@line 42603
         break L36;
        }
       }
      }
     } while (0);
     if ((label | 0) == 42) {
      label = 0; //@line 42610
      if ($119) {
       $$0$ph$be = $$3$lcssa; //@line 42612
       break L36;
      } else {
       $$pre$i4$i$i6395 = $$pre$i4$i$i6396; //@line 42615
       $208 = 0; //@line 42615
      }
     }
     $120 = $121 + 12 | 0; //@line 42618
     $122 = HEAP32[$120 >> 2] | 0; //@line 42619
     $123 = $121 + 16 | 0; //@line 42620
     if (($122 | 0) == (HEAP32[$123 >> 2] | 0)) {
      $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 36 >> 2] & 255]($121) | 0; //@line 42628
     } else {
      $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$122 >> 2] | 0) | 0; //@line 42632
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, 8192, $$0$i$i) | 0)) {
      $$0$ph$be = $$3$lcssa; //@line 42639
      break L36;
     }
     $136 = HEAP32[$120 >> 2] | 0; //@line 42642
     if (($136 | 0) == (HEAP32[$123 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 40 >> 2] & 255]($121) | 0; //@line 42649
      $$pre$i$i$i57 = $121; //@line 42650
      $$pre$i4$i$i63 = $$pre$i4$i$i6395; //@line 42650
      $103 = $208; //@line 42650
      continue;
     } else {
      HEAP32[$120 >> 2] = $136 + 4; //@line 42654
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$136 >> 2] | 0) | 0; //@line 42656
      $$pre$i$i$i57 = $121; //@line 42657
      $$pre$i4$i$i63 = $$pre$i4$i$i6395; //@line 42657
      $103 = $208; //@line 42657
      continue;
     }
    }
   } else if ((label | 0) == 55) {
    label = 0; //@line 42663
    $166 = HEAP32[$144 >> 2] | 0; //@line 42664
    if (($166 | 0) == (HEAP32[$147 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$145 >> 2] | 0) + 40 >> 2] & 255]($145) | 0; //@line 42671
    } else {
     HEAP32[$144 >> 2] = $166 + 4; //@line 42674
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$166 >> 2] | 0) | 0; //@line 42676
    }
    $$0$ph$be = $$0$ph + 4 | 0; //@line 42679
   }
  } while (0);
  $$0$ph = $$0$ph$be; //@line 42683
  $$pre = HEAP32[$4 >> 2] | 0; //@line 42683
 }
 if ((label | 0) == 61) {
  HEAP32[$4 >> 2] = 4; //@line 42686
  $$pre$i$i$i71 = $145; //@line 42687
 }
 if (!$$pre$i$i$i71) {
  $$sroa$050$0$copyload = 0; //@line 42691
  $209 = 1; //@line 42691
 } else {
  $177 = HEAP32[$$pre$i$i$i71 + 12 >> 2] | 0; //@line 42694
  if (($177 | 0) == (HEAP32[$$pre$i$i$i71 + 16 >> 2] | 0)) {
   $$0$i$i$i$i69 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i71 >> 2] | 0) + 36 >> 2] & 255]($$pre$i$i$i71) | 0; //@line 42703
  } else {
   $$0$i$i$i$i69 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$177 >> 2] | 0) | 0; //@line 42707
  }
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i69, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0; //@line 42712
   $$sroa$050$0$copyload = 0; //@line 42713
   $209 = 1; //@line 42713
  } else {
   $$sroa$050$0$copyload = $$pre$i$i$i71; //@line 42715
   $209 = 0; //@line 42715
  }
 }
 $189 = HEAP32[$2 >> 2] | 0; //@line 42718
 do {
  if (!$189) {
   label = 74; //@line 42722
  } else {
   $192 = HEAP32[$189 + 12 >> 2] | 0; //@line 42725
   if (($192 | 0) == (HEAP32[$189 + 16 >> 2] | 0)) {
    $$0$i$i2$i$i75 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$189 >> 2] | 0) + 36 >> 2] & 255]($189) | 0; //@line 42734
   } else {
    $$0$i$i2$i$i75 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$192 >> 2] | 0) | 0; //@line 42738
   }
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i75, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0; //@line 42743
    label = 74; //@line 42744
    break;
   } else {
    if ($209) {
     break;
    } else {
     label = 76; //@line 42750
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 74) {
  if ($209) {
   label = 76; //@line 42758
  }
 }
 if ((label | 0) == 76) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 42764
 }
 STACKTOP = sp; //@line 42766
 return $$sroa$050$0$copyload | 0; //@line 42766
}
function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SA_EEEEEixERSG_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$05398$i = 0, $$05399$i = 0, $$05399$i$us = 0, $$05399$us$i = 0, $$05399$us$i$us = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$sink$i = 0, $10 = 0, $100 = 0, $103 = 0, $106 = 0, $12 = 0, $120 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $132 = 0, $135 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $156 = 0, $159 = 0.0, $162 = 0.0, $172 = 0, $175 = 0, $177 = 0, $179 = 0, $180 = 0, $186 = 0, $193 = 0, $194 = 0, $196 = 0, $198 = 0, $201 = 0, $202 = 0, $21 = 0, $210 = 0, $214 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $65 = 0, $69 = 0, $78 = 0, $84 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0; //@line 25034
 $4 = $3 << 24 >> 24 < 0; //@line 25035
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1; //@line 25040
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255; //@line 25041
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i$i = $9; //@line 25044
  $$03738$i$i$i$i$i = $10; //@line 25044
  $$040$i$i$i$i$i = $10; //@line 25044
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 25047
   $$03738$i$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i$i, 1540483477) | 0); //@line 25052
   $$040$i$i$i$i$i = $$040$i$i$i$i$i + -4 | 0; //@line 25054
   if ($$040$i$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i$i = $$03639$i$i$i$i$i + 4 | 0; //@line 25057
   }
  }
  $21 = $10 + -4 | 0; //@line 25062
  $22 = $21 & -4; //@line 25063
  $$0$lcssa$i$i$i$i$i = $21 - $22 | 0; //@line 25067
  $$036$lcssa$i$i$i$i$i = $9 + ($22 + 4) | 0; //@line 25067
  $$037$lcssa$i$i$i$i$i = $$03738$i$i$i$i$i; //@line 25067
 } else {
  $$0$lcssa$i$i$i$i$i = $10; //@line 25069
  $$036$lcssa$i$i$i$i$i = $9; //@line 25069
  $$037$lcssa$i$i$i$i$i = $10; //@line 25069
 }
 switch ($$0$lcssa$i$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i$i; //@line 25078
   label = 6; //@line 25079
   break;
  }
 case 2:
  {
   $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 25083
   label = 6; //@line 25084
   break;
  }
 case 1:
  {
   $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 25088
   label = 7; //@line 25089
   break;
  }
 default:
  {
   $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i; //@line 25093
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i$i; //@line 25102
  label = 7; //@line 25103
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i$i = Math_imul($$2$i$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i$i >> 0], 1540483477) | 0; //@line 25110
 }
 $41 = Math_imul($$3$i$i$i$i$i >>> 13 ^ $$3$i$i$i$i$i, 1540483477) | 0; //@line 25114
 $43 = $41 >>> 15 ^ $41; //@line 25116
 $44 = $0 + 4 | 0; //@line 25117
 $45 = HEAP32[$44 >> 2] | 0; //@line 25118
 $46 = ($45 | 0) == 0; //@line 25119
 L13 : do {
  if ($46) {
   $$054$i = 0; //@line 25122
  } else {
   $47 = $45 + -1 | 0; //@line 25124
   $49 = ($47 & $45 | 0) == 0; //@line 25126
   if ($49) {
    $55 = $43 & $47; //@line 25129
   } else {
    if ($43 >>> 0 < $45 >>> 0) {
     $55 = $43; //@line 25133
    } else {
     $55 = ($43 >>> 0) % ($45 >>> 0) | 0; //@line 25136
    }
   }
   $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0; //@line 25141
   if (!$56) {
    $$054$i = $55; //@line 25144
   } else {
    $$05398$i = HEAP32[$56 >> 2] | 0; //@line 25146
    if (!$$05398$i) {
     $$054$i = $55; //@line 25149
    } else {
     $59 = ($10 | 0) == 0; //@line 25151
     if ($49) {
      if ($59) {
       $$05399$us$i$us = $$05398$i; //@line 25154
       while (1) {
        $78 = HEAP32[$$05399$us$i$us + 4 >> 2] | 0; //@line 25157
        if (!(($78 | 0) == ($43 | 0) | ($78 & $47 | 0) == ($55 | 0))) {
         $$054$i = $55; //@line 25163
         break L13;
        }
        $84 = HEAP8[$$05399$us$i$us + 8 + 11 >> 0] | 0; //@line 25168
        if (!(($84 << 24 >> 24 < 0 ? HEAP32[$$05399$us$i$us + 12 >> 2] | 0 : $84 & 255) | 0)) {
         $$1$i = $$05399$us$i$us; //@line 25176
         break;
        }
        $$05399$us$i$us = HEAP32[$$05399$us$i$us >> 2] | 0; //@line 25179
        if (!$$05399$us$i$us) {
         $$054$i = $55; //@line 25182
         break L13;
        }
       }
       $214 = $$1$i + 20 | 0; //@line 25188
       return $214 | 0; //@line 25189
      } else {
       $$05399$us$i = $$05398$i; //@line 25191
      }
      L30 : while (1) {
       $93 = HEAP32[$$05399$us$i + 4 >> 2] | 0; //@line 25195
       if (!(($93 | 0) == ($43 | 0) | ($93 & $47 | 0) == ($55 | 0))) {
        $$054$i = $55; //@line 25201
        break L13;
       }
       $97 = $$05399$us$i + 8 | 0; //@line 25204
       $99 = HEAP8[$97 + 11 >> 0] | 0; //@line 25206
       $100 = $99 << 24 >> 24 < 0; //@line 25207
       $103 = $99 & 255; //@line 25210
       do {
        if ((($100 ? HEAP32[$$05399$us$i + 12 >> 2] | 0 : $103) | 0) == ($10 | 0)) {
         $106 = HEAP32[$97 >> 2] | 0; //@line 25215
         if ($100) {
          if (!(_memcmp($106, $9, $10) | 0)) {
           $$1$i = $$05399$us$i; //@line 25220
           label = 69; //@line 25221
           break L30;
          } else {
           break;
          }
         }
         if ((HEAP8[$9 >> 0] | 0) == ($106 & 255) << 24 >> 24) {
          $$02026$i$i4$i$us$i = $97; //@line 25232
          $$02125$i$i5$i$us$i = $103; //@line 25232
          $$027$i$i3$i$us$i = $9; //@line 25232
          do {
           $$02125$i$i5$i$us$i = $$02125$i$i5$i$us$i + -1 | 0; //@line 25234
           $$02026$i$i4$i$us$i = $$02026$i$i4$i$us$i + 1 | 0; //@line 25235
           if (!$$02125$i$i5$i$us$i) {
            $$1$i = $$05399$us$i; //@line 25238
            label = 69; //@line 25239
            break L30;
           }
           $$027$i$i3$i$us$i = $$027$i$i3$i$us$i + 1 | 0; //@line 25242
          } while ((HEAP8[$$02026$i$i4$i$us$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$us$i >> 0] | 0));
         }
        }
       } while (0);
       $$05399$us$i = HEAP32[$$05399$us$i >> 2] | 0; //@line 25255
       if (!$$05399$us$i) {
        $$054$i = $55; //@line 25258
        break L13;
       }
      }
      if ((label | 0) == 69) {
       $214 = $$1$i + 20 | 0; //@line 25265
       return $214 | 0; //@line 25266
      }
     }
     if ($59) {
      $$05399$i$us = $$05398$i; //@line 25270
      while (1) {
       $61 = HEAP32[$$05399$i$us + 4 >> 2] | 0; //@line 25273
       if (($61 | 0) != ($43 | 0)) {
        if ($61 >>> 0 < $45 >>> 0) {
         $65 = $61; //@line 25278
        } else {
         $65 = ($61 >>> 0) % ($45 >>> 0) | 0; //@line 25281
        }
        if (($65 | 0) != ($55 | 0)) {
         $$054$i = $55; //@line 25285
         break L13;
        }
       }
       $69 = HEAP8[$$05399$i$us + 8 + 11 >> 0] | 0; //@line 25291
       if (!(($69 << 24 >> 24 < 0 ? HEAP32[$$05399$i$us + 12 >> 2] | 0 : $69 & 255) | 0)) {
        $$1$i = $$05399$i$us; //@line 25299
        break;
       }
       $$05399$i$us = HEAP32[$$05399$i$us >> 2] | 0; //@line 25302
       if (!$$05399$i$us) {
        $$054$i = $55; //@line 25305
        break L13;
       }
      }
      $214 = $$1$i + 20 | 0; //@line 25311
      return $214 | 0; //@line 25312
     } else {
      $$05399$i = $$05398$i; //@line 25314
     }
     L58 : while (1) {
      $120 = HEAP32[$$05399$i + 4 >> 2] | 0; //@line 25318
      if (($120 | 0) != ($43 | 0)) {
       if ($120 >>> 0 < $45 >>> 0) {
        $124 = $120; //@line 25323
       } else {
        $124 = ($120 >>> 0) % ($45 >>> 0) | 0; //@line 25326
       }
       if (($124 | 0) != ($55 | 0)) {
        $$054$i = $55; //@line 25330
        break L13;
       }
      }
      $126 = $$05399$i + 8 | 0; //@line 25334
      $128 = HEAP8[$126 + 11 >> 0] | 0; //@line 25336
      $129 = $128 << 24 >> 24 < 0; //@line 25337
      $132 = $128 & 255; //@line 25340
      do {
       if ((($129 ? HEAP32[$$05399$i + 12 >> 2] | 0 : $132) | 0) == ($10 | 0)) {
        $135 = HEAP32[$126 >> 2] | 0; //@line 25345
        if ($129) {
         if (!(_memcmp($135, $9, $10) | 0)) {
          $$1$i = $$05399$i; //@line 25350
          label = 69; //@line 25351
          break L58;
         } else {
          break;
         }
        }
        if ((HEAP8[$9 >> 0] | 0) == ($135 & 255) << 24 >> 24) {
         $$02026$i$i4$i$i = $126; //@line 25362
         $$02125$i$i5$i$i = $132; //@line 25362
         $$027$i$i3$i$i = $9; //@line 25362
         do {
          $$02125$i$i5$i$i = $$02125$i$i5$i$i + -1 | 0; //@line 25364
          $$02026$i$i4$i$i = $$02026$i$i4$i$i + 1 | 0; //@line 25365
          if (!$$02125$i$i5$i$i) {
           $$1$i = $$05399$i; //@line 25368
           label = 69; //@line 25369
           break L58;
          }
          $$027$i$i3$i$i = $$027$i$i3$i$i + 1 | 0; //@line 25372
         } while ((HEAP8[$$02026$i$i4$i$i >> 0] | 0) == (HEAP8[$$027$i$i3$i$i >> 0] | 0));
        }
       }
      } while (0);
      $$05399$i = HEAP32[$$05399$i >> 2] | 0; //@line 25385
      if (!$$05399$i) {
       $$054$i = $55; //@line 25388
       break L13;
      }
     }
     if ((label | 0) == 69) {
      $214 = $$1$i + 20 | 0; //@line 25395
      return $214 | 0; //@line 25396
     }
    }
   }
  }
 } while (0);
 $148 = __Znwj(24) | 0; //@line 25402
 $149 = $148 + 8 | 0; //@line 25403
 __THREW__ = 0; //@line 25404
 invoke_vii(115, $149 | 0, $1 | 0); //@line 25405
 $150 = __THREW__; //@line 25406
 __THREW__ = 0; //@line 25406
 if ($150 & 1) {
  $152 = ___cxa_find_matching_catch_2() | 0; //@line 25409
  __ZdlPv($148); //@line 25411
  ___resumeException($152 | 0); //@line 25412
 }
 HEAP32[$148 + 20 >> 2] = 0; //@line 25416
 HEAP32[$148 + 4 >> 2] = $43; //@line 25418
 HEAP32[$148 >> 2] = 0; //@line 25419
 $156 = $0 + 12 | 0; //@line 25420
 $159 = +(((HEAP32[$156 >> 2] | 0) + 1 | 0) >>> 0); //@line 25423
 $162 = +HEAPF32[$0 + 16 >> 2]; //@line 25426
 do {
  if ($46 | $162 * +($45 >>> 0) < $159) {
   $172 = $45 << 1 | ($45 >>> 0 < 3 | ($45 + -1 & $45 | 0) != 0) & 1; //@line 25439
   $175 = ~~+Math_ceil(+($159 / $162)) >>> 0; //@line 25442
   __THREW__ = 0; //@line 25445
   invoke_vii(142, $0 | 0, ($172 >>> 0 < $175 >>> 0 ? $175 : $172) | 0); //@line 25446
   $177 = __THREW__; //@line 25447
   __THREW__ = 0; //@line 25447
   if ($177 & 1) {
    $186 = ___cxa_find_matching_catch_2() | 0; //@line 25450
    if ((HEAP8[$148 + 19 >> 0] | 0) >= 0) {
     __ZdlPv($148); //@line 25456
     ___resumeException($186 | 0); //@line 25457
    }
    __ZdlPv(HEAP32[$149 >> 2] | 0); //@line 25461
    __ZdlPv($148); //@line 25462
    ___resumeException($186 | 0); //@line 25463
   } else {
    $179 = HEAP32[$44 >> 2] | 0; //@line 25466
    $180 = $179 + -1 | 0; //@line 25467
    if (!($180 & $179)) {
     $$0$i = $179; //@line 25472
     $$155$i = $180 & $43; //@line 25472
     break;
    }
    if ($43 >>> 0 < $179 >>> 0) {
     $$0$i = $179; //@line 25477
     $$155$i = $43; //@line 25477
     break;
    }
    $$0$i = $179; //@line 25481
    $$155$i = ($43 >>> 0) % ($179 >>> 0) | 0; //@line 25481
    break;
   }
  } else {
   $$0$i = $45; //@line 25485
   $$155$i = $$054$i; //@line 25485
  }
 } while (0);
 $193 = (HEAP32[$0 >> 2] | 0) + ($$155$i << 2) | 0; //@line 25489
 $194 = HEAP32[$193 >> 2] | 0; //@line 25490
 if (!$194) {
  $196 = $0 + 8 | 0; //@line 25493
  HEAP32[$148 >> 2] = HEAP32[$196 >> 2]; //@line 25495
  HEAP32[$196 >> 2] = $148; //@line 25496
  HEAP32[$193 >> 2] = $196; //@line 25497
  $198 = HEAP32[$148 >> 2] | 0; //@line 25498
  if ($198 | 0) {
   $201 = HEAP32[$198 + 4 >> 2] | 0; //@line 25502
   $202 = $$0$i + -1 | 0; //@line 25503
   if (!($202 & $$0$i)) {
    $210 = $201 & $202; //@line 25508
   } else {
    if ($201 >>> 0 < $$0$i >>> 0) {
     $210 = $201; //@line 25512
    } else {
     $210 = ($201 >>> 0) % ($$0$i >>> 0) | 0; //@line 25515
    }
   }
   $$sink$i = (HEAP32[$0 >> 2] | 0) + ($210 << 2) | 0; //@line 25520
   label = 67; //@line 25521
  }
 } else {
  HEAP32[$148 >> 2] = HEAP32[$194 >> 2]; //@line 25525
  $$sink$i = $194; //@line 25526
  label = 67; //@line 25527
 }
 if ((label | 0) == 67) {
  HEAP32[$$sink$i >> 2] = $148; //@line 25530
 }
 HEAP32[$156 >> 2] = (HEAP32[$156 >> 2] | 0) + 1; //@line 25534
 $$1$i = $148; //@line 25535
 $214 = $$1$i + 20 | 0; //@line 25536
 return $214 | 0; //@line 25537
}
function __ZN6Runner12setReferenceE13CharmFunctionS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $$in = 0, $$in41 = 0, $$sink12$index = 0, $$sink12$index5 = 0, $100 = 0, $102 = 0, $107 = 0, $11 = 0, $110 = 0, $114 = 0, $116 = 0, $118 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $149 = 0, $150 = 0, $157 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $63 = 0, $68 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $89 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7920
 STACKTOP = STACKTOP + 160 | 0; //@line 7921
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 7921
 $$byval_copy = sp + 145 | 0; //@line 7922
 $3 = sp + 144 | 0; //@line 7923
 $4 = sp; //@line 7924
 $5 = $4 + 4 | 0; //@line 7925
 HEAP32[$5 >> 2] = 0; //@line 7926
 HEAP32[$5 + 4 >> 2] = 0; //@line 7926
 HEAP32[$5 + 8 >> 2] = 0; //@line 7926
 $6 = $4 + 40 | 0; //@line 7927
 HEAP32[$6 >> 2] = 0; //@line 7928
 HEAP32[$6 + 4 >> 2] = 0; //@line 7928
 HEAP32[$6 + 8 >> 2] = 0; //@line 7928
 HEAP32[$6 + 12 >> 2] = 0; //@line 7928
 HEAP32[$6 + 16 >> 2] = 0; //@line 7928
 HEAP32[$6 + 20 >> 2] = 0; //@line 7928
 $7 = $4 + 76 | 0; //@line 7929
 HEAP32[$7 >> 2] = 0; //@line 7930
 HEAP32[$7 + 4 >> 2] = 0; //@line 7930
 HEAP32[$7 + 8 >> 2] = 0; //@line 7930
 $8 = $4 + 112 | 0; //@line 7931
 HEAP32[$8 >> 2] = 0; //@line 7932
 HEAP32[$8 + 4 >> 2] = 0; //@line 7932
 HEAP32[$8 + 8 >> 2] = 0; //@line 7932
 HEAP32[$8 + 12 >> 2] = 0; //@line 7932
 HEAP32[$8 + 16 >> 2] = 0; //@line 7932
 HEAP32[$8 + 20 >> 2] = 0; //@line 7932
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2]; //@line 7934
 __THREW__ = 0; //@line 7936
 invoke_iii(55, $5 | 0, $1 + 4 | 0) | 0; //@line 7937
 $11 = __THREW__; //@line 7938
 __THREW__ = 0; //@line 7938
 do {
  if (!($11 & 1)) {
   $13 = $4 + 16 | 0; //@line 7942
   $14 = $1 + 16 | 0; //@line 7943
   HEAP32[$13 >> 2] = HEAP32[$14 >> 2]; //@line 7944
   HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2]; //@line 7944
   HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2]; //@line 7944
   HEAP32[$13 + 12 >> 2] = HEAP32[$14 + 12 >> 2]; //@line 7944
   HEAP32[$13 + 16 >> 2] = HEAP32[$14 + 16 >> 2]; //@line 7944
   HEAP32[$13 + 20 >> 2] = HEAP32[$14 + 20 >> 2]; //@line 7944
   if (($4 | 0) != ($1 | 0)) {
    __THREW__ = 0; //@line 7952
    invoke_viii(15, $4 + 40 | 0, HEAP32[$1 + 40 >> 2] | 0, HEAP32[$1 + 44 >> 2] | 0); //@line 7953
    $21 = __THREW__; //@line 7954
    __THREW__ = 0; //@line 7954
    if ($21 & 1) {
     break;
    }
   }
   $23 = $4 + 52 | 0; //@line 7960
   __THREW__ = 0; //@line 7962
   invoke_iii(55, $23 | 0, $1 + 52 | 0) | 0; //@line 7963
   $25 = __THREW__; //@line 7964
   __THREW__ = 0; //@line 7964
   if (!($25 & 1)) {
    $27 = $4 + 64 | 0; //@line 7967
    HEAP16[$27 >> 1] = HEAP16[$1 + 64 >> 1] | 0; //@line 7970
    $30 = $4 + 72 | 0; //@line 7971
    HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 7973
    __THREW__ = 0; //@line 7975
    invoke_iii(55, $7 | 0, $2 + 4 | 0) | 0; //@line 7976
    $33 = __THREW__; //@line 7977
    __THREW__ = 0; //@line 7977
    if (!($33 & 1)) {
     $35 = $4 + 88 | 0; //@line 7980
     $36 = $2 + 16 | 0; //@line 7981
     HEAP32[$35 >> 2] = HEAP32[$36 >> 2]; //@line 7982
     HEAP32[$35 + 4 >> 2] = HEAP32[$36 + 4 >> 2]; //@line 7982
     HEAP32[$35 + 8 >> 2] = HEAP32[$36 + 8 >> 2]; //@line 7982
     HEAP32[$35 + 12 >> 2] = HEAP32[$36 + 12 >> 2]; //@line 7982
     HEAP32[$35 + 16 >> 2] = HEAP32[$36 + 16 >> 2]; //@line 7982
     HEAP32[$35 + 20 >> 2] = HEAP32[$36 + 20 >> 2]; //@line 7982
     if (($30 | 0) != ($2 | 0)) {
      __THREW__ = 0; //@line 7990
      invoke_viii(15, $4 + 112 | 0, HEAP32[$2 + 40 >> 2] | 0, HEAP32[$2 + 44 >> 2] | 0); //@line 7991
      $43 = __THREW__; //@line 7992
      __THREW__ = 0; //@line 7992
      if ($43 & 1) {
       break;
      }
     }
     $45 = $4 + 124 | 0; //@line 7998
     __THREW__ = 0; //@line 8000
     invoke_iii(55, $45 | 0, $2 + 52 | 0) | 0; //@line 8001
     $47 = __THREW__; //@line 8002
     __THREW__ = 0; //@line 8002
     if (!($47 & 1)) {
      $49 = $4 + 136 | 0; //@line 8005
      HEAP16[$49 >> 1] = HEAP16[$2 + 64 >> 1] | 0; //@line 8008
      $52 = $0 + 84 | 0; //@line 8009
      $53 = $0 + 88 | 0; //@line 8010
      $54 = HEAP32[$53 >> 2] | 0; //@line 8011
      $55 = HEAP32[$52 >> 2] | 0; //@line 8012
      L12 : do {
       if (($54 | 0) == ($55 | 0)) {
        $$in41 = $54; //@line 8016
       } else {
        $$in = $55; //@line 8018
        $72 = 0; //@line 8018
        $76 = 0; //@line 8018
        while (1) {
         __THREW__ = 0; //@line 8022
         $73 = invoke_iii(58, $$in + ($72 * 144 | 0) | 0, $1 | 0) | 0; //@line 8023
         $74 = __THREW__; //@line 8024
         __THREW__ = 0; //@line 8024
         if ($74 & 1) {
          label = 24; //@line 8027
          break;
         }
         $63 = _i64Add($72 | 0, $76 | 0, 1, 0) | 0; //@line 8030
         $76 = tempRet0; //@line 8031
         if ($73) {
          break;
         }
         $57 = HEAP32[$53 >> 2] | 0; //@line 8035
         $$in = HEAP32[$52 >> 2] | 0; //@line 8036
         if (!($76 >>> 0 < 0 | (($76 | 0) == 0 ? $63 >>> 0 < (($57 - $$in | 0) / 144 | 0) >>> 0 : 0))) {
          $$in41 = $57; //@line 8047
          break L12;
         } else {
          $72 = $63; //@line 8045
         }
        }
        if ((label | 0) == 24) {
         $114 = ___cxa_find_matching_catch_2() | 0; //@line 8052
         $$sink12$index = $114; //@line 8054
         $$sink12$index5 = tempRet0; //@line 8054
         __ZN9ReferenceD2Ev($4); //@line 8055
         ___resumeException($$sink12$index | 0); //@line 8056
        }
        $77 = HEAP32[$52 >> 2] | 0; //@line 8059
        $78 = $77 + ($72 * 144 | 0) | 0; //@line 8060
        HEAP32[$78 >> 2] = HEAP32[$4 >> 2]; //@line 8062
        __THREW__ = 0; //@line 8064
        invoke_iii(55, $77 + ($72 * 144 | 0) + 4 | 0, $5 | 0) | 0; //@line 8065
        $81 = __THREW__; //@line 8066
        __THREW__ = 0; //@line 8066
        do {
         if (!($81 & 1)) {
          $83 = $77 + ($72 * 144 | 0) + 16 | 0; //@line 8070
          HEAP32[$83 >> 2] = HEAP32[$13 >> 2]; //@line 8071
          HEAP32[$83 + 4 >> 2] = HEAP32[$13 + 4 >> 2]; //@line 8071
          HEAP32[$83 + 8 >> 2] = HEAP32[$13 + 8 >> 2]; //@line 8071
          HEAP32[$83 + 12 >> 2] = HEAP32[$13 + 12 >> 2]; //@line 8071
          HEAP32[$83 + 16 >> 2] = HEAP32[$13 + 16 >> 2]; //@line 8071
          HEAP32[$83 + 20 >> 2] = HEAP32[$13 + 20 >> 2]; //@line 8071
          $84 = ($78 | 0) == ($4 | 0); //@line 8072
          if (!$84) {
           __THREW__ = 0; //@line 8078
           invoke_viii(15, $77 + ($72 * 144 | 0) + 40 | 0, HEAP32[$6 >> 2] | 0, HEAP32[$4 + 44 >> 2] | 0); //@line 8079
           $89 = __THREW__; //@line 8080
           __THREW__ = 0; //@line 8080
           if ($89 & 1) {
            break;
           }
          }
          __THREW__ = 0; //@line 8087
          invoke_iii(55, $77 + ($72 * 144 | 0) + 52 | 0, $23 | 0) | 0; //@line 8088
          $92 = __THREW__; //@line 8089
          __THREW__ = 0; //@line 8089
          if (!($92 & 1)) {
           HEAP16[$77 + ($72 * 144 | 0) + 64 >> 1] = HEAP16[$27 >> 1] | 0; //@line 8094
           HEAP32[$77 + ($72 * 144 | 0) + 72 >> 2] = HEAP32[$4 + 72 >> 2]; //@line 8098
           __THREW__ = 0; //@line 8100
           invoke_iii(55, $77 + ($72 * 144 | 0) + 76 | 0, $7 | 0) | 0; //@line 8101
           $100 = __THREW__; //@line 8102
           __THREW__ = 0; //@line 8102
           if (!($100 & 1)) {
            $102 = $77 + ($72 * 144 | 0) + 88 | 0; //@line 8105
            HEAP32[$102 >> 2] = HEAP32[$35 >> 2]; //@line 8106
            HEAP32[$102 + 4 >> 2] = HEAP32[$35 + 4 >> 2]; //@line 8106
            HEAP32[$102 + 8 >> 2] = HEAP32[$35 + 8 >> 2]; //@line 8106
            HEAP32[$102 + 12 >> 2] = HEAP32[$35 + 12 >> 2]; //@line 8106
            HEAP32[$102 + 16 >> 2] = HEAP32[$35 + 16 >> 2]; //@line 8106
            HEAP32[$102 + 20 >> 2] = HEAP32[$35 + 20 >> 2]; //@line 8106
            if (!$84) {
             __THREW__ = 0; //@line 8112
             invoke_viii(15, $77 + ($72 * 144 | 0) + 112 | 0, HEAP32[$8 >> 2] | 0, HEAP32[$4 + 116 >> 2] | 0); //@line 8113
             $107 = __THREW__; //@line 8114
             __THREW__ = 0; //@line 8114
             if ($107 & 1) {
              break;
             }
            }
            __THREW__ = 0; //@line 8121
            invoke_iii(55, $77 + ($72 * 144 | 0) + 124 | 0, $45 | 0) | 0; //@line 8122
            $110 = __THREW__; //@line 8123
            __THREW__ = 0; //@line 8123
            if (!($110 & 1)) {
             HEAP16[$77 + ($72 * 144 | 0) + 136 >> 1] = HEAP16[$49 >> 1] | 0; //@line 8128
             __ZN9ReferenceD2Ev($4); //@line 8129
             STACKTOP = sp; //@line 8130
             return;
            }
           }
          }
         }
        } while (0);
        $116 = ___cxa_find_matching_catch_2() | 0; //@line 8136
        $$sink12$index = $116; //@line 8138
        $$sink12$index5 = tempRet0; //@line 8138
        __ZN9ReferenceD2Ev($4); //@line 8139
        ___resumeException($$sink12$index | 0); //@line 8140
       }
      } while (0);
      $118 = $$in41; //@line 8144
      if ((HEAP32[$0 + 92 >> 2] | 0) == ($118 | 0)) {
       __THREW__ = 0; //@line 8149
       invoke_vii(126, $52 | 0, $4 | 0); //@line 8150
       $157 = __THREW__; //@line 8151
       __THREW__ = 0; //@line 8151
       if ($157 & 1) {
        break;
       }
       __ZN9ReferenceD2Ev($4); //@line 8156
       STACKTOP = sp; //@line 8157
       return;
      }
      __THREW__ = 0; //@line 8159
      invoke_vii(120, $118 | 0, $4 | 0); //@line 8160
      $122 = __THREW__; //@line 8161
      __THREW__ = 0; //@line 8161
      if (!($122 & 1)) {
       __THREW__ = 0; //@line 8165
       invoke_vii(120, $118 + 72 | 0, $30 | 0); //@line 8166
       $125 = __THREW__; //@line 8167
       __THREW__ = 0; //@line 8167
       if (!($125 & 1)) {
        HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 144; //@line 8172
        __ZN9ReferenceD2Ev($4); //@line 8173
        STACKTOP = sp; //@line 8174
        return;
       }
       $127 = ___cxa_find_matching_catch_2() | 0; //@line 8176
       $128 = tempRet0; //@line 8177
       $129 = $118 + 52 | 0; //@line 8178
       if ((HEAP8[$129 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$129 >> 2] | 0); //@line 8184
       }
       $134 = $118 + 40 | 0; //@line 8186
       $135 = HEAP32[$134 >> 2] | 0; //@line 8187
       if ($135 | 0) {
        $137 = $118 + 44 | 0; //@line 8190
        $138 = HEAP32[$137 >> 2] | 0; //@line 8191
        do {
         if (($138 | 0) == ($135 | 0)) {
          $149 = $135; //@line 8195
         } else {
          $140 = $118 + 48 | 0; //@line 8197
          $142 = $138; //@line 8198
          while (1) {
           $141 = $142 + -72 | 0; //@line 8200
           HEAP32[$137 >> 2] = $141; //@line 8201
           __THREW__ = 0; //@line 8202
           HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 8203
           invoke_viii(13, $$byval_copy | 0, $140 | 0, $141 | 0); //@line 8204
           $143 = __THREW__; //@line 8205
           __THREW__ = 0; //@line 8205
           if ($143 & 1) {
            label = 36; //@line 8208
            break;
           }
           $142 = HEAP32[$137 >> 2] | 0; //@line 8211
           if (($142 | 0) == ($135 | 0)) {
            label = 37; //@line 8214
            break;
           }
          }
          if ((label | 0) == 36) {
           $147 = ___cxa_find_matching_catch_3(0) | 0; //@line 8221
           ___clang_call_terminate($147); //@line 8223
          } else if ((label | 0) == 37) {
           $149 = HEAP32[$134 >> 2] | 0; //@line 8228
           break;
          }
         }
        } while (0);
        __ZdlPv($149); //@line 8233
       }
       $150 = $118 + 4 | 0; //@line 8235
       if ((HEAP8[$150 + 11 >> 0] | 0) >= 0) {
        $$sink12$index = $127; //@line 8240
        $$sink12$index5 = $128; //@line 8240
        __ZN9ReferenceD2Ev($4); //@line 8241
        ___resumeException($$sink12$index | 0); //@line 8242
       }
       __ZdlPv(HEAP32[$150 >> 2] | 0); //@line 8246
       $$sink12$index = $127; //@line 8247
       $$sink12$index5 = $128; //@line 8247
       __ZN9ReferenceD2Ev($4); //@line 8248
       ___resumeException($$sink12$index | 0); //@line 8249
      }
     }
    }
   }
  }
 } while (0);
 $68 = ___cxa_find_matching_catch_2() | 0; //@line 8257
 $$sink12$index = $68; //@line 8259
 $$sink12$index5 = tempRet0; //@line 8259
 __ZN9ReferenceD2Ev($4); //@line 8260
 ___resumeException($$sink12$index | 0); //@line 8261
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$05$i$i$i = 0, $$1$i$i$i = 0, $$16$i$i$i = 0, $$byval_copy5 = 0, $$val = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $126 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $144 = 0, $146 = 0, $147 = 0, $152 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $170 = 0, $172 = 0, $173 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $42 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $88 = 0, $89 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23048
 STACKTOP = STACKTOP + 224 | 0; //@line 23049
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 23049
 $$byval_copy5 = sp + 217 | 0; //@line 23050
 $2 = sp + 216 | 0; //@line 23051
 $3 = sp + 144 | 0; //@line 23052
 $4 = sp + 72 | 0; //@line 23053
 $5 = sp; //@line 23054
 $$val = HEAP32[$1 >> 2] | 0; //@line 23055
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 23057
 __THREW__ = 0; //@line 23058
 $7 = invoke_ii(143, $$val | 0) | 0; //@line 23059
 $8 = __THREW__; //@line 23060
 __THREW__ = 0; //@line 23060
 if ($8 & 1) {
  label = 41; //@line 23063
 } else {
  __THREW__ = 0; //@line 23065
  invoke_vii(120, $5 | 0, $3 | 0); //@line 23066
  $10 = __THREW__; //@line 23067
  __THREW__ = 0; //@line 23067
  if ($10 & 1) {
   label = 41; //@line 23070
  } else {
   __THREW__ = 0; //@line 23072
   invoke_viii(25, $4 | 0, $$val | 0, $5 | 0); //@line 23073
   $12 = __THREW__; //@line 23074
   __THREW__ = 0; //@line 23074
   do {
    if ($12 & 1) {
     $96 = ___cxa_find_matching_catch_2() | 0; //@line 23078
     $$0$i$i$i = tempRet0; //@line 23080
     $$05$i$i$i = $96; //@line 23080
    } else {
     __THREW__ = 0; //@line 23082
     invoke_vii(128, $7 | 0, $4 | 0); //@line 23083
     $14 = __THREW__; //@line 23084
     __THREW__ = 0; //@line 23084
     if ($14 & 1) {
      $98 = ___cxa_find_matching_catch_2() | 0; //@line 23087
      $99 = tempRet0; //@line 23088
      $100 = $4 + 52 | 0; //@line 23089
      if ((HEAP8[$100 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$100 >> 2] | 0); //@line 23095
      }
      $105 = $4 + 40 | 0; //@line 23097
      $106 = HEAP32[$105 >> 2] | 0; //@line 23098
      if ($106 | 0) {
       $108 = $4 + 44 | 0; //@line 23101
       $109 = HEAP32[$108 >> 2] | 0; //@line 23102
       do {
        if (($109 | 0) == ($106 | 0)) {
         $120 = $106; //@line 23106
        } else {
         $111 = $4 + 48 | 0; //@line 23108
         $113 = $109; //@line 23109
         while (1) {
          $112 = $113 + -72 | 0; //@line 23111
          HEAP32[$108 >> 2] = $112; //@line 23112
          __THREW__ = 0; //@line 23113
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23114
          invoke_viii(13, $$byval_copy5 | 0, $111 | 0, $112 | 0); //@line 23115
          $114 = __THREW__; //@line 23116
          __THREW__ = 0; //@line 23116
          if ($114 & 1) {
           label = 50; //@line 23119
           break;
          }
          $113 = HEAP32[$108 >> 2] | 0; //@line 23122
          if (($113 | 0) == ($106 | 0)) {
           label = 51; //@line 23125
           break;
          }
         }
         if ((label | 0) == 50) {
          $118 = ___cxa_find_matching_catch_3(0) | 0; //@line 23132
          ___clang_call_terminate($118); //@line 23134
         } else if ((label | 0) == 51) {
          $120 = HEAP32[$105 >> 2] | 0; //@line 23139
          break;
         }
        }
       } while (0);
       __ZdlPv($120); //@line 23144
      }
      $121 = $4 + 4 | 0; //@line 23146
      if ((HEAP8[$121 + 11 >> 0] | 0) >= 0) {
       $$0$i$i$i = $99; //@line 23151
       $$05$i$i$i = $98; //@line 23151
       break;
      }
      __ZdlPv(HEAP32[$121 >> 2] | 0); //@line 23155
      $$0$i$i$i = $99; //@line 23156
      $$05$i$i$i = $98; //@line 23156
      break;
     }
     $16 = $4 + 52 | 0; //@line 23159
     if ((HEAP8[$16 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$16 >> 2] | 0); //@line 23165
     }
     $21 = $4 + 40 | 0; //@line 23167
     $22 = HEAP32[$21 >> 2] | 0; //@line 23168
     if ($22 | 0) {
      $24 = $4 + 44 | 0; //@line 23171
      $25 = HEAP32[$24 >> 2] | 0; //@line 23172
      do {
       if (($25 | 0) == ($22 | 0)) {
        $36 = $22; //@line 23176
       } else {
        $27 = $4 + 48 | 0; //@line 23178
        $29 = $25; //@line 23179
        while (1) {
         $28 = $29 + -72 | 0; //@line 23181
         HEAP32[$24 >> 2] = $28; //@line 23182
         __THREW__ = 0; //@line 23183
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23184
         invoke_viii(13, $$byval_copy5 | 0, $27 | 0, $28 | 0); //@line 23185
         $30 = __THREW__; //@line 23186
         __THREW__ = 0; //@line 23186
         if ($30 & 1) {
          label = 12; //@line 23189
          break;
         }
         $29 = HEAP32[$24 >> 2] | 0; //@line 23192
         if (($29 | 0) == ($22 | 0)) {
          label = 13; //@line 23195
          break;
         }
        }
        if ((label | 0) == 12) {
         $34 = ___cxa_find_matching_catch_3(0) | 0; //@line 23202
         ___clang_call_terminate($34); //@line 23204
        } else if ((label | 0) == 13) {
         $36 = HEAP32[$21 >> 2] | 0; //@line 23209
         break;
        }
       }
      } while (0);
      __ZdlPv($36); //@line 23214
     }
     $37 = $4 + 4 | 0; //@line 23216
     if ((HEAP8[$37 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$37 >> 2] | 0); //@line 23222
     }
     $42 = $5 + 52 | 0; //@line 23224
     if ((HEAP8[$42 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$42 >> 2] | 0); //@line 23230
     }
     $47 = $5 + 40 | 0; //@line 23232
     $48 = HEAP32[$47 >> 2] | 0; //@line 23233
     if ($48 | 0) {
      $50 = $5 + 44 | 0; //@line 23236
      $51 = HEAP32[$50 >> 2] | 0; //@line 23237
      do {
       if (($51 | 0) == ($48 | 0)) {
        $62 = $48; //@line 23241
       } else {
        $53 = $5 + 48 | 0; //@line 23243
        $55 = $51; //@line 23244
        while (1) {
         $54 = $55 + -72 | 0; //@line 23246
         HEAP32[$50 >> 2] = $54; //@line 23247
         __THREW__ = 0; //@line 23248
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23249
         invoke_viii(13, $$byval_copy5 | 0, $53 | 0, $54 | 0); //@line 23250
         $56 = __THREW__; //@line 23251
         __THREW__ = 0; //@line 23251
         if ($56 & 1) {
          label = 24; //@line 23254
          break;
         }
         $55 = HEAP32[$50 >> 2] | 0; //@line 23257
         if (($55 | 0) == ($48 | 0)) {
          label = 25; //@line 23260
          break;
         }
        }
        if ((label | 0) == 24) {
         $60 = ___cxa_find_matching_catch_3(0) | 0; //@line 23267
         ___clang_call_terminate($60); //@line 23269
        } else if ((label | 0) == 25) {
         $62 = HEAP32[$47 >> 2] | 0; //@line 23274
         break;
        }
       }
      } while (0);
      __ZdlPv($62); //@line 23279
     }
     $63 = $5 + 4 | 0; //@line 23281
     if ((HEAP8[$63 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$63 >> 2] | 0); //@line 23287
     }
     $68 = $3 + 52 | 0; //@line 23289
     if ((HEAP8[$68 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$68 >> 2] | 0); //@line 23295
     }
     $73 = $3 + 40 | 0; //@line 23297
     $74 = HEAP32[$73 >> 2] | 0; //@line 23298
     if ($74 | 0) {
      $76 = $3 + 44 | 0; //@line 23301
      $77 = HEAP32[$76 >> 2] | 0; //@line 23302
      do {
       if (($77 | 0) == ($74 | 0)) {
        $88 = $74; //@line 23306
       } else {
        $79 = $3 + 48 | 0; //@line 23308
        $81 = $77; //@line 23309
        while (1) {
         $80 = $81 + -72 | 0; //@line 23311
         HEAP32[$76 >> 2] = $80; //@line 23312
         __THREW__ = 0; //@line 23313
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23314
         invoke_viii(13, $$byval_copy5 | 0, $79 | 0, $80 | 0); //@line 23315
         $82 = __THREW__; //@line 23316
         __THREW__ = 0; //@line 23316
         if ($82 & 1) {
          label = 36; //@line 23319
          break;
         }
         $81 = HEAP32[$76 >> 2] | 0; //@line 23322
         if (($81 | 0) == ($74 | 0)) {
          label = 37; //@line 23325
          break;
         }
        }
        if ((label | 0) == 36) {
         $86 = ___cxa_find_matching_catch_3(0) | 0; //@line 23332
         ___clang_call_terminate($86); //@line 23334
        } else if ((label | 0) == 37) {
         $88 = HEAP32[$73 >> 2] | 0; //@line 23339
         break;
        }
       }
      } while (0);
      __ZdlPv($88); //@line 23344
     }
     $89 = $3 + 4 | 0; //@line 23346
     if ((HEAP8[$89 + 11 >> 0] | 0) >= 0) {
      STACKTOP = sp; //@line 23351
      return;
     }
     __ZdlPv(HEAP32[$89 >> 2] | 0); //@line 23354
     STACKTOP = sp; //@line 23355
     return;
    }
   } while (0);
   $126 = $5 + 52 | 0; //@line 23358
   if ((HEAP8[$126 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$126 >> 2] | 0); //@line 23364
   }
   $131 = $5 + 40 | 0; //@line 23366
   $132 = HEAP32[$131 >> 2] | 0; //@line 23367
   if ($132 | 0) {
    $134 = $5 + 44 | 0; //@line 23370
    $135 = HEAP32[$134 >> 2] | 0; //@line 23371
    do {
     if (($135 | 0) == ($132 | 0)) {
      $146 = $132; //@line 23375
     } else {
      $137 = $5 + 48 | 0; //@line 23377
      $139 = $135; //@line 23378
      while (1) {
       $138 = $139 + -72 | 0; //@line 23380
       HEAP32[$134 >> 2] = $138; //@line 23381
       __THREW__ = 0; //@line 23382
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23383
       invoke_viii(13, $$byval_copy5 | 0, $137 | 0, $138 | 0); //@line 23384
       $140 = __THREW__; //@line 23385
       __THREW__ = 0; //@line 23385
       if ($140 & 1) {
        label = 62; //@line 23388
        break;
       }
       $139 = HEAP32[$134 >> 2] | 0; //@line 23391
       if (($139 | 0) == ($132 | 0)) {
        label = 63; //@line 23394
        break;
       }
      }
      if ((label | 0) == 62) {
       $144 = ___cxa_find_matching_catch_3(0) | 0; //@line 23401
       ___clang_call_terminate($144); //@line 23403
      } else if ((label | 0) == 63) {
       $146 = HEAP32[$131 >> 2] | 0; //@line 23408
       break;
      }
     }
    } while (0);
    __ZdlPv($146); //@line 23413
   }
   $147 = $5 + 4 | 0; //@line 23415
   if ((HEAP8[$147 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$147 >> 2] | 0); //@line 23421
    $$1$i$i$i = $$0$i$i$i; //@line 23422
    $$16$i$i$i = $$05$i$i$i; //@line 23422
   } else {
    $$1$i$i$i = $$0$i$i$i; //@line 23424
    $$16$i$i$i = $$05$i$i$i; //@line 23424
   }
  }
 }
 if ((label | 0) == 41) {
  $94 = ___cxa_find_matching_catch_2() | 0; //@line 23429
  $$1$i$i$i = tempRet0; //@line 23431
  $$16$i$i$i = $94; //@line 23431
 }
 $152 = $3 + 52 | 0; //@line 23433
 if ((HEAP8[$152 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$152 >> 2] | 0); //@line 23439
 }
 $157 = $3 + 40 | 0; //@line 23441
 $158 = HEAP32[$157 >> 2] | 0; //@line 23442
 if ($158 | 0) {
  $160 = $3 + 44 | 0; //@line 23445
  $161 = HEAP32[$160 >> 2] | 0; //@line 23446
  do {
   if (($161 | 0) == ($158 | 0)) {
    $172 = $158; //@line 23450
   } else {
    $163 = $3 + 48 | 0; //@line 23452
    $165 = $161; //@line 23453
    while (1) {
     $164 = $165 + -72 | 0; //@line 23455
     HEAP32[$160 >> 2] = $164; //@line 23456
     __THREW__ = 0; //@line 23457
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23458
     invoke_viii(13, $$byval_copy5 | 0, $163 | 0, $164 | 0); //@line 23459
     $166 = __THREW__; //@line 23460
     __THREW__ = 0; //@line 23460
     if ($166 & 1) {
      label = 74; //@line 23463
      break;
     }
     $165 = HEAP32[$160 >> 2] | 0; //@line 23466
     if (($165 | 0) == ($158 | 0)) {
      label = 75; //@line 23469
      break;
     }
    }
    if ((label | 0) == 74) {
     $170 = ___cxa_find_matching_catch_3(0) | 0; //@line 23476
     ___clang_call_terminate($170); //@line 23478
    } else if ((label | 0) == 75) {
     $172 = HEAP32[$157 >> 2] | 0; //@line 23483
     break;
    }
   }
  } while (0);
  __ZdlPv($172); //@line 23488
 }
 $173 = $3 + 4 | 0; //@line 23490
 if ((HEAP8[$173 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$16$i$i$i | 0); //@line 23495
 }
 __ZdlPv(HEAP32[$173 >> 2] | 0); //@line 23499
 ___resumeException($$16$i$i$i | 0); //@line 23500
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i43 = 0, $$0$i$i$i47 = 0, $$0$i$i$i52 = 0, $$0$i$i$i57 = 0, $$0$i$i$i62 = 0, $$0$i$i$i67 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $134 = 0, $137 = 0, $139 = 0, $141 = 0, $149 = 0, $152 = 0, $154 = 0, $156 = 0, $16 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $36 = 0, $39 = 0, $41 = 0, $43 = 0, $58 = 0, $61 = 0, $63 = 0, $65 = 0, $73 = 0, $76 = 0, $78 = 0, $80 = 0, $88 = 0, $92 = 0, $97 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 51390
 STACKTOP = STACKTOP + 16 | 0; //@line 51391
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 51391
 $10 = sp + 12 | 0; //@line 51392
 $11 = sp; //@line 51393
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37248) | 0; //@line 51395
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 255]($10, $12); //@line 51399
  $16 = HEAP32[$10 >> 2] | 0; //@line 51400
  HEAP8[$2 >> 0] = $16; //@line 51401
  HEAP8[$2 + 1 >> 0] = $16 >> 8; //@line 51401
  HEAP8[$2 + 2 >> 0] = $16 >> 16; //@line 51401
  HEAP8[$2 + 3 >> 0] = $16 >> 24; //@line 51401
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 255]($11, $12); //@line 51405
  $21 = $8 + 8 + 3 | 0; //@line 51407
  if ((HEAP8[$21 >> 0] | 0) < 0) {
   $24 = HEAP32[$8 >> 2] | 0; //@line 51411
   HEAP32[$10 >> 2] = 0; //@line 51412
   __ZNSt3__211char_traitsIwE6assignERwRKw($24, $10); //@line 51413
   HEAP32[$8 + 4 >> 2] = 0; //@line 51415
  } else {
   HEAP32[$10 >> 2] = 0; //@line 51417
   __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10); //@line 51418
   HEAP8[$21 >> 0] = 0; //@line 51419
  }
  __THREW__ = 0; //@line 51421
  invoke_vii(149, $8 | 0, 0); //@line 51422
  $26 = __THREW__; //@line 51423
  __THREW__ = 0; //@line 51423
  if ($26 & 1) {
   $28 = ___cxa_find_matching_catch_3(0) | 0; //@line 51426
   ___clang_call_terminate($28); //@line 51428
  }
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 51431
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 51431
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 51431
  $$0$i$i$i = 0; //@line 51432
  while (1) {
   if (($$0$i$i$i | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0; //@line 51439
   $$0$i$i$i = $$0$i$i$i + 1 | 0; //@line 51441
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 51443
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 255]($11, $12); //@line 51447
  $36 = $7 + 8 + 3 | 0; //@line 51449
  if ((HEAP8[$36 >> 0] | 0) < 0) {
   $39 = HEAP32[$7 >> 2] | 0; //@line 51453
   HEAP32[$10 >> 2] = 0; //@line 51454
   __ZNSt3__211char_traitsIwE6assignERwRKw($39, $10); //@line 51455
   HEAP32[$7 + 4 >> 2] = 0; //@line 51457
  } else {
   HEAP32[$10 >> 2] = 0; //@line 51459
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10); //@line 51460
   HEAP8[$36 >> 0] = 0; //@line 51461
  }
  __THREW__ = 0; //@line 51463
  invoke_vii(149, $7 | 0, 0); //@line 51464
  $41 = __THREW__; //@line 51465
  __THREW__ = 0; //@line 51465
  if ($41 & 1) {
   $43 = ___cxa_find_matching_catch_3(0) | 0; //@line 51468
   ___clang_call_terminate($43); //@line 51470
  }
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2]; //@line 51473
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 51473
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 51473
  $$0$i$i$i40 = 0; //@line 51474
  while (1) {
   if (($$0$i$i$i40 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i40 << 2) >> 2] = 0; //@line 51481
   $$0$i$i$i40 = $$0$i$i$i40 + 1 | 0; //@line 51483
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 51485
  HEAP32[$3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 255]($12) | 0; //@line 51490
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 255]($12) | 0; //@line 51495
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 255]($11, $12); //@line 51499
  $58 = $5 + 11 | 0; //@line 51500
  if ((HEAP8[$58 >> 0] | 0) < 0) {
   $61 = HEAP32[$5 >> 2] | 0; //@line 51504
   HEAP8[$10 >> 0] = 0; //@line 51505
   __ZNSt3__211char_traitsIcE6assignERcRKc($61, $10); //@line 51506
   HEAP32[$5 + 4 >> 2] = 0; //@line 51508
  } else {
   HEAP8[$10 >> 0] = 0; //@line 51510
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10); //@line 51511
   HEAP8[$58 >> 0] = 0; //@line 51512
  }
  __THREW__ = 0; //@line 51514
  invoke_vii(129, $5 | 0, 0); //@line 51515
  $63 = __THREW__; //@line 51516
  __THREW__ = 0; //@line 51516
  if ($63 & 1) {
   $65 = ___cxa_find_matching_catch_3(0) | 0; //@line 51519
   ___clang_call_terminate($65); //@line 51521
  }
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2]; //@line 51524
  HEAP32[$5 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 51524
  HEAP32[$5 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 51524
  $$0$i$i$i43 = 0; //@line 51525
  while (1) {
   if (($$0$i$i$i43 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i43 << 2) >> 2] = 0; //@line 51532
   $$0$i$i$i43 = $$0$i$i$i43 + 1 | 0; //@line 51534
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 51536
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 255]($11, $12); //@line 51540
  $73 = $6 + 8 + 3 | 0; //@line 51542
  if ((HEAP8[$73 >> 0] | 0) < 0) {
   $76 = HEAP32[$6 >> 2] | 0; //@line 51546
   HEAP32[$10 >> 2] = 0; //@line 51547
   __ZNSt3__211char_traitsIwE6assignERwRKw($76, $10); //@line 51548
   HEAP32[$6 + 4 >> 2] = 0; //@line 51550
  } else {
   HEAP32[$10 >> 2] = 0; //@line 51552
   __ZNSt3__211char_traitsIwE6assignERwRKw($6, $10); //@line 51553
   HEAP8[$73 >> 0] = 0; //@line 51554
  }
  __THREW__ = 0; //@line 51556
  invoke_vii(149, $6 | 0, 0); //@line 51557
  $78 = __THREW__; //@line 51558
  __THREW__ = 0; //@line 51558
  if ($78 & 1) {
   $80 = ___cxa_find_matching_catch_3(0) | 0; //@line 51561
   ___clang_call_terminate($80); //@line 51563
  }
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2]; //@line 51566
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 51566
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 51566
  $$0$i$i$i47 = 0; //@line 51567
  while (1) {
   if (($$0$i$i$i47 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i47 << 2) >> 2] = 0; //@line 51574
   $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0; //@line 51576
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 51578
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 255]($12) | 0; //@line 51583
 } else {
  $88 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37240) | 0; //@line 51585
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 44 >> 2] & 255]($10, $88); //@line 51589
  $92 = HEAP32[$10 >> 2] | 0; //@line 51590
  HEAP8[$2 >> 0] = $92; //@line 51591
  HEAP8[$2 + 1 >> 0] = $92 >> 8; //@line 51591
  HEAP8[$2 + 2 >> 0] = $92 >> 16; //@line 51591
  HEAP8[$2 + 3 >> 0] = $92 >> 24; //@line 51591
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 32 >> 2] & 255]($11, $88); //@line 51595
  $97 = $8 + 8 + 3 | 0; //@line 51597
  if ((HEAP8[$97 >> 0] | 0) < 0) {
   $100 = HEAP32[$8 >> 2] | 0; //@line 51601
   HEAP32[$10 >> 2] = 0; //@line 51602
   __ZNSt3__211char_traitsIwE6assignERwRKw($100, $10); //@line 51603
   HEAP32[$8 + 4 >> 2] = 0; //@line 51605
  } else {
   HEAP32[$10 >> 2] = 0; //@line 51607
   __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10); //@line 51608
   HEAP8[$97 >> 0] = 0; //@line 51609
  }
  __THREW__ = 0; //@line 51611
  invoke_vii(149, $8 | 0, 0); //@line 51612
  $102 = __THREW__; //@line 51613
  __THREW__ = 0; //@line 51613
  if ($102 & 1) {
   $104 = ___cxa_find_matching_catch_3(0) | 0; //@line 51616
   ___clang_call_terminate($104); //@line 51618
  }
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 51621
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 51621
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 51621
  $$0$i$i$i52 = 0; //@line 51622
  while (1) {
   if (($$0$i$i$i52 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i52 << 2) >> 2] = 0; //@line 51629
   $$0$i$i$i52 = $$0$i$i$i52 + 1 | 0; //@line 51631
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 51633
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 28 >> 2] & 255]($11, $88); //@line 51637
  $112 = $7 + 8 + 3 | 0; //@line 51639
  if ((HEAP8[$112 >> 0] | 0) < 0) {
   $115 = HEAP32[$7 >> 2] | 0; //@line 51643
   HEAP32[$10 >> 2] = 0; //@line 51644
   __ZNSt3__211char_traitsIwE6assignERwRKw($115, $10); //@line 51645
   HEAP32[$7 + 4 >> 2] = 0; //@line 51647
  } else {
   HEAP32[$10 >> 2] = 0; //@line 51649
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10); //@line 51650
   HEAP8[$112 >> 0] = 0; //@line 51651
  }
  __THREW__ = 0; //@line 51653
  invoke_vii(149, $7 | 0, 0); //@line 51654
  $117 = __THREW__; //@line 51655
  __THREW__ = 0; //@line 51655
  if ($117 & 1) {
   $119 = ___cxa_find_matching_catch_3(0) | 0; //@line 51658
   ___clang_call_terminate($119); //@line 51660
  }
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2]; //@line 51663
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 51663
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 51663
  $$0$i$i$i57 = 0; //@line 51664
  while (1) {
   if (($$0$i$i$i57 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i57 << 2) >> 2] = 0; //@line 51671
   $$0$i$i$i57 = $$0$i$i$i57 + 1 | 0; //@line 51673
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 51675
  HEAP32[$3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 12 >> 2] & 255]($88) | 0; //@line 51680
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 16 >> 2] & 255]($88) | 0; //@line 51685
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 20 >> 2] & 255]($11, $88); //@line 51689
  $134 = $5 + 11 | 0; //@line 51690
  if ((HEAP8[$134 >> 0] | 0) < 0) {
   $137 = HEAP32[$5 >> 2] | 0; //@line 51694
   HEAP8[$10 >> 0] = 0; //@line 51695
   __ZNSt3__211char_traitsIcE6assignERcRKc($137, $10); //@line 51696
   HEAP32[$5 + 4 >> 2] = 0; //@line 51698
  } else {
   HEAP8[$10 >> 0] = 0; //@line 51700
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10); //@line 51701
   HEAP8[$134 >> 0] = 0; //@line 51702
  }
  __THREW__ = 0; //@line 51704
  invoke_vii(129, $5 | 0, 0); //@line 51705
  $139 = __THREW__; //@line 51706
  __THREW__ = 0; //@line 51706
  if ($139 & 1) {
   $141 = ___cxa_find_matching_catch_3(0) | 0; //@line 51709
   ___clang_call_terminate($141); //@line 51711
  }
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2]; //@line 51714
  HEAP32[$5 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 51714
  HEAP32[$5 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 51714
  $$0$i$i$i62 = 0; //@line 51715
  while (1) {
   if (($$0$i$i$i62 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i62 << 2) >> 2] = 0; //@line 51722
   $$0$i$i$i62 = $$0$i$i$i62 + 1 | 0; //@line 51724
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 51726
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 24 >> 2] & 255]($11, $88); //@line 51730
  $149 = $6 + 8 + 3 | 0; //@line 51732
  if ((HEAP8[$149 >> 0] | 0) < 0) {
   $152 = HEAP32[$6 >> 2] | 0; //@line 51736
   HEAP32[$10 >> 2] = 0; //@line 51737
   __ZNSt3__211char_traitsIwE6assignERwRKw($152, $10); //@line 51738
   HEAP32[$6 + 4 >> 2] = 0; //@line 51740
  } else {
   HEAP32[$10 >> 2] = 0; //@line 51742
   __ZNSt3__211char_traitsIwE6assignERwRKw($6, $10); //@line 51743
   HEAP8[$149 >> 0] = 0; //@line 51744
  }
  __THREW__ = 0; //@line 51746
  invoke_vii(149, $6 | 0, 0); //@line 51747
  $154 = __THREW__; //@line 51748
  __THREW__ = 0; //@line 51748
  if ($154 & 1) {
   $156 = ___cxa_find_matching_catch_3(0) | 0; //@line 51751
   ___clang_call_terminate($156); //@line 51753
  }
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2]; //@line 51756
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 51756
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 51756
  $$0$i$i$i67 = 0; //@line 51757
  while (1) {
   if (($$0$i$i$i67 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i67 << 2) >> 2] = 0; //@line 51764
   $$0$i$i$i67 = $$0$i$i$i67 + 1 | 0; //@line 51766
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 51768
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 255]($88) | 0; //@line 51773
 }
 HEAP32[$9 >> 2] = $storemerge; //@line 51775
 STACKTOP = sp; //@line 51776
 return;
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i45 = 0, $$0$i$i$i50 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $10 = 0, $100 = 0, $107 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $12 = 0, $129 = 0, $132 = 0, $134 = 0, $136 = 0, $143 = 0, $146 = 0, $148 = 0, $150 = 0, $16 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $34 = 0, $37 = 0, $39 = 0, $41 = 0, $56 = 0, $59 = 0, $61 = 0, $63 = 0, $70 = 0, $73 = 0, $75 = 0, $77 = 0, $85 = 0, $89 = 0, $93 = 0, $96 = 0, $98 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP; //@line 47829
 STACKTOP = STACKTOP + 16 | 0; //@line 47830
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 47830
 $10 = sp + 12 | 0; //@line 47831
 $11 = sp; //@line 47832
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37232) | 0; //@line 47834
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 255]($10, $12); //@line 47838
  $16 = HEAP32[$10 >> 2] | 0; //@line 47839
  HEAP8[$2 >> 0] = $16; //@line 47840
  HEAP8[$2 + 1 >> 0] = $16 >> 8; //@line 47840
  HEAP8[$2 + 2 >> 0] = $16 >> 16; //@line 47840
  HEAP8[$2 + 3 >> 0] = $16 >> 24; //@line 47840
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 255]($11, $12); //@line 47844
  $20 = $8 + 11 | 0; //@line 47845
  if ((HEAP8[$20 >> 0] | 0) < 0) {
   $23 = HEAP32[$8 >> 2] | 0; //@line 47849
   HEAP8[$10 >> 0] = 0; //@line 47850
   __ZNSt3__211char_traitsIcE6assignERcRKc($23, $10); //@line 47851
   HEAP32[$8 + 4 >> 2] = 0; //@line 47853
  } else {
   HEAP8[$10 >> 0] = 0; //@line 47855
   __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10); //@line 47856
   HEAP8[$20 >> 0] = 0; //@line 47857
  }
  __THREW__ = 0; //@line 47859
  invoke_vii(129, $8 | 0, 0); //@line 47860
  $25 = __THREW__; //@line 47861
  __THREW__ = 0; //@line 47861
  if ($25 & 1) {
   $27 = ___cxa_find_matching_catch_3(0) | 0; //@line 47864
   ___clang_call_terminate($27); //@line 47866
  }
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 47869
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 47869
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 47869
  $$0$i$i$i = 0; //@line 47870
  while (1) {
   if (($$0$i$i$i | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0; //@line 47877
   $$0$i$i$i = $$0$i$i$i + 1 | 0; //@line 47879
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 47881
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 255]($11, $12); //@line 47885
  $34 = $7 + 11 | 0; //@line 47886
  if ((HEAP8[$34 >> 0] | 0) < 0) {
   $37 = HEAP32[$7 >> 2] | 0; //@line 47890
   HEAP8[$10 >> 0] = 0; //@line 47891
   __ZNSt3__211char_traitsIcE6assignERcRKc($37, $10); //@line 47892
   HEAP32[$7 + 4 >> 2] = 0; //@line 47894
  } else {
   HEAP8[$10 >> 0] = 0; //@line 47896
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10); //@line 47897
   HEAP8[$34 >> 0] = 0; //@line 47898
  }
  __THREW__ = 0; //@line 47900
  invoke_vii(129, $7 | 0, 0); //@line 47901
  $39 = __THREW__; //@line 47902
  __THREW__ = 0; //@line 47902
  if ($39 & 1) {
   $41 = ___cxa_find_matching_catch_3(0) | 0; //@line 47905
   ___clang_call_terminate($41); //@line 47907
  }
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2]; //@line 47910
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 47910
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 47910
  $$0$i$i$i40 = 0; //@line 47911
  while (1) {
   if (($$0$i$i$i40 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i40 << 2) >> 2] = 0; //@line 47918
   $$0$i$i$i40 = $$0$i$i$i40 + 1 | 0; //@line 47920
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 47922
  HEAP8[$3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 255]($12) | 0; //@line 47927
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 255]($12) | 0; //@line 47932
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 255]($11, $12); //@line 47936
  $56 = $5 + 11 | 0; //@line 47937
  if ((HEAP8[$56 >> 0] | 0) < 0) {
   $59 = HEAP32[$5 >> 2] | 0; //@line 47941
   HEAP8[$10 >> 0] = 0; //@line 47942
   __ZNSt3__211char_traitsIcE6assignERcRKc($59, $10); //@line 47943
   HEAP32[$5 + 4 >> 2] = 0; //@line 47945
  } else {
   HEAP8[$10 >> 0] = 0; //@line 47947
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10); //@line 47948
   HEAP8[$56 >> 0] = 0; //@line 47949
  }
  __THREW__ = 0; //@line 47951
  invoke_vii(129, $5 | 0, 0); //@line 47952
  $61 = __THREW__; //@line 47953
  __THREW__ = 0; //@line 47953
  if ($61 & 1) {
   $63 = ___cxa_find_matching_catch_3(0) | 0; //@line 47956
   ___clang_call_terminate($63); //@line 47958
  }
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2]; //@line 47961
  HEAP32[$5 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 47961
  HEAP32[$5 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 47961
  $$0$i$i$i45 = 0; //@line 47962
  while (1) {
   if (($$0$i$i$i45 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i45 << 2) >> 2] = 0; //@line 47969
   $$0$i$i$i45 = $$0$i$i$i45 + 1 | 0; //@line 47971
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 47973
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 255]($11, $12); //@line 47977
  $70 = $6 + 11 | 0; //@line 47978
  if ((HEAP8[$70 >> 0] | 0) < 0) {
   $73 = HEAP32[$6 >> 2] | 0; //@line 47982
   HEAP8[$10 >> 0] = 0; //@line 47983
   __ZNSt3__211char_traitsIcE6assignERcRKc($73, $10); //@line 47984
   HEAP32[$6 + 4 >> 2] = 0; //@line 47986
  } else {
   HEAP8[$10 >> 0] = 0; //@line 47988
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10); //@line 47989
   HEAP8[$70 >> 0] = 0; //@line 47990
  }
  __THREW__ = 0; //@line 47992
  invoke_vii(129, $6 | 0, 0); //@line 47993
  $75 = __THREW__; //@line 47994
  __THREW__ = 0; //@line 47994
  if ($75 & 1) {
   $77 = ___cxa_find_matching_catch_3(0) | 0; //@line 47997
   ___clang_call_terminate($77); //@line 47999
  }
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2]; //@line 48002
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 48002
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 48002
  $$0$i$i$i50 = 0; //@line 48003
  while (1) {
   if (($$0$i$i$i50 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i50 << 2) >> 2] = 0; //@line 48010
   $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0; //@line 48012
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 48014
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 255]($12) | 0; //@line 48019
 } else {
  $85 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37224) | 0; //@line 48021
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 44 >> 2] & 255]($10, $85); //@line 48025
  $89 = HEAP32[$10 >> 2] | 0; //@line 48026
  HEAP8[$2 >> 0] = $89; //@line 48027
  HEAP8[$2 + 1 >> 0] = $89 >> 8; //@line 48027
  HEAP8[$2 + 2 >> 0] = $89 >> 16; //@line 48027
  HEAP8[$2 + 3 >> 0] = $89 >> 24; //@line 48027
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 32 >> 2] & 255]($11, $85); //@line 48031
  $93 = $8 + 11 | 0; //@line 48032
  if ((HEAP8[$93 >> 0] | 0) < 0) {
   $96 = HEAP32[$8 >> 2] | 0; //@line 48036
   HEAP8[$10 >> 0] = 0; //@line 48037
   __ZNSt3__211char_traitsIcE6assignERcRKc($96, $10); //@line 48038
   HEAP32[$8 + 4 >> 2] = 0; //@line 48040
  } else {
   HEAP8[$10 >> 0] = 0; //@line 48042
   __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10); //@line 48043
   HEAP8[$93 >> 0] = 0; //@line 48044
  }
  __THREW__ = 0; //@line 48046
  invoke_vii(129, $8 | 0, 0); //@line 48047
  $98 = __THREW__; //@line 48048
  __THREW__ = 0; //@line 48048
  if ($98 & 1) {
   $100 = ___cxa_find_matching_catch_3(0) | 0; //@line 48051
   ___clang_call_terminate($100); //@line 48053
  }
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2]; //@line 48056
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 48056
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 48056
  $$0$i$i$i55 = 0; //@line 48057
  while (1) {
   if (($$0$i$i$i55 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i55 << 2) >> 2] = 0; //@line 48064
   $$0$i$i$i55 = $$0$i$i$i55 + 1 | 0; //@line 48066
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 48068
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 28 >> 2] & 255]($11, $85); //@line 48072
  $107 = $7 + 11 | 0; //@line 48073
  if ((HEAP8[$107 >> 0] | 0) < 0) {
   $110 = HEAP32[$7 >> 2] | 0; //@line 48077
   HEAP8[$10 >> 0] = 0; //@line 48078
   __ZNSt3__211char_traitsIcE6assignERcRKc($110, $10); //@line 48079
   HEAP32[$7 + 4 >> 2] = 0; //@line 48081
  } else {
   HEAP8[$10 >> 0] = 0; //@line 48083
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10); //@line 48084
   HEAP8[$107 >> 0] = 0; //@line 48085
  }
  __THREW__ = 0; //@line 48087
  invoke_vii(129, $7 | 0, 0); //@line 48088
  $112 = __THREW__; //@line 48089
  __THREW__ = 0; //@line 48089
  if ($112 & 1) {
   $114 = ___cxa_find_matching_catch_3(0) | 0; //@line 48092
   ___clang_call_terminate($114); //@line 48094
  }
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2]; //@line 48097
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 48097
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 48097
  $$0$i$i$i60 = 0; //@line 48098
  while (1) {
   if (($$0$i$i$i60 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i60 << 2) >> 2] = 0; //@line 48105
   $$0$i$i$i60 = $$0$i$i$i60 + 1 | 0; //@line 48107
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 48109
  HEAP8[$3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 12 >> 2] & 255]($85) | 0; //@line 48114
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 16 >> 2] & 255]($85) | 0; //@line 48119
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] & 255]($11, $85); //@line 48123
  $129 = $5 + 11 | 0; //@line 48124
  if ((HEAP8[$129 >> 0] | 0) < 0) {
   $132 = HEAP32[$5 >> 2] | 0; //@line 48128
   HEAP8[$10 >> 0] = 0; //@line 48129
   __ZNSt3__211char_traitsIcE6assignERcRKc($132, $10); //@line 48130
   HEAP32[$5 + 4 >> 2] = 0; //@line 48132
  } else {
   HEAP8[$10 >> 0] = 0; //@line 48134
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10); //@line 48135
   HEAP8[$129 >> 0] = 0; //@line 48136
  }
  __THREW__ = 0; //@line 48138
  invoke_vii(129, $5 | 0, 0); //@line 48139
  $134 = __THREW__; //@line 48140
  __THREW__ = 0; //@line 48140
  if ($134 & 1) {
   $136 = ___cxa_find_matching_catch_3(0) | 0; //@line 48143
   ___clang_call_terminate($136); //@line 48145
  }
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2]; //@line 48148
  HEAP32[$5 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 48148
  HEAP32[$5 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 48148
  $$0$i$i$i65 = 0; //@line 48149
  while (1) {
   if (($$0$i$i$i65 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i65 << 2) >> 2] = 0; //@line 48156
   $$0$i$i$i65 = $$0$i$i$i65 + 1 | 0; //@line 48158
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 48160
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 24 >> 2] & 255]($11, $85); //@line 48164
  $143 = $6 + 11 | 0; //@line 48165
  if ((HEAP8[$143 >> 0] | 0) < 0) {
   $146 = HEAP32[$6 >> 2] | 0; //@line 48169
   HEAP8[$10 >> 0] = 0; //@line 48170
   __ZNSt3__211char_traitsIcE6assignERcRKc($146, $10); //@line 48171
   HEAP32[$6 + 4 >> 2] = 0; //@line 48173
  } else {
   HEAP8[$10 >> 0] = 0; //@line 48175
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10); //@line 48176
   HEAP8[$143 >> 0] = 0; //@line 48177
  }
  __THREW__ = 0; //@line 48179
  invoke_vii(129, $6 | 0, 0); //@line 48180
  $148 = __THREW__; //@line 48181
  __THREW__ = 0; //@line 48181
  if ($148 & 1) {
   $150 = ___cxa_find_matching_catch_3(0) | 0; //@line 48184
   ___clang_call_terminate($150); //@line 48186
  }
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2]; //@line 48189
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 48189
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 48189
  $$0$i$i$i70 = 0; //@line 48190
  while (1) {
   if (($$0$i$i$i70 | 0) == 3) {
    break;
   }
   HEAP32[$11 + ($$0$i$i$i70 << 2) >> 2] = 0; //@line 48197
   $$0$i$i$i70 = $$0$i$i$i70 + 1 | 0; //@line 48199
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 48201
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 255]($85) | 0; //@line 48206
 }
 HEAP32[$9 >> 2] = $storemerge; //@line 48208
 STACKTOP = sp; //@line 48209
 return;
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $5 = 0, $50 = 0, $52 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 11663
 $6 = HEAP32[$5 >> 2] | 0; //@line 11664
 $7 = $0 + 100 | 0; //@line 11665
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 11670
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 11673
  $$0142 = 0; //@line 11673
 } else {
  $$0 = ___shgetc($0) | 0; //@line 11676
  $$0142 = 0; //@line 11676
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 11681
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 11689
    $$0148 = 0; //@line 11689
    $$0152 = 1.0; //@line 11689
    $$0155 = 0.0; //@line 11689
    $$0159 = 0; //@line 11689
    $$2 = $$0; //@line 11689
    $$2144 = $$0142; //@line 11689
    $50 = 0; //@line 11689
    $52 = 0; //@line 11689
    $95 = 0; //@line 11689
    $97 = 0; //@line 11689
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 11693
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 11698
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 11701
   $$0142 = 1; //@line 11701
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 11705
   $$0142 = 1; //@line 11705
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 11710
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 11715
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 11718
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 11721
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 11725
   $37 = 0; //@line 11725
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 11727
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 11732
     $40 = HEAPU8[$29 >> 0] | 0; //@line 11735
    } else {
     $40 = ___shgetc($0) | 0; //@line 11738
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 11740
    $39 = tempRet0; //@line 11741
    if (($40 | 0) == 48) {
     $36 = $38; //@line 11744
     $37 = $39; //@line 11744
    } else {
     $$0146 = 1; //@line 11746
     $$0148 = 0; //@line 11746
     $$0152 = 1.0; //@line 11746
     $$0155 = 0.0; //@line 11746
     $$0159 = 0; //@line 11746
     $$2 = $40; //@line 11746
     $$2144 = 1; //@line 11746
     $50 = 0; //@line 11746
     $52 = 0; //@line 11746
     $95 = $38; //@line 11746
     $97 = $39; //@line 11746
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 11751
   $$0148 = 0; //@line 11751
   $$0152 = 1.0; //@line 11751
   $$0155 = 0.0; //@line 11751
   $$0159 = 0; //@line 11751
   $$2 = $$1$ph; //@line 11751
   $$2144 = $$0142; //@line 11751
   $50 = 0; //@line 11751
   $52 = 0; //@line 11751
   $95 = 0; //@line 11751
   $97 = 0; //@line 11751
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 11755
  $$pre = $$2 | 32; //@line 11757
  if ($42 >>> 0 < 10) {
   label = 20; //@line 11759
  } else {
   $46 = ($$2 | 0) == 46; //@line 11763
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 11766
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 11772
     $$2150 = $$0148; //@line 11772
     $$2154 = $$0152; //@line 11772
     $$2157 = $$0155; //@line 11772
     $$2161 = $$0159; //@line 11772
     $$3145 = $$2144; //@line 11772
     $211 = $52; //@line 11772
     $212 = $50; //@line 11772
     $213 = $52; //@line 11772
     $214 = $50; //@line 11772
    } else {
     $$2$lcssa = 46; //@line 11774
     break;
    }
   } else {
    label = 20; //@line 11778
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 11782
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 11785
   do {
    if (($50 | 0) < 0 | ($50 | 0) == 0 & $52 >>> 0 < 8) {
     $$1149 = $$0148; //@line 11795
     $$1153 = $$0152; //@line 11795
     $$1156 = $$0155; //@line 11795
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 11795
    } else {
     if (($50 | 0) < 0 | ($50 | 0) == 0 & $52 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 11804
      $$1149 = $$0148; //@line 11807
      $$1153 = $65; //@line 11807
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 11807
      $$1160 = $$0159; //@line 11807
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 11812
      $$1149 = $or$cond ? $$0148 : 1; //@line 11817
      $$1153 = $$0152; //@line 11817
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 11817
      $$1160 = $$0159; //@line 11817
      break;
     }
    }
   } while (0);
   $72 = _i64Add($52 | 0, $50 | 0, 1, 0) | 0; //@line 11822
   $$1147 = $$0146; //@line 11824
   $$2150 = $$1149; //@line 11824
   $$2154 = $$1153; //@line 11824
   $$2157 = $$1156; //@line 11824
   $$2161 = $$1160; //@line 11824
   $$3145 = 1; //@line 11824
   $211 = $95; //@line 11824
   $212 = $97; //@line 11824
   $213 = $72; //@line 11824
   $214 = tempRet0; //@line 11824
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 11826
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 11831
   $$0146 = $$1147; //@line 11834
   $$0148 = $$2150; //@line 11834
   $$0152 = $$2154; //@line 11834
   $$0155 = $$2157; //@line 11834
   $$0159 = $$2161; //@line 11834
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 11834
   $$2144 = $$3145; //@line 11834
   $50 = $214; //@line 11834
   $52 = $213; //@line 11834
   $95 = $211; //@line 11834
   $97 = $212; //@line 11834
   continue;
  } else {
   $$0146 = $$1147; //@line 11838
   $$0148 = $$2150; //@line 11838
   $$0152 = $$2154; //@line 11838
   $$0155 = $$2157; //@line 11838
   $$0159 = $$2161; //@line 11838
   $$2 = ___shgetc($0) | 0; //@line 11838
   $$2144 = $$3145; //@line 11838
   $50 = $214; //@line 11838
   $52 = $213; //@line 11838
   $95 = $211; //@line 11838
   $97 = $212; //@line 11838
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 11846
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 11850
   }
   if (!$4) {
    ___shlim($0, 0); //@line 11854
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 11859
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 11866
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 11871
  } else {
   $94 = ($$0146 | 0) == 0; //@line 11873
   $96 = $94 ? $52 : $95; //@line 11874
   $98 = $94 ? $50 : $97; //@line 11875
   if (($50 | 0) < 0 | ($50 | 0) == 0 & $52 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 11882
    $105 = $52; //@line 11882
    $106 = $50; //@line 11882
    while (1) {
     $104 = $$3162183 << 4; //@line 11884
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 11885
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 11895
      break;
     } else {
      $$3162183 = $104; //@line 11893
      $106 = tempRet0; //@line 11893
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 11900
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 11905
    $117 = tempRet0; //@line 11906
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 11913
      $$0165 = 0.0; //@line 11914
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 11920
      $135 = 0; //@line 11920
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 11924
      $134 = 0; //@line 11925
      $135 = 0; //@line 11925
     }
    } else {
     $134 = $116; //@line 11928
     $135 = $117; //@line 11928
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 11934
     $135 = 0; //@line 11934
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 11938
     $134 = 0; //@line 11939
     $135 = 0; //@line 11939
    }
   }
   $130 = _bitshift64Shl($96 | 0, $98 | 0, 2) | 0; //@line 11942
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 11944
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 11946
   $137 = tempRet0; //@line 11947
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 11952
    break;
   }
   $141 = 0 - $2 | 0; //@line 11955
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 11957
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 11965
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 11969
    break;
   }
   $153 = $2 + -106 | 0; //@line 11972
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 11974
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 11982
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 11986
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 11991
    $$4163178 = $$3162$lcssa; //@line 11991
    $170 = $136; //@line 11991
    $171 = $137; //@line 11991
    while (1) {
     $166 = !($$3158179 >= .5); //@line 11993
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 11998
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 12000
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 12001
     $173 = tempRet0; //@line 12002
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 12005
      $$4163178 = $$5164; //@line 12005
      $170 = $172; //@line 12005
      $171 = $173; //@line 12005
     } else {
      $$3158$lcssa = $$4; //@line 12007
      $$4163$lcssa = $$5164; //@line 12007
      $181 = $172; //@line 12007
      $182 = $173; //@line 12007
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 12012
    $$4163$lcssa = $$3162$lcssa; //@line 12012
    $181 = $136; //@line 12012
    $182 = $137; //@line 12012
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 12015
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 12018
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 12020
   $184 = tempRet0; //@line 12021
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 12030
     label = 59; //@line 12031
    } else {
     $$0166170 = 0; //@line 12033
     $194 = 84; //@line 12033
     label = 61; //@line 12034
    }
   } else {
    $$0166 = $1; //@line 12037
    label = 59; //@line 12038
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 12044
     $194 = 84 - $$0166 | 0; //@line 12044
     label = 61; //@line 12045
    } else {
     $$0151 = 0.0; //@line 12048
     $$0166169 = $$0166; //@line 12048
     $$pre$phi201Z2D = +($3 | 0); //@line 12048
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 12052
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 12055
    $$0166169 = $$0166170; //@line 12055
    $$pre$phi201Z2D = $193; //@line 12055
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 12062
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 12071
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 12075
   }
   $$0165 = +_scalbnl($207, $181); //@line 12078
  }
 } while (0);
 return +$$0165;
}
function _mbsrtowcs($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0100$lcssa = 0, $$0100136 = 0, $$0107135 = 0, $$0113134 = 0, $$099 = 0, $$10 = 0, $$1101 = 0, $$1101$ph = 0, $$1108$ph = 0, $$1108138 = 0, $$11124 = 0, $$1114 = 0, $$1114$ph = 0, $$11163 = 0, $$2 = 0, $$2102144 = 0, $$2109 = 0, $$2115143 = 0, $$3103 = 0, $$3110 = 0, $$3116 = 0, $$4 = 0, $$4104 = 0, $$4111 = 0, $$4117 = 0, $$5 = 0, $$5105 = 0, $$5112 = 0, $$5112123 = 0, $$5112162 = 0, $$5118$ph = 0, $$5118137 = 0, $$6 = 0, $$6106$lcssa = 0, $$6106$ph = 0, $$6106139 = 0, $$6119 = 0, $$7 = 0, $$7120 = 0, $$8 = 0, $$8121 = 0, $$9 = 0, $$9$sink = 0, $$9122 = 0, $$9122161 = 0, $105 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $115 = 0, $119 = 0, $125 = 0, $126 = 0, $133 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $148 = 0, $156 = 0, $17 = 0, $19 = 0, $23 = 0, $27 = 0, $34 = 0, $39 = 0, $4 = 0, $42 = 0, $48 = 0, $49 = 0, $54 = 0, $6 = 0, $61 = 0, $67 = 0, $73 = 0, $81 = 0, $89 = 0, label = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 16660
 if (!$3) {
  label = 5; //@line 16663
 } else {
  $6 = HEAP32[$3 >> 2] | 0; //@line 16665
  if (!$6) {
   label = 5; //@line 16668
  } else {
   if (!$0) {
    $$2 = $6; //@line 16672
    $$4104 = $4; //@line 16672
    $$4117 = $2; //@line 16672
    label = 25; //@line 16673
   } else {
    HEAP32[$3 >> 2] = 0; //@line 16675
    $$4 = $6; //@line 16676
    $$4111 = $0; //@line 16676
    $$8121 = $2; //@line 16676
    $$9 = $4; //@line 16676
    label = 43; //@line 16677
   }
  }
 }
 L5 : do {
  if ((label | 0) == 5) {
   $14 = ($0 | 0) != 0; //@line 16688
   if (HEAP32[HEAP32[(___pthread_self_623() | 0) + 188 >> 2] >> 2] | 0) {
    if ($14) {
     $$1108$ph = $0; //@line 16691
     $$5118$ph = $2; //@line 16691
     $$6106$ph = $4; //@line 16691
     label = 15; //@line 16692
     break;
    } else {
     $$1101$ph = $4; //@line 16695
     $$1114$ph = $2; //@line 16695
     label = 14; //@line 16696
     break;
    }
   }
   if (!$14) {
    $$099 = _strlen($4) | 0; //@line 16702
    label = 59; //@line 16703
    break;
   }
   L13 : do {
    if (!$2) {
     $$0100$lcssa = $4; //@line 16709
    } else {
     $$0100136 = $4; //@line 16711
     $$0107135 = $0; //@line 16711
     $$0113134 = $2; //@line 16711
     while (1) {
      $17 = HEAP8[$$0100136 >> 0] | 0; //@line 16713
      if (!($17 << 24 >> 24)) {
       break;
      }
      $19 = $$0100136 + 1 | 0; //@line 16718
      HEAP32[$$0107135 >> 2] = $17 << 24 >> 24 & 57343; //@line 16722
      $23 = $$0113134 + -1 | 0; //@line 16723
      if (!$23) {
       $$0100$lcssa = $19; //@line 16726
       break L13;
      } else {
       $$0100136 = $19; //@line 16729
       $$0107135 = $$0107135 + 4 | 0; //@line 16729
       $$0113134 = $23; //@line 16729
      }
     }
     HEAP32[$$0107135 >> 2] = 0; //@line 16732
     HEAP32[$1 >> 2] = 0; //@line 16733
     $$099 = $2 - $$0113134 | 0; //@line 16735
     label = 59; //@line 16736
     break L5;
    }
   } while (0);
   HEAP32[$1 >> 2] = $$0100$lcssa; //@line 16740
   $$099 = $2; //@line 16741
   label = 59; //@line 16742
  }
 } while (0);
 L19 : while (1) {
  L20 : do {
   if ((label | 0) == 14) {
    label = 0; //@line 16748
    $$1101 = $$1101$ph; //@line 16749
    $$1114 = $$1114$ph; //@line 16749
    while (1) {
     $27 = HEAP8[$$1101 >> 0] | 0; //@line 16751
     if ((($27 & 255) + -1 | 0) >>> 0 < 127) {
      if (!($$1101 & 3)) {
       $34 = HEAP32[$$1101 >> 2] | 0; //@line 16760
       $39 = $34 & 255; //@line 16765
       if (!(($34 + -16843009 | $34) & -2139062144)) {
        $$2102144 = $$1101; //@line 16767
        $$2115143 = $$1114; //@line 16767
        do {
         $$2102144 = $$2102144 + 4 | 0; //@line 16769
         $$2115143 = $$2115143 + -4 | 0; //@line 16770
         $42 = HEAP32[$$2102144 >> 2] | 0; //@line 16771
        } while (!(($42 + -16843009 | $42) & -2139062144 | 0));
        $$3103 = $$2102144; //@line 16783
        $$3116 = $$2115143; //@line 16783
        $49 = $42 & 255; //@line 16783
       } else {
        $$3103 = $$1101; //@line 16785
        $$3116 = $$1114; //@line 16785
        $49 = $39; //@line 16785
       }
      } else {
       $$3103 = $$1101; //@line 16788
       $$3116 = $$1114; //@line 16788
       $49 = $27; //@line 16788
      }
     } else {
      $$3103 = $$1101; //@line 16791
      $$3116 = $$1114; //@line 16791
      $49 = $27; //@line 16791
     }
     $48 = $49 & 255; //@line 16793
     if (($48 + -1 | 0) >>> 0 >= 127) {
      break;
     }
     $$1101 = $$3103 + 1 | 0; //@line 16801
     $$1114 = $$3116 + -1 | 0; //@line 16801
    }
    $54 = $48 + -194 | 0; //@line 16803
    if ($54 >>> 0 > 50) {
     $$11163 = $$3103; //@line 16806
     $$5112162 = $0; //@line 16806
     $$9122161 = $$3116; //@line 16806
     label = 53; //@line 16807
    } else {
     $$2 = HEAP32[5324 + ($54 << 2) >> 2] | 0; //@line 16812
     $$4104 = $$3103 + 1 | 0; //@line 16812
     $$4117 = $$3116; //@line 16812
     label = 25; //@line 16813
     continue L19;
    }
   } else if ((label | 0) == 15) {
    label = 0; //@line 16818
    L22 : do {
     if (!$$5118$ph) {
      $$6106$lcssa = $$6106$ph; //@line 16822
     } else {
      $$1108138 = $$1108$ph; //@line 16824
      $$5118137 = $$5118$ph; //@line 16824
      $$6106139 = $$6106$ph; //@line 16824
      while (1) {
       $81 = HEAP8[$$6106139 >> 0] | 0; //@line 16826
       do {
        if ((($81 & 255) + -1 | 0) >>> 0 < 127) {
         if ($$5118137 >>> 0 > 4 & ($$6106139 & 3 | 0) == 0) {
          $$2109 = $$1108138; //@line 16838
          $$6119 = $$5118137; //@line 16838
          $$7 = $$6106139; //@line 16838
          while (1) {
           $89 = HEAP32[$$7 >> 2] | 0; //@line 16840
           if (($89 + -16843009 | $89) & -2139062144 | 0) {
            label = 38; //@line 16846
            break;
           }
           HEAP32[$$2109 >> 2] = $89 & 255; //@line 16852
           HEAP32[$$2109 + 4 >> 2] = HEAPU8[$$7 + 1 >> 0]; //@line 16857
           HEAP32[$$2109 + 8 >> 2] = HEAPU8[$$7 + 2 >> 0]; //@line 16862
           $105 = $$7 + 4 | 0; //@line 16863
           $108 = $$2109 + 16 | 0; //@line 16866
           HEAP32[$$2109 + 12 >> 2] = HEAPU8[$$7 + 3 >> 0]; //@line 16867
           $109 = $$6119 + -4 | 0; //@line 16868
           if ($109 >>> 0 > 4) {
            $$2109 = $108; //@line 16871
            $$6119 = $109; //@line 16871
            $$7 = $105; //@line 16871
           } else {
            label = 37; //@line 16873
            break;
           }
          }
          if ((label | 0) == 37) {
           label = 0; //@line 16878
           $$3110 = $108; //@line 16880
           $$7120 = $109; //@line 16880
           $$8 = $105; //@line 16880
           $112 = HEAP8[$105 >> 0] | 0; //@line 16880
           break;
          } else if ((label | 0) == 38) {
           label = 0; //@line 16884
           $$3110 = $$2109; //@line 16886
           $$7120 = $$6119; //@line 16886
           $$8 = $$7; //@line 16886
           $112 = $89 & 255; //@line 16886
           break;
          }
         } else {
          $$3110 = $$1108138; //@line 16890
          $$7120 = $$5118137; //@line 16890
          $$8 = $$6106139; //@line 16890
          $112 = $81; //@line 16890
         }
        } else {
         $$3110 = $$1108138; //@line 16893
         $$7120 = $$5118137; //@line 16893
         $$8 = $$6106139; //@line 16893
         $112 = $81; //@line 16893
        }
       } while (0);
       $111 = $112 & 255; //@line 16896
       if (($111 + -1 | 0) >>> 0 >= 127) {
        break;
       }
       $115 = $$8 + 1 | 0; //@line 16902
       HEAP32[$$3110 >> 2] = $111; //@line 16904
       $$5118137 = $$7120 + -1 | 0; //@line 16905
       if (!$$5118137) {
        $$6106$lcssa = $115; //@line 16908
        break L22;
       } else {
        $$1108138 = $$3110 + 4 | 0; //@line 16911
        $$6106139 = $115; //@line 16911
       }
      }
      $119 = $111 + -194 | 0; //@line 16914
      if ($119 >>> 0 > 50) {
       $$11163 = $$8; //@line 16917
       $$5112162 = $$3110; //@line 16917
       $$9122161 = $$7120; //@line 16917
       label = 53; //@line 16918
       break L20;
      }
      $$4 = HEAP32[5324 + ($119 << 2) >> 2] | 0; //@line 16924
      $$4111 = $$3110; //@line 16924
      $$8121 = $$7120; //@line 16924
      $$9 = $$8 + 1 | 0; //@line 16924
      label = 43; //@line 16925
      continue L19;
     }
    } while (0);
    HEAP32[$1 >> 2] = $$6106$lcssa; //@line 16929
    $$099 = $2; //@line 16930
    label = 59; //@line 16931
    continue L19;
   } else if ((label | 0) == 25) {
    label = 0; //@line 16935
    $61 = (HEAPU8[$$4104 >> 0] | 0) >>> 3; //@line 16938
    if (($61 + -16 | $61 + ($$2 >> 26)) >>> 0 > 7) {
     $$5112 = $0; //@line 16945
     $$6 = $$2; //@line 16945
     $$9$sink = $$4104; //@line 16945
     $$9122 = $$4117; //@line 16945
     label = 52; //@line 16946
    } else {
     $67 = $$4104 + 1 | 0; //@line 16948
     if (!($$2 & 33554432)) {
      $$5105 = $67; //@line 16952
     } else {
      if ((HEAP8[$67 >> 0] & -64) << 24 >> 24 != -128) {
       $$5112 = $0; //@line 16958
       $$6 = $$2; //@line 16958
       $$9$sink = $$4104; //@line 16958
       $$9122 = $$4117; //@line 16958
       label = 52; //@line 16959
       break;
      }
      $73 = $$4104 + 2 | 0; //@line 16962
      if (!($$2 & 524288)) {
       $$5105 = $73; //@line 16966
      } else {
       if ((HEAP8[$73 >> 0] & -64) << 24 >> 24 != -128) {
        $$5112 = $0; //@line 16972
        $$6 = $$2; //@line 16972
        $$9$sink = $$4104; //@line 16972
        $$9122 = $$4117; //@line 16972
        label = 52; //@line 16973
        break;
       }
       $$5105 = $$4104 + 3 | 0; //@line 16977
      }
     }
     $$1101$ph = $$5105; //@line 16981
     $$1114$ph = $$4117 + -1 | 0; //@line 16981
     label = 14; //@line 16982
     continue L19;
    }
   } else if ((label | 0) == 43) {
    label = 0; //@line 16987
    $125 = HEAPU8[$$9 >> 0] | 0; //@line 16989
    $126 = $125 >>> 3; //@line 16990
    if (($126 + -16 | $126 + ($$4 >> 26)) >>> 0 > 7) {
     $$5112 = $$4111; //@line 16997
     $$6 = $$4; //@line 16997
     $$9$sink = $$9; //@line 16997
     $$9122 = $$8121; //@line 16997
     label = 52; //@line 16998
    } else {
     $133 = $$9 + 1 | 0; //@line 17001
     $135 = $125 + -128 | $$4 << 6; //@line 17003
     do {
      if (($135 | 0) < 0) {
       $139 = (HEAPU8[$133 >> 0] | 0) + -128 | 0; //@line 17009
       if ($139 >>> 0 > 63) {
        $$11124 = $$9 + -1 | 0; //@line 17013
        $$5112123 = $$4111; //@line 17013
        break L20;
       }
       $143 = $$9 + 2 | 0; //@line 17017
       $144 = $139 | $135 << 6; //@line 17018
       if (($144 | 0) < 0) {
        $148 = (HEAPU8[$143 >> 0] | 0) + -128 | 0; //@line 17023
        if ($148 >>> 0 > 63) {
         $$11124 = $$9 + -1 | 0; //@line 17027
         $$5112123 = $$4111; //@line 17027
         break L20;
        } else {
         $$10 = $$9 + 3 | 0; //@line 17033
         $$5 = $148 | $144 << 6; //@line 17033
         break;
        }
       } else {
        $$10 = $143; //@line 17037
        $$5 = $144; //@line 17037
       }
      } else {
       $$10 = $133; //@line 17040
       $$5 = $135; //@line 17040
      }
     } while (0);
     HEAP32[$$4111 >> 2] = $$5; //@line 17044
     $$1108$ph = $$4111 + 4 | 0; //@line 17046
     $$5118$ph = $$8121 + -1 | 0; //@line 17046
     $$6106$ph = $$10; //@line 17046
     label = 15; //@line 17047
     continue L19;
    }
   } else if ((label | 0) == 59) {
    label = 0; //@line 17052
    return $$099 | 0; //@line 17053
   }
  } while (0);
  if ((label | 0) == 52) {
   label = 0; //@line 17057
   $156 = $$9$sink + -1 | 0; //@line 17058
   if (!$$6) {
    $$11163 = $156; //@line 17061
    $$5112162 = $$5112; //@line 17061
    $$9122161 = $$9122; //@line 17061
    label = 53; //@line 17062
   } else {
    $$11124 = $156; //@line 17064
    $$5112123 = $$5112; //@line 17064
   }
  }
  if ((label | 0) == 53) {
   label = 0; //@line 17068
   if (!(HEAP8[$$11163 >> 0] | 0)) {
    if ($$5112162 | 0) {
     HEAP32[$$5112162 >> 2] = 0; //@line 17074
     HEAP32[$1 >> 2] = 0; //@line 17075
    }
    $$099 = $2 - $$9122161 | 0; //@line 17078
    label = 59; //@line 17079
    continue;
   } else {
    $$11124 = $$11163; //@line 17082
    $$5112123 = $$5112162; //@line 17082
   }
  }
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 17086
  if (!$$5112123) {
   $$099 = -1; //@line 17089
   label = 59; //@line 17090
   continue;
  }
  HEAP32[$1 >> 2] = $$11124; //@line 17093
  $$099 = -1; //@line 17094
  label = 59; //@line 17095
 }
 return 0; //@line 17097
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$04$i$i$i = 0, $$byval_copy5 = 0, $$val = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $118 = 0, $120 = 0, $121 = 0, $126 = 0, $13 = 0, $131 = 0, $132 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $143 = 0, $145 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $168 = 0, $170 = 0, $171 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $63 = 0, $65 = 0, $7 = 0, $70 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5202
 STACKTOP = STACKTOP + 224 | 0; //@line 5203
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 5203
 $$byval_copy5 = sp + 217 | 0; //@line 5204
 $2 = sp + 216 | 0; //@line 5205
 $3 = sp + 144 | 0; //@line 5206
 $4 = sp + 72 | 0; //@line 5207
 $5 = sp; //@line 5208
 $$val = HEAP32[$1 >> 2] | 0; //@line 5209
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 5211
 $7 = $4 + 4 | 0; //@line 5212
 HEAP32[$7 >> 2] = 0; //@line 5213
 HEAP32[$7 + 4 >> 2] = 0; //@line 5213
 HEAP32[$7 + 8 >> 2] = 0; //@line 5213
 $8 = $4 + 40 | 0; //@line 5214
 HEAP32[$8 >> 2] = 0; //@line 5215
 HEAP32[$8 + 4 >> 2] = 0; //@line 5215
 HEAP32[$8 + 8 >> 2] = 0; //@line 5215
 HEAP32[$8 + 12 >> 2] = 0; //@line 5215
 HEAP32[$8 + 16 >> 2] = 0; //@line 5215
 HEAP32[$8 + 20 >> 2] = 0; //@line 5215
 HEAP32[$4 >> 2] = 1; //@line 5216
 $9 = $4 + 44 | 0; //@line 5217
 __THREW__ = 0; //@line 5219
 invoke_vii(134, $4 + 40 | 0, $3 | 0); //@line 5220
 $11 = __THREW__; //@line 5221
 __THREW__ = 0; //@line 5221
 do {
  if ($11 & 1) {
   label = 41; //@line 5225
  } else {
   __THREW__ = 0; //@line 5227
   $13 = invoke_ii(143, $$val | 0) | 0; //@line 5228
   $14 = __THREW__; //@line 5229
   __THREW__ = 0; //@line 5229
   if ($14 & 1) {
    label = 41; //@line 5232
   } else {
    __THREW__ = 0; //@line 5234
    invoke_vii(120, $5 | 0, $4 | 0); //@line 5235
    $16 = __THREW__; //@line 5236
    __THREW__ = 0; //@line 5236
    if ($16 & 1) {
     label = 41; //@line 5239
    } else {
     __THREW__ = 0; //@line 5241
     invoke_vii(128, $13 | 0, $5 | 0); //@line 5242
     $18 = __THREW__; //@line 5243
     __THREW__ = 0; //@line 5243
     if ($18 & 1) {
      $98 = ___cxa_find_matching_catch_2() | 0; //@line 5246
      $99 = tempRet0; //@line 5247
      $100 = $5 + 52 | 0; //@line 5248
      if ((HEAP8[$100 + 11 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$100 >> 2] | 0); //@line 5254
      }
      $105 = $5 + 40 | 0; //@line 5256
      $106 = HEAP32[$105 >> 2] | 0; //@line 5257
      if ($106 | 0) {
       $108 = $5 + 44 | 0; //@line 5260
       $109 = HEAP32[$108 >> 2] | 0; //@line 5261
       do {
        if (($109 | 0) == ($106 | 0)) {
         $120 = $106; //@line 5265
        } else {
         $111 = $5 + 48 | 0; //@line 5267
         $113 = $109; //@line 5268
         while (1) {
          $112 = $113 + -72 | 0; //@line 5270
          HEAP32[$108 >> 2] = $112; //@line 5271
          __THREW__ = 0; //@line 5272
          HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 5273
          invoke_viii(13, $$byval_copy5 | 0, $111 | 0, $112 | 0); //@line 5274
          $114 = __THREW__; //@line 5275
          __THREW__ = 0; //@line 5275
          if ($114 & 1) {
           label = 49; //@line 5278
           break;
          }
          $113 = HEAP32[$108 >> 2] | 0; //@line 5281
          if (($113 | 0) == ($106 | 0)) {
           label = 50; //@line 5284
           break;
          }
         }
         if ((label | 0) == 49) {
          $118 = ___cxa_find_matching_catch_3(0) | 0; //@line 5291
          ___clang_call_terminate($118); //@line 5293
         } else if ((label | 0) == 50) {
          $120 = HEAP32[$105 >> 2] | 0; //@line 5298
          break;
         }
        }
       } while (0);
       __ZdlPv($120); //@line 5303
      }
      $121 = $5 + 4 | 0; //@line 5305
      if ((HEAP8[$121 + 11 >> 0] | 0) >= 0) {
       $$0$i$i$i = $99; //@line 5310
       $$04$i$i$i = $98; //@line 5310
       break;
      }
      __ZdlPv(HEAP32[$121 >> 2] | 0); //@line 5314
      $$0$i$i$i = $99; //@line 5315
      $$04$i$i$i = $98; //@line 5315
      break;
     }
     $20 = $5 + 52 | 0; //@line 5318
     if ((HEAP8[$20 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$20 >> 2] | 0); //@line 5324
     }
     $25 = $5 + 40 | 0; //@line 5326
     $26 = HEAP32[$25 >> 2] | 0; //@line 5327
     if ($26 | 0) {
      $28 = $5 + 44 | 0; //@line 5330
      $29 = HEAP32[$28 >> 2] | 0; //@line 5331
      do {
       if (($29 | 0) == ($26 | 0)) {
        $40 = $26; //@line 5335
       } else {
        $31 = $5 + 48 | 0; //@line 5337
        $33 = $29; //@line 5338
        while (1) {
         $32 = $33 + -72 | 0; //@line 5340
         HEAP32[$28 >> 2] = $32; //@line 5341
         __THREW__ = 0; //@line 5342
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 5343
         invoke_viii(13, $$byval_copy5 | 0, $31 | 0, $32 | 0); //@line 5344
         $34 = __THREW__; //@line 5345
         __THREW__ = 0; //@line 5345
         if ($34 & 1) {
          label = 12; //@line 5348
          break;
         }
         $33 = HEAP32[$28 >> 2] | 0; //@line 5351
         if (($33 | 0) == ($26 | 0)) {
          label = 13; //@line 5354
          break;
         }
        }
        if ((label | 0) == 12) {
         $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 5361
         ___clang_call_terminate($38); //@line 5363
        } else if ((label | 0) == 13) {
         $40 = HEAP32[$25 >> 2] | 0; //@line 5368
         break;
        }
       }
      } while (0);
      __ZdlPv($40); //@line 5373
     }
     $41 = $5 + 4 | 0; //@line 5375
     if ((HEAP8[$41 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$41 >> 2] | 0); //@line 5381
     }
     $46 = $4 + 52 | 0; //@line 5383
     if ((HEAP8[$46 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$46 >> 2] | 0); //@line 5389
     }
     $51 = $4 + 40 | 0; //@line 5391
     $52 = HEAP32[$51 >> 2] | 0; //@line 5392
     if ($52 | 0) {
      $54 = HEAP32[$9 >> 2] | 0; //@line 5395
      do {
       if (($54 | 0) == ($52 | 0)) {
        $65 = $52; //@line 5399
       } else {
        $56 = $4 + 48 | 0; //@line 5401
        $58 = $54; //@line 5402
        while (1) {
         $57 = $58 + -72 | 0; //@line 5404
         HEAP32[$9 >> 2] = $57; //@line 5405
         __THREW__ = 0; //@line 5406
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 5407
         invoke_viii(13, $$byval_copy5 | 0, $56 | 0, $57 | 0); //@line 5408
         $59 = __THREW__; //@line 5409
         __THREW__ = 0; //@line 5409
         if ($59 & 1) {
          label = 24; //@line 5412
          break;
         }
         $58 = HEAP32[$9 >> 2] | 0; //@line 5415
         if (($58 | 0) == ($52 | 0)) {
          label = 25; //@line 5418
          break;
         }
        }
        if ((label | 0) == 24) {
         $63 = ___cxa_find_matching_catch_3(0) | 0; //@line 5425
         ___clang_call_terminate($63); //@line 5427
        } else if ((label | 0) == 25) {
         $65 = HEAP32[$51 >> 2] | 0; //@line 5432
         break;
        }
       }
      } while (0);
      __ZdlPv($65); //@line 5437
     }
     if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 5444
     }
     $70 = $3 + 52 | 0; //@line 5446
     if ((HEAP8[$70 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$70 >> 2] | 0); //@line 5452
     }
     $75 = $3 + 40 | 0; //@line 5454
     $76 = HEAP32[$75 >> 2] | 0; //@line 5455
     if ($76 | 0) {
      $78 = $3 + 44 | 0; //@line 5458
      $79 = HEAP32[$78 >> 2] | 0; //@line 5459
      do {
       if (($79 | 0) == ($76 | 0)) {
        $90 = $76; //@line 5463
       } else {
        $81 = $3 + 48 | 0; //@line 5465
        $83 = $79; //@line 5466
        while (1) {
         $82 = $83 + -72 | 0; //@line 5468
         HEAP32[$78 >> 2] = $82; //@line 5469
         __THREW__ = 0; //@line 5470
         HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 5471
         invoke_viii(13, $$byval_copy5 | 0, $81 | 0, $82 | 0); //@line 5472
         $84 = __THREW__; //@line 5473
         __THREW__ = 0; //@line 5473
         if ($84 & 1) {
          label = 36; //@line 5476
          break;
         }
         $83 = HEAP32[$78 >> 2] | 0; //@line 5479
         if (($83 | 0) == ($76 | 0)) {
          label = 37; //@line 5482
          break;
         }
        }
        if ((label | 0) == 36) {
         $88 = ___cxa_find_matching_catch_3(0) | 0; //@line 5489
         ___clang_call_terminate($88); //@line 5491
        } else if ((label | 0) == 37) {
         $90 = HEAP32[$75 >> 2] | 0; //@line 5496
         break;
        }
       }
      } while (0);
      __ZdlPv($90); //@line 5501
     }
     $91 = $3 + 4 | 0; //@line 5503
     if ((HEAP8[$91 + 11 >> 0] | 0) >= 0) {
      STACKTOP = sp; //@line 5508
      return;
     }
     __ZdlPv(HEAP32[$91 >> 2] | 0); //@line 5511
     STACKTOP = sp; //@line 5512
     return;
    }
   }
  }
 } while (0);
 if ((label | 0) == 41) {
  $96 = ___cxa_find_matching_catch_2() | 0; //@line 5518
  $$0$i$i$i = tempRet0; //@line 5520
  $$04$i$i$i = $96; //@line 5520
 }
 $126 = $4 + 52 | 0; //@line 5522
 if ((HEAP8[$126 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$126 >> 2] | 0); //@line 5528
 }
 $131 = $4 + 40 | 0; //@line 5530
 $132 = HEAP32[$131 >> 2] | 0; //@line 5531
 if ($132 | 0) {
  $134 = HEAP32[$9 >> 2] | 0; //@line 5534
  do {
   if (($134 | 0) == ($132 | 0)) {
    $145 = $132; //@line 5538
   } else {
    $136 = $4 + 48 | 0; //@line 5540
    $138 = $134; //@line 5541
    while (1) {
     $137 = $138 + -72 | 0; //@line 5543
     HEAP32[$9 >> 2] = $137; //@line 5544
     __THREW__ = 0; //@line 5545
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 5546
     invoke_viii(13, $$byval_copy5 | 0, $136 | 0, $137 | 0); //@line 5547
     $139 = __THREW__; //@line 5548
     __THREW__ = 0; //@line 5548
     if ($139 & 1) {
      label = 61; //@line 5551
      break;
     }
     $138 = HEAP32[$9 >> 2] | 0; //@line 5554
     if (($138 | 0) == ($132 | 0)) {
      label = 62; //@line 5557
      break;
     }
    }
    if ((label | 0) == 61) {
     $143 = ___cxa_find_matching_catch_3(0) | 0; //@line 5564
     ___clang_call_terminate($143); //@line 5566
    } else if ((label | 0) == 62) {
     $145 = HEAP32[$131 >> 2] | 0; //@line 5571
     break;
    }
   }
  } while (0);
  __ZdlPv($145); //@line 5576
 }
 if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 5583
 }
 $150 = $3 + 52 | 0; //@line 5585
 if ((HEAP8[$150 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$150 >> 2] | 0); //@line 5591
 }
 $155 = $3 + 40 | 0; //@line 5593
 $156 = HEAP32[$155 >> 2] | 0; //@line 5594
 if ($156 | 0) {
  $158 = $3 + 44 | 0; //@line 5597
  $159 = HEAP32[$158 >> 2] | 0; //@line 5598
  do {
   if (($159 | 0) == ($156 | 0)) {
    $170 = $156; //@line 5602
   } else {
    $161 = $3 + 48 | 0; //@line 5604
    $163 = $159; //@line 5605
    while (1) {
     $162 = $163 + -72 | 0; //@line 5607
     HEAP32[$158 >> 2] = $162; //@line 5608
     __THREW__ = 0; //@line 5609
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0; //@line 5610
     invoke_viii(13, $$byval_copy5 | 0, $161 | 0, $162 | 0); //@line 5611
     $164 = __THREW__; //@line 5612
     __THREW__ = 0; //@line 5612
     if ($164 & 1) {
      label = 73; //@line 5615
      break;
     }
     $163 = HEAP32[$158 >> 2] | 0; //@line 5618
     if (($163 | 0) == ($156 | 0)) {
      label = 74; //@line 5621
      break;
     }
    }
    if ((label | 0) == 73) {
     $168 = ___cxa_find_matching_catch_3(0) | 0; //@line 5628
     ___clang_call_terminate($168); //@line 5630
    } else if ((label | 0) == 74) {
     $170 = HEAP32[$155 >> 2] | 0; //@line 5635
     break;
    }
   }
  } while (0);
  __ZdlPv($170); //@line 5640
 }
 $171 = $3 + 4 | 0; //@line 5642
 if ((HEAP8[$171 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$04$i$i$i | 0); //@line 5647
 }
 __ZdlPv(HEAP32[$171 >> 2] | 0); //@line 5651
 ___resumeException($$04$i$i$i | 0); //@line 5652
}
function __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE19__add_back_capacityEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $$115 = 0, $$in$i = 0, $$in$i26 = 0, $$sroa$13$0$i = 0, $$sroa$13$0$i25 = 0, $$sroa$13$1$i = 0, $$sroa$13$1$i30 = 0, $$sroa$speculated = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i23 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $105 = 0, $107 = 0, $11 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $125 = 0, $128 = 0, $13 = 0, $131 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $17 = 0, $174 = 0, $176 = 0, $177 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $191 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $52 = 0, $58 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11440
 STACKTOP = STACKTOP + 32 | 0; //@line 11441
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11441
 $1 = sp + 4 | 0; //@line 11442
 $2 = sp; //@line 11443
 $3 = $0 + 16 | 0; //@line 11444
 $4 = HEAP32[$3 >> 2] | 0; //@line 11445
 if ($4 >>> 0 > 55) {
  HEAP32[$3 >> 2] = $4 + -56; //@line 11449
  $7 = $0 + 4 | 0; //@line 11450
  $8 = HEAP32[$7 >> 2] | 0; //@line 11451
  $9 = HEAP32[$8 >> 2] | 0; //@line 11452
  $10 = $8 + 4 | 0; //@line 11453
  HEAP32[$7 >> 2] = $10; //@line 11454
  $11 = $0 + 8 | 0; //@line 11455
  $12 = HEAP32[$11 >> 2] | 0; //@line 11456
  $13 = $0 + 12 | 0; //@line 11457
  $14 = HEAP32[$13 >> 2] | 0; //@line 11458
  $16 = $14; //@line 11460
  do {
   if (($12 | 0) == ($14 | 0)) {
    $17 = HEAP32[$0 >> 2] | 0; //@line 11463
    $19 = $17; //@line 11465
    if ($10 >>> 0 > $17 >>> 0) {
     $20 = $10; //@line 11467
     $24 = (($20 - $19 >> 2) + 1 | 0) / -2 | 0; //@line 11471
     $25 = $10 + ($24 << 2) | 0; //@line 11472
     $27 = $12 - $20 | 0; //@line 11474
     $28 = $27 >> 2; //@line 11475
     if (!$28) {
      $32 = $10; //@line 11478
     } else {
      _memmove($25 | 0, $10 | 0, $27 | 0) | 0; //@line 11480
      $32 = HEAP32[$7 >> 2] | 0; //@line 11482
     }
     $30 = $25 + ($28 << 2) | 0; //@line 11484
     HEAP32[$11 >> 2] = $30; //@line 11485
     HEAP32[$7 >> 2] = $32 + ($24 << 2); //@line 11487
     $61 = $30; //@line 11488
     break;
    }
    $34 = $16 - $19 >> 1; //@line 11492
    $$sroa$speculated$i = ($34 | 0) == 0 ? 1 : $34; //@line 11494
    if ($$sroa$speculated$i >>> 0 > 1073741823) {
     $37 = ___cxa_allocate_exception(8) | 0; //@line 11497
     __THREW__ = 0; //@line 11498
     invoke_vii(119, $37 | 0, 31992); //@line 11499
     $38 = __THREW__; //@line 11500
     __THREW__ = 0; //@line 11500
     if ($38 & 1) {
      $40 = ___cxa_find_matching_catch_2() | 0; //@line 11503
      ___cxa_free_exception($37 | 0); //@line 11505
      ___resumeException($40 | 0); //@line 11506
     } else {
      HEAP32[$37 >> 2] = 13224; //@line 11509
      ___cxa_throw($37 | 0, 2856, 240); //@line 11510
     }
    }
    $44 = __Znwj($$sroa$speculated$i << 2) | 0; //@line 11516
    $45 = $44; //@line 11517
    $46 = $44 + ($$sroa$speculated$i >>> 2 << 2) | 0; //@line 11518
    $47 = $46; //@line 11519
    $49 = $44 + ($$sroa$speculated$i << 2) | 0; //@line 11521
    if (($10 | 0) == ($12 | 0)) {
     $$sroa$13$1$i = $47; //@line 11524
     $58 = $17; //@line 11524
    } else {
     $$in$i = $46; //@line 11526
     $$sroa$13$0$i = $47; //@line 11526
     $52 = $10; //@line 11526
     do {
      HEAP32[$$in$i >> 2] = HEAP32[$52 >> 2]; //@line 11529
      $$in$i = $$sroa$13$0$i + 4 | 0; //@line 11531
      $$sroa$13$0$i = $$in$i; //@line 11532
      $52 = $52 + 4 | 0; //@line 11533
     } while (($52 | 0) != ($12 | 0));
     $$sroa$13$1$i = $$sroa$13$0$i; //@line 11542
     $58 = HEAP32[$0 >> 2] | 0; //@line 11542
    }
    HEAP32[$0 >> 2] = $45; //@line 11544
    HEAP32[$7 >> 2] = $47; //@line 11545
    HEAP32[$11 >> 2] = $$sroa$13$1$i; //@line 11546
    HEAP32[$13 >> 2] = $49; //@line 11547
    if (!$58) {
     $61 = $$sroa$13$1$i; //@line 11551
    } else {
     __ZdlPv($58); //@line 11553
     $61 = HEAP32[$11 >> 2] | 0; //@line 11555
    }
   } else {
    $61 = $12; //@line 11558
   }
  } while (0);
  HEAP32[$61 >> 2] = $9; //@line 11561
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 4; //@line 11564
  STACKTOP = sp; //@line 11565
  return;
 }
 $64 = $0 + 8 | 0; //@line 11567
 $65 = HEAP32[$64 >> 2] | 0; //@line 11568
 $66 = $0 + 4 | 0; //@line 11569
 $68 = $65 - (HEAP32[$66 >> 2] | 0) | 0; //@line 11571
 $69 = $0 + 12 | 0; //@line 11572
 $70 = HEAP32[$69 >> 2] | 0; //@line 11573
 $72 = $70 - (HEAP32[$0 >> 2] | 0) | 0; //@line 11575
 if ($68 >>> 0 < $72 >>> 0) {
  if (($70 | 0) != ($65 | 0)) {
   HEAP32[$1 >> 2] = __Znwj(4032) | 0; //@line 11581
   __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE9push_backEOS2_($0, $1); //@line 11582
   STACKTOP = sp; //@line 11583
   return;
  }
  HEAP32[$1 >> 2] = __Znwj(4032) | 0; //@line 11586
  __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE10push_frontEOS2_($0, $1); //@line 11587
  $77 = HEAP32[$66 >> 2] | 0; //@line 11588
  $78 = HEAP32[$77 >> 2] | 0; //@line 11589
  $79 = $77 + 4 | 0; //@line 11590
  HEAP32[$66 >> 2] = $79; //@line 11591
  $80 = HEAP32[$64 >> 2] | 0; //@line 11592
  $81 = HEAP32[$69 >> 2] | 0; //@line 11593
  $83 = $81; //@line 11595
  do {
   if (($80 | 0) == ($81 | 0)) {
    $84 = HEAP32[$0 >> 2] | 0; //@line 11598
    $86 = $84; //@line 11600
    if ($79 >>> 0 > $84 >>> 0) {
     $87 = $79; //@line 11602
     $91 = (($87 - $86 >> 2) + 1 | 0) / -2 | 0; //@line 11606
     $92 = $79 + ($91 << 2) | 0; //@line 11607
     $94 = $80 - $87 | 0; //@line 11609
     $95 = $94 >> 2; //@line 11610
     if (!$95) {
      $99 = $79; //@line 11613
     } else {
      _memmove($92 | 0, $79 | 0, $94 | 0) | 0; //@line 11615
      $99 = HEAP32[$66 >> 2] | 0; //@line 11617
     }
     $97 = $92 + ($95 << 2) | 0; //@line 11619
     HEAP32[$64 >> 2] = $97; //@line 11620
     HEAP32[$66 >> 2] = $99 + ($91 << 2); //@line 11622
     $128 = $97; //@line 11623
     break;
    }
    $101 = $83 - $86 >> 1; //@line 11627
    $$sroa$speculated$i23 = ($101 | 0) == 0 ? 1 : $101; //@line 11629
    if ($$sroa$speculated$i23 >>> 0 > 1073741823) {
     $104 = ___cxa_allocate_exception(8) | 0; //@line 11632
     __THREW__ = 0; //@line 11633
     invoke_vii(119, $104 | 0, 31992); //@line 11634
     $105 = __THREW__; //@line 11635
     __THREW__ = 0; //@line 11635
     if ($105 & 1) {
      $107 = ___cxa_find_matching_catch_2() | 0; //@line 11638
      ___cxa_free_exception($104 | 0); //@line 11640
      ___resumeException($107 | 0); //@line 11641
     } else {
      HEAP32[$104 >> 2] = 13224; //@line 11644
      ___cxa_throw($104 | 0, 2856, 240); //@line 11645
     }
    }
    $111 = __Znwj($$sroa$speculated$i23 << 2) | 0; //@line 11651
    $112 = $111; //@line 11652
    $113 = $111 + ($$sroa$speculated$i23 >>> 2 << 2) | 0; //@line 11653
    $114 = $113; //@line 11654
    $116 = $111 + ($$sroa$speculated$i23 << 2) | 0; //@line 11656
    if (($79 | 0) == ($80 | 0)) {
     $$sroa$13$1$i30 = $114; //@line 11659
     $125 = $84; //@line 11659
    } else {
     $$in$i26 = $113; //@line 11661
     $$sroa$13$0$i25 = $114; //@line 11661
     $119 = $79; //@line 11661
     do {
      HEAP32[$$in$i26 >> 2] = HEAP32[$119 >> 2]; //@line 11664
      $$in$i26 = $$sroa$13$0$i25 + 4 | 0; //@line 11666
      $$sroa$13$0$i25 = $$in$i26; //@line 11667
      $119 = $119 + 4 | 0; //@line 11668
     } while (($119 | 0) != ($80 | 0));
     $$sroa$13$1$i30 = $$sroa$13$0$i25; //@line 11677
     $125 = HEAP32[$0 >> 2] | 0; //@line 11677
    }
    HEAP32[$0 >> 2] = $112; //@line 11679
    HEAP32[$66 >> 2] = $114; //@line 11680
    HEAP32[$64 >> 2] = $$sroa$13$1$i30; //@line 11681
    HEAP32[$69 >> 2] = $116; //@line 11682
    if (!$125) {
     $128 = $$sroa$13$1$i30; //@line 11686
    } else {
     __ZdlPv($125); //@line 11688
     $128 = HEAP32[$64 >> 2] | 0; //@line 11690
    }
   } else {
    $128 = $80; //@line 11693
   }
  } while (0);
  HEAP32[$128 >> 2] = $78; //@line 11696
  HEAP32[$64 >> 2] = (HEAP32[$64 >> 2] | 0) + 4; //@line 11699
  STACKTOP = sp; //@line 11700
  return;
 }
 $131 = $72 >> 1; //@line 11702
 $$sroa$speculated = ($131 | 0) == 0 ? 1 : $131; //@line 11704
 HEAP32[$1 + 12 >> 2] = 0; //@line 11707
 HEAP32[$1 + 16 >> 2] = $0 + 12; //@line 11709
 if ($$sroa$speculated >>> 0 > 1073741823) {
  $137 = ___cxa_allocate_exception(8) | 0; //@line 11712
  __THREW__ = 0; //@line 11713
  invoke_vii(119, $137 | 0, 31992); //@line 11714
  $138 = __THREW__; //@line 11715
  __THREW__ = 0; //@line 11715
  if ($138 & 1) {
   $140 = ___cxa_find_matching_catch_2() | 0; //@line 11718
   ___cxa_free_exception($137 | 0); //@line 11720
   ___resumeException($140 | 0); //@line 11721
  } else {
   HEAP32[$137 >> 2] = 13224; //@line 11724
   ___cxa_throw($137 | 0, 2856, 240); //@line 11725
  }
 }
 $144 = __Znwj($$sroa$speculated << 2) | 0; //@line 11731
 HEAP32[$1 >> 2] = $144; //@line 11732
 $145 = $144 + ($68 >> 2 << 2) | 0; //@line 11733
 $146 = $1 + 8 | 0; //@line 11734
 HEAP32[$146 >> 2] = $145; //@line 11735
 $147 = $1 + 4 | 0; //@line 11736
 HEAP32[$147 >> 2] = $145; //@line 11737
 $149 = $1 + 12 | 0; //@line 11739
 HEAP32[$149 >> 2] = $144 + ($$sroa$speculated << 2); //@line 11740
 __THREW__ = 0; //@line 11741
 $150 = invoke_ii(142, 4032) | 0; //@line 11742
 $151 = __THREW__; //@line 11743
 __THREW__ = 0; //@line 11743
 do {
  if ($151 & 1) {
   $174 = ___cxa_find_matching_catch_2() | 0; //@line 11747
   $$1 = tempRet0; //@line 11749
   $$115 = $174; //@line 11749
  } else {
   HEAP32[$2 >> 2] = $150; //@line 11751
   __THREW__ = 0; //@line 11752
   invoke_vii(123, $1 | 0, $2 | 0); //@line 11753
   $153 = __THREW__; //@line 11754
   __THREW__ = 0; //@line 11754
   if ($153 & 1) {
    $181 = ___cxa_find_matching_catch_2() | 0; //@line 11757
    $182 = tempRet0; //@line 11758
    __ZdlPv($150); //@line 11759
    $$1 = $182; //@line 11760
    $$115 = $181; //@line 11760
    break;
   }
   $$0 = HEAP32[$64 >> 2] | 0; //@line 11764
   while (1) {
    $156 = HEAP32[$66 >> 2] | 0; //@line 11766
    if (($$0 | 0) == ($156 | 0)) {
     break;
    }
    $176 = $$0 + -4 | 0; //@line 11771
    __THREW__ = 0; //@line 11772
    invoke_vii(124, $1 | 0, $176 | 0); //@line 11773
    $177 = __THREW__; //@line 11774
    __THREW__ = 0; //@line 11774
    if ($177 & 1) {
     label = 50; //@line 11777
     break;
    } else {
     $$0 = $176; //@line 11780
    }
   }
   if ((label | 0) == 50) {
    $179 = ___cxa_find_matching_catch_2() | 0; //@line 11784
    $$1 = tempRet0; //@line 11786
    $$115 = $179; //@line 11786
    break;
   }
   $158 = $156; //@line 11789
   $159 = HEAP32[$0 >> 2] | 0; //@line 11790
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 11792
   HEAP32[$1 >> 2] = $159; //@line 11793
   HEAP32[$66 >> 2] = HEAP32[$147 >> 2]; //@line 11795
   HEAP32[$147 >> 2] = $158; //@line 11796
   $162 = HEAP32[$64 >> 2] | 0; //@line 11797
   HEAP32[$64 >> 2] = HEAP32[$146 >> 2]; //@line 11799
   HEAP32[$146 >> 2] = $162; //@line 11800
   $164 = HEAP32[$69 >> 2] | 0; //@line 11801
   HEAP32[$69 >> 2] = HEAP32[$149 >> 2]; //@line 11803
   HEAP32[$149 >> 2] = $164; //@line 11804
   $166 = $162; //@line 11805
   if (($$0 | 0) != ($166 | 0)) {
    HEAP32[$146 >> 2] = $166 + (~(($166 + -4 - $158 | 0) >>> 2) << 2); //@line 11814
   }
   if ($159 | 0) {
    __ZdlPv($159); //@line 11819
   }
   STACKTOP = sp; //@line 11821
   return;
  }
 } while (0);
 $183 = HEAP32[$147 >> 2] | 0; //@line 11824
 $184 = HEAP32[$146 >> 2] | 0; //@line 11825
 if (($184 | 0) != ($183 | 0)) {
  HEAP32[$146 >> 2] = $184 + (~(($184 + -4 - $183 | 0) >>> 2) << 2); //@line 11835
 }
 $191 = HEAP32[$1 >> 2] | 0; //@line 11837
 if (!$191) {
  ___resumeException($$115 | 0); //@line 11840
 }
 __ZdlPv($191); //@line 11843
 ___resumeException($$115 | 0); //@line 11844
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$03$i$i$i = 0, $$byval_copy8 = 0, $$val = 0, $101 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $149 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $75 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $93 = 0, $95 = 0, $99 = 0, $eh$lpad$body$i$i$i$i$index2Z2D = 0, $eh$lpad$body$i$i$i$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20277
 STACKTOP = STACKTOP + 176 | 0; //@line 20278
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 20278
 $$byval_copy8 = sp + 148 | 0; //@line 20279
 $2 = sp + 144 | 0; //@line 20280
 $3 = sp + 160 | 0; //@line 20281
 $4 = sp + 72 | 0; //@line 20282
 $5 = sp; //@line 20283
 $$val = HEAP32[$1 >> 2] | 0; //@line 20284
 $6 = $4 + 4 | 0; //@line 20285
 HEAP32[$6 >> 2] = 0; //@line 20286
 HEAP32[$6 + 4 >> 2] = 0; //@line 20286
 HEAP32[$6 + 8 >> 2] = 0; //@line 20286
 $7 = $4 + 40 | 0; //@line 20287
 HEAP32[$7 >> 2] = 0; //@line 20288
 HEAP32[$7 + 4 >> 2] = 0; //@line 20288
 HEAP32[$7 + 8 >> 2] = 0; //@line 20288
 HEAP32[$7 + 12 >> 2] = 0; //@line 20288
 HEAP32[$7 + 16 >> 2] = 0; //@line 20288
 HEAP32[$7 + 20 >> 2] = 0; //@line 20288
 HEAP32[$4 >> 2] = 3; //@line 20289
 HEAP32[$$byval_copy8 >> 2] = 0; //@line 20290
 HEAP32[$$byval_copy8 + 4 >> 2] = 0; //@line 20290
 HEAP32[$$byval_copy8 + 8 >> 2] = 0; //@line 20290
 __THREW__ = 0; //@line 20295
 invoke_vii(132, $2 | 0, 34464 + (HEAP32[(HEAP32[8616] | 0) + -12 >> 2] | 0) | 0); //@line 20296
 $12 = __THREW__; //@line 20297
 __THREW__ = 0; //@line 20297
 do {
  if ($12 & 1) {
   label = 6; //@line 20301
  } else {
   __THREW__ = 0; //@line 20303
   $14 = invoke_iii(63, $2 | 0, 35512) | 0; //@line 20304
   $15 = __THREW__; //@line 20305
   __THREW__ = 0; //@line 20305
   if (!($15 & 1)) {
    __THREW__ = 0; //@line 20311
    $20 = invoke_iii(HEAP32[(HEAP32[$14 >> 2] | 0) + 28 >> 2] | 0, $14 | 0, 10) | 0; //@line 20312
    $21 = __THREW__; //@line 20313
    __THREW__ = 0; //@line 20313
    if (!($21 & 1)) {
     __ZNSt3__26localeD2Ev($2); //@line 20316
     __THREW__ = 0; //@line 20317
     invoke_iiii(30, 34464, $$byval_copy8 | 0, $20 | 0) | 0; //@line 20318
     $25 = __THREW__; //@line 20319
     __THREW__ = 0; //@line 20319
     if ($25 & 1) {
      label = 6; //@line 20322
      break;
     }
     $33 = $6 + 11 | 0; //@line 20325
     if ((HEAP8[$33 >> 0] | 0) < 0) {
      HEAP8[HEAP32[$6 >> 2] >> 0] = 0; //@line 20330
      HEAP32[$4 + 8 >> 2] = 0; //@line 20332
     } else {
      HEAP8[$6 >> 0] = 0; //@line 20334
      HEAP8[$33 >> 0] = 0; //@line 20335
     }
     __THREW__ = 0; //@line 20337
     invoke_vii(129, $6 | 0, 0); //@line 20338
     $38 = __THREW__; //@line 20339
     __THREW__ = 0; //@line 20339
     if ($38 & 1) {
      $40 = ___cxa_find_matching_catch_3(0) | 0; //@line 20342
      ___clang_call_terminate($40); //@line 20344
     }
     HEAP32[$6 >> 2] = HEAP32[$$byval_copy8 >> 2]; //@line 20347
     HEAP32[$6 + 4 >> 2] = HEAP32[$$byval_copy8 + 4 >> 2]; //@line 20347
     HEAP32[$6 + 8 >> 2] = HEAP32[$$byval_copy8 + 8 >> 2]; //@line 20347
     __THREW__ = 0; //@line 20348
     $42 = invoke_ii(143, $$val | 0) | 0; //@line 20349
     $43 = __THREW__; //@line 20350
     __THREW__ = 0; //@line 20350
     if (!($43 & 1)) {
      __THREW__ = 0; //@line 20353
      invoke_vii(120, $5 | 0, $4 | 0); //@line 20354
      $45 = __THREW__; //@line 20355
      __THREW__ = 0; //@line 20355
      if (!($45 & 1)) {
       __THREW__ = 0; //@line 20358
       invoke_vii(128, $42 | 0, $5 | 0); //@line 20359
       $47 = __THREW__; //@line 20360
       __THREW__ = 0; //@line 20360
       if ($47 & 1) {
        $101 = ___cxa_find_matching_catch_2() | 0; //@line 20363
        $102 = tempRet0; //@line 20364
        $103 = $5 + 52 | 0; //@line 20365
        if ((HEAP8[$103 + 11 >> 0] | 0) < 0) {
         __ZdlPv(HEAP32[$103 >> 2] | 0); //@line 20371
        }
        $108 = $5 + 40 | 0; //@line 20373
        $109 = HEAP32[$108 >> 2] | 0; //@line 20374
        if ($109 | 0) {
         $111 = $5 + 44 | 0; //@line 20377
         $112 = HEAP32[$111 >> 2] | 0; //@line 20378
         do {
          if (($112 | 0) == ($109 | 0)) {
           $123 = $109; //@line 20382
          } else {
           $114 = $5 + 48 | 0; //@line 20384
           $116 = $112; //@line 20385
           while (1) {
            $115 = $116 + -72 | 0; //@line 20387
            HEAP32[$111 >> 2] = $115; //@line 20388
            __THREW__ = 0; //@line 20389
            HEAP8[$$byval_copy8 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20390
            invoke_viii(13, $$byval_copy8 | 0, $114 | 0, $115 | 0); //@line 20391
            $117 = __THREW__; //@line 20392
            __THREW__ = 0; //@line 20392
            if ($117 & 1) {
             label = 50; //@line 20395
             break;
            }
            $116 = HEAP32[$111 >> 2] | 0; //@line 20398
            if (($116 | 0) == ($109 | 0)) {
             label = 51; //@line 20401
             break;
            }
           }
           if ((label | 0) == 50) {
            $121 = ___cxa_find_matching_catch_3(0) | 0; //@line 20408
            ___clang_call_terminate($121); //@line 20410
           } else if ((label | 0) == 51) {
            $123 = HEAP32[$108 >> 2] | 0; //@line 20415
            break;
           }
          }
         } while (0);
         __ZdlPv($123); //@line 20420
        }
        $124 = $5 + 4 | 0; //@line 20422
        if ((HEAP8[$124 + 11 >> 0] | 0) >= 0) {
         $$0$i$i$i = $102; //@line 20427
         $$03$i$i$i = $101; //@line 20427
         break;
        }
        __ZdlPv(HEAP32[$124 >> 2] | 0); //@line 20431
        $$0$i$i$i = $102; //@line 20432
        $$03$i$i$i = $101; //@line 20432
        break;
       }
       $49 = $5 + 52 | 0; //@line 20435
       if ((HEAP8[$49 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$49 >> 2] | 0); //@line 20441
       }
       $54 = $5 + 40 | 0; //@line 20443
       $55 = HEAP32[$54 >> 2] | 0; //@line 20444
       if ($55 | 0) {
        $57 = $5 + 44 | 0; //@line 20447
        $58 = HEAP32[$57 >> 2] | 0; //@line 20448
        do {
         if (($58 | 0) == ($55 | 0)) {
          $69 = $55; //@line 20452
         } else {
          $60 = $5 + 48 | 0; //@line 20454
          $62 = $58; //@line 20455
          while (1) {
           $61 = $62 + -72 | 0; //@line 20457
           HEAP32[$57 >> 2] = $61; //@line 20458
           __THREW__ = 0; //@line 20459
           HEAP8[$$byval_copy8 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20460
           invoke_viii(13, $$byval_copy8 | 0, $60 | 0, $61 | 0); //@line 20461
           $63 = __THREW__; //@line 20462
           __THREW__ = 0; //@line 20462
           if ($63 & 1) {
            label = 24; //@line 20465
            break;
           }
           $62 = HEAP32[$57 >> 2] | 0; //@line 20468
           if (($62 | 0) == ($55 | 0)) {
            label = 25; //@line 20471
            break;
           }
          }
          if ((label | 0) == 24) {
           $67 = ___cxa_find_matching_catch_3(0) | 0; //@line 20478
           ___clang_call_terminate($67); //@line 20480
          } else if ((label | 0) == 25) {
           $69 = HEAP32[$54 >> 2] | 0; //@line 20485
           break;
          }
         }
        } while (0);
        __ZdlPv($69); //@line 20490
       }
       $70 = $5 + 4 | 0; //@line 20492
       if ((HEAP8[$70 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$70 >> 2] | 0); //@line 20498
       }
       $75 = $4 + 52 | 0; //@line 20500
       if ((HEAP8[$75 + 11 >> 0] | 0) < 0) {
        __ZdlPv(HEAP32[$75 >> 2] | 0); //@line 20506
       }
       $80 = $4 + 40 | 0; //@line 20508
       $81 = HEAP32[$80 >> 2] | 0; //@line 20509
       if ($81 | 0) {
        $83 = $4 + 44 | 0; //@line 20512
        $84 = HEAP32[$83 >> 2] | 0; //@line 20513
        do {
         if (($84 | 0) == ($81 | 0)) {
          $95 = $81; //@line 20517
         } else {
          $86 = $4 + 48 | 0; //@line 20519
          $88 = $84; //@line 20520
          while (1) {
           $87 = $88 + -72 | 0; //@line 20522
           HEAP32[$83 >> 2] = $87; //@line 20523
           __THREW__ = 0; //@line 20524
           HEAP8[$$byval_copy8 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20525
           invoke_viii(13, $$byval_copy8 | 0, $86 | 0, $87 | 0); //@line 20526
           $89 = __THREW__; //@line 20527
           __THREW__ = 0; //@line 20527
           if ($89 & 1) {
            label = 36; //@line 20530
            break;
           }
           $88 = HEAP32[$83 >> 2] | 0; //@line 20533
           if (($88 | 0) == ($81 | 0)) {
            label = 37; //@line 20536
            break;
           }
          }
          if ((label | 0) == 36) {
           $93 = ___cxa_find_matching_catch_3(0) | 0; //@line 20543
           ___clang_call_terminate($93); //@line 20545
          } else if ((label | 0) == 37) {
           $95 = HEAP32[$80 >> 2] | 0; //@line 20550
           break;
          }
         }
        } while (0);
        __ZdlPv($95); //@line 20555
       }
       if ((HEAP8[$33 >> 0] | 0) >= 0) {
        STACKTOP = sp; //@line 20560
        return;
       }
       __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 20563
       STACKTOP = sp; //@line 20564
       return;
      }
     }
     $99 = ___cxa_find_matching_catch_2() | 0; //@line 20567
     $$0$i$i$i = tempRet0; //@line 20569
     $$03$i$i$i = $99; //@line 20569
     break;
    }
   }
   $23 = ___cxa_find_matching_catch_2() | 0; //@line 20573
   $24 = tempRet0; //@line 20574
   __ZNSt3__26localeD2Ev($2); //@line 20575
   $eh$lpad$body$i$i$i$i$index2Z2D = $24; //@line 20576
   $eh$lpad$body$i$i$i$i$indexZ2D = $23; //@line 20576
   label = 7; //@line 20577
  }
 } while (0);
 if ((label | 0) == 6) {
  $27 = ___cxa_find_matching_catch_2() | 0; //@line 20581
  $eh$lpad$body$i$i$i$i$index2Z2D = tempRet0; //@line 20583
  $eh$lpad$body$i$i$i$i$indexZ2D = $27; //@line 20583
  label = 7; //@line 20584
 }
 if ((label | 0) == 7) {
  if ((HEAP8[$$byval_copy8 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$$byval_copy8 >> 2] | 0); //@line 20592
  }
  $$0$i$i$i = $eh$lpad$body$i$i$i$i$index2Z2D; //@line 20594
  $$03$i$i$i = $eh$lpad$body$i$i$i$i$indexZ2D; //@line 20594
 }
 $129 = $4 + 52 | 0; //@line 20596
 if ((HEAP8[$129 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$129 >> 2] | 0); //@line 20602
 }
 $134 = $4 + 40 | 0; //@line 20604
 $135 = HEAP32[$134 >> 2] | 0; //@line 20605
 if ($135 | 0) {
  $137 = $4 + 44 | 0; //@line 20608
  $138 = HEAP32[$137 >> 2] | 0; //@line 20609
  do {
   if (($138 | 0) == ($135 | 0)) {
    $149 = $135; //@line 20613
   } else {
    $140 = $4 + 48 | 0; //@line 20615
    $142 = $138; //@line 20616
    while (1) {
     $141 = $142 + -72 | 0; //@line 20618
     HEAP32[$137 >> 2] = $141; //@line 20619
     __THREW__ = 0; //@line 20620
     HEAP8[$$byval_copy8 >> 0] = HEAP8[$3 >> 0] | 0; //@line 20621
     invoke_viii(13, $$byval_copy8 | 0, $140 | 0, $141 | 0); //@line 20622
     $143 = __THREW__; //@line 20623
     __THREW__ = 0; //@line 20623
     if ($143 & 1) {
      label = 62; //@line 20626
      break;
     }
     $142 = HEAP32[$137 >> 2] | 0; //@line 20629
     if (($142 | 0) == ($135 | 0)) {
      label = 63; //@line 20632
      break;
     }
    }
    if ((label | 0) == 62) {
     $147 = ___cxa_find_matching_catch_3(0) | 0; //@line 20639
     ___clang_call_terminate($147); //@line 20641
    } else if ((label | 0) == 63) {
     $149 = HEAP32[$134 >> 2] | 0; //@line 20646
     break;
    }
   }
  } while (0);
  __ZdlPv($149); //@line 20651
 }
 if ((HEAP8[$6 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$03$i$i$i | 0); //@line 20657
 }
 __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 20661
 ___resumeException($$03$i$i$i | 0); //@line 20662
}
function __ZN6Runner11createStackEy13CharmFunction($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$byval_copy3 = 0, $101 = 0, $104 = 0, $105 = 0, $11 = 0, $110 = 0, $122 = 0, $124 = 0, $130 = 0, $132 = 0, $137 = 0, $138 = 0, $140 = 0, $141 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $150 = 0, $152 = 0, $153 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $180 = 0, $182 = 0, $183 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6968
 STACKTOP = STACKTOP + 256 | 0; //@line 6969
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 6969
 $$byval_copy3 = sp + 249 | 0; //@line 6970
 $4 = sp + 248 | 0; //@line 6971
 $5 = sp + 176 | 0; //@line 6972
 $6 = sp; //@line 6973
 $7 = sp + 104 | 0; //@line 6974
 __ZN13CharmFunctionC2ERKS_($5, $3); //@line 6975
 __THREW__ = 0; //@line 6976
 $8 = invoke_iii(57, $0 | 0, $5 | 0) | 0; //@line 6977
 $9 = __THREW__; //@line 6978
 __THREW__ = 0; //@line 6978
 if ($9 & 1) {
  $40 = ___cxa_find_matching_catch_2() | 0; //@line 6981
  $41 = tempRet0; //@line 6982
  $42 = $5 + 52 | 0; //@line 6983
  if ((HEAP8[$42 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$42 >> 2] | 0); //@line 6989
  }
  $47 = $5 + 40 | 0; //@line 6991
  $48 = HEAP32[$47 >> 2] | 0; //@line 6992
  if ($48 | 0) {
   $50 = $5 + 44 | 0; //@line 6995
   $51 = HEAP32[$50 >> 2] | 0; //@line 6996
   do {
    if (($51 | 0) == ($48 | 0)) {
     $62 = $48; //@line 7000
    } else {
     $53 = $5 + 48 | 0; //@line 7002
     $55 = $51; //@line 7003
     while (1) {
      $54 = $55 + -72 | 0; //@line 7005
      HEAP32[$50 >> 2] = $54; //@line 7006
      __THREW__ = 0; //@line 7007
      HEAP8[$$byval_copy3 >> 0] = HEAP8[$4 >> 0] | 0; //@line 7008
      invoke_viii(13, $$byval_copy3 | 0, $53 | 0, $54 | 0); //@line 7009
      $56 = __THREW__; //@line 7010
      __THREW__ = 0; //@line 7010
      if ($56 & 1) {
       label = 24; //@line 7013
       break;
      }
      $55 = HEAP32[$50 >> 2] | 0; //@line 7016
      if (($55 | 0) == ($48 | 0)) {
       label = 25; //@line 7019
       break;
      }
     }
     if ((label | 0) == 24) {
      $60 = ___cxa_find_matching_catch_3(0) | 0; //@line 7026
      ___clang_call_terminate($60); //@line 7028
     } else if ((label | 0) == 25) {
      $62 = HEAP32[$47 >> 2] | 0; //@line 7033
      break;
     }
    }
   } while (0);
   __ZdlPv($62); //@line 7038
  }
  $63 = $5 + 4 | 0; //@line 7040
  if ((HEAP8[$63 + 11 >> 0] | 0) >= 0) {
   $$1 = $41; //@line 7045
   $$14 = $40; //@line 7045
   ___resumeException($$14 | 0); //@line 7046
  }
  __ZdlPv(HEAP32[$63 >> 2] | 0); //@line 7050
  $$1 = $41; //@line 7051
  $$14 = $40; //@line 7051
  ___resumeException($$14 | 0); //@line 7052
 }
 $11 = $5 + 52 | 0; //@line 7055
 if ((HEAP8[$11 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 7061
 }
 $16 = $5 + 40 | 0; //@line 7063
 $17 = HEAP32[$16 >> 2] | 0; //@line 7064
 if ($17 | 0) {
  $19 = $5 + 44 | 0; //@line 7067
  $20 = HEAP32[$19 >> 2] | 0; //@line 7068
  do {
   if (($20 | 0) == ($17 | 0)) {
    $31 = $17; //@line 7072
   } else {
    $22 = $5 + 48 | 0; //@line 7074
    $24 = $20; //@line 7075
    while (1) {
     $23 = $24 + -72 | 0; //@line 7077
     HEAP32[$19 >> 2] = $23; //@line 7078
     __THREW__ = 0; //@line 7079
     HEAP8[$$byval_copy3 >> 0] = HEAP8[$4 >> 0] | 0; //@line 7080
     invoke_viii(13, $$byval_copy3 | 0, $22 | 0, $23 | 0); //@line 7081
     $25 = __THREW__; //@line 7082
     __THREW__ = 0; //@line 7082
     if ($25 & 1) {
      label = 9; //@line 7085
      break;
     }
     $24 = HEAP32[$19 >> 2] | 0; //@line 7088
     if (($24 | 0) == ($17 | 0)) {
      label = 10; //@line 7091
      break;
     }
    }
    if ((label | 0) == 9) {
     $29 = ___cxa_find_matching_catch_3(0) | 0; //@line 7098
     ___clang_call_terminate($29); //@line 7100
    } else if ((label | 0) == 10) {
     $31 = HEAP32[$16 >> 2] | 0; //@line 7105
     break;
    }
   }
  } while (0);
  __ZdlPv($31); //@line 7110
 }
 $32 = $5 + 4 | 0; //@line 7112
 if ((HEAP8[$32 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$32 >> 2] | 0); //@line 7118
 }
 if ($8) {
  $37 = ___cxa_allocate_exception(8) | 0; //@line 7121
  __THREW__ = 0; //@line 7122
  invoke_vii(125, $37 | 0, 14287); //@line 7123
  $38 = __THREW__; //@line 7124
  __THREW__ = 0; //@line 7124
  if (!($38 & 1)) {
   ___cxa_throw($37 | 0, 2824, 242); //@line 7127
  }
  $68 = ___cxa_find_matching_catch_2() | 0; //@line 7130
  $69 = tempRet0; //@line 7131
  ___cxa_free_exception($37 | 0); //@line 7132
  $$1 = $69; //@line 7133
  $$14 = $68; //@line 7133
  ___resumeException($$14 | 0); //@line 7134
 }
 __ZN13CharmFunctionC2ERKS_($7, $3); //@line 7137
 __THREW__ = 0; //@line 7138
 invoke_viiii(10, $6 | 0, $1 | 0, $2 | 0, $7 | 0); //@line 7139
 $70 = __THREW__; //@line 7140
 __THREW__ = 0; //@line 7140
 do {
  if ($70 & 1) {
   $158 = ___cxa_find_matching_catch_2() | 0; //@line 7144
   $$0 = tempRet0; //@line 7146
   $$03 = $158; //@line 7146
  } else {
   $72 = $0 + 76 | 0; //@line 7148
   $73 = HEAP32[$72 >> 2] | 0; //@line 7149
   if ($73 >>> 0 < (HEAP32[$0 + 80 >> 2] | 0) >>> 0) {
    $77 = $6; //@line 7154
    $82 = HEAP32[$77 + 4 >> 2] | 0; //@line 7159
    $83 = $73; //@line 7160
    HEAP32[$83 >> 2] = HEAP32[$77 >> 2]; //@line 7162
    HEAP32[$83 + 4 >> 2] = $82; //@line 7165
    HEAP32[$73 + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 7169
    $90 = $73 + 12 | 0; //@line 7170
    $91 = $6 + 12 | 0; //@line 7171
    HEAP32[$90 >> 2] = HEAP32[$91 >> 2]; //@line 7172
    HEAP32[$90 + 4 >> 2] = HEAP32[$91 + 4 >> 2]; //@line 7172
    HEAP32[$90 + 8 >> 2] = HEAP32[$91 + 8 >> 2]; //@line 7172
    HEAP32[$91 >> 2] = 0; //@line 7173
    HEAP32[$91 + 4 >> 2] = 0; //@line 7173
    HEAP32[$91 + 8 >> 2] = 0; //@line 7173
    $92 = $73 + 24 | 0; //@line 7174
    $93 = $6 + 24 | 0; //@line 7175
    HEAP32[$92 >> 2] = HEAP32[$93 >> 2]; //@line 7176
    HEAP32[$92 + 4 >> 2] = HEAP32[$93 + 4 >> 2]; //@line 7176
    HEAP32[$92 + 8 >> 2] = HEAP32[$93 + 8 >> 2]; //@line 7176
    HEAP32[$92 + 12 >> 2] = HEAP32[$93 + 12 >> 2]; //@line 7176
    HEAP32[$92 + 16 >> 2] = HEAP32[$93 + 16 >> 2]; //@line 7176
    HEAP32[$92 + 20 >> 2] = HEAP32[$93 + 20 >> 2]; //@line 7176
    $94 = $73 + 48 | 0; //@line 7177
    $95 = $6 + 48 | 0; //@line 7178
    HEAP32[$94 >> 2] = 0; //@line 7179
    $96 = $73 + 52 | 0; //@line 7180
    HEAP32[$96 >> 2] = 0; //@line 7181
    HEAP32[$73 + 56 >> 2] = 0; //@line 7183
    HEAP32[$94 >> 2] = HEAP32[$95 >> 2]; //@line 7185
    $99 = $6 + 52 | 0; //@line 7186
    HEAP32[$96 >> 2] = HEAP32[$99 >> 2]; //@line 7188
    $101 = $6 + 56 | 0; //@line 7189
    HEAP32[$73 + 56 >> 2] = HEAP32[$101 >> 2]; //@line 7192
    HEAP32[$101 >> 2] = 0; //@line 7193
    HEAP32[$99 >> 2] = 0; //@line 7194
    HEAP32[$95 >> 2] = 0; //@line 7195
    $104 = $73 + 60 | 0; //@line 7196
    $105 = $6 + 60 | 0; //@line 7197
    HEAP32[$104 >> 2] = HEAP32[$105 >> 2]; //@line 7198
    HEAP32[$104 + 4 >> 2] = HEAP32[$105 + 4 >> 2]; //@line 7198
    HEAP32[$104 + 8 >> 2] = HEAP32[$105 + 8 >> 2]; //@line 7198
    HEAP32[$105 >> 2] = 0; //@line 7199
    HEAP32[$105 + 4 >> 2] = 0; //@line 7199
    HEAP32[$105 + 8 >> 2] = 0; //@line 7199
    HEAP16[$73 + 72 >> 1] = HEAP16[$6 + 72 >> 1] | 0; //@line 7203
    $110 = $6 + 80 | 0; //@line 7205
    HEAP32[$73 + 80 >> 2] = HEAP32[$110 >> 2]; //@line 7207
    HEAP32[$73 + 84 >> 2] = HEAP32[$6 + 84 >> 2]; //@line 7211
    HEAP32[$73 + 88 >> 2] = HEAP32[$6 + 88 >> 2]; //@line 7215
    HEAP32[$73 + 92 >> 2] = HEAP32[$6 + 92 >> 2]; //@line 7219
    HEAP32[$110 >> 2] = 0; //@line 7220
    HEAP32[$110 + 4 >> 2] = 0; //@line 7220
    HEAP32[$110 + 8 >> 2] = 0; //@line 7220
    HEAP32[$110 + 12 >> 2] = 0; //@line 7220
    $122 = $6 + 96 | 0; //@line 7222
    HEAP32[$73 + 96 >> 2] = HEAP32[$122 >> 2]; //@line 7224
    $124 = $6 + 100 | 0; //@line 7225
    HEAP32[$73 + 100 >> 2] = HEAP32[$124 >> 2]; //@line 7228
    HEAP32[$122 >> 2] = 0; //@line 7229
    HEAP32[$124 >> 2] = 0; //@line 7230
    HEAP32[$72 >> 2] = (HEAP32[$72 >> 2] | 0) + 104; //@line 7233
   } else {
    __THREW__ = 0; //@line 7236
    invoke_vii(121, $0 + 72 | 0, $6 | 0); //@line 7237
    $130 = __THREW__; //@line 7238
    __THREW__ = 0; //@line 7238
    if ($130 & 1) {
     $160 = ___cxa_find_matching_catch_2() | 0; //@line 7241
     $161 = tempRet0; //@line 7242
     __ZN5StackD2Ev($6); //@line 7243
     $$0 = $161; //@line 7244
     $$03 = $160; //@line 7244
     break;
    }
   }
   __ZN5StackD2Ev($6); //@line 7248
   $132 = $7 + 52 | 0; //@line 7249
   if ((HEAP8[$132 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$132 >> 2] | 0); //@line 7255
   }
   $137 = $7 + 40 | 0; //@line 7257
   $138 = HEAP32[$137 >> 2] | 0; //@line 7258
   if ($138 | 0) {
    $140 = $7 + 44 | 0; //@line 7261
    $141 = HEAP32[$140 >> 2] | 0; //@line 7262
    do {
     if (($141 | 0) == ($138 | 0)) {
      $152 = $138; //@line 7266
     } else {
      $143 = $7 + 48 | 0; //@line 7268
      $145 = $141; //@line 7269
      while (1) {
       $144 = $145 + -72 | 0; //@line 7271
       HEAP32[$140 >> 2] = $144; //@line 7272
       __THREW__ = 0; //@line 7273
       HEAP8[$$byval_copy3 >> 0] = HEAP8[$4 >> 0] | 0; //@line 7274
       invoke_viii(13, $$byval_copy3 | 0, $143 | 0, $144 | 0); //@line 7275
       $146 = __THREW__; //@line 7276
       __THREW__ = 0; //@line 7276
       if ($146 & 1) {
        label = 41; //@line 7279
        break;
       }
       $145 = HEAP32[$140 >> 2] | 0; //@line 7282
       if (($145 | 0) == ($138 | 0)) {
        label = 42; //@line 7285
        break;
       }
      }
      if ((label | 0) == 41) {
       $150 = ___cxa_find_matching_catch_3(0) | 0; //@line 7292
       ___clang_call_terminate($150); //@line 7294
      } else if ((label | 0) == 42) {
       $152 = HEAP32[$137 >> 2] | 0; //@line 7299
       break;
      }
     }
    } while (0);
    __ZdlPv($152); //@line 7304
   }
   $153 = $7 + 4 | 0; //@line 7306
   if ((HEAP8[$153 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 7311
    return;
   }
   __ZdlPv(HEAP32[$153 >> 2] | 0); //@line 7314
   STACKTOP = sp; //@line 7315
   return;
  }
 } while (0);
 $162 = $7 + 52 | 0; //@line 7318
 if ((HEAP8[$162 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$162 >> 2] | 0); //@line 7324
 }
 $167 = $7 + 40 | 0; //@line 7326
 $168 = HEAP32[$167 >> 2] | 0; //@line 7327
 if ($168 | 0) {
  $170 = $7 + 44 | 0; //@line 7330
  $171 = HEAP32[$170 >> 2] | 0; //@line 7331
  do {
   if (($171 | 0) == ($168 | 0)) {
    $182 = $168; //@line 7335
   } else {
    $173 = $7 + 48 | 0; //@line 7337
    $175 = $171; //@line 7338
    while (1) {
     $174 = $175 + -72 | 0; //@line 7340
     HEAP32[$170 >> 2] = $174; //@line 7341
     __THREW__ = 0; //@line 7342
     HEAP8[$$byval_copy3 >> 0] = HEAP8[$4 >> 0] | 0; //@line 7343
     invoke_viii(13, $$byval_copy3 | 0, $173 | 0, $174 | 0); //@line 7344
     $176 = __THREW__; //@line 7345
     __THREW__ = 0; //@line 7345
     if ($176 & 1) {
      label = 56; //@line 7348
      break;
     }
     $175 = HEAP32[$170 >> 2] | 0; //@line 7351
     if (($175 | 0) == ($168 | 0)) {
      label = 57; //@line 7354
      break;
     }
    }
    if ((label | 0) == 56) {
     $180 = ___cxa_find_matching_catch_3(0) | 0; //@line 7361
     ___clang_call_terminate($180); //@line 7363
    } else if ((label | 0) == 57) {
     $182 = HEAP32[$167 >> 2] | 0; //@line 7368
     break;
    }
   }
  } while (0);
  __ZdlPv($182); //@line 7373
 }
 $183 = $7 + 4 | 0; //@line 7375
 if ((HEAP8[$183 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$183 >> 2] | 0); //@line 7381
 }
 $$1 = $$0; //@line 7383
 $$14 = $$03; //@line 7383
 ___resumeException($$14 | 0); //@line 7384
}
function __ZN6Parser17analyzeDefinitionE13CharmFunction($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$02 = 0, $$byval_copy5 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $121 = 0, $122 = 0, $126 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $144 = 0, $146 = 0, $147 = 0, $152 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $172 = 0, $174 = 0, $175 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $39 = 0, $4 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $85 = 0, $87 = 0, $88 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29163
 STACKTOP = STACKTOP + 224 | 0; //@line 29164
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 29164
 $$byval_copy5 = sp + 217 | 0; //@line 29165
 $3 = sp + 216 | 0; //@line 29166
 $4 = sp + 144 | 0; //@line 29167
 $5 = sp + 72 | 0; //@line 29168
 $6 = sp; //@line 29169
 __ZN13CharmFunctionC2ERKS_($4, $2); //@line 29170
 __THREW__ = 0; //@line 29171
 $7 = invoke_iii(66, $1 | 0, $4 | 0) | 0; //@line 29172
 $8 = __THREW__; //@line 29173
 __THREW__ = 0; //@line 29173
 if ($8 & 1) {
  $65 = ___cxa_find_matching_catch_2() | 0; //@line 29176
  $66 = tempRet0; //@line 29177
  $67 = $4 + 52 | 0; //@line 29178
  if ((HEAP8[$67 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$67 >> 2] | 0); //@line 29184
  }
  $72 = $4 + 40 | 0; //@line 29186
  $73 = HEAP32[$72 >> 2] | 0; //@line 29187
  if ($73 | 0) {
   $75 = $4 + 44 | 0; //@line 29190
   $76 = HEAP32[$75 >> 2] | 0; //@line 29191
   do {
    if (($76 | 0) == ($73 | 0)) {
     $87 = $73; //@line 29195
    } else {
     $78 = $4 + 48 | 0; //@line 29197
     $80 = $76; //@line 29198
     while (1) {
      $79 = $80 + -72 | 0; //@line 29200
      HEAP32[$75 >> 2] = $79; //@line 29201
      __THREW__ = 0; //@line 29202
      HEAP8[$$byval_copy5 >> 0] = HEAP8[$3 >> 0] | 0; //@line 29203
      invoke_viii(13, $$byval_copy5 | 0, $78 | 0, $79 | 0); //@line 29204
      $81 = __THREW__; //@line 29205
      __THREW__ = 0; //@line 29205
      if ($81 & 1) {
       label = 35; //@line 29208
       break;
      }
      $80 = HEAP32[$75 >> 2] | 0; //@line 29211
      if (($80 | 0) == ($73 | 0)) {
       label = 36; //@line 29214
       break;
      }
     }
     if ((label | 0) == 35) {
      $85 = ___cxa_find_matching_catch_3(0) | 0; //@line 29221
      ___clang_call_terminate($85); //@line 29223
     } else if ((label | 0) == 36) {
      $87 = HEAP32[$72 >> 2] | 0; //@line 29228
      break;
     }
    }
   } while (0);
   __ZdlPv($87); //@line 29233
  }
  $88 = $4 + 4 | 0; //@line 29235
  if ((HEAP8[$88 + 11 >> 0] | 0) >= 0) {
   $$0 = $66; //@line 29240
   $$02 = $65; //@line 29240
   ___resumeException($$02 | 0); //@line 29241
  }
  __ZdlPv(HEAP32[$88 >> 2] | 0); //@line 29245
  $$0 = $66; //@line 29246
  $$02 = $65; //@line 29246
  ___resumeException($$02 | 0); //@line 29247
 }
 HEAP8[$0 >> 0] = $7 & 1; //@line 29251
 $11 = $4 + 52 | 0; //@line 29252
 if ((HEAP8[$11 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 29258
 }
 $16 = $4 + 40 | 0; //@line 29260
 $17 = HEAP32[$16 >> 2] | 0; //@line 29261
 if ($17 | 0) {
  $19 = $4 + 44 | 0; //@line 29264
  $20 = HEAP32[$19 >> 2] | 0; //@line 29265
  do {
   if (($20 | 0) == ($17 | 0)) {
    $31 = $17; //@line 29269
   } else {
    $22 = $4 + 48 | 0; //@line 29271
    $24 = $20; //@line 29272
    while (1) {
     $23 = $24 + -72 | 0; //@line 29274
     HEAP32[$19 >> 2] = $23; //@line 29275
     __THREW__ = 0; //@line 29276
     HEAP8[$$byval_copy5 >> 0] = HEAP8[$3 >> 0] | 0; //@line 29277
     invoke_viii(13, $$byval_copy5 | 0, $22 | 0, $23 | 0); //@line 29278
     $25 = __THREW__; //@line 29279
     __THREW__ = 0; //@line 29279
     if ($25 & 1) {
      label = 9; //@line 29282
      break;
     }
     $24 = HEAP32[$19 >> 2] | 0; //@line 29285
     if (($24 | 0) == ($17 | 0)) {
      label = 10; //@line 29288
      break;
     }
    }
    if ((label | 0) == 9) {
     $29 = ___cxa_find_matching_catch_3(0) | 0; //@line 29295
     ___clang_call_terminate($29); //@line 29297
    } else if ((label | 0) == 10) {
     $31 = HEAP32[$16 >> 2] | 0; //@line 29302
     break;
    }
   }
  } while (0);
  __ZdlPv($31); //@line 29307
 }
 $32 = $4 + 4 | 0; //@line 29309
 if ((HEAP8[$32 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$32 >> 2] | 0); //@line 29315
 }
 do {
  if ($7) {
   __ZN13CharmFunctionC2ERKS_($5, $2); //@line 29319
   __THREW__ = 0; //@line 29320
   invoke_vii(137, $1 | 0, $5 | 0); //@line 29321
   $37 = __THREW__; //@line 29322
   __THREW__ = 0; //@line 29322
   if (!($37 & 1)) {
    $39 = $5 + 52 | 0; //@line 29325
    if ((HEAP8[$39 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$39 >> 2] | 0); //@line 29331
    }
    $44 = $5 + 40 | 0; //@line 29333
    $45 = HEAP32[$44 >> 2] | 0; //@line 29334
    if ($45 | 0) {
     $47 = $5 + 44 | 0; //@line 29337
     $48 = HEAP32[$47 >> 2] | 0; //@line 29338
     do {
      if (($48 | 0) == ($45 | 0)) {
       $59 = $45; //@line 29342
      } else {
       $50 = $5 + 48 | 0; //@line 29344
       $52 = $48; //@line 29345
       while (1) {
        $51 = $52 + -72 | 0; //@line 29347
        HEAP32[$47 >> 2] = $51; //@line 29348
        __THREW__ = 0; //@line 29349
        HEAP8[$$byval_copy5 >> 0] = HEAP8[$3 >> 0] | 0; //@line 29350
        invoke_viii(13, $$byval_copy5 | 0, $50 | 0, $51 | 0); //@line 29351
        $53 = __THREW__; //@line 29352
        __THREW__ = 0; //@line 29352
        if ($53 & 1) {
         label = 23; //@line 29355
         break;
        }
        $52 = HEAP32[$47 >> 2] | 0; //@line 29358
        if (($52 | 0) == ($45 | 0)) {
         label = 24; //@line 29361
         break;
        }
       }
       if ((label | 0) == 23) {
        $57 = ___cxa_find_matching_catch_3(0) | 0; //@line 29368
        ___clang_call_terminate($57); //@line 29370
       } else if ((label | 0) == 24) {
        $59 = HEAP32[$44 >> 2] | 0; //@line 29375
        break;
       }
      }
     } while (0);
     __ZdlPv($59); //@line 29380
    }
    $60 = $5 + 4 | 0; //@line 29382
    if ((HEAP8[$60 + 11 >> 0] | 0) >= 0) {
     break;
    }
    __ZdlPv(HEAP32[$60 >> 2] | 0); //@line 29390
    break;
   }
   $93 = ___cxa_find_matching_catch_2() | 0; //@line 29393
   $94 = tempRet0; //@line 29394
   $95 = $5 + 52 | 0; //@line 29395
   if ((HEAP8[$95 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$95 >> 2] | 0); //@line 29401
   }
   $100 = $5 + 40 | 0; //@line 29403
   $101 = HEAP32[$100 >> 2] | 0; //@line 29404
   if ($101 | 0) {
    $103 = $5 + 44 | 0; //@line 29407
    $104 = HEAP32[$103 >> 2] | 0; //@line 29408
    do {
     if (($104 | 0) == ($101 | 0)) {
      $115 = $101; //@line 29412
     } else {
      $106 = $5 + 48 | 0; //@line 29414
      $108 = $104; //@line 29415
      while (1) {
       $107 = $108 + -72 | 0; //@line 29417
       HEAP32[$103 >> 2] = $107; //@line 29418
       __THREW__ = 0; //@line 29419
       HEAP8[$$byval_copy5 >> 0] = HEAP8[$3 >> 0] | 0; //@line 29420
       invoke_viii(13, $$byval_copy5 | 0, $106 | 0, $107 | 0); //@line 29421
       $109 = __THREW__; //@line 29422
       __THREW__ = 0; //@line 29422
       if ($109 & 1) {
        label = 47; //@line 29425
        break;
       }
       $108 = HEAP32[$103 >> 2] | 0; //@line 29428
       if (($108 | 0) == ($101 | 0)) {
        label = 48; //@line 29431
        break;
       }
      }
      if ((label | 0) == 47) {
       $113 = ___cxa_find_matching_catch_3(0) | 0; //@line 29438
       ___clang_call_terminate($113); //@line 29440
      } else if ((label | 0) == 48) {
       $115 = HEAP32[$100 >> 2] | 0; //@line 29445
       break;
      }
     }
    } while (0);
    __ZdlPv($115); //@line 29450
   }
   $116 = $5 + 4 | 0; //@line 29452
   if ((HEAP8[$116 + 11 >> 0] | 0) >= 0) {
    $$0 = $94; //@line 29457
    $$02 = $93; //@line 29457
    ___resumeException($$02 | 0); //@line 29458
   }
   __ZdlPv(HEAP32[$116 >> 2] | 0); //@line 29462
   $$0 = $94; //@line 29463
   $$02 = $93; //@line 29463
   ___resumeException($$02 | 0); //@line 29464
  }
 } while (0);
 __ZN13CharmFunctionC2ERKS_($6, $2); //@line 29468
 __THREW__ = 0; //@line 29469
 $121 = invoke_iii(71, $1 | 0, $6 | 0) | 0; //@line 29470
 $122 = __THREW__; //@line 29471
 __THREW__ = 0; //@line 29471
 if ($122 & 1) {
  $152 = ___cxa_find_matching_catch_2() | 0; //@line 29474
  $153 = tempRet0; //@line 29475
  $154 = $6 + 52 | 0; //@line 29476
  if ((HEAP8[$154 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$154 >> 2] | 0); //@line 29482
  }
  $159 = $6 + 40 | 0; //@line 29484
  $160 = HEAP32[$159 >> 2] | 0; //@line 29485
  if ($160 | 0) {
   $162 = $6 + 44 | 0; //@line 29488
   $163 = HEAP32[$162 >> 2] | 0; //@line 29489
   do {
    if (($163 | 0) == ($160 | 0)) {
     $174 = $160; //@line 29493
    } else {
     $165 = $6 + 48 | 0; //@line 29495
     $167 = $163; //@line 29496
     while (1) {
      $166 = $167 + -72 | 0; //@line 29498
      HEAP32[$162 >> 2] = $166; //@line 29499
      __THREW__ = 0; //@line 29500
      HEAP8[$$byval_copy5 >> 0] = HEAP8[$3 >> 0] | 0; //@line 29501
      invoke_viii(13, $$byval_copy5 | 0, $165 | 0, $166 | 0); //@line 29502
      $168 = __THREW__; //@line 29503
      __THREW__ = 0; //@line 29503
      if ($168 & 1) {
       label = 73; //@line 29506
       break;
      }
      $167 = HEAP32[$162 >> 2] | 0; //@line 29509
      if (($167 | 0) == ($160 | 0)) {
       label = 74; //@line 29512
       break;
      }
     }
     if ((label | 0) == 73) {
      $172 = ___cxa_find_matching_catch_3(0) | 0; //@line 29519
      ___clang_call_terminate($172); //@line 29521
     } else if ((label | 0) == 74) {
      $174 = HEAP32[$159 >> 2] | 0; //@line 29526
      break;
     }
    }
   } while (0);
   __ZdlPv($174); //@line 29531
  }
  $175 = $6 + 4 | 0; //@line 29533
  if ((HEAP8[$175 + 11 >> 0] | 0) >= 0) {
   $$0 = $153; //@line 29538
   $$02 = $152; //@line 29538
   ___resumeException($$02 | 0); //@line 29539
  }
  __ZdlPv(HEAP32[$175 >> 2] | 0); //@line 29543
  $$0 = $153; //@line 29544
  $$02 = $152; //@line 29544
  ___resumeException($$02 | 0); //@line 29545
 } else {
  HEAP8[$0 + 1 >> 0] = $121 & 1; //@line 29550
  $126 = $6 + 52 | 0; //@line 29551
  if ((HEAP8[$126 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$126 >> 2] | 0); //@line 29557
  }
  $131 = $6 + 40 | 0; //@line 29559
  $132 = HEAP32[$131 >> 2] | 0; //@line 29560
  if ($132 | 0) {
   $134 = $6 + 44 | 0; //@line 29563
   $135 = HEAP32[$134 >> 2] | 0; //@line 29564
   do {
    if (($135 | 0) == ($132 | 0)) {
     $146 = $132; //@line 29568
    } else {
     $137 = $6 + 48 | 0; //@line 29570
     $139 = $135; //@line 29571
     while (1) {
      $138 = $139 + -72 | 0; //@line 29573
      HEAP32[$134 >> 2] = $138; //@line 29574
      __THREW__ = 0; //@line 29575
      HEAP8[$$byval_copy5 >> 0] = HEAP8[$3 >> 0] | 0; //@line 29576
      invoke_viii(13, $$byval_copy5 | 0, $137 | 0, $138 | 0); //@line 29577
      $140 = __THREW__; //@line 29578
      __THREW__ = 0; //@line 29578
      if ($140 & 1) {
       label = 60; //@line 29581
       break;
      }
      $139 = HEAP32[$134 >> 2] | 0; //@line 29584
      if (($139 | 0) == ($132 | 0)) {
       label = 61; //@line 29587
       break;
      }
     }
     if ((label | 0) == 60) {
      $144 = ___cxa_find_matching_catch_3(0) | 0; //@line 29594
      ___clang_call_terminate($144); //@line 29596
     } else if ((label | 0) == 61) {
      $146 = HEAP32[$131 >> 2] | 0; //@line 29601
      break;
     }
    }
   } while (0);
   __ZdlPv($146); //@line 29606
  }
  $147 = $6 + 4 | 0; //@line 29608
  if ((HEAP8[$147 + 11 >> 0] | 0) >= 0) {
   STACKTOP = sp; //@line 29613
   return;
  }
  __ZdlPv(HEAP32[$147 >> 2] | 0); //@line 29616
  STACKTOP = sp; //@line 29617
  return;
 }
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i38 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i44 = 0, $$0$i$i34 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i40 = 0, $$pre$i4$i$i46 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $111 = 0, $117 = 0, $12 = 0, $122 = 0, $13 = 0, $131 = 0, $136 = 0, $139 = 0.0, $14 = 0, $140 = 0, $143 = 0, $147 = 0, $15 = 0, $152 = 0, $155 = 0, $156 = 0, $16 = 0, $164 = 0, $171 = 0, $172 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 31216
 STACKTOP = STACKTOP + 352 | 0; //@line 31217
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352); //@line 31217
 $6 = sp + 208 | 0; //@line 31218
 $7 = sp + 200 | 0; //@line 31219
 $8 = sp + 196 | 0; //@line 31220
 $9 = sp + 184 | 0; //@line 31221
 $10 = sp + 172 | 0; //@line 31222
 $11 = sp + 168 | 0; //@line 31223
 $12 = sp + 8 | 0; //@line 31224
 $13 = sp + 4 | 0; //@line 31225
 $14 = sp; //@line 31226
 $15 = sp + 337 | 0; //@line 31227
 $16 = sp + 336 | 0; //@line 31228
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8); //@line 31229
 HEAP32[$10 >> 2] = 0; //@line 31230
 HEAP32[$10 + 4 >> 2] = 0; //@line 31230
 HEAP32[$10 + 8 >> 2] = 0; //@line 31230
 $$0$i$i = 0; //@line 31231
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0; //@line 31238
  $$0$i$i = $$0$i$i + 1 | 0; //@line 31240
 }
 $19 = $10 + 11 | 0; //@line 31242
 if ((HEAP8[$19 >> 0] | 0) < 0) {
  $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; //@line 31250
 } else {
  $25 = 10; //@line 31252
 }
 __THREW__ = 0; //@line 31254
 invoke_viii(14, $10 | 0, $25 | 0, 0); //@line 31255
 $26 = __THREW__; //@line 31256
 __THREW__ = 0; //@line 31256
 if ($26 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0; //@line 31259
  $$1 = $90; //@line 31261
  $$121 = tempRet0; //@line 31261
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 31266
  HEAP32[$11 >> 2] = $31; //@line 31267
  HEAP32[$13 >> 2] = $12; //@line 31268
  HEAP32[$14 >> 2] = 0; //@line 31269
  HEAP8[$15 >> 0] = 1; //@line 31270
  HEAP8[$16 >> 0] = 69; //@line 31271
  $32 = $10 + 4 | 0; //@line 31272
  $33 = $10 + 8 | 0; //@line 31273
  $$pre = HEAP32[$1 >> 2] | 0; //@line 31274
  $$018 = $31; //@line 31275
  $$pre$i$i$i = $$pre; //@line 31275
  $182 = $$pre; //@line 31275
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i40 = 0; //@line 31279
    $152 = 0; //@line 31279
    $183 = 1; //@line 31279
   } else {
    $36 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 31282
    if (($36 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 31290
     $43 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 31291
     $44 = __THREW__; //@line 31292
     __THREW__ = 0; //@line 31292
     if ($44 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $43; //@line 31297
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0; //@line 31302
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 31307
     $$pre$i$i$i40 = 0; //@line 31308
     $152 = 0; //@line 31308
     $183 = 1; //@line 31308
    } else {
     $$pre$i$i$i40 = $$pre$i$i$i; //@line 31310
     $152 = $182; //@line 31310
     $183 = 0; //@line 31310
    }
   }
   $50 = HEAP32[$2 >> 2] | 0; //@line 31313
   do {
    if (!$50) {
     label = 20; //@line 31317
    } else {
     $53 = HEAP32[$50 + 12 >> 2] | 0; //@line 31320
     if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 31328
      $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0; //@line 31329
      $61 = __THREW__; //@line 31330
      __THREW__ = 0; //@line 31330
      if ($61 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $60; //@line 31335
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0; //@line 31340
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 31345
      label = 20; //@line 31346
      break;
     } else {
      if ($183) {
       $184 = $50; //@line 31350
       break;
      } else {
       $$2 = $$018; //@line 31353
       $$pre$i4$i$i46 = $50; //@line 31353
       label = 37; //@line 31354
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 31361
    if ($183) {
     $$2 = $$018; //@line 31363
     $$pre$i4$i$i46 = 0; //@line 31363
     label = 37; //@line 31364
     break;
    } else {
     $184 = 0; //@line 31367
    }
   }
   $68 = HEAP8[$19 >> 0] | 0; //@line 31371
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $68 & 255; //@line 31375
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $72 | 0)) {
    __THREW__ = 0; //@line 31380
    invoke_viii(14, $10 | 0, $72 << 1 | 0, 0); //@line 31381
    $76 = __THREW__; //@line 31382
    __THREW__ = 0; //@line 31382
    if ($76 & 1) {
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) {
     $82 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; //@line 31393
    } else {
     $82 = 10; //@line 31395
    }
    __THREW__ = 0; //@line 31397
    invoke_viii(14, $10 | 0, $82 | 0, 0); //@line 31398
    $83 = __THREW__; //@line 31399
    __THREW__ = 0; //@line 31399
    if ($83 & 1) {
     break;
    }
    $88 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 31407
    HEAP32[$11 >> 2] = $88 + $72; //@line 31409
    $$119 = $88; //@line 31410
   } else {
    $$119 = $$018; //@line 31412
   }
   $92 = $$pre$i$i$i40 + 12 | 0; //@line 31414
   $93 = HEAP32[$92 >> 2] | 0; //@line 31415
   $94 = $$pre$i$i$i40 + 16 | 0; //@line 31416
   if (($93 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 31423
    $100 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 31424
    $101 = __THREW__; //@line 31425
    __THREW__ = 0; //@line 31425
    if ($101 & 1) {
     break;
    } else {
     $$0$i$i34 = $100; //@line 31430
    }
   } else {
    $$0$i$i34 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$93 >> 2] | 0) | 0; //@line 31435
   }
   __THREW__ = 0; //@line 31439
   $107 = invoke_iiiiiiiiiiiii(2, $$0$i$i34 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0; //@line 31440
   $108 = __THREW__; //@line 31441
   __THREW__ = 0; //@line 31441
   if ($108 & 1) {
    break;
   }
   if ($107 | 0) {
    $$2 = $$119; //@line 31448
    $$pre$i4$i$i46 = $184; //@line 31448
    label = 37; //@line 31449
    break;
   }
   $111 = HEAP32[$92 >> 2] | 0; //@line 31452
   if (($111 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 31459
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 31460
    $117 = __THREW__; //@line 31461
    __THREW__ = 0; //@line 31461
    if ($117 & 1) {
     break;
    } else {
     $$018 = $$119; //@line 31466
     $$pre$i$i$i = $$pre$i$i$i40; //@line 31466
     $182 = $152; //@line 31466
     continue;
    }
   } else {
    HEAP32[$92 >> 2] = $111 + 4; //@line 31471
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$111 >> 2] | 0) | 0; //@line 31473
    $$018 = $$119; //@line 31474
    $$pre$i$i$i = $$pre$i$i$i40; //@line 31474
    $182 = $152; //@line 31474
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $122 = HEAP8[$9 + 11 >> 0] | 0; //@line 31481
    if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($122 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $122 & 255) | 0) == 0)) {
     $131 = HEAP32[$13 >> 2] | 0; //@line 31492
     if (($131 - $12 | 0) < 160) {
      $136 = HEAP32[$14 >> 2] | 0; //@line 31498
      HEAP32[$13 >> 2] = $131 + 4; //@line 31500
      HEAP32[$131 >> 2] = $136; //@line 31501
     }
    }
    __THREW__ = 0; //@line 31505
    $139 = +invoke_diii(3, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0); //@line 31506
    $140 = __THREW__; //@line 31507
    __THREW__ = 0; //@line 31507
    if (!($140 & 1)) {
     HEAPF32[$5 >> 2] = $139; //@line 31510
     __THREW__ = 0; //@line 31512
     invoke_viiii(21, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0); //@line 31513
     $143 = __THREW__; //@line 31514
     __THREW__ = 0; //@line 31514
     if (!($143 & 1)) {
      if (!$$pre$i$i$i40) {
       $185 = 1; //@line 31519
      } else {
       $147 = HEAP32[$$pre$i$i$i40 + 12 >> 2] | 0; //@line 31522
       if (($147 | 0) == (HEAP32[$$pre$i$i$i40 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 31530
        $155 = invoke_ii(HEAP32[(HEAP32[$152 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 31531
        $156 = __THREW__; //@line 31532
        __THREW__ = 0; //@line 31532
        if ($156 & 1) {
         break;
        } else {
         $$0$i$i$i$i38 = $155; //@line 31537
        }
       } else {
        $$0$i$i$i$i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$147 >> 2] | 0) | 0; //@line 31542
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 31547
        $185 = 1; //@line 31548
       } else {
        $185 = 0; //@line 31550
       }
      }
      do {
       if (!$$pre$i4$i$i46) {
        label = 54; //@line 31556
       } else {
        $164 = HEAP32[$$pre$i4$i$i46 + 12 >> 2] | 0; //@line 31559
        if (($164 | 0) == (HEAP32[$$pre$i4$i$i46 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 31567
         $171 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i46 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i46 | 0) | 0; //@line 31568
         $172 = __THREW__; //@line 31569
         __THREW__ = 0; //@line 31569
         if ($172 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i44 = $171; //@line 31574
         }
        } else {
         $$0$i$i2$i$i44 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$164 >> 2] | 0) | 0; //@line 31579
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i44, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 31584
         label = 54; //@line 31585
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56; //@line 31591
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($185) {
        label = 56; //@line 31599
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 31605
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 31607
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 31608
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 31609
      STACKTOP = sp; //@line 31610
      return $$sroa$0$0$copyload | 0; //@line 31610
     }
    }
   }
  } while (0);
  $180 = ___cxa_find_matching_catch_2() | 0; //@line 31615
  $$1 = $180; //@line 31617
  $$121 = tempRet0; //@line 31617
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 31619
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 31620
 ___resumeException($$1 | 0); //@line 31621
 return 0; //@line 31623
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i38 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i44 = 0, $$0$i$i34 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i40 = 0, $$pre$i4$i$i46 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $111 = 0, $117 = 0, $12 = 0, $122 = 0, $13 = 0, $131 = 0, $136 = 0, $139 = 0.0, $14 = 0, $140 = 0, $143 = 0, $147 = 0, $15 = 0, $152 = 0, $155 = 0, $156 = 0, $16 = 0, $164 = 0, $171 = 0, $172 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30084
 STACKTOP = STACKTOP + 352 | 0; //@line 30085
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352); //@line 30085
 $6 = sp + 208 | 0; //@line 30086
 $7 = sp + 200 | 0; //@line 30087
 $8 = sp + 196 | 0; //@line 30088
 $9 = sp + 184 | 0; //@line 30089
 $10 = sp + 172 | 0; //@line 30090
 $11 = sp + 168 | 0; //@line 30091
 $12 = sp + 8 | 0; //@line 30092
 $13 = sp + 4 | 0; //@line 30093
 $14 = sp; //@line 30094
 $15 = sp + 337 | 0; //@line 30095
 $16 = sp + 336 | 0; //@line 30096
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8); //@line 30097
 HEAP32[$10 >> 2] = 0; //@line 30098
 HEAP32[$10 + 4 >> 2] = 0; //@line 30098
 HEAP32[$10 + 8 >> 2] = 0; //@line 30098
 $$0$i$i = 0; //@line 30099
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0; //@line 30106
  $$0$i$i = $$0$i$i + 1 | 0; //@line 30108
 }
 $19 = $10 + 11 | 0; //@line 30110
 if ((HEAP8[$19 >> 0] | 0) < 0) {
  $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; //@line 30118
 } else {
  $25 = 10; //@line 30120
 }
 __THREW__ = 0; //@line 30122
 invoke_viii(14, $10 | 0, $25 | 0, 0); //@line 30123
 $26 = __THREW__; //@line 30124
 __THREW__ = 0; //@line 30124
 if ($26 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0; //@line 30127
  $$1 = $90; //@line 30129
  $$121 = tempRet0; //@line 30129
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 30134
  HEAP32[$11 >> 2] = $31; //@line 30135
  HEAP32[$13 >> 2] = $12; //@line 30136
  HEAP32[$14 >> 2] = 0; //@line 30137
  HEAP8[$15 >> 0] = 1; //@line 30138
  HEAP8[$16 >> 0] = 69; //@line 30139
  $32 = $10 + 4 | 0; //@line 30140
  $33 = $10 + 8 | 0; //@line 30141
  $$pre = HEAP32[$1 >> 2] | 0; //@line 30142
  $$018 = $31; //@line 30143
  $$pre$i$i$i = $$pre; //@line 30143
  $182 = $$pre; //@line 30143
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i40 = 0; //@line 30147
    $152 = 0; //@line 30147
    $183 = 1; //@line 30147
   } else {
    $36 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 30150
    if (($36 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 30158
     $43 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 30159
     $44 = __THREW__; //@line 30160
     __THREW__ = 0; //@line 30160
     if ($44 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $43; //@line 30165
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0; //@line 30170
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 30175
     $$pre$i$i$i40 = 0; //@line 30176
     $152 = 0; //@line 30176
     $183 = 1; //@line 30176
    } else {
     $$pre$i$i$i40 = $$pre$i$i$i; //@line 30178
     $152 = $182; //@line 30178
     $183 = 0; //@line 30178
    }
   }
   $50 = HEAP32[$2 >> 2] | 0; //@line 30181
   do {
    if (!$50) {
     label = 20; //@line 30185
    } else {
     $53 = HEAP32[$50 + 12 >> 2] | 0; //@line 30188
     if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 30196
      $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0; //@line 30197
      $61 = __THREW__; //@line 30198
      __THREW__ = 0; //@line 30198
      if ($61 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $60; //@line 30203
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0; //@line 30208
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 30213
      label = 20; //@line 30214
      break;
     } else {
      if ($183) {
       $184 = $50; //@line 30218
       break;
      } else {
       $$2 = $$018; //@line 30221
       $$pre$i4$i$i46 = $50; //@line 30221
       label = 37; //@line 30222
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 30229
    if ($183) {
     $$2 = $$018; //@line 30231
     $$pre$i4$i$i46 = 0; //@line 30231
     label = 37; //@line 30232
     break;
    } else {
     $184 = 0; //@line 30235
    }
   }
   $68 = HEAP8[$19 >> 0] | 0; //@line 30239
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $68 & 255; //@line 30243
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $72 | 0)) {
    __THREW__ = 0; //@line 30248
    invoke_viii(14, $10 | 0, $72 << 1 | 0, 0); //@line 30249
    $76 = __THREW__; //@line 30250
    __THREW__ = 0; //@line 30250
    if ($76 & 1) {
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) {
     $82 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; //@line 30261
    } else {
     $82 = 10; //@line 30263
    }
    __THREW__ = 0; //@line 30265
    invoke_viii(14, $10 | 0, $82 | 0, 0); //@line 30266
    $83 = __THREW__; //@line 30267
    __THREW__ = 0; //@line 30267
    if ($83 & 1) {
     break;
    }
    $88 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 30275
    HEAP32[$11 >> 2] = $88 + $72; //@line 30277
    $$119 = $88; //@line 30278
   } else {
    $$119 = $$018; //@line 30280
   }
   $92 = $$pre$i$i$i40 + 12 | 0; //@line 30282
   $93 = HEAP32[$92 >> 2] | 0; //@line 30283
   $94 = $$pre$i$i$i40 + 16 | 0; //@line 30284
   if (($93 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 30291
    $100 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 30292
    $101 = __THREW__; //@line 30293
    __THREW__ = 0; //@line 30293
    if ($101 & 1) {
     break;
    } else {
     $$0$i$i34 = $100; //@line 30298
    }
   } else {
    $$0$i$i34 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$93 >> 2] | 0) | 0; //@line 30303
   }
   __THREW__ = 0; //@line 30307
   $107 = invoke_iiiiiiiiiiiii(2, $$0$i$i34 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0; //@line 30308
   $108 = __THREW__; //@line 30309
   __THREW__ = 0; //@line 30309
   if ($108 & 1) {
    break;
   }
   if ($107 | 0) {
    $$2 = $$119; //@line 30316
    $$pre$i4$i$i46 = $184; //@line 30316
    label = 37; //@line 30317
    break;
   }
   $111 = HEAP32[$92 >> 2] | 0; //@line 30320
   if (($111 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 30327
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 30328
    $117 = __THREW__; //@line 30329
    __THREW__ = 0; //@line 30329
    if ($117 & 1) {
     break;
    } else {
     $$018 = $$119; //@line 30334
     $$pre$i$i$i = $$pre$i$i$i40; //@line 30334
     $182 = $152; //@line 30334
     continue;
    }
   } else {
    HEAP32[$92 >> 2] = $111 + 4; //@line 30339
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$111 >> 2] | 0) | 0; //@line 30341
    $$018 = $$119; //@line 30342
    $$pre$i$i$i = $$pre$i$i$i40; //@line 30342
    $182 = $152; //@line 30342
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $122 = HEAP8[$9 + 11 >> 0] | 0; //@line 30349
    if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($122 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $122 & 255) | 0) == 0)) {
     $131 = HEAP32[$13 >> 2] | 0; //@line 30360
     if (($131 - $12 | 0) < 160) {
      $136 = HEAP32[$14 >> 2] | 0; //@line 30366
      HEAP32[$13 >> 2] = $131 + 4; //@line 30368
      HEAP32[$131 >> 2] = $136; //@line 30369
     }
    }
    __THREW__ = 0; //@line 30373
    $139 = +invoke_diii(1, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0); //@line 30374
    $140 = __THREW__; //@line 30375
    __THREW__ = 0; //@line 30375
    if (!($140 & 1)) {
     HEAPF64[$5 >> 3] = $139; //@line 30378
     __THREW__ = 0; //@line 30380
     invoke_viiii(21, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0); //@line 30381
     $143 = __THREW__; //@line 30382
     __THREW__ = 0; //@line 30382
     if (!($143 & 1)) {
      if (!$$pre$i$i$i40) {
       $185 = 1; //@line 30387
      } else {
       $147 = HEAP32[$$pre$i$i$i40 + 12 >> 2] | 0; //@line 30390
       if (($147 | 0) == (HEAP32[$$pre$i$i$i40 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 30398
        $155 = invoke_ii(HEAP32[(HEAP32[$152 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 30399
        $156 = __THREW__; //@line 30400
        __THREW__ = 0; //@line 30400
        if ($156 & 1) {
         break;
        } else {
         $$0$i$i$i$i38 = $155; //@line 30405
        }
       } else {
        $$0$i$i$i$i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$147 >> 2] | 0) | 0; //@line 30410
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 30415
        $185 = 1; //@line 30416
       } else {
        $185 = 0; //@line 30418
       }
      }
      do {
       if (!$$pre$i4$i$i46) {
        label = 54; //@line 30424
       } else {
        $164 = HEAP32[$$pre$i4$i$i46 + 12 >> 2] | 0; //@line 30427
        if (($164 | 0) == (HEAP32[$$pre$i4$i$i46 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 30435
         $171 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i46 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i46 | 0) | 0; //@line 30436
         $172 = __THREW__; //@line 30437
         __THREW__ = 0; //@line 30437
         if ($172 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i44 = $171; //@line 30442
         }
        } else {
         $$0$i$i2$i$i44 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$164 >> 2] | 0) | 0; //@line 30447
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i44, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 30452
         label = 54; //@line 30453
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56; //@line 30459
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($185) {
        label = 56; //@line 30467
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 30473
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 30475
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 30476
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 30477
      STACKTOP = sp; //@line 30478
      return $$sroa$0$0$copyload | 0; //@line 30478
     }
    }
   }
  } while (0);
  $180 = ___cxa_find_matching_catch_2() | 0; //@line 30483
  $$1 = $180; //@line 30485
  $$121 = tempRet0; //@line 30485
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 30487
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 30488
 ___resumeException($$1 | 0); //@line 30489
 return 0; //@line 30491
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i38 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i44 = 0, $$0$i$i34 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i40 = 0, $$pre$i4$i$i46 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $111 = 0, $117 = 0, $12 = 0, $122 = 0, $13 = 0, $131 = 0, $136 = 0, $139 = 0.0, $14 = 0, $140 = 0, $143 = 0, $147 = 0, $15 = 0, $152 = 0, $155 = 0, $156 = 0, $16 = 0, $164 = 0, $171 = 0, $172 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30789
 STACKTOP = STACKTOP + 352 | 0; //@line 30790
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352); //@line 30790
 $6 = sp + 208 | 0; //@line 30791
 $7 = sp + 200 | 0; //@line 30792
 $8 = sp + 196 | 0; //@line 30793
 $9 = sp + 184 | 0; //@line 30794
 $10 = sp + 172 | 0; //@line 30795
 $11 = sp + 168 | 0; //@line 30796
 $12 = sp + 8 | 0; //@line 30797
 $13 = sp + 4 | 0; //@line 30798
 $14 = sp; //@line 30799
 $15 = sp + 337 | 0; //@line 30800
 $16 = sp + 336 | 0; //@line 30801
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8); //@line 30802
 HEAP32[$10 >> 2] = 0; //@line 30803
 HEAP32[$10 + 4 >> 2] = 0; //@line 30803
 HEAP32[$10 + 8 >> 2] = 0; //@line 30803
 $$0$i$i = 0; //@line 30804
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0; //@line 30811
  $$0$i$i = $$0$i$i + 1 | 0; //@line 30813
 }
 $19 = $10 + 11 | 0; //@line 30815
 if ((HEAP8[$19 >> 0] | 0) < 0) {
  $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; //@line 30823
 } else {
  $25 = 10; //@line 30825
 }
 __THREW__ = 0; //@line 30827
 invoke_viii(14, $10 | 0, $25 | 0, 0); //@line 30828
 $26 = __THREW__; //@line 30829
 __THREW__ = 0; //@line 30829
 if ($26 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0; //@line 30832
  $$1 = $90; //@line 30834
  $$121 = tempRet0; //@line 30834
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 30839
  HEAP32[$11 >> 2] = $31; //@line 30840
  HEAP32[$13 >> 2] = $12; //@line 30841
  HEAP32[$14 >> 2] = 0; //@line 30842
  HEAP8[$15 >> 0] = 1; //@line 30843
  HEAP8[$16 >> 0] = 69; //@line 30844
  $32 = $10 + 4 | 0; //@line 30845
  $33 = $10 + 8 | 0; //@line 30846
  $$pre = HEAP32[$1 >> 2] | 0; //@line 30847
  $$018 = $31; //@line 30848
  $$pre$i$i$i = $$pre; //@line 30848
  $182 = $$pre; //@line 30848
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i40 = 0; //@line 30852
    $152 = 0; //@line 30852
    $183 = 1; //@line 30852
   } else {
    $36 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 30855
    if (($36 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 30863
     $43 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 30864
     $44 = __THREW__; //@line 30865
     __THREW__ = 0; //@line 30865
     if ($44 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $43; //@line 30870
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0; //@line 30875
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 30880
     $$pre$i$i$i40 = 0; //@line 30881
     $152 = 0; //@line 30881
     $183 = 1; //@line 30881
    } else {
     $$pre$i$i$i40 = $$pre$i$i$i; //@line 30883
     $152 = $182; //@line 30883
     $183 = 0; //@line 30883
    }
   }
   $50 = HEAP32[$2 >> 2] | 0; //@line 30886
   do {
    if (!$50) {
     label = 20; //@line 30890
    } else {
     $53 = HEAP32[$50 + 12 >> 2] | 0; //@line 30893
     if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 30901
      $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0; //@line 30902
      $61 = __THREW__; //@line 30903
      __THREW__ = 0; //@line 30903
      if ($61 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $60; //@line 30908
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0; //@line 30913
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 30918
      label = 20; //@line 30919
      break;
     } else {
      if ($183) {
       $184 = $50; //@line 30923
       break;
      } else {
       $$2 = $$018; //@line 30926
       $$pre$i4$i$i46 = $50; //@line 30926
       label = 37; //@line 30927
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 30934
    if ($183) {
     $$2 = $$018; //@line 30936
     $$pre$i4$i$i46 = 0; //@line 30936
     label = 37; //@line 30937
     break;
    } else {
     $184 = 0; //@line 30940
    }
   }
   $68 = HEAP8[$19 >> 0] | 0; //@line 30944
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $68 & 255; //@line 30948
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $72 | 0)) {
    __THREW__ = 0; //@line 30953
    invoke_viii(14, $10 | 0, $72 << 1 | 0, 0); //@line 30954
    $76 = __THREW__; //@line 30955
    __THREW__ = 0; //@line 30955
    if ($76 & 1) {
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) {
     $82 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; //@line 30966
    } else {
     $82 = 10; //@line 30968
    }
    __THREW__ = 0; //@line 30970
    invoke_viii(14, $10 | 0, $82 | 0, 0); //@line 30971
    $83 = __THREW__; //@line 30972
    __THREW__ = 0; //@line 30972
    if ($83 & 1) {
     break;
    }
    $88 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 30980
    HEAP32[$11 >> 2] = $88 + $72; //@line 30982
    $$119 = $88; //@line 30983
   } else {
    $$119 = $$018; //@line 30985
   }
   $92 = $$pre$i$i$i40 + 12 | 0; //@line 30987
   $93 = HEAP32[$92 >> 2] | 0; //@line 30988
   $94 = $$pre$i$i$i40 + 16 | 0; //@line 30989
   if (($93 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 30996
    $100 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 30997
    $101 = __THREW__; //@line 30998
    __THREW__ = 0; //@line 30998
    if ($101 & 1) {
     break;
    } else {
     $$0$i$i34 = $100; //@line 31003
    }
   } else {
    $$0$i$i34 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$93 >> 2] | 0) | 0; //@line 31008
   }
   __THREW__ = 0; //@line 31012
   $107 = invoke_iiiiiiiiiiiii(2, $$0$i$i34 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0; //@line 31013
   $108 = __THREW__; //@line 31014
   __THREW__ = 0; //@line 31014
   if ($108 & 1) {
    break;
   }
   if ($107 | 0) {
    $$2 = $$119; //@line 31021
    $$pre$i4$i$i46 = $184; //@line 31021
    label = 37; //@line 31022
    break;
   }
   $111 = HEAP32[$92 >> 2] | 0; //@line 31025
   if (($111 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 31032
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 31033
    $117 = __THREW__; //@line 31034
    __THREW__ = 0; //@line 31034
    if ($117 & 1) {
     break;
    } else {
     $$018 = $$119; //@line 31039
     $$pre$i$i$i = $$pre$i$i$i40; //@line 31039
     $182 = $152; //@line 31039
     continue;
    }
   } else {
    HEAP32[$92 >> 2] = $111 + 4; //@line 31044
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$111 >> 2] | 0) | 0; //@line 31046
    $$018 = $$119; //@line 31047
    $$pre$i$i$i = $$pre$i$i$i40; //@line 31047
    $182 = $152; //@line 31047
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $122 = HEAP8[$9 + 11 >> 0] | 0; //@line 31054
    if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($122 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $122 & 255) | 0) == 0)) {
     $131 = HEAP32[$13 >> 2] | 0; //@line 31065
     if (($131 - $12 | 0) < 160) {
      $136 = HEAP32[$14 >> 2] | 0; //@line 31071
      HEAP32[$13 >> 2] = $131 + 4; //@line 31073
      HEAP32[$131 >> 2] = $136; //@line 31074
     }
    }
    __THREW__ = 0; //@line 31078
    $139 = +invoke_diii(2, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0); //@line 31079
    $140 = __THREW__; //@line 31080
    __THREW__ = 0; //@line 31080
    if (!($140 & 1)) {
     HEAPF64[$5 >> 3] = $139; //@line 31083
     __THREW__ = 0; //@line 31085
     invoke_viiii(21, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0); //@line 31086
     $143 = __THREW__; //@line 31087
     __THREW__ = 0; //@line 31087
     if (!($143 & 1)) {
      if (!$$pre$i$i$i40) {
       $185 = 1; //@line 31092
      } else {
       $147 = HEAP32[$$pre$i$i$i40 + 12 >> 2] | 0; //@line 31095
       if (($147 | 0) == (HEAP32[$$pre$i$i$i40 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 31103
        $155 = invoke_ii(HEAP32[(HEAP32[$152 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 31104
        $156 = __THREW__; //@line 31105
        __THREW__ = 0; //@line 31105
        if ($156 & 1) {
         break;
        } else {
         $$0$i$i$i$i38 = $155; //@line 31110
        }
       } else {
        $$0$i$i$i$i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$147 >> 2] | 0) | 0; //@line 31115
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i38, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 31120
        $185 = 1; //@line 31121
       } else {
        $185 = 0; //@line 31123
       }
      }
      do {
       if (!$$pre$i4$i$i46) {
        label = 54; //@line 31129
       } else {
        $164 = HEAP32[$$pre$i4$i$i46 + 12 >> 2] | 0; //@line 31132
        if (($164 | 0) == (HEAP32[$$pre$i4$i$i46 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 31140
         $171 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i46 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i46 | 0) | 0; //@line 31141
         $172 = __THREW__; //@line 31142
         __THREW__ = 0; //@line 31142
         if ($172 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i44 = $171; //@line 31147
         }
        } else {
         $$0$i$i2$i$i44 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$164 >> 2] | 0) | 0; //@line 31152
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i44, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 31157
         label = 54; //@line 31158
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56; //@line 31164
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($185) {
        label = 56; //@line 31172
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 31178
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 31180
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 31181
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 31182
      STACKTOP = sp; //@line 31183
      return $$sroa$0$0$copyload | 0; //@line 31183
     }
    }
   }
  } while (0);
  $180 = ___cxa_find_matching_catch_2() | 0; //@line 31188
  $$1 = $180; //@line 31190
  $$121 = tempRet0; //@line 31190
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 31192
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 31193
 ___resumeException($$1 | 0); //@line 31194
 return 0; //@line 31196
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i38 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i44 = 0, $$0$i$i34 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i40 = 0, $$pre$i4$i$i46 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $108 = 0, $109 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $123 = 0, $13 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0.0, $141 = 0, $144 = 0, $148 = 0, $15 = 0, $153 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $172 = 0, $173 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25093
 STACKTOP = STACKTOP + 240 | 0; //@line 25094
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240); //@line 25094
 $6 = sp + 200 | 0; //@line 25095
 $7 = sp + 199 | 0; //@line 25096
 $8 = sp + 198 | 0; //@line 25097
 $9 = sp + 184 | 0; //@line 25098
 $10 = sp + 172 | 0; //@line 25099
 $11 = sp + 168 | 0; //@line 25100
 $12 = sp + 8 | 0; //@line 25101
 $13 = sp + 4 | 0; //@line 25102
 $14 = sp; //@line 25103
 $15 = sp + 197 | 0; //@line 25104
 $16 = sp + 196 | 0; //@line 25105
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8); //@line 25106
 HEAP32[$10 >> 2] = 0; //@line 25107
 HEAP32[$10 + 4 >> 2] = 0; //@line 25107
 HEAP32[$10 + 8 >> 2] = 0; //@line 25107
 $$0$i$i = 0; //@line 25108
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0; //@line 25115
  $$0$i$i = $$0$i$i + 1 | 0; //@line 25117
 }
 $19 = $10 + 11 | 0; //@line 25119
 if ((HEAP8[$19 >> 0] | 0) < 0) {
  $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; //@line 25127
 } else {
  $25 = 10; //@line 25129
 }
 __THREW__ = 0; //@line 25131
 invoke_viii(14, $10 | 0, $25 | 0, 0); //@line 25132
 $26 = __THREW__; //@line 25133
 __THREW__ = 0; //@line 25133
 if ($26 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0; //@line 25136
  $$1 = $90; //@line 25138
  $$121 = tempRet0; //@line 25138
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 25143
  HEAP32[$11 >> 2] = $31; //@line 25144
  HEAP32[$13 >> 2] = $12; //@line 25145
  HEAP32[$14 >> 2] = 0; //@line 25146
  HEAP8[$15 >> 0] = 1; //@line 25147
  HEAP8[$16 >> 0] = 69; //@line 25148
  $32 = $10 + 4 | 0; //@line 25149
  $33 = $10 + 8 | 0; //@line 25150
  $$pre = HEAP32[$1 >> 2] | 0; //@line 25151
  $$018 = $31; //@line 25152
  $$pre$i$i$i = $$pre; //@line 25152
  $183 = $$pre; //@line 25152
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i40 = 0; //@line 25156
    $153 = 0; //@line 25156
    $184 = 1; //@line 25156
   } else {
    $36 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 25159
    if (($36 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 25167
     $43 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 25168
     $44 = __THREW__; //@line 25169
     __THREW__ = 0; //@line 25169
     if ($44 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $43; //@line 25174
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0; //@line 25179
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 25184
     $$pre$i$i$i40 = 0; //@line 25185
     $153 = 0; //@line 25185
     $184 = 1; //@line 25185
    } else {
     $$pre$i$i$i40 = $$pre$i$i$i; //@line 25187
     $153 = $183; //@line 25187
     $184 = 0; //@line 25187
    }
   }
   $50 = HEAP32[$2 >> 2] | 0; //@line 25190
   do {
    if (!$50) {
     label = 20; //@line 25194
    } else {
     $53 = HEAP32[$50 + 12 >> 2] | 0; //@line 25197
     if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 25205
      $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0; //@line 25206
      $61 = __THREW__; //@line 25207
      __THREW__ = 0; //@line 25207
      if ($61 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $60; //@line 25212
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0; //@line 25217
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 25222
      label = 20; //@line 25223
      break;
     } else {
      if ($184) {
       $185 = $50; //@line 25227
       break;
      } else {
       $$2 = $$018; //@line 25230
       $$pre$i4$i$i46 = $50; //@line 25230
       label = 37; //@line 25231
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 25238
    if ($184) {
     $$2 = $$018; //@line 25240
     $$pre$i4$i$i46 = 0; //@line 25240
     label = 37; //@line 25241
     break;
    } else {
     $185 = 0; //@line 25244
    }
   }
   $68 = HEAP8[$19 >> 0] | 0; //@line 25248
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $68 & 255; //@line 25252
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $72 | 0)) {
    __THREW__ = 0; //@line 25257
    invoke_viii(14, $10 | 0, $72 << 1 | 0, 0); //@line 25258
    $76 = __THREW__; //@line 25259
    __THREW__ = 0; //@line 25259
    if ($76 & 1) {
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) {
     $82 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; //@line 25270
    } else {
     $82 = 10; //@line 25272
    }
    __THREW__ = 0; //@line 25274
    invoke_viii(14, $10 | 0, $82 | 0, 0); //@line 25275
    $83 = __THREW__; //@line 25276
    __THREW__ = 0; //@line 25276
    if ($83 & 1) {
     break;
    }
    $88 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 25284
    HEAP32[$11 >> 2] = $88 + $72; //@line 25286
    $$119 = $88; //@line 25287
   } else {
    $$119 = $$018; //@line 25289
   }
   $92 = $$pre$i$i$i40 + 12 | 0; //@line 25291
   $93 = HEAP32[$92 >> 2] | 0; //@line 25292
   $94 = $$pre$i$i$i40 + 16 | 0; //@line 25293
   if (($93 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 25300
    $100 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 25301
    $101 = __THREW__; //@line 25302
    __THREW__ = 0; //@line 25302
    if ($101 & 1) {
     break;
    } else {
     $$0$i$i34 = $100; //@line 25307
    }
   } else {
    $$0$i$i34 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$93 >> 0] | 0) | 0; //@line 25312
   }
   __THREW__ = 0; //@line 25317
   $108 = invoke_iiiiiiiiiiiii(1, $$0$i$i34 & 255 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0; //@line 25318
   $109 = __THREW__; //@line 25319
   __THREW__ = 0; //@line 25319
   if ($109 & 1) {
    break;
   }
   if ($108 | 0) {
    $$2 = $$119; //@line 25326
    $$pre$i4$i$i46 = $185; //@line 25326
    label = 37; //@line 25327
    break;
   }
   $112 = HEAP32[$92 >> 2] | 0; //@line 25330
   if (($112 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 25337
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 25338
    $118 = __THREW__; //@line 25339
    __THREW__ = 0; //@line 25339
    if ($118 & 1) {
     break;
    } else {
     $$018 = $$119; //@line 25344
     $$pre$i$i$i = $$pre$i$i$i40; //@line 25344
     $183 = $153; //@line 25344
     continue;
    }
   } else {
    HEAP32[$92 >> 2] = $112 + 1; //@line 25349
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$112 >> 0] | 0) | 0; //@line 25351
    $$018 = $$119; //@line 25352
    $$pre$i$i$i = $$pre$i$i$i40; //@line 25352
    $183 = $153; //@line 25352
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $123 = HEAP8[$9 + 11 >> 0] | 0; //@line 25359
    if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($123 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $123 & 255) | 0) == 0)) {
     $132 = HEAP32[$13 >> 2] | 0; //@line 25370
     if (($132 - $12 | 0) < 160) {
      $137 = HEAP32[$14 >> 2] | 0; //@line 25376
      HEAP32[$13 >> 2] = $132 + 4; //@line 25378
      HEAP32[$132 >> 2] = $137; //@line 25379
     }
    }
    __THREW__ = 0; //@line 25383
    $140 = +invoke_diii(3, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0); //@line 25384
    $141 = __THREW__; //@line 25385
    __THREW__ = 0; //@line 25385
    if (!($141 & 1)) {
     HEAPF32[$5 >> 2] = $140; //@line 25388
     __THREW__ = 0; //@line 25390
     invoke_viiii(21, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0); //@line 25391
     $144 = __THREW__; //@line 25392
     __THREW__ = 0; //@line 25392
     if (!($144 & 1)) {
      if (!$$pre$i$i$i40) {
       $186 = 1; //@line 25397
      } else {
       $148 = HEAP32[$$pre$i$i$i40 + 12 >> 2] | 0; //@line 25400
       if (($148 | 0) == (HEAP32[$$pre$i$i$i40 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 25408
        $156 = invoke_ii(HEAP32[(HEAP32[$153 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 25409
        $157 = __THREW__; //@line 25410
        __THREW__ = 0; //@line 25410
        if ($157 & 1) {
         break;
        } else {
         $$0$i$i$i$i38 = $156; //@line 25415
        }
       } else {
        $$0$i$i$i$i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$148 >> 0] | 0) | 0; //@line 25420
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 25425
        $186 = 1; //@line 25426
       } else {
        $186 = 0; //@line 25428
       }
      }
      do {
       if (!$$pre$i4$i$i46) {
        label = 54; //@line 25434
       } else {
        $165 = HEAP32[$$pre$i4$i$i46 + 12 >> 2] | 0; //@line 25437
        if (($165 | 0) == (HEAP32[$$pre$i4$i$i46 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 25445
         $172 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i46 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i46 | 0) | 0; //@line 25446
         $173 = __THREW__; //@line 25447
         __THREW__ = 0; //@line 25447
         if ($173 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i44 = $172; //@line 25452
         }
        } else {
         $$0$i$i2$i$i44 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$165 >> 0] | 0) | 0; //@line 25457
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i44, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 25462
         label = 54; //@line 25463
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56; //@line 25469
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($186) {
        label = 56; //@line 25477
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 25483
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 25485
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 25486
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 25487
      STACKTOP = sp; //@line 25488
      return $$sroa$0$0$copyload | 0; //@line 25488
     }
    }
   }
  } while (0);
  $181 = ___cxa_find_matching_catch_2() | 0; //@line 25493
  $$1 = $181; //@line 25495
  $$121 = tempRet0; //@line 25495
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 25497
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 25498
 ___resumeException($$1 | 0); //@line 25499
 return 0; //@line 25501
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i38 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i44 = 0, $$0$i$i34 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i40 = 0, $$pre$i4$i$i46 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $108 = 0, $109 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $123 = 0, $13 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0.0, $141 = 0, $144 = 0, $148 = 0, $15 = 0, $153 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $172 = 0, $173 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23764
 STACKTOP = STACKTOP + 240 | 0; //@line 23765
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240); //@line 23765
 $6 = sp + 200 | 0; //@line 23766
 $7 = sp + 199 | 0; //@line 23767
 $8 = sp + 198 | 0; //@line 23768
 $9 = sp + 184 | 0; //@line 23769
 $10 = sp + 172 | 0; //@line 23770
 $11 = sp + 168 | 0; //@line 23771
 $12 = sp + 8 | 0; //@line 23772
 $13 = sp + 4 | 0; //@line 23773
 $14 = sp; //@line 23774
 $15 = sp + 197 | 0; //@line 23775
 $16 = sp + 196 | 0; //@line 23776
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8); //@line 23777
 HEAP32[$10 >> 2] = 0; //@line 23778
 HEAP32[$10 + 4 >> 2] = 0; //@line 23778
 HEAP32[$10 + 8 >> 2] = 0; //@line 23778
 $$0$i$i = 0; //@line 23779
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0; //@line 23786
  $$0$i$i = $$0$i$i + 1 | 0; //@line 23788
 }
 $19 = $10 + 11 | 0; //@line 23790
 if ((HEAP8[$19 >> 0] | 0) < 0) {
  $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; //@line 23798
 } else {
  $25 = 10; //@line 23800
 }
 __THREW__ = 0; //@line 23802
 invoke_viii(14, $10 | 0, $25 | 0, 0); //@line 23803
 $26 = __THREW__; //@line 23804
 __THREW__ = 0; //@line 23804
 if ($26 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0; //@line 23807
  $$1 = $90; //@line 23809
  $$121 = tempRet0; //@line 23809
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 23814
  HEAP32[$11 >> 2] = $31; //@line 23815
  HEAP32[$13 >> 2] = $12; //@line 23816
  HEAP32[$14 >> 2] = 0; //@line 23817
  HEAP8[$15 >> 0] = 1; //@line 23818
  HEAP8[$16 >> 0] = 69; //@line 23819
  $32 = $10 + 4 | 0; //@line 23820
  $33 = $10 + 8 | 0; //@line 23821
  $$pre = HEAP32[$1 >> 2] | 0; //@line 23822
  $$018 = $31; //@line 23823
  $$pre$i$i$i = $$pre; //@line 23823
  $183 = $$pre; //@line 23823
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i40 = 0; //@line 23827
    $153 = 0; //@line 23827
    $184 = 1; //@line 23827
   } else {
    $36 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 23830
    if (($36 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 23838
     $43 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 23839
     $44 = __THREW__; //@line 23840
     __THREW__ = 0; //@line 23840
     if ($44 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $43; //@line 23845
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0; //@line 23850
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 23855
     $$pre$i$i$i40 = 0; //@line 23856
     $153 = 0; //@line 23856
     $184 = 1; //@line 23856
    } else {
     $$pre$i$i$i40 = $$pre$i$i$i; //@line 23858
     $153 = $183; //@line 23858
     $184 = 0; //@line 23858
    }
   }
   $50 = HEAP32[$2 >> 2] | 0; //@line 23861
   do {
    if (!$50) {
     label = 20; //@line 23865
    } else {
     $53 = HEAP32[$50 + 12 >> 2] | 0; //@line 23868
     if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 23876
      $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0; //@line 23877
      $61 = __THREW__; //@line 23878
      __THREW__ = 0; //@line 23878
      if ($61 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $60; //@line 23883
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0; //@line 23888
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 23893
      label = 20; //@line 23894
      break;
     } else {
      if ($184) {
       $185 = $50; //@line 23898
       break;
      } else {
       $$2 = $$018; //@line 23901
       $$pre$i4$i$i46 = $50; //@line 23901
       label = 37; //@line 23902
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 23909
    if ($184) {
     $$2 = $$018; //@line 23911
     $$pre$i4$i$i46 = 0; //@line 23911
     label = 37; //@line 23912
     break;
    } else {
     $185 = 0; //@line 23915
    }
   }
   $68 = HEAP8[$19 >> 0] | 0; //@line 23919
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $68 & 255; //@line 23923
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $72 | 0)) {
    __THREW__ = 0; //@line 23928
    invoke_viii(14, $10 | 0, $72 << 1 | 0, 0); //@line 23929
    $76 = __THREW__; //@line 23930
    __THREW__ = 0; //@line 23930
    if ($76 & 1) {
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) {
     $82 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; //@line 23941
    } else {
     $82 = 10; //@line 23943
    }
    __THREW__ = 0; //@line 23945
    invoke_viii(14, $10 | 0, $82 | 0, 0); //@line 23946
    $83 = __THREW__; //@line 23947
    __THREW__ = 0; //@line 23947
    if ($83 & 1) {
     break;
    }
    $88 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 23955
    HEAP32[$11 >> 2] = $88 + $72; //@line 23957
    $$119 = $88; //@line 23958
   } else {
    $$119 = $$018; //@line 23960
   }
   $92 = $$pre$i$i$i40 + 12 | 0; //@line 23962
   $93 = HEAP32[$92 >> 2] | 0; //@line 23963
   $94 = $$pre$i$i$i40 + 16 | 0; //@line 23964
   if (($93 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 23971
    $100 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 23972
    $101 = __THREW__; //@line 23973
    __THREW__ = 0; //@line 23973
    if ($101 & 1) {
     break;
    } else {
     $$0$i$i34 = $100; //@line 23978
    }
   } else {
    $$0$i$i34 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$93 >> 0] | 0) | 0; //@line 23983
   }
   __THREW__ = 0; //@line 23988
   $108 = invoke_iiiiiiiiiiiii(1, $$0$i$i34 & 255 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0; //@line 23989
   $109 = __THREW__; //@line 23990
   __THREW__ = 0; //@line 23990
   if ($109 & 1) {
    break;
   }
   if ($108 | 0) {
    $$2 = $$119; //@line 23997
    $$pre$i4$i$i46 = $185; //@line 23997
    label = 37; //@line 23998
    break;
   }
   $112 = HEAP32[$92 >> 2] | 0; //@line 24001
   if (($112 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 24008
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 24009
    $118 = __THREW__; //@line 24010
    __THREW__ = 0; //@line 24010
    if ($118 & 1) {
     break;
    } else {
     $$018 = $$119; //@line 24015
     $$pre$i$i$i = $$pre$i$i$i40; //@line 24015
     $183 = $153; //@line 24015
     continue;
    }
   } else {
    HEAP32[$92 >> 2] = $112 + 1; //@line 24020
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$112 >> 0] | 0) | 0; //@line 24022
    $$018 = $$119; //@line 24023
    $$pre$i$i$i = $$pre$i$i$i40; //@line 24023
    $183 = $153; //@line 24023
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $123 = HEAP8[$9 + 11 >> 0] | 0; //@line 24030
    if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($123 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $123 & 255) | 0) == 0)) {
     $132 = HEAP32[$13 >> 2] | 0; //@line 24041
     if (($132 - $12 | 0) < 160) {
      $137 = HEAP32[$14 >> 2] | 0; //@line 24047
      HEAP32[$13 >> 2] = $132 + 4; //@line 24049
      HEAP32[$132 >> 2] = $137; //@line 24050
     }
    }
    __THREW__ = 0; //@line 24054
    $140 = +invoke_diii(1, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0); //@line 24055
    $141 = __THREW__; //@line 24056
    __THREW__ = 0; //@line 24056
    if (!($141 & 1)) {
     HEAPF64[$5 >> 3] = $140; //@line 24059
     __THREW__ = 0; //@line 24061
     invoke_viiii(21, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0); //@line 24062
     $144 = __THREW__; //@line 24063
     __THREW__ = 0; //@line 24063
     if (!($144 & 1)) {
      if (!$$pre$i$i$i40) {
       $186 = 1; //@line 24068
      } else {
       $148 = HEAP32[$$pre$i$i$i40 + 12 >> 2] | 0; //@line 24071
       if (($148 | 0) == (HEAP32[$$pre$i$i$i40 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 24079
        $156 = invoke_ii(HEAP32[(HEAP32[$153 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 24080
        $157 = __THREW__; //@line 24081
        __THREW__ = 0; //@line 24081
        if ($157 & 1) {
         break;
        } else {
         $$0$i$i$i$i38 = $156; //@line 24086
        }
       } else {
        $$0$i$i$i$i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$148 >> 0] | 0) | 0; //@line 24091
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 24096
        $186 = 1; //@line 24097
       } else {
        $186 = 0; //@line 24099
       }
      }
      do {
       if (!$$pre$i4$i$i46) {
        label = 54; //@line 24105
       } else {
        $165 = HEAP32[$$pre$i4$i$i46 + 12 >> 2] | 0; //@line 24108
        if (($165 | 0) == (HEAP32[$$pre$i4$i$i46 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 24116
         $172 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i46 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i46 | 0) | 0; //@line 24117
         $173 = __THREW__; //@line 24118
         __THREW__ = 0; //@line 24118
         if ($173 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i44 = $172; //@line 24123
         }
        } else {
         $$0$i$i2$i$i44 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$165 >> 0] | 0) | 0; //@line 24128
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i44, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 24133
         label = 54; //@line 24134
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56; //@line 24140
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($186) {
        label = 56; //@line 24148
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 24154
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 24156
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 24157
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 24158
      STACKTOP = sp; //@line 24159
      return $$sroa$0$0$copyload | 0; //@line 24159
     }
    }
   }
  } while (0);
  $181 = ___cxa_find_matching_catch_2() | 0; //@line 24164
  $$1 = $181; //@line 24166
  $$121 = tempRet0; //@line 24166
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 24168
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 24169
 ___resumeException($$1 | 0); //@line 24170
 return 0; //@line 24172
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i38 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i44 = 0, $$0$i$i34 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i40 = 0, $$pre$i4$i$i46 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $108 = 0, $109 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $123 = 0, $13 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0.0, $141 = 0, $144 = 0, $148 = 0, $15 = 0, $153 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $172 = 0, $173 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24617
 STACKTOP = STACKTOP + 240 | 0; //@line 24618
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240); //@line 24618
 $6 = sp + 200 | 0; //@line 24619
 $7 = sp + 199 | 0; //@line 24620
 $8 = sp + 198 | 0; //@line 24621
 $9 = sp + 184 | 0; //@line 24622
 $10 = sp + 172 | 0; //@line 24623
 $11 = sp + 168 | 0; //@line 24624
 $12 = sp + 8 | 0; //@line 24625
 $13 = sp + 4 | 0; //@line 24626
 $14 = sp; //@line 24627
 $15 = sp + 197 | 0; //@line 24628
 $16 = sp + 196 | 0; //@line 24629
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8); //@line 24630
 HEAP32[$10 >> 2] = 0; //@line 24631
 HEAP32[$10 + 4 >> 2] = 0; //@line 24631
 HEAP32[$10 + 8 >> 2] = 0; //@line 24631
 $$0$i$i = 0; //@line 24632
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0; //@line 24639
  $$0$i$i = $$0$i$i + 1 | 0; //@line 24641
 }
 $19 = $10 + 11 | 0; //@line 24643
 if ((HEAP8[$19 >> 0] | 0) < 0) {
  $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; //@line 24651
 } else {
  $25 = 10; //@line 24653
 }
 __THREW__ = 0; //@line 24655
 invoke_viii(14, $10 | 0, $25 | 0, 0); //@line 24656
 $26 = __THREW__; //@line 24657
 __THREW__ = 0; //@line 24657
 if ($26 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0; //@line 24660
  $$1 = $90; //@line 24662
  $$121 = tempRet0; //@line 24662
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 24667
  HEAP32[$11 >> 2] = $31; //@line 24668
  HEAP32[$13 >> 2] = $12; //@line 24669
  HEAP32[$14 >> 2] = 0; //@line 24670
  HEAP8[$15 >> 0] = 1; //@line 24671
  HEAP8[$16 >> 0] = 69; //@line 24672
  $32 = $10 + 4 | 0; //@line 24673
  $33 = $10 + 8 | 0; //@line 24674
  $$pre = HEAP32[$1 >> 2] | 0; //@line 24675
  $$018 = $31; //@line 24676
  $$pre$i$i$i = $$pre; //@line 24676
  $183 = $$pre; //@line 24676
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i40 = 0; //@line 24680
    $153 = 0; //@line 24680
    $184 = 1; //@line 24680
   } else {
    $36 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 24683
    if (($36 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 24691
     $43 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 24692
     $44 = __THREW__; //@line 24693
     __THREW__ = 0; //@line 24693
     if ($44 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $43; //@line 24698
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0; //@line 24703
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 24708
     $$pre$i$i$i40 = 0; //@line 24709
     $153 = 0; //@line 24709
     $184 = 1; //@line 24709
    } else {
     $$pre$i$i$i40 = $$pre$i$i$i; //@line 24711
     $153 = $183; //@line 24711
     $184 = 0; //@line 24711
    }
   }
   $50 = HEAP32[$2 >> 2] | 0; //@line 24714
   do {
    if (!$50) {
     label = 20; //@line 24718
    } else {
     $53 = HEAP32[$50 + 12 >> 2] | 0; //@line 24721
     if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 24729
      $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0; //@line 24730
      $61 = __THREW__; //@line 24731
      __THREW__ = 0; //@line 24731
      if ($61 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $60; //@line 24736
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0; //@line 24741
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 24746
      label = 20; //@line 24747
      break;
     } else {
      if ($184) {
       $185 = $50; //@line 24751
       break;
      } else {
       $$2 = $$018; //@line 24754
       $$pre$i4$i$i46 = $50; //@line 24754
       label = 37; //@line 24755
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 24762
    if ($184) {
     $$2 = $$018; //@line 24764
     $$pre$i4$i$i46 = 0; //@line 24764
     label = 37; //@line 24765
     break;
    } else {
     $185 = 0; //@line 24768
    }
   }
   $68 = HEAP8[$19 >> 0] | 0; //@line 24772
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $68 & 255; //@line 24776
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $72 | 0)) {
    __THREW__ = 0; //@line 24781
    invoke_viii(14, $10 | 0, $72 << 1 | 0, 0); //@line 24782
    $76 = __THREW__; //@line 24783
    __THREW__ = 0; //@line 24783
    if ($76 & 1) {
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) {
     $82 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; //@line 24794
    } else {
     $82 = 10; //@line 24796
    }
    __THREW__ = 0; //@line 24798
    invoke_viii(14, $10 | 0, $82 | 0, 0); //@line 24799
    $83 = __THREW__; //@line 24800
    __THREW__ = 0; //@line 24800
    if ($83 & 1) {
     break;
    }
    $88 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10; //@line 24808
    HEAP32[$11 >> 2] = $88 + $72; //@line 24810
    $$119 = $88; //@line 24811
   } else {
    $$119 = $$018; //@line 24813
   }
   $92 = $$pre$i$i$i40 + 12 | 0; //@line 24815
   $93 = HEAP32[$92 >> 2] | 0; //@line 24816
   $94 = $$pre$i$i$i40 + 16 | 0; //@line 24817
   if (($93 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 24824
    $100 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 24825
    $101 = __THREW__; //@line 24826
    __THREW__ = 0; //@line 24826
    if ($101 & 1) {
     break;
    } else {
     $$0$i$i34 = $100; //@line 24831
    }
   } else {
    $$0$i$i34 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$93 >> 0] | 0) | 0; //@line 24836
   }
   __THREW__ = 0; //@line 24841
   $108 = invoke_iiiiiiiiiiiii(1, $$0$i$i34 & 255 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0; //@line 24842
   $109 = __THREW__; //@line 24843
   __THREW__ = 0; //@line 24843
   if ($109 & 1) {
    break;
   }
   if ($108 | 0) {
    $$2 = $$119; //@line 24850
    $$pre$i4$i$i46 = $185; //@line 24850
    label = 37; //@line 24851
    break;
   }
   $112 = HEAP32[$92 >> 2] | 0; //@line 24854
   if (($112 | 0) == (HEAP32[$94 >> 2] | 0)) {
    __THREW__ = 0; //@line 24861
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i40 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 24862
    $118 = __THREW__; //@line 24863
    __THREW__ = 0; //@line 24863
    if ($118 & 1) {
     break;
    } else {
     $$018 = $$119; //@line 24868
     $$pre$i$i$i = $$pre$i$i$i40; //@line 24868
     $183 = $153; //@line 24868
     continue;
    }
   } else {
    HEAP32[$92 >> 2] = $112 + 1; //@line 24873
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$112 >> 0] | 0) | 0; //@line 24875
    $$018 = $$119; //@line 24876
    $$pre$i$i$i = $$pre$i$i$i40; //@line 24876
    $183 = $153; //@line 24876
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $123 = HEAP8[$9 + 11 >> 0] | 0; //@line 24883
    if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($123 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $123 & 255) | 0) == 0)) {
     $132 = HEAP32[$13 >> 2] | 0; //@line 24894
     if (($132 - $12 | 0) < 160) {
      $137 = HEAP32[$14 >> 2] | 0; //@line 24900
      HEAP32[$13 >> 2] = $132 + 4; //@line 24902
      HEAP32[$132 >> 2] = $137; //@line 24903
     }
    }
    __THREW__ = 0; //@line 24907
    $140 = +invoke_diii(2, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0); //@line 24908
    $141 = __THREW__; //@line 24909
    __THREW__ = 0; //@line 24909
    if (!($141 & 1)) {
     HEAPF64[$5 >> 3] = $140; //@line 24912
     __THREW__ = 0; //@line 24914
     invoke_viiii(21, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0); //@line 24915
     $144 = __THREW__; //@line 24916
     __THREW__ = 0; //@line 24916
     if (!($144 & 1)) {
      if (!$$pre$i$i$i40) {
       $186 = 1; //@line 24921
      } else {
       $148 = HEAP32[$$pre$i$i$i40 + 12 >> 2] | 0; //@line 24924
       if (($148 | 0) == (HEAP32[$$pre$i$i$i40 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 24932
        $156 = invoke_ii(HEAP32[(HEAP32[$153 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i40 | 0) | 0; //@line 24933
        $157 = __THREW__; //@line 24934
        __THREW__ = 0; //@line 24934
        if ($157 & 1) {
         break;
        } else {
         $$0$i$i$i$i38 = $156; //@line 24939
        }
       } else {
        $$0$i$i$i$i38 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$148 >> 0] | 0) | 0; //@line 24944
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i38, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 24949
        $186 = 1; //@line 24950
       } else {
        $186 = 0; //@line 24952
       }
      }
      do {
       if (!$$pre$i4$i$i46) {
        label = 54; //@line 24958
       } else {
        $165 = HEAP32[$$pre$i4$i$i46 + 12 >> 2] | 0; //@line 24961
        if (($165 | 0) == (HEAP32[$$pre$i4$i$i46 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 24969
         $172 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i46 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i46 | 0) | 0; //@line 24970
         $173 = __THREW__; //@line 24971
         __THREW__ = 0; //@line 24971
         if ($173 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i44 = $172; //@line 24976
         }
        } else {
         $$0$i$i2$i$i44 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$165 >> 0] | 0) | 0; //@line 24981
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i44, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 24986
         label = 54; //@line 24987
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56; //@line 24993
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($186) {
        label = 56; //@line 25001
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 25007
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 25009
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 25010
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 25011
      STACKTOP = sp; //@line 25012
      return $$sroa$0$0$copyload | 0; //@line 25012
     }
    }
   }
  } while (0);
  $181 = ___cxa_find_matching_catch_2() | 0; //@line 25017
  $$1 = $181; //@line 25019
  $$121 = tempRet0; //@line 25019
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 25021
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 25022
 ___resumeException($$1 | 0); //@line 25023
 return 0; //@line 25025
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $143 = 0, $147 = 0, $152 = 0, $155 = 0, $156 = 0, $164 = 0, $17 = 0, $171 = 0, $172 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 31643
 STACKTOP = STACKTOP + 304 | 0; //@line 31644
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 31644
 $6 = sp + 200 | 0; //@line 31645
 $7 = sp + 196 | 0; //@line 31646
 $8 = sp + 184 | 0; //@line 31647
 $9 = sp + 172 | 0; //@line 31648
 $10 = sp + 168 | 0; //@line 31649
 $11 = sp + 8 | 0; //@line 31650
 $12 = sp + 4 | 0; //@line 31651
 $13 = sp; //@line 31652
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 31653
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8, $3, $6, $7); //@line 31654
 HEAP32[$9 >> 2] = 0; //@line 31655
 HEAP32[$9 + 4 >> 2] = 0; //@line 31655
 HEAP32[$9 + 8 >> 2] = 0; //@line 31655
 $$0$i$i = 0; //@line 31656
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 31663
  $$0$i$i = $$0$i$i + 1 | 0; //@line 31665
 }
 $17 = $9 + 11 | 0; //@line 31667
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 31675
 } else {
  $23 = 10; //@line 31677
 }
 __THREW__ = 0; //@line 31679
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 31680
 $24 = __THREW__; //@line 31681
 __THREW__ = 0; //@line 31681
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 31684
  $$1 = $88; //@line 31686
  $$127 = tempRet0; //@line 31686
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 31691
  HEAP32[$10 >> 2] = $29; //@line 31692
  HEAP32[$12 >> 2] = $11; //@line 31693
  HEAP32[$13 >> 2] = 0; //@line 31694
  $30 = $9 + 4 | 0; //@line 31695
  $31 = $9 + 8 | 0; //@line 31696
  $$pre = HEAP32[$1 >> 2] | 0; //@line 31697
  $$024 = $29; //@line 31698
  $$pre$i$i$i = $$pre; //@line 31698
  $182 = $$pre; //@line 31698
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 31702
    $152 = 0; //@line 31702
    $183 = 1; //@line 31702
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 31705
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 31713
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 31714
     $42 = __THREW__; //@line 31715
     __THREW__ = 0; //@line 31715
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 31720
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0; //@line 31725
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 31730
     $$pre$i$i$i45 = 0; //@line 31731
     $152 = 0; //@line 31731
     $183 = 1; //@line 31731
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 31733
     $152 = $182; //@line 31733
     $183 = 0; //@line 31733
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 31736
   do {
    if (!$48) {
     label = 20; //@line 31740
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 31743
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 31751
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 31752
      $59 = __THREW__; //@line 31753
      __THREW__ = 0; //@line 31753
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 31758
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$51 >> 2] | 0) | 0; //@line 31763
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 31768
      label = 20; //@line 31769
      break;
     } else {
      if ($183) {
       $184 = $48; //@line 31773
       break;
      } else {
       $$2 = $$024; //@line 31776
       $$pre$i4$i$i51 = $48; //@line 31776
       label = 37; //@line 31777
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 31784
    if ($183) {
     $$2 = $$024; //@line 31786
     $$pre$i4$i$i51 = 0; //@line 31786
     label = 37; //@line 31787
     break;
    } else {
     $184 = 0; //@line 31790
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 31794
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 31798
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 31803
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 31804
    $74 = __THREW__; //@line 31805
    __THREW__ = 0; //@line 31805
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 31816
    } else {
     $80 = 10; //@line 31818
    }
    __THREW__ = 0; //@line 31820
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 31821
    $81 = __THREW__; //@line 31822
    __THREW__ = 0; //@line 31822
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 31830
    HEAP32[$10 >> 2] = $86 + $70; //@line 31832
    $$125 = $86; //@line 31833
   } else {
    $$125 = $$024; //@line 31835
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 31837
   $91 = HEAP32[$90 >> 2] | 0; //@line 31838
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 31839
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 31846
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 31847
    $99 = __THREW__; //@line 31848
    __THREW__ = 0; //@line 31848
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 31853
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$91 >> 2] | 0) | 0; //@line 31858
   }
   __THREW__ = 0; //@line 31861
   $104 = invoke_iiiiiiiiiii(2, $$0$i$i39 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP32[$7 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 31862
   $105 = __THREW__; //@line 31863
   __THREW__ = 0; //@line 31863
   if ($105 & 1) {
    break;
   }
   if ($104 | 0) {
    $$2 = $$125; //@line 31870
    $$pre$i4$i$i51 = $184; //@line 31870
    label = 37; //@line 31871
    break;
   }
   $108 = HEAP32[$90 >> 2] | 0; //@line 31874
   if (($108 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 31881
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 31882
    $114 = __THREW__; //@line 31883
    __THREW__ = 0; //@line 31883
    if ($114 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 31888
     $$pre$i$i$i = $$pre$i$i$i45; //@line 31888
     $182 = $152; //@line 31888
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $108 + 4; //@line 31893
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0; //@line 31895
    $$024 = $$125; //@line 31896
    $$pre$i$i$i = $$pre$i$i$i45; //@line 31896
    $182 = $152; //@line 31896
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $119 = HEAP8[$8 + 11 >> 0] | 0; //@line 31903
    if (($119 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $119 & 255) | 0) {
     $126 = HEAP32[$12 >> 2] | 0; //@line 31911
     if (($126 - $11 | 0) < 160) {
      $131 = HEAP32[$13 >> 2] | 0; //@line 31917
      HEAP32[$12 >> 2] = $126 + 4; //@line 31919
      HEAP32[$126 >> 2] = $131; //@line 31920
     }
    }
    __THREW__ = 0; //@line 31924
    $134 = invoke_iiiii(9, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 31925
    $135 = tempRet0; //@line 31926
    $136 = __THREW__; //@line 31927
    __THREW__ = 0; //@line 31927
    if (!($136 & 1)) {
     $138 = $5; //@line 31930
     HEAP32[$138 >> 2] = $134; //@line 31932
     HEAP32[$138 + 4 >> 2] = $135; //@line 31935
     __THREW__ = 0; //@line 31937
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 31938
     $143 = __THREW__; //@line 31939
     __THREW__ = 0; //@line 31939
     if (!($143 & 1)) {
      if (!$$pre$i$i$i45) {
       $185 = 1; //@line 31944
      } else {
       $147 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 31947
       if (($147 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 31955
        $155 = invoke_ii(HEAP32[(HEAP32[$152 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 31956
        $156 = __THREW__; //@line 31957
        __THREW__ = 0; //@line 31957
        if ($156 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $155; //@line 31962
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$147 >> 2] | 0) | 0; //@line 31967
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 31972
        $185 = 1; //@line 31973
       } else {
        $185 = 0; //@line 31975
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 31981
       } else {
        $164 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 31984
        if (($164 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 31992
         $171 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 31993
         $172 = __THREW__; //@line 31994
         __THREW__ = 0; //@line 31994
         if ($172 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $171; //@line 31999
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$164 >> 2] | 0) | 0; //@line 32004
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 32009
         label = 54; //@line 32010
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56; //@line 32016
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($185) {
        label = 56; //@line 32024
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 32030
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 32032
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 32033
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 32034
      STACKTOP = sp; //@line 32035
      return $$sroa$0$0$copyload | 0; //@line 32035
     }
    }
   }
  } while (0);
  $180 = ___cxa_find_matching_catch_2() | 0; //@line 32040
  $$1 = $180; //@line 32042
  $$127 = tempRet0; //@line 32042
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 32044
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 32045
 ___resumeException($$1 | 0); //@line 32046
 return 0; //@line 32048
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $143 = 0, $147 = 0, $152 = 0, $155 = 0, $156 = 0, $164 = 0, $17 = 0, $171 = 0, $172 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 33381
 STACKTOP = STACKTOP + 304 | 0; //@line 33382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 33382
 $6 = sp + 200 | 0; //@line 33383
 $7 = sp + 196 | 0; //@line 33384
 $8 = sp + 184 | 0; //@line 33385
 $9 = sp + 172 | 0; //@line 33386
 $10 = sp + 168 | 0; //@line 33387
 $11 = sp + 8 | 0; //@line 33388
 $12 = sp + 4 | 0; //@line 33389
 $13 = sp; //@line 33390
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 33391
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8, $3, $6, $7); //@line 33392
 HEAP32[$9 >> 2] = 0; //@line 33393
 HEAP32[$9 + 4 >> 2] = 0; //@line 33393
 HEAP32[$9 + 8 >> 2] = 0; //@line 33393
 $$0$i$i = 0; //@line 33394
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 33401
  $$0$i$i = $$0$i$i + 1 | 0; //@line 33403
 }
 $17 = $9 + 11 | 0; //@line 33405
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 33413
 } else {
  $23 = 10; //@line 33415
 }
 __THREW__ = 0; //@line 33417
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 33418
 $24 = __THREW__; //@line 33419
 __THREW__ = 0; //@line 33419
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 33422
  $$1 = $88; //@line 33424
  $$127 = tempRet0; //@line 33424
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 33429
  HEAP32[$10 >> 2] = $29; //@line 33430
  HEAP32[$12 >> 2] = $11; //@line 33431
  HEAP32[$13 >> 2] = 0; //@line 33432
  $30 = $9 + 4 | 0; //@line 33433
  $31 = $9 + 8 | 0; //@line 33434
  $$pre = HEAP32[$1 >> 2] | 0; //@line 33435
  $$024 = $29; //@line 33436
  $$pre$i$i$i = $$pre; //@line 33436
  $182 = $$pre; //@line 33436
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 33440
    $152 = 0; //@line 33440
    $183 = 1; //@line 33440
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 33443
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 33451
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 33452
     $42 = __THREW__; //@line 33453
     __THREW__ = 0; //@line 33453
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 33458
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0; //@line 33463
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 33468
     $$pre$i$i$i45 = 0; //@line 33469
     $152 = 0; //@line 33469
     $183 = 1; //@line 33469
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 33471
     $152 = $182; //@line 33471
     $183 = 0; //@line 33471
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 33474
   do {
    if (!$48) {
     label = 20; //@line 33478
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 33481
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 33489
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 33490
      $59 = __THREW__; //@line 33491
      __THREW__ = 0; //@line 33491
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 33496
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$51 >> 2] | 0) | 0; //@line 33501
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 33506
      label = 20; //@line 33507
      break;
     } else {
      if ($183) {
       $184 = $48; //@line 33511
       break;
      } else {
       $$2 = $$024; //@line 33514
       $$pre$i4$i$i51 = $48; //@line 33514
       label = 37; //@line 33515
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 33522
    if ($183) {
     $$2 = $$024; //@line 33524
     $$pre$i4$i$i51 = 0; //@line 33524
     label = 37; //@line 33525
     break;
    } else {
     $184 = 0; //@line 33528
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 33532
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 33536
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 33541
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 33542
    $74 = __THREW__; //@line 33543
    __THREW__ = 0; //@line 33543
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 33554
    } else {
     $80 = 10; //@line 33556
    }
    __THREW__ = 0; //@line 33558
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 33559
    $81 = __THREW__; //@line 33560
    __THREW__ = 0; //@line 33560
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 33568
    HEAP32[$10 >> 2] = $86 + $70; //@line 33570
    $$125 = $86; //@line 33571
   } else {
    $$125 = $$024; //@line 33573
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 33575
   $91 = HEAP32[$90 >> 2] | 0; //@line 33576
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 33577
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 33584
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 33585
    $99 = __THREW__; //@line 33586
    __THREW__ = 0; //@line 33586
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 33591
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$91 >> 2] | 0) | 0; //@line 33596
   }
   __THREW__ = 0; //@line 33599
   $104 = invoke_iiiiiiiiiii(2, $$0$i$i39 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP32[$7 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 33600
   $105 = __THREW__; //@line 33601
   __THREW__ = 0; //@line 33601
   if ($105 & 1) {
    break;
   }
   if ($104 | 0) {
    $$2 = $$125; //@line 33608
    $$pre$i4$i$i51 = $184; //@line 33608
    label = 37; //@line 33609
    break;
   }
   $108 = HEAP32[$90 >> 2] | 0; //@line 33612
   if (($108 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 33619
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 33620
    $114 = __THREW__; //@line 33621
    __THREW__ = 0; //@line 33621
    if ($114 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 33626
     $$pre$i$i$i = $$pre$i$i$i45; //@line 33626
     $182 = $152; //@line 33626
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $108 + 4; //@line 33631
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0; //@line 33633
    $$024 = $$125; //@line 33634
    $$pre$i$i$i = $$pre$i$i$i45; //@line 33634
    $182 = $152; //@line 33634
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $119 = HEAP8[$8 + 11 >> 0] | 0; //@line 33641
    if (($119 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $119 & 255) | 0) {
     $126 = HEAP32[$12 >> 2] | 0; //@line 33649
     if (($126 - $11 | 0) < 160) {
      $131 = HEAP32[$13 >> 2] | 0; //@line 33655
      HEAP32[$12 >> 2] = $126 + 4; //@line 33657
      HEAP32[$126 >> 2] = $131; //@line 33658
     }
    }
    __THREW__ = 0; //@line 33662
    $134 = invoke_iiiii(13, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 33663
    $135 = tempRet0; //@line 33664
    $136 = __THREW__; //@line 33665
    __THREW__ = 0; //@line 33665
    if (!($136 & 1)) {
     $138 = $5; //@line 33668
     HEAP32[$138 >> 2] = $134; //@line 33670
     HEAP32[$138 + 4 >> 2] = $135; //@line 33673
     __THREW__ = 0; //@line 33675
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 33676
     $143 = __THREW__; //@line 33677
     __THREW__ = 0; //@line 33677
     if (!($143 & 1)) {
      if (!$$pre$i$i$i45) {
       $185 = 1; //@line 33682
      } else {
       $147 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 33685
       if (($147 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 33693
        $155 = invoke_ii(HEAP32[(HEAP32[$152 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 33694
        $156 = __THREW__; //@line 33695
        __THREW__ = 0; //@line 33695
        if ($156 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $155; //@line 33700
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$147 >> 2] | 0) | 0; //@line 33705
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 33710
        $185 = 1; //@line 33711
       } else {
        $185 = 0; //@line 33713
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 33719
       } else {
        $164 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 33722
        if (($164 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 33730
         $171 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 33731
         $172 = __THREW__; //@line 33732
         __THREW__ = 0; //@line 33732
         if ($172 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $171; //@line 33737
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$164 >> 2] | 0) | 0; //@line 33742
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 33747
         label = 54; //@line 33748
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56; //@line 33754
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($185) {
        label = 56; //@line 33762
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 33768
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 33770
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 33771
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 33772
      STACKTOP = sp; //@line 33773
      return $$sroa$0$0$copyload | 0; //@line 33773
     }
    }
   }
  } while (0);
  $180 = ___cxa_find_matching_catch_2() | 0; //@line 33778
  $$1 = $180; //@line 33780
  $$127 = tempRet0; //@line 33780
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 33782
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 33783
 ___resumeException($$1 | 0); //@line 33784
 return 0; //@line 33786
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $144 = 0, $148 = 0, $153 = 0, $156 = 0, $157 = 0, $165 = 0, $17 = 0, $172 = 0, $173 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25569
 STACKTOP = STACKTOP + 224 | 0; //@line 25570
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 25570
 $6 = sp + 198 | 0; //@line 25571
 $7 = sp + 196 | 0; //@line 25572
 $8 = sp + 184 | 0; //@line 25573
 $9 = sp + 172 | 0; //@line 25574
 $10 = sp + 168 | 0; //@line 25575
 $11 = sp + 8 | 0; //@line 25576
 $12 = sp + 4 | 0; //@line 25577
 $13 = sp; //@line 25578
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 25579
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8, $3, $6, $7); //@line 25580
 HEAP32[$9 >> 2] = 0; //@line 25581
 HEAP32[$9 + 4 >> 2] = 0; //@line 25581
 HEAP32[$9 + 8 >> 2] = 0; //@line 25581
 $$0$i$i = 0; //@line 25582
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 25589
  $$0$i$i = $$0$i$i + 1 | 0; //@line 25591
 }
 $17 = $9 + 11 | 0; //@line 25593
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 25601
 } else {
  $23 = 10; //@line 25603
 }
 __THREW__ = 0; //@line 25605
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 25606
 $24 = __THREW__; //@line 25607
 __THREW__ = 0; //@line 25607
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 25610
  $$1 = $88; //@line 25612
  $$127 = tempRet0; //@line 25612
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 25617
  HEAP32[$10 >> 2] = $29; //@line 25618
  HEAP32[$12 >> 2] = $11; //@line 25619
  HEAP32[$13 >> 2] = 0; //@line 25620
  $30 = $9 + 4 | 0; //@line 25621
  $31 = $9 + 8 | 0; //@line 25622
  $$pre = HEAP32[$1 >> 2] | 0; //@line 25623
  $$024 = $29; //@line 25624
  $$pre$i$i$i = $$pre; //@line 25624
  $183 = $$pre; //@line 25624
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 25628
    $153 = 0; //@line 25628
    $184 = 1; //@line 25628
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 25631
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 25639
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 25640
     $42 = __THREW__; //@line 25641
     __THREW__ = 0; //@line 25641
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 25646
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0; //@line 25651
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 25656
     $$pre$i$i$i45 = 0; //@line 25657
     $153 = 0; //@line 25657
     $184 = 1; //@line 25657
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 25659
     $153 = $183; //@line 25659
     $184 = 0; //@line 25659
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 25662
   do {
    if (!$48) {
     label = 20; //@line 25666
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 25669
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 25677
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 25678
      $59 = __THREW__; //@line 25679
      __THREW__ = 0; //@line 25679
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 25684
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$51 >> 0] | 0) | 0; //@line 25689
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 25694
      label = 20; //@line 25695
      break;
     } else {
      if ($184) {
       $185 = $48; //@line 25699
       break;
      } else {
       $$2 = $$024; //@line 25702
       $$pre$i4$i$i51 = $48; //@line 25702
       label = 37; //@line 25703
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 25710
    if ($184) {
     $$2 = $$024; //@line 25712
     $$pre$i4$i$i51 = 0; //@line 25712
     label = 37; //@line 25713
     break;
    } else {
     $185 = 0; //@line 25716
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 25720
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 25724
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 25729
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 25730
    $74 = __THREW__; //@line 25731
    __THREW__ = 0; //@line 25731
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 25742
    } else {
     $80 = 10; //@line 25744
    }
    __THREW__ = 0; //@line 25746
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 25747
    $81 = __THREW__; //@line 25748
    __THREW__ = 0; //@line 25748
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 25756
    HEAP32[$10 >> 2] = $86 + $70; //@line 25758
    $$125 = $86; //@line 25759
   } else {
    $$125 = $$024; //@line 25761
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 25763
   $91 = HEAP32[$90 >> 2] | 0; //@line 25764
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 25765
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 25772
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 25773
    $99 = __THREW__; //@line 25774
    __THREW__ = 0; //@line 25774
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 25779
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$91 >> 0] | 0) | 0; //@line 25784
   }
   __THREW__ = 0; //@line 25788
   $105 = invoke_iiiiiiiiiii(1, $$0$i$i39 & 255 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP8[$7 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 25789
   $106 = __THREW__; //@line 25790
   __THREW__ = 0; //@line 25790
   if ($106 & 1) {
    break;
   }
   if ($105 | 0) {
    $$2 = $$125; //@line 25797
    $$pre$i4$i$i51 = $185; //@line 25797
    label = 37; //@line 25798
    break;
   }
   $109 = HEAP32[$90 >> 2] | 0; //@line 25801
   if (($109 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 25808
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 25809
    $115 = __THREW__; //@line 25810
    __THREW__ = 0; //@line 25810
    if ($115 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 25815
     $$pre$i$i$i = $$pre$i$i$i45; //@line 25815
     $183 = $153; //@line 25815
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $109 + 1; //@line 25820
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$109 >> 0] | 0) | 0; //@line 25822
    $$024 = $$125; //@line 25823
    $$pre$i$i$i = $$pre$i$i$i45; //@line 25823
    $183 = $153; //@line 25823
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $120 = HEAP8[$8 + 11 >> 0] | 0; //@line 25830
    if (($120 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $120 & 255) | 0) {
     $127 = HEAP32[$12 >> 2] | 0; //@line 25838
     if (($127 - $11 | 0) < 160) {
      $132 = HEAP32[$13 >> 2] | 0; //@line 25844
      HEAP32[$12 >> 2] = $127 + 4; //@line 25846
      HEAP32[$127 >> 2] = $132; //@line 25847
     }
    }
    __THREW__ = 0; //@line 25851
    $135 = invoke_iiiii(9, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 25852
    $136 = tempRet0; //@line 25853
    $137 = __THREW__; //@line 25854
    __THREW__ = 0; //@line 25854
    if (!($137 & 1)) {
     $139 = $5; //@line 25857
     HEAP32[$139 >> 2] = $135; //@line 25859
     HEAP32[$139 + 4 >> 2] = $136; //@line 25862
     __THREW__ = 0; //@line 25864
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 25865
     $144 = __THREW__; //@line 25866
     __THREW__ = 0; //@line 25866
     if (!($144 & 1)) {
      if (!$$pre$i$i$i45) {
       $186 = 1; //@line 25871
      } else {
       $148 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 25874
       if (($148 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 25882
        $156 = invoke_ii(HEAP32[(HEAP32[$153 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 25883
        $157 = __THREW__; //@line 25884
        __THREW__ = 0; //@line 25884
        if ($157 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $156; //@line 25889
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$148 >> 0] | 0) | 0; //@line 25894
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 25899
        $186 = 1; //@line 25900
       } else {
        $186 = 0; //@line 25902
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 25908
       } else {
        $165 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 25911
        if (($165 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 25919
         $172 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 25920
         $173 = __THREW__; //@line 25921
         __THREW__ = 0; //@line 25921
         if ($173 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $172; //@line 25926
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$165 >> 0] | 0) | 0; //@line 25931
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 25936
         label = 54; //@line 25937
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56; //@line 25943
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($186) {
        label = 56; //@line 25951
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 25957
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 25959
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 25960
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 25961
      STACKTOP = sp; //@line 25962
      return $$sroa$0$0$copyload | 0; //@line 25962
     }
    }
   }
  } while (0);
  $181 = ___cxa_find_matching_catch_2() | 0; //@line 25967
  $$1 = $181; //@line 25969
  $$127 = tempRet0; //@line 25969
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 25971
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 25972
 ___resumeException($$1 | 0); //@line 25973
 return 0; //@line 25975
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $144 = 0, $148 = 0, $153 = 0, $156 = 0, $157 = 0, $165 = 0, $17 = 0, $172 = 0, $173 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27599
 STACKTOP = STACKTOP + 224 | 0; //@line 27600
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 27600
 $6 = sp + 198 | 0; //@line 27601
 $7 = sp + 196 | 0; //@line 27602
 $8 = sp + 184 | 0; //@line 27603
 $9 = sp + 172 | 0; //@line 27604
 $10 = sp + 168 | 0; //@line 27605
 $11 = sp + 8 | 0; //@line 27606
 $12 = sp + 4 | 0; //@line 27607
 $13 = sp; //@line 27608
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 27609
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8, $3, $6, $7); //@line 27610
 HEAP32[$9 >> 2] = 0; //@line 27611
 HEAP32[$9 + 4 >> 2] = 0; //@line 27611
 HEAP32[$9 + 8 >> 2] = 0; //@line 27611
 $$0$i$i = 0; //@line 27612
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 27619
  $$0$i$i = $$0$i$i + 1 | 0; //@line 27621
 }
 $17 = $9 + 11 | 0; //@line 27623
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 27631
 } else {
  $23 = 10; //@line 27633
 }
 __THREW__ = 0; //@line 27635
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 27636
 $24 = __THREW__; //@line 27637
 __THREW__ = 0; //@line 27637
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 27640
  $$1 = $88; //@line 27642
  $$127 = tempRet0; //@line 27642
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 27647
  HEAP32[$10 >> 2] = $29; //@line 27648
  HEAP32[$12 >> 2] = $11; //@line 27649
  HEAP32[$13 >> 2] = 0; //@line 27650
  $30 = $9 + 4 | 0; //@line 27651
  $31 = $9 + 8 | 0; //@line 27652
  $$pre = HEAP32[$1 >> 2] | 0; //@line 27653
  $$024 = $29; //@line 27654
  $$pre$i$i$i = $$pre; //@line 27654
  $183 = $$pre; //@line 27654
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 27658
    $153 = 0; //@line 27658
    $184 = 1; //@line 27658
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 27661
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 27669
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 27670
     $42 = __THREW__; //@line 27671
     __THREW__ = 0; //@line 27671
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 27676
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0; //@line 27681
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 27686
     $$pre$i$i$i45 = 0; //@line 27687
     $153 = 0; //@line 27687
     $184 = 1; //@line 27687
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 27689
     $153 = $183; //@line 27689
     $184 = 0; //@line 27689
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 27692
   do {
    if (!$48) {
     label = 20; //@line 27696
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 27699
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 27707
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 27708
      $59 = __THREW__; //@line 27709
      __THREW__ = 0; //@line 27709
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 27714
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$51 >> 0] | 0) | 0; //@line 27719
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 27724
      label = 20; //@line 27725
      break;
     } else {
      if ($184) {
       $185 = $48; //@line 27729
       break;
      } else {
       $$2 = $$024; //@line 27732
       $$pre$i4$i$i51 = $48; //@line 27732
       label = 37; //@line 27733
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 27740
    if ($184) {
     $$2 = $$024; //@line 27742
     $$pre$i4$i$i51 = 0; //@line 27742
     label = 37; //@line 27743
     break;
    } else {
     $185 = 0; //@line 27746
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 27750
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 27754
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 27759
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 27760
    $74 = __THREW__; //@line 27761
    __THREW__ = 0; //@line 27761
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 27772
    } else {
     $80 = 10; //@line 27774
    }
    __THREW__ = 0; //@line 27776
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 27777
    $81 = __THREW__; //@line 27778
    __THREW__ = 0; //@line 27778
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 27786
    HEAP32[$10 >> 2] = $86 + $70; //@line 27788
    $$125 = $86; //@line 27789
   } else {
    $$125 = $$024; //@line 27791
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 27793
   $91 = HEAP32[$90 >> 2] | 0; //@line 27794
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 27795
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 27802
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 27803
    $99 = __THREW__; //@line 27804
    __THREW__ = 0; //@line 27804
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 27809
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$91 >> 0] | 0) | 0; //@line 27814
   }
   __THREW__ = 0; //@line 27818
   $105 = invoke_iiiiiiiiiii(1, $$0$i$i39 & 255 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP8[$7 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 27819
   $106 = __THREW__; //@line 27820
   __THREW__ = 0; //@line 27820
   if ($106 & 1) {
    break;
   }
   if ($105 | 0) {
    $$2 = $$125; //@line 27827
    $$pre$i4$i$i51 = $185; //@line 27827
    label = 37; //@line 27828
    break;
   }
   $109 = HEAP32[$90 >> 2] | 0; //@line 27831
   if (($109 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 27838
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 27839
    $115 = __THREW__; //@line 27840
    __THREW__ = 0; //@line 27840
    if ($115 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 27845
     $$pre$i$i$i = $$pre$i$i$i45; //@line 27845
     $183 = $153; //@line 27845
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $109 + 1; //@line 27850
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$109 >> 0] | 0) | 0; //@line 27852
    $$024 = $$125; //@line 27853
    $$pre$i$i$i = $$pre$i$i$i45; //@line 27853
    $183 = $153; //@line 27853
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $120 = HEAP8[$8 + 11 >> 0] | 0; //@line 27860
    if (($120 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $120 & 255) | 0) {
     $127 = HEAP32[$12 >> 2] | 0; //@line 27868
     if (($127 - $11 | 0) < 160) {
      $132 = HEAP32[$13 >> 2] | 0; //@line 27874
      HEAP32[$12 >> 2] = $127 + 4; //@line 27876
      HEAP32[$127 >> 2] = $132; //@line 27877
     }
    }
    __THREW__ = 0; //@line 27881
    $135 = invoke_iiiii(13, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 27882
    $136 = tempRet0; //@line 27883
    $137 = __THREW__; //@line 27884
    __THREW__ = 0; //@line 27884
    if (!($137 & 1)) {
     $139 = $5; //@line 27887
     HEAP32[$139 >> 2] = $135; //@line 27889
     HEAP32[$139 + 4 >> 2] = $136; //@line 27892
     __THREW__ = 0; //@line 27894
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 27895
     $144 = __THREW__; //@line 27896
     __THREW__ = 0; //@line 27896
     if (!($144 & 1)) {
      if (!$$pre$i$i$i45) {
       $186 = 1; //@line 27901
      } else {
       $148 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 27904
       if (($148 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 27912
        $156 = invoke_ii(HEAP32[(HEAP32[$153 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 27913
        $157 = __THREW__; //@line 27914
        __THREW__ = 0; //@line 27914
        if ($157 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $156; //@line 27919
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$148 >> 0] | 0) | 0; //@line 27924
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 27929
        $186 = 1; //@line 27930
       } else {
        $186 = 0; //@line 27932
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 27938
       } else {
        $165 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 27941
        if (($165 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 27949
         $172 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 27950
         $173 = __THREW__; //@line 27951
         __THREW__ = 0; //@line 27951
         if ($173 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $172; //@line 27956
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$165 >> 0] | 0) | 0; //@line 27961
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 27966
         label = 54; //@line 27967
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56; //@line 27973
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($186) {
        label = 56; //@line 27981
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 27987
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 27989
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 27990
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 27991
      STACKTOP = sp; //@line 27992
      return $$sroa$0$0$copyload | 0; //@line 27992
     }
    }
   }
  } while (0);
  $181 = ___cxa_find_matching_catch_2() | 0; //@line 27997
  $$1 = $181; //@line 27999
  $$127 = tempRet0; //@line 27999
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 28001
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 28002
 ___resumeException($$1 | 0); //@line 28003
 return 0; //@line 28005
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $150 = 0, $151 = 0, $159 = 0, $166 = 0, $167 = 0, $17 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 32962
 STACKTOP = STACKTOP + 304 | 0; //@line 32963
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 32963
 $6 = sp + 200 | 0; //@line 32964
 $7 = sp + 196 | 0; //@line 32965
 $8 = sp + 184 | 0; //@line 32966
 $9 = sp + 172 | 0; //@line 32967
 $10 = sp + 168 | 0; //@line 32968
 $11 = sp + 8 | 0; //@line 32969
 $12 = sp + 4 | 0; //@line 32970
 $13 = sp; //@line 32971
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 32972
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8, $3, $6, $7); //@line 32973
 HEAP32[$9 >> 2] = 0; //@line 32974
 HEAP32[$9 + 4 >> 2] = 0; //@line 32974
 HEAP32[$9 + 8 >> 2] = 0; //@line 32974
 $$0$i$i = 0; //@line 32975
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 32982
  $$0$i$i = $$0$i$i + 1 | 0; //@line 32984
 }
 $17 = $9 + 11 | 0; //@line 32986
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 32994
 } else {
  $23 = 10; //@line 32996
 }
 __THREW__ = 0; //@line 32998
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 32999
 $24 = __THREW__; //@line 33000
 __THREW__ = 0; //@line 33000
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 33003
  $$1 = $88; //@line 33005
  $$127 = tempRet0; //@line 33005
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 33010
  HEAP32[$10 >> 2] = $29; //@line 33011
  HEAP32[$12 >> 2] = $11; //@line 33012
  HEAP32[$13 >> 2] = 0; //@line 33013
  $30 = $9 + 4 | 0; //@line 33014
  $31 = $9 + 8 | 0; //@line 33015
  $$pre = HEAP32[$1 >> 2] | 0; //@line 33016
  $$024 = $29; //@line 33017
  $$pre$i$i$i = $$pre; //@line 33017
  $177 = $$pre; //@line 33017
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 33021
    $147 = 0; //@line 33021
    $178 = 1; //@line 33021
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 33024
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 33032
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 33033
     $42 = __THREW__; //@line 33034
     __THREW__ = 0; //@line 33034
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 33039
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0; //@line 33044
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 33049
     $$pre$i$i$i45 = 0; //@line 33050
     $147 = 0; //@line 33050
     $178 = 1; //@line 33050
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 33052
     $147 = $177; //@line 33052
     $178 = 0; //@line 33052
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 33055
   do {
    if (!$48) {
     label = 20; //@line 33059
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 33062
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 33070
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 33071
      $59 = __THREW__; //@line 33072
      __THREW__ = 0; //@line 33072
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 33077
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$51 >> 2] | 0) | 0; //@line 33082
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 33087
      label = 20; //@line 33088
      break;
     } else {
      if ($178) {
       $179 = $48; //@line 33092
       break;
      } else {
       $$2 = $$024; //@line 33095
       $$pre$i4$i$i51 = $48; //@line 33095
       label = 37; //@line 33096
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 33103
    if ($178) {
     $$2 = $$024; //@line 33105
     $$pre$i4$i$i51 = 0; //@line 33105
     label = 37; //@line 33106
     break;
    } else {
     $179 = 0; //@line 33109
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 33113
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 33117
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 33122
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 33123
    $74 = __THREW__; //@line 33124
    __THREW__ = 0; //@line 33124
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 33135
    } else {
     $80 = 10; //@line 33137
    }
    __THREW__ = 0; //@line 33139
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 33140
    $81 = __THREW__; //@line 33141
    __THREW__ = 0; //@line 33141
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 33149
    HEAP32[$10 >> 2] = $86 + $70; //@line 33151
    $$125 = $86; //@line 33152
   } else {
    $$125 = $$024; //@line 33154
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 33156
   $91 = HEAP32[$90 >> 2] | 0; //@line 33157
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 33158
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 33165
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 33166
    $99 = __THREW__; //@line 33167
    __THREW__ = 0; //@line 33167
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 33172
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$91 >> 2] | 0) | 0; //@line 33177
   }
   __THREW__ = 0; //@line 33180
   $104 = invoke_iiiiiiiiiii(2, $$0$i$i39 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP32[$7 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 33181
   $105 = __THREW__; //@line 33182
   __THREW__ = 0; //@line 33182
   if ($105 & 1) {
    break;
   }
   if ($104 | 0) {
    $$2 = $$125; //@line 33189
    $$pre$i4$i$i51 = $179; //@line 33189
    label = 37; //@line 33190
    break;
   }
   $108 = HEAP32[$90 >> 2] | 0; //@line 33193
   if (($108 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 33200
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 33201
    $114 = __THREW__; //@line 33202
    __THREW__ = 0; //@line 33202
    if ($114 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 33207
     $$pre$i$i$i = $$pre$i$i$i45; //@line 33207
     $177 = $147; //@line 33207
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $108 + 4; //@line 33212
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0; //@line 33214
    $$024 = $$125; //@line 33215
    $$pre$i$i$i = $$pre$i$i$i45; //@line 33215
    $177 = $147; //@line 33215
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $119 = HEAP8[$8 + 11 >> 0] | 0; //@line 33222
    if (($119 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $119 & 255) | 0) {
     $126 = HEAP32[$12 >> 2] | 0; //@line 33230
     if (($126 - $11 | 0) < 160) {
      $131 = HEAP32[$13 >> 2] | 0; //@line 33236
      HEAP32[$12 >> 2] = $126 + 4; //@line 33238
      HEAP32[$126 >> 2] = $131; //@line 33239
     }
    }
    __THREW__ = 0; //@line 33243
    $134 = invoke_iiiii(12, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 33244
    $135 = __THREW__; //@line 33245
    __THREW__ = 0; //@line 33245
    if (!($135 & 1)) {
     HEAP16[$5 >> 1] = $134; //@line 33248
     __THREW__ = 0; //@line 33250
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 33251
     $138 = __THREW__; //@line 33252
     __THREW__ = 0; //@line 33252
     if (!($138 & 1)) {
      if (!$$pre$i$i$i45) {
       $180 = 1; //@line 33257
      } else {
       $142 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 33260
       if (($142 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 33268
        $150 = invoke_ii(HEAP32[(HEAP32[$147 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 33269
        $151 = __THREW__; //@line 33270
        __THREW__ = 0; //@line 33270
        if ($151 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $150; //@line 33275
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0; //@line 33280
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 33285
        $180 = 1; //@line 33286
       } else {
        $180 = 0; //@line 33288
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 33294
       } else {
        $159 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 33297
        if (($159 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 33305
         $166 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 33306
         $167 = __THREW__; //@line 33307
         __THREW__ = 0; //@line 33307
         if ($167 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $166; //@line 33312
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$159 >> 2] | 0) | 0; //@line 33317
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 33322
         label = 54; //@line 33323
         break;
        } else {
         if ($180) {
          break;
         } else {
          label = 56; //@line 33329
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($180) {
        label = 56; //@line 33337
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 33343
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 33345
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 33346
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 33347
      STACKTOP = sp; //@line 33348
      return $$sroa$0$0$copyload | 0; //@line 33348
     }
    }
   }
  } while (0);
  $175 = ___cxa_find_matching_catch_2() | 0; //@line 33353
  $$1 = $175; //@line 33355
  $$127 = tempRet0; //@line 33355
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 33357
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 33358
 ___resumeException($$1 | 0); //@line 33359
 return 0; //@line 33361
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $150 = 0, $151 = 0, $159 = 0, $166 = 0, $167 = 0, $17 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 32126
 STACKTOP = STACKTOP + 304 | 0; //@line 32127
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 32127
 $6 = sp + 200 | 0; //@line 32128
 $7 = sp + 196 | 0; //@line 32129
 $8 = sp + 184 | 0; //@line 32130
 $9 = sp + 172 | 0; //@line 32131
 $10 = sp + 168 | 0; //@line 32132
 $11 = sp + 8 | 0; //@line 32133
 $12 = sp + 4 | 0; //@line 32134
 $13 = sp; //@line 32135
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 32136
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8, $3, $6, $7); //@line 32137
 HEAP32[$9 >> 2] = 0; //@line 32138
 HEAP32[$9 + 4 >> 2] = 0; //@line 32138
 HEAP32[$9 + 8 >> 2] = 0; //@line 32138
 $$0$i$i = 0; //@line 32139
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 32146
  $$0$i$i = $$0$i$i + 1 | 0; //@line 32148
 }
 $17 = $9 + 11 | 0; //@line 32150
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 32158
 } else {
  $23 = 10; //@line 32160
 }
 __THREW__ = 0; //@line 32162
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 32163
 $24 = __THREW__; //@line 32164
 __THREW__ = 0; //@line 32164
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 32167
  $$1 = $88; //@line 32169
  $$127 = tempRet0; //@line 32169
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 32174
  HEAP32[$10 >> 2] = $29; //@line 32175
  HEAP32[$12 >> 2] = $11; //@line 32176
  HEAP32[$13 >> 2] = 0; //@line 32177
  $30 = $9 + 4 | 0; //@line 32178
  $31 = $9 + 8 | 0; //@line 32179
  $$pre = HEAP32[$1 >> 2] | 0; //@line 32180
  $$024 = $29; //@line 32181
  $$pre$i$i$i = $$pre; //@line 32181
  $177 = $$pre; //@line 32181
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 32185
    $147 = 0; //@line 32185
    $178 = 1; //@line 32185
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 32188
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 32196
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 32197
     $42 = __THREW__; //@line 32198
     __THREW__ = 0; //@line 32198
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 32203
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0; //@line 32208
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 32213
     $$pre$i$i$i45 = 0; //@line 32214
     $147 = 0; //@line 32214
     $178 = 1; //@line 32214
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 32216
     $147 = $177; //@line 32216
     $178 = 0; //@line 32216
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 32219
   do {
    if (!$48) {
     label = 20; //@line 32223
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 32226
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 32234
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 32235
      $59 = __THREW__; //@line 32236
      __THREW__ = 0; //@line 32236
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 32241
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$51 >> 2] | 0) | 0; //@line 32246
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 32251
      label = 20; //@line 32252
      break;
     } else {
      if ($178) {
       $179 = $48; //@line 32256
       break;
      } else {
       $$2 = $$024; //@line 32259
       $$pre$i4$i$i51 = $48; //@line 32259
       label = 37; //@line 32260
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 32267
    if ($178) {
     $$2 = $$024; //@line 32269
     $$pre$i4$i$i51 = 0; //@line 32269
     label = 37; //@line 32270
     break;
    } else {
     $179 = 0; //@line 32273
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 32277
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 32281
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 32286
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 32287
    $74 = __THREW__; //@line 32288
    __THREW__ = 0; //@line 32288
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 32299
    } else {
     $80 = 10; //@line 32301
    }
    __THREW__ = 0; //@line 32303
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 32304
    $81 = __THREW__; //@line 32305
    __THREW__ = 0; //@line 32305
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 32313
    HEAP32[$10 >> 2] = $86 + $70; //@line 32315
    $$125 = $86; //@line 32316
   } else {
    $$125 = $$024; //@line 32318
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 32320
   $91 = HEAP32[$90 >> 2] | 0; //@line 32321
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 32322
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 32329
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 32330
    $99 = __THREW__; //@line 32331
    __THREW__ = 0; //@line 32331
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 32336
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$91 >> 2] | 0) | 0; //@line 32341
   }
   __THREW__ = 0; //@line 32344
   $104 = invoke_iiiiiiiiiii(2, $$0$i$i39 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP32[$7 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 32345
   $105 = __THREW__; //@line 32346
   __THREW__ = 0; //@line 32346
   if ($105 & 1) {
    break;
   }
   if ($104 | 0) {
    $$2 = $$125; //@line 32353
    $$pre$i4$i$i51 = $179; //@line 32353
    label = 37; //@line 32354
    break;
   }
   $108 = HEAP32[$90 >> 2] | 0; //@line 32357
   if (($108 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 32364
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 32365
    $114 = __THREW__; //@line 32366
    __THREW__ = 0; //@line 32366
    if ($114 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 32371
     $$pre$i$i$i = $$pre$i$i$i45; //@line 32371
     $177 = $147; //@line 32371
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $108 + 4; //@line 32376
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0; //@line 32378
    $$024 = $$125; //@line 32379
    $$pre$i$i$i = $$pre$i$i$i45; //@line 32379
    $177 = $147; //@line 32379
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $119 = HEAP8[$8 + 11 >> 0] | 0; //@line 32386
    if (($119 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $119 & 255) | 0) {
     $126 = HEAP32[$12 >> 2] | 0; //@line 32394
     if (($126 - $11 | 0) < 160) {
      $131 = HEAP32[$13 >> 2] | 0; //@line 32400
      HEAP32[$12 >> 2] = $126 + 4; //@line 32402
      HEAP32[$126 >> 2] = $131; //@line 32403
     }
    }
    __THREW__ = 0; //@line 32407
    $134 = invoke_iiiii(10, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 32408
    $135 = __THREW__; //@line 32409
    __THREW__ = 0; //@line 32409
    if (!($135 & 1)) {
     HEAP32[$5 >> 2] = $134; //@line 32412
     __THREW__ = 0; //@line 32414
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 32415
     $138 = __THREW__; //@line 32416
     __THREW__ = 0; //@line 32416
     if (!($138 & 1)) {
      if (!$$pre$i$i$i45) {
       $180 = 1; //@line 32421
      } else {
       $142 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 32424
       if (($142 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 32432
        $150 = invoke_ii(HEAP32[(HEAP32[$147 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 32433
        $151 = __THREW__; //@line 32434
        __THREW__ = 0; //@line 32434
        if ($151 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $150; //@line 32439
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0; //@line 32444
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 32449
        $180 = 1; //@line 32450
       } else {
        $180 = 0; //@line 32452
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 32458
       } else {
        $159 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 32461
        if (($159 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 32469
         $166 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 32470
         $167 = __THREW__; //@line 32471
         __THREW__ = 0; //@line 32471
         if ($167 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $166; //@line 32476
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$159 >> 2] | 0) | 0; //@line 32481
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 32486
         label = 54; //@line 32487
         break;
        } else {
         if ($180) {
          break;
         } else {
          label = 56; //@line 32493
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($180) {
        label = 56; //@line 32501
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 32507
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 32509
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 32510
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 32511
      STACKTOP = sp; //@line 32512
      return $$sroa$0$0$copyload | 0; //@line 32512
     }
    }
   }
  } while (0);
  $175 = ___cxa_find_matching_catch_2() | 0; //@line 32517
  $$1 = $175; //@line 32519
  $$127 = tempRet0; //@line 32519
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 32521
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 32522
 ___resumeException($$1 | 0); //@line 32523
 return 0; //@line 32525
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $150 = 0, $151 = 0, $159 = 0, $166 = 0, $167 = 0, $17 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 32544
 STACKTOP = STACKTOP + 304 | 0; //@line 32545
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 32545
 $6 = sp + 200 | 0; //@line 32546
 $7 = sp + 196 | 0; //@line 32547
 $8 = sp + 184 | 0; //@line 32548
 $9 = sp + 172 | 0; //@line 32549
 $10 = sp + 168 | 0; //@line 32550
 $11 = sp + 8 | 0; //@line 32551
 $12 = sp + 4 | 0; //@line 32552
 $13 = sp; //@line 32553
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 32554
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8, $3, $6, $7); //@line 32555
 HEAP32[$9 >> 2] = 0; //@line 32556
 HEAP32[$9 + 4 >> 2] = 0; //@line 32556
 HEAP32[$9 + 8 >> 2] = 0; //@line 32556
 $$0$i$i = 0; //@line 32557
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 32564
  $$0$i$i = $$0$i$i + 1 | 0; //@line 32566
 }
 $17 = $9 + 11 | 0; //@line 32568
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 32576
 } else {
  $23 = 10; //@line 32578
 }
 __THREW__ = 0; //@line 32580
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 32581
 $24 = __THREW__; //@line 32582
 __THREW__ = 0; //@line 32582
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 32585
  $$1 = $88; //@line 32587
  $$127 = tempRet0; //@line 32587
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 32592
  HEAP32[$10 >> 2] = $29; //@line 32593
  HEAP32[$12 >> 2] = $11; //@line 32594
  HEAP32[$13 >> 2] = 0; //@line 32595
  $30 = $9 + 4 | 0; //@line 32596
  $31 = $9 + 8 | 0; //@line 32597
  $$pre = HEAP32[$1 >> 2] | 0; //@line 32598
  $$024 = $29; //@line 32599
  $$pre$i$i$i = $$pre; //@line 32599
  $177 = $$pre; //@line 32599
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 32603
    $147 = 0; //@line 32603
    $178 = 1; //@line 32603
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 32606
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 32614
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 32615
     $42 = __THREW__; //@line 32616
     __THREW__ = 0; //@line 32616
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 32621
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0; //@line 32626
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 32631
     $$pre$i$i$i45 = 0; //@line 32632
     $147 = 0; //@line 32632
     $178 = 1; //@line 32632
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 32634
     $147 = $177; //@line 32634
     $178 = 0; //@line 32634
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 32637
   do {
    if (!$48) {
     label = 20; //@line 32641
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 32644
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 32652
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 32653
      $59 = __THREW__; //@line 32654
      __THREW__ = 0; //@line 32654
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 32659
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$51 >> 2] | 0) | 0; //@line 32664
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 32669
      label = 20; //@line 32670
      break;
     } else {
      if ($178) {
       $179 = $48; //@line 32674
       break;
      } else {
       $$2 = $$024; //@line 32677
       $$pre$i4$i$i51 = $48; //@line 32677
       label = 37; //@line 32678
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 32685
    if ($178) {
     $$2 = $$024; //@line 32687
     $$pre$i4$i$i51 = 0; //@line 32687
     label = 37; //@line 32688
     break;
    } else {
     $179 = 0; //@line 32691
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 32695
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 32699
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 32704
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 32705
    $74 = __THREW__; //@line 32706
    __THREW__ = 0; //@line 32706
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 32717
    } else {
     $80 = 10; //@line 32719
    }
    __THREW__ = 0; //@line 32721
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 32722
    $81 = __THREW__; //@line 32723
    __THREW__ = 0; //@line 32723
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 32731
    HEAP32[$10 >> 2] = $86 + $70; //@line 32733
    $$125 = $86; //@line 32734
   } else {
    $$125 = $$024; //@line 32736
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 32738
   $91 = HEAP32[$90 >> 2] | 0; //@line 32739
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 32740
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 32747
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 32748
    $99 = __THREW__; //@line 32749
    __THREW__ = 0; //@line 32749
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 32754
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$91 >> 2] | 0) | 0; //@line 32759
   }
   __THREW__ = 0; //@line 32762
   $104 = invoke_iiiiiiiiiii(2, $$0$i$i39 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP32[$7 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 32763
   $105 = __THREW__; //@line 32764
   __THREW__ = 0; //@line 32764
   if ($105 & 1) {
    break;
   }
   if ($104 | 0) {
    $$2 = $$125; //@line 32771
    $$pre$i4$i$i51 = $179; //@line 32771
    label = 37; //@line 32772
    break;
   }
   $108 = HEAP32[$90 >> 2] | 0; //@line 32775
   if (($108 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 32782
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 32783
    $114 = __THREW__; //@line 32784
    __THREW__ = 0; //@line 32784
    if ($114 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 32789
     $$pre$i$i$i = $$pre$i$i$i45; //@line 32789
     $177 = $147; //@line 32789
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $108 + 4; //@line 32794
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0; //@line 32796
    $$024 = $$125; //@line 32797
    $$pre$i$i$i = $$pre$i$i$i45; //@line 32797
    $177 = $147; //@line 32797
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $119 = HEAP8[$8 + 11 >> 0] | 0; //@line 32804
    if (($119 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $119 & 255) | 0) {
     $126 = HEAP32[$12 >> 2] | 0; //@line 32812
     if (($126 - $11 | 0) < 160) {
      $131 = HEAP32[$13 >> 2] | 0; //@line 32818
      HEAP32[$12 >> 2] = $126 + 4; //@line 32820
      HEAP32[$126 >> 2] = $131; //@line 32821
     }
    }
    __THREW__ = 0; //@line 32825
    $134 = invoke_iiiii(11, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 32826
    $135 = __THREW__; //@line 32827
    __THREW__ = 0; //@line 32827
    if (!($135 & 1)) {
     HEAP32[$5 >> 2] = $134; //@line 32830
     __THREW__ = 0; //@line 32832
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 32833
     $138 = __THREW__; //@line 32834
     __THREW__ = 0; //@line 32834
     if (!($138 & 1)) {
      if (!$$pre$i$i$i45) {
       $180 = 1; //@line 32839
      } else {
       $142 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 32842
       if (($142 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 32850
        $150 = invoke_ii(HEAP32[(HEAP32[$147 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 32851
        $151 = __THREW__; //@line 32852
        __THREW__ = 0; //@line 32852
        if ($151 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $150; //@line 32857
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0; //@line 32862
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 32867
        $180 = 1; //@line 32868
       } else {
        $180 = 0; //@line 32870
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 32876
       } else {
        $159 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 32879
        if (($159 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 32887
         $166 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 32888
         $167 = __THREW__; //@line 32889
         __THREW__ = 0; //@line 32889
         if ($167 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $166; //@line 32894
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$159 >> 2] | 0) | 0; //@line 32899
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 32904
         label = 54; //@line 32905
         break;
        } else {
         if ($180) {
          break;
         } else {
          label = 56; //@line 32911
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($180) {
        label = 56; //@line 32919
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 32925
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 32927
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 32928
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 32929
      STACKTOP = sp; //@line 32930
      return $$sroa$0$0$copyload | 0; //@line 32930
     }
    }
   }
  } while (0);
  $175 = ___cxa_find_matching_catch_2() | 0; //@line 32935
  $$1 = $175; //@line 32937
  $$127 = tempRet0; //@line 32937
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 32939
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 32940
 ___resumeException($$1 | 0); //@line 32941
 return 0; //@line 32943
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $143 = 0, $148 = 0, $151 = 0, $152 = 0, $160 = 0, $167 = 0, $168 = 0, $17 = 0, $176 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27112
 STACKTOP = STACKTOP + 224 | 0; //@line 27113
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 27113
 $6 = sp + 198 | 0; //@line 27114
 $7 = sp + 196 | 0; //@line 27115
 $8 = sp + 184 | 0; //@line 27116
 $9 = sp + 172 | 0; //@line 27117
 $10 = sp + 168 | 0; //@line 27118
 $11 = sp + 8 | 0; //@line 27119
 $12 = sp + 4 | 0; //@line 27120
 $13 = sp; //@line 27121
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 27122
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8, $3, $6, $7); //@line 27123
 HEAP32[$9 >> 2] = 0; //@line 27124
 HEAP32[$9 + 4 >> 2] = 0; //@line 27124
 HEAP32[$9 + 8 >> 2] = 0; //@line 27124
 $$0$i$i = 0; //@line 27125
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 27132
  $$0$i$i = $$0$i$i + 1 | 0; //@line 27134
 }
 $17 = $9 + 11 | 0; //@line 27136
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 27144
 } else {
  $23 = 10; //@line 27146
 }
 __THREW__ = 0; //@line 27148
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 27149
 $24 = __THREW__; //@line 27150
 __THREW__ = 0; //@line 27150
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 27153
  $$1 = $88; //@line 27155
  $$127 = tempRet0; //@line 27155
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 27160
  HEAP32[$10 >> 2] = $29; //@line 27161
  HEAP32[$12 >> 2] = $11; //@line 27162
  HEAP32[$13 >> 2] = 0; //@line 27163
  $30 = $9 + 4 | 0; //@line 27164
  $31 = $9 + 8 | 0; //@line 27165
  $$pre = HEAP32[$1 >> 2] | 0; //@line 27166
  $$024 = $29; //@line 27167
  $$pre$i$i$i = $$pre; //@line 27167
  $178 = $$pre; //@line 27167
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 27171
    $148 = 0; //@line 27171
    $179 = 1; //@line 27171
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 27174
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 27182
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 27183
     $42 = __THREW__; //@line 27184
     __THREW__ = 0; //@line 27184
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 27189
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0; //@line 27194
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 27199
     $$pre$i$i$i45 = 0; //@line 27200
     $148 = 0; //@line 27200
     $179 = 1; //@line 27200
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 27202
     $148 = $178; //@line 27202
     $179 = 0; //@line 27202
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 27205
   do {
    if (!$48) {
     label = 20; //@line 27209
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 27212
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 27220
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 27221
      $59 = __THREW__; //@line 27222
      __THREW__ = 0; //@line 27222
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 27227
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$51 >> 0] | 0) | 0; //@line 27232
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 27237
      label = 20; //@line 27238
      break;
     } else {
      if ($179) {
       $180 = $48; //@line 27242
       break;
      } else {
       $$2 = $$024; //@line 27245
       $$pre$i4$i$i51 = $48; //@line 27245
       label = 37; //@line 27246
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 27253
    if ($179) {
     $$2 = $$024; //@line 27255
     $$pre$i4$i$i51 = 0; //@line 27255
     label = 37; //@line 27256
     break;
    } else {
     $180 = 0; //@line 27259
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 27263
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 27267
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 27272
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 27273
    $74 = __THREW__; //@line 27274
    __THREW__ = 0; //@line 27274
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 27285
    } else {
     $80 = 10; //@line 27287
    }
    __THREW__ = 0; //@line 27289
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 27290
    $81 = __THREW__; //@line 27291
    __THREW__ = 0; //@line 27291
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 27299
    HEAP32[$10 >> 2] = $86 + $70; //@line 27301
    $$125 = $86; //@line 27302
   } else {
    $$125 = $$024; //@line 27304
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 27306
   $91 = HEAP32[$90 >> 2] | 0; //@line 27307
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 27308
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 27315
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 27316
    $99 = __THREW__; //@line 27317
    __THREW__ = 0; //@line 27317
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 27322
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$91 >> 0] | 0) | 0; //@line 27327
   }
   __THREW__ = 0; //@line 27331
   $105 = invoke_iiiiiiiiiii(1, $$0$i$i39 & 255 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP8[$7 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 27332
   $106 = __THREW__; //@line 27333
   __THREW__ = 0; //@line 27333
   if ($106 & 1) {
    break;
   }
   if ($105 | 0) {
    $$2 = $$125; //@line 27340
    $$pre$i4$i$i51 = $180; //@line 27340
    label = 37; //@line 27341
    break;
   }
   $109 = HEAP32[$90 >> 2] | 0; //@line 27344
   if (($109 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 27351
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 27352
    $115 = __THREW__; //@line 27353
    __THREW__ = 0; //@line 27353
    if ($115 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 27358
     $$pre$i$i$i = $$pre$i$i$i45; //@line 27358
     $178 = $148; //@line 27358
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $109 + 1; //@line 27363
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$109 >> 0] | 0) | 0; //@line 27365
    $$024 = $$125; //@line 27366
    $$pre$i$i$i = $$pre$i$i$i45; //@line 27366
    $178 = $148; //@line 27366
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $120 = HEAP8[$8 + 11 >> 0] | 0; //@line 27373
    if (($120 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $120 & 255) | 0) {
     $127 = HEAP32[$12 >> 2] | 0; //@line 27381
     if (($127 - $11 | 0) < 160) {
      $132 = HEAP32[$13 >> 2] | 0; //@line 27387
      HEAP32[$12 >> 2] = $127 + 4; //@line 27389
      HEAP32[$127 >> 2] = $132; //@line 27390
     }
    }
    __THREW__ = 0; //@line 27394
    $135 = invoke_iiiii(12, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 27395
    $136 = __THREW__; //@line 27396
    __THREW__ = 0; //@line 27396
    if (!($136 & 1)) {
     HEAP16[$5 >> 1] = $135; //@line 27399
     __THREW__ = 0; //@line 27401
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 27402
     $139 = __THREW__; //@line 27403
     __THREW__ = 0; //@line 27403
     if (!($139 & 1)) {
      if (!$$pre$i$i$i45) {
       $181 = 1; //@line 27408
      } else {
       $143 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 27411
       if (($143 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 27419
        $151 = invoke_ii(HEAP32[(HEAP32[$148 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 27420
        $152 = __THREW__; //@line 27421
        __THREW__ = 0; //@line 27421
        if ($152 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $151; //@line 27426
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$143 >> 0] | 0) | 0; //@line 27431
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 27436
        $181 = 1; //@line 27437
       } else {
        $181 = 0; //@line 27439
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 27445
       } else {
        $160 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 27448
        if (($160 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 27456
         $167 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 27457
         $168 = __THREW__; //@line 27458
         __THREW__ = 0; //@line 27458
         if ($168 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $167; //@line 27463
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$160 >> 0] | 0) | 0; //@line 27468
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 27473
         label = 54; //@line 27474
         break;
        } else {
         if ($181) {
          break;
         } else {
          label = 56; //@line 27480
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($181) {
        label = 56; //@line 27488
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 27494
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 27496
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 27497
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 27498
      STACKTOP = sp; //@line 27499
      return $$sroa$0$0$copyload | 0; //@line 27499
     }
    }
   }
  } while (0);
  $176 = ___cxa_find_matching_catch_2() | 0; //@line 27504
  $$1 = $176; //@line 27506
  $$127 = tempRet0; //@line 27506
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 27508
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 27509
 ___resumeException($$1 | 0); //@line 27510
 return 0; //@line 27512
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $143 = 0, $148 = 0, $151 = 0, $152 = 0, $160 = 0, $167 = 0, $168 = 0, $17 = 0, $176 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26142
 STACKTOP = STACKTOP + 224 | 0; //@line 26143
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 26143
 $6 = sp + 198 | 0; //@line 26144
 $7 = sp + 196 | 0; //@line 26145
 $8 = sp + 184 | 0; //@line 26146
 $9 = sp + 172 | 0; //@line 26147
 $10 = sp + 168 | 0; //@line 26148
 $11 = sp + 8 | 0; //@line 26149
 $12 = sp + 4 | 0; //@line 26150
 $13 = sp; //@line 26151
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 26152
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8, $3, $6, $7); //@line 26153
 HEAP32[$9 >> 2] = 0; //@line 26154
 HEAP32[$9 + 4 >> 2] = 0; //@line 26154
 HEAP32[$9 + 8 >> 2] = 0; //@line 26154
 $$0$i$i = 0; //@line 26155
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 26162
  $$0$i$i = $$0$i$i + 1 | 0; //@line 26164
 }
 $17 = $9 + 11 | 0; //@line 26166
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 26174
 } else {
  $23 = 10; //@line 26176
 }
 __THREW__ = 0; //@line 26178
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 26179
 $24 = __THREW__; //@line 26180
 __THREW__ = 0; //@line 26180
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 26183
  $$1 = $88; //@line 26185
  $$127 = tempRet0; //@line 26185
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 26190
  HEAP32[$10 >> 2] = $29; //@line 26191
  HEAP32[$12 >> 2] = $11; //@line 26192
  HEAP32[$13 >> 2] = 0; //@line 26193
  $30 = $9 + 4 | 0; //@line 26194
  $31 = $9 + 8 | 0; //@line 26195
  $$pre = HEAP32[$1 >> 2] | 0; //@line 26196
  $$024 = $29; //@line 26197
  $$pre$i$i$i = $$pre; //@line 26197
  $178 = $$pre; //@line 26197
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 26201
    $148 = 0; //@line 26201
    $179 = 1; //@line 26201
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 26204
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 26212
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 26213
     $42 = __THREW__; //@line 26214
     __THREW__ = 0; //@line 26214
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 26219
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0; //@line 26224
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 26229
     $$pre$i$i$i45 = 0; //@line 26230
     $148 = 0; //@line 26230
     $179 = 1; //@line 26230
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 26232
     $148 = $178; //@line 26232
     $179 = 0; //@line 26232
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 26235
   do {
    if (!$48) {
     label = 20; //@line 26239
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 26242
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 26250
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 26251
      $59 = __THREW__; //@line 26252
      __THREW__ = 0; //@line 26252
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 26257
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$51 >> 0] | 0) | 0; //@line 26262
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 26267
      label = 20; //@line 26268
      break;
     } else {
      if ($179) {
       $180 = $48; //@line 26272
       break;
      } else {
       $$2 = $$024; //@line 26275
       $$pre$i4$i$i51 = $48; //@line 26275
       label = 37; //@line 26276
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 26283
    if ($179) {
     $$2 = $$024; //@line 26285
     $$pre$i4$i$i51 = 0; //@line 26285
     label = 37; //@line 26286
     break;
    } else {
     $180 = 0; //@line 26289
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 26293
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 26297
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 26302
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 26303
    $74 = __THREW__; //@line 26304
    __THREW__ = 0; //@line 26304
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 26315
    } else {
     $80 = 10; //@line 26317
    }
    __THREW__ = 0; //@line 26319
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 26320
    $81 = __THREW__; //@line 26321
    __THREW__ = 0; //@line 26321
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 26329
    HEAP32[$10 >> 2] = $86 + $70; //@line 26331
    $$125 = $86; //@line 26332
   } else {
    $$125 = $$024; //@line 26334
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 26336
   $91 = HEAP32[$90 >> 2] | 0; //@line 26337
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 26338
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 26345
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 26346
    $99 = __THREW__; //@line 26347
    __THREW__ = 0; //@line 26347
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 26352
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$91 >> 0] | 0) | 0; //@line 26357
   }
   __THREW__ = 0; //@line 26361
   $105 = invoke_iiiiiiiiiii(1, $$0$i$i39 & 255 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP8[$7 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 26362
   $106 = __THREW__; //@line 26363
   __THREW__ = 0; //@line 26363
   if ($106 & 1) {
    break;
   }
   if ($105 | 0) {
    $$2 = $$125; //@line 26370
    $$pre$i4$i$i51 = $180; //@line 26370
    label = 37; //@line 26371
    break;
   }
   $109 = HEAP32[$90 >> 2] | 0; //@line 26374
   if (($109 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 26381
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 26382
    $115 = __THREW__; //@line 26383
    __THREW__ = 0; //@line 26383
    if ($115 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 26388
     $$pre$i$i$i = $$pre$i$i$i45; //@line 26388
     $178 = $148; //@line 26388
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $109 + 1; //@line 26393
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$109 >> 0] | 0) | 0; //@line 26395
    $$024 = $$125; //@line 26396
    $$pre$i$i$i = $$pre$i$i$i45; //@line 26396
    $178 = $148; //@line 26396
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $120 = HEAP8[$8 + 11 >> 0] | 0; //@line 26403
    if (($120 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $120 & 255) | 0) {
     $127 = HEAP32[$12 >> 2] | 0; //@line 26411
     if (($127 - $11 | 0) < 160) {
      $132 = HEAP32[$13 >> 2] | 0; //@line 26417
      HEAP32[$12 >> 2] = $127 + 4; //@line 26419
      HEAP32[$127 >> 2] = $132; //@line 26420
     }
    }
    __THREW__ = 0; //@line 26424
    $135 = invoke_iiiii(10, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 26425
    $136 = __THREW__; //@line 26426
    __THREW__ = 0; //@line 26426
    if (!($136 & 1)) {
     HEAP32[$5 >> 2] = $135; //@line 26429
     __THREW__ = 0; //@line 26431
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 26432
     $139 = __THREW__; //@line 26433
     __THREW__ = 0; //@line 26433
     if (!($139 & 1)) {
      if (!$$pre$i$i$i45) {
       $181 = 1; //@line 26438
      } else {
       $143 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 26441
       if (($143 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 26449
        $151 = invoke_ii(HEAP32[(HEAP32[$148 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 26450
        $152 = __THREW__; //@line 26451
        __THREW__ = 0; //@line 26451
        if ($152 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $151; //@line 26456
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$143 >> 0] | 0) | 0; //@line 26461
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 26466
        $181 = 1; //@line 26467
       } else {
        $181 = 0; //@line 26469
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 26475
       } else {
        $160 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 26478
        if (($160 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 26486
         $167 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 26487
         $168 = __THREW__; //@line 26488
         __THREW__ = 0; //@line 26488
         if ($168 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $167; //@line 26493
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$160 >> 0] | 0) | 0; //@line 26498
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 26503
         label = 54; //@line 26504
         break;
        } else {
         if ($181) {
          break;
         } else {
          label = 56; //@line 26510
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($181) {
        label = 56; //@line 26518
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 26524
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 26526
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 26527
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 26528
      STACKTOP = sp; //@line 26529
      return $$sroa$0$0$copyload | 0; //@line 26529
     }
    }
   }
  } while (0);
  $176 = ___cxa_find_matching_catch_2() | 0; //@line 26534
  $$1 = $176; //@line 26536
  $$127 = tempRet0; //@line 26536
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 26538
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 26539
 ___resumeException($$1 | 0); //@line 26540
 return 0; //@line 26542
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $143 = 0, $148 = 0, $151 = 0, $152 = 0, $160 = 0, $167 = 0, $168 = 0, $17 = 0, $176 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26627
 STACKTOP = STACKTOP + 224 | 0; //@line 26628
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 26628
 $6 = sp + 198 | 0; //@line 26629
 $7 = sp + 196 | 0; //@line 26630
 $8 = sp + 184 | 0; //@line 26631
 $9 = sp + 172 | 0; //@line 26632
 $10 = sp + 168 | 0; //@line 26633
 $11 = sp + 8 | 0; //@line 26634
 $12 = sp + 4 | 0; //@line 26635
 $13 = sp; //@line 26636
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 26637
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8, $3, $6, $7); //@line 26638
 HEAP32[$9 >> 2] = 0; //@line 26639
 HEAP32[$9 + 4 >> 2] = 0; //@line 26639
 HEAP32[$9 + 8 >> 2] = 0; //@line 26639
 $$0$i$i = 0; //@line 26640
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 26647
  $$0$i$i = $$0$i$i + 1 | 0; //@line 26649
 }
 $17 = $9 + 11 | 0; //@line 26651
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 26659
 } else {
  $23 = 10; //@line 26661
 }
 __THREW__ = 0; //@line 26663
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 26664
 $24 = __THREW__; //@line 26665
 __THREW__ = 0; //@line 26665
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 26668
  $$1 = $88; //@line 26670
  $$127 = tempRet0; //@line 26670
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 26675
  HEAP32[$10 >> 2] = $29; //@line 26676
  HEAP32[$12 >> 2] = $11; //@line 26677
  HEAP32[$13 >> 2] = 0; //@line 26678
  $30 = $9 + 4 | 0; //@line 26679
  $31 = $9 + 8 | 0; //@line 26680
  $$pre = HEAP32[$1 >> 2] | 0; //@line 26681
  $$024 = $29; //@line 26682
  $$pre$i$i$i = $$pre; //@line 26682
  $178 = $$pre; //@line 26682
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 26686
    $148 = 0; //@line 26686
    $179 = 1; //@line 26686
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 26689
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 26697
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 26698
     $42 = __THREW__; //@line 26699
     __THREW__ = 0; //@line 26699
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 26704
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0; //@line 26709
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 26714
     $$pre$i$i$i45 = 0; //@line 26715
     $148 = 0; //@line 26715
     $179 = 1; //@line 26715
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 26717
     $148 = $178; //@line 26717
     $179 = 0; //@line 26717
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 26720
   do {
    if (!$48) {
     label = 20; //@line 26724
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 26727
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 26735
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 26736
      $59 = __THREW__; //@line 26737
      __THREW__ = 0; //@line 26737
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 26742
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$51 >> 0] | 0) | 0; //@line 26747
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 26752
      label = 20; //@line 26753
      break;
     } else {
      if ($179) {
       $180 = $48; //@line 26757
       break;
      } else {
       $$2 = $$024; //@line 26760
       $$pre$i4$i$i51 = $48; //@line 26760
       label = 37; //@line 26761
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 26768
    if ($179) {
     $$2 = $$024; //@line 26770
     $$pre$i4$i$i51 = 0; //@line 26770
     label = 37; //@line 26771
     break;
    } else {
     $180 = 0; //@line 26774
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 26778
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 26782
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 26787
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 26788
    $74 = __THREW__; //@line 26789
    __THREW__ = 0; //@line 26789
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 26800
    } else {
     $80 = 10; //@line 26802
    }
    __THREW__ = 0; //@line 26804
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 26805
    $81 = __THREW__; //@line 26806
    __THREW__ = 0; //@line 26806
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 26814
    HEAP32[$10 >> 2] = $86 + $70; //@line 26816
    $$125 = $86; //@line 26817
   } else {
    $$125 = $$024; //@line 26819
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 26821
   $91 = HEAP32[$90 >> 2] | 0; //@line 26822
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 26823
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 26830
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 26831
    $99 = __THREW__; //@line 26832
    __THREW__ = 0; //@line 26832
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 26837
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$91 >> 0] | 0) | 0; //@line 26842
   }
   __THREW__ = 0; //@line 26846
   $105 = invoke_iiiiiiiiiii(1, $$0$i$i39 & 255 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP8[$7 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 26847
   $106 = __THREW__; //@line 26848
   __THREW__ = 0; //@line 26848
   if ($106 & 1) {
    break;
   }
   if ($105 | 0) {
    $$2 = $$125; //@line 26855
    $$pre$i4$i$i51 = $180; //@line 26855
    label = 37; //@line 26856
    break;
   }
   $109 = HEAP32[$90 >> 2] | 0; //@line 26859
   if (($109 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 26866
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 26867
    $115 = __THREW__; //@line 26868
    __THREW__ = 0; //@line 26868
    if ($115 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 26873
     $$pre$i$i$i = $$pre$i$i$i45; //@line 26873
     $178 = $148; //@line 26873
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $109 + 1; //@line 26878
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$109 >> 0] | 0) | 0; //@line 26880
    $$024 = $$125; //@line 26881
    $$pre$i$i$i = $$pre$i$i$i45; //@line 26881
    $178 = $148; //@line 26881
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $120 = HEAP8[$8 + 11 >> 0] | 0; //@line 26888
    if (($120 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $120 & 255) | 0) {
     $127 = HEAP32[$12 >> 2] | 0; //@line 26896
     if (($127 - $11 | 0) < 160) {
      $132 = HEAP32[$13 >> 2] | 0; //@line 26902
      HEAP32[$12 >> 2] = $127 + 4; //@line 26904
      HEAP32[$127 >> 2] = $132; //@line 26905
     }
    }
    __THREW__ = 0; //@line 26909
    $135 = invoke_iiiii(11, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 26910
    $136 = __THREW__; //@line 26911
    __THREW__ = 0; //@line 26911
    if (!($136 & 1)) {
     HEAP32[$5 >> 2] = $135; //@line 26914
     __THREW__ = 0; //@line 26916
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 26917
     $139 = __THREW__; //@line 26918
     __THREW__ = 0; //@line 26918
     if (!($139 & 1)) {
      if (!$$pre$i$i$i45) {
       $181 = 1; //@line 26923
      } else {
       $143 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 26926
       if (($143 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 26934
        $151 = invoke_ii(HEAP32[(HEAP32[$148 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 26935
        $152 = __THREW__; //@line 26936
        __THREW__ = 0; //@line 26936
        if ($152 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $151; //@line 26941
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$143 >> 0] | 0) | 0; //@line 26946
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 26951
        $181 = 1; //@line 26952
       } else {
        $181 = 0; //@line 26954
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 26960
       } else {
        $160 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 26963
        if (($160 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 26971
         $167 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 26972
         $168 = __THREW__; //@line 26973
         __THREW__ = 0; //@line 26973
         if ($168 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $167; //@line 26978
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$160 >> 0] | 0) | 0; //@line 26983
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 26988
         label = 54; //@line 26989
         break;
        } else {
         if ($181) {
          break;
         } else {
          label = 56; //@line 26995
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($181) {
        label = 56; //@line 27003
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 27009
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 27011
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 27012
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 27013
      STACKTOP = sp; //@line 27014
      return $$sroa$0$0$copyload | 0; //@line 27014
     }
    }
   }
  } while (0);
  $176 = ___cxa_find_matching_catch_2() | 0; //@line 27019
  $$1 = $176; //@line 27021
  $$127 = tempRet0; //@line 27021
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 27023
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 27024
 ___resumeException($$1 | 0); //@line 27025
 return 0; //@line 27027
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $114 = 0, $119 = 0, $12 = 0, $126 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $138 = 0, $14 = 0, $142 = 0, $147 = 0, $150 = 0, $151 = 0, $159 = 0, $166 = 0, $167 = 0, $17 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 33805
 STACKTOP = STACKTOP + 304 | 0; //@line 33806
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304); //@line 33806
 $6 = sp + 200 | 0; //@line 33807
 $7 = sp + 196 | 0; //@line 33808
 $8 = sp + 184 | 0; //@line 33809
 $9 = sp + 172 | 0; //@line 33810
 $10 = sp + 168 | 0; //@line 33811
 $11 = sp + 8 | 0; //@line 33812
 $12 = sp + 4 | 0; //@line 33813
 $13 = sp; //@line 33814
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 33815
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8, $3, $6, $7); //@line 33816
 HEAP32[$9 >> 2] = 0; //@line 33817
 HEAP32[$9 + 4 >> 2] = 0; //@line 33817
 HEAP32[$9 + 8 >> 2] = 0; //@line 33817
 $$0$i$i = 0; //@line 33818
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 33825
  $$0$i$i = $$0$i$i + 1 | 0; //@line 33827
 }
 $17 = $9 + 11 | 0; //@line 33829
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 33837
 } else {
  $23 = 10; //@line 33839
 }
 __THREW__ = 0; //@line 33841
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 33842
 $24 = __THREW__; //@line 33843
 __THREW__ = 0; //@line 33843
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 33846
  $$1 = $88; //@line 33848
  $$127 = tempRet0; //@line 33848
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 33853
  HEAP32[$10 >> 2] = $29; //@line 33854
  HEAP32[$12 >> 2] = $11; //@line 33855
  HEAP32[$13 >> 2] = 0; //@line 33856
  $30 = $9 + 4 | 0; //@line 33857
  $31 = $9 + 8 | 0; //@line 33858
  $$pre = HEAP32[$1 >> 2] | 0; //@line 33859
  $$024 = $29; //@line 33860
  $$pre$i$i$i = $$pre; //@line 33860
  $177 = $$pre; //@line 33860
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 33864
    $147 = 0; //@line 33864
    $178 = 1; //@line 33864
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 33867
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 33875
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 33876
     $42 = __THREW__; //@line 33877
     __THREW__ = 0; //@line 33877
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 33882
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0; //@line 33887
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 33892
     $$pre$i$i$i45 = 0; //@line 33893
     $147 = 0; //@line 33893
     $178 = 1; //@line 33893
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 33895
     $147 = $177; //@line 33895
     $178 = 0; //@line 33895
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 33898
   do {
    if (!$48) {
     label = 20; //@line 33902
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 33905
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 33913
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 33914
      $59 = __THREW__; //@line 33915
      __THREW__ = 0; //@line 33915
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 33920
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$51 >> 2] | 0) | 0; //@line 33925
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 33930
      label = 20; //@line 33931
      break;
     } else {
      if ($178) {
       $179 = $48; //@line 33935
       break;
      } else {
       $$2 = $$024; //@line 33938
       $$pre$i4$i$i51 = $48; //@line 33938
       label = 37; //@line 33939
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 33946
    if ($178) {
     $$2 = $$024; //@line 33948
     $$pre$i4$i$i51 = 0; //@line 33948
     label = 37; //@line 33949
     break;
    } else {
     $179 = 0; //@line 33952
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 33956
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 33960
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 33965
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 33966
    $74 = __THREW__; //@line 33967
    __THREW__ = 0; //@line 33967
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 33978
    } else {
     $80 = 10; //@line 33980
    }
    __THREW__ = 0; //@line 33982
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 33983
    $81 = __THREW__; //@line 33984
    __THREW__ = 0; //@line 33984
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 33992
    HEAP32[$10 >> 2] = $86 + $70; //@line 33994
    $$125 = $86; //@line 33995
   } else {
    $$125 = $$024; //@line 33997
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 33999
   $91 = HEAP32[$90 >> 2] | 0; //@line 34000
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 34001
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 34008
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 34009
    $99 = __THREW__; //@line 34010
    __THREW__ = 0; //@line 34010
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 34015
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$91 >> 2] | 0) | 0; //@line 34020
   }
   __THREW__ = 0; //@line 34023
   $104 = invoke_iiiiiiiiiii(2, $$0$i$i39 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP32[$7 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 34024
   $105 = __THREW__; //@line 34025
   __THREW__ = 0; //@line 34025
   if ($105 & 1) {
    break;
   }
   if ($104 | 0) {
    $$2 = $$125; //@line 34032
    $$pre$i4$i$i51 = $179; //@line 34032
    label = 37; //@line 34033
    break;
   }
   $108 = HEAP32[$90 >> 2] | 0; //@line 34036
   if (($108 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 34043
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 34044
    $114 = __THREW__; //@line 34045
    __THREW__ = 0; //@line 34045
    if ($114 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 34050
     $$pre$i$i$i = $$pre$i$i$i45; //@line 34050
     $177 = $147; //@line 34050
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $108 + 4; //@line 34055
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0; //@line 34057
    $$024 = $$125; //@line 34058
    $$pre$i$i$i = $$pre$i$i$i45; //@line 34058
    $177 = $147; //@line 34058
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $119 = HEAP8[$8 + 11 >> 0] | 0; //@line 34065
    if (($119 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $119 & 255) | 0) {
     $126 = HEAP32[$12 >> 2] | 0; //@line 34073
     if (($126 - $11 | 0) < 160) {
      $131 = HEAP32[$13 >> 2] | 0; //@line 34079
      HEAP32[$12 >> 2] = $126 + 4; //@line 34081
      HEAP32[$126 >> 2] = $131; //@line 34082
     }
    }
    __THREW__ = 0; //@line 34086
    $134 = invoke_iiiii(14, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 34087
    $135 = __THREW__; //@line 34088
    __THREW__ = 0; //@line 34088
    if (!($135 & 1)) {
     HEAP32[$5 >> 2] = $134; //@line 34091
     __THREW__ = 0; //@line 34093
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 34094
     $138 = __THREW__; //@line 34095
     __THREW__ = 0; //@line 34095
     if (!($138 & 1)) {
      if (!$$pre$i$i$i45) {
       $180 = 1; //@line 34100
      } else {
       $142 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 34103
       if (($142 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 34111
        $150 = invoke_ii(HEAP32[(HEAP32[$147 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 34112
        $151 = __THREW__; //@line 34113
        __THREW__ = 0; //@line 34113
        if ($151 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $150; //@line 34118
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0; //@line 34123
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 34128
        $180 = 1; //@line 34129
       } else {
        $180 = 0; //@line 34131
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 34137
       } else {
        $159 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 34140
        if (($159 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 34148
         $166 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 34149
         $167 = __THREW__; //@line 34150
         __THREW__ = 0; //@line 34150
         if ($167 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $166; //@line 34155
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$159 >> 2] | 0) | 0; //@line 34160
        }
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 34165
         label = 54; //@line 34166
         break;
        } else {
         if ($180) {
          break;
         } else {
          label = 56; //@line 34172
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($180) {
        label = 56; //@line 34180
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 34186
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 34188
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 34189
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 34190
      STACKTOP = sp; //@line 34191
      return $$sroa$0$0$copyload | 0; //@line 34191
     }
    }
   }
  } while (0);
  $175 = ___cxa_find_matching_catch_2() | 0; //@line 34196
  $$1 = $175; //@line 34198
  $$127 = tempRet0; //@line 34198
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 34200
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 34201
 ___resumeException($$1 | 0); //@line 34202
 return 0; //@line 34204
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i43 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i49 = 0, $$0$i$i39 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i45 = 0, $$pre$i4$i$i51 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $127 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $143 = 0, $148 = 0, $151 = 0, $152 = 0, $160 = 0, $167 = 0, $168 = 0, $17 = 0, $176 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $41 = 0, $42 = 0, $48 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $70 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28079
 STACKTOP = STACKTOP + 224 | 0; //@line 28080
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 28080
 $6 = sp + 198 | 0; //@line 28081
 $7 = sp + 196 | 0; //@line 28082
 $8 = sp + 184 | 0; //@line 28083
 $9 = sp + 172 | 0; //@line 28084
 $10 = sp + 168 | 0; //@line 28085
 $11 = sp + 8 | 0; //@line 28086
 $12 = sp + 4 | 0; //@line 28087
 $13 = sp; //@line 28088
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0; //@line 28089
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8, $3, $6, $7); //@line 28090
 HEAP32[$9 >> 2] = 0; //@line 28091
 HEAP32[$9 + 4 >> 2] = 0; //@line 28091
 HEAP32[$9 + 8 >> 2] = 0; //@line 28091
 $$0$i$i = 0; //@line 28092
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0; //@line 28099
  $$0$i$i = $$0$i$i + 1 | 0; //@line 28101
 }
 $17 = $9 + 11 | 0; //@line 28103
 if ((HEAP8[$17 >> 0] | 0) < 0) {
  $23 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; //@line 28111
 } else {
  $23 = 10; //@line 28113
 }
 __THREW__ = 0; //@line 28115
 invoke_viii(14, $9 | 0, $23 | 0, 0); //@line 28116
 $24 = __THREW__; //@line 28117
 __THREW__ = 0; //@line 28117
 if ($24 & 1) {
  $88 = ___cxa_find_matching_catch_2() | 0; //@line 28120
  $$1 = $88; //@line 28122
  $$127 = tempRet0; //@line 28122
 } else {
  $29 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 28127
  HEAP32[$10 >> 2] = $29; //@line 28128
  HEAP32[$12 >> 2] = $11; //@line 28129
  HEAP32[$13 >> 2] = 0; //@line 28130
  $30 = $9 + 4 | 0; //@line 28131
  $31 = $9 + 8 | 0; //@line 28132
  $$pre = HEAP32[$1 >> 2] | 0; //@line 28133
  $$024 = $29; //@line 28134
  $$pre$i$i$i = $$pre; //@line 28134
  $178 = $$pre; //@line 28134
  L11 : while (1) {
   if (!$$pre$i$i$i) {
    $$pre$i$i$i45 = 0; //@line 28138
    $148 = 0; //@line 28138
    $179 = 1; //@line 28138
   } else {
    $34 = HEAP32[$$pre$i$i$i + 12 >> 2] | 0; //@line 28141
    if (($34 | 0) == (HEAP32[$$pre$i$i$i + 16 >> 2] | 0)) {
     __THREW__ = 0; //@line 28149
     $41 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i | 0) | 0; //@line 28150
     $42 = __THREW__; //@line 28151
     __THREW__ = 0; //@line 28151
     if ($42 & 1) {
      break;
     } else {
      $$0$i$i$i$i = $41; //@line 28156
     }
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0; //@line 28161
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 28166
     $$pre$i$i$i45 = 0; //@line 28167
     $148 = 0; //@line 28167
     $179 = 1; //@line 28167
    } else {
     $$pre$i$i$i45 = $$pre$i$i$i; //@line 28169
     $148 = $178; //@line 28169
     $179 = 0; //@line 28169
    }
   }
   $48 = HEAP32[$2 >> 2] | 0; //@line 28172
   do {
    if (!$48) {
     label = 20; //@line 28176
    } else {
     $51 = HEAP32[$48 + 12 >> 2] | 0; //@line 28179
     if (($51 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
      __THREW__ = 0; //@line 28187
      $58 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] | 0, $48 | 0) | 0; //@line 28188
      $59 = __THREW__; //@line 28189
      __THREW__ = 0; //@line 28189
      if ($59 & 1) {
       break L11;
      } else {
       $$0$i$i2$i$i = $58; //@line 28194
      }
     } else {
      $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$51 >> 0] | 0) | 0; //@line 28199
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0; //@line 28204
      label = 20; //@line 28205
      break;
     } else {
      if ($179) {
       $180 = $48; //@line 28209
       break;
      } else {
       $$2 = $$024; //@line 28212
       $$pre$i4$i$i51 = $48; //@line 28212
       label = 37; //@line 28213
       break L11;
      }
     }
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0; //@line 28220
    if ($179) {
     $$2 = $$024; //@line 28222
     $$pre$i4$i$i51 = 0; //@line 28222
     label = 37; //@line 28223
     break;
    } else {
     $180 = 0; //@line 28226
    }
   }
   $66 = HEAP8[$17 >> 0] | 0; //@line 28230
   $70 = $66 << 24 >> 24 < 0 ? HEAP32[$30 >> 2] | 0 : $66 & 255; //@line 28234
   if ((HEAP32[$10 >> 2] | 0) == ($$024 + $70 | 0)) {
    __THREW__ = 0; //@line 28239
    invoke_viii(14, $9 | 0, $70 << 1 | 0, 0); //@line 28240
    $74 = __THREW__; //@line 28241
    __THREW__ = 0; //@line 28241
    if ($74 & 1) {
     break;
    }
    if ((HEAP8[$17 >> 0] | 0) < 0) {
     $80 = (HEAP32[$31 >> 2] & 2147483647) + -1 | 0; //@line 28252
    } else {
     $80 = 10; //@line 28254
    }
    __THREW__ = 0; //@line 28256
    invoke_viii(14, $9 | 0, $80 | 0, 0); //@line 28257
    $81 = __THREW__; //@line 28258
    __THREW__ = 0; //@line 28258
    if ($81 & 1) {
     break;
    }
    $86 = (HEAP8[$17 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9; //@line 28266
    HEAP32[$10 >> 2] = $86 + $70; //@line 28268
    $$125 = $86; //@line 28269
   } else {
    $$125 = $$024; //@line 28271
   }
   $90 = $$pre$i$i$i45 + 12 | 0; //@line 28273
   $91 = HEAP32[$90 >> 2] | 0; //@line 28274
   $92 = $$pre$i$i$i45 + 16 | 0; //@line 28275
   if (($91 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 28282
    $98 = invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 28283
    $99 = __THREW__; //@line 28284
    __THREW__ = 0; //@line 28284
    if ($99 & 1) {
     break;
    } else {
     $$0$i$i39 = $98; //@line 28289
    }
   } else {
    $$0$i$i39 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$91 >> 0] | 0) | 0; //@line 28294
   }
   __THREW__ = 0; //@line 28298
   $105 = invoke_iiiiiiiiiii(1, $$0$i$i39 & 255 | 0, $14 | 0, $$125 | 0, $10 | 0, $13 | 0, HEAP8[$7 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $6 | 0) | 0; //@line 28299
   $106 = __THREW__; //@line 28300
   __THREW__ = 0; //@line 28300
   if ($106 & 1) {
    break;
   }
   if ($105 | 0) {
    $$2 = $$125; //@line 28307
    $$pre$i4$i$i51 = $180; //@line 28307
    label = 37; //@line 28308
    break;
   }
   $109 = HEAP32[$90 >> 2] | 0; //@line 28311
   if (($109 | 0) == (HEAP32[$92 >> 2] | 0)) {
    __THREW__ = 0; //@line 28318
    invoke_ii(HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 28319
    $115 = __THREW__; //@line 28320
    __THREW__ = 0; //@line 28320
    if ($115 & 1) {
     break;
    } else {
     $$024 = $$125; //@line 28325
     $$pre$i$i$i = $$pre$i$i$i45; //@line 28325
     $178 = $148; //@line 28325
     continue;
    }
   } else {
    HEAP32[$90 >> 2] = $109 + 1; //@line 28330
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$109 >> 0] | 0) | 0; //@line 28332
    $$024 = $$125; //@line 28333
    $$pre$i$i$i = $$pre$i$i$i45; //@line 28333
    $178 = $148; //@line 28333
    continue;
   }
  }
  L50 : do {
   if ((label | 0) == 37) {
    $120 = HEAP8[$8 + 11 >> 0] | 0; //@line 28340
    if (($120 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $120 & 255) | 0) {
     $127 = HEAP32[$12 >> 2] | 0; //@line 28348
     if (($127 - $11 | 0) < 160) {
      $132 = HEAP32[$13 >> 2] | 0; //@line 28354
      HEAP32[$12 >> 2] = $127 + 4; //@line 28356
      HEAP32[$127 >> 2] = $132; //@line 28357
     }
    }
    __THREW__ = 0; //@line 28361
    $135 = invoke_iiiii(14, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0; //@line 28362
    $136 = __THREW__; //@line 28363
    __THREW__ = 0; //@line 28363
    if (!($136 & 1)) {
     HEAP32[$5 >> 2] = $135; //@line 28366
     __THREW__ = 0; //@line 28368
     invoke_viiii(21, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0); //@line 28369
     $139 = __THREW__; //@line 28370
     __THREW__ = 0; //@line 28370
     if (!($139 & 1)) {
      if (!$$pre$i$i$i45) {
       $181 = 1; //@line 28375
      } else {
       $143 = HEAP32[$$pre$i$i$i45 + 12 >> 2] | 0; //@line 28378
       if (($143 | 0) == (HEAP32[$$pre$i$i$i45 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 28386
        $151 = invoke_ii(HEAP32[(HEAP32[$148 >> 2] | 0) + 36 >> 2] | 0, $$pre$i$i$i45 | 0) | 0; //@line 28387
        $152 = __THREW__; //@line 28388
        __THREW__ = 0; //@line 28388
        if ($152 & 1) {
         break;
        } else {
         $$0$i$i$i$i43 = $151; //@line 28393
        }
       } else {
        $$0$i$i$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$143 >> 0] | 0) | 0; //@line 28398
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 28403
        $181 = 1; //@line 28404
       } else {
        $181 = 0; //@line 28406
       }
      }
      do {
       if (!$$pre$i4$i$i51) {
        label = 54; //@line 28412
       } else {
        $160 = HEAP32[$$pre$i4$i$i51 + 12 >> 2] | 0; //@line 28415
        if (($160 | 0) == (HEAP32[$$pre$i4$i$i51 + 16 >> 2] | 0)) {
         __THREW__ = 0; //@line 28423
         $167 = invoke_ii(HEAP32[(HEAP32[$$pre$i4$i$i51 >> 2] | 0) + 36 >> 2] | 0, $$pre$i4$i$i51 | 0) | 0; //@line 28424
         $168 = __THREW__; //@line 28425
         __THREW__ = 0; //@line 28425
         if ($168 & 1) {
          break L50;
         } else {
          $$0$i$i2$i$i49 = $167; //@line 28430
         }
        } else {
         $$0$i$i2$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$160 >> 0] | 0) | 0; //@line 28435
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$2 >> 2] = 0; //@line 28440
         label = 54; //@line 28441
         break;
        } else {
         if ($181) {
          break;
         } else {
          label = 56; //@line 28447
          break;
         }
        }
       }
      } while (0);
      if ((label | 0) == 54) {
       if ($181) {
        label = 56; //@line 28455
       }
      }
      if ((label | 0) == 56) {
       HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 28461
      }
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 28463
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 28464
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 28465
      STACKTOP = sp; //@line 28466
      return $$sroa$0$0$copyload | 0; //@line 28466
     }
    }
   }
  } while (0);
  $176 = ___cxa_find_matching_catch_2() | 0; //@line 28471
  $$1 = $176; //@line 28473
  $$127 = tempRet0; //@line 28473
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9); //@line 28475
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8); //@line 28476
 ___resumeException($$1 | 0); //@line 28477
 return 0; //@line 28479
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueES8_E4typeENS6_IPKS1_EESA_SA_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$017$i = 0, $$03$i$i = 0, $$056$i$i$i = 0, $$07$i$i$i = 0, $$sroa$056$079 = 0, $$sroa$08$0$i = 0, $$sroa$speculated$$i = 0, $10 = 0, $101 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $114 = 0, $115 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $165 = 0, $166 = 0, $17 = 0, $172 = 0, $179 = 0, $181 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $44 = 0, $46 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $65 = 0, $68 = 0, $69 = 0, $77 = 0, $78 = 0, $8 = 0, $83 = 0, $84 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11592
 STACKTOP = STACKTOP + 32 | 0; //@line 11593
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11593
 $4 = sp; //@line 11594
 $5 = HEAP32[$0 >> 2] | 0; //@line 11595
 $6 = $5; //@line 11596
 $8 = (HEAP32[$1 >> 2] | 0) - $6 | 0; //@line 11598
 $10 = $5 + ((($8 | 0) / 72 | 0) * 72 | 0) | 0; //@line 11600
 $11 = HEAP32[$2 >> 2] | 0; //@line 11601
 $12 = HEAP32[$3 >> 2] | 0; //@line 11602
 $13 = $12 - $11 | 0; //@line 11603
 $14 = ($13 | 0) / 72 | 0; //@line 11604
 $16 = $11; //@line 11606
 $17 = $12; //@line 11607
 if (($13 | 0) <= 0) {
  $$0 = $10; //@line 11609
  STACKTOP = sp; //@line 11610
  return $$0 | 0; //@line 11610
 }
 $19 = HEAP32[$0 + 8 >> 2] | 0; //@line 11613
 $20 = $0 + 4 | 0; //@line 11614
 $21 = HEAP32[$20 >> 2] | 0; //@line 11615
 $22 = $21; //@line 11616
 if (($14 | 0) <= (($19 - $22 | 0) / 72 | 0 | 0)) {
  $27 = $22 - $10 | 0; //@line 11622
  $28 = ($27 | 0) / 72 | 0; //@line 11623
  if (($14 | 0) > ($28 | 0)) {
   $30 = $16 + ($28 * 72 | 0) | 0; //@line 11626
   $31 = $30; //@line 11627
   if (($30 | 0) == ($17 | 0)) {
    $181 = $21; //@line 11630
   } else {
    $33 = $21; //@line 11632
    $34 = $30; //@line 11632
    while (1) {
     __ZN13CharmFunctionC2ERKS_($33, $34); //@line 11634
     $34 = $34 + 72 | 0; //@line 11635
     $37 = (HEAP32[$20 >> 2] | 0) + 72 | 0; //@line 11637
     HEAP32[$20 >> 2] = $37; //@line 11638
     if (($34 | 0) == ($17 | 0)) {
      $181 = $37; //@line 11641
      break;
     } else {
      $33 = $37; //@line 11644
     }
    }
   }
   if (($27 | 0) > 0) {
    $$sroa$056$079 = $31; //@line 11650
    $41 = $181; //@line 11650
   } else {
    $$0 = $10; //@line 11652
    STACKTOP = sp; //@line 11653
    return $$0 | 0; //@line 11653
   }
  } else {
   $$sroa$056$079 = $12; //@line 11656
   $41 = $21; //@line 11656
  }
  $44 = $41 - ($10 + ($14 * 72 | 0)) | 0; //@line 11661
  $46 = $10 + ((($44 | 0) / 72 | 0) * 72 | 0) | 0; //@line 11663
  if ($46 >>> 0 < $21 >>> 0) {
   $$017$i = $46; //@line 11666
   $53 = $41; //@line 11666
   do {
    HEAP32[$53 >> 2] = HEAP32[$$017$i >> 2]; //@line 11669
    $54 = $53 + 4 | 0; //@line 11670
    $55 = $$017$i + 4 | 0; //@line 11671
    HEAP32[$54 >> 2] = HEAP32[$55 >> 2]; //@line 11672
    HEAP32[$54 + 4 >> 2] = HEAP32[$55 + 4 >> 2]; //@line 11672
    HEAP32[$54 + 8 >> 2] = HEAP32[$55 + 8 >> 2]; //@line 11672
    HEAP32[$55 >> 2] = 0; //@line 11673
    HEAP32[$55 + 4 >> 2] = 0; //@line 11673
    HEAP32[$55 + 8 >> 2] = 0; //@line 11673
    $56 = $53 + 16 | 0; //@line 11674
    $57 = $$017$i + 16 | 0; //@line 11675
    HEAP32[$56 >> 2] = HEAP32[$57 >> 2]; //@line 11676
    HEAP32[$56 + 4 >> 2] = HEAP32[$57 + 4 >> 2]; //@line 11676
    HEAP32[$56 + 8 >> 2] = HEAP32[$57 + 8 >> 2]; //@line 11676
    HEAP32[$56 + 12 >> 2] = HEAP32[$57 + 12 >> 2]; //@line 11676
    HEAP32[$56 + 16 >> 2] = HEAP32[$57 + 16 >> 2]; //@line 11676
    HEAP32[$56 + 20 >> 2] = HEAP32[$57 + 20 >> 2]; //@line 11676
    $58 = $53 + 40 | 0; //@line 11677
    $59 = $$017$i + 40 | 0; //@line 11678
    HEAP32[$58 >> 2] = 0; //@line 11679
    $60 = $53 + 44 | 0; //@line 11680
    HEAP32[$60 >> 2] = 0; //@line 11681
    HEAP32[$53 + 48 >> 2] = 0; //@line 11683
    HEAP32[$58 >> 2] = HEAP32[$59 >> 2]; //@line 11685
    $63 = $$017$i + 44 | 0; //@line 11686
    HEAP32[$60 >> 2] = HEAP32[$63 >> 2]; //@line 11688
    $65 = $$017$i + 48 | 0; //@line 11689
    HEAP32[$53 + 48 >> 2] = HEAP32[$65 >> 2]; //@line 11692
    HEAP32[$65 >> 2] = 0; //@line 11693
    HEAP32[$63 >> 2] = 0; //@line 11694
    HEAP32[$59 >> 2] = 0; //@line 11695
    $68 = $53 + 52 | 0; //@line 11696
    $69 = $$017$i + 52 | 0; //@line 11697
    HEAP32[$68 >> 2] = HEAP32[$69 >> 2]; //@line 11698
    HEAP32[$68 + 4 >> 2] = HEAP32[$69 + 4 >> 2]; //@line 11698
    HEAP32[$68 + 8 >> 2] = HEAP32[$69 + 8 >> 2]; //@line 11698
    HEAP32[$69 >> 2] = 0; //@line 11699
    HEAP32[$69 + 4 >> 2] = 0; //@line 11699
    HEAP32[$69 + 8 >> 2] = 0; //@line 11699
    HEAP16[$53 + 64 >> 1] = HEAP16[$$017$i + 64 >> 1] | 0; //@line 11703
    $$017$i = $$017$i + 72 | 0; //@line 11704
    $53 = (HEAP32[$20 >> 2] | 0) + 72 | 0; //@line 11706
    HEAP32[$20 >> 2] = $53; //@line 11707
   } while ($$017$i >>> 0 < $21 >>> 0);
  }
  if ($44 | 0) {
   $$056$i$i$i = $46; //@line 11718
   $$07$i$i$i = $41; //@line 11718
   do {
    $$056$i$i$i = $$056$i$i$i + -72 | 0; //@line 11720
    $$07$i$i$i = $$07$i$i$i + -72 | 0; //@line 11721
    __ZN13CharmFunctionaSEOS_($$07$i$i$i, $$056$i$i$i) | 0; //@line 11722
   } while (($$056$i$i$i | 0) != ($10 | 0));
  }
  $77 = HEAP32[$2 >> 2] | 0; //@line 11731
  $78 = $$sroa$056$079; //@line 11732
  if (($77 | 0) == ($78 | 0)) {
   $$0 = $10; //@line 11735
   STACKTOP = sp; //@line 11736
   return $$0 | 0; //@line 11736
  } else {
   $$03$i$i = $10; //@line 11738
   $$sroa$08$0$i = $77; //@line 11738
  }
  while (1) {
   HEAP32[$$03$i$i >> 2] = HEAP32[$$sroa$08$0$i >> 2]; //@line 11742
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($$03$i$i + 4 | 0, $$sroa$08$0$i + 4 | 0) | 0; //@line 11745
   $83 = $$03$i$i + 16 | 0; //@line 11746
   $84 = $$sroa$08$0$i + 16 | 0; //@line 11747
   HEAP32[$83 >> 2] = HEAP32[$84 >> 2]; //@line 11748
   HEAP32[$83 + 4 >> 2] = HEAP32[$84 + 4 >> 2]; //@line 11748
   HEAP32[$83 + 8 >> 2] = HEAP32[$84 + 8 >> 2]; //@line 11748
   HEAP32[$83 + 12 >> 2] = HEAP32[$84 + 12 >> 2]; //@line 11748
   HEAP32[$83 + 16 >> 2] = HEAP32[$84 + 16 >> 2]; //@line 11748
   HEAP32[$83 + 20 >> 2] = HEAP32[$84 + 20 >> 2]; //@line 11748
   if (($$03$i$i | 0) != ($$sroa$08$0$i | 0)) {
    __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($$03$i$i + 40 | 0, HEAP32[$$sroa$08$0$i + 40 >> 2] | 0, HEAP32[$$sroa$08$0$i + 44 >> 2] | 0); //@line 11756
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($$03$i$i + 52 | 0, $$sroa$08$0$i + 52 | 0) | 0; //@line 11760
   HEAP16[$$03$i$i + 64 >> 1] = HEAP16[$$sroa$08$0$i + 64 >> 1] | 0; //@line 11764
   $$sroa$08$0$i = $$sroa$08$0$i + 72 | 0; //@line 11765
   if (($$sroa$08$0$i | 0) == ($78 | 0)) {
    $$0 = $10; //@line 11769
    break;
   } else {
    $$03$i$i = $$03$i$i + 72 | 0; //@line 11772
   }
  }
  STACKTOP = sp; //@line 11775
  return $$0 | 0; //@line 11775
 }
 $101 = (($22 - $6 | 0) / 72 | 0) + $14 | 0; //@line 11779
 if ($101 >>> 0 > 59652323) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 11782
 }
 $105 = ($19 - $6 | 0) / 72 | 0; //@line 11787
 $107 = $105 << 1; //@line 11789
 $$sroa$speculated$$i = $105 >>> 0 < 29826161 ? $107 >>> 0 < $101 >>> 0 ? $101 : $107 : 59652323; //@line 11792
 $109 = ($8 | 0) / 72 | 0; //@line 11793
 HEAP32[$4 + 12 >> 2] = 0; //@line 11795
 HEAP32[$4 + 16 >> 2] = $0 + 8; //@line 11797
 do {
  if (!$$sroa$speculated$$i) {
   $121 = 0; //@line 11801
  } else {
   if ($$sroa$speculated$$i >>> 0 <= 59652323) {
    $121 = __Znwj($$sroa$speculated$$i * 72 | 0) | 0; //@line 11807
    break;
   }
   $114 = ___cxa_allocate_exception(8) | 0; //@line 11810
   __THREW__ = 0; //@line 11811
   invoke_vii(119, $114 | 0, 31992); //@line 11812
   $115 = __THREW__; //@line 11813
   __THREW__ = 0; //@line 11813
   if ($115 & 1) {
    $117 = ___cxa_find_matching_catch_2() | 0; //@line 11816
    ___cxa_free_exception($114 | 0); //@line 11818
    ___resumeException($117 | 0); //@line 11819
   } else {
    HEAP32[$114 >> 2] = 13224; //@line 11822
    ___cxa_throw($114 | 0, 2856, 240); //@line 11823
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $121; //@line 11828
 $122 = $121 + ($109 * 72 | 0) | 0; //@line 11829
 $123 = $4 + 8 | 0; //@line 11830
 HEAP32[$123 >> 2] = $122; //@line 11831
 $124 = $4 + 4 | 0; //@line 11832
 HEAP32[$124 >> 2] = $122; //@line 11833
 HEAP32[$4 + 12 >> 2] = $121 + ($$sroa$speculated$$i * 72 | 0); //@line 11836
 L43 : do {
  if (($16 | 0) == ($17 | 0)) {
   label = 26; //@line 11840
  } else {
   $128 = $122; //@line 11842
   $129 = $16; //@line 11842
   while (1) {
    __THREW__ = 0; //@line 11844
    invoke_vii(120, $128 | 0, $129 | 0); //@line 11845
    $130 = __THREW__; //@line 11846
    __THREW__ = 0; //@line 11846
    if ($130 & 1) {
     break L43;
    }
    $128 = (HEAP32[$123 >> 2] | 0) + 72 | 0; //@line 11852
    HEAP32[$123 >> 2] = $128; //@line 11853
    $129 = $129 + 72 | 0; //@line 11854
    if (($129 | 0) == ($17 | 0)) {
     label = 26; //@line 11857
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 26) {
  __THREW__ = 0; //@line 11866
  $136 = invoke_iiii(34, $0 | 0, $4 | 0, $10 | 0) | 0; //@line 11867
  $137 = __THREW__; //@line 11868
  __THREW__ = 0; //@line 11868
  if (!($137 & 1)) {
   $139 = HEAP32[$124 >> 2] | 0; //@line 11871
   $140 = HEAP32[$123 >> 2] | 0; //@line 11872
   if (($140 | 0) != ($139 | 0)) {
    $143 = $140; //@line 11875
    do {
     HEAP32[$123 >> 2] = $143 + -72; //@line 11878
     $144 = $143 + -20 | 0; //@line 11879
     if ((HEAP8[$144 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$144 >> 2] | 0); //@line 11885
     }
     __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($143 + -32 | 0); //@line 11888
     $150 = $143 + -68 | 0; //@line 11889
     if ((HEAP8[$150 + 11 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$150 >> 2] | 0); //@line 11895
     }
     $143 = HEAP32[$123 >> 2] | 0; //@line 11897
    } while (($143 | 0) != ($139 | 0));
   }
   $157 = HEAP32[$4 >> 2] | 0; //@line 11906
   if ($157 | 0) {
    __ZdlPv($157); //@line 11909
   }
   $$0 = $136; //@line 11911
   STACKTOP = sp; //@line 11912
   return $$0 | 0; //@line 11912
  }
 }
 $159 = ___cxa_find_matching_catch_2() | 0; //@line 11915
 $161 = HEAP32[$124 >> 2] | 0; //@line 11917
 $162 = HEAP32[$123 >> 2] | 0; //@line 11918
 if (($162 | 0) != ($161 | 0)) {
  $165 = $162; //@line 11921
  do {
   HEAP32[$123 >> 2] = $165 + -72; //@line 11924
   $166 = $165 + -20 | 0; //@line 11925
   if ((HEAP8[$166 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$166 >> 2] | 0); //@line 11931
   }
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($165 + -32 | 0); //@line 11934
   $172 = $165 + -68 | 0; //@line 11935
   if ((HEAP8[$172 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$172 >> 2] | 0); //@line 11941
   }
   $165 = HEAP32[$123 >> 2] | 0; //@line 11943
  } while (($165 | 0) != ($161 | 0));
 }
 $179 = HEAP32[$4 >> 2] | 0; //@line 11952
 if (!$179) {
  ___resumeException($159 | 0); //@line 11955
 }
 __ZdlPv($179); //@line 11958
 ___resumeException($159 | 0); //@line 11959
 return 0; //@line 11961
}
function __ZN19PredefinedFunctions14functionLookupENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP6RunnerP13RunnerContext($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05 = 0, $$1 = 0, $$16 = 0, $$2 = 0, $$27 = 0, $$pre$phi23Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $105 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $12 = 0, $121 = 0, $123 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $145 = 0, $149 = 0, $151 = 0, $153 = 0, $157 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $69 = 0, $7 = 0, $71 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $94 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16572
 STACKTOP = STACKTOP + 80 | 0; //@line 16573
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 16573
 $4 = sp + 40 | 0; //@line 16574
 $5 = sp + 72 | 0; //@line 16575
 $6 = sp + 68 | 0; //@line 16576
 $7 = sp + 64 | 0; //@line 16577
 $8 = sp; //@line 16578
 $9 = __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_($0, $1) | 0; //@line 16579
 if (!$9) {
  $11 = ___cxa_allocate_exception(8) | 0; //@line 16582
  __THREW__ = 0; //@line 16583
  invoke_vii(119, $11 | 0, 14358); //@line 16584
  $12 = __THREW__; //@line 16585
  __THREW__ = 0; //@line 16585
  if ($12 & 1) {
   $14 = ___cxa_find_matching_catch_2() | 0; //@line 16588
   ___cxa_free_exception($11 | 0); //@line 16590
   ___resumeException($14 | 0); //@line 16591
  } else {
   HEAP32[$11 >> 2] = 13244; //@line 16594
   ___cxa_throw($11 | 0, 2872, 240); //@line 16595
  }
 }
 HEAP8[$8 >> 0] = 0; //@line 16599
 $16 = $8 + 24 | 0; //@line 16600
 HEAP32[$16 >> 2] = -1; //@line 16601
 $17 = $9 + 48 | 0; //@line 16602
 $18 = HEAP32[$17 >> 2] | 0; //@line 16603
 do {
  if (($18 | 0) == -1) {
   $40 = -1; //@line 16607
  } else {
   __THREW__ = 0; //@line 16612
   invoke_viii(HEAP32[3104 + ($18 << 2) >> 2] | 0, $4 | 0, $8 | 0, $9 + 24 | 0); //@line 16613
   $23 = __THREW__; //@line 16614
   __THREW__ = 0; //@line 16614
   if (!($23 & 1)) {
    $25 = HEAP32[$17 >> 2] | 0; //@line 16617
    HEAP32[$16 >> 2] = $25; //@line 16618
    $40 = $25; //@line 16619
    break;
   }
   $26 = ___cxa_find_matching_catch_2() | 0; //@line 16622
   $28 = HEAP32[$16 >> 2] | 0; //@line 16624
   if (($28 | 0) == -1) {
    ___resumeException($26 | 0); //@line 16627
   }
   __THREW__ = 0; //@line 16632
   invoke_vii(HEAP32[3088 + ($28 << 2) >> 2] | 0, $5 | 0, $8 | 0); //@line 16633
   $32 = __THREW__; //@line 16634
   __THREW__ = 0; //@line 16634
   if ($32 & 1) {
    $34 = ___cxa_find_matching_catch_3(0) | 0; //@line 16637
    ___clang_call_terminate($34); //@line 16639
   }
   ___resumeException($26 | 0); //@line 16642
  }
 } while (0);
 $38 = HEAP8[$9 + 56 >> 0] | 0; //@line 16648
 HEAP8[$8 + 32 >> 0] = $38; //@line 16649
 L20 : do {
  if (!($38 << 24 >> 24)) {
   do {
    if (!$40) {
     $97 = HEAP32[$8 + 16 >> 2] | 0; //@line 16657
     if (!$97) {
      $99 = $4 + 16 | 0; //@line 16660
      HEAP32[$99 >> 2] = 0; //@line 16661
      HEAP32[$5 >> 2] = $2; //@line 16662
      $$pre$phi25Z2D = $99; //@line 16663
      label = 47; //@line 16664
     } else {
      if (($8 | 0) == ($97 | 0)) {
       $101 = $4 + 16 | 0; //@line 16668
       HEAP32[$101 >> 2] = $4; //@line 16669
       __THREW__ = 0; //@line 16673
       invoke_vii(HEAP32[(HEAP32[$97 >> 2] | 0) + 12 >> 2] | 0, $97 | 0, $4 | 0); //@line 16674
       $105 = __THREW__; //@line 16675
       __THREW__ = 0; //@line 16675
       if ($105 & 1) {
        label = 54; //@line 16678
        break;
       }
       $$pre$phiZ2D = $101; //@line 16682
       $114 = HEAP32[$101 >> 2] | 0; //@line 16682
      } else {
       __THREW__ = 0; //@line 16687
       $110 = invoke_ii(HEAP32[(HEAP32[$97 >> 2] | 0) + 8 >> 2] | 0, $97 | 0) | 0; //@line 16688
       $111 = __THREW__; //@line 16689
       __THREW__ = 0; //@line 16689
       if ($111 & 1) {
        label = 54; //@line 16692
        break;
       }
       $113 = $4 + 16 | 0; //@line 16695
       HEAP32[$113 >> 2] = $110; //@line 16696
       $$pre$phiZ2D = $113; //@line 16697
       $114 = $110; //@line 16697
      }
      HEAP32[$5 >> 2] = $2; //@line 16699
      if (!$114) {
       $$pre$phi25Z2D = $$pre$phiZ2D; //@line 16702
       label = 47; //@line 16703
      } else {
       __THREW__ = 0; //@line 16708
       invoke_vii(HEAP32[(HEAP32[$114 >> 2] | 0) + 24 >> 2] | 0, $114 | 0, $5 | 0); //@line 16709
       $121 = __THREW__; //@line 16710
       __THREW__ = 0; //@line 16710
       if ($121 & 1) {
        $$pre$phi24Z2D = $$pre$phiZ2D; //@line 16713
       } else {
        $123 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 16715
        if (($4 | 0) == ($123 | 0)) {
         FUNCTION_TABLE_vi[HEAP32[(HEAP32[$123 >> 2] | 0) + 16 >> 2] & 511]($123); //@line 16721
        } else {
         if ($123 | 0) {
          FUNCTION_TABLE_vi[HEAP32[(HEAP32[$123 >> 2] | 0) + 20 >> 2] & 511]($123); //@line 16728
         }
        }
        label = 60; //@line 16731
        break L20;
       }
      }
     }
     if ((label | 0) == 47) {
      $116 = ___cxa_allocate_exception(4) | 0; //@line 16737
      HEAP32[$116 >> 2] = 3120; //@line 16738
      __THREW__ = 0; //@line 16739
      invoke_viii(16, $116 | 0, 96, 7); //@line 16740
      __THREW__ = 0; //@line 16741
      $$pre$phi24Z2D = $$pre$phi25Z2D; //@line 16742
     }
     $134 = ___cxa_find_matching_catch_2() | 0; //@line 16744
     $135 = tempRet0; //@line 16745
     $136 = HEAP32[$$pre$phi24Z2D >> 2] | 0; //@line 16746
     if (($4 | 0) == ($136 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$136 >> 2] | 0) + 16 >> 2] & 511]($136); //@line 16752
      $$1 = $135; //@line 16753
      $$16 = $134; //@line 16753
      break;
     }
     if (!$136) {
      $$1 = $135; //@line 16758
      $$16 = $134; //@line 16758
     } else {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$136 >> 2] | 0) + 20 >> 2] & 511]($136); //@line 16763
      $$1 = $135; //@line 16764
      $$16 = $134; //@line 16764
     }
    } else {
     $94 = ___cxa_allocate_exception(4) | 0; //@line 16767
     HEAP32[$94 >> 2] = 13040; //@line 16768
     __THREW__ = 0; //@line 16769
     invoke_viii(16, $94 | 0, 2712, 7); //@line 16770
     __THREW__ = 0; //@line 16771
     label = 54; //@line 16772
    }
   } while (0);
   if ((label | 0) == 54) {
    $132 = ___cxa_find_matching_catch_2() | 0; //@line 16776
    $$1 = tempRet0; //@line 16778
    $$16 = $132; //@line 16778
   }
   $$2 = $$1; //@line 16780
   $$27 = $$16; //@line 16780
   label = 65; //@line 16781
  } else {
   L52 : do {
    if (($40 | 0) == 1) {
     $45 = HEAP32[$8 + 16 >> 2] | 0; //@line 16787
     do {
      if (!$45) {
       $47 = $4 + 16 | 0; //@line 16791
       HEAP32[$47 >> 2] = 0; //@line 16792
       $$pre$phi23Z2D = $47; //@line 16793
       $62 = 0; //@line 16793
      } else {
       if (($8 | 0) == ($45 | 0)) {
        $49 = $4 + 16 | 0; //@line 16797
        HEAP32[$49 >> 2] = $4; //@line 16798
        __THREW__ = 0; //@line 16802
        invoke_vii(HEAP32[(HEAP32[$45 >> 2] | 0) + 12 >> 2] | 0, $45 | 0, $4 | 0); //@line 16803
        $53 = __THREW__; //@line 16804
        __THREW__ = 0; //@line 16804
        if ($53 & 1) {
         label = 31; //@line 16807
         break L52;
        }
        $$pre$phi23Z2D = $49; //@line 16811
        $62 = HEAP32[$49 >> 2] | 0; //@line 16811
        break;
       } else {
        __THREW__ = 0; //@line 16817
        $58 = invoke_ii(HEAP32[(HEAP32[$45 >> 2] | 0) + 8 >> 2] | 0, $45 | 0) | 0; //@line 16818
        $59 = __THREW__; //@line 16819
        __THREW__ = 0; //@line 16819
        if ($59 & 1) {
         label = 31; //@line 16822
         break L52;
        }
        $61 = $4 + 16 | 0; //@line 16825
        HEAP32[$61 >> 2] = $58; //@line 16826
        $$pre$phi23Z2D = $61; //@line 16827
        $62 = $58; //@line 16827
        break;
       }
      }
     } while (0);
     HEAP32[$6 >> 2] = $2; //@line 16832
     HEAP32[$7 >> 2] = $3; //@line 16833
     if (!$62) {
      $64 = ___cxa_allocate_exception(4) | 0; //@line 16836
      HEAP32[$64 >> 2] = 3120; //@line 16837
      __THREW__ = 0; //@line 16838
      invoke_viii(16, $64 | 0, 96, 7); //@line 16839
      __THREW__ = 0; //@line 16840
     } else {
      __THREW__ = 0; //@line 16845
      invoke_viii(HEAP32[(HEAP32[$62 >> 2] | 0) + 24 >> 2] | 0, $62 | 0, $6 | 0, $7 | 0); //@line 16846
      $69 = __THREW__; //@line 16847
      __THREW__ = 0; //@line 16847
      if (!($69 & 1)) {
       $71 = HEAP32[$$pre$phi23Z2D >> 2] | 0; //@line 16850
       if (($4 | 0) == ($71 | 0)) {
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$71 >> 2] | 0) + 16 >> 2] & 511]($71); //@line 16856
       } else {
        if ($71 | 0) {
         FUNCTION_TABLE_vi[HEAP32[(HEAP32[$71 >> 2] | 0) + 20 >> 2] & 511]($71); //@line 16863
        }
       }
       label = 60; //@line 16866
       break L20;
      }
     }
     $82 = ___cxa_find_matching_catch_2() | 0; //@line 16870
     $83 = tempRet0; //@line 16871
     $84 = HEAP32[$$pre$phi23Z2D >> 2] | 0; //@line 16872
     if (($4 | 0) == ($84 | 0)) {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$84 >> 2] | 0) + 16 >> 2] & 511]($84); //@line 16878
      $$0 = $83; //@line 16879
      $$05 = $82; //@line 16879
      break;
     }
     if (!$84) {
      $$0 = $83; //@line 16884
      $$05 = $82; //@line 16884
     } else {
      FUNCTION_TABLE_vi[HEAP32[(HEAP32[$84 >> 2] | 0) + 20 >> 2] & 511]($84); //@line 16889
      $$0 = $83; //@line 16890
      $$05 = $82; //@line 16890
     }
    } else {
     $42 = ___cxa_allocate_exception(4) | 0; //@line 16893
     HEAP32[$42 >> 2] = 13040; //@line 16894
     __THREW__ = 0; //@line 16895
     invoke_viii(16, $42 | 0, 2712, 7); //@line 16896
     __THREW__ = 0; //@line 16897
     label = 31; //@line 16898
    }
   } while (0);
   if ((label | 0) == 31) {
    $80 = ___cxa_find_matching_catch_2() | 0; //@line 16902
    $$0 = tempRet0; //@line 16904
    $$05 = $80; //@line 16904
   }
   $$2 = $$0; //@line 16906
   $$27 = $$05; //@line 16906
   label = 65; //@line 16907
  }
 } while (0);
 if ((label | 0) == 60) {
  $145 = HEAP32[$16 >> 2] | 0; //@line 16911
  if (($145 | 0) == -1) {
   STACKTOP = sp; //@line 16914
   return;
  }
  __THREW__ = 0; //@line 16918
  invoke_vii(HEAP32[3088 + ($145 << 2) >> 2] | 0, $4 | 0, $8 | 0); //@line 16919
  $149 = __THREW__; //@line 16920
  __THREW__ = 0; //@line 16920
  if ($149 & 1) {
   $151 = ___cxa_find_matching_catch_3(0) | 0; //@line 16923
   ___clang_call_terminate($151); //@line 16925
  }
  STACKTOP = sp; //@line 16928
  return;
 } else if ((label | 0) == 65) {
  $153 = HEAP32[$16 >> 2] | 0; //@line 16931
  if (($153 | 0) == -1) {
   ___resumeException($$27 | 0); //@line 16934
  }
  __THREW__ = 0; //@line 16939
  invoke_vii(HEAP32[3088 + ($153 << 2) >> 2] | 0, $4 | 0, $8 | 0); //@line 16940
  $157 = __THREW__; //@line 16941
  __THREW__ = 0; //@line 16941
  if ($157 & 1) {
   $159 = ___cxa_find_matching_catch_3(0) | 0; //@line 16944
   ___clang_call_terminate($159); //@line 16946
  }
  ___resumeException($$27 | 0); //@line 16949
 }
}
function __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE20__add_front_capacityEv($0) {
 $0 = $0 | 0;
 var $$049 = 0, $$1 = 0, $$116 = 0, $$in = 0, $$in$i = 0, $$pre$phi54Z2D = 0, $$pre$phi55Z2D = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$sroa$13$0$i = 0, $$sroa$13$1$i = 0, $$sroa$speculated = 0, $$sroa$speculated$i = 0, $1 = 0, $100 = 0, $102 = 0, $105 = 0, $106 = 0, $109 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $128 = 0, $13 = 0, $134 = 0, $137 = 0, $139 = 0, $143 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $161 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $31 = 0, $39 = 0, $4 = 0, $40 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12799
 STACKTOP = STACKTOP + 32 | 0; //@line 12800
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12800
 $1 = sp + 4 | 0; //@line 12801
 $2 = sp; //@line 12802
 $3 = $0 + 8 | 0; //@line 12803
 $4 = HEAP32[$3 >> 2] | 0; //@line 12804
 $5 = $0 + 4 | 0; //@line 12805
 $6 = HEAP32[$5 >> 2] | 0; //@line 12806
 $7 = $4 - $6 | 0; //@line 12807
 $8 = $7 >> 2; //@line 12808
 $12 = $0 + 16 | 0; //@line 12813
 $13 = HEAP32[$12 >> 2] | 0; //@line 12814
 if (((($8 | 0) == 0 ? 0 : ($8 * 56 | 0) + -1 | 0) - ((HEAP32[$0 + 20 >> 2] | 0) + $13) | 0) >>> 0 > 55) {
  HEAP32[$12 >> 2] = $13 + 56; //@line 12823
  $20 = $4 + -4 | 0; //@line 12824
  HEAP32[$1 >> 2] = HEAP32[$20 >> 2]; //@line 12826
  HEAP32[$3 >> 2] = $20; //@line 12827
  __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE10push_frontERKS2_($0, $1); //@line 12828
  STACKTOP = sp; //@line 12829
  return;
 }
 $22 = $0 + 12 | 0; //@line 12831
 $24 = HEAP32[$0 >> 2] | 0; //@line 12833
 $25 = (HEAP32[$22 >> 2] | 0) - $24 | 0; //@line 12834
 if ($7 >>> 0 < $25 >>> 0) {
  if (($6 | 0) == ($24 | 0)) {
   HEAP32[$1 >> 2] = __Znwj(4032) | 0; //@line 12840
   __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE9push_backEOS2_($0, $1); //@line 12841
   $31 = (HEAP32[$3 >> 2] | 0) + -4 | 0; //@line 12843
   HEAP32[$1 >> 2] = HEAP32[$31 >> 2]; //@line 12845
   HEAP32[$3 >> 2] = $31; //@line 12846
   __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE10push_frontERKS2_($0, $1); //@line 12847
  } else {
   HEAP32[$1 >> 2] = __Znwj(4032) | 0; //@line 12850
   __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE10push_frontEOS2_($0, $1); //@line 12851
  }
  if (((HEAP32[$3 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) | 0) == 4) {
   $39 = 28; //@line 12858
  } else {
   $39 = (HEAP32[$12 >> 2] | 0) + 56 | 0; //@line 12862
  }
  HEAP32[$12 >> 2] = $39; //@line 12864
  STACKTOP = sp; //@line 12865
  return;
 }
 $40 = $25 >> 1; //@line 12867
 $$sroa$speculated = ($40 | 0) == 0 ? 1 : $40; //@line 12869
 HEAP32[$1 + 12 >> 2] = 0; //@line 12872
 HEAP32[$1 + 16 >> 2] = $0 + 12; //@line 12874
 if ($$sroa$speculated >>> 0 > 1073741823) {
  $46 = ___cxa_allocate_exception(8) | 0; //@line 12877
  __THREW__ = 0; //@line 12878
  invoke_vii(119, $46 | 0, 31992); //@line 12879
  $47 = __THREW__; //@line 12880
  __THREW__ = 0; //@line 12880
  if ($47 & 1) {
   $49 = ___cxa_find_matching_catch_2() | 0; //@line 12883
   ___cxa_free_exception($46 | 0); //@line 12885
   ___resumeException($49 | 0); //@line 12886
  } else {
   HEAP32[$46 >> 2] = 13224; //@line 12889
   ___cxa_throw($46 | 0, 2856, 240); //@line 12890
  }
 }
 $52 = __Znwj($$sroa$speculated << 2) | 0; //@line 12895
 HEAP32[$1 >> 2] = $52; //@line 12896
 $53 = $1 + 8 | 0; //@line 12897
 HEAP32[$53 >> 2] = $52; //@line 12898
 $54 = $1 + 4 | 0; //@line 12899
 HEAP32[$54 >> 2] = $52; //@line 12900
 $56 = $1 + 12 | 0; //@line 12902
 HEAP32[$56 >> 2] = $52 + ($$sroa$speculated << 2); //@line 12903
 __THREW__ = 0; //@line 12904
 $57 = invoke_ii(142, 4032) | 0; //@line 12905
 $58 = __THREW__; //@line 12906
 __THREW__ = 0; //@line 12906
 L22 : do {
  if ($58 & 1) {
   $79 = ___cxa_find_matching_catch_2() | 0; //@line 12910
   $$1 = tempRet0; //@line 12912
   $$116 = $79; //@line 12912
  } else {
   HEAP32[$2 >> 2] = $57; //@line 12914
   __THREW__ = 0; //@line 12915
   invoke_vii(123, $1 | 0, $2 | 0); //@line 12916
   $60 = __THREW__; //@line 12917
   __THREW__ = 0; //@line 12917
   if ($60 & 1) {
    $151 = ___cxa_find_matching_catch_2() | 0; //@line 12920
    $152 = tempRet0; //@line 12921
    __ZdlPv($57); //@line 12922
    $$1 = $152; //@line 12923
    $$116 = $151; //@line 12923
    break;
   }
   $62 = HEAP32[$5 >> 2] | 0; //@line 12926
   $63 = HEAP32[$3 >> 2] | 0; //@line 12927
   L28 : do {
    if (($62 | 0) == ($63 | 0)) {
     $$in = $63; //@line 12933
     $$pre$phi54Z2D = $54; //@line 12933
     $$pre$phi55Z2D = $53; //@line 12933
     $$pre$phi57Z2D = $56; //@line 12933
     $$pre$phiZ2D = $1; //@line 12933
     $72 = $62; //@line 12933
     $73 = HEAP32[$53 >> 2] | 0; //@line 12933
    } else {
     $$049 = $62; //@line 12936
     $82 = HEAP32[$53 >> 2] | 0; //@line 12936
     L31 : while (1) {
      $81 = HEAP32[$56 >> 2] | 0; //@line 12938
      $84 = $81; //@line 12940
      do {
       if (($82 | 0) == ($81 | 0)) {
        $85 = HEAP32[$54 >> 2] | 0; //@line 12943
        $86 = HEAP32[$1 >> 2] | 0; //@line 12944
        $88 = $86; //@line 12946
        if ($85 >>> 0 > $86 >>> 0) {
         $89 = $85; //@line 12948
         $93 = (($89 - $88 >> 2) + 1 | 0) / -2 | 0; //@line 12952
         $94 = $85 + ($93 << 2) | 0; //@line 12953
         $95 = $84 - $89 | 0; //@line 12954
         $96 = $95 >> 2; //@line 12955
         if (!$96) {
          $100 = $85; //@line 12958
         } else {
          _memmove($94 | 0, $85 | 0, $95 | 0) | 0; //@line 12960
          $100 = HEAP32[$54 >> 2] | 0; //@line 12962
         }
         $98 = $94 + ($96 << 2) | 0; //@line 12964
         HEAP32[$53 >> 2] = $98; //@line 12965
         HEAP32[$54 >> 2] = $100 + ($93 << 2); //@line 12967
         $134 = $98; //@line 12968
         break;
        }
        $102 = $84 - $88 >> 1; //@line 12972
        $$sroa$speculated$i = ($102 | 0) == 0 ? 1 : $102; //@line 12974
        if ($$sroa$speculated$i >>> 0 > 1073741823) {
         label = 28; //@line 12977
         break L31;
        }
        __THREW__ = 0; //@line 12981
        $114 = invoke_ii(142, $$sroa$speculated$i << 2 | 0) | 0; //@line 12982
        $115 = __THREW__; //@line 12983
        __THREW__ = 0; //@line 12983
        if ($115 & 1) {
         label = 37; //@line 12986
         break L31;
        }
        $118 = $114; //@line 12990
        $119 = $114 + ($$sroa$speculated$i >>> 2 << 2) | 0; //@line 12991
        $120 = $119; //@line 12992
        $122 = $114 + ($$sroa$speculated$i << 2) | 0; //@line 12994
        if (($85 | 0) == ($82 | 0)) {
         $$sroa$13$1$i = $120; //@line 12997
        } else {
         $$in$i = $119; //@line 12999
         $$sroa$13$0$i = $120; //@line 12999
         $125 = $85; //@line 12999
         while (1) {
          HEAP32[$$in$i >> 2] = HEAP32[$125 >> 2]; //@line 13002
          $$in$i = $$sroa$13$0$i + 4 | 0; //@line 13004
          $128 = $$in$i; //@line 13005
          $125 = $125 + 4 | 0; //@line 13006
          if (($125 | 0) == ($82 | 0)) {
           $$sroa$13$1$i = $128; //@line 13009
           break;
          } else {
           $$sroa$13$0$i = $128; //@line 13012
          }
         }
        }
        HEAP32[$1 >> 2] = $118; //@line 13016
        HEAP32[$54 >> 2] = $120; //@line 13017
        HEAP32[$53 >> 2] = $$sroa$13$1$i; //@line 13018
        HEAP32[$56 >> 2] = $122; //@line 13019
        if (!$86) {
         $134 = $$sroa$13$1$i; //@line 13023
        } else {
         __ZdlPv($86); //@line 13025
         $134 = HEAP32[$53 >> 2] | 0; //@line 13027
        }
       } else {
        $134 = $82; //@line 13030
       }
      } while (0);
      HEAP32[$134 >> 2] = HEAP32[$$049 >> 2]; //@line 13034
      $82 = (HEAP32[$53 >> 2] | 0) + 4 | 0; //@line 13036
      HEAP32[$53 >> 2] = $82; //@line 13037
      $$049 = $$049 + 4 | 0; //@line 13038
      $137 = HEAP32[$3 >> 2] | 0; //@line 13039
      if (($$049 | 0) == ($137 | 0)) {
       label = 19; //@line 13042
       break;
      }
     }
     do {
      if ((label | 0) == 19) {
       $$in = $137; //@line 13052
       $$pre$phi54Z2D = $54; //@line 13052
       $$pre$phi55Z2D = $53; //@line 13052
       $$pre$phi57Z2D = $56; //@line 13052
       $$pre$phiZ2D = $1; //@line 13052
       $72 = HEAP32[$5 >> 2] | 0; //@line 13052
       $73 = $82; //@line 13052
       break L28;
      } else if ((label | 0) == 28) {
       $105 = ___cxa_allocate_exception(8) | 0; //@line 13056
       __THREW__ = 0; //@line 13057
       invoke_vii(119, $105 | 0, 31992); //@line 13058
       $106 = __THREW__; //@line 13059
       __THREW__ = 0; //@line 13059
       if ($106 & 1) {
        $111 = ___cxa_find_matching_catch_2() | 0; //@line 13062
        $112 = tempRet0; //@line 13063
        ___cxa_free_exception($105 | 0); //@line 13064
        $eh$lpad$body$index3Z2D = $112; //@line 13065
        $eh$lpad$body$indexZ2D = $111; //@line 13065
        break;
       } else {
        HEAP32[$105 >> 2] = 13224; //@line 13068
        __THREW__ = 0; //@line 13069
        invoke_viii(16, $105 | 0, 2856, 240); //@line 13070
        __THREW__ = 0; //@line 13071
        $109 = ___cxa_find_matching_catch_2() | 0; //@line 13072
        $eh$lpad$body$index3Z2D = tempRet0; //@line 13074
        $eh$lpad$body$indexZ2D = $109; //@line 13074
        break;
       }
      } else if ((label | 0) == 37) {
       $139 = ___cxa_find_matching_catch_2() | 0; //@line 13079
       $eh$lpad$body$index3Z2D = tempRet0; //@line 13081
       $eh$lpad$body$indexZ2D = $139; //@line 13081
      }
     } while (0);
     $$1 = $eh$lpad$body$index3Z2D; //@line 13084
     $$116 = $eh$lpad$body$indexZ2D; //@line 13084
     break L22;
    }
   } while (0);
   $69 = HEAP32[$0 >> 2] | 0; //@line 13089
   HEAP32[$0 >> 2] = HEAP32[$$pre$phiZ2D >> 2]; //@line 13091
   HEAP32[$$pre$phiZ2D >> 2] = $69; //@line 13092
   $71 = HEAP32[$$pre$phi54Z2D >> 2] | 0; //@line 13093
   HEAP32[$5 >> 2] = $71; //@line 13094
   HEAP32[$$pre$phi54Z2D >> 2] = $72; //@line 13095
   HEAP32[$3 >> 2] = $73; //@line 13096
   HEAP32[$$pre$phi55Z2D >> 2] = $$in; //@line 13097
   $74 = HEAP32[$22 >> 2] | 0; //@line 13098
   HEAP32[$22 >> 2] = HEAP32[$$pre$phi57Z2D >> 2]; //@line 13100
   HEAP32[$$pre$phi57Z2D >> 2] = $74; //@line 13101
   if (($73 - $71 | 0) == 4) {
    $143 = 28; //@line 13106
   } else {
    $143 = (HEAP32[$12 >> 2] | 0) + 56 | 0; //@line 13110
   }
   HEAP32[$12 >> 2] = $143; //@line 13112
   if (($$in | 0) != ($72 | 0)) {
    HEAP32[$53 >> 2] = $$in + (~(($$in + -4 - $72 | 0) >>> 2) << 2); //@line 13121
   }
   if ($69 | 0) {
    __ZdlPv($69); //@line 13126
   }
   STACKTOP = sp; //@line 13128
   return;
  }
 } while (0);
 $153 = HEAP32[$54 >> 2] | 0; //@line 13131
 $154 = HEAP32[$53 >> 2] | 0; //@line 13132
 if (($154 | 0) != ($153 | 0)) {
  HEAP32[$53 >> 2] = $154 + (~(($154 + -4 - $153 | 0) >>> 2) << 2); //@line 13142
 }
 $161 = HEAP32[$1 >> 2] | 0; //@line 13144
 if (!$161) {
  ___resumeException($$116 | 0); //@line 13147
 }
 __ZdlPv($161); //@line 13150
 ___resumeException($$116 | 0); //@line 13151
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i134 = 0, $$0111 = 0, $$0112 = 0, $$0114 = 0, $$0116 = 0, $$07$i$i = 0, $$07$i$i133 = 0, $$1 = 0, $$1113 = 0, $$1115 = 0, $$1117 = 0, $$2 = 0, $$2118 = 0, $$3 = 0, $$pre$phiZ2D = 0, $100 = 0, $106 = 0, $107 = 0, $109 = 0, $111 = 0, $119 = 0, $123 = 0, $125 = 0, $13 = 0, $137 = 0, $138 = 0, $140 = 0, $145 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $160 = 0, $162 = 0, $163 = 0, $168 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $21 = 0, $23 = 0, $29 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $44 = 0, $45 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $8 = 0, $83 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 37605
 STACKTOP = STACKTOP + 16 | 0; //@line 37606
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 37606
 $7 = sp; //@line 37607
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 35544) | 0; //@line 37608
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 35552) | 0; //@line 37609
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 255]($7, $9); //@line 37613
 HEAP32[$5 >> 2] = $3; //@line 37614
 $13 = HEAP8[$0 >> 0] | 0; //@line 37615
 switch ($13 << 24 >> 24) {
 case 43:
 case 45:
  {
   __THREW__ = 0; //@line 37621
   $17 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, $13 | 0) | 0; //@line 37622
   $18 = __THREW__; //@line 37623
   __THREW__ = 0; //@line 37623
   if (!($18 & 1)) {
    $21 = HEAP32[$5 >> 2] | 0; //@line 37627
    HEAP32[$5 >> 2] = $21 + 4; //@line 37629
    HEAP32[$21 >> 2] = $17; //@line 37630
    $$0114 = $0 + 1 | 0; //@line 37631
    label = 4; //@line 37632
   }
   break;
  }
 default:
  {
   $$0114 = $0; //@line 37637
   label = 4; //@line 37638
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $23 = $2; //@line 37643
   L6 : do {
    if (($23 - $$0114 | 0) > 1) {
     if ((HEAP8[$$0114 >> 0] | 0) == 48) {
      $29 = $$0114 + 1 | 0; //@line 37652
      switch (HEAP8[$29 >> 0] | 0) {
      case 88:
      case 120:
       {
        break;
       }
      default:
       {
        $$1117 = $$0114; //@line 37659
        label = 15; //@line 37660
        break L6;
       }
      }
      __THREW__ = 0; //@line 37667
      $34 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, 48) | 0; //@line 37668
      $35 = __THREW__; //@line 37669
      __THREW__ = 0; //@line 37669
      if ($35 & 1) {
       break L4;
      }
      $37 = HEAP32[$5 >> 2] | 0; //@line 37674
      HEAP32[$5 >> 2] = $37 + 4; //@line 37676
      HEAP32[$37 >> 2] = $34; //@line 37677
      $39 = $$0114 + 2 | 0; //@line 37678
      __THREW__ = 0; //@line 37683
      $44 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, HEAP8[$29 >> 0] | 0) | 0; //@line 37684
      $45 = __THREW__; //@line 37685
      __THREW__ = 0; //@line 37685
      if ($45 & 1) {
       break L4;
      }
      $47 = HEAP32[$5 >> 2] | 0; //@line 37690
      HEAP32[$5 >> 2] = $47 + 4; //@line 37692
      HEAP32[$47 >> 2] = $44; //@line 37693
      $$0116 = $39; //@line 37694
      while (1) {
       if ($$0116 >>> 0 >= $2 >>> 0) {
        $$1115 = $39; //@line 37698
        $$2118 = $$0116; //@line 37698
        break L6;
       }
       $50 = HEAP8[$$0116 >> 0] | 0; //@line 37701
       __THREW__ = 0; //@line 37702
       $51 = invoke_i(2) | 0; //@line 37703
       $52 = __THREW__; //@line 37704
       __THREW__ = 0; //@line 37704
       if ($52 & 1) {
        break L4;
       }
       __THREW__ = 0; //@line 37710
       $55 = invoke_iii(74, $50 << 24 >> 24 | 0, $51 | 0) | 0; //@line 37711
       $56 = __THREW__; //@line 37712
       __THREW__ = 0; //@line 37712
       if ($56 & 1) {
        break L4;
       }
       if (!$55) {
        $$1115 = $39; //@line 37719
        $$2118 = $$0116; //@line 37719
        break L6;
       }
       $$0116 = $$0116 + 1 | 0; //@line 37723
      }
     } else {
      $$1117 = $$0114; //@line 37726
      label = 15; //@line 37727
     }
    } else {
     $$1117 = $$0114; //@line 37730
     label = 15; //@line 37731
    }
   } while (0);
   L18 : do {
    if ((label | 0) == 15) {
     while (1) {
      label = 0; //@line 37737
      if ($$1117 >>> 0 >= $2 >>> 0) {
       $$1115 = $$0114; //@line 37740
       $$2118 = $$1117; //@line 37740
       break L18;
      }
      $61 = HEAP8[$$1117 >> 0] | 0; //@line 37743
      __THREW__ = 0; //@line 37744
      $62 = invoke_i(2) | 0; //@line 37745
      $63 = __THREW__; //@line 37746
      __THREW__ = 0; //@line 37746
      if ($63 & 1) {
       break L4;
      }
      __THREW__ = 0; //@line 37752
      $66 = invoke_iii(75, $61 << 24 >> 24 | 0, $62 | 0) | 0; //@line 37753
      $67 = __THREW__; //@line 37754
      __THREW__ = 0; //@line 37754
      if ($67 & 1) {
       break L4;
      }
      if (!$66) {
       $$1115 = $$0114; //@line 37761
       $$2118 = $$1117; //@line 37761
       break L18;
      }
      $$1117 = $$1117 + 1 | 0; //@line 37765
      label = 15; //@line 37766
     }
    }
   } while (0);
   $71 = $7 + 11 | 0; //@line 37770
   $72 = HEAP8[$71 >> 0] | 0; //@line 37771
   $74 = $7 + 4 | 0; //@line 37773
   L26 : do {
    if (!(($72 << 24 >> 24 < 0 ? HEAP32[$74 >> 2] | 0 : $72 & 255) | 0)) {
     __THREW__ = 0; //@line 37784
     invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0, $8 | 0, $$1115 | 0, $$2118 | 0, HEAP32[$5 >> 2] | 0) | 0; //@line 37785
     $83 = __THREW__; //@line 37786
     __THREW__ = 0; //@line 37786
     if ($83 & 1) {
      break L4;
     }
     $89 = (HEAP32[$5 >> 2] | 0) + ($$2118 - $$1115 << 2) | 0; //@line 37795
     HEAP32[$5 >> 2] = $89; //@line 37796
     $$pre$phiZ2D = $8; //@line 37797
     $182 = $89; //@line 37797
    } else {
     L30 : do {
      if (($$1115 | 0) != ($$2118 | 0)) {
       $$0$i$i = $$2118; //@line 37802
       $$07$i$i = $$1115; //@line 37802
       while (1) {
        $91 = $$0$i$i + -1 | 0; //@line 37804
        if ($$07$i$i >>> 0 >= $91 >>> 0) {
         break L30;
        }
        $93 = HEAP8[$$07$i$i >> 0] | 0; //@line 37809
        HEAP8[$$07$i$i >> 0] = HEAP8[$91 >> 0] | 0; //@line 37811
        HEAP8[$91 >> 0] = $93; //@line 37812
        $$0$i$i = $91; //@line 37814
        $$07$i$i = $$07$i$i + 1 | 0; //@line 37814
       }
      }
     } while (0);
     __THREW__ = 0; //@line 37821
     $99 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0, $9 | 0) | 0; //@line 37822
     $100 = __THREW__; //@line 37823
     __THREW__ = 0; //@line 37823
     if ($100 & 1) {
      break L4;
     }
     $$0 = $$1115; //@line 37828
     $$0111 = 0; //@line 37828
     $$0112 = 0; //@line 37828
     while (1) {
      if ($$0 >>> 0 >= $$2118 >>> 0) {
       break;
      }
      $119 = HEAP8[((HEAP8[$71 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$0111 >> 0] | 0; //@line 37839
      if ($119 << 24 >> 24 > 0 & ($$0112 | 0) == ($119 << 24 >> 24 | 0)) {
       $123 = HEAP32[$5 >> 2] | 0; //@line 37845
       HEAP32[$5 >> 2] = $123 + 4; //@line 37847
       HEAP32[$123 >> 2] = $99; //@line 37848
       $125 = HEAP8[$71 >> 0] | 0; //@line 37849
       $$1 = $$0111 + ($$0111 >>> 0 < (($125 << 24 >> 24 < 0 ? HEAP32[$74 >> 2] | 0 : $125 & 255) + -1 | 0) >>> 0 & 1) | 0; //@line 37858
       $$1113 = 0; //@line 37858
      } else {
       $$1 = $$0111; //@line 37860
       $$1113 = $$0112; //@line 37860
      }
      __THREW__ = 0; //@line 37866
      $137 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, HEAP8[$$0 >> 0] | 0) | 0; //@line 37867
      $138 = __THREW__; //@line 37868
      __THREW__ = 0; //@line 37868
      if ($138 & 1) {
       break L4;
      }
      $140 = HEAP32[$5 >> 2] | 0; //@line 37873
      HEAP32[$5 >> 2] = $140 + 4; //@line 37875
      HEAP32[$140 >> 2] = $137; //@line 37876
      $$0 = $$0 + 1 | 0; //@line 37879
      $$0111 = $$1; //@line 37879
      $$0112 = $$1113 + 1 | 0; //@line 37879
     }
     $106 = $3 + ($$1115 - $0 << 2) | 0; //@line 37884
     $107 = HEAP32[$5 >> 2] | 0; //@line 37885
     if (($106 | 0) == ($107 | 0)) {
      $$pre$phiZ2D = $8; //@line 37888
      $182 = $106; //@line 37888
     } else {
      $$0$i$i134 = $107; //@line 37890
      $$07$i$i133 = $106; //@line 37890
      while (1) {
       $109 = $$0$i$i134 + -4 | 0; //@line 37892
       if ($$07$i$i133 >>> 0 >= $109 >>> 0) {
        $$pre$phiZ2D = $8; //@line 37895
        $182 = $107; //@line 37895
        break L26;
       }
       $111 = HEAP32[$$07$i$i133 >> 2] | 0; //@line 37898
       HEAP32[$$07$i$i133 >> 2] = HEAP32[$109 >> 2]; //@line 37900
       HEAP32[$109 >> 2] = $111; //@line 37901
       $$0$i$i134 = $109; //@line 37903
       $$07$i$i133 = $$07$i$i133 + 4 | 0; //@line 37903
      }
     }
    }
   } while (0);
   $$2 = $$2118; //@line 37908
   $183 = $182; //@line 37908
   while (1) {
    if ($$2 >>> 0 >= $2 >>> 0) {
     $$3 = $$2; //@line 37912
     $168 = $183; //@line 37912
     break;
    }
    $145 = HEAP8[$$2 >> 0] | 0; //@line 37915
    if ($145 << 24 >> 24 == 46) {
     label = 39; //@line 37918
     break;
    }
    __THREW__ = 0; //@line 37924
    $159 = invoke_iii(HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] | 0, $8 | 0, $145 | 0) | 0; //@line 37925
    $160 = __THREW__; //@line 37926
    __THREW__ = 0; //@line 37926
    if ($160 & 1) {
     break L4;
    }
    $162 = HEAP32[$5 >> 2] | 0; //@line 37931
    $163 = $162 + 4 | 0; //@line 37932
    HEAP32[$5 >> 2] = $163; //@line 37933
    HEAP32[$162 >> 2] = $159; //@line 37934
    $$2 = $$2 + 1 | 0; //@line 37936
    $183 = $163; //@line 37936
   }
   if ((label | 0) == 39) {
    __THREW__ = 0; //@line 37942
    $150 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0, $9 | 0) | 0; //@line 37943
    $151 = __THREW__; //@line 37944
    __THREW__ = 0; //@line 37944
    if ($151 & 1) {
     break;
    }
    $153 = HEAP32[$5 >> 2] | 0; //@line 37949
    $154 = $153 + 4 | 0; //@line 37950
    HEAP32[$5 >> 2] = $154; //@line 37951
    HEAP32[$153 >> 2] = $150; //@line 37952
    $$3 = $$2 + 1 | 0; //@line 37954
    $168 = $154; //@line 37954
   }
   __THREW__ = 0; //@line 37959
   invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0, $8 | 0, $$3 | 0, $2 | 0, $168 | 0) | 0; //@line 37960
   $169 = __THREW__; //@line 37961
   __THREW__ = 0; //@line 37961
   if (!($169 & 1)) {
    $174 = (HEAP32[$5 >> 2] | 0) + ($23 - $$3 << 2) | 0; //@line 37967
    HEAP32[$5 >> 2] = $174; //@line 37968
    HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $174 : $3 + ($1 - $0 << 2) | 0; //@line 37975
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 37976
    STACKTOP = sp; //@line 37977
    return;
   }
  }
 } while (0);
 $180 = ___cxa_find_matching_catch_2() | 0; //@line 37981
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 37983
 ___resumeException($180 | 0); //@line 37984
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i54 = 0, $$0$i$i56 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$049 = 0, $$1 = 0, $$150 = 0, $$2 = 0, $$251 = 0, $$3 = 0, $$352 = 0, $$4 = 0, $$453 = 0, $$byval_copy = 0, $$sink1 = 0, $$sink102 = 0, $$sink103 = 0, $$sroa$068$0 = 0, $$sroa$068$1 = 0, $$sroa$080$0 = 0, $$sroa$080$1 = 0, $$sroa$080$2 = 0, $$sroa$093$0 = 0, $$sroa$093$1 = 0, $$sroa$093$2 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $50 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $71 = 0, $8 = 0, $80 = 0, $88 = 0, $9 = 0, $96 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 53214
 STACKTOP = STACKTOP + 1008 | 0; //@line 53215
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1008); //@line 53215
 $$byval_copy = sp + 8 | 0; //@line 53216
 $vararg_buffer1 = sp; //@line 53217
 $6 = sp + 896 | 0; //@line 53218
 $7 = sp + 888 | 0; //@line 53219
 $8 = sp + 488 | 0; //@line 53220
 $9 = sp + 480 | 0; //@line 53221
 $10 = sp + 892 | 0; //@line 53222
 $11 = sp + 476 | 0; //@line 53223
 $12 = sp + 472 | 0; //@line 53224
 $13 = sp + 460 | 0; //@line 53225
 $14 = sp + 448 | 0; //@line 53226
 $15 = sp + 436 | 0; //@line 53227
 $16 = sp + 432 | 0; //@line 53228
 $17 = sp + 32 | 0; //@line 53229
 $18 = sp + 24 | 0; //@line 53230
 $19 = sp + 16 | 0; //@line 53231
 $20 = sp + 20 | 0; //@line 53232
 HEAP32[$7 >> 2] = $6; //@line 53233
 HEAPF64[$$byval_copy >> 3] = $5; //@line 53234
 $21 = _snprintf($6, 100, 31323, $$byval_copy) | 0; //@line 53235
 L1 : do {
  if ($21 >>> 0 > 99) {
   __THREW__ = 0; //@line 53239
   $23 = invoke_i(2) | 0; //@line 53240
   $24 = __THREW__; //@line 53241
   __THREW__ = 0; //@line 53241
   do {
    if ($24 & 1) {
     $$sroa$080$0 = 0; //@line 53245
     $$sroa$093$0 = 0; //@line 53245
    } else {
     __THREW__ = 0; //@line 53247
     HEAPF64[$vararg_buffer1 >> 3] = $5; //@line 53248
     $26 = invoke_iiiii(15, $7 | 0, $23 | 0, 31323, $vararg_buffer1 | 0) | 0; //@line 53249
     $27 = __THREW__; //@line 53250
     __THREW__ = 0; //@line 53250
     if ($27 & 1) {
      $$sroa$080$0 = 0; //@line 53253
      $$sroa$093$0 = 0; //@line 53253
     } else {
      $29 = HEAP32[$7 >> 2] | 0; //@line 53255
      if (!$29) {
       __THREW__ = 0; //@line 53258
       invoke_v(4); //@line 53259
       __THREW__ = 0; //@line 53260
       $$sroa$080$0 = 0; //@line 53261
       $$sroa$093$0 = 0; //@line 53261
       break;
      }
      $34 = $29; //@line 53264
      $36 = _malloc($26 << 2) | 0; //@line 53266
      $37 = $36; //@line 53267
      if ($36 | 0) {
       $$0 = $36; //@line 53270
       $$047 = $26; //@line 53270
       $$sroa$080$1 = $37; //@line 53270
       $$sroa$093$1 = $34; //@line 53270
       label = 9; //@line 53271
       break L1;
      }
      __THREW__ = 0; //@line 53274
      invoke_v(4); //@line 53275
      __THREW__ = 0; //@line 53276
      $$sroa$080$0 = $37; //@line 53277
      $$sroa$093$0 = $34; //@line 53277
     }
    }
   } while (0);
   $32 = ___cxa_find_matching_catch_2() | 0; //@line 53281
   $$4 = $32; //@line 53283
   $$453 = tempRet0; //@line 53283
   $$sroa$080$2 = $$sroa$080$0; //@line 53283
   $$sroa$093$2 = $$sroa$093$0; //@line 53283
  } else {
   $$0 = $8; //@line 53285
   $$047 = $21; //@line 53285
   $$sroa$080$1 = 0; //@line 53285
   $$sroa$093$1 = 0; //@line 53285
   label = 9; //@line 53286
  }
 } while (0);
 if ((label | 0) == 9) {
  __THREW__ = 0; //@line 53290
  invoke_vii(132, $9 | 0, $3 | 0); //@line 53291
  $40 = __THREW__; //@line 53292
  __THREW__ = 0; //@line 53292
  if ($40 & 1) {
   $112 = ___cxa_find_matching_catch_2() | 0; //@line 53295
   $$3 = $112; //@line 53297
   $$352 = tempRet0; //@line 53297
  } else {
   __THREW__ = 0; //@line 53299
   $42 = invoke_iii(63, $9 | 0, 35544) | 0; //@line 53300
   $43 = __THREW__; //@line 53301
   __THREW__ = 0; //@line 53301
   if ($43 & 1) {
    label = 31; //@line 53304
   } else {
    $45 = HEAP32[$7 >> 2] | 0; //@line 53306
    __THREW__ = 0; //@line 53311
    invoke_iiiii(HEAP32[(HEAP32[$42 >> 2] | 0) + 48 >> 2] | 0, $42 | 0, $45 | 0, $45 + $$047 | 0, $$0 | 0) | 0; //@line 53312
    $50 = __THREW__; //@line 53313
    __THREW__ = 0; //@line 53313
    if ($50 & 1) {
     label = 31; //@line 53316
    } else {
     if (!$$047) {
      $62 = 0; //@line 53320
     } else {
      $62 = (HEAP8[HEAP32[$7 >> 2] >> 0] | 0) == 45; //@line 53325
     }
     HEAP32[$13 >> 2] = 0; //@line 53327
     HEAP32[$13 + 4 >> 2] = 0; //@line 53327
     HEAP32[$13 + 8 >> 2] = 0; //@line 53327
     $$0$i$i = 0; //@line 53328
     while (1) {
      if (($$0$i$i | 0) == 3) {
       break;
      }
      HEAP32[$13 + ($$0$i$i << 2) >> 2] = 0; //@line 53335
      $$0$i$i = $$0$i$i + 1 | 0; //@line 53337
     }
     HEAP32[$14 >> 2] = 0; //@line 53339
     HEAP32[$14 + 4 >> 2] = 0; //@line 53339
     HEAP32[$14 + 8 >> 2] = 0; //@line 53339
     $$0$i$i54 = 0; //@line 53340
     while (1) {
      if (($$0$i$i54 | 0) == 3) {
       break;
      }
      HEAP32[$14 + ($$0$i$i54 << 2) >> 2] = 0; //@line 53347
      $$0$i$i54 = $$0$i$i54 + 1 | 0; //@line 53349
     }
     HEAP32[$15 >> 2] = 0; //@line 53351
     HEAP32[$15 + 4 >> 2] = 0; //@line 53351
     HEAP32[$15 + 8 >> 2] = 0; //@line 53351
     $$0$i$i56 = 0; //@line 53352
     while (1) {
      if (($$0$i$i56 | 0) == 3) {
       break;
      }
      HEAP32[$15 + ($$0$i$i56 << 2) >> 2] = 0; //@line 53359
      $$0$i$i56 = $$0$i$i56 + 1 | 0; //@line 53361
     }
     __THREW__ = 0; //@line 53363
     invoke_viiiiiiiiii(4, $2 | 0, $62 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, $13 | 0, $14 | 0, $15 | 0, $16 | 0); //@line 53364
     $63 = __THREW__; //@line 53365
     __THREW__ = 0; //@line 53365
     if ($63 & 1) {
      $116 = ___cxa_find_matching_catch_2() | 0; //@line 53368
      $$1 = $116; //@line 53370
      $$150 = tempRet0; //@line 53370
     } else {
      $65 = HEAP32[$16 >> 2] | 0; //@line 53372
      if (($$047 | 0) > ($65 | 0)) {
       $71 = HEAP8[$15 + 8 + 3 >> 0] | 0; //@line 53379
       $80 = HEAP8[$14 + 8 + 3 >> 0] | 0; //@line 53388
       $$sink1 = 1; //@line 53394
       $$sink102 = ($71 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $71 & 255) + ($$047 - $65 << 1) | 0; //@line 53394
       $$sink103 = $80 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $80 & 255; //@line 53394
      } else {
       $88 = HEAP8[$15 + 8 + 3 >> 0] | 0; //@line 53398
       $96 = HEAP8[$14 + 8 + 3 >> 0] | 0; //@line 53406
       $$sink1 = 2; //@line 53412
       $$sink102 = $96 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $96 & 255; //@line 53412
       $$sink103 = $88 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $88 & 255; //@line 53412
      }
      $103 = $$sink103 + $65 + $$sink102 + $$sink1 | 0; //@line 53416
      if ($103 >>> 0 > 100) {
       $106 = _malloc($103 << 2) | 0; //@line 53420
       $107 = $106; //@line 53421
       if (!$106) {
        __THREW__ = 0; //@line 53424
        invoke_v(4); //@line 53425
        __THREW__ = 0; //@line 53426
        $110 = ___cxa_find_matching_catch_2() | 0; //@line 53427
        $$048 = $110; //@line 53429
        $$049 = tempRet0; //@line 53429
        $$sroa$068$1 = $107; //@line 53429
       } else {
        $$046 = $106; //@line 53431
        $$sroa$068$0 = $107; //@line 53431
        label = 33; //@line 53432
       }
      } else {
       $$046 = $17; //@line 53435
       $$sroa$068$0 = 0; //@line 53435
       label = 33; //@line 53436
      }
      if ((label | 0) == 33) {
       __THREW__ = 0; //@line 53444
       invoke_viiiiiiiiiiiiiii(2, $$046 | 0, $18 | 0, $19 | 0, HEAP32[$3 + 4 >> 2] | 0, $$0 | 0, $$0 + ($$047 << 2) | 0, $42 | 0, $62 | 0, $10 | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, $13 | 0, $14 | 0, $15 | 0, $65 | 0); //@line 53445
       $123 = __THREW__; //@line 53446
       __THREW__ = 0; //@line 53446
       if (!($123 & 1)) {
        HEAP32[$20 >> 2] = HEAP32[$1 >> 2]; //@line 53450
        $126 = HEAP32[$18 >> 2] | 0; //@line 53451
        $127 = HEAP32[$19 >> 2] | 0; //@line 53452
        __THREW__ = 0; //@line 53453
        HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2]; //@line 53454
        $128 = invoke_iiiiiii(40, $$byval_copy | 0, $$046 | 0, $126 | 0, $127 | 0, $3 | 0, $4 | 0) | 0; //@line 53455
        $129 = __THREW__; //@line 53456
        __THREW__ = 0; //@line 53456
        if (!($129 & 1)) {
         if ($$sroa$068$0 | 0) {
          _free($$sroa$068$0); //@line 53462
         }
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15); //@line 53464
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14); //@line 53465
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13); //@line 53466
         __ZNSt3__26localeD2Ev($9); //@line 53467
         if ($$sroa$080$1 | 0) {
          _free($$sroa$080$1); //@line 53471
         }
         if ($$sroa$093$1 | 0) {
          _free($$sroa$093$1); //@line 53476
         }
         STACKTOP = sp; //@line 53478
         return $128 | 0; //@line 53478
        }
       }
       $137 = ___cxa_find_matching_catch_2() | 0; //@line 53481
       $$048 = $137; //@line 53483
       $$049 = tempRet0; //@line 53483
       $$sroa$068$1 = $$sroa$068$0; //@line 53483
      }
      if ($$sroa$068$1 | 0) {
       _free($$sroa$068$1); //@line 53488
      }
      $$1 = $$048; //@line 53490
      $$150 = $$049; //@line 53490
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15); //@line 53492
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14); //@line 53493
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13); //@line 53494
     $$2 = $$1; //@line 53495
     $$251 = $$150; //@line 53495
    }
   }
   if ((label | 0) == 31) {
    $114 = ___cxa_find_matching_catch_2() | 0; //@line 53499
    $$2 = $114; //@line 53501
    $$251 = tempRet0; //@line 53501
   }
   __ZNSt3__26localeD2Ev($9); //@line 53503
   $$3 = $$2; //@line 53504
   $$352 = $$251; //@line 53504
  }
  $$4 = $$3; //@line 53506
  $$453 = $$352; //@line 53506
  $$sroa$080$2 = $$sroa$080$1; //@line 53506
  $$sroa$093$2 = $$sroa$093$1; //@line 53506
 }
 if ($$sroa$080$2 | 0) {
  _free($$sroa$080$2); //@line 53511
 }
 if ($$sroa$093$2 | 0) {
  _free($$sroa$093$2); //@line 53516
 }
 ___resumeException($$4 | 0); //@line 53518
 return 0; //@line 53520
}
function __ZNSt3__26vectorI9ReferenceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i$i = 0, $$byval_copy = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $106 = 0, $108 = 0, $111 = 0, $112 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $126 = 0, $13 = 0, $130 = 0, $131 = 0, $133 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $57 = 0, $59 = 0, $60 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $86 = 0, $89 = 0, $90 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body38$index3Z2D = 0, $eh$lpad$body38$indexZ2D = 0, $eh$lpad$body39$index9Z2D = 0, $eh$lpad$body39$indexZ2D = 0, label = 0, sp = 0, $$06$i$i$looptemp = 0;
 sp = STACKTOP; //@line 8275
 STACKTOP = STACKTOP + 16 | 0; //@line 8276
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8276
 $$byval_copy = sp + 1 | 0; //@line 8277
 $2 = sp; //@line 8278
 $3 = $0 + 4 | 0; //@line 8279
 $5 = HEAP32[$0 >> 2] | 0; //@line 8281
 $7 = ((HEAP32[$3 >> 2] | 0) - $5 | 0) / 144 | 0; //@line 8283
 $8 = $7 + 1 | 0; //@line 8284
 if ($8 >>> 0 > 29826161) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 8287
 }
 $10 = $0 + 8 | 0; //@line 8290
 $13 = ((HEAP32[$10 >> 2] | 0) - $5 | 0) / 144 | 0; //@line 8293
 $15 = $13 << 1; //@line 8295
 $$sroa$speculated$$i = $13 >>> 0 < 14913080 ? $15 >>> 0 < $8 >>> 0 ? $8 : $15 : 29826161; //@line 8298
 do {
  if (!$$sroa$speculated$$i) {
   $133 = 0; //@line 8302
   $27 = 0; //@line 8302
  } else {
   if ($$sroa$speculated$$i >>> 0 <= 29826161) {
    $25 = __Znwj($$sroa$speculated$$i * 144 | 0) | 0; //@line 8307
    $133 = $25; //@line 8308
    $27 = $25; //@line 8308
    break;
   }
   $19 = ___cxa_allocate_exception(8) | 0; //@line 8311
   __THREW__ = 0; //@line 8312
   invoke_vii(119, $19 | 0, 31992); //@line 8313
   $20 = __THREW__; //@line 8314
   __THREW__ = 0; //@line 8314
   if ($20 & 1) {
    $22 = ___cxa_find_matching_catch_2() | 0; //@line 8317
    ___cxa_free_exception($19 | 0); //@line 8319
    ___resumeException($22 | 0); //@line 8320
   } else {
    HEAP32[$19 >> 2] = 13224; //@line 8323
    ___cxa_throw($19 | 0, 2856, 240); //@line 8324
   }
  }
 } while (0);
 $26 = $27 + ($7 * 144 | 0) | 0; //@line 8329
 $28 = $26; //@line 8330
 $30 = $27 + ($$sroa$speculated$$i * 144 | 0) | 0; //@line 8332
 __THREW__ = 0; //@line 8333
 invoke_vii(120, $26 | 0, $1 | 0); //@line 8334
 $31 = __THREW__; //@line 8335
 __THREW__ = 0; //@line 8335
 if ($31 & 1) {
  $130 = ___cxa_find_matching_catch_2() | 0; //@line 8338
  $131 = tempRet0; //@line 8339
  if (!$27) {
   $eh$lpad$body39$index9Z2D = $131; //@line 8342
   $eh$lpad$body39$indexZ2D = $130; //@line 8342
   ___resumeException($eh$lpad$body39$indexZ2D | 0); //@line 8343
  } else {
   $eh$lpad$body38$index3Z2D = $131; //@line 8346
   $eh$lpad$body38$indexZ2D = $130; //@line 8346
  }
 } else {
  __THREW__ = 0; //@line 8351
  invoke_vii(120, $27 + ($7 * 144 | 0) + 72 | 0, $1 + 72 | 0); //@line 8352
  $35 = __THREW__; //@line 8353
  __THREW__ = 0; //@line 8353
  if (!($35 & 1)) {
   $66 = $26 + 144 | 0; //@line 8357
   $67 = HEAP32[$0 >> 2] | 0; //@line 8358
   $68 = HEAP32[$3 >> 2] | 0; //@line 8359
   if (($68 | 0) == ($67 | 0)) {
    $120 = $28; //@line 8363
    $121 = $67; //@line 8363
    $123 = $67; //@line 8363
   } else {
    $$06$i$i = $68; //@line 8365
    $$sroa$7$0 = $28; //@line 8365
    $73 = $26; //@line 8365
    do {
     $$06$i$i$looptemp = $$06$i$i;
     $$06$i$i = $$06$i$i + -144 | 0; //@line 8367
     HEAP32[$73 + -144 >> 2] = HEAP32[$$06$i$i >> 2]; //@line 8370
     $75 = $73 + -140 | 0; //@line 8371
     $76 = $$06$i$i$looptemp + -140 | 0; //@line 8372
     HEAP32[$75 >> 2] = HEAP32[$76 >> 2]; //@line 8373
     HEAP32[$75 + 4 >> 2] = HEAP32[$76 + 4 >> 2]; //@line 8373
     HEAP32[$75 + 8 >> 2] = HEAP32[$76 + 8 >> 2]; //@line 8373
     HEAP32[$76 >> 2] = 0; //@line 8374
     HEAP32[$76 + 4 >> 2] = 0; //@line 8374
     HEAP32[$76 + 8 >> 2] = 0; //@line 8374
     $77 = $73 + -128 | 0; //@line 8375
     $78 = $$06$i$i$looptemp + -128 | 0; //@line 8376
     HEAP32[$77 >> 2] = HEAP32[$78 >> 2]; //@line 8377
     HEAP32[$77 + 4 >> 2] = HEAP32[$78 + 4 >> 2]; //@line 8377
     HEAP32[$77 + 8 >> 2] = HEAP32[$78 + 8 >> 2]; //@line 8377
     HEAP32[$77 + 12 >> 2] = HEAP32[$78 + 12 >> 2]; //@line 8377
     HEAP32[$77 + 16 >> 2] = HEAP32[$78 + 16 >> 2]; //@line 8377
     HEAP32[$77 + 20 >> 2] = HEAP32[$78 + 20 >> 2]; //@line 8377
     $79 = $73 + -104 | 0; //@line 8378
     $80 = $$06$i$i$looptemp + -104 | 0; //@line 8379
     HEAP32[$79 >> 2] = 0; //@line 8380
     $81 = $73 + -100 | 0; //@line 8381
     HEAP32[$81 >> 2] = 0; //@line 8382
     HEAP32[$73 + -96 >> 2] = 0; //@line 8384
     HEAP32[$79 >> 2] = HEAP32[$80 >> 2]; //@line 8386
     $84 = $$06$i$i$looptemp + -100 | 0; //@line 8387
     HEAP32[$81 >> 2] = HEAP32[$84 >> 2]; //@line 8389
     $86 = $$06$i$i$looptemp + -96 | 0; //@line 8390
     HEAP32[$73 + -96 >> 2] = HEAP32[$86 >> 2]; //@line 8393
     HEAP32[$86 >> 2] = 0; //@line 8394
     HEAP32[$84 >> 2] = 0; //@line 8395
     HEAP32[$80 >> 2] = 0; //@line 8396
     $89 = $73 + -92 | 0; //@line 8397
     $90 = $$06$i$i$looptemp + -92 | 0; //@line 8398
     HEAP32[$89 >> 2] = HEAP32[$90 >> 2]; //@line 8399
     HEAP32[$89 + 4 >> 2] = HEAP32[$90 + 4 >> 2]; //@line 8399
     HEAP32[$89 + 8 >> 2] = HEAP32[$90 + 8 >> 2]; //@line 8399
     HEAP32[$90 >> 2] = 0; //@line 8400
     HEAP32[$90 + 4 >> 2] = 0; //@line 8400
     HEAP32[$90 + 8 >> 2] = 0; //@line 8400
     HEAP16[$73 + -80 >> 1] = HEAP16[$$06$i$i$looptemp + -80 >> 1] | 0; //@line 8404
     HEAP32[$73 + -72 >> 2] = HEAP32[$$06$i$i$looptemp + -72 >> 2]; //@line 8408
     $97 = $73 + -68 | 0; //@line 8409
     $98 = $$06$i$i$looptemp + -68 | 0; //@line 8410
     HEAP32[$97 >> 2] = HEAP32[$98 >> 2]; //@line 8411
     HEAP32[$97 + 4 >> 2] = HEAP32[$98 + 4 >> 2]; //@line 8411
     HEAP32[$97 + 8 >> 2] = HEAP32[$98 + 8 >> 2]; //@line 8411
     HEAP32[$98 >> 2] = 0; //@line 8412
     HEAP32[$98 + 4 >> 2] = 0; //@line 8412
     HEAP32[$98 + 8 >> 2] = 0; //@line 8412
     $99 = $73 + -56 | 0; //@line 8413
     $100 = $$06$i$i$looptemp + -56 | 0; //@line 8414
     HEAP32[$99 >> 2] = HEAP32[$100 >> 2]; //@line 8415
     HEAP32[$99 + 4 >> 2] = HEAP32[$100 + 4 >> 2]; //@line 8415
     HEAP32[$99 + 8 >> 2] = HEAP32[$100 + 8 >> 2]; //@line 8415
     HEAP32[$99 + 12 >> 2] = HEAP32[$100 + 12 >> 2]; //@line 8415
     HEAP32[$99 + 16 >> 2] = HEAP32[$100 + 16 >> 2]; //@line 8415
     HEAP32[$99 + 20 >> 2] = HEAP32[$100 + 20 >> 2]; //@line 8415
     $101 = $73 + -32 | 0; //@line 8416
     $102 = $$06$i$i$looptemp + -32 | 0; //@line 8417
     HEAP32[$101 >> 2] = 0; //@line 8418
     $103 = $73 + -28 | 0; //@line 8419
     HEAP32[$103 >> 2] = 0; //@line 8420
     HEAP32[$73 + -24 >> 2] = 0; //@line 8422
     HEAP32[$101 >> 2] = HEAP32[$102 >> 2]; //@line 8424
     $106 = $$06$i$i$looptemp + -28 | 0; //@line 8425
     HEAP32[$103 >> 2] = HEAP32[$106 >> 2]; //@line 8427
     $108 = $$06$i$i$looptemp + -24 | 0; //@line 8428
     HEAP32[$73 + -24 >> 2] = HEAP32[$108 >> 2]; //@line 8431
     HEAP32[$108 >> 2] = 0; //@line 8432
     HEAP32[$106 >> 2] = 0; //@line 8433
     HEAP32[$102 >> 2] = 0; //@line 8434
     $111 = $73 + -20 | 0; //@line 8435
     $112 = $$06$i$i$looptemp + -20 | 0; //@line 8436
     HEAP32[$111 >> 2] = HEAP32[$112 >> 2]; //@line 8437
     HEAP32[$111 + 4 >> 2] = HEAP32[$112 + 4 >> 2]; //@line 8437
     HEAP32[$111 + 8 >> 2] = HEAP32[$112 + 8 >> 2]; //@line 8437
     HEAP32[$112 >> 2] = 0; //@line 8438
     HEAP32[$112 + 4 >> 2] = 0; //@line 8438
     HEAP32[$112 + 8 >> 2] = 0; //@line 8438
     HEAP16[$73 + -8 >> 1] = HEAP16[$$06$i$i$looptemp + -8 >> 1] | 0; //@line 8442
     $73 = $$sroa$7$0 + -144 | 0; //@line 8444
     $$sroa$7$0 = $73; //@line 8445
    } while (($$06$i$i | 0) != ($67 | 0));
    $120 = $$sroa$7$0; //@line 8455
    $121 = HEAP32[$0 >> 2] | 0; //@line 8455
    $123 = HEAP32[$3 >> 2] | 0; //@line 8455
   }
   HEAP32[$0 >> 2] = $120; //@line 8457
   HEAP32[$3 >> 2] = $66; //@line 8458
   HEAP32[$10 >> 2] = $30; //@line 8459
   $122 = $121; //@line 8460
   if (($123 | 0) != ($122 | 0)) {
    $126 = $123; //@line 8463
    do {
     $126 = $126 + -144 | 0; //@line 8465
     __ZN9ReferenceD2Ev($126); //@line 8466
    } while (($126 | 0) != ($122 | 0));
   }
   if (!$121) {
    STACKTOP = sp; //@line 8477
    return;
   }
   __ZdlPv($121); //@line 8480
   STACKTOP = sp; //@line 8481
   return;
  }
  $37 = ___cxa_find_matching_catch_2() | 0; //@line 8483
  $38 = tempRet0; //@line 8484
  $39 = $27 + ($7 * 144 | 0) + 52 | 0; //@line 8485
  if ((HEAP8[$39 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$39 >> 2] | 0); //@line 8491
  }
  $44 = $27 + ($7 * 144 | 0) + 40 | 0; //@line 8493
  $45 = HEAP32[$44 >> 2] | 0; //@line 8494
  if ($45 | 0) {
   $47 = $27 + ($7 * 144 | 0) + 44 | 0; //@line 8497
   $48 = HEAP32[$47 >> 2] | 0; //@line 8498
   do {
    if (($48 | 0) == ($45 | 0)) {
     $59 = $45; //@line 8502
    } else {
     $50 = $27 + ($7 * 144 | 0) + 48 | 0; //@line 8504
     $52 = $48; //@line 8505
     while (1) {
      $51 = $52 + -72 | 0; //@line 8507
      HEAP32[$47 >> 2] = $51; //@line 8508
      __THREW__ = 0; //@line 8509
      HEAP8[$$byval_copy >> 0] = HEAP8[$2 >> 0] | 0; //@line 8510
      invoke_viii(13, $$byval_copy | 0, $50 | 0, $51 | 0); //@line 8511
      $53 = __THREW__; //@line 8512
      __THREW__ = 0; //@line 8512
      if ($53 & 1) {
       label = 18; //@line 8515
       break;
      }
      $52 = HEAP32[$47 >> 2] | 0; //@line 8518
      if (($52 | 0) == ($45 | 0)) {
       label = 19; //@line 8521
       break;
      }
     }
     if ((label | 0) == 18) {
      $57 = ___cxa_find_matching_catch_3(0) | 0; //@line 8528
      ___clang_call_terminate($57); //@line 8530
     } else if ((label | 0) == 19) {
      $59 = HEAP32[$44 >> 2] | 0; //@line 8535
      break;
     }
    }
   } while (0);
   __ZdlPv($59); //@line 8540
  }
  $60 = $27 + ($7 * 144 | 0) + 4 | 0; //@line 8542
  if ((HEAP8[$60 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$60 >> 2] | 0); //@line 8548
   $eh$lpad$body38$index3Z2D = $38; //@line 8549
   $eh$lpad$body38$indexZ2D = $37; //@line 8549
  } else {
   $eh$lpad$body38$index3Z2D = $38; //@line 8551
   $eh$lpad$body38$indexZ2D = $37; //@line 8551
  }
 }
 __ZdlPv($133); //@line 8554
 $eh$lpad$body39$index9Z2D = $eh$lpad$body38$index3Z2D; //@line 8555
 $eh$lpad$body39$indexZ2D = $eh$lpad$body38$indexZ2D; //@line 8555
 ___resumeException($eh$lpad$body39$indexZ2D | 0); //@line 8556
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i56 = 0, $$0$i$i59 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$049 = 0, $$1 = 0, $$150 = 0, $$2 = 0, $$251 = 0, $$3 = 0, $$352 = 0, $$4 = 0, $$453 = 0, $$byval_copy = 0, $$sink1 = 0, $$sink105 = 0, $$sink106 = 0, $$sroa$071$0 = 0, $$sroa$071$1 = 0, $$sroa$083$0 = 0, $$sroa$083$1 = 0, $$sroa$083$2 = 0, $$sroa$096$0 = 0, $$sroa$096$1 = 0, $$sroa$096$2 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $106 = 0, $108 = 0, $11 = 0, $110 = 0, $117 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $42 = 0, $44 = 0, $49 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $69 = 0, $7 = 0, $77 = 0, $8 = 0, $84 = 0, $9 = 0, $91 = 0, $98 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 51878
 STACKTOP = STACKTOP + 384 | 0; //@line 51879
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(384); //@line 51879
 $$byval_copy = sp + 8 | 0; //@line 51880
 $vararg_buffer1 = sp; //@line 51881
 $6 = sp + 284 | 0; //@line 51882
 $7 = sp + 72 | 0; //@line 51883
 $8 = sp + 184 | 0; //@line 51884
 $9 = sp + 68 | 0; //@line 51885
 $10 = sp + 180 | 0; //@line 51886
 $11 = sp + 177 | 0; //@line 51887
 $12 = sp + 176 | 0; //@line 51888
 $13 = sp + 56 | 0; //@line 51889
 $14 = sp + 44 | 0; //@line 51890
 $15 = sp + 32 | 0; //@line 51891
 $16 = sp + 28 | 0; //@line 51892
 $17 = sp + 76 | 0; //@line 51893
 $18 = sp + 24 | 0; //@line 51894
 $19 = sp + 16 | 0; //@line 51895
 $20 = sp + 20 | 0; //@line 51896
 HEAP32[$7 >> 2] = $6; //@line 51897
 HEAPF64[$$byval_copy >> 3] = $5; //@line 51898
 $21 = _snprintf($6, 100, 31323, $$byval_copy) | 0; //@line 51899
 L1 : do {
  if ($21 >>> 0 > 99) {
   __THREW__ = 0; //@line 51903
   $23 = invoke_i(2) | 0; //@line 51904
   $24 = __THREW__; //@line 51905
   __THREW__ = 0; //@line 51905
   do {
    if ($24 & 1) {
     $$sroa$083$0 = 0; //@line 51909
     $$sroa$096$0 = 0; //@line 51909
    } else {
     __THREW__ = 0; //@line 51911
     HEAPF64[$vararg_buffer1 >> 3] = $5; //@line 51912
     $26 = invoke_iiiii(15, $7 | 0, $23 | 0, 31323, $vararg_buffer1 | 0) | 0; //@line 51913
     $27 = __THREW__; //@line 51914
     __THREW__ = 0; //@line 51914
     if ($27 & 1) {
      $$sroa$083$0 = 0; //@line 51917
      $$sroa$096$0 = 0; //@line 51917
     } else {
      $29 = HEAP32[$7 >> 2] | 0; //@line 51919
      if (!$29) {
       __THREW__ = 0; //@line 51922
       invoke_v(4); //@line 51923
       __THREW__ = 0; //@line 51924
       $$sroa$083$0 = 0; //@line 51925
       $$sroa$096$0 = 0; //@line 51925
       break;
      }
      $34 = $29; //@line 51928
      $35 = _malloc($26) | 0; //@line 51929
      $36 = $35; //@line 51930
      if ($35 | 0) {
       $$0 = $35; //@line 51933
       $$047 = $26; //@line 51933
       $$sroa$083$1 = $36; //@line 51933
       $$sroa$096$1 = $34; //@line 51933
       label = 9; //@line 51934
       break L1;
      }
      __THREW__ = 0; //@line 51937
      invoke_v(4); //@line 51938
      __THREW__ = 0; //@line 51939
      $$sroa$083$0 = $36; //@line 51940
      $$sroa$096$0 = $34; //@line 51940
     }
    }
   } while (0);
   $32 = ___cxa_find_matching_catch_2() | 0; //@line 51944
   $$4 = $32; //@line 51946
   $$453 = tempRet0; //@line 51946
   $$sroa$083$2 = $$sroa$083$0; //@line 51946
   $$sroa$096$2 = $$sroa$096$0; //@line 51946
  } else {
   $$0 = $8; //@line 51948
   $$047 = $21; //@line 51948
   $$sroa$083$1 = 0; //@line 51948
   $$sroa$096$1 = 0; //@line 51948
   label = 9; //@line 51949
  }
 } while (0);
 if ((label | 0) == 9) {
  __THREW__ = 0; //@line 51953
  invoke_vii(132, $9 | 0, $3 | 0); //@line 51954
  $39 = __THREW__; //@line 51955
  __THREW__ = 0; //@line 51955
  if ($39 & 1) {
   $106 = ___cxa_find_matching_catch_2() | 0; //@line 51958
   $$3 = $106; //@line 51960
   $$352 = tempRet0; //@line 51960
  } else {
   __THREW__ = 0; //@line 51962
   $41 = invoke_iii(63, $9 | 0, 35512) | 0; //@line 51963
   $42 = __THREW__; //@line 51964
   __THREW__ = 0; //@line 51964
   if ($42 & 1) {
    label = 31; //@line 51967
   } else {
    $44 = HEAP32[$7 >> 2] | 0; //@line 51969
    __THREW__ = 0; //@line 51974
    invoke_iiiii(HEAP32[(HEAP32[$41 >> 2] | 0) + 32 >> 2] | 0, $41 | 0, $44 | 0, $44 + $$047 | 0, $$0 | 0) | 0; //@line 51975
    $49 = __THREW__; //@line 51976
    __THREW__ = 0; //@line 51976
    if ($49 & 1) {
     label = 31; //@line 51979
    } else {
     if (!$$047) {
      $61 = 0; //@line 51983
     } else {
      $61 = (HEAP8[HEAP32[$7 >> 2] >> 0] | 0) == 45; //@line 51988
     }
     HEAP32[$13 >> 2] = 0; //@line 51990
     HEAP32[$13 + 4 >> 2] = 0; //@line 51990
     HEAP32[$13 + 8 >> 2] = 0; //@line 51990
     $$0$i$i = 0; //@line 51991
     while (1) {
      if (($$0$i$i | 0) == 3) {
       break;
      }
      HEAP32[$13 + ($$0$i$i << 2) >> 2] = 0; //@line 51998
      $$0$i$i = $$0$i$i + 1 | 0; //@line 52000
     }
     HEAP32[$14 >> 2] = 0; //@line 52002
     HEAP32[$14 + 4 >> 2] = 0; //@line 52002
     HEAP32[$14 + 8 >> 2] = 0; //@line 52002
     $$0$i$i56 = 0; //@line 52003
     while (1) {
      if (($$0$i$i56 | 0) == 3) {
       break;
      }
      HEAP32[$14 + ($$0$i$i56 << 2) >> 2] = 0; //@line 52010
      $$0$i$i56 = $$0$i$i56 + 1 | 0; //@line 52012
     }
     HEAP32[$15 >> 2] = 0; //@line 52014
     HEAP32[$15 + 4 >> 2] = 0; //@line 52014
     HEAP32[$15 + 8 >> 2] = 0; //@line 52014
     $$0$i$i59 = 0; //@line 52015
     while (1) {
      if (($$0$i$i59 | 0) == 3) {
       break;
      }
      HEAP32[$15 + ($$0$i$i59 << 2) >> 2] = 0; //@line 52022
      $$0$i$i59 = $$0$i$i59 + 1 | 0; //@line 52024
     }
     __THREW__ = 0; //@line 52026
     invoke_viiiiiiiiii(3, $2 | 0, $61 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, $13 | 0, $14 | 0, $15 | 0, $16 | 0); //@line 52027
     $62 = __THREW__; //@line 52028
     __THREW__ = 0; //@line 52028
     if ($62 & 1) {
      $110 = ___cxa_find_matching_catch_2() | 0; //@line 52031
      $$1 = $110; //@line 52033
      $$150 = tempRet0; //@line 52033
     } else {
      $64 = HEAP32[$16 >> 2] | 0; //@line 52035
      if (($$047 | 0) > ($64 | 0)) {
       $69 = HEAP8[$15 + 11 >> 0] | 0; //@line 52041
       $77 = HEAP8[$14 + 11 >> 0] | 0; //@line 52049
       $$sink1 = 1; //@line 52055
       $$sink105 = ($69 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $69 & 255) + ($$047 - $64 << 1) | 0; //@line 52055
       $$sink106 = $77 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $77 & 255; //@line 52055
      } else {
       $84 = HEAP8[$15 + 11 >> 0] | 0; //@line 52058
       $91 = HEAP8[$14 + 11 >> 0] | 0; //@line 52065
       $$sink1 = 2; //@line 52071
       $$sink105 = $91 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $91 & 255; //@line 52071
       $$sink106 = $84 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $84 & 255; //@line 52071
      }
      $98 = $$sink106 + $64 + $$sink105 + $$sink1 | 0; //@line 52075
      if ($98 >>> 0 > 100) {
       $100 = _malloc($98) | 0; //@line 52078
       $101 = $100; //@line 52079
       if (!$100) {
        __THREW__ = 0; //@line 52082
        invoke_v(4); //@line 52083
        __THREW__ = 0; //@line 52084
        $104 = ___cxa_find_matching_catch_2() | 0; //@line 52085
        $$048 = $104; //@line 52087
        $$049 = tempRet0; //@line 52087
        $$sroa$071$1 = $101; //@line 52087
       } else {
        $$046 = $100; //@line 52089
        $$sroa$071$0 = $101; //@line 52089
        label = 33; //@line 52090
       }
      } else {
       $$046 = $17; //@line 52093
       $$sroa$071$0 = 0; //@line 52093
       label = 33; //@line 52094
      }
      if ((label | 0) == 33) {
       __THREW__ = 0; //@line 52102
       invoke_viiiiiiiiiiiiiii(1, $$046 | 0, $18 | 0, $19 | 0, HEAP32[$3 + 4 >> 2] | 0, $$0 | 0, $$0 + $$047 | 0, $41 | 0, $61 | 0, $10 | 0, HEAP8[$11 >> 0] | 0, HEAP8[$12 >> 0] | 0, $13 | 0, $14 | 0, $15 | 0, $64 | 0); //@line 52103
       $117 = __THREW__; //@line 52104
       __THREW__ = 0; //@line 52104
       if (!($117 & 1)) {
        HEAP32[$20 >> 2] = HEAP32[$1 >> 2]; //@line 52108
        $120 = HEAP32[$18 >> 2] | 0; //@line 52109
        $121 = HEAP32[$19 >> 2] | 0; //@line 52110
        __THREW__ = 0; //@line 52111
        HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2]; //@line 52112
        $122 = invoke_iiiiiii(39, $$byval_copy | 0, $$046 | 0, $120 | 0, $121 | 0, $3 | 0, $4 | 0) | 0; //@line 52113
        $123 = __THREW__; //@line 52114
        __THREW__ = 0; //@line 52114
        if (!($123 & 1)) {
         if ($$sroa$071$0 | 0) {
          _free($$sroa$071$0); //@line 52120
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15); //@line 52122
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14); //@line 52123
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13); //@line 52124
         __ZNSt3__26localeD2Ev($9); //@line 52125
         if ($$sroa$083$1 | 0) {
          _free($$sroa$083$1); //@line 52129
         }
         if ($$sroa$096$1 | 0) {
          _free($$sroa$096$1); //@line 52134
         }
         STACKTOP = sp; //@line 52136
         return $122 | 0; //@line 52136
        }
       }
       $131 = ___cxa_find_matching_catch_2() | 0; //@line 52139
       $$048 = $131; //@line 52141
       $$049 = tempRet0; //@line 52141
       $$sroa$071$1 = $$sroa$071$0; //@line 52141
      }
      if ($$sroa$071$1 | 0) {
       _free($$sroa$071$1); //@line 52146
      }
      $$1 = $$048; //@line 52148
      $$150 = $$049; //@line 52148
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15); //@line 52150
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14); //@line 52151
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13); //@line 52152
     $$2 = $$1; //@line 52153
     $$251 = $$150; //@line 52153
    }
   }
   if ((label | 0) == 31) {
    $108 = ___cxa_find_matching_catch_2() | 0; //@line 52157
    $$2 = $108; //@line 52159
    $$251 = tempRet0; //@line 52159
   }
   __ZNSt3__26localeD2Ev($9); //@line 52161
   $$3 = $$2; //@line 52162
   $$352 = $$251; //@line 52162
  }
  $$4 = $$3; //@line 52164
  $$453 = $$352; //@line 52164
  $$sroa$083$2 = $$sroa$083$1; //@line 52164
  $$sroa$096$2 = $$sroa$096$1; //@line 52164
 }
 if ($$sroa$083$2 | 0) {
  _free($$sroa$083$2); //@line 52169
 }
 if ($$sroa$096$2 | 0) {
  _free($$sroa$096$2); //@line 52174
 }
 ___resumeException($$4 | 0); //@line 52176
 return 0; //@line 52178
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i131 = 0, $$0108 = 0, $$0109 = 0, $$0111 = 0, $$0113 = 0, $$07$i$i = 0, $$07$i$i130 = 0, $$1 = 0, $$1110 = 0, $$1112 = 0, $$1114 = 0, $$2 = 0, $$2115 = 0, $$3 = 0, $$pre$phiZ2D = 0, $100 = 0, $106 = 0, $107 = 0, $109 = 0, $111 = 0, $119 = 0, $123 = 0, $125 = 0, $13 = 0, $137 = 0, $138 = 0, $140 = 0, $145 = 0, $150 = 0, $151 = 0, $153 = 0, $159 = 0, $160 = 0, $162 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $180 = 0, $21 = 0, $23 = 0, $29 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $44 = 0, $45 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $8 = 0, $83 = 0, $9 = 0, $91 = 0, $93 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35822
 STACKTOP = STACKTOP + 16 | 0; //@line 35823
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 35823
 $7 = sp; //@line 35824
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 35512) | 0; //@line 35825
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 35528) | 0; //@line 35826
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 255]($7, $9); //@line 35830
 HEAP32[$5 >> 2] = $3; //@line 35831
 $13 = HEAP8[$0 >> 0] | 0; //@line 35832
 switch ($13 << 24 >> 24) {
 case 43:
 case 45:
  {
   __THREW__ = 0; //@line 35838
   $17 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, $13 | 0) | 0; //@line 35839
   $18 = __THREW__; //@line 35840
   __THREW__ = 0; //@line 35840
   if (!($18 & 1)) {
    $21 = HEAP32[$5 >> 2] | 0; //@line 35844
    HEAP32[$5 >> 2] = $21 + 1; //@line 35846
    HEAP8[$21 >> 0] = $17; //@line 35847
    $$0111 = $0 + 1 | 0; //@line 35848
    label = 4; //@line 35849
   }
   break;
  }
 default:
  {
   $$0111 = $0; //@line 35854
   label = 4; //@line 35855
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $23 = $2; //@line 35860
   L6 : do {
    if (($23 - $$0111 | 0) > 1) {
     if ((HEAP8[$$0111 >> 0] | 0) == 48) {
      $29 = $$0111 + 1 | 0; //@line 35869
      switch (HEAP8[$29 >> 0] | 0) {
      case 88:
      case 120:
       {
        break;
       }
      default:
       {
        $$1114 = $$0111; //@line 35876
        label = 15; //@line 35877
        break L6;
       }
      }
      __THREW__ = 0; //@line 35884
      $34 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, 48) | 0; //@line 35885
      $35 = __THREW__; //@line 35886
      __THREW__ = 0; //@line 35886
      if ($35 & 1) {
       break L4;
      }
      $37 = HEAP32[$5 >> 2] | 0; //@line 35891
      HEAP32[$5 >> 2] = $37 + 1; //@line 35893
      HEAP8[$37 >> 0] = $34; //@line 35894
      $39 = $$0111 + 2 | 0; //@line 35895
      __THREW__ = 0; //@line 35900
      $44 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, HEAP8[$29 >> 0] | 0) | 0; //@line 35901
      $45 = __THREW__; //@line 35902
      __THREW__ = 0; //@line 35902
      if ($45 & 1) {
       break L4;
      }
      $47 = HEAP32[$5 >> 2] | 0; //@line 35907
      HEAP32[$5 >> 2] = $47 + 1; //@line 35909
      HEAP8[$47 >> 0] = $44; //@line 35910
      $$0113 = $39; //@line 35911
      while (1) {
       if ($$0113 >>> 0 >= $2 >>> 0) {
        $$1112 = $39; //@line 35915
        $$2115 = $$0113; //@line 35915
        break L6;
       }
       $50 = HEAP8[$$0113 >> 0] | 0; //@line 35918
       __THREW__ = 0; //@line 35919
       $51 = invoke_i(2) | 0; //@line 35920
       $52 = __THREW__; //@line 35921
       __THREW__ = 0; //@line 35921
       if ($52 & 1) {
        break L4;
       }
       __THREW__ = 0; //@line 35927
       $55 = invoke_iii(74, $50 << 24 >> 24 | 0, $51 | 0) | 0; //@line 35928
       $56 = __THREW__; //@line 35929
       __THREW__ = 0; //@line 35929
       if ($56 & 1) {
        break L4;
       }
       if (!$55) {
        $$1112 = $39; //@line 35936
        $$2115 = $$0113; //@line 35936
        break L6;
       }
       $$0113 = $$0113 + 1 | 0; //@line 35940
      }
     } else {
      $$1114 = $$0111; //@line 35943
      label = 15; //@line 35944
     }
    } else {
     $$1114 = $$0111; //@line 35947
     label = 15; //@line 35948
    }
   } while (0);
   L18 : do {
    if ((label | 0) == 15) {
     while (1) {
      label = 0; //@line 35954
      if ($$1114 >>> 0 >= $2 >>> 0) {
       $$1112 = $$0111; //@line 35957
       $$2115 = $$1114; //@line 35957
       break L18;
      }
      $61 = HEAP8[$$1114 >> 0] | 0; //@line 35960
      __THREW__ = 0; //@line 35961
      $62 = invoke_i(2) | 0; //@line 35962
      $63 = __THREW__; //@line 35963
      __THREW__ = 0; //@line 35963
      if ($63 & 1) {
       break L4;
      }
      __THREW__ = 0; //@line 35969
      $66 = invoke_iii(75, $61 << 24 >> 24 | 0, $62 | 0) | 0; //@line 35970
      $67 = __THREW__; //@line 35971
      __THREW__ = 0; //@line 35971
      if ($67 & 1) {
       break L4;
      }
      if (!$66) {
       $$1112 = $$0111; //@line 35978
       $$2115 = $$1114; //@line 35978
       break L18;
      }
      $$1114 = $$1114 + 1 | 0; //@line 35982
      label = 15; //@line 35983
     }
    }
   } while (0);
   $71 = $7 + 11 | 0; //@line 35987
   $72 = HEAP8[$71 >> 0] | 0; //@line 35988
   $74 = $7 + 4 | 0; //@line 35990
   L26 : do {
    if (!(($72 << 24 >> 24 < 0 ? HEAP32[$74 >> 2] | 0 : $72 & 255) | 0)) {
     __THREW__ = 0; //@line 36001
     invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0, $8 | 0, $$1112 | 0, $$2115 | 0, HEAP32[$5 >> 2] | 0) | 0; //@line 36002
     $83 = __THREW__; //@line 36003
     __THREW__ = 0; //@line 36003
     if ($83 & 1) {
      break L4;
     }
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($$2115 - $$1112); //@line 36013
     $$pre$phiZ2D = $8; //@line 36014
    } else {
     L30 : do {
      if (($$1112 | 0) != ($$2115 | 0)) {
       $$0$i$i = $$2115; //@line 36019
       $$07$i$i = $$1112; //@line 36019
       while (1) {
        $91 = $$0$i$i + -1 | 0; //@line 36021
        if ($$07$i$i >>> 0 >= $91 >>> 0) {
         break L30;
        }
        $93 = HEAP8[$$07$i$i >> 0] | 0; //@line 36026
        HEAP8[$$07$i$i >> 0] = HEAP8[$91 >> 0] | 0; //@line 36028
        HEAP8[$91 >> 0] = $93; //@line 36029
        $$0$i$i = $91; //@line 36031
        $$07$i$i = $$07$i$i + 1 | 0; //@line 36031
       }
      }
     } while (0);
     __THREW__ = 0; //@line 36038
     $99 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0, $9 | 0) | 0; //@line 36039
     $100 = __THREW__; //@line 36040
     __THREW__ = 0; //@line 36040
     if ($100 & 1) {
      break L4;
     }
     $$0 = $$1112; //@line 36045
     $$0108 = 0; //@line 36045
     $$0109 = 0; //@line 36045
     while (1) {
      if ($$0 >>> 0 >= $$2115 >>> 0) {
       break;
      }
      $119 = HEAP8[((HEAP8[$71 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$0108 >> 0] | 0; //@line 36056
      if ($119 << 24 >> 24 > 0 & ($$0109 | 0) == ($119 << 24 >> 24 | 0)) {
       $123 = HEAP32[$5 >> 2] | 0; //@line 36062
       HEAP32[$5 >> 2] = $123 + 1; //@line 36064
       HEAP8[$123 >> 0] = $99; //@line 36065
       $125 = HEAP8[$71 >> 0] | 0; //@line 36066
       $$1 = $$0108 + ($$0108 >>> 0 < (($125 << 24 >> 24 < 0 ? HEAP32[$74 >> 2] | 0 : $125 & 255) + -1 | 0) >>> 0 & 1) | 0; //@line 36075
       $$1110 = 0; //@line 36075
      } else {
       $$1 = $$0108; //@line 36077
       $$1110 = $$0109; //@line 36077
      }
      __THREW__ = 0; //@line 36083
      $137 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, HEAP8[$$0 >> 0] | 0) | 0; //@line 36084
      $138 = __THREW__; //@line 36085
      __THREW__ = 0; //@line 36085
      if ($138 & 1) {
       break L4;
      }
      $140 = HEAP32[$5 >> 2] | 0; //@line 36090
      HEAP32[$5 >> 2] = $140 + 1; //@line 36092
      HEAP8[$140 >> 0] = $137; //@line 36093
      $$0 = $$0 + 1 | 0; //@line 36096
      $$0108 = $$1; //@line 36096
      $$0109 = $$1110 + 1 | 0; //@line 36096
     }
     $106 = $3 + ($$1112 - $0) | 0; //@line 36101
     $107 = HEAP32[$5 >> 2] | 0; //@line 36102
     if (($106 | 0) == ($107 | 0)) {
      $$pre$phiZ2D = $8; //@line 36105
     } else {
      $$0$i$i131 = $107; //@line 36107
      $$07$i$i130 = $106; //@line 36107
      while (1) {
       $109 = $$0$i$i131 + -1 | 0; //@line 36109
       if ($$07$i$i130 >>> 0 >= $109 >>> 0) {
        $$pre$phiZ2D = $8; //@line 36112
        break L26;
       }
       $111 = HEAP8[$$07$i$i130 >> 0] | 0; //@line 36115
       HEAP8[$$07$i$i130 >> 0] = HEAP8[$109 >> 0] | 0; //@line 36117
       HEAP8[$109 >> 0] = $111; //@line 36118
       $$0$i$i131 = $109; //@line 36120
       $$07$i$i130 = $$07$i$i130 + 1 | 0; //@line 36120
      }
     }
    }
   } while (0);
   $$2 = $$2115; //@line 36125
   while (1) {
    if ($$2 >>> 0 >= $2 >>> 0) {
     $$3 = $$2; //@line 36129
     break;
    }
    $145 = HEAP8[$$2 >> 0] | 0; //@line 36132
    if ($145 << 24 >> 24 == 46) {
     label = 39; //@line 36135
     break;
    }
    __THREW__ = 0; //@line 36141
    $159 = invoke_iii(HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] | 0, $8 | 0, $145 | 0) | 0; //@line 36142
    $160 = __THREW__; //@line 36143
    __THREW__ = 0; //@line 36143
    if ($160 & 1) {
     break L4;
    }
    $162 = HEAP32[$5 >> 2] | 0; //@line 36148
    HEAP32[$5 >> 2] = $162 + 1; //@line 36150
    HEAP8[$162 >> 0] = $159; //@line 36151
    $$2 = $$2 + 1 | 0; //@line 36153
   }
   if ((label | 0) == 39) {
    __THREW__ = 0; //@line 36159
    $150 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0, $9 | 0) | 0; //@line 36160
    $151 = __THREW__; //@line 36161
    __THREW__ = 0; //@line 36161
    if ($151 & 1) {
     break;
    }
    $153 = HEAP32[$5 >> 2] | 0; //@line 36166
    HEAP32[$5 >> 2] = $153 + 1; //@line 36168
    HEAP8[$153 >> 0] = $150; //@line 36169
    $$3 = $$2 + 1 | 0; //@line 36171
   }
   __THREW__ = 0; //@line 36177
   invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0, $8 | 0, $$3 | 0, $2 | 0, HEAP32[$5 >> 2] | 0) | 0; //@line 36178
   $169 = __THREW__; //@line 36179
   __THREW__ = 0; //@line 36179
   if (!($169 & 1)) {
    $174 = (HEAP32[$5 >> 2] | 0) + ($23 - $$3) | 0; //@line 36185
    HEAP32[$5 >> 2] = $174; //@line 36186
    HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $174 : $3 + ($1 - $0) | 0; //@line 36193
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 36194
    STACKTOP = sp; //@line 36195
    return;
   }
  }
 } while (0);
 $180 = ___cxa_find_matching_catch_2() | 0; //@line 36199
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 36201
 ___resumeException($180 | 0); //@line 36202
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33858 = 0, $$33859 = 0, $$360 = 0, $$361 = 0, $$byval_copy = 0, $$pre56 = 0, $$sroa$0$0$copyload = 0, $$sroa$043$0 = 0, $$sroa$043$1 = 0, $10 = 0, $101 = 0, $108 = 0, $109 = 0, $11 = 0, $117 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $41 = 0, $42 = 0, $45 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $60 = 0, $61 = 0, $63 = 0, $66 = 0, $7 = 0, $8 = 0, $81 = 0, $84 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 48378
 STACKTOP = STACKTOP + 576 | 0; //@line 48379
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(576); //@line 48379
 $$byval_copy = sp + 424 | 0; //@line 48380
 $vararg_buffer = sp; //@line 48381
 $7 = sp + 24 | 0; //@line 48382
 $8 = sp + 16 | 0; //@line 48383
 $9 = sp + 12 | 0; //@line 48384
 $10 = sp + 8 | 0; //@line 48385
 $11 = sp + 564 | 0; //@line 48386
 $12 = sp + 4 | 0; //@line 48387
 $13 = sp + 464 | 0; //@line 48388
 HEAP32[$8 >> 2] = $7; //@line 48390
 $15 = $8 + 4 | 0; //@line 48391
 HEAP32[$15 >> 2] = 267; //@line 48392
 $16 = $7 + 400 | 0; //@line 48393
 __THREW__ = 0; //@line 48394
 invoke_vii(132, $10 | 0, $4 | 0); //@line 48395
 $17 = __THREW__; //@line 48396
 __THREW__ = 0; //@line 48396
 if ($17 & 1) {
  $45 = ___cxa_find_matching_catch_2() | 0; //@line 48399
  HEAP32[$8 >> 2] = 0; //@line 48401
  $$33858 = tempRet0; //@line 48402
  $$360 = $45; //@line 48402
  $125 = 267; //@line 48402
  $126 = $7; //@line 48402
  label = 54; //@line 48403
 } else {
  __THREW__ = 0; //@line 48405
  $19 = invoke_iii(63, $10 | 0, 35544) | 0; //@line 48406
  $20 = __THREW__; //@line 48407
  __THREW__ = 0; //@line 48407
  if ($20 & 1) {
   $47 = ___cxa_find_matching_catch_2() | 0; //@line 48410
   $$234 = $47; //@line 48412
   $$237 = tempRet0; //@line 48412
  } else {
   HEAP8[$11 >> 0] = 0; //@line 48414
   HEAP32[$12 >> 2] = HEAP32[$2 >> 2]; //@line 48416
   $24 = HEAP32[$4 + 4 >> 2] | 0; //@line 48418
   __THREW__ = 0; //@line 48419
   HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 48420
   $25 = invoke_iiiiiiiiiiii(2, $1 | 0, $$byval_copy | 0, $3 | 0, $10 | 0, $24 | 0, $5 | 0, $11 | 0, $19 | 0, $8 | 0, $9 | 0, $16 | 0) | 0; //@line 48421
   $26 = __THREW__; //@line 48422
   __THREW__ = 0; //@line 48422
   L7 : do {
    if ($26 & 1) {
     label = 11; //@line 48426
    } else {
     L9 : do {
      if ($25) {
       __THREW__ = 0; //@line 48433
       invoke_iiiii(HEAP32[(HEAP32[$19 >> 2] | 0) + 48 >> 2] | 0, $19 | 0, 31217, 31227, $$byval_copy | 0) | 0; //@line 48434
       $31 = __THREW__; //@line 48435
       __THREW__ = 0; //@line 48435
       if ($31 & 1) {
        $51 = ___cxa_find_matching_catch_2() | 0; //@line 48438
        $$032 = $51; //@line 48440
        $$035 = tempRet0; //@line 48440
       } else {
        $33 = HEAP32[$9 >> 2] | 0; //@line 48442
        $34 = HEAP32[$8 >> 2] | 0; //@line 48443
        $35 = $33 - $34 | 0; //@line 48444
        $37 = $34; //@line 48446
        $38 = $33; //@line 48447
        if (($35 | 0) > 392) {
         $41 = _malloc(($35 >>> 2) + 2 | 0) | 0; //@line 48451
         $42 = $41; //@line 48452
         if (!$41) {
          __THREW__ = 0; //@line 48455
          invoke_v(4); //@line 48456
          __THREW__ = 0; //@line 48457
          $$sroa$043$0 = $42; //@line 48458
         } else {
          $$031 = $41; //@line 48460
          $$sroa$043$1 = $42; //@line 48460
          label = 16; //@line 48461
         }
        } else {
         $$031 = $13; //@line 48464
         $$sroa$043$1 = 0; //@line 48464
         label = 16; //@line 48465
        }
        do {
         if ((label | 0) == 16) {
          if (!(HEAP8[$11 >> 0] | 0)) {
           $$1 = $$031; //@line 48472
          } else {
           HEAP8[$$031 >> 0] = 45; //@line 48475
           $$1 = $$031 + 1 | 0; //@line 48476
          }
          $60 = $$byval_copy + 40 | 0; //@line 48478
          $61 = $$byval_copy; //@line 48479
          $$0 = $37; //@line 48480
          $$2 = $$1; //@line 48480
          $63 = $38; //@line 48480
          while (1) {
           if ($$0 >>> 0 >= $63 >>> 0) {
            break;
           }
           $66 = HEAP32[$$0 >> 2] | 0; //@line 48486
           $$0$i = $$byval_copy; //@line 48487
           while (1) {
            if (($$0$i | 0) == ($60 | 0)) {
             $$0$lcssa$i = $60; //@line 48491
             break;
            }
            if ((HEAP32[$$0$i >> 2] | 0) == ($66 | 0)) {
             $$0$lcssa$i = $$0$i; //@line 48497
             break;
            }
            $$0$i = $$0$i + 4 | 0; //@line 48501
           }
           HEAP8[$$2 >> 0] = HEAP8[31217 + ($$0$lcssa$i - $61 >> 2) >> 0] | 0; //@line 48508
           $$0 = $$0 + 4 | 0; //@line 48512
           $$2 = $$2 + 1 | 0; //@line 48512
           $63 = HEAP32[$9 >> 2] | 0; //@line 48512
          }
          HEAP8[$$2 >> 0] = 0; //@line 48514
          HEAP32[$vararg_buffer >> 2] = $6; //@line 48515
          if ((_sscanf($13, 31102, $vararg_buffer) | 0) != 1) {
           __THREW__ = 0; //@line 48519
           invoke_vi(268, 31106); //@line 48520
           __THREW__ = 0; //@line 48521
           $$sroa$043$0 = $$sroa$043$1; //@line 48522
           break;
          }
          if ($$sroa$043$1 | 0) {
           _free($$sroa$043$1); //@line 48528
          }
          break L9;
         }
        } while (0);
        $53 = ___cxa_find_matching_catch_2() | 0; //@line 48533
        $54 = tempRet0; //@line 48534
        if ($$sroa$043$0 | 0) {
         _free($$sroa$043$0); //@line 48538
        }
        $$032 = $53; //@line 48540
        $$035 = $54; //@line 48540
       }
       $$133 = $$032; //@line 48542
       $$136 = $$035; //@line 48542
       break L7;
      }
     } while (0);
     $81 = HEAP32[$1 >> 2] | 0; //@line 48546
     do {
      if (!$81) {
       $131 = 1; //@line 48550
      } else {
       $84 = HEAP32[$81 + 12 >> 2] | 0; //@line 48553
       if (($84 | 0) == (HEAP32[$81 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 48561
        $91 = invoke_ii(HEAP32[(HEAP32[$81 >> 2] | 0) + 36 >> 2] | 0, $81 | 0) | 0; //@line 48562
        $92 = __THREW__; //@line 48563
        __THREW__ = 0; //@line 48563
        if ($92 & 1) {
         label = 11; //@line 48566
         break L7;
        } else {
         $$0$i$i$i$i = $91; //@line 48569
        }
       } else {
        $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$84 >> 2] | 0) | 0; //@line 48574
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 48579
        $131 = 1; //@line 48580
        break;
       } else {
        $131 = (HEAP32[$1 >> 2] | 0) == 0; //@line 48585
        break;
       }
      }
     } while (0);
     $98 = HEAP32[$2 >> 2] | 0; //@line 48590
     do {
      if (!$98) {
       label = 44; //@line 48594
      } else {
       $101 = HEAP32[$98 + 12 >> 2] | 0; //@line 48597
       if (($101 | 0) == (HEAP32[$98 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 48605
        $108 = invoke_ii(HEAP32[(HEAP32[$98 >> 2] | 0) + 36 >> 2] | 0, $98 | 0) | 0; //@line 48606
        $109 = __THREW__; //@line 48607
        __THREW__ = 0; //@line 48607
        if ($109 & 1) {
         label = 11; //@line 48610
         break L7;
        } else {
         $$0$i$i2$i$i = $108; //@line 48613
        }
       } else {
        $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$101 >> 2] | 0) | 0; //@line 48618
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$2 >> 2] = 0; //@line 48623
        label = 44; //@line 48624
        break;
       } else {
        if ($131) {
         break;
        } else {
         label = 46; //@line 48630
         break;
        }
       }
      }
     } while (0);
     if ((label | 0) == 44) {
      if ($131) {
       label = 46; //@line 48638
      }
     }
     if ((label | 0) == 46) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2; //@line 48644
     }
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 48646
     __ZNSt3__26localeD2Ev($10); //@line 48647
     $117 = HEAP32[$8 >> 2] | 0; //@line 48648
     HEAP32[$8 >> 2] = 0; //@line 48649
     if ($117 | 0) {
      __THREW__ = 0; //@line 48653
      invoke_vi(HEAP32[$15 >> 2] | 0, $117 | 0); //@line 48654
      $120 = __THREW__; //@line 48655
      __THREW__ = 0; //@line 48655
      if ($120 & 1) {
       $122 = ___cxa_find_matching_catch_3(0) | 0; //@line 48658
       ___clang_call_terminate($122); //@line 48660
      }
     }
     STACKTOP = sp; //@line 48664
     return $$sroa$0$0$copyload | 0; //@line 48664
    }
   } while (0);
   if ((label | 0) == 11) {
    $49 = ___cxa_find_matching_catch_2() | 0; //@line 48668
    $$133 = $49; //@line 48670
    $$136 = tempRet0; //@line 48670
   }
   $$234 = $$133; //@line 48672
   $$237 = $$136; //@line 48672
  }
  __ZNSt3__26localeD2Ev($10); //@line 48674
  $$pre56 = HEAP32[$8 >> 2] | 0; //@line 48675
  HEAP32[$8 >> 2] = 0; //@line 48676
  if (!$$pre56) {
   $$33859 = $$237; //@line 48679
   $$361 = $$234; //@line 48679
  } else {
   $$33858 = $$237; //@line 48682
   $$360 = $$234; //@line 48682
   $125 = HEAP32[$15 >> 2] | 0; //@line 48682
   $126 = $$pre56; //@line 48682
   label = 54; //@line 48683
  }
 }
 if ((label | 0) == 54) {
  __THREW__ = 0; //@line 48687
  invoke_vi($125 | 0, $126 | 0); //@line 48688
  $127 = __THREW__; //@line 48689
  __THREW__ = 0; //@line 48689
  if ($127 & 1) {
   $129 = ___cxa_find_matching_catch_3(0) | 0; //@line 48692
   ___clang_call_terminate($129); //@line 48694
  } else {
   $$33859 = $$33858; //@line 48697
   $$361 = $$360; //@line 48697
  }
 }
 ___resumeException($$361 | 0); //@line 48700
 return 0; //@line 48702
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33859 = 0, $$33860 = 0, $$361 = 0, $$362 = 0, $$byval_copy = 0, $$pre57 = 0, $$sroa$0$0$copyload = 0, $$sroa$044$0 = 0, $$sroa$044$1 = 0, $10 = 0, $106 = 0, $107 = 0, $11 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $59 = 0, $60 = 0, $62 = 0, $65 = 0, $7 = 0, $79 = 0, $8 = 0, $82 = 0, $89 = 0, $9 = 0, $90 = 0, $96 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 44848
 STACKTOP = STACKTOP + 240 | 0; //@line 44849
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240); //@line 44849
 $$byval_copy = sp + 24 | 0; //@line 44850
 $vararg_buffer = sp; //@line 44851
 $7 = sp + 140 | 0; //@line 44852
 $8 = sp + 16 | 0; //@line 44853
 $9 = sp + 12 | 0; //@line 44854
 $10 = sp + 8 | 0; //@line 44855
 $11 = sp + 136 | 0; //@line 44856
 $12 = sp + 4 | 0; //@line 44857
 $13 = sp + 36 | 0; //@line 44858
 HEAP32[$8 >> 2] = $7; //@line 44860
 $15 = $8 + 4 | 0; //@line 44861
 HEAP32[$15 >> 2] = 267; //@line 44862
 $16 = $7 + 100 | 0; //@line 44863
 __THREW__ = 0; //@line 44864
 invoke_vii(132, $10 | 0, $4 | 0); //@line 44865
 $17 = __THREW__; //@line 44866
 __THREW__ = 0; //@line 44866
 if ($17 & 1) {
  $44 = ___cxa_find_matching_catch_2() | 0; //@line 44869
  HEAP32[$8 >> 2] = 0; //@line 44871
  $$33859 = tempRet0; //@line 44872
  $$361 = $44; //@line 44872
  $123 = 267; //@line 44872
  $124 = $7; //@line 44872
  label = 54; //@line 44873
 } else {
  __THREW__ = 0; //@line 44875
  $19 = invoke_iii(63, $10 | 0, 35512) | 0; //@line 44876
  $20 = __THREW__; //@line 44877
  __THREW__ = 0; //@line 44877
  if ($20 & 1) {
   $46 = ___cxa_find_matching_catch_2() | 0; //@line 44880
   $$234 = $46; //@line 44882
   $$237 = tempRet0; //@line 44882
  } else {
   HEAP8[$11 >> 0] = 0; //@line 44884
   HEAP32[$12 >> 2] = HEAP32[$2 >> 2]; //@line 44886
   $24 = HEAP32[$4 + 4 >> 2] | 0; //@line 44888
   __THREW__ = 0; //@line 44889
   HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 44890
   $25 = invoke_iiiiiiiiiiii(1, $1 | 0, $$byval_copy | 0, $3 | 0, $10 | 0, $24 | 0, $5 | 0, $11 | 0, $19 | 0, $8 | 0, $9 | 0, $16 | 0) | 0; //@line 44891
   $26 = __THREW__; //@line 44892
   __THREW__ = 0; //@line 44892
   L7 : do {
    if ($26 & 1) {
     label = 11; //@line 44896
    } else {
     L9 : do {
      if ($25) {
       __THREW__ = 0; //@line 44903
       invoke_iiiii(HEAP32[(HEAP32[$19 >> 2] | 0) + 32 >> 2] | 0, $19 | 0, 31091, 31101, $$byval_copy | 0) | 0; //@line 44904
       $31 = __THREW__; //@line 44905
       __THREW__ = 0; //@line 44905
       if ($31 & 1) {
        $50 = ___cxa_find_matching_catch_2() | 0; //@line 44908
        $$032 = $50; //@line 44910
        $$035 = tempRet0; //@line 44910
       } else {
        $33 = HEAP32[$9 >> 2] | 0; //@line 44912
        $34 = HEAP32[$8 >> 2] | 0; //@line 44913
        $35 = $33 - $34 | 0; //@line 44914
        $37 = $34; //@line 44916
        $38 = $33; //@line 44917
        if (($35 | 0) > 98) {
         $40 = _malloc($35 + 2 | 0) | 0; //@line 44920
         $41 = $40; //@line 44921
         if (!$40) {
          __THREW__ = 0; //@line 44924
          invoke_v(4); //@line 44925
          __THREW__ = 0; //@line 44926
          $$sroa$044$0 = $41; //@line 44927
         } else {
          $$031 = $40; //@line 44929
          $$sroa$044$1 = $41; //@line 44929
          label = 16; //@line 44930
         }
        } else {
         $$031 = $13; //@line 44933
         $$sroa$044$1 = 0; //@line 44933
         label = 16; //@line 44934
        }
        do {
         if ((label | 0) == 16) {
          if (!(HEAP8[$11 >> 0] | 0)) {
           $$1 = $$031; //@line 44941
          } else {
           HEAP8[$$031 >> 0] = 45; //@line 44944
           $$1 = $$031 + 1 | 0; //@line 44945
          }
          $59 = $$byval_copy + 10 | 0; //@line 44947
          $60 = $$byval_copy; //@line 44948
          $$0 = $37; //@line 44949
          $$2 = $$1; //@line 44949
          $62 = $38; //@line 44949
          while (1) {
           if ($$0 >>> 0 >= $62 >>> 0) {
            break;
           }
           $65 = HEAP8[$$0 >> 0] | 0; //@line 44955
           $$0$i = $$byval_copy; //@line 44956
           while (1) {
            if (($$0$i | 0) == ($59 | 0)) {
             $$0$lcssa$i = $59; //@line 44960
             break;
            }
            if ((HEAP8[$$0$i >> 0] | 0) == $65 << 24 >> 24) {
             $$0$lcssa$i = $$0$i; //@line 44966
             break;
            }
            $$0$i = $$0$i + 1 | 0; //@line 44970
           }
           HEAP8[$$2 >> 0] = HEAP8[31091 + ($$0$lcssa$i - $60) >> 0] | 0; //@line 44976
           $$0 = $$0 + 1 | 0; //@line 44980
           $$2 = $$2 + 1 | 0; //@line 44980
           $62 = HEAP32[$9 >> 2] | 0; //@line 44980
          }
          HEAP8[$$2 >> 0] = 0; //@line 44982
          HEAP32[$vararg_buffer >> 2] = $6; //@line 44983
          if ((_sscanf($13, 31102, $vararg_buffer) | 0) != 1) {
           __THREW__ = 0; //@line 44987
           invoke_vi(268, 31106); //@line 44988
           __THREW__ = 0; //@line 44989
           $$sroa$044$0 = $$sroa$044$1; //@line 44990
           break;
          }
          if ($$sroa$044$1 | 0) {
           _free($$sroa$044$1); //@line 44996
          }
          break L9;
         }
        } while (0);
        $52 = ___cxa_find_matching_catch_2() | 0; //@line 45001
        $53 = tempRet0; //@line 45002
        if ($$sroa$044$0 | 0) {
         _free($$sroa$044$0); //@line 45006
        }
        $$032 = $52; //@line 45008
        $$035 = $53; //@line 45008
       }
       $$133 = $$032; //@line 45010
       $$136 = $$035; //@line 45010
       break L7;
      }
     } while (0);
     $79 = HEAP32[$1 >> 2] | 0; //@line 45014
     do {
      if (!$79) {
       $129 = 1; //@line 45018
      } else {
       $82 = HEAP32[$79 + 12 >> 2] | 0; //@line 45021
       if (($82 | 0) == (HEAP32[$79 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 45029
        $89 = invoke_ii(HEAP32[(HEAP32[$79 >> 2] | 0) + 36 >> 2] | 0, $79 | 0) | 0; //@line 45030
        $90 = __THREW__; //@line 45031
        __THREW__ = 0; //@line 45031
        if ($90 & 1) {
         label = 11; //@line 45034
         break L7;
        } else {
         $$0$i$i$i$i = $89; //@line 45037
        }
       } else {
        $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$82 >> 0] | 0) | 0; //@line 45042
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 45047
        $129 = 1; //@line 45048
        break;
       } else {
        $129 = (HEAP32[$1 >> 2] | 0) == 0; //@line 45053
        break;
       }
      }
     } while (0);
     $96 = HEAP32[$2 >> 2] | 0; //@line 45058
     do {
      if (!$96) {
       label = 44; //@line 45062
      } else {
       $99 = HEAP32[$96 + 12 >> 2] | 0; //@line 45065
       if (($99 | 0) == (HEAP32[$96 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 45073
        $106 = invoke_ii(HEAP32[(HEAP32[$96 >> 2] | 0) + 36 >> 2] | 0, $96 | 0) | 0; //@line 45074
        $107 = __THREW__; //@line 45075
        __THREW__ = 0; //@line 45075
        if ($107 & 1) {
         label = 11; //@line 45078
         break L7;
        } else {
         $$0$i$i2$i$i = $106; //@line 45081
        }
       } else {
        $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$99 >> 0] | 0) | 0; //@line 45086
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$2 >> 2] = 0; //@line 45091
        label = 44; //@line 45092
        break;
       } else {
        if ($129) {
         break;
        } else {
         label = 46; //@line 45098
         break;
        }
       }
      }
     } while (0);
     if ((label | 0) == 44) {
      if ($129) {
       label = 46; //@line 45106
      }
     }
     if ((label | 0) == 46) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2; //@line 45112
     }
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 45114
     __ZNSt3__26localeD2Ev($10); //@line 45115
     $115 = HEAP32[$8 >> 2] | 0; //@line 45116
     HEAP32[$8 >> 2] = 0; //@line 45117
     if ($115 | 0) {
      __THREW__ = 0; //@line 45121
      invoke_vi(HEAP32[$15 >> 2] | 0, $115 | 0); //@line 45122
      $118 = __THREW__; //@line 45123
      __THREW__ = 0; //@line 45123
      if ($118 & 1) {
       $120 = ___cxa_find_matching_catch_3(0) | 0; //@line 45126
       ___clang_call_terminate($120); //@line 45128
      }
     }
     STACKTOP = sp; //@line 45132
     return $$sroa$0$0$copyload | 0; //@line 45132
    }
   } while (0);
   if ((label | 0) == 11) {
    $48 = ___cxa_find_matching_catch_2() | 0; //@line 45136
    $$133 = $48; //@line 45138
    $$136 = tempRet0; //@line 45138
   }
   $$234 = $$133; //@line 45140
   $$237 = $$136; //@line 45140
  }
  __ZNSt3__26localeD2Ev($10); //@line 45142
  $$pre57 = HEAP32[$8 >> 2] | 0; //@line 45143
  HEAP32[$8 >> 2] = 0; //@line 45144
  if (!$$pre57) {
   $$33860 = $$237; //@line 45147
   $$362 = $$234; //@line 45147
  } else {
   $$33859 = $$237; //@line 45150
   $$361 = $$234; //@line 45150
   $123 = HEAP32[$15 >> 2] | 0; //@line 45150
   $124 = $$pre57; //@line 45150
   label = 54; //@line 45151
  }
 }
 if ((label | 0) == 54) {
  __THREW__ = 0; //@line 45155
  invoke_vi($123 | 0, $124 | 0); //@line 45156
  $125 = __THREW__; //@line 45157
  __THREW__ = 0; //@line 45157
  if ($125 & 1) {
   $127 = ___cxa_find_matching_catch_3(0) | 0; //@line 45160
   ___clang_call_terminate($127); //@line 45162
  } else {
   $$33860 = $$33859; //@line 45165
   $$362 = $$361; //@line 45165
  }
 }
 ___resumeException($$362 | 0); //@line 45168
 return 0; //@line 45170
}
function __ZN6Parser24isLineFunctionDefinitionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $$010 = 0, $$011 = 0, $$012$off0 = 0, $$014 = 0, $$04$i = 0, $$1 = 0, $$113$off0 = 0, $102 = 0, $103 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $95 = 0, $96 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26168
 STACKTOP = STACKTOP + 192 | 0; //@line 26169
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192); //@line 26169
 $2 = sp + 48 | 0; //@line 26170
 $3 = sp + 36 | 0; //@line 26171
 $4 = sp + 24 | 0; //@line 26172
 $5 = sp + 12 | 0; //@line 26173
 $6 = sp; //@line 26174
 $7 = $2 + 64 | 0; //@line 26175
 $8 = $2 + 8 | 0; //@line 26176
 HEAP32[$8 >> 2] = 4868; //@line 26177
 $9 = $2 + 12 | 0; //@line 26178
 HEAP32[$2 >> 2] = 692; //@line 26179
 HEAP32[$7 >> 2] = 712; //@line 26180
 HEAP32[$2 + 4 >> 2] = 0; //@line 26182
 __THREW__ = 0; //@line 26184
 invoke_vii(110, $2 + 64 | 0, $9 | 0); //@line 26185
 $12 = __THREW__; //@line 26186
 __THREW__ = 0; //@line 26186
 if ($12 & 1) {
  $28 = ___cxa_find_matching_catch_2() | 0; //@line 26189
  $$0$i = tempRet0; //@line 26191
  $$04$i = $28; //@line 26191
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 26192
  ___resumeException($$04$i | 0); //@line 26193
 }
 HEAP32[$2 + 136 >> 2] = 0; //@line 26197
 HEAP32[$2 + 140 >> 2] = -1; //@line 26199
 HEAP32[$2 >> 2] = 4848; //@line 26200
 HEAP32[$7 >> 2] = 4888; //@line 26201
 HEAP32[$8 >> 2] = 4868; //@line 26202
 __THREW__ = 0; //@line 26203
 invoke_vi(253, $9 | 0); //@line 26204
 $16 = __THREW__; //@line 26205
 __THREW__ = 0; //@line 26205
 do {
  if ($16 & 1) {
   $30 = ___cxa_find_matching_catch_2() | 0; //@line 26209
   $eh$lpad$body$i$index2Z2D = tempRet0; //@line 26211
   $eh$lpad$body$i$indexZ2D = $30; //@line 26211
  } else {
   HEAP32[$9 >> 2] = 3032; //@line 26213
   $18 = $2 + 44 | 0; //@line 26214
   $19 = $2 + 60 | 0; //@line 26215
   HEAP32[$18 >> 2] = 0; //@line 26216
   HEAP32[$18 + 4 >> 2] = 0; //@line 26216
   HEAP32[$18 + 8 >> 2] = 0; //@line 26216
   HEAP32[$18 + 12 >> 2] = 0; //@line 26216
   HEAP32[$19 >> 2] = 24; //@line 26217
   __THREW__ = 0; //@line 26218
   invoke_vii(111, $9 | 0, $1 | 0); //@line 26219
   $20 = __THREW__; //@line 26220
   __THREW__ = 0; //@line 26220
   if ($20 & 1) {
    $22 = ___cxa_find_matching_catch_2() | 0; //@line 26223
    $23 = tempRet0; //@line 26224
    if ((HEAP8[$18 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 26230
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($9); //@line 26232
    $eh$lpad$body$i$index2Z2D = $23; //@line 26233
    $eh$lpad$body$i$indexZ2D = $22; //@line 26233
    break;
   }
   HEAP32[$3 >> 2] = 0; //@line 26236
   HEAP32[$3 + 4 >> 2] = 0; //@line 26236
   HEAP32[$3 + 8 >> 2] = 0; //@line 26236
   $32 = $4 + 11 | 0; //@line 26237
   $33 = $6 + 11 | 0; //@line 26238
   $34 = $3 + 11 | 0; //@line 26239
   $35 = $3 + 4 | 0; //@line 26240
   $36 = $5 + 11 | 0; //@line 26241
   $$011 = 0; //@line 26242
   $$012$off0 = 0; //@line 26242
   L14 : while (1) {
    __THREW__ = 0; //@line 26244
    $37 = invoke_iiii(30, $2 | 0, $3 | 0, 32) | 0; //@line 26245
    $38 = __THREW__; //@line 26246
    __THREW__ = 0; //@line 26246
    if ($38 & 1) {
     label = 20; //@line 26249
     break;
    }
    if (HEAP32[$37 + (HEAP32[(HEAP32[$37 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] & 5 | 0) {
     $$014 = 0; //@line 26261
     label = 43; //@line 26262
     break;
    }
    __THREW__ = 0; //@line 26265
    invoke_vii(115, $4 | 0, $3 | 0); //@line 26266
    $48 = __THREW__; //@line 26267
    __THREW__ = 0; //@line 26267
    if ($48 & 1) {
     label = 20; //@line 26270
     break;
    }
    __THREW__ = 0; //@line 26273
    $50 = invoke_iii(69, 0, $4 | 0) | 0; //@line 26274
    $51 = __THREW__; //@line 26275
    __THREW__ = 0; //@line 26275
    if ($51 & 1) {
     label = 21; //@line 26278
     break;
    }
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 26286
    }
    do {
     if (($50 | 0) == 1) {
      $$1 = $$011 + 1 | 0; //@line 26291
      $$113$off0 = $$012$off0; //@line 26291
     } else {
      $65 = HEAP8[$34 >> 0] | 0; //@line 26293
      if ((($65 << 24 >> 24 < 0 ? HEAP32[$35 >> 2] | 0 : $65 & 255) | 0) == 1) {
       __THREW__ = 0; //@line 26300
       $71 = invoke_iiiiii(21, $3 | 0, 0, -1, 20980, 1) | 0; //@line 26301
       $72 = __THREW__; //@line 26302
       __THREW__ = 0; //@line 26302
       if ($72 & 1) {
        label = 25; //@line 26305
        break L14;
       }
       if (!$71) {
        $$1 = $$011 + -1 | 0; //@line 26311
        $$113$off0 = $$012$off0; //@line 26311
        break;
       }
      }
      __THREW__ = 0; //@line 26315
      invoke_vii(115, $5 | 0, $3 | 0); //@line 26316
      $78 = __THREW__; //@line 26317
      __THREW__ = 0; //@line 26317
      if ($78 & 1) {
       label = 20; //@line 26320
       break L14;
      }
      __THREW__ = 0; //@line 26323
      $80 = invoke_iii(69, 0, $5 | 0) | 0; //@line 26324
      $81 = __THREW__; //@line 26325
      __THREW__ = 0; //@line 26325
      if ($81 & 1) {
       label = 33; //@line 26328
       break L14;
      }
      if ((HEAP8[$36 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 26336
      }
      $$1 = $$011; //@line 26339
      $$113$off0 = $$012$off0 ^ ($80 | 0) == 3; //@line 26339
     }
    } while (0);
    if ($$113$off0 | ($$1 | 0) != 0) {
     $$011 = $$1; //@line 26345
     $$012$off0 = $$113$off0; //@line 26345
     continue;
    }
    __THREW__ = 0; //@line 26348
    invoke_vii(115, $6 | 0, $3 | 0); //@line 26349
    $93 = __THREW__; //@line 26350
    __THREW__ = 0; //@line 26350
    if ($93 & 1) {
     label = 20; //@line 26353
     break;
    }
    __THREW__ = 0; //@line 26356
    $95 = invoke_iii(69, 0, $6 | 0) | 0; //@line 26357
    $96 = __THREW__; //@line 26358
    __THREW__ = 0; //@line 26358
    if ($96 & 1) {
     label = 41; //@line 26361
     break;
    }
    if ((HEAP8[$33 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 26369
    }
    if (!$95) {
     $$014 = 1; //@line 26372
     label = 43; //@line 26373
     break;
    } else {
     $$011 = $$1; //@line 26376
     $$012$off0 = $$113$off0; //@line 26376
    }
   }
   if ((label | 0) == 20) {
    $58 = ___cxa_find_matching_catch_2() | 0; //@line 26380
    $$0 = tempRet0; //@line 26382
    $$010 = $58; //@line 26382
   } else if ((label | 0) == 21) {
    $60 = ___cxa_find_matching_catch_2() | 0; //@line 26385
    $61 = tempRet0; //@line 26386
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 26391
     $$0 = $61; //@line 26392
     $$010 = $60; //@line 26392
    } else {
     $$0 = $61; //@line 26394
     $$010 = $60; //@line 26394
    }
   } else if ((label | 0) == 25) {
    $74 = ___cxa_find_matching_catch_3(0) | 0; //@line 26398
    ___clang_call_terminate($74); //@line 26400
   } else if ((label | 0) == 33) {
    $87 = ___cxa_find_matching_catch_2() | 0; //@line 26404
    $88 = tempRet0; //@line 26405
    if ((HEAP8[$36 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 26410
     $$0 = $88; //@line 26411
     $$010 = $87; //@line 26411
    } else {
     $$0 = $88; //@line 26413
     $$010 = $87; //@line 26413
    }
   } else if ((label | 0) == 41) {
    $102 = ___cxa_find_matching_catch_2() | 0; //@line 26417
    $103 = tempRet0; //@line 26418
    if ((HEAP8[$33 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 26423
     $$0 = $103; //@line 26424
     $$010 = $102; //@line 26424
    } else {
     $$0 = $103; //@line 26426
     $$010 = $102; //@line 26426
    }
   } else if ((label | 0) == 43) {
    if ((HEAP8[$34 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 26434
    }
    HEAP32[$2 >> 2] = 4848; //@line 26436
    HEAP32[$7 >> 2] = 4888; //@line 26437
    HEAP32[$2 + 8 >> 2] = 4868; //@line 26439
    HEAP32[$9 >> 2] = 3032; //@line 26440
    if ((HEAP8[$18 + 11 >> 0] | 0) >= 0) {
     __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($9); //@line 26445
     __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 26446
     __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 26447
     STACKTOP = sp; //@line 26448
     return $$014 | 0; //@line 26448
    }
    __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 26451
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($9); //@line 26452
    __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 26453
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 26454
    STACKTOP = sp; //@line 26455
    return $$014 | 0; //@line 26455
   }
   if ((HEAP8[$34 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 26461
   }
   HEAP32[$2 >> 2] = 4848; //@line 26463
   HEAP32[$7 >> 2] = 4888; //@line 26464
   HEAP32[$2 + 8 >> 2] = 4868; //@line 26466
   HEAP32[$9 >> 2] = 3032; //@line 26467
   if ((HEAP8[$18 + 11 >> 0] | 0) >= 0) {
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($9); //@line 26472
    __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 26473
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 26474
    ___resumeException($$010 | 0); //@line 26475
   }
   __ZdlPv(HEAP32[$18 >> 2] | 0); //@line 26479
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($9); //@line 26480
   __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 26481
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 26482
   ___resumeException($$010 | 0); //@line 26483
  }
 } while (0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 26487
 $$0$i = $eh$lpad$body$i$index2Z2D; //@line 26488
 $$04$i = $eh$lpad$body$i$indexZ2D; //@line 26488
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 26489
 ___resumeException($$04$i | 0); //@line 26490
 return 0; //@line 26492
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 64906
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 64907
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 64908
 $d_sroa_0_0_extract_trunc = $b$0; //@line 64909
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 64910
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 64911
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 64913
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 64916
    HEAP32[$rem + 4 >> 2] = 0; //@line 64917
   }
   $_0$1 = 0; //@line 64919
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 64920
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 64921
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 64924
    $_0$0 = 0; //@line 64925
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 64926
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 64928
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 64929
   $_0$1 = 0; //@line 64930
   $_0$0 = 0; //@line 64931
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 64932
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 64935
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 64940
     HEAP32[$rem + 4 >> 2] = 0; //@line 64941
    }
    $_0$1 = 0; //@line 64943
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 64944
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 64945
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 64949
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 64950
    }
    $_0$1 = 0; //@line 64952
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 64953
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 64954
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 64956
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 64959
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 64960
    }
    $_0$1 = 0; //@line 64962
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 64963
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 64964
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 64967
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 64969
    $58 = 31 - $51 | 0; //@line 64970
    $sr_1_ph = $57; //@line 64971
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 64972
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 64973
    $q_sroa_0_1_ph = 0; //@line 64974
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 64975
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 64979
    $_0$0 = 0; //@line 64980
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 64981
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 64983
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 64984
   $_0$1 = 0; //@line 64985
   $_0$0 = 0; //@line 64986
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 64987
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 64991
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 64993
     $126 = 31 - $119 | 0; //@line 64994
     $130 = $119 - 31 >> 31; //@line 64995
     $sr_1_ph = $125; //@line 64996
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 64997
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 64998
     $q_sroa_0_1_ph = 0; //@line 64999
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 65000
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 65004
     $_0$0 = 0; //@line 65005
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65006
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 65008
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 65009
    $_0$1 = 0; //@line 65010
    $_0$0 = 0; //@line 65011
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65012
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 65014
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 65017
    $89 = 64 - $88 | 0; //@line 65018
    $91 = 32 - $88 | 0; //@line 65019
    $92 = $91 >> 31; //@line 65020
    $95 = $88 - 32 | 0; //@line 65021
    $105 = $95 >> 31; //@line 65022
    $sr_1_ph = $88; //@line 65023
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 65024
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 65025
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 65026
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 65027
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 65031
    HEAP32[$rem + 4 >> 2] = 0; //@line 65032
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 65035
    $_0$0 = $a$0 | 0 | 0; //@line 65036
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65037
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 65039
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 65040
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 65041
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65042
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 65047
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 65048
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 65049
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 65050
  $carry_0_lcssa$1 = 0; //@line 65051
  $carry_0_lcssa$0 = 0; //@line 65052
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 65054
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 65055
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 65056
  $137$1 = tempRet0; //@line 65057
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 65058
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 65059
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 65060
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 65061
  $sr_1202 = $sr_1_ph; //@line 65062
  $carry_0203 = 0; //@line 65063
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 65065
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 65066
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 65067
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 65068
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 65069
   $150$1 = tempRet0; //@line 65070
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 65071
   $carry_0203 = $151$0 & 1; //@line 65072
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 65074
   $r_sroa_1_1200 = tempRet0; //@line 65075
   $sr_1202 = $sr_1202 - 1 | 0; //@line 65076
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 65088
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 65089
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 65090
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 65091
  $carry_0_lcssa$1 = 0; //@line 65092
  $carry_0_lcssa$0 = $carry_0203; //@line 65093
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 65095
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 65096
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 65099
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 65100
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 65102
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 65103
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65104
}
function __ZN6Parser19isLineTypeSignatureENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $$010 = 0, $$011 = 0, $$012$off0 = 0, $$014 = 0, $$04$i = 0, $$1 = 0, $$113$off0 = 0, $100 = 0, $11 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $72 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $85 = 0, $86 = 0, $91 = 0, $97 = 0, $98 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26701
 STACKTOP = STACKTOP + 192 | 0; //@line 26702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192); //@line 26702
 $2 = sp + 40 | 0; //@line 26703
 $3 = sp + 24 | 0; //@line 26704
 $4 = sp + 12 | 0; //@line 26705
 $5 = sp; //@line 26706
 $6 = $2 + 64 | 0; //@line 26707
 $7 = $2 + 8 | 0; //@line 26708
 HEAP32[$7 >> 2] = 4868; //@line 26709
 $8 = $2 + 12 | 0; //@line 26710
 HEAP32[$2 >> 2] = 692; //@line 26711
 HEAP32[$6 >> 2] = 712; //@line 26712
 HEAP32[$2 + 4 >> 2] = 0; //@line 26714
 __THREW__ = 0; //@line 26716
 invoke_vii(110, $2 + 64 | 0, $8 | 0); //@line 26717
 $11 = __THREW__; //@line 26718
 __THREW__ = 0; //@line 26718
 if ($11 & 1) {
  $27 = ___cxa_find_matching_catch_2() | 0; //@line 26721
  $$0$i = tempRet0; //@line 26723
  $$04$i = $27; //@line 26723
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($6); //@line 26724
  ___resumeException($$04$i | 0); //@line 26725
 }
 HEAP32[$2 + 136 >> 2] = 0; //@line 26729
 HEAP32[$2 + 140 >> 2] = -1; //@line 26731
 HEAP32[$2 >> 2] = 4848; //@line 26732
 HEAP32[$6 >> 2] = 4888; //@line 26733
 HEAP32[$7 >> 2] = 4868; //@line 26734
 __THREW__ = 0; //@line 26735
 invoke_vi(253, $8 | 0); //@line 26736
 $15 = __THREW__; //@line 26737
 __THREW__ = 0; //@line 26737
 do {
  if ($15 & 1) {
   $29 = ___cxa_find_matching_catch_2() | 0; //@line 26741
   $eh$lpad$body$i$index2Z2D = tempRet0; //@line 26743
   $eh$lpad$body$i$indexZ2D = $29; //@line 26743
  } else {
   HEAP32[$8 >> 2] = 3032; //@line 26745
   $17 = $2 + 44 | 0; //@line 26746
   $18 = $2 + 60 | 0; //@line 26747
   HEAP32[$17 >> 2] = 0; //@line 26748
   HEAP32[$17 + 4 >> 2] = 0; //@line 26748
   HEAP32[$17 + 8 >> 2] = 0; //@line 26748
   HEAP32[$17 + 12 >> 2] = 0; //@line 26748
   HEAP32[$18 >> 2] = 24; //@line 26749
   __THREW__ = 0; //@line 26750
   invoke_vii(111, $8 | 0, $1 | 0); //@line 26751
   $19 = __THREW__; //@line 26752
   __THREW__ = 0; //@line 26752
   if ($19 & 1) {
    $21 = ___cxa_find_matching_catch_2() | 0; //@line 26755
    $22 = tempRet0; //@line 26756
    if ((HEAP8[$17 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$17 >> 2] | 0); //@line 26762
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($8); //@line 26764
    $eh$lpad$body$i$index2Z2D = $22; //@line 26765
    $eh$lpad$body$i$indexZ2D = $21; //@line 26765
    break;
   }
   HEAP32[$3 >> 2] = 0; //@line 26768
   HEAP32[$3 + 4 >> 2] = 0; //@line 26768
   HEAP32[$3 + 8 >> 2] = 0; //@line 26768
   $31 = $4 + 11 | 0; //@line 26769
   $32 = $3 + 11 | 0; //@line 26770
   $33 = $3 + 4 | 0; //@line 26771
   $34 = $5 + 11 | 0; //@line 26772
   $$011 = 0; //@line 26773
   $$012$off0 = 0; //@line 26773
   L14 : while (1) {
    __THREW__ = 0; //@line 26775
    $35 = invoke_iiii(30, $2 | 0, $3 | 0, 32) | 0; //@line 26776
    $36 = __THREW__; //@line 26777
    __THREW__ = 0; //@line 26777
    if ($36 & 1) {
     label = 20; //@line 26780
     break;
    }
    if (HEAP32[$35 + (HEAP32[(HEAP32[$35 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] & 5 | 0) {
     $$014 = 0; //@line 26792
     label = 40; //@line 26793
     break;
    }
    __THREW__ = 0; //@line 26796
    invoke_vii(115, $4 | 0, $3 | 0); //@line 26797
    $46 = __THREW__; //@line 26798
    __THREW__ = 0; //@line 26798
    if ($46 & 1) {
     label = 20; //@line 26801
     break;
    }
    __THREW__ = 0; //@line 26804
    $48 = invoke_iii(69, 0, $4 | 0) | 0; //@line 26805
    $49 = __THREW__; //@line 26806
    __THREW__ = 0; //@line 26806
    if ($49 & 1) {
     label = 21; //@line 26809
     break;
    }
    if ((HEAP8[$31 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 26817
    }
    do {
     if (($48 | 0) == 1) {
      $$1 = $$011 + 1 | 0; //@line 26822
      $$113$off0 = $$012$off0; //@line 26822
     } else {
      $63 = HEAP8[$32 >> 0] | 0; //@line 26824
      if ((($63 << 24 >> 24 < 0 ? HEAP32[$33 >> 2] | 0 : $63 & 255) | 0) == 1) {
       __THREW__ = 0; //@line 26831
       $69 = invoke_iiiiii(21, $3 | 0, 0, -1, 20980, 1) | 0; //@line 26832
       $70 = __THREW__; //@line 26833
       __THREW__ = 0; //@line 26833
       if ($70 & 1) {
        label = 25; //@line 26836
        break L14;
       }
       if (!$69) {
        $$1 = $$011 + -1 | 0; //@line 26842
        $$113$off0 = $$012$off0; //@line 26842
        break;
       }
      }
      __THREW__ = 0; //@line 26846
      invoke_vii(115, $5 | 0, $3 | 0); //@line 26847
      $76 = __THREW__; //@line 26848
      __THREW__ = 0; //@line 26848
      if ($76 & 1) {
       label = 20; //@line 26851
       break L14;
      }
      __THREW__ = 0; //@line 26854
      $78 = invoke_iii(69, 0, $5 | 0) | 0; //@line 26855
      $79 = __THREW__; //@line 26856
      __THREW__ = 0; //@line 26856
      if ($79 & 1) {
       label = 33; //@line 26859
       break L14;
      }
      if ((HEAP8[$34 >> 0] | 0) < 0) {
       __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 26867
      }
      $$1 = $$011; //@line 26870
      $$113$off0 = $$012$off0 ^ ($78 | 0) == 3; //@line 26870
     }
    } while (0);
    if ($$113$off0 | ($$1 | 0) != 0) {
     $$011 = $$1; //@line 26876
     $$012$off0 = $$113$off0; //@line 26876
     continue;
    }
    $91 = HEAP8[$32 >> 0] | 0; //@line 26879
    if ((($91 << 24 >> 24 < 0 ? HEAP32[$33 >> 2] | 0 : $91 & 255) | 0) != 2) {
     $$011 = $$1; //@line 26886
     $$012$off0 = $$113$off0; //@line 26886
     continue;
    }
    __THREW__ = 0; //@line 26889
    $97 = invoke_iiiiii(21, $3 | 0, 0, -1, 20989, 2) | 0; //@line 26890
    $98 = __THREW__; //@line 26891
    __THREW__ = 0; //@line 26891
    if ($98 & 1) {
     label = 38; //@line 26894
     break;
    }
    if (!$97) {
     $$014 = 1; //@line 26899
     label = 40; //@line 26900
     break;
    } else {
     $$011 = $$1; //@line 26903
     $$012$off0 = $$113$off0; //@line 26903
    }
   }
   if ((label | 0) == 20) {
    $56 = ___cxa_find_matching_catch_2() | 0; //@line 26907
    $$0 = tempRet0; //@line 26909
    $$010 = $56; //@line 26909
   } else if ((label | 0) == 21) {
    $58 = ___cxa_find_matching_catch_2() | 0; //@line 26912
    $59 = tempRet0; //@line 26913
    if ((HEAP8[$31 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 26918
     $$0 = $59; //@line 26919
     $$010 = $58; //@line 26919
    } else {
     $$0 = $59; //@line 26921
     $$010 = $58; //@line 26921
    }
   } else if ((label | 0) == 25) {
    $72 = ___cxa_find_matching_catch_3(0) | 0; //@line 26925
    ___clang_call_terminate($72); //@line 26927
   } else if ((label | 0) == 33) {
    $85 = ___cxa_find_matching_catch_2() | 0; //@line 26931
    $86 = tempRet0; //@line 26932
    if ((HEAP8[$34 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 26937
     $$0 = $86; //@line 26938
     $$010 = $85; //@line 26938
    } else {
     $$0 = $86; //@line 26940
     $$010 = $85; //@line 26940
    }
   } else if ((label | 0) == 38) {
    $100 = ___cxa_find_matching_catch_3(0) | 0; //@line 26944
    ___clang_call_terminate($100); //@line 26946
   } else if ((label | 0) == 40) {
    if ((HEAP8[$32 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 26954
    }
    HEAP32[$2 >> 2] = 4848; //@line 26956
    HEAP32[$6 >> 2] = 4888; //@line 26957
    HEAP32[$2 + 8 >> 2] = 4868; //@line 26959
    HEAP32[$8 >> 2] = 3032; //@line 26960
    if ((HEAP8[$17 + 11 >> 0] | 0) >= 0) {
     __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($8); //@line 26965
     __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 26966
     __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($6); //@line 26967
     STACKTOP = sp; //@line 26968
     return $$014 | 0; //@line 26968
    }
    __ZdlPv(HEAP32[$17 >> 2] | 0); //@line 26971
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($8); //@line 26972
    __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 26973
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($6); //@line 26974
    STACKTOP = sp; //@line 26975
    return $$014 | 0; //@line 26975
   }
   if ((HEAP8[$32 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 26981
   }
   HEAP32[$2 >> 2] = 4848; //@line 26983
   HEAP32[$6 >> 2] = 4888; //@line 26984
   HEAP32[$2 + 8 >> 2] = 4868; //@line 26986
   HEAP32[$8 >> 2] = 3032; //@line 26987
   if ((HEAP8[$17 + 11 >> 0] | 0) >= 0) {
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($8); //@line 26992
    __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 26993
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($6); //@line 26994
    ___resumeException($$010 | 0); //@line 26995
   }
   __ZdlPv(HEAP32[$17 >> 2] | 0); //@line 26999
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($8); //@line 27000
   __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 27001
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($6); //@line 27002
   ___resumeException($$010 | 0); //@line 27003
  }
 } while (0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($2, 4900); //@line 27007
 $$0$i = $eh$lpad$body$i$index2Z2D; //@line 27008
 $$04$i = $eh$lpad$body$i$indexZ2D; //@line 27008
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($6); //@line 27009
 ___resumeException($$04$i | 0); //@line 27010
 return 0; //@line 27012
}
function __ZN5Stack4swapEyy($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$sink$i$i$i = 0, $$sink$i$i$i10 = 0, $$sink$i$i$i13 = 0, $$sink$i$i$i6 = 0, $$sroa$0$0$in = 0, $$sroa$0$1$in = 0, $$sroa$029$0$in = 0, $$sroa$029$1$in = 0, $$sroa$4$0 = 0, $$sroa$430$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $118 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $128 = 0, $134 = 0, $135 = 0, $14 = 0, $140 = 0, $142 = 0, $146 = 0, $147 = 0, $148 = 0, $150 = 0, $153 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $167 = 0, $17 = 0, $171 = 0, $24 = 0, $26 = 0, $29 = 0, $33 = 0, $35 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $51 = 0, $64 = 0, $66 = 0, $69 = 0, $73 = 0, $75 = 0, $82 = 0, $83 = 0, $84 = 0, $91 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP; //@line 14296
 STACKTOP = STACKTOP + 80 | 0; //@line 14297
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 14297
 $5 = sp; //@line 14298
 $10 = (HEAP32[$0 + 96 >> 2] | 0) + (HEAP32[$0 + 100 >> 2] | 0) | 0; //@line 14303
 $12 = HEAP32[$0 + 84 >> 2] | 0; //@line 14305
 $14 = $12 + ((($10 >>> 0) / 56 | 0) << 2) | 0; //@line 14307
 $17 = (HEAP32[$0 + 88 >> 2] | 0) == ($12 | 0); //@line 14310
 if ($17) {
  $24 = 0; //@line 14312
 } else {
  $24 = (HEAP32[$14 >> 2] | 0) + ((($10 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14318
 }
 if (!$1) {
  $$sroa$029$1$in = $14; //@line 14322
  $$sroa$430$0 = $24; //@line 14322
 } else {
  $26 = (($24 - (HEAP32[$14 >> 2] | 0) | 0) / 72 | 0) - $1 | 0; //@line 14327
  if (($26 | 0) > 0) {
   $29 = $14 + ((($26 >>> 0) / 56 | 0) << 2) | 0; //@line 14331
   $$sink$i$i$i = (HEAP32[$29 >> 2] | 0) + ((($26 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14335
   $$sroa$029$0$in = $29; //@line 14335
  } else {
   $33 = 55 - $26 | 0; //@line 14337
   $35 = $14 + ((($33 | 0) / -56 | 0) << 2) | 0; //@line 14339
   $$sink$i$i$i = (HEAP32[$35 >> 2] | 0) + ((55 - (($33 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 14344
   $$sroa$029$0$in = $35; //@line 14344
  }
  $$sroa$029$1$in = $$sroa$029$0$in; //@line 14347
  $$sroa$430$0 = $$sink$i$i$i; //@line 14347
 }
 $42 = $$sroa$430$0 - (HEAP32[$$sroa$029$1$in >> 2] | 0) | 0; //@line 14350
 $43 = ($42 | 0) / 72 | 0; //@line 14351
 $44 = $43 + -1 | 0; //@line 14352
 if (($42 | 0) > 72) {
  $$sink$i$i$i6 = (HEAP32[$$sroa$029$1$in + ((($44 >>> 0) / 56 | 0) << 2) >> 2] | 0) + ((($44 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14360
 } else {
  $51 = 56 - $43 | 0; //@line 14362
  $$sink$i$i$i6 = (HEAP32[$$sroa$029$1$in + ((($51 | 0) / -56 | 0) << 2) >> 2] | 0) + ((55 - (($51 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 14369
 }
 if ($17) {
  $64 = 0; //@line 14372
 } else {
  $64 = (HEAP32[$14 >> 2] | 0) + ((($10 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14378
 }
 if (!$3) {
  $$sroa$0$1$in = $14; //@line 14382
  $$sroa$4$0 = $64; //@line 14382
 } else {
  $66 = (($64 - (HEAP32[$14 >> 2] | 0) | 0) / 72 | 0) - $3 | 0; //@line 14387
  if (($66 | 0) > 0) {
   $69 = $14 + ((($66 >>> 0) / 56 | 0) << 2) | 0; //@line 14391
   $$sink$i$i$i10 = (HEAP32[$69 >> 2] | 0) + ((($66 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14395
   $$sroa$0$0$in = $69; //@line 14395
  } else {
   $73 = 55 - $66 | 0; //@line 14397
   $75 = $14 + ((($73 | 0) / -56 | 0) << 2) | 0; //@line 14399
   $$sink$i$i$i10 = (HEAP32[$75 >> 2] | 0) + ((55 - (($73 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 14404
   $$sroa$0$0$in = $75; //@line 14404
  }
  $$sroa$0$1$in = $$sroa$0$0$in; //@line 14407
  $$sroa$4$0 = $$sink$i$i$i10; //@line 14407
 }
 $82 = $$sroa$4$0 - (HEAP32[$$sroa$0$1$in >> 2] | 0) | 0; //@line 14410
 $83 = ($82 | 0) / 72 | 0; //@line 14411
 $84 = $83 + -1 | 0; //@line 14412
 if (($82 | 0) > 72) {
  $$sink$i$i$i13 = (HEAP32[$$sroa$0$1$in + ((($84 >>> 0) / 56 | 0) << 2) >> 2] | 0) + ((($84 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 14420
 } else {
  $91 = 56 - $83 | 0; //@line 14422
  $$sink$i$i$i13 = (HEAP32[$$sroa$0$1$in + ((($91 | 0) / -56 | 0) << 2) >> 2] | 0) + ((55 - (($91 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 14429
 }
 $98 = HEAP32[$$sink$i$i$i6 >> 2] | 0; //@line 14431
 HEAP32[$5 >> 2] = $98; //@line 14432
 $99 = $5 + 4 | 0; //@line 14433
 $100 = $$sink$i$i$i6 + 4 | 0; //@line 14434
 HEAP32[$99 >> 2] = HEAP32[$100 >> 2]; //@line 14435
 HEAP32[$99 + 4 >> 2] = HEAP32[$100 + 4 >> 2]; //@line 14435
 HEAP32[$99 + 8 >> 2] = HEAP32[$100 + 8 >> 2]; //@line 14435
 HEAP32[$100 >> 2] = 0; //@line 14436
 HEAP32[$100 + 4 >> 2] = 0; //@line 14436
 HEAP32[$100 + 8 >> 2] = 0; //@line 14436
 $101 = $5 + 16 | 0; //@line 14437
 $102 = $$sink$i$i$i6 + 16 | 0; //@line 14438
 HEAP32[$101 >> 2] = HEAP32[$102 >> 2]; //@line 14439
 HEAP32[$101 + 4 >> 2] = HEAP32[$102 + 4 >> 2]; //@line 14439
 HEAP32[$101 + 8 >> 2] = HEAP32[$102 + 8 >> 2]; //@line 14439
 HEAP32[$101 + 12 >> 2] = HEAP32[$102 + 12 >> 2]; //@line 14439
 HEAP32[$101 + 16 >> 2] = HEAP32[$102 + 16 >> 2]; //@line 14439
 HEAP32[$101 + 20 >> 2] = HEAP32[$102 + 20 >> 2]; //@line 14439
 $103 = $5 + 40 | 0; //@line 14440
 $104 = $$sink$i$i$i6 + 40 | 0; //@line 14441
 $105 = $5 + 44 | 0; //@line 14442
 HEAP32[$103 >> 2] = HEAP32[$104 >> 2]; //@line 14444
 $107 = $$sink$i$i$i6 + 44 | 0; //@line 14445
 HEAP32[$105 >> 2] = HEAP32[$107 >> 2]; //@line 14447
 $109 = $$sink$i$i$i6 + 48 | 0; //@line 14448
 $111 = $5 + 48 | 0; //@line 14450
 HEAP32[$111 >> 2] = HEAP32[$109 >> 2]; //@line 14451
 HEAP32[$109 >> 2] = 0; //@line 14452
 HEAP32[$107 >> 2] = 0; //@line 14453
 HEAP32[$104 >> 2] = 0; //@line 14454
 $112 = $5 + 52 | 0; //@line 14455
 $113 = $$sink$i$i$i6 + 52 | 0; //@line 14456
 HEAP32[$112 >> 2] = HEAP32[$113 >> 2]; //@line 14457
 HEAP32[$112 + 4 >> 2] = HEAP32[$113 + 4 >> 2]; //@line 14457
 HEAP32[$112 + 8 >> 2] = HEAP32[$113 + 8 >> 2]; //@line 14457
 HEAP32[$113 >> 2] = 0; //@line 14458
 HEAP32[$113 + 4 >> 2] = 0; //@line 14458
 HEAP32[$113 + 8 >> 2] = 0; //@line 14458
 $114 = $5 + 64 | 0; //@line 14459
 HEAP16[$114 >> 1] = HEAP16[$$sink$i$i$i6 + 64 >> 1] | 0; //@line 14462
 __ZN13CharmFunctionaSEOS_($$sink$i$i$i6, $$sink$i$i$i13) | 0; //@line 14463
 HEAP32[$$sink$i$i$i13 >> 2] = $98; //@line 14464
 $117 = $$sink$i$i$i13 + 4 | 0; //@line 14465
 $118 = $117 + 11 | 0; //@line 14466
 if ((HEAP8[$118 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$117 >> 2] >> 0] = 0; //@line 14471
  HEAP32[$$sink$i$i$i13 + 8 >> 2] = 0; //@line 14473
 } else {
  HEAP8[$117 >> 0] = 0; //@line 14475
  HEAP8[$118 >> 0] = 0; //@line 14476
 }
 __THREW__ = 0; //@line 14478
 invoke_vii(129, $117 | 0, 0); //@line 14479
 $123 = __THREW__; //@line 14480
 __THREW__ = 0; //@line 14480
 if ($123 & 1) {
  $125 = ___cxa_find_matching_catch_3(0) | 0; //@line 14483
  ___clang_call_terminate($125); //@line 14485
 }
 HEAP32[$117 >> 2] = HEAP32[$99 >> 2]; //@line 14488
 HEAP32[$117 + 4 >> 2] = HEAP32[$99 + 4 >> 2]; //@line 14488
 HEAP32[$117 + 8 >> 2] = HEAP32[$99 + 8 >> 2]; //@line 14488
 HEAP32[$99 >> 2] = 0; //@line 14489
 HEAP32[$99 + 4 >> 2] = 0; //@line 14489
 HEAP32[$99 + 8 >> 2] = 0; //@line 14489
 $127 = $$sink$i$i$i13 + 16 | 0; //@line 14490
 HEAP32[$127 >> 2] = HEAP32[$101 >> 2]; //@line 14491
 HEAP32[$127 + 4 >> 2] = HEAP32[$101 + 4 >> 2]; //@line 14491
 HEAP32[$127 + 8 >> 2] = HEAP32[$101 + 8 >> 2]; //@line 14491
 HEAP32[$127 + 12 >> 2] = HEAP32[$101 + 12 >> 2]; //@line 14491
 HEAP32[$127 + 16 >> 2] = HEAP32[$101 + 16 >> 2]; //@line 14491
 HEAP32[$127 + 20 >> 2] = HEAP32[$101 + 20 >> 2]; //@line 14491
 $128 = $$sink$i$i$i13 + 40 | 0; //@line 14492
 __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($128); //@line 14493
 HEAP32[$128 >> 2] = HEAP32[$103 >> 2]; //@line 14495
 HEAP32[$$sink$i$i$i13 + 44 >> 2] = HEAP32[$105 >> 2]; //@line 14498
 HEAP32[$$sink$i$i$i13 + 48 >> 2] = HEAP32[$111 >> 2]; //@line 14501
 HEAP32[$111 >> 2] = 0; //@line 14502
 HEAP32[$105 >> 2] = 0; //@line 14503
 HEAP32[$103 >> 2] = 0; //@line 14504
 $134 = $$sink$i$i$i13 + 52 | 0; //@line 14505
 $135 = $134 + 11 | 0; //@line 14506
 if ((HEAP8[$135 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$134 >> 2] >> 0] = 0; //@line 14511
  HEAP32[$$sink$i$i$i13 + 56 >> 2] = 0; //@line 14513
 } else {
  HEAP8[$134 >> 0] = 0; //@line 14515
  HEAP8[$135 >> 0] = 0; //@line 14516
 }
 __THREW__ = 0; //@line 14518
 invoke_vii(129, $134 | 0, 0); //@line 14519
 $140 = __THREW__; //@line 14520
 __THREW__ = 0; //@line 14520
 if ($140 & 1) {
  $142 = ___cxa_find_matching_catch_3(0) | 0; //@line 14523
  ___clang_call_terminate($142); //@line 14525
 }
 HEAP32[$134 >> 2] = HEAP32[$112 >> 2]; //@line 14528
 HEAP32[$134 + 4 >> 2] = HEAP32[$112 + 4 >> 2]; //@line 14528
 HEAP32[$134 + 8 >> 2] = HEAP32[$112 + 8 >> 2]; //@line 14528
 HEAP32[$112 >> 2] = 0; //@line 14529
 HEAP32[$112 + 4 >> 2] = 0; //@line 14529
 HEAP32[$112 + 8 >> 2] = 0; //@line 14529
 HEAP16[$$sink$i$i$i13 + 64 >> 1] = HEAP16[$114 >> 1] | 0; //@line 14532
 __ZN13CharmFunctionD2Ev($5); //@line 14533
 $146 = _i64Add($1 | 0, $2 | 0, 1, 0) | 0; //@line 14534
 $147 = tempRet0; //@line 14535
 $148 = $0; //@line 14536
 $150 = HEAP32[$148 >> 2] | 0; //@line 14538
 $153 = HEAP32[$148 + 4 >> 2] | 0; //@line 14541
 $158 = $147 >>> 0 > $153 >>> 0 | ($147 | 0) == ($153 | 0) & $146 >>> 0 > $150 >>> 0; //@line 14546
 $159 = $158 ? $1 : $150; //@line 14547
 $160 = $158 ? $2 : $153; //@line 14548
 $161 = _i64Add($3 | 0, $4 | 0, 1, 0) | 0; //@line 14549
 $162 = tempRet0; //@line 14550
 $167 = $162 >>> 0 > $160 >>> 0 | ($162 | 0) == ($160 | 0) & $161 >>> 0 > $159 >>> 0; //@line 14555
 if (!($158 | $167)) {
  STACKTOP = sp; //@line 14558
  return;
 }
 $171 = $0; //@line 14562
 HEAP32[$171 >> 2] = $167 ? $3 : $159; //@line 14564
 HEAP32[$171 + 4 >> 2] = $167 ? $4 : $160; //@line 14567
 STACKTOP = sp; //@line 14568
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i$i$i40 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i2$i$i46 = 0, $$0$i$i36 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $$pre$i4$i$i33 = 0, $$pre$i4$i$i48 = 0, $107 = 0, $108 = 0, $111 = 0, $113 = 0, $123 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $151 = 0, $165 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $49 = 0, $5 = 0, $52 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $79 = 0, $8 = 0, $91 = 0, $94 = 0, label = 0;
 $5 = HEAP32[$0 >> 2] | 0; //@line 40697
 do {
  if (!$5) {
   $179 = 1; //@line 40701
  } else {
   $8 = HEAP32[$5 + 12 >> 2] | 0; //@line 40704
   if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 255]($5) | 0; //@line 40713
   } else {
    $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0; //@line 40717
   }
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$0 >> 2] = 0; //@line 40722
    $179 = 1; //@line 40723
    break;
   } else {
    $179 = (HEAP32[$0 >> 2] | 0) == 0; //@line 40728
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$1 >> 2] | 0; //@line 40733
 do {
  if (!$20) {
   label = 14; //@line 40737
  } else {
   $23 = HEAP32[$20 + 12 >> 2] | 0; //@line 40740
   if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) {
    $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 255]($20) | 0; //@line 40749
   } else {
    $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0; //@line 40753
   }
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0; //@line 40758
    label = 14; //@line 40759
    break;
   } else {
    if ($179) {
     $180 = $20; //@line 40763
     label = 17; //@line 40764
     break;
    } else {
     label = 16; //@line 40767
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($179) {
   label = 16; //@line 40775
  } else {
   $180 = 0; //@line 40777
   label = 17; //@line 40778
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6; //@line 40785
   $$2 = 0; //@line 40786
  } else if ((label | 0) == 17) {
   $37 = HEAP32[$0 >> 2] | 0; //@line 40789
   $39 = HEAP32[$37 + 12 >> 2] | 0; //@line 40791
   if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 255]($37) | 0; //@line 40800
   } else {
    $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0; //@line 40804
   }
   $49 = $$0$i$i & 255; //@line 40806
   if ($49 << 24 >> 24 > -1) {
    $52 = $3 + 8 | 0; //@line 40811
    if (HEAP16[(HEAP32[$52 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
     $64 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 63]($3, $49, 0) | 0) << 24 >> 24; //@line 40822
     $65 = HEAP32[$0 >> 2] | 0; //@line 40823
     $66 = $65 + 12 | 0; //@line 40824
     $67 = HEAP32[$66 >> 2] | 0; //@line 40825
     if (($67 | 0) == (HEAP32[$65 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 40 >> 2] & 255]($65) | 0; //@line 40833
      $$0$in = $64; //@line 40834
      $$023$in = $4; //@line 40834
      $$pre$i4$i$i33 = $180; //@line 40834
      $91 = $180; //@line 40834
     } else {
      HEAP32[$66 >> 2] = $67 + 1; //@line 40837
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$67 >> 0] | 0) | 0; //@line 40839
      $$0$in = $64; //@line 40840
      $$023$in = $4; //@line 40840
      $$pre$i4$i$i33 = $180; //@line 40840
      $91 = $180; //@line 40840
     }
     while (1) {
      $$0 = $$0$in + -48 | 0; //@line 40843
      $$023 = $$023$in + -1 | 0; //@line 40844
      $76 = HEAP32[$0 >> 2] | 0; //@line 40845
      do {
       if (!$76) {
        $108 = 1; //@line 40849
       } else {
        $79 = HEAP32[$76 + 12 >> 2] | 0; //@line 40852
        if (($79 | 0) == (HEAP32[$76 + 16 >> 2] | 0)) {
         $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] & 255]($76) | 0; //@line 40861
        } else {
         $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$79 >> 0] | 0) | 0; //@line 40865
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$0 >> 2] = 0; //@line 40870
         $108 = 1; //@line 40871
         break;
        } else {
         $108 = (HEAP32[$0 >> 2] | 0) == 0; //@line 40876
         break;
        }
       }
      } while (0);
      do {
       if (!$91) {
        $$pre$i4$i$i48 = $$pre$i4$i$i33; //@line 40884
        $107 = 1; //@line 40884
        $181 = 0; //@line 40884
       } else {
        $94 = HEAP32[$91 + 12 >> 2] | 0; //@line 40887
        if (($94 | 0) == (HEAP32[$91 + 16 >> 2] | 0)) {
         $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$91 >> 2] | 0) + 36 >> 2] & 255]($91) | 0; //@line 40896
        } else {
         $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$94 >> 0] | 0) | 0; //@line 40900
        }
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$1 >> 2] = 0; //@line 40905
         $$pre$i4$i$i48 = 0; //@line 40906
         $107 = 1; //@line 40906
         $181 = 0; //@line 40906
         break;
        } else {
         $$pre$i4$i$i48 = $$pre$i4$i$i33; //@line 40910
         $107 = ($$pre$i4$i$i33 | 0) == 0; //@line 40910
         $181 = $$pre$i4$i$i33; //@line 40910
         break;
        }
       }
      } while (0);
      $111 = HEAP32[$0 >> 2] | 0; //@line 40918
      if (!(($$023$in | 0) > 1 & ($108 ^ $107))) {
       break;
      }
      $113 = HEAP32[$111 + 12 >> 2] | 0; //@line 40923
      if (($113 | 0) == (HEAP32[$111 + 16 >> 2] | 0)) {
       $$0$i$i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$111 >> 2] | 0) + 36 >> 2] & 255]($111) | 0; //@line 40932
      } else {
       $$0$i$i36 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$113 >> 0] | 0) | 0; //@line 40936
      }
      $123 = $$0$i$i36 & 255; //@line 40938
      if ($123 << 24 >> 24 <= -1) {
       $$2 = $$0; //@line 40941
       break L22;
      }
      if (!(HEAP16[(HEAP32[$52 >> 2] | 0) + ($$0$i$i36 << 24 >> 24 << 1) >> 1] & 2048)) {
       $$2 = $$0; //@line 40952
       break L22;
      }
      $137 = ($$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 63]($3, $123, 0) | 0) << 24 >> 24) | 0; //@line 40961
      $138 = HEAP32[$0 >> 2] | 0; //@line 40962
      $139 = $138 + 12 | 0; //@line 40963
      $140 = HEAP32[$139 >> 2] | 0; //@line 40964
      if (($140 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 40 >> 2] & 255]($138) | 0; //@line 40972
       $$0$in = $137; //@line 40973
       $$023$in = $$023; //@line 40973
       $$pre$i4$i$i33 = $$pre$i4$i$i48; //@line 40973
       $91 = $181; //@line 40973
       continue;
      } else {
       HEAP32[$139 >> 2] = $140 + 1; //@line 40977
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$140 >> 0] | 0) | 0; //@line 40979
       $$0$in = $137; //@line 40980
       $$023$in = $$023; //@line 40980
       $$pre$i4$i$i33 = $$pre$i4$i$i48; //@line 40980
       $91 = $181; //@line 40980
       continue;
      }
     }
     do {
      if (!$111) {
       $182 = 1; //@line 40987
      } else {
       $151 = HEAP32[$111 + 12 >> 2] | 0; //@line 40990
       if (($151 | 0) == (HEAP32[$111 + 16 >> 2] | 0)) {
        $$0$i$i$i$i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$111 >> 2] | 0) + 36 >> 2] & 255]($111) | 0; //@line 40999
       } else {
        $$0$i$i$i$i40 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$151 >> 0] | 0) | 0; //@line 41003
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i40, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0; //@line 41008
        $182 = 1; //@line 41009
        break;
       } else {
        $182 = (HEAP32[$0 >> 2] | 0) == 0; //@line 41014
        break;
       }
      }
     } while (0);
     do {
      if (!$$pre$i4$i$i48) {
       label = 62; //@line 41022
      } else {
       $165 = HEAP32[$$pre$i4$i$i48 + 12 >> 2] | 0; //@line 41025
       if (($165 | 0) == (HEAP32[$$pre$i4$i$i48 + 16 >> 2] | 0)) {
        $$0$i$i2$i$i46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i4$i$i48 >> 2] | 0) + 36 >> 2] & 255]($$pre$i4$i$i48) | 0; //@line 41034
       } else {
        $$0$i$i2$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$165 >> 0] | 0) | 0; //@line 41038
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i46, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 41043
        label = 62; //@line 41044
        break;
       } else {
        if ($182) {
         $$2 = $$0; //@line 41048
         break L22;
        } else {
         break;
        }
       }
      }
     } while (0);
     if ((label | 0) == 62) {
      if (!$182) {
       $$2 = $$0; //@line 41058
       break;
      }
     }
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2; //@line 41064
     $$2 = $$0; //@line 41065
     break;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4; //@line 41071
   $$2 = 0; //@line 41072
  }
 } while (0);
 return $$2 | 0; //@line 41075
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$$099 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0, $$3 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $126 = 0, $129 = 0, $130 = 0, $132 = 0, $135 = 0, $136 = 0, $138 = 0, $142 = 0, $144 = 0, $146 = 0, $147 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $93 = 0, $99 = 0;
 HEAP32[$2 >> 2] = $0; //@line 54224
 $16 = $13 + 8 + 3 | 0; //@line 54226
 $17 = $13 + 4 | 0; //@line 54227
 $19 = $12 + 8 + 3 | 0; //@line 54229
 $20 = $12 + 4 | 0; //@line 54230
 $22 = ($3 & 512 | 0) == 0; //@line 54232
 $23 = ($14 | 0) > 0; //@line 54233
 $24 = $11 + 11 | 0; //@line 54234
 $25 = $11 + 4 | 0; //@line 54235
 $$0106 = 0; //@line 54236
 $$099 = $4; //@line 54236
 while (1) {
  if (($$0106 | 0) == 4) {
   break;
  }
  L4 : do {
   switch (HEAP8[$8 + $$0106 >> 0] | 0) {
   case 0:
    {
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2]; //@line 54249
     $$2 = $$099; //@line 54250
     break;
    }
   case 1:
    {
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2]; //@line 54255
     $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 127]($6, 32) | 0; //@line 54259
     $41 = HEAP32[$2 >> 2] | 0; //@line 54260
     HEAP32[$2 >> 2] = $41 + 4; //@line 54262
     HEAP32[$41 >> 2] = $40; //@line 54263
     $$2 = $$099; //@line 54264
     break;
    }
   case 3:
    {
     $43 = HEAP8[$16 >> 0] | 0; //@line 54268
     $44 = $43 << 24 >> 24 < 0; //@line 54269
     if (!(($44 ? HEAP32[$17 >> 2] | 0 : $43 & 255) | 0)) {
      $$2 = $$099; //@line 54275
     } else {
      $51 = HEAP32[($44 ? HEAP32[$13 >> 2] | 0 : $13) >> 2] | 0; //@line 54279
      $52 = HEAP32[$2 >> 2] | 0; //@line 54280
      HEAP32[$2 >> 2] = $52 + 4; //@line 54282
      HEAP32[$52 >> 2] = $51; //@line 54283
      $$2 = $$099; //@line 54284
     }
     break;
    }
   case 2:
    {
     $54 = HEAP8[$19 >> 0] | 0; //@line 54289
     $55 = $54 << 24 >> 24 < 0; //@line 54290
     $58 = $55 ? HEAP32[$20 >> 2] | 0 : $54 & 255; //@line 54293
     if ($22 | ($58 | 0) == 0) {
      $$2 = $$099; //@line 54297
     } else {
      $61 = $55 ? HEAP32[$12 >> 2] | 0 : $12; //@line 54300
      $62 = $61 + ($58 << 2) | 0; //@line 54301
      $63 = HEAP32[$2 >> 2] | 0; //@line 54302
      $$0$i$i112 = $63; //@line 54303
      $64 = $61; //@line 54303
      while (1) {
       if (($64 | 0) == ($62 | 0)) {
        break;
       }
       HEAP32[$$0$i$i112 >> 2] = HEAP32[$64 >> 2]; //@line 54310
       $$0$i$i112 = $$0$i$i112 + 4 | 0; //@line 54313
       $64 = $64 + 4 | 0; //@line 54313
      }
      HEAP32[$2 >> 2] = $63 + ($58 << 2); //@line 54316
      $$2 = $$099; //@line 54317
     }
     break;
    }
   case 4:
    {
     $69 = HEAP32[$2 >> 2] | 0; //@line 54322
     $$$099 = $7 ? $$099 + 4 | 0 : $$099; //@line 54324
     $$0103 = $$$099; //@line 54325
     while (1) {
      if ($$0103 >>> 0 >= $5 >>> 0) {
       break;
      }
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] & 63]($6, 2048, HEAP32[$$0103 >> 2] | 0) | 0)) {
       break;
      }
      $$0103 = $$0103 + 4 | 0; //@line 54340
     }
     if ($23) {
      $$0101 = $14; //@line 54343
      $$1104 = $$0103; //@line 54343
      while (1) {
       $79 = ($$0101 | 0) > 0; //@line 54346
       if (!($$1104 >>> 0 > $$$099 >>> 0 & $79)) {
        break;
       }
       $81 = $$1104 + -4 | 0; //@line 54351
       $82 = HEAP32[$81 >> 2] | 0; //@line 54352
       $83 = HEAP32[$2 >> 2] | 0; //@line 54353
       HEAP32[$2 >> 2] = $83 + 4; //@line 54355
       HEAP32[$83 >> 2] = $82; //@line 54356
       $$0101 = $$0101 + -1 | 0; //@line 54358
       $$1104 = $81; //@line 54358
      }
      if ($79) {
       $93 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 127]($6, 48) | 0; //@line 54365
      } else {
       $93 = 0; //@line 54367
      }
      $$1102 = $$0101; //@line 54370
      $92 = HEAP32[$2 >> 2] | 0; //@line 54370
      while (1) {
       $91 = $92 + 4 | 0; //@line 54373
       if (($$1102 | 0) <= 0) {
        break;
       }
       HEAP32[$92 >> 2] = $93; //@line 54377
       $$1102 = $$1102 + -1 | 0; //@line 54379
       $92 = $91; //@line 54379
      }
      HEAP32[$2 >> 2] = $91; //@line 54381
      HEAP32[$92 >> 2] = $9; //@line 54382
      $$2105 = $$1104; //@line 54383
     } else {
      $$2105 = $$0103; //@line 54385
     }
     if (($$2105 | 0) == ($$$099 | 0)) {
      $99 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 127]($6, 48) | 0; //@line 54392
      $100 = HEAP32[$2 >> 2] | 0; //@line 54393
      $101 = $100 + 4 | 0; //@line 54394
      HEAP32[$2 >> 2] = $101; //@line 54395
      HEAP32[$100 >> 2] = $99; //@line 54396
      $135 = $101; //@line 54397
     } else {
      $102 = HEAP8[$24 >> 0] | 0; //@line 54399
      $103 = $102 << 24 >> 24 < 0; //@line 54400
      if (!(($103 ? HEAP32[$25 >> 2] | 0 : $102 & 255) | 0)) {
       $$0 = -1; //@line 54406
       $$095 = 0; //@line 54406
       $$097 = 0; //@line 54406
       $$3 = $$2105; //@line 54406
      } else {
       $$0 = HEAP8[($103 ? HEAP32[$11 >> 2] | 0 : $11) >> 0] | 0; //@line 54412
       $$095 = 0; //@line 54412
       $$097 = 0; //@line 54412
       $$3 = $$2105; //@line 54412
      }
      while (1) {
       if (($$3 | 0) == ($$$099 | 0)) {
        break;
       }
       $114 = HEAP32[$2 >> 2] | 0; //@line 54420
       if (($$097 | 0) == ($$0 | 0)) {
        $115 = $114 + 4 | 0; //@line 54422
        HEAP32[$2 >> 2] = $115; //@line 54423
        HEAP32[$114 >> 2] = $10; //@line 54424
        $116 = $$095 + 1 | 0; //@line 54425
        $117 = HEAP8[$24 >> 0] | 0; //@line 54426
        $118 = $117 << 24 >> 24 < 0; //@line 54427
        if ($116 >>> 0 < ($118 ? HEAP32[$25 >> 2] | 0 : $117 & 255) >>> 0) {
         $126 = HEAP8[($118 ? HEAP32[$11 >> 2] | 0 : $11) + $116 >> 0] | 0; //@line 54436
         $$1 = $126 << 24 >> 24 == 127 ? -1 : $126 << 24 >> 24; //@line 54440
         $$196 = $116; //@line 54440
         $$198 = 0; //@line 54440
         $132 = $115; //@line 54440
        } else {
         $$1 = $$097; //@line 54442
         $$196 = $116; //@line 54442
         $$198 = 0; //@line 54442
         $132 = $115; //@line 54442
        }
       } else {
        $$1 = $$0; //@line 54445
        $$196 = $$095; //@line 54445
        $$198 = $$097; //@line 54445
        $132 = $114; //@line 54445
       }
       $129 = $$3 + -4 | 0; //@line 54447
       $130 = HEAP32[$129 >> 2] | 0; //@line 54448
       HEAP32[$2 >> 2] = $132 + 4; //@line 54450
       HEAP32[$132 >> 2] = $130; //@line 54451
       $$0 = $$1; //@line 54453
       $$095 = $$196; //@line 54453
       $$097 = $$198 + 1 | 0; //@line 54453
       $$3 = $129; //@line 54453
      }
      $135 = HEAP32[$2 >> 2] | 0; //@line 54456
     }
     if (($69 | 0) == ($135 | 0)) {
      $$2 = $$$099; //@line 54460
     } else {
      $$0$i$i108 = $135; //@line 54462
      $$07$i$i = $69; //@line 54462
      while (1) {
       $136 = $$0$i$i108 + -4 | 0; //@line 54464
       if ($$07$i$i >>> 0 >= $136 >>> 0) {
        $$2 = $$$099; //@line 54467
        break L4;
       }
       $138 = HEAP32[$$07$i$i >> 2] | 0; //@line 54470
       HEAP32[$$07$i$i >> 2] = HEAP32[$136 >> 2]; //@line 54472
       HEAP32[$136 >> 2] = $138; //@line 54473
       $$0$i$i108 = $136; //@line 54475
       $$07$i$i = $$07$i$i + 4 | 0; //@line 54475
      }
     }
     break;
    }
   default:
    {
     $$2 = $$099; //@line 54481
    }
   }
  } while (0);
  $$0106 = $$0106 + 1 | 0; //@line 54486
  $$099 = $$2; //@line 54486
 }
 $26 = HEAP8[$16 >> 0] | 0; //@line 54488
 $27 = $26 << 24 >> 24 < 0; //@line 54489
 $30 = $27 ? HEAP32[$17 >> 2] | 0 : $26 & 255; //@line 54492
 if ($30 >>> 0 > 1) {
  $142 = HEAP32[$13 >> 2] | 0; //@line 54495
  $144 = $27 ? $142 + 4 | 0 : $17; //@line 54497
  $146 = ($27 ? $142 : $13) + ($30 << 2) | 0; //@line 54499
  $147 = HEAP32[$2 >> 2] | 0; //@line 54500
  $150 = $146 - $144 | 0; //@line 54503
  $$0$i$i = $147; //@line 54504
  $151 = $144; //@line 54504
  while (1) {
   if (($151 | 0) == ($146 | 0)) {
    break;
   }
   HEAP32[$$0$i$i >> 2] = HEAP32[$151 >> 2]; //@line 54511
   $$0$i$i = $$0$i$i + 4 | 0; //@line 54514
   $151 = $151 + 4 | 0; //@line 54514
  }
  HEAP32[$2 >> 2] = $147 + ($150 >>> 2 << 2); //@line 54518
 }
 switch (($3 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2]; //@line 54525
   break;
  }
 case 16:
  {
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = $0; //@line 54532
  }
 }
 return;
}
function __ZN5StackC2Ey13CharmFunction($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$07 = 0, $$08$i = 0, $$pre$i = 0, $$pre$phi20Z2D = 0, $$pre$phiZ2D = 0, $$pre9$i = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$43$0$$sroa_idx4$i = 0, $100 = 0, $101 = 0, $105 = 0, $107 = 0, $108 = 0, $119 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $32 = 0, $33 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11192
 STACKTOP = STACKTOP + 80 | 0; //@line 11193
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 11193
 $4 = sp; //@line 11194
 $5 = $0 + 8 | 0; //@line 11195
 $6 = $0 + 12 | 0; //@line 11196
 HEAP32[$6 >> 2] = 0; //@line 11197
 HEAP32[$6 + 4 >> 2] = 0; //@line 11197
 HEAP32[$6 + 8 >> 2] = 0; //@line 11197
 $7 = $0 + 48 | 0; //@line 11198
 HEAP32[$7 >> 2] = 0; //@line 11199
 HEAP32[$7 + 4 >> 2] = 0; //@line 11199
 HEAP32[$7 + 8 >> 2] = 0; //@line 11199
 HEAP32[$7 + 12 >> 2] = 0; //@line 11199
 HEAP32[$7 + 16 >> 2] = 0; //@line 11199
 HEAP32[$7 + 20 >> 2] = 0; //@line 11199
 $8 = $0 + 80 | 0; //@line 11200
 HEAP32[$8 >> 2] = 0; //@line 11201
 HEAP32[$8 + 4 >> 2] = 0; //@line 11201
 HEAP32[$8 + 8 >> 2] = 0; //@line 11201
 HEAP32[$8 + 12 >> 2] = 0; //@line 11201
 HEAP32[$8 + 16 >> 2] = 0; //@line 11201
 HEAP32[$8 + 20 >> 2] = 0; //@line 11201
 $9 = $0; //@line 11202
 HEAP32[$9 >> 2] = 0; //@line 11204
 HEAP32[$9 + 4 >> 2] = 0; //@line 11207
 L1 : do {
  if (($1 | 0) == 0 & ($2 | 0) == 0) {
   label = 3; //@line 11213
  } else {
   $16 = $4 + 4 | 0; //@line 11215
   $17 = $4 + 40 | 0; //@line 11216
   $$sroa$0$0$$sroa_idx$i = $4 + 16 | 0; //@line 11217
   $$sroa$43$0$$sroa_idx4$i = $4 + 24 | 0; //@line 11218
   $18 = $0 + 88 | 0; //@line 11219
   $19 = $0 + 84 | 0; //@line 11220
   $20 = $0 + 96 | 0; //@line 11221
   $21 = $0 + 100 | 0; //@line 11222
   $22 = $4 + 16 | 0; //@line 11223
   $23 = $4 + 40 | 0; //@line 11224
   $24 = $4 + 44 | 0; //@line 11225
   $25 = $4 + 48 | 0; //@line 11226
   $26 = $4 + 52 | 0; //@line 11227
   $27 = $4 + 64 | 0; //@line 11228
   $51 = 0; //@line 11229
   $52 = 0; //@line 11229
   $57 = 0; //@line 11229
   $58 = 0; //@line 11229
   $91 = 0; //@line 11229
   $92 = 0; //@line 11229
   while (1) {
    HEAP32[$16 >> 2] = 0; //@line 11231
    HEAP32[$16 + 4 >> 2] = 0; //@line 11231
    HEAP32[$16 + 8 >> 2] = 0; //@line 11231
    HEAP32[$17 >> 2] = 0; //@line 11232
    HEAP32[$17 + 4 >> 2] = 0; //@line 11232
    HEAP32[$17 + 8 >> 2] = 0; //@line 11232
    HEAP32[$17 + 12 >> 2] = 0; //@line 11232
    HEAP32[$17 + 16 >> 2] = 0; //@line 11232
    HEAP32[$17 + 20 >> 2] = 0; //@line 11232
    HEAP32[$4 >> 2] = 2; //@line 11233
    HEAP32[$$sroa$0$0$$sroa_idx$i >> 2] = 0; //@line 11234
    $46 = $$sroa$43$0$$sroa_idx4$i; //@line 11235
    HEAP32[$46 >> 2] = 0; //@line 11237
    HEAP32[$46 + 4 >> 2] = 0; //@line 11240
    $53 = $52 - $51 >> 2; //@line 11242
    $60 = $51; //@line 11249
    $61 = $52; //@line 11250
    if (((($53 | 0) == 0 ? 0 : ($53 * 56 | 0) + -1 | 0) | 0) == ($58 + $57 | 0)) {
     __THREW__ = 0; //@line 11252
     invoke_vi(259, $8 | 0); //@line 11253
     $62 = __THREW__; //@line 11254
     __THREW__ = 0; //@line 11254
     if ($62 & 1) {
      break;
     }
     $65 = HEAP32[$20 >> 2] | 0; //@line 11263
     $66 = HEAP32[$21 >> 2] | 0; //@line 11263
     $67 = HEAP32[$18 >> 2] | 0; //@line 11263
     $69 = HEAP32[$19 >> 2] | 0; //@line 11263
    } else {
     $65 = $57; //@line 11265
     $66 = $58; //@line 11265
     $67 = $61; //@line 11265
     $69 = $60; //@line 11265
    }
    $64 = $66 + $65 | 0; //@line 11267
    if (($67 | 0) == ($69 | 0)) {
     $76 = 0; //@line 11270
    } else {
     $76 = (HEAP32[$69 + ((($64 >>> 0) / 56 | 0) << 2) >> 2] | 0) + ((($64 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 11277
    }
    HEAP32[$76 >> 2] = HEAP32[$4 >> 2]; //@line 11280
    $77 = $76 + 4 | 0; //@line 11281
    HEAP32[$77 >> 2] = HEAP32[$16 >> 2]; //@line 11282
    HEAP32[$77 + 4 >> 2] = HEAP32[$16 + 4 >> 2]; //@line 11282
    HEAP32[$77 + 8 >> 2] = HEAP32[$16 + 8 >> 2]; //@line 11282
    HEAP32[$16 >> 2] = 0; //@line 11283
    HEAP32[$16 + 4 >> 2] = 0; //@line 11283
    HEAP32[$16 + 8 >> 2] = 0; //@line 11283
    $78 = $76 + 16 | 0; //@line 11284
    HEAP32[$78 >> 2] = HEAP32[$22 >> 2]; //@line 11285
    HEAP32[$78 + 4 >> 2] = HEAP32[$22 + 4 >> 2]; //@line 11285
    HEAP32[$78 + 8 >> 2] = HEAP32[$22 + 8 >> 2]; //@line 11285
    HEAP32[$78 + 12 >> 2] = HEAP32[$22 + 12 >> 2]; //@line 11285
    HEAP32[$78 + 16 >> 2] = HEAP32[$22 + 16 >> 2]; //@line 11285
    HEAP32[$78 + 20 >> 2] = HEAP32[$22 + 20 >> 2]; //@line 11285
    $79 = $76 + 40 | 0; //@line 11286
    HEAP32[$79 >> 2] = 0; //@line 11287
    $80 = $76 + 44 | 0; //@line 11288
    HEAP32[$80 >> 2] = 0; //@line 11289
    HEAP32[$76 + 48 >> 2] = 0; //@line 11291
    HEAP32[$79 >> 2] = HEAP32[$23 >> 2]; //@line 11293
    HEAP32[$80 >> 2] = HEAP32[$24 >> 2]; //@line 11295
    HEAP32[$76 + 48 >> 2] = HEAP32[$25 >> 2]; //@line 11298
    HEAP32[$25 >> 2] = 0; //@line 11299
    HEAP32[$24 >> 2] = 0; //@line 11300
    HEAP32[$23 >> 2] = 0; //@line 11301
    $86 = $76 + 52 | 0; //@line 11302
    HEAP32[$86 >> 2] = HEAP32[$26 >> 2]; //@line 11303
    HEAP32[$86 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 11303
    HEAP32[$86 + 8 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 11303
    HEAP32[$26 >> 2] = 0; //@line 11304
    HEAP32[$26 + 4 >> 2] = 0; //@line 11304
    HEAP32[$26 + 8 >> 2] = 0; //@line 11304
    HEAP16[$76 + 64 >> 1] = HEAP16[$27 >> 1] | 0; //@line 11307
    HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + 1; //@line 11310
    __ZN13CharmFunctionD2Ev($4); //@line 11311
    $93 = _i64Add($91 | 0, $92 | 0, 1, 0) | 0; //@line 11312
    $94 = tempRet0; //@line 11313
    if (!($94 >>> 0 < $2 >>> 0 | ($94 | 0) == ($2 | 0) & $93 >>> 0 < $1 >>> 0)) {
     label = 3; //@line 11320
     break L1;
    }
    $51 = HEAP32[$19 >> 2] | 0; //@line 11327
    $52 = HEAP32[$18 >> 2] | 0; //@line 11327
    $57 = HEAP32[$20 >> 2] | 0; //@line 11327
    $58 = HEAP32[$21 >> 2] | 0; //@line 11327
    $91 = $93; //@line 11327
    $92 = $94; //@line 11327
   }
   $100 = ___cxa_find_matching_catch_2() | 0; //@line 11329
   $101 = tempRet0; //@line 11330
   __ZN13CharmFunctionD2Ev($4); //@line 11331
   $$0 = $101; //@line 11332
   $$07 = $100; //@line 11332
   $$pre$phi20Z2D = $18; //@line 11332
   $$pre$phiZ2D = $19; //@line 11332
  }
 } while (0);
 if ((label | 0) == 3) {
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2]; //@line 11337
  __THREW__ = 0; //@line 11339
  invoke_iii(55, $6 | 0, $3 + 4 | 0) | 0; //@line 11340
  $30 = __THREW__; //@line 11341
  __THREW__ = 0; //@line 11341
  do {
   if (!($30 & 1)) {
    $32 = $0 + 24 | 0; //@line 11345
    $33 = $3 + 16 | 0; //@line 11346
    HEAP32[$32 >> 2] = HEAP32[$33 >> 2]; //@line 11347
    HEAP32[$32 + 4 >> 2] = HEAP32[$33 + 4 >> 2]; //@line 11347
    HEAP32[$32 + 8 >> 2] = HEAP32[$33 + 8 >> 2]; //@line 11347
    HEAP32[$32 + 12 >> 2] = HEAP32[$33 + 12 >> 2]; //@line 11347
    HEAP32[$32 + 16 >> 2] = HEAP32[$33 + 16 >> 2]; //@line 11347
    HEAP32[$32 + 20 >> 2] = HEAP32[$33 + 20 >> 2]; //@line 11347
    if (($5 | 0) != ($3 | 0)) {
     __THREW__ = 0; //@line 11355
     invoke_viii(15, $0 + 48 | 0, HEAP32[$3 + 40 >> 2] | 0, HEAP32[$3 + 44 >> 2] | 0); //@line 11356
     $40 = __THREW__; //@line 11357
     __THREW__ = 0; //@line 11357
     if ($40 & 1) {
      break;
     }
    }
    __THREW__ = 0; //@line 11365
    invoke_iii(55, $0 + 60 | 0, $3 + 52 | 0) | 0; //@line 11366
    $44 = __THREW__; //@line 11367
    __THREW__ = 0; //@line 11367
    if (!($44 & 1)) {
     HEAP16[$0 + 72 >> 1] = HEAP16[$3 + 64 >> 1] | 0; //@line 11373
     STACKTOP = sp; //@line 11374
     return;
    }
   }
  } while (0);
  $105 = ___cxa_find_matching_catch_2() | 0; //@line 11378
  $$0 = tempRet0; //@line 11382
  $$07 = $105; //@line 11382
  $$pre$phi20Z2D = $0 + 88 | 0; //@line 11382
  $$pre$phiZ2D = $0 + 84 | 0; //@line 11382
 }
 __ZNSt3__212__deque_baseI13CharmFunctionNS_9allocatorIS1_EEE5clearEv($8); //@line 11384
 $107 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 11385
 $108 = HEAP32[$$pre$phi20Z2D >> 2] | 0; //@line 11386
 if (($107 | 0) != ($108 | 0)) {
  $$08$i = $107; //@line 11389
  do {
   __ZdlPv(HEAP32[$$08$i >> 2] | 0); //@line 11392
   $$08$i = $$08$i + 4 | 0; //@line 11393
  } while (($$08$i | 0) != ($108 | 0));
  $$pre$i = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 11401
  $$pre9$i = HEAP32[$$pre$phi20Z2D >> 2] | 0; //@line 11402
  if (($$pre9$i | 0) != ($$pre$i | 0)) {
   HEAP32[$$pre$phi20Z2D >> 2] = $$pre9$i + (~(($$pre9$i + -4 - $$pre$i | 0) >>> 2) << 2); //@line 11412
  }
 }
 $119 = HEAP32[$8 >> 2] | 0; //@line 11415
 if (!$119) {
  __ZN13CharmFunctionD2Ev($5); //@line 11418
  ___resumeException($$07 | 0); //@line 11419
 }
 __ZdlPv($119); //@line 11422
 __ZN13CharmFunctionD2Ev($5); //@line 11423
 ___resumeException($$07 | 0); //@line 11424
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$$097 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0, $$3 = 0, $$pn = 0, $$pn$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $92 = 0, $94 = 0;
 HEAP32[$2 >> 2] = $0; //@line 52872
 $15 = $13 + 11 | 0; //@line 52873
 $16 = $13 + 4 | 0; //@line 52874
 $17 = $12 + 11 | 0; //@line 52875
 $18 = $12 + 4 | 0; //@line 52876
 $20 = ($3 & 512 | 0) == 0; //@line 52878
 $21 = $6 + 8 | 0; //@line 52879
 $22 = ($14 | 0) > 0; //@line 52880
 $23 = $11 + 11 | 0; //@line 52881
 $24 = $11 + 4 | 0; //@line 52882
 $$0104 = 0; //@line 52883
 $$097 = $4; //@line 52883
 while (1) {
  if (($$0104 | 0) == 4) {
   break;
  }
  L4 : do {
   switch (HEAP8[$8 + $$0104 >> 0] | 0) {
   case 0:
    {
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2]; //@line 52896
     $$2 = $$097; //@line 52897
     break;
    }
   case 1:
    {
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2]; //@line 52902
     $39 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 127]($6, 32) | 0; //@line 52906
     $40 = HEAP32[$2 >> 2] | 0; //@line 52907
     HEAP32[$2 >> 2] = $40 + 1; //@line 52909
     HEAP8[$40 >> 0] = $39; //@line 52910
     $$2 = $$097; //@line 52911
     break;
    }
   case 3:
    {
     $42 = HEAP8[$15 >> 0] | 0; //@line 52915
     $43 = $42 << 24 >> 24 < 0; //@line 52916
     if (!(($43 ? HEAP32[$16 >> 2] | 0 : $42 & 255) | 0)) {
      $$2 = $$097; //@line 52922
     } else {
      $50 = HEAP8[($43 ? HEAP32[$13 >> 2] | 0 : $13) >> 0] | 0; //@line 52926
      $51 = HEAP32[$2 >> 2] | 0; //@line 52927
      HEAP32[$2 >> 2] = $51 + 1; //@line 52929
      HEAP8[$51 >> 0] = $50; //@line 52930
      $$2 = $$097; //@line 52931
     }
     break;
    }
   case 2:
    {
     $53 = HEAP8[$17 >> 0] | 0; //@line 52936
     $54 = $53 << 24 >> 24 < 0; //@line 52937
     $57 = $54 ? HEAP32[$18 >> 2] | 0 : $53 & 255; //@line 52940
     if ($20 | ($57 | 0) == 0) {
      $$2 = $$097; //@line 52944
     } else {
      $60 = $54 ? HEAP32[$12 >> 2] | 0 : $12; //@line 52947
      $61 = $60 + $57 | 0; //@line 52948
      $$0$i$i113 = HEAP32[$2 >> 2] | 0; //@line 52950
      $$sroa$08$0$i112 = $60; //@line 52950
      while (1) {
       if (($$sroa$08$0$i112 | 0) == ($61 | 0)) {
        break;
       }
       HEAP8[$$0$i$i113 >> 0] = HEAP8[$$sroa$08$0$i112 >> 0] | 0; //@line 52957
       $$0$i$i113 = $$0$i$i113 + 1 | 0; //@line 52960
       $$sroa$08$0$i112 = $$sroa$08$0$i112 + 1 | 0; //@line 52960
      }
      HEAP32[$2 >> 2] = $$0$i$i113; //@line 52962
      $$2 = $$097; //@line 52963
     }
     break;
    }
   case 4:
    {
     $67 = HEAP32[$2 >> 2] | 0; //@line 52968
     $$$097 = $7 ? $$097 + 1 | 0 : $$097; //@line 52970
     $$0101 = $$$097; //@line 52971
     while (1) {
      if ($$0101 >>> 0 >= $5 >>> 0) {
       break;
      }
      $70 = HEAP8[$$0101 >> 0] | 0; //@line 52977
      if ($70 << 24 >> 24 <= -1) {
       break;
      }
      if (!(HEAP16[(HEAP32[$21 >> 2] | 0) + ($70 << 24 >> 24 << 1) >> 1] & 2048)) {
       break;
      }
      $$0101 = $$0101 + 1 | 0; //@line 52992
     }
     if ($22) {
      $$099 = $14; //@line 52995
      $$1102 = $$0101; //@line 52995
      while (1) {
       $80 = ($$099 | 0) > 0; //@line 52998
       if (!($$1102 >>> 0 > $$$097 >>> 0 & $80)) {
        break;
       }
       $82 = $$1102 + -1 | 0; //@line 53003
       $83 = HEAP8[$82 >> 0] | 0; //@line 53004
       $84 = HEAP32[$2 >> 2] | 0; //@line 53005
       HEAP32[$2 >> 2] = $84 + 1; //@line 53007
       HEAP8[$84 >> 0] = $83; //@line 53008
       $$099 = $$099 + -1 | 0; //@line 53010
       $$1102 = $82; //@line 53010
      }
      if ($80) {
       $94 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 127]($6, 48) | 0; //@line 53017
      } else {
       $94 = 0; //@line 53019
      }
      $$1100 = $$099; //@line 53021
      while (1) {
       $92 = HEAP32[$2 >> 2] | 0; //@line 53024
       HEAP32[$2 >> 2] = $92 + 1; //@line 53026
       if (($$1100 | 0) <= 0) {
        break;
       }
       HEAP8[$92 >> 0] = $94; //@line 53030
       $$1100 = $$1100 + -1 | 0; //@line 53032
      }
      HEAP8[$92 >> 0] = $9; //@line 53034
      $$2103 = $$1102; //@line 53035
     } else {
      $$2103 = $$0101; //@line 53037
     }
     L35 : do {
      if (($$2103 | 0) == ($$$097 | 0)) {
       $100 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 127]($6, 48) | 0; //@line 53045
       $101 = HEAP32[$2 >> 2] | 0; //@line 53046
       HEAP32[$2 >> 2] = $101 + 1; //@line 53048
       HEAP8[$101 >> 0] = $100; //@line 53049
      } else {
       $103 = HEAP8[$23 >> 0] | 0; //@line 53051
       $104 = $103 << 24 >> 24 < 0; //@line 53052
       if (!(($104 ? HEAP32[$24 >> 2] | 0 : $103 & 255) | 0)) {
        $$0 = -1; //@line 53058
        $$093 = 0; //@line 53058
        $$095 = 0; //@line 53058
        $$3 = $$2103; //@line 53058
       } else {
        $$0 = HEAP8[($104 ? HEAP32[$11 >> 2] | 0 : $11) >> 0] | 0; //@line 53064
        $$093 = 0; //@line 53064
        $$095 = 0; //@line 53064
        $$3 = $$2103; //@line 53064
       }
       while (1) {
        if (($$3 | 0) == ($$$097 | 0)) {
         break L35;
        }
        if (($$095 | 0) == ($$0 | 0)) {
         $115 = HEAP32[$2 >> 2] | 0; //@line 53073
         HEAP32[$2 >> 2] = $115 + 1; //@line 53075
         HEAP8[$115 >> 0] = $10; //@line 53076
         $117 = $$093 + 1 | 0; //@line 53077
         $118 = HEAP8[$23 >> 0] | 0; //@line 53078
         $119 = $118 << 24 >> 24 < 0; //@line 53079
         if ($117 >>> 0 < ($119 ? HEAP32[$24 >> 2] | 0 : $118 & 255) >>> 0) {
          $127 = HEAP8[($119 ? HEAP32[$11 >> 2] | 0 : $11) + $117 >> 0] | 0; //@line 53088
          $$1 = $127 << 24 >> 24 == 127 ? -1 : $127 << 24 >> 24; //@line 53092
          $$194 = $117; //@line 53092
          $$196 = 0; //@line 53092
         } else {
          $$1 = $$095; //@line 53094
          $$194 = $117; //@line 53094
          $$196 = 0; //@line 53094
         }
        } else {
         $$1 = $$0; //@line 53097
         $$194 = $$093; //@line 53097
         $$196 = $$095; //@line 53097
        }
        $130 = $$3 + -1 | 0; //@line 53099
        $131 = HEAP8[$130 >> 0] | 0; //@line 53100
        $132 = HEAP32[$2 >> 2] | 0; //@line 53101
        HEAP32[$2 >> 2] = $132 + 1; //@line 53103
        HEAP8[$132 >> 0] = $131; //@line 53104
        $$0 = $$1; //@line 53106
        $$093 = $$194; //@line 53106
        $$095 = $$196 + 1 | 0; //@line 53106
        $$3 = $130; //@line 53106
       }
      }
     } while (0);
     $135 = HEAP32[$2 >> 2] | 0; //@line 53110
     if (($67 | 0) == ($135 | 0)) {
      $$2 = $$$097; //@line 53113
     } else {
      $$0$i$i106 = $135; //@line 53115
      $$07$i$i = $67; //@line 53115
      while (1) {
       $137 = $$0$i$i106 + -1 | 0; //@line 53117
       if ($$07$i$i >>> 0 >= $137 >>> 0) {
        $$2 = $$$097; //@line 53120
        break L4;
       }
       $139 = HEAP8[$$07$i$i >> 0] | 0; //@line 53123
       HEAP8[$$07$i$i >> 0] = HEAP8[$137 >> 0] | 0; //@line 53125
       HEAP8[$137 >> 0] = $139; //@line 53126
       $$0$i$i106 = $137; //@line 53128
       $$07$i$i = $$07$i$i + 1 | 0; //@line 53128
      }
     }
     break;
    }
   default:
    {
     $$2 = $$097; //@line 53134
    }
   }
  } while (0);
  $$0104 = $$0104 + 1 | 0; //@line 53139
  $$097 = $$2; //@line 53139
 }
 $25 = HEAP8[$15 >> 0] | 0; //@line 53141
 $26 = $25 << 24 >> 24 < 0; //@line 53142
 $29 = $26 ? HEAP32[$16 >> 2] | 0 : $25 & 255; //@line 53145
 if ($29 >>> 0 > 1) {
  $$pn = $26 ? HEAP32[$13 >> 2] | 0 : $13; //@line 53149
  $144 = $$pn + $29 | 0; //@line 53150
  $$0$i$i = HEAP32[$2 >> 2] | 0; //@line 53152
  $$pn$pn = $$pn; //@line 53152
  while (1) {
   $$sroa$08$0$i = $$pn$pn + 1 | 0; //@line 53154
   if (($$sroa$08$0$i | 0) == ($144 | 0)) {
    break;
   }
   HEAP8[$$0$i$i >> 0] = HEAP8[$$sroa$08$0$i >> 0] | 0; //@line 53160
   $$0$i$i = $$0$i$i + 1 | 0; //@line 53162
   $$pn$pn = $$sroa$08$0$i; //@line 53162
  }
  HEAP32[$2 >> 2] = $$0$i$i; //@line 53164
 }
 switch (($3 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2]; //@line 53171
   break;
  }
 case 16:
  {
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = $0; //@line 53178
  }
 }
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i41 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i47 = 0, $$0$i$i38 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $$pre$i4$i$i35 = 0, $$pre$i4$i$i49 = 0, $102 = 0, $103 = 0, $106 = 0, $108 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $142 = 0, $156 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $5 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $71 = 0, $74 = 0, $8 = 0, $86 = 0, $89 = 0, label = 0;
 $5 = HEAP32[$0 >> 2] | 0; //@line 43615
 do {
  if (!$5) {
   $170 = 1; //@line 43619
  } else {
   $8 = HEAP32[$5 + 12 >> 2] | 0; //@line 43622
   if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 255]($5) | 0; //@line 43631
   } else {
    $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0; //@line 43635
   }
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$0 >> 2] = 0; //@line 43640
    $170 = 1; //@line 43641
    break;
   } else {
    $170 = (HEAP32[$0 >> 2] | 0) == 0; //@line 43646
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$1 >> 2] | 0; //@line 43651
 do {
  if (!$20) {
   label = 14; //@line 43655
  } else {
   $23 = HEAP32[$20 + 12 >> 2] | 0; //@line 43658
   if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) {
    $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 255]($20) | 0; //@line 43667
   } else {
    $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0; //@line 43671
   }
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0; //@line 43676
    label = 14; //@line 43677
    break;
   } else {
    if ($170) {
     $171 = $20; //@line 43681
     label = 17; //@line 43682
     break;
    } else {
     label = 16; //@line 43685
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($170) {
   label = 16; //@line 43693
  } else {
   $171 = 0; //@line 43695
   label = 17; //@line 43696
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6; //@line 43703
   $$2 = 0; //@line 43704
  } else if ((label | 0) == 17) {
   $37 = HEAP32[$0 >> 2] | 0; //@line 43707
   $39 = HEAP32[$37 + 12 >> 2] | 0; //@line 43709
   if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 255]($37) | 0; //@line 43718
   } else {
    $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0; //@line 43722
   }
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 63]($3, 2048, $$0$i$i) | 0)) {
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4; //@line 43731
    $$2 = 0; //@line 43732
    break;
   }
   $59 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] & 63]($3, $$0$i$i, 0) | 0) << 24 >> 24; //@line 43739
   $60 = HEAP32[$0 >> 2] | 0; //@line 43740
   $61 = $60 + 12 | 0; //@line 43741
   $62 = HEAP32[$61 >> 2] | 0; //@line 43742
   if (($62 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 40 >> 2] & 255]($60) | 0; //@line 43750
    $$0$in = $59; //@line 43751
    $$025$in = $4; //@line 43751
    $$pre$i4$i$i35 = $171; //@line 43751
    $86 = $171; //@line 43751
   } else {
    HEAP32[$61 >> 2] = $62 + 4; //@line 43754
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$62 >> 2] | 0) | 0; //@line 43756
    $$0$in = $59; //@line 43757
    $$025$in = $4; //@line 43757
    $$pre$i4$i$i35 = $171; //@line 43757
    $86 = $171; //@line 43757
   }
   while (1) {
    $$0 = $$0$in + -48 | 0; //@line 43760
    $$025 = $$025$in + -1 | 0; //@line 43761
    $71 = HEAP32[$0 >> 2] | 0; //@line 43762
    do {
     if (!$71) {
      $103 = 1; //@line 43766
     } else {
      $74 = HEAP32[$71 + 12 >> 2] | 0; //@line 43769
      if (($74 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
       $$0$i$i$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] & 255]($71) | 0; //@line 43778
      } else {
       $$0$i$i$i$i27 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$74 >> 2] | 0) | 0; //@line 43782
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i27, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0; //@line 43787
       $103 = 1; //@line 43788
       break;
      } else {
       $103 = (HEAP32[$0 >> 2] | 0) == 0; //@line 43793
       break;
      }
     }
    } while (0);
    do {
     if (!$86) {
      $$pre$i4$i$i49 = $$pre$i4$i$i35; //@line 43801
      $102 = 1; //@line 43801
      $172 = 0; //@line 43801
     } else {
      $89 = HEAP32[$86 + 12 >> 2] | 0; //@line 43804
      if (($89 | 0) == (HEAP32[$86 + 16 >> 2] | 0)) {
       $$0$i$i2$i$i33 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$86 >> 2] | 0) + 36 >> 2] & 255]($86) | 0; //@line 43813
      } else {
       $$0$i$i2$i$i33 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$89 >> 2] | 0) | 0; //@line 43817
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i33, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 43822
       $$pre$i4$i$i49 = 0; //@line 43823
       $102 = 1; //@line 43823
       $172 = 0; //@line 43823
       break;
      } else {
       $$pre$i4$i$i49 = $$pre$i4$i$i35; //@line 43827
       $102 = ($$pre$i4$i$i35 | 0) == 0; //@line 43827
       $172 = $$pre$i4$i$i35; //@line 43827
       break;
      }
     }
    } while (0);
    $106 = HEAP32[$0 >> 2] | 0; //@line 43835
    if (!(($$025$in | 0) > 1 & ($103 ^ $102))) {
     break;
    }
    $108 = HEAP32[$106 + 12 >> 2] | 0; //@line 43840
    if (($108 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) {
     $$0$i$i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 255]($106) | 0; //@line 43849
    } else {
     $$0$i$i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0; //@line 43853
    }
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 63]($3, 2048, $$0$i$i38) | 0)) {
     $$2 = $$0; //@line 43860
     break L22;
    }
    $128 = ($$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] & 63]($3, $$0$i$i38, 0) | 0) << 24 >> 24) | 0; //@line 43869
    $129 = HEAP32[$0 >> 2] | 0; //@line 43870
    $130 = $129 + 12 | 0; //@line 43871
    $131 = HEAP32[$130 >> 2] | 0; //@line 43872
    if (($131 | 0) == (HEAP32[$129 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$129 >> 2] | 0) + 40 >> 2] & 255]($129) | 0; //@line 43880
     $$0$in = $128; //@line 43881
     $$025$in = $$025; //@line 43881
     $$pre$i4$i$i35 = $$pre$i4$i$i49; //@line 43881
     $86 = $172; //@line 43881
     continue;
    } else {
     HEAP32[$130 >> 2] = $131 + 4; //@line 43885
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$131 >> 2] | 0) | 0; //@line 43887
     $$0$in = $128; //@line 43888
     $$025$in = $$025; //@line 43888
     $$pre$i4$i$i35 = $$pre$i4$i$i49; //@line 43888
     $86 = $172; //@line 43888
     continue;
    }
   }
   do {
    if (!$106) {
     $173 = 1; //@line 43895
    } else {
     $142 = HEAP32[$106 + 12 >> 2] | 0; //@line 43898
     if (($142 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) {
      $$0$i$i$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 255]($106) | 0; //@line 43907
     } else {
      $$0$i$i$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0; //@line 43911
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i41, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0; //@line 43916
      $173 = 1; //@line 43917
      break;
     } else {
      $173 = (HEAP32[$0 >> 2] | 0) == 0; //@line 43922
      break;
     }
    }
   } while (0);
   do {
    if (!$$pre$i4$i$i49) {
     label = 60; //@line 43930
    } else {
     $156 = HEAP32[$$pre$i4$i$i49 + 12 >> 2] | 0; //@line 43933
     if (($156 | 0) == (HEAP32[$$pre$i4$i$i49 + 16 >> 2] | 0)) {
      $$0$i$i2$i$i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i4$i$i49 >> 2] | 0) + 36 >> 2] & 255]($$pre$i4$i$i49) | 0; //@line 43942
     } else {
      $$0$i$i2$i$i47 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$156 >> 2] | 0) | 0; //@line 43946
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i47, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0; //@line 43951
      label = 60; //@line 43952
      break;
     } else {
      if ($173) {
       $$2 = $$0; //@line 43956
       break L22;
      } else {
       break;
      }
     }
    }
   } while (0);
   if ((label | 0) == 60) {
    if (!$173) {
     $$2 = $$0; //@line 43966
     break;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2; //@line 43972
   $$2 = $$0; //@line 43973
  }
 } while (0);
 return $$2 | 0; //@line 43976
}
function __ZNSt3__26vectorI5StackNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i$i = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $113 = 0, $116 = 0, $117 = 0, $12 = 0, $122 = 0, $134 = 0, $136 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $149 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $7 = 0, $75 = 0, $77 = 0, $81 = 0, $82 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $94 = 0, $95 = 0, $$06$i$i$looptemp = 0;
 $2 = $0 + 4 | 0; //@line 4133
 $4 = HEAP32[$0 >> 2] | 0; //@line 4135
 $6 = ((HEAP32[$2 >> 2] | 0) - $4 | 0) / 104 | 0; //@line 4137
 $7 = $6 + 1 | 0; //@line 4138
 if ($7 >>> 0 > 41297762) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 4141
 }
 $9 = $0 + 8 | 0; //@line 4144
 $12 = ((HEAP32[$9 >> 2] | 0) - $4 | 0) / 104 | 0; //@line 4147
 $14 = $12 << 1; //@line 4149
 $$sroa$speculated$$i = $12 >>> 0 < 20648881 ? $14 >>> 0 < $7 >>> 0 ? $7 : $14 : 41297762; //@line 4152
 do {
  if (!$$sroa$speculated$$i) {
   $26 = 0; //@line 4156
  } else {
   if ($$sroa$speculated$$i >>> 0 <= 41297762) {
    $26 = __Znwj($$sroa$speculated$$i * 104 | 0) | 0; //@line 4162
    break;
   }
   $18 = ___cxa_allocate_exception(8) | 0; //@line 4165
   __THREW__ = 0; //@line 4166
   invoke_vii(119, $18 | 0, 31992); //@line 4167
   $19 = __THREW__; //@line 4168
   __THREW__ = 0; //@line 4168
   if ($19 & 1) {
    $21 = ___cxa_find_matching_catch_2() | 0; //@line 4171
    ___cxa_free_exception($18 | 0); //@line 4173
    ___resumeException($21 | 0); //@line 4174
   } else {
    HEAP32[$18 >> 2] = 13224; //@line 4177
    ___cxa_throw($18 | 0, 2856, 240); //@line 4178
   }
  }
 } while (0);
 $25 = $26 + ($6 * 104 | 0) | 0; //@line 4183
 $27 = $25; //@line 4184
 $29 = $26 + ($$sroa$speculated$$i * 104 | 0) | 0; //@line 4186
 $30 = $1; //@line 4187
 $35 = HEAP32[$30 + 4 >> 2] | 0; //@line 4192
 $36 = $25; //@line 4193
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2]; //@line 4195
 HEAP32[$36 + 4 >> 2] = $35; //@line 4198
 HEAP32[$26 + ($6 * 104 | 0) + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4202
 $43 = $26 + ($6 * 104 | 0) + 12 | 0; //@line 4203
 $44 = $1 + 12 | 0; //@line 4204
 HEAP32[$43 >> 2] = HEAP32[$44 >> 2]; //@line 4205
 HEAP32[$43 + 4 >> 2] = HEAP32[$44 + 4 >> 2]; //@line 4205
 HEAP32[$43 + 8 >> 2] = HEAP32[$44 + 8 >> 2]; //@line 4205
 HEAP32[$44 >> 2] = 0; //@line 4206
 HEAP32[$44 + 4 >> 2] = 0; //@line 4206
 HEAP32[$44 + 8 >> 2] = 0; //@line 4206
 $45 = $26 + ($6 * 104 | 0) + 24 | 0; //@line 4207
 $46 = $1 + 24 | 0; //@line 4208
 HEAP32[$45 >> 2] = HEAP32[$46 >> 2]; //@line 4209
 HEAP32[$45 + 4 >> 2] = HEAP32[$46 + 4 >> 2]; //@line 4209
 HEAP32[$45 + 8 >> 2] = HEAP32[$46 + 8 >> 2]; //@line 4209
 HEAP32[$45 + 12 >> 2] = HEAP32[$46 + 12 >> 2]; //@line 4209
 HEAP32[$45 + 16 >> 2] = HEAP32[$46 + 16 >> 2]; //@line 4209
 HEAP32[$45 + 20 >> 2] = HEAP32[$46 + 20 >> 2]; //@line 4209
 $48 = $1 + 48 | 0; //@line 4211
 HEAP32[$26 + ($6 * 104 | 0) + 56 >> 2] = 0; //@line 4214
 HEAP32[$26 + ($6 * 104 | 0) + 48 >> 2] = HEAP32[$48 >> 2]; //@line 4216
 $52 = $1 + 52 | 0; //@line 4217
 HEAP32[$26 + ($6 * 104 | 0) + 52 >> 2] = HEAP32[$52 >> 2]; //@line 4219
 $54 = $1 + 56 | 0; //@line 4220
 HEAP32[$26 + ($6 * 104 | 0) + 56 >> 2] = HEAP32[$54 >> 2]; //@line 4223
 HEAP32[$54 >> 2] = 0; //@line 4224
 HEAP32[$52 >> 2] = 0; //@line 4225
 HEAP32[$48 >> 2] = 0; //@line 4226
 $57 = $26 + ($6 * 104 | 0) + 60 | 0; //@line 4227
 $58 = $1 + 60 | 0; //@line 4228
 HEAP32[$57 >> 2] = HEAP32[$58 >> 2]; //@line 4229
 HEAP32[$57 + 4 >> 2] = HEAP32[$58 + 4 >> 2]; //@line 4229
 HEAP32[$57 + 8 >> 2] = HEAP32[$58 + 8 >> 2]; //@line 4229
 HEAP32[$58 >> 2] = 0; //@line 4230
 HEAP32[$58 + 4 >> 2] = 0; //@line 4230
 HEAP32[$58 + 8 >> 2] = 0; //@line 4230
 HEAP16[$26 + ($6 * 104 | 0) + 72 >> 1] = HEAP16[$1 + 72 >> 1] | 0; //@line 4234
 $63 = $1 + 80 | 0; //@line 4236
 HEAP32[$26 + ($6 * 104 | 0) + 80 >> 2] = HEAP32[$63 >> 2]; //@line 4238
 HEAP32[$26 + ($6 * 104 | 0) + 84 >> 2] = HEAP32[$1 + 84 >> 2]; //@line 4242
 HEAP32[$26 + ($6 * 104 | 0) + 88 >> 2] = HEAP32[$1 + 88 >> 2]; //@line 4246
 HEAP32[$26 + ($6 * 104 | 0) + 92 >> 2] = HEAP32[$1 + 92 >> 2]; //@line 4250
 HEAP32[$63 >> 2] = 0; //@line 4251
 HEAP32[$63 + 4 >> 2] = 0; //@line 4251
 HEAP32[$63 + 8 >> 2] = 0; //@line 4251
 HEAP32[$63 + 12 >> 2] = 0; //@line 4251
 $75 = $1 + 96 | 0; //@line 4253
 HEAP32[$26 + ($6 * 104 | 0) + 96 >> 2] = HEAP32[$75 >> 2]; //@line 4255
 $77 = $1 + 100 | 0; //@line 4256
 HEAP32[$26 + ($6 * 104 | 0) + 100 >> 2] = HEAP32[$77 >> 2]; //@line 4259
 HEAP32[$75 >> 2] = 0; //@line 4260
 HEAP32[$77 >> 2] = 0; //@line 4261
 $81 = $25 + 104 | 0; //@line 4263
 $82 = HEAP32[$0 >> 2] | 0; //@line 4264
 $83 = HEAP32[$2 >> 2] | 0; //@line 4265
 if (($83 | 0) == ($82 | 0)) {
  $143 = $27; //@line 4269
  $144 = $82; //@line 4269
  $146 = $82; //@line 4269
 } else {
  $$06$i$i = $83; //@line 4271
  $$sroa$7$0 = $27; //@line 4271
  $88 = $25; //@line 4271
  do {
   $$06$i$i$looptemp = $$06$i$i;
   $$06$i$i = $$06$i$i + -104 | 0; //@line 4273
   $89 = $$06$i$i; //@line 4275
   $94 = HEAP32[$89 + 4 >> 2] | 0; //@line 4280
   $95 = $88 + -104 | 0; //@line 4281
   HEAP32[$95 >> 2] = HEAP32[$89 >> 2]; //@line 4283
   HEAP32[$95 + 4 >> 2] = $94; //@line 4286
   HEAP32[$88 + -96 >> 2] = HEAP32[$$06$i$i$looptemp + -96 >> 2]; //@line 4290
   $102 = $88 + -92 | 0; //@line 4291
   $103 = $$06$i$i$looptemp + -92 | 0; //@line 4292
   HEAP32[$102 >> 2] = HEAP32[$103 >> 2]; //@line 4293
   HEAP32[$102 + 4 >> 2] = HEAP32[$103 + 4 >> 2]; //@line 4293
   HEAP32[$102 + 8 >> 2] = HEAP32[$103 + 8 >> 2]; //@line 4293
   HEAP32[$103 >> 2] = 0; //@line 4294
   HEAP32[$103 + 4 >> 2] = 0; //@line 4294
   HEAP32[$103 + 8 >> 2] = 0; //@line 4294
   $104 = $88 + -80 | 0; //@line 4295
   $105 = $$06$i$i$looptemp + -80 | 0; //@line 4296
   HEAP32[$104 >> 2] = HEAP32[$105 >> 2]; //@line 4297
   HEAP32[$104 + 4 >> 2] = HEAP32[$105 + 4 >> 2]; //@line 4297
   HEAP32[$104 + 8 >> 2] = HEAP32[$105 + 8 >> 2]; //@line 4297
   HEAP32[$104 + 12 >> 2] = HEAP32[$105 + 12 >> 2]; //@line 4297
   HEAP32[$104 + 16 >> 2] = HEAP32[$105 + 16 >> 2]; //@line 4297
   HEAP32[$104 + 20 >> 2] = HEAP32[$105 + 20 >> 2]; //@line 4297
   $106 = $88 + -56 | 0; //@line 4298
   $107 = $$06$i$i$looptemp + -56 | 0; //@line 4299
   HEAP32[$106 >> 2] = 0; //@line 4300
   $108 = $88 + -52 | 0; //@line 4301
   HEAP32[$108 >> 2] = 0; //@line 4302
   HEAP32[$88 + -48 >> 2] = 0; //@line 4304
   HEAP32[$106 >> 2] = HEAP32[$107 >> 2]; //@line 4306
   $111 = $$06$i$i$looptemp + -52 | 0; //@line 4307
   HEAP32[$108 >> 2] = HEAP32[$111 >> 2]; //@line 4309
   $113 = $$06$i$i$looptemp + -48 | 0; //@line 4310
   HEAP32[$88 + -48 >> 2] = HEAP32[$113 >> 2]; //@line 4313
   HEAP32[$113 >> 2] = 0; //@line 4314
   HEAP32[$111 >> 2] = 0; //@line 4315
   HEAP32[$107 >> 2] = 0; //@line 4316
   $116 = $88 + -44 | 0; //@line 4317
   $117 = $$06$i$i$looptemp + -44 | 0; //@line 4318
   HEAP32[$116 >> 2] = HEAP32[$117 >> 2]; //@line 4319
   HEAP32[$116 + 4 >> 2] = HEAP32[$117 + 4 >> 2]; //@line 4319
   HEAP32[$116 + 8 >> 2] = HEAP32[$117 + 8 >> 2]; //@line 4319
   HEAP32[$117 >> 2] = 0; //@line 4320
   HEAP32[$117 + 4 >> 2] = 0; //@line 4320
   HEAP32[$117 + 8 >> 2] = 0; //@line 4320
   HEAP16[$88 + -32 >> 1] = HEAP16[$$06$i$i$looptemp + -32 >> 1] | 0; //@line 4324
   $122 = $$06$i$i$looptemp + -24 | 0; //@line 4326
   HEAP32[$88 + -24 >> 2] = HEAP32[$122 >> 2]; //@line 4328
   HEAP32[$88 + -20 >> 2] = HEAP32[$$06$i$i$looptemp + -20 >> 2]; //@line 4332
   HEAP32[$88 + -16 >> 2] = HEAP32[$$06$i$i$looptemp + -16 >> 2]; //@line 4336
   HEAP32[$88 + -12 >> 2] = HEAP32[$$06$i$i$looptemp + -12 >> 2]; //@line 4340
   HEAP32[$122 >> 2] = 0; //@line 4341
   HEAP32[$122 + 4 >> 2] = 0; //@line 4341
   HEAP32[$122 + 8 >> 2] = 0; //@line 4341
   HEAP32[$122 + 12 >> 2] = 0; //@line 4341
   $134 = $$06$i$i$looptemp + -8 | 0; //@line 4343
   HEAP32[$88 + -8 >> 2] = HEAP32[$134 >> 2]; //@line 4345
   $136 = $$06$i$i$looptemp + -4 | 0; //@line 4346
   HEAP32[$88 + -4 >> 2] = HEAP32[$136 >> 2]; //@line 4349
   HEAP32[$134 >> 2] = 0; //@line 4350
   HEAP32[$136 >> 2] = 0; //@line 4351
   $88 = $$sroa$7$0 + -104 | 0; //@line 4353
   $$sroa$7$0 = $88; //@line 4354
  } while (($$06$i$i | 0) != ($82 | 0));
  $143 = $$sroa$7$0; //@line 4364
  $144 = HEAP32[$0 >> 2] | 0; //@line 4364
  $146 = HEAP32[$2 >> 2] | 0; //@line 4364
 }
 HEAP32[$0 >> 2] = $143; //@line 4366
 HEAP32[$2 >> 2] = $81; //@line 4367
 HEAP32[$9 >> 2] = $29; //@line 4368
 $145 = $144; //@line 4369
 if (($146 | 0) != ($145 | 0)) {
  $149 = $146; //@line 4372
  do {
   $149 = $149 + -104 | 0; //@line 4374
   __ZN5StackD2Ev($149); //@line 4375
  } while (($149 | 0) != ($145 | 0));
 }
 if (!$144) {
  return;
 }
 __ZdlPv($144); //@line 4389
 return;
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $79 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 11257
   $$0106$ph = 24; //@line 11257
   label = 4; //@line 11258
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 11262
   $$0106$ph = 53; //@line 11262
   label = 4; //@line 11263
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 11267
   $$0106$ph = 53; //@line 11267
   label = 4; //@line 11268
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 11272
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 11277
   $4 = $0 + 100 | 0; //@line 11278
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 11280
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 11285
     $12 = HEAPU8[$5 >> 0] | 0; //@line 11288
    } else {
     $12 = ___shgetc($0) | 0; //@line 11291
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 11305
      $19 = HEAP32[$3 >> 2] | 0; //@line 11306
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 11311
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 11314
       $$0113 = $18; //@line 11314
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 11318
       $$0113 = $18; //@line 11318
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 11324
      $$0113 = 1; //@line 11324
     }
    }
   } while (0);
   $$0107127 = 0; //@line 11328
   $$1128 = $$0; //@line 11328
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[28865 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 11336
     $$1$lcssa = $$1128; //@line 11336
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 11342
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 11347
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 11350
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 11354
       break;
      }
     } else {
      $$2 = $$1128; //@line 11358
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 11361
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 11364
     $$1128 = $$2; //@line 11364
    } else {
     $$0107$lcssa = $39; //@line 11366
     $$1$lcssa = $$2; //@line 11366
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 11376
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 11381
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 11388
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 11395
        $$3126 = $$1$lcssa; //@line 11395
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[28874 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 11403
          $$5 = $$3126; //@line 11403
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 11409
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 11414
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 11417
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 11421
            break;
           }
          } else {
           $$4 = $$3126; //@line 11425
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 11428
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 11431
          $$3126 = $$4; //@line 11431
         } else {
          $$3110 = $70; //@line 11433
          $$5 = $$4; //@line 11433
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 11438
        $$5 = $$1$lcssa; //@line 11438
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 11443
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 11448
         $79 = HEAPU8[$72 >> 0] | 0; //@line 11451
        } else {
         $79 = ___shgetc($0) | 0; //@line 11454
        }
        if (($79 | 0) == 40) {
         $$4111 = 1; //@line 11458
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 11463
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 11468
         $$0114 = nan; //@line 11469
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 11473
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 11478
          $93 = HEAPU8[$85 >> 0] | 0; //@line 11481
         } else {
          $93 = ___shgetc($0) | 0; //@line 11484
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 11501
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 11505
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 11509
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 11513
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 11517
         ___shlim($0, 0); //@line 11518
         $$0114 = 0.0; //@line 11519
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 11524
         break L4;
        } else {
         $$in = $$4111; //@line 11527
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 11530
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 11534
         }
         if (!$$in) {
          $$0114 = nan; //@line 11538
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 11549
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 11554
          $126 = HEAPU8[$118 >> 0] | 0; //@line 11557
         } else {
          $126 = ___shgetc($0) | 0; //@line 11560
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 11566
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 11572
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 11576
          $$6 = 48; //@line 11577
         }
        } else {
         $$6 = $$5; //@line 11580
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 11583
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 11593
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 11596
        ___shlim($0, 0); //@line 11597
        $$0114 = 0.0; //@line 11598
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 11607
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 11611
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 11617
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 11622
      }
      $$1108 = $$1108 + -1 | 0; //@line 11624
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 11637
  }
 } while (0);
 return +$$0114;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i18$i$i$i$i$i = 0, $$1$i$i$i = 0, $$16$i$i$i = 0, $$byval_copy8 = 0, $$val = 0, $$val3 = 0, $103 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $77 = 0, $78 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$i$i$i$index4Z2D = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5719
 STACKTOP = STACKTOP + 112 | 0; //@line 5720
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 5720
 $$byval_copy8 = sp + 105 | 0; //@line 5721
 $3 = sp + 104 | 0; //@line 5722
 $4 = sp; //@line 5723
 $5 = sp + 88 | 0; //@line 5724
 $6 = sp + 72 | 0; //@line 5725
 $$val = HEAP32[$1 >> 2] | 0; //@line 5726
 $$val3 = HEAP32[$2 >> 2] | 0; //@line 5727
 __ZN5Stack3popEv($4, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 5729
 L1 : do {
  if ((HEAP32[$4 >> 2] | 0) == 1) {
   $11 = $$val3 + 4 | 0; //@line 5735
   HEAP32[$5 >> 2] = 0; //@line 5736
   $12 = $5 + 4 | 0; //@line 5737
   HEAP32[$12 >> 2] = 0; //@line 5738
   HEAP32[$5 + 8 >> 2] = 0; //@line 5740
   $14 = $4 + 44 | 0; //@line 5741
   $15 = HEAP32[$14 >> 2] | 0; //@line 5742
   $16 = HEAP32[$4 + 40 >> 2] | 0; //@line 5743
   $17 = $15 - $16 | 0; //@line 5744
   $18 = ($17 | 0) / 72 | 0; //@line 5745
   $20 = $16; //@line 5747
   $21 = $15; //@line 5748
   L3 : do {
    if ($17 | 0) {
     L5 : do {
      if ($18 >>> 0 > 59652323) {
       __THREW__ = 0; //@line 5754
       invoke_vi(254, $5 | 0); //@line 5755
       __THREW__ = 0; //@line 5756
      } else {
       __THREW__ = 0; //@line 5758
       $24 = invoke_ii(142, $17 | 0) | 0; //@line 5759
       $25 = __THREW__; //@line 5760
       __THREW__ = 0; //@line 5760
       if (!($25 & 1)) {
        HEAP32[$12 >> 2] = $24; //@line 5763
        HEAP32[$5 >> 2] = $24; //@line 5764
        HEAP32[$5 + 8 >> 2] = $24 + ($18 * 72 | 0); //@line 5767
        if (($20 | 0) == ($21 | 0)) {
         break L3;
        } else {
         $$0$i$i18$i$i$i$i$i = $20; //@line 5772
         $30 = $24; //@line 5772
        }
        while (1) {
         __THREW__ = 0; //@line 5775
         invoke_vii(120, $30 | 0, $$0$i$i18$i$i$i$i$i | 0); //@line 5776
         $31 = __THREW__; //@line 5777
         __THREW__ = 0; //@line 5777
         if ($31 & 1) {
          break L5;
         }
         $$0$i$i18$i$i$i$i$i = $$0$i$i18$i$i$i$i$i + 72 | 0; //@line 5782
         $30 = (HEAP32[$12 >> 2] | 0) + 72 | 0; //@line 5784
         HEAP32[$12 >> 2] = $30; //@line 5785
         if (($$0$i$i18$i$i$i$i$i | 0) == ($21 | 0)) {
          break L3;
         }
        }
       }
      }
     } while (0);
     $37 = ___cxa_find_matching_catch_2() | 0; //@line 5796
     $38 = tempRet0; //@line 5797
     __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($5); //@line 5798
     $eh$lpad$body$i$i$i$index4Z2D = $38; //@line 5799
     $eh$lpad$body$i$i$i$indexZ2D = $37; //@line 5799
     label = 25; //@line 5800
     break L1;
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = HEAP32[$11 >> 2]; //@line 5806
   $41 = $6 + 11 | 0; //@line 5807
   HEAP32[$6 >> 2] = 0; //@line 5808
   HEAP32[$6 + 4 >> 2] = 0; //@line 5808
   HEAP32[$6 + 8 >> 2] = 0; //@line 5808
   __THREW__ = 0; //@line 5809
   invoke_viii(12, $$val | 0, $5 | 0, $6 | 0); //@line 5810
   $42 = __THREW__; //@line 5811
   __THREW__ = 0; //@line 5811
   if ($42 & 1) {
    $72 = ___cxa_find_matching_catch_2() | 0; //@line 5814
    $73 = tempRet0; //@line 5815
    if ((HEAP8[$41 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 5820
    }
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($5); //@line 5822
    $$1$i$i$i = $73; //@line 5823
    $$16$i$i$i = $72; //@line 5823
    break;
   }
   if ((HEAP8[$41 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 5830
   }
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($5); //@line 5832
   $47 = $4 + 52 | 0; //@line 5833
   if ((HEAP8[$47 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$47 >> 2] | 0); //@line 5839
   }
   $52 = $4 + 40 | 0; //@line 5841
   $53 = HEAP32[$52 >> 2] | 0; //@line 5842
   if ($53 | 0) {
    $55 = HEAP32[$14 >> 2] | 0; //@line 5845
    do {
     if (($55 | 0) == ($53 | 0)) {
      $66 = $53; //@line 5849
     } else {
      $57 = $4 + 48 | 0; //@line 5851
      $59 = $55; //@line 5852
      while (1) {
       $58 = $59 + -72 | 0; //@line 5854
       HEAP32[$14 >> 2] = $58; //@line 5855
       __THREW__ = 0; //@line 5856
       HEAP8[$$byval_copy8 >> 0] = HEAP8[$3 >> 0] | 0; //@line 5857
       invoke_viii(13, $$byval_copy8 | 0, $57 | 0, $58 | 0); //@line 5858
       $60 = __THREW__; //@line 5859
       __THREW__ = 0; //@line 5859
       if ($60 & 1) {
        label = 20; //@line 5862
        break;
       }
       $59 = HEAP32[$14 >> 2] | 0; //@line 5865
       if (($59 | 0) == ($53 | 0)) {
        label = 21; //@line 5868
        break;
       }
      }
      if ((label | 0) == 20) {
       $64 = ___cxa_find_matching_catch_3(0) | 0; //@line 5875
       ___clang_call_terminate($64); //@line 5877
      } else if ((label | 0) == 21) {
       $66 = HEAP32[$52 >> 2] | 0; //@line 5882
       break;
      }
     }
    } while (0);
    __ZdlPv($66); //@line 5887
   }
   $67 = $4 + 4 | 0; //@line 5889
   if ((HEAP8[$67 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 5894
    return;
   }
   __ZdlPv(HEAP32[$67 >> 2] | 0); //@line 5897
   STACKTOP = sp; //@line 5898
   return;
  } else {
   $77 = ___cxa_allocate_exception(8) | 0; //@line 5900
   __THREW__ = 0; //@line 5901
   invoke_vii(125, $77 | 0, 17249); //@line 5902
   $78 = __THREW__; //@line 5903
   __THREW__ = 0; //@line 5903
   if ($78 & 1) {
    $83 = ___cxa_find_matching_catch_2() | 0; //@line 5906
    $84 = tempRet0; //@line 5907
    ___cxa_free_exception($77 | 0); //@line 5908
    $$1$i$i$i = $84; //@line 5909
    $$16$i$i$i = $83; //@line 5909
    break;
   } else {
    __THREW__ = 0; //@line 5912
    invoke_viii(16, $77 | 0, 2824, 242); //@line 5913
    __THREW__ = 0; //@line 5914
    $81 = ___cxa_find_matching_catch_2() | 0; //@line 5915
    $eh$lpad$body$i$i$i$index4Z2D = tempRet0; //@line 5917
    $eh$lpad$body$i$i$i$indexZ2D = $81; //@line 5917
    label = 25; //@line 5918
    break;
   }
  }
 } while (0);
 if ((label | 0) == 25) {
  $$1$i$i$i = $eh$lpad$body$i$i$i$index4Z2D; //@line 5924
  $$16$i$i$i = $eh$lpad$body$i$i$i$indexZ2D; //@line 5924
 }
 $85 = $4 + 52 | 0; //@line 5926
 if ((HEAP8[$85 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$85 >> 2] | 0); //@line 5932
 }
 $90 = $4 + 40 | 0; //@line 5934
 $91 = HEAP32[$90 >> 2] | 0; //@line 5935
 if ($91 | 0) {
  $93 = $4 + 44 | 0; //@line 5938
  $94 = HEAP32[$93 >> 2] | 0; //@line 5939
  do {
   if (($94 | 0) == ($91 | 0)) {
    $105 = $91; //@line 5943
   } else {
    $96 = $4 + 48 | 0; //@line 5945
    $98 = $94; //@line 5946
    while (1) {
     $97 = $98 + -72 | 0; //@line 5948
     HEAP32[$93 >> 2] = $97; //@line 5949
     __THREW__ = 0; //@line 5950
     HEAP8[$$byval_copy8 >> 0] = HEAP8[$3 >> 0] | 0; //@line 5951
     invoke_viii(13, $$byval_copy8 | 0, $96 | 0, $97 | 0); //@line 5952
     $99 = __THREW__; //@line 5953
     __THREW__ = 0; //@line 5953
     if ($99 & 1) {
      label = 39; //@line 5956
      break;
     }
     $98 = HEAP32[$93 >> 2] | 0; //@line 5959
     if (($98 | 0) == ($91 | 0)) {
      label = 40; //@line 5962
      break;
     }
    }
    if ((label | 0) == 39) {
     $103 = ___cxa_find_matching_catch_3(0) | 0; //@line 5969
     ___clang_call_terminate($103); //@line 5971
    } else if ((label | 0) == 40) {
     $105 = HEAP32[$90 >> 2] | 0; //@line 5976
     break;
    }
   }
  } while (0);
  __ZdlPv($105); //@line 5981
 }
 $106 = $4 + 4 | 0; //@line 5983
 if ((HEAP8[$106 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$16$i$i$i | 0); //@line 5988
 }
 __ZdlPv(HEAP32[$106 >> 2] | 0); //@line 5992
 ___resumeException($$16$i$i$i | 0); //@line 5993
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$2 = 0, $$236 = 0, $$33747 = 0, $$33748 = 0, $$349 = 0, $$350 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $102 = 0, $104 = 0, $106 = 0, $11 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $32 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $61 = 0, $63 = 0, $66 = 0, $7 = 0, $73 = 0, $74 = 0, $8 = 0, $82 = 0, $9 = 0, $90 = 0, $91 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 48719
 STACKTOP = STACKTOP + 432 | 0; //@line 48720
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(432); //@line 48720
 $$byval_copy = sp + 424 | 0; //@line 48721
 $7 = sp + 24 | 0; //@line 48722
 $8 = sp + 16 | 0; //@line 48723
 $9 = sp + 8 | 0; //@line 48724
 $10 = sp; //@line 48725
 $11 = sp + 428 | 0; //@line 48726
 $12 = sp + 4 | 0; //@line 48727
 HEAP32[$8 >> 2] = $7; //@line 48729
 $14 = $8 + 4 | 0; //@line 48730
 HEAP32[$14 >> 2] = 267; //@line 48731
 $15 = $7 + 400 | 0; //@line 48732
 __THREW__ = 0; //@line 48733
 invoke_vii(132, $10 | 0, $4 | 0); //@line 48734
 $16 = __THREW__; //@line 48735
 __THREW__ = 0; //@line 48735
 if ($16 & 1) {
  $44 = ___cxa_find_matching_catch_2() | 0; //@line 48738
  HEAP32[$8 >> 2] = 0; //@line 48740
  $$33747 = tempRet0; //@line 48741
  $$349 = $44; //@line 48741
  $110 = $7; //@line 48741
  label = 41; //@line 48742
 } else {
  __THREW__ = 0; //@line 48744
  $18 = invoke_iii(63, $10 | 0, 35544) | 0; //@line 48745
  $19 = __THREW__; //@line 48746
  __THREW__ = 0; //@line 48746
  if ($19 & 1) {
   $46 = ___cxa_find_matching_catch_2() | 0; //@line 48749
   $$2 = $46; //@line 48751
   $$236 = tempRet0; //@line 48751
  } else {
   HEAP8[$11 >> 0] = 0; //@line 48753
   $21 = HEAP32[$2 >> 2] | 0; //@line 48754
   HEAP32[$12 >> 2] = $21; //@line 48755
   $23 = HEAP32[$4 + 4 >> 2] | 0; //@line 48757
   $24 = $21; //@line 48758
   __THREW__ = 0; //@line 48759
   HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 48760
   $25 = invoke_iiiiiiiiiiii(2, $1 | 0, $$byval_copy | 0, $3 | 0, $10 | 0, $23 | 0, $5 | 0, $11 | 0, $18 | 0, $8 | 0, $9 | 0, $15 | 0) | 0; //@line 48761
   $26 = __THREW__; //@line 48762
   __THREW__ = 0; //@line 48762
   L7 : do {
    if (!($26 & 1)) {
     if ($25) {
      $29 = $6 + 8 + 3 | 0; //@line 48768
      if ((HEAP8[$29 >> 0] | 0) < 0) {
       $32 = HEAP32[$6 >> 2] | 0; //@line 48772
       HEAP32[$$byval_copy >> 2] = 0; //@line 48773
       __ZNSt3__211char_traitsIwE6assignERwRKw($32, $$byval_copy); //@line 48774
       HEAP32[$6 + 4 >> 2] = 0; //@line 48776
      } else {
       HEAP32[$$byval_copy >> 2] = 0; //@line 48778
       __ZNSt3__211char_traitsIwE6assignERwRKw($6, $$byval_copy); //@line 48779
       HEAP8[$29 >> 0] = 0; //@line 48780
      }
      if (HEAP8[$11 >> 0] | 0) {
       __THREW__ = 0; //@line 48788
       $39 = invoke_iii(HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0, $18 | 0, 45) | 0; //@line 48789
       $40 = __THREW__; //@line 48790
       __THREW__ = 0; //@line 48790
       if ($40 & 1) {
        break;
       }
       __THREW__ = 0; //@line 48795
       invoke_vii(148, $6 | 0, $39 | 0); //@line 48796
       $42 = __THREW__; //@line 48797
       __THREW__ = 0; //@line 48797
       if ($42 & 1) {
        break;
       }
      }
      __THREW__ = 0; //@line 48806
      $51 = invoke_iii(HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0, $18 | 0, 48) | 0; //@line 48807
      $52 = __THREW__; //@line 48808
      __THREW__ = 0; //@line 48808
      if ($52 & 1) {
       break;
      }
      $55 = HEAP32[$9 >> 2] | 0; //@line 48814
      $56 = $55 + -4 | 0; //@line 48815
      $$0 = HEAP32[$8 >> 2] | 0; //@line 48816
      while (1) {
       if ($$0 >>> 0 >= $56 >>> 0) {
        break;
       }
       if ((HEAP32[$$0 >> 2] | 0) != ($51 | 0)) {
        break;
       }
       $$0 = $$0 + 4 | 0; //@line 48828
      }
      __THREW__ = 0; //@line 48830
      invoke_iiii(45, $6 | 0, $$0 | 0, $55 | 0) | 0; //@line 48831
      $61 = __THREW__; //@line 48832
      __THREW__ = 0; //@line 48832
      if ($61 & 1) {
       break;
      }
     }
     $63 = HEAP32[$1 >> 2] | 0; //@line 48838
     do {
      if (!$63) {
       $115 = 1; //@line 48842
      } else {
       $66 = HEAP32[$63 + 12 >> 2] | 0; //@line 48845
       if (($66 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 48853
        $73 = invoke_ii(HEAP32[(HEAP32[$63 >> 2] | 0) + 36 >> 2] | 0, $63 | 0) | 0; //@line 48854
        $74 = __THREW__; //@line 48855
        __THREW__ = 0; //@line 48855
        if ($74 & 1) {
         break L7;
        } else {
         $$0$i$i$i$i = $73; //@line 48860
        }
       } else {
        $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$66 >> 2] | 0) | 0; //@line 48865
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 48870
        $115 = 1; //@line 48871
        break;
       } else {
        $115 = (HEAP32[$1 >> 2] | 0) == 0; //@line 48876
        break;
       }
      }
     } while (0);
     do {
      if (!$21) {
       label = 32; //@line 48884
      } else {
       $82 = HEAP32[$24 + 12 >> 2] | 0; //@line 48887
       if (($82 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 48896
        $90 = invoke_ii(HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] | 0, $24 | 0) | 0; //@line 48897
        $91 = __THREW__; //@line 48898
        __THREW__ = 0; //@line 48898
        if ($91 & 1) {
         break L7;
        } else {
         $$0$i$i2$i$i = $90; //@line 48903
        }
       } else {
        $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$82 >> 2] | 0) | 0; //@line 48908
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$2 >> 2] = 0; //@line 48913
        label = 32; //@line 48914
        break;
       } else {
        if ($115) {
         break;
        } else {
         label = 34; //@line 48920
         break;
        }
       }
      }
     } while (0);
     if ((label | 0) == 32) {
      if ($115) {
       label = 34; //@line 48928
      }
     }
     if ((label | 0) == 34) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2; //@line 48934
     }
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 48936
     __ZNSt3__26localeD2Ev($10); //@line 48937
     $99 = HEAP32[$8 >> 2] | 0; //@line 48938
     HEAP32[$8 >> 2] = 0; //@line 48939
     if ($99 | 0) {
      __THREW__ = 0; //@line 48943
      invoke_vi(HEAP32[$14 >> 2] | 0, $99 | 0); //@line 48944
      $102 = __THREW__; //@line 48945
      __THREW__ = 0; //@line 48945
      if ($102 & 1) {
       $104 = ___cxa_find_matching_catch_3(0) | 0; //@line 48948
       ___clang_call_terminate($104); //@line 48950
      }
     }
     STACKTOP = sp; //@line 48954
     return $$sroa$0$0$copyload | 0; //@line 48954
    }
   } while (0);
   $106 = ___cxa_find_matching_catch_2() | 0; //@line 48957
   $$2 = $106; //@line 48959
   $$236 = tempRet0; //@line 48959
  }
  __ZNSt3__26localeD2Ev($10); //@line 48961
  $$pre = HEAP32[$8 >> 2] | 0; //@line 48962
  HEAP32[$8 >> 2] = 0; //@line 48963
  if (!$$pre) {
   $$33748 = $$236; //@line 48966
   $$350 = $$2; //@line 48966
  } else {
   $$33747 = $$236; //@line 48968
   $$349 = $$2; //@line 48968
   $110 = $$pre; //@line 48968
   label = 41; //@line 48969
  }
 }
 if ((label | 0) == 41) {
  __THREW__ = 0; //@line 48974
  invoke_vi(HEAP32[$14 >> 2] | 0, $110 | 0); //@line 48975
  $111 = __THREW__; //@line 48976
  __THREW__ = 0; //@line 48976
  if ($111 & 1) {
   $113 = ___cxa_find_matching_catch_3(0) | 0; //@line 48979
   ___clang_call_terminate($113); //@line 48981
  } else {
   $$33748 = $$33747; //@line 48984
   $$350 = $$349; //@line 48984
  }
 }
 ___resumeException($$350 | 0); //@line 48987
 return 0; //@line 48989
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$2 = 0, $$233 = 0, $$33444 = 0, $$33445 = 0, $$346 = 0, $$347 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$0$0$copyload = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $31 = 0, $38 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $60 = 0, $62 = 0, $65 = 0, $7 = 0, $72 = 0, $73 = 0, $8 = 0, $81 = 0, $89 = 0, $9 = 0, $90 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 45187
 STACKTOP = STACKTOP + 144 | 0; //@line 45188
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 45188
 $$byval_copy = sp + 24 | 0; //@line 45189
 $7 = sp + 32 | 0; //@line 45190
 $8 = sp + 16 | 0; //@line 45191
 $9 = sp + 8 | 0; //@line 45192
 $10 = sp; //@line 45193
 $11 = sp + 28 | 0; //@line 45194
 $12 = sp + 4 | 0; //@line 45195
 HEAP32[$8 >> 2] = $7; //@line 45197
 $14 = $8 + 4 | 0; //@line 45198
 HEAP32[$14 >> 2] = 267; //@line 45199
 $15 = $7 + 100 | 0; //@line 45200
 __THREW__ = 0; //@line 45201
 invoke_vii(132, $10 | 0, $4 | 0); //@line 45202
 $16 = __THREW__; //@line 45203
 __THREW__ = 0; //@line 45203
 if ($16 & 1) {
  $43 = ___cxa_find_matching_catch_2() | 0; //@line 45206
  HEAP32[$8 >> 2] = 0; //@line 45208
  $$33444 = tempRet0; //@line 45209
  $$346 = $43; //@line 45209
  $109 = $7; //@line 45209
  label = 41; //@line 45210
 } else {
  __THREW__ = 0; //@line 45212
  $18 = invoke_iii(63, $10 | 0, 35512) | 0; //@line 45213
  $19 = __THREW__; //@line 45214
  __THREW__ = 0; //@line 45214
  if ($19 & 1) {
   $45 = ___cxa_find_matching_catch_2() | 0; //@line 45217
   $$2 = $45; //@line 45219
   $$233 = tempRet0; //@line 45219
  } else {
   HEAP8[$11 >> 0] = 0; //@line 45221
   $21 = HEAP32[$2 >> 2] | 0; //@line 45222
   HEAP32[$12 >> 2] = $21; //@line 45223
   $23 = HEAP32[$4 + 4 >> 2] | 0; //@line 45225
   $24 = $21; //@line 45226
   __THREW__ = 0; //@line 45227
   HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 45228
   $25 = invoke_iiiiiiiiiiii(1, $1 | 0, $$byval_copy | 0, $3 | 0, $10 | 0, $23 | 0, $5 | 0, $11 | 0, $18 | 0, $8 | 0, $9 | 0, $15 | 0) | 0; //@line 45229
   $26 = __THREW__; //@line 45230
   __THREW__ = 0; //@line 45230
   L7 : do {
    if (!($26 & 1)) {
     if ($25) {
      $28 = $6 + 11 | 0; //@line 45235
      if ((HEAP8[$28 >> 0] | 0) < 0) {
       $31 = HEAP32[$6 >> 2] | 0; //@line 45239
       HEAP8[$$byval_copy >> 0] = 0; //@line 45240
       __ZNSt3__211char_traitsIcE6assignERcRKc($31, $$byval_copy); //@line 45241
       HEAP32[$6 + 4 >> 2] = 0; //@line 45243
      } else {
       HEAP8[$$byval_copy >> 0] = 0; //@line 45245
       __ZNSt3__211char_traitsIcE6assignERcRKc($6, $$byval_copy); //@line 45246
       HEAP8[$28 >> 0] = 0; //@line 45247
      }
      if (HEAP8[$11 >> 0] | 0) {
       __THREW__ = 0; //@line 45255
       $38 = invoke_iii(HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] | 0, $18 | 0, 45) | 0; //@line 45256
       $39 = __THREW__; //@line 45257
       __THREW__ = 0; //@line 45257
       if ($39 & 1) {
        break;
       }
       __THREW__ = 0; //@line 45262
       invoke_vii(116, $6 | 0, $38 | 0); //@line 45263
       $41 = __THREW__; //@line 45264
       __THREW__ = 0; //@line 45264
       if ($41 & 1) {
        break;
       }
      }
      __THREW__ = 0; //@line 45273
      $50 = invoke_iii(HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] | 0, $18 | 0, 48) | 0; //@line 45274
      $51 = __THREW__; //@line 45275
      __THREW__ = 0; //@line 45275
      if ($51 & 1) {
       break;
      }
      $54 = HEAP32[$9 >> 2] | 0; //@line 45281
      $55 = $54 + -1 | 0; //@line 45282
      $$0 = HEAP32[$8 >> 2] | 0; //@line 45283
      while (1) {
       if ($$0 >>> 0 >= $55 >>> 0) {
        break;
       }
       if ((HEAP8[$$0 >> 0] | 0) != $50 << 24 >> 24) {
        break;
       }
       $$0 = $$0 + 1 | 0; //@line 45295
      }
      __THREW__ = 0; //@line 45297
      invoke_iiii(44, $6 | 0, $$0 | 0, $54 | 0) | 0; //@line 45298
      $60 = __THREW__; //@line 45299
      __THREW__ = 0; //@line 45299
      if ($60 & 1) {
       break;
      }
     }
     $62 = HEAP32[$1 >> 2] | 0; //@line 45305
     do {
      if (!$62) {
       $114 = 1; //@line 45309
      } else {
       $65 = HEAP32[$62 + 12 >> 2] | 0; //@line 45312
       if (($65 | 0) == (HEAP32[$62 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 45320
        $72 = invoke_ii(HEAP32[(HEAP32[$62 >> 2] | 0) + 36 >> 2] | 0, $62 | 0) | 0; //@line 45321
        $73 = __THREW__; //@line 45322
        __THREW__ = 0; //@line 45322
        if ($73 & 1) {
         break L7;
        } else {
         $$0$i$i$i$i = $72; //@line 45327
        }
       } else {
        $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$65 >> 0] | 0) | 0; //@line 45332
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 45337
        $114 = 1; //@line 45338
        break;
       } else {
        $114 = (HEAP32[$1 >> 2] | 0) == 0; //@line 45343
        break;
       }
      }
     } while (0);
     do {
      if (!$21) {
       label = 32; //@line 45351
      } else {
       $81 = HEAP32[$24 + 12 >> 2] | 0; //@line 45354
       if (($81 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) {
        __THREW__ = 0; //@line 45363
        $89 = invoke_ii(HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] | 0, $24 | 0) | 0; //@line 45364
        $90 = __THREW__; //@line 45365
        __THREW__ = 0; //@line 45365
        if ($90 & 1) {
         break L7;
        } else {
         $$0$i$i2$i$i = $89; //@line 45370
        }
       } else {
        $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0; //@line 45375
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$2 >> 2] = 0; //@line 45380
        label = 32; //@line 45381
        break;
       } else {
        if ($114) {
         break;
        } else {
         label = 34; //@line 45387
         break;
        }
       }
      }
     } while (0);
     if ((label | 0) == 32) {
      if ($114) {
       label = 34; //@line 45395
      }
     }
     if ((label | 0) == 34) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2; //@line 45401
     }
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 45403
     __ZNSt3__26localeD2Ev($10); //@line 45404
     $98 = HEAP32[$8 >> 2] | 0; //@line 45405
     HEAP32[$8 >> 2] = 0; //@line 45406
     if ($98 | 0) {
      __THREW__ = 0; //@line 45410
      invoke_vi(HEAP32[$14 >> 2] | 0, $98 | 0); //@line 45411
      $101 = __THREW__; //@line 45412
      __THREW__ = 0; //@line 45412
      if ($101 & 1) {
       $103 = ___cxa_find_matching_catch_3(0) | 0; //@line 45415
       ___clang_call_terminate($103); //@line 45417
      }
     }
     STACKTOP = sp; //@line 45421
     return $$sroa$0$0$copyload | 0; //@line 45421
    }
   } while (0);
   $105 = ___cxa_find_matching_catch_2() | 0; //@line 45424
   $$2 = $105; //@line 45426
   $$233 = tempRet0; //@line 45426
  }
  __ZNSt3__26localeD2Ev($10); //@line 45428
  $$pre = HEAP32[$8 >> 2] | 0; //@line 45429
  HEAP32[$8 >> 2] = 0; //@line 45430
  if (!$$pre) {
   $$33445 = $$233; //@line 45433
   $$347 = $$2; //@line 45433
  } else {
   $$33444 = $$233; //@line 45435
   $$346 = $$2; //@line 45435
   $109 = $$pre; //@line 45435
   label = 41; //@line 45436
  }
 }
 if ((label | 0) == 41) {
  __THREW__ = 0; //@line 45441
  invoke_vi(HEAP32[$14 >> 2] | 0, $109 | 0); //@line 45442
  $110 = __THREW__; //@line 45443
  __THREW__ = 0; //@line 45443
  if ($110 & 1) {
   $112 = ___cxa_find_matching_catch_3(0) | 0; //@line 45446
   ___clang_call_terminate($112); //@line 45448
  } else {
   $$33445 = $$33444; //@line 45451
   $$347 = $$346; //@line 45451
  }
 }
 ___resumeException($$347 | 0); //@line 45454
 return 0; //@line 45456
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 5642
 $3 = HEAP32[$2 >> 2] | 0; //@line 5643
 $4 = $3 & -8; //@line 5644
 $5 = $0 + $4 | 0; //@line 5645
 $6 = HEAP32[8465] | 0; //@line 5646
 $8 = $3 & 3; //@line 5648
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 5654
 }
 $11 = $5 + 4 | 0; //@line 5657
 $12 = HEAP32[$11 >> 2] | 0; //@line 5658
 if (!($12 & 1)) {
  _abort(); //@line 5662
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 5669
   return $$2 | 0; //@line 5670
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[8581] << 1 >>> 0) {
    $$2 = $0; //@line 5680
    return $$2 | 0; //@line 5681
   }
  }
  $$2 = 0; //@line 5684
  return $$2 | 0; //@line 5685
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 5689
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 5692
   return $$2 | 0; //@line 5693
  }
  $26 = $0 + $1 | 0; //@line 5695
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 5699
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 5702
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 5705
  _dispose_chunk($26, $24); //@line 5706
  $$2 = $0; //@line 5707
  return $$2 | 0; //@line 5708
 }
 if ((HEAP32[8467] | 0) == ($5 | 0)) {
  $37 = (HEAP32[8464] | 0) + $4 | 0; //@line 5714
  $39 = $37 - $1 | 0; //@line 5716
  $40 = $0 + $1 | 0; //@line 5717
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 5719
   return $$2 | 0; //@line 5720
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 5727
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 5728
  HEAP32[8467] = $40; //@line 5729
  HEAP32[8464] = $39; //@line 5730
  $$2 = $0; //@line 5731
  return $$2 | 0; //@line 5732
 }
 if ((HEAP32[8466] | 0) == ($5 | 0)) {
  $49 = (HEAP32[8463] | 0) + $4 | 0; //@line 5738
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 5741
   return $$2 | 0; //@line 5742
  }
  $51 = $49 - $1 | 0; //@line 5744
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 5747
   $54 = $0 + $49 | 0; //@line 5748
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 5752
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 5755
   HEAP32[$54 >> 2] = $51; //@line 5756
   $60 = $54 + 4 | 0; //@line 5757
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 5760
   $storemerge = $53; //@line 5761
   $storemerge4 = $51; //@line 5761
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 5766
   $67 = $0 + $49 + 4 | 0; //@line 5768
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 5771
   $storemerge = 0; //@line 5772
   $storemerge4 = 0; //@line 5772
  }
  HEAP32[8463] = $storemerge4; //@line 5774
  HEAP32[8466] = $storemerge; //@line 5775
  $$2 = $0; //@line 5776
  return $$2 | 0; //@line 5777
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 5782
  return $$2 | 0; //@line 5783
 }
 $73 = ($12 & -8) + $4 | 0; //@line 5786
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 5789
  return $$2 | 0; //@line 5790
 }
 $75 = $73 - $1 | 0; //@line 5792
 $76 = $12 >>> 3; //@line 5793
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 5798
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 5800
   $83 = 33884 + ($76 << 1 << 2) | 0; //@line 5802
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 5807
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 5814
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[8461] = HEAP32[8461] & ~(1 << $76); //@line 5824
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 5830
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 5834
    }
    $96 = $81 + 8 | 0; //@line 5837
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 5841
    } else {
     _abort(); //@line 5843
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 5848
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 5849
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 5852
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 5854
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 5858
     $115 = $114 + 4 | 0; //@line 5859
     $116 = HEAP32[$115 >> 2] | 0; //@line 5860
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 5863
      if (!$118) {
       $$3 = 0; //@line 5866
       break;
      } else {
       $$1272 = $118; //@line 5869
       $$1275 = $114; //@line 5869
      }
     } else {
      $$1272 = $116; //@line 5872
      $$1275 = $115; //@line 5872
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 5875
      $121 = HEAP32[$120 >> 2] | 0; //@line 5876
      if ($121 | 0) {
       $$1272 = $121; //@line 5879
       $$1275 = $120; //@line 5879
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 5882
      $124 = HEAP32[$123 >> 2] | 0; //@line 5883
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 5888
       $$1275 = $123; //@line 5888
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 5893
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 5896
      $$3 = $$1272; //@line 5897
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 5902
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 5905
     }
     $108 = $106 + 12 | 0; //@line 5908
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 5912
     }
     $111 = $103 + 8 | 0; //@line 5915
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 5919
      HEAP32[$111 >> 2] = $106; //@line 5920
      $$3 = $103; //@line 5921
      break;
     } else {
      _abort(); //@line 5924
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 5932
    $130 = 34148 + ($129 << 2) | 0; //@line 5933
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 5938
      if (!$$3) {
       HEAP32[8462] = HEAP32[8462] & ~(1 << $129); //@line 5945
       break L49;
      }
     } else {
      if ((HEAP32[8465] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 5952
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 5960
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[8465] | 0; //@line 5970
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 5973
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 5977
    $147 = $5 + 16 | 0; //@line 5978
    $148 = HEAP32[$147 >> 2] | 0; //@line 5979
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 5985
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 5989
       HEAP32[$148 + 24 >> 2] = $$3; //@line 5991
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 5997
    if ($154 | 0) {
     if ((HEAP32[8465] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 6003
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 6007
      HEAP32[$154 + 24 >> 2] = $$3; //@line 6009
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 6021
  $165 = $0 + $73 + 4 | 0; //@line 6023
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 6026
  $$2 = $0; //@line 6027
  return $$2 | 0; //@line 6028
 } else {
  $168 = $0 + $1 | 0; //@line 6030
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 6034
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 6037
  $175 = $0 + $73 + 4 | 0; //@line 6039
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 6042
  _dispose_chunk($168, $75); //@line 6043
  $$2 = $0; //@line 6044
  return $$2 | 0; //@line 6045
 }
 return 0; //@line 6047
}
function __ZN3FFI6runFFIENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP6Runner($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$01120 = 0, $$021 = 0, $$03$i = 0, $$09 = 0, $$1 = 0, $$112 = 0, $$2 = 0, $$213 = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $24 = 0, $25 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $58 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $7 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $88 = 0, $eh$lpad$body$i$index5Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25917
 STACKTOP = STACKTOP + 176 | 0; //@line 25918
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 25918
 $vararg_buffer1 = sp + 8 | 0; //@line 25919
 $vararg_buffer = sp; //@line 25920
 $3 = sp + 152 | 0; //@line 25921
 $4 = sp + 16 | 0; //@line 25922
 $5 = __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEERKT_($0, $1) | 0; //@line 25923
 if ($5 | 0) {
  __THREW__ = 0; //@line 25928
  invoke_vi(HEAP32[$5 + 20 >> 2] | 0, $2 | 0); //@line 25929
  $77 = __THREW__; //@line 25930
  __THREW__ = 0; //@line 25930
  if (!($77 & 1)) {
   STACKTOP = sp; //@line 25933
   return;
  }
  $79 = ___cxa_find_matching_catch_3(2728) | 0; //@line 25935
  $80 = tempRet0; //@line 25936
  if (($80 | 0) != (_llvm_eh_typeid_for(2728) | 0)) {
   $$2 = $79; //@line 25940
   $$213 = $80; //@line 25940
   ___resumeException($$2 | 0); //@line 25941
  }
  $83 = ___cxa_begin_catch($79 | 0) | 0; //@line 25944
  if ((HEAP8[$1 + 11 >> 0] | 0) < 0) {
   $88 = HEAP32[$1 >> 2] | 0; //@line 25950
  } else {
   $88 = $1; //@line 25952
  }
  HEAP32[$vararg_buffer >> 2] = $88; //@line 25954
  _printf(20916, $vararg_buffer) | 0; //@line 25955
  HEAP32[$vararg_buffer1 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 8 >> 2] & 255]($83) | 0; //@line 25960
  _printf(20955, $vararg_buffer1) | 0; //@line 25961
  ___cxa_end_catch(); //@line 25962
  STACKTOP = sp; //@line 25963
  return;
 }
 $7 = $4 + 56 | 0; //@line 25965
 $8 = $4 + 4 | 0; //@line 25966
 HEAP32[$4 >> 2] = 796; //@line 25967
 HEAP32[$7 >> 2] = 816; //@line 25968
 __THREW__ = 0; //@line 25970
 invoke_vii(110, $4 + 56 | 0, $8 | 0); //@line 25971
 $10 = __THREW__; //@line 25972
 __THREW__ = 0; //@line 25972
 if ($10 & 1) {
  $34 = ___cxa_find_matching_catch_2() | 0; //@line 25975
  $$0$i = tempRet0; //@line 25977
  $$03$i = $34; //@line 25977
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 25978
  ___resumeException($$03$i | 0); //@line 25979
 }
 HEAP32[$4 + 128 >> 2] = 0; //@line 25983
 HEAP32[$4 + 132 >> 2] = -1; //@line 25985
 HEAP32[$4 >> 2] = 2980; //@line 25986
 HEAP32[$7 >> 2] = 3e3; //@line 25987
 __THREW__ = 0; //@line 25988
 invoke_vi(253, $8 | 0); //@line 25989
 $14 = __THREW__; //@line 25990
 __THREW__ = 0; //@line 25990
 do {
  if ($14 & 1) {
   $36 = ___cxa_find_matching_catch_2() | 0; //@line 25994
   $eh$lpad$body$i$index5Z2D = tempRet0; //@line 25996
   $eh$lpad$body$i$indexZ2D = $36; //@line 25996
  } else {
   HEAP32[$8 >> 2] = 3032; //@line 25998
   $16 = $4 + 36 | 0; //@line 25999
   $17 = $4 + 52 | 0; //@line 26000
   HEAP32[$16 >> 2] = 0; //@line 26001
   HEAP32[$16 + 4 >> 2] = 0; //@line 26001
   HEAP32[$16 + 8 >> 2] = 0; //@line 26001
   HEAP32[$16 + 12 >> 2] = 0; //@line 26001
   HEAP32[$17 >> 2] = 16; //@line 26002
   HEAP32[$3 >> 2] = 0; //@line 26003
   HEAP32[$3 + 4 >> 2] = 0; //@line 26003
   HEAP32[$3 + 8 >> 2] = 0; //@line 26003
   __THREW__ = 0; //@line 26004
   invoke_vii(111, $8 | 0, $3 | 0); //@line 26005
   $18 = __THREW__; //@line 26006
   __THREW__ = 0; //@line 26006
   if ($18 & 1) {
    $24 = ___cxa_find_matching_catch_2() | 0; //@line 26009
    $25 = tempRet0; //@line 26010
    if ((HEAP8[$3 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 26016
    }
    if ((HEAP8[$16 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$16 >> 2] | 0); //@line 26023
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($8); //@line 26025
    $eh$lpad$body$i$index5Z2D = $25; //@line 26026
    $eh$lpad$body$i$indexZ2D = $24; //@line 26026
    break;
   }
   if ((HEAP8[$3 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 26034
   }
   __THREW__ = 0; //@line 26036
   $38 = invoke_iiii(32, $4 | 0, 20868, 47) | 0; //@line 26037
   $39 = __THREW__; //@line 26038
   __THREW__ = 0; //@line 26038
   L34 : do {
    if ($39 & 1) {
     label = 22; //@line 26042
    } else {
     $42 = HEAP8[$1 + 11 >> 0] | 0; //@line 26045
     $43 = $42 << 24 >> 24 < 0; //@line 26046
     __THREW__ = 0; //@line 26053
     $50 = invoke_iiii(32, $38 | 0, ($43 ? HEAP32[$1 >> 2] | 0 : $1) | 0, ($43 ? HEAP32[$1 + 4 >> 2] | 0 : $42 & 255) | 0) | 0; //@line 26054
     $51 = __THREW__; //@line 26055
     __THREW__ = 0; //@line 26055
     if ($51 & 1) {
      label = 22; //@line 26058
     } else {
      __THREW__ = 0; //@line 26060
      invoke_iiii(32, $50 | 0, 20836, 1) | 0; //@line 26061
      $53 = __THREW__; //@line 26062
      __THREW__ = 0; //@line 26062
      if ($53 & 1) {
       label = 22; //@line 26065
      } else {
       $55 = ___cxa_allocate_exception(8) | 0; //@line 26067
       __THREW__ = 0; //@line 26068
       invoke_vii(114, $3 | 0, $8 | 0); //@line 26069
       $56 = __THREW__; //@line 26070
       __THREW__ = 0; //@line 26070
       do {
        if ($56 & 1) {
         $63 = ___cxa_find_matching_catch_2() | 0; //@line 26074
         $$01120 = tempRet0; //@line 26076
         $$021 = $63; //@line 26076
        } else {
         __THREW__ = 0; //@line 26078
         invoke_vii(127, $55 | 0, $3 | 0); //@line 26079
         $58 = __THREW__; //@line 26080
         __THREW__ = 0; //@line 26080
         if ($58 & 1) {
          $$09 = 1; //@line 26083
         } else {
          __THREW__ = 0; //@line 26085
          invoke_viii(16, $55 | 0, 2824, 242); //@line 26086
          __THREW__ = 0; //@line 26087
          $$09 = 0; //@line 26088
         }
         $65 = ___cxa_find_matching_catch_2() | 0; //@line 26090
         $66 = tempRet0; //@line 26091
         if ((HEAP8[$3 + 11 >> 0] | 0) < 0) {
          __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 26097
          if ($$09) {
           $$01120 = $66; //@line 26099
           $$021 = $65; //@line 26099
           break;
          } else {
           $$1 = $65; //@line 26102
           $$112 = $66; //@line 26102
           break L34;
          }
         } else {
          if ($$09) {
           $$01120 = $66; //@line 26107
           $$021 = $65; //@line 26107
           break;
          } else {
           $$1 = $65; //@line 26110
           $$112 = $66; //@line 26110
           break L34;
          }
         }
        }
       } while (0);
       ___cxa_free_exception($55 | 0); //@line 26116
       $$1 = $$021; //@line 26117
       $$112 = $$01120; //@line 26117
      }
     }
    }
   } while (0);
   if ((label | 0) == 22) {
    $61 = ___cxa_find_matching_catch_2() | 0; //@line 26123
    $$1 = $61; //@line 26125
    $$112 = tempRet0; //@line 26125
   }
   HEAP32[$4 >> 2] = 2980; //@line 26127
   HEAP32[$7 >> 2] = 3e3; //@line 26128
   HEAP32[$8 >> 2] = 3032; //@line 26129
   if ((HEAP8[$16 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$16 >> 2] | 0); //@line 26135
   }
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($8); //@line 26137
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($4, 3012); //@line 26138
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 26139
   $$2 = $$1; //@line 26140
   $$213 = $$112; //@line 26140
   ___resumeException($$2 | 0); //@line 26141
  }
 } while (0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($4, 3012); //@line 26145
 $$0$i = $eh$lpad$body$i$index5Z2D; //@line 26146
 $$03$i = $eh$lpad$body$i$indexZ2D; //@line 26146
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($7); //@line 26147
 ___resumeException($$03$i | 0); //@line 26148
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$04$i$i$i = 0, $$byval_copy3 = 0, $$val = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $110 = 0, $112 = 0, $113 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $84 = 0, $86 = 0, $87 = 0, $92 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23567
 STACKTOP = STACKTOP + 160 | 0; //@line 23568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 23568
 $$byval_copy3 = sp + 145 | 0; //@line 23569
 $2 = sp + 144 | 0; //@line 23570
 $3 = sp + 72 | 0; //@line 23571
 $4 = sp; //@line 23572
 $$val = HEAP32[$1 >> 2] | 0; //@line 23573
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv($$val) | 0); //@line 23575
 __THREW__ = 0; //@line 23576
 invoke_vii(120, $4 | 0, $3 | 0); //@line 23577
 $6 = __THREW__; //@line 23578
 __THREW__ = 0; //@line 23578
 do {
  if ($6 & 1) {
   $62 = ___cxa_find_matching_catch_2() | 0; //@line 23582
   $$0$i$i$i = tempRet0; //@line 23584
   $$04$i$i$i = $62; //@line 23584
  } else {
   __THREW__ = 0; //@line 23586
   invoke_vii(133, $$val | 0, $4 | 0); //@line 23587
   $8 = __THREW__; //@line 23588
   __THREW__ = 0; //@line 23588
   if ($8 & 1) {
    $64 = ___cxa_find_matching_catch_2() | 0; //@line 23591
    $65 = tempRet0; //@line 23592
    $66 = $4 + 52 | 0; //@line 23593
    if ((HEAP8[$66 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$66 >> 2] | 0); //@line 23599
    }
    $71 = $4 + 40 | 0; //@line 23601
    $72 = HEAP32[$71 >> 2] | 0; //@line 23602
    if ($72 | 0) {
     $74 = $4 + 44 | 0; //@line 23605
     $75 = HEAP32[$74 >> 2] | 0; //@line 23606
     do {
      if (($75 | 0) == ($72 | 0)) {
       $86 = $72; //@line 23610
      } else {
       $77 = $4 + 48 | 0; //@line 23612
       $79 = $75; //@line 23613
       while (1) {
        $78 = $79 + -72 | 0; //@line 23615
        HEAP32[$74 >> 2] = $78; //@line 23616
        __THREW__ = 0; //@line 23617
        HEAP8[$$byval_copy3 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23618
        invoke_viii(13, $$byval_copy3 | 0, $77 | 0, $78 | 0); //@line 23619
        $80 = __THREW__; //@line 23620
        __THREW__ = 0; //@line 23620
        if ($80 & 1) {
         label = 35; //@line 23623
         break;
        }
        $79 = HEAP32[$74 >> 2] | 0; //@line 23626
        if (($79 | 0) == ($72 | 0)) {
         label = 36; //@line 23629
         break;
        }
       }
       if ((label | 0) == 35) {
        $84 = ___cxa_find_matching_catch_3(0) | 0; //@line 23636
        ___clang_call_terminate($84); //@line 23638
       } else if ((label | 0) == 36) {
        $86 = HEAP32[$71 >> 2] | 0; //@line 23643
        break;
       }
      }
     } while (0);
     __ZdlPv($86); //@line 23648
    }
    $87 = $4 + 4 | 0; //@line 23650
    if ((HEAP8[$87 + 11 >> 0] | 0) >= 0) {
     $$0$i$i$i = $65; //@line 23655
     $$04$i$i$i = $64; //@line 23655
     break;
    }
    __ZdlPv(HEAP32[$87 >> 2] | 0); //@line 23659
    $$0$i$i$i = $65; //@line 23660
    $$04$i$i$i = $64; //@line 23660
    break;
   }
   $10 = $4 + 52 | 0; //@line 23663
   if ((HEAP8[$10 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$10 >> 2] | 0); //@line 23669
   }
   $15 = $4 + 40 | 0; //@line 23671
   $16 = HEAP32[$15 >> 2] | 0; //@line 23672
   if ($16 | 0) {
    $18 = $4 + 44 | 0; //@line 23675
    $19 = HEAP32[$18 >> 2] | 0; //@line 23676
    do {
     if (($19 | 0) == ($16 | 0)) {
      $30 = $16; //@line 23680
     } else {
      $21 = $4 + 48 | 0; //@line 23682
      $23 = $19; //@line 23683
      while (1) {
       $22 = $23 + -72 | 0; //@line 23685
       HEAP32[$18 >> 2] = $22; //@line 23686
       __THREW__ = 0; //@line 23687
       HEAP8[$$byval_copy3 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23688
       invoke_viii(13, $$byval_copy3 | 0, $21 | 0, $22 | 0); //@line 23689
       $24 = __THREW__; //@line 23690
       __THREW__ = 0; //@line 23690
       if ($24 & 1) {
        label = 10; //@line 23693
        break;
       }
       $23 = HEAP32[$18 >> 2] | 0; //@line 23696
       if (($23 | 0) == ($16 | 0)) {
        label = 11; //@line 23699
        break;
       }
      }
      if ((label | 0) == 10) {
       $28 = ___cxa_find_matching_catch_3(0) | 0; //@line 23706
       ___clang_call_terminate($28); //@line 23708
      } else if ((label | 0) == 11) {
       $30 = HEAP32[$15 >> 2] | 0; //@line 23713
       break;
      }
     }
    } while (0);
    __ZdlPv($30); //@line 23718
   }
   $31 = $4 + 4 | 0; //@line 23720
   if ((HEAP8[$31 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$31 >> 2] | 0); //@line 23726
   }
   $36 = $3 + 52 | 0; //@line 23728
   if ((HEAP8[$36 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$36 >> 2] | 0); //@line 23734
   }
   $41 = $3 + 40 | 0; //@line 23736
   $42 = HEAP32[$41 >> 2] | 0; //@line 23737
   if ($42 | 0) {
    $44 = $3 + 44 | 0; //@line 23740
    $45 = HEAP32[$44 >> 2] | 0; //@line 23741
    do {
     if (($45 | 0) == ($42 | 0)) {
      $56 = $42; //@line 23745
     } else {
      $47 = $3 + 48 | 0; //@line 23747
      $49 = $45; //@line 23748
      while (1) {
       $48 = $49 + -72 | 0; //@line 23750
       HEAP32[$44 >> 2] = $48; //@line 23751
       __THREW__ = 0; //@line 23752
       HEAP8[$$byval_copy3 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23753
       invoke_viii(13, $$byval_copy3 | 0, $47 | 0, $48 | 0); //@line 23754
       $50 = __THREW__; //@line 23755
       __THREW__ = 0; //@line 23755
       if ($50 & 1) {
        label = 22; //@line 23758
        break;
       }
       $49 = HEAP32[$44 >> 2] | 0; //@line 23761
       if (($49 | 0) == ($42 | 0)) {
        label = 23; //@line 23764
        break;
       }
      }
      if ((label | 0) == 22) {
       $54 = ___cxa_find_matching_catch_3(0) | 0; //@line 23771
       ___clang_call_terminate($54); //@line 23773
      } else if ((label | 0) == 23) {
       $56 = HEAP32[$41 >> 2] | 0; //@line 23778
       break;
      }
     }
    } while (0);
    __ZdlPv($56); //@line 23783
   }
   $57 = $3 + 4 | 0; //@line 23785
   if ((HEAP8[$57 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 23790
    return;
   }
   __ZdlPv(HEAP32[$57 >> 2] | 0); //@line 23793
   STACKTOP = sp; //@line 23794
   return;
  }
 } while (0);
 $92 = $3 + 52 | 0; //@line 23797
 if ((HEAP8[$92 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$92 >> 2] | 0); //@line 23803
 }
 $97 = $3 + 40 | 0; //@line 23805
 $98 = HEAP32[$97 >> 2] | 0; //@line 23806
 if ($98 | 0) {
  $100 = $3 + 44 | 0; //@line 23809
  $101 = HEAP32[$100 >> 2] | 0; //@line 23810
  do {
   if (($101 | 0) == ($98 | 0)) {
    $112 = $98; //@line 23814
   } else {
    $103 = $3 + 48 | 0; //@line 23816
    $105 = $101; //@line 23817
    while (1) {
     $104 = $105 + -72 | 0; //@line 23819
     HEAP32[$100 >> 2] = $104; //@line 23820
     __THREW__ = 0; //@line 23821
     HEAP8[$$byval_copy3 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23822
     invoke_viii(13, $$byval_copy3 | 0, $103 | 0, $104 | 0); //@line 23823
     $106 = __THREW__; //@line 23824
     __THREW__ = 0; //@line 23824
     if ($106 & 1) {
      label = 47; //@line 23827
      break;
     }
     $105 = HEAP32[$100 >> 2] | 0; //@line 23830
     if (($105 | 0) == ($98 | 0)) {
      label = 48; //@line 23833
      break;
     }
    }
    if ((label | 0) == 47) {
     $110 = ___cxa_find_matching_catch_3(0) | 0; //@line 23840
     ___clang_call_terminate($110); //@line 23842
    } else if ((label | 0) == 48) {
     $112 = HEAP32[$97 >> 2] | 0; //@line 23847
     break;
    }
   }
  } while (0);
  __ZdlPv($112); //@line 23852
 }
 $113 = $3 + 4 | 0; //@line 23854
 if ((HEAP8[$113 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$04$i$i$i | 0); //@line 23859
 }
 __ZdlPv(HEAP32[$113 >> 2] | 0); //@line 23863
 ___resumeException($$04$i$i$i | 0); //@line 23864
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph87 = 0, $103 = 0, $105 = 0, $106 = 0, $113 = 0, $116 = 0, $117 = 0, $14 = 0, $15 = 0, $18 = 0, $23 = 0, $24 = 0, $35 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $65 = 0, $68 = 0, $70 = 0, $74 = 0, $77 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $93 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 55894
 STACKTOP = STACKTOP + 16 | 0; //@line 55895
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 55895
 $8 = sp; //@line 55896
 $9 = sp + 8 | 0; //@line 55897
 $$070 = $2; //@line 55898
 while (1) {
  if (($$070 | 0) == ($3 | 0)) {
   $$070$lcssa = $3; //@line 55902
   break;
  }
  if (!(HEAP32[$$070 >> 2] | 0)) {
   $$070$lcssa = $$070; //@line 55908
   break;
  }
  $$070 = $$070 + 4 | 0; //@line 55912
 }
 HEAP32[$7 >> 2] = $5; //@line 55914
 HEAP32[$4 >> 2] = $2; //@line 55915
 $14 = $6; //@line 55916
 $15 = $0 + 8 | 0; //@line 55917
 $$077 = $2; //@line 55918
 $$079 = $5; //@line 55918
 $$171 = $$070$lcssa; //@line 55918
 L6 : while (1) {
  if (($$079 | 0) == ($6 | 0) | ($$077 | 0) == ($3 | 0)) {
   $113 = $$077; //@line 55924
   label = 53; //@line 55925
   break;
  }
  $18 = $1; //@line 55928
  $23 = HEAP32[$18 + 4 >> 2] | 0; //@line 55933
  $24 = $8; //@line 55934
  HEAP32[$24 >> 2] = HEAP32[$18 >> 2]; //@line 55936
  HEAP32[$24 + 4 >> 2] = $23; //@line 55939
  $35 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0; //@line 55947
  __THREW__ = 0; //@line 55948
  $36 = invoke_iiiiii(22, $$079 | 0, $4 | 0, $$171 - $$077 >> 2 | 0, $14 - $$079 | 0, $1 | 0) | 0; //@line 55949
  $37 = __THREW__; //@line 55950
  __THREW__ = 0; //@line 55950
  if ($37 & 1) {
   label = 11; //@line 55953
   break;
  }
  if ($35 | 0) {
   __THREW__ = 0; //@line 55958
   invoke_ii(147, $35 | 0) | 0; //@line 55959
   $40 = __THREW__; //@line 55960
   __THREW__ = 0; //@line 55960
   if ($40 & 1) {
    label = 10; //@line 55963
    break;
   }
  }
  switch ($36 | 0) {
  case -1:
   {
    label = 16; //@line 55969
    break L6;
    break;
   }
  case 0:
   {
    $$375$ph = 1; //@line 55974
    label = 50; //@line 55975
    break L6;
    break;
   }
  default:
   {}
  }
  $77 = (HEAP32[$7 >> 2] | 0) + $36 | 0; //@line 55983
  HEAP32[$7 >> 2] = $77; //@line 55984
  if (($77 | 0) == ($6 | 0)) {
   label = 51; //@line 55987
   break;
  }
  if (($$171 | 0) == ($3 | 0)) {
   $$5$ph87 = $3; //@line 55993
   $116 = $77; //@line 55993
   $117 = HEAP32[$4 >> 2] | 0; //@line 55993
  } else {
   $81 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0; //@line 55996
   __THREW__ = 0; //@line 55997
   $82 = invoke_iiii(47, $9 | 0, 0, $1 | 0) | 0; //@line 55998
   $83 = __THREW__; //@line 55999
   __THREW__ = 0; //@line 55999
   if ($83 & 1) {
    label = 36; //@line 56002
    break;
   }
   if ($81 | 0) {
    __THREW__ = 0; //@line 56007
    invoke_ii(147, $81 | 0) | 0; //@line 56008
    $86 = __THREW__; //@line 56009
    __THREW__ = 0; //@line 56009
    if ($86 & 1) {
     label = 35; //@line 56012
     break;
    }
   }
   if (($82 | 0) == -1) {
    $$173 = 2; //@line 56018
    label = 49; //@line 56019
    break;
   }
   if ($82 >>> 0 > ($14 - (HEAP32[$7 >> 2] | 0) | 0) >>> 0) {
    $$173 = 1; //@line 56026
    label = 49; //@line 56027
    break;
   } else {
    $$0 = $9; //@line 56030
    $$069 = $82; //@line 56030
   }
   while (1) {
    if (!$$069) {
     break;
    }
    $105 = HEAP8[$$0 >> 0] | 0; //@line 56038
    $106 = HEAP32[$7 >> 2] | 0; //@line 56039
    HEAP32[$7 >> 2] = $106 + 1; //@line 56041
    HEAP8[$106 >> 0] = $105; //@line 56042
    $$0 = $$0 + 1 | 0; //@line 56044
    $$069 = $$069 + -1 | 0; //@line 56044
   }
   $103 = (HEAP32[$4 >> 2] | 0) + 4 | 0; //@line 56047
   HEAP32[$4 >> 2] = $103; //@line 56048
   $$2 = $103; //@line 56049
   while (1) {
    if (($$2 | 0) == ($3 | 0)) {
     $$2$lcssa = $3; //@line 56053
     break;
    }
    if (!(HEAP32[$$2 >> 2] | 0)) {
     $$2$lcssa = $$2; //@line 56059
     break;
    }
    $$2 = $$2 + 4 | 0; //@line 56063
   }
   $$5$ph87 = $$2$lcssa; //@line 56066
   $116 = HEAP32[$7 >> 2] | 0; //@line 56066
   $117 = $103; //@line 56066
  }
  $$077 = $117; //@line 56068
  $$079 = $116; //@line 56068
  $$171 = $$5$ph87; //@line 56068
 }
 do {
  if ((label | 0) == 10) {
   $42 = ___cxa_find_matching_catch_3(0) | 0; //@line 56072
   ___clang_call_terminate($42); //@line 56074
  } else if ((label | 0) == 11) {
   $44 = ___cxa_find_matching_catch_2() | 0; //@line 56078
   if ($35 | 0) {
    __THREW__ = 0; //@line 56082
    invoke_ii(147, $35 | 0) | 0; //@line 56083
    $47 = __THREW__; //@line 56084
    __THREW__ = 0; //@line 56084
    if ($47 & 1) {
     $49 = ___cxa_find_matching_catch_3(0) | 0; //@line 56087
     ___clang_call_terminate($49); //@line 56089
    }
   }
   ___resumeException($44 | 0); //@line 56093
  } else if ((label | 0) == 16) {
   HEAP32[$7 >> 2] = $$079; //@line 56097
   $$178 = $$077; //@line 56098
   $56 = $$079; //@line 56098
   while (1) {
    if (($$178 | 0) == (HEAP32[$4 >> 2] | 0)) {
     label = 28; //@line 56103
     break;
    }
    $53 = HEAP32[$$178 >> 2] | 0; //@line 56106
    $55 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0; //@line 56108
    __THREW__ = 0; //@line 56109
    $57 = invoke_iiii(47, $56 | 0, $53 | 0, $8 | 0) | 0; //@line 56110
    $58 = __THREW__; //@line 56111
    __THREW__ = 0; //@line 56111
    if ($58 & 1) {
     label = 22; //@line 56114
     break;
    }
    if ($55 | 0) {
     __THREW__ = 0; //@line 56119
     invoke_ii(147, $55 | 0) | 0; //@line 56120
     $61 = __THREW__; //@line 56121
     __THREW__ = 0; //@line 56121
     if ($61 & 1) {
      label = 21; //@line 56124
      break;
     }
    }
    if (($57 | 0) == -1) {
     label = 28; //@line 56130
     break;
    }
    $74 = (HEAP32[$7 >> 2] | 0) + $57 | 0; //@line 56134
    HEAP32[$7 >> 2] = $74; //@line 56135
    $$178 = $$178 + 4 | 0; //@line 56137
    $56 = $74; //@line 56137
   }
   if ((label | 0) == 21) {
    $63 = ___cxa_find_matching_catch_3(0) | 0; //@line 56140
    ___clang_call_terminate($63); //@line 56142
   } else if ((label | 0) == 22) {
    $65 = ___cxa_find_matching_catch_2() | 0; //@line 56146
    if ($55 | 0) {
     __THREW__ = 0; //@line 56150
     invoke_ii(147, $55 | 0) | 0; //@line 56151
     $68 = __THREW__; //@line 56152
     __THREW__ = 0; //@line 56152
     if ($68 & 1) {
      $70 = ___cxa_find_matching_catch_3(0) | 0; //@line 56155
      ___clang_call_terminate($70); //@line 56157
     }
    }
    ___resumeException($65 | 0); //@line 56161
   } else if ((label | 0) == 28) {
    HEAP32[$4 >> 2] = $$178; //@line 56165
    $$375$ph = 2; //@line 56166
    label = 50; //@line 56167
    break;
   }
  } else if ((label | 0) == 35) {
   $88 = ___cxa_find_matching_catch_3(0) | 0; //@line 56172
   ___clang_call_terminate($88); //@line 56174
  } else if ((label | 0) == 36) {
   $90 = ___cxa_find_matching_catch_2() | 0; //@line 56178
   if ($81 | 0) {
    __THREW__ = 0; //@line 56182
    invoke_ii(147, $81 | 0) | 0; //@line 56183
    $93 = __THREW__; //@line 56184
    __THREW__ = 0; //@line 56184
    if ($93 & 1) {
     $95 = ___cxa_find_matching_catch_3(0) | 0; //@line 56187
     ___clang_call_terminate($95); //@line 56189
    }
   }
   ___resumeException($90 | 0); //@line 56193
  } else if ((label | 0) == 49) {
   $$375$ph = $$173; //@line 56197
   label = 50; //@line 56198
  } else if ((label | 0) == 51) {
   $113 = HEAP32[$4 >> 2] | 0; //@line 56202
   label = 53; //@line 56203
  }
 } while (0);
 if ((label | 0) == 50) {
  $$476 = $$375$ph; //@line 56207
 } else if ((label | 0) == 53) {
  $$476 = ($113 | 0) != ($3 | 0) & 1; //@line 56212
 }
 STACKTOP = sp; //@line 56214
 return $$476 | 0; //@line 56214
}
function __ZeqRK13CharmFunctionS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02026$i3280 = 0, $$02026$i4192 = 0, $$02026$i86 = 0, $$02125$i3381 = 0, $$02125$i4293 = 0, $$02125$i87 = 0, $$027$i3179 = 0, $$027$i4091 = 0, $$027$i85 = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $13 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $139 = 0, $140 = 0, $142 = 0, $143 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $34 = 0, $37 = 0, $39 = 0, $45 = 0, $5 = 0, $52 = 0, $6 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $99 = 0, label = 0;
 $2 = HEAP32[$0 >> 2] | 0; //@line 7554
 if (($2 | 0) != (HEAP32[$1 >> 2] | 0)) {
  $37 = 0; //@line 7558
  return $37 | 0; //@line 7559
 }
 switch ($2 | 0) {
 case 1:
  {
   $5 = $0 + 40 | 0; //@line 7563
   $6 = $0 + 44 | 0; //@line 7564
   $7 = HEAP32[$6 >> 2] | 0; //@line 7565
   $8 = HEAP32[$5 >> 2] | 0; //@line 7566
   $10 = $1 + 40 | 0; //@line 7568
   $13 = HEAP32[$10 >> 2] | 0; //@line 7571
   if (($7 - $8 | 0) != ((HEAP32[$1 + 44 >> 2] | 0) - $13 | 0)) {
    $37 = 0; //@line 7576
    return $37 | 0; //@line 7577
   }
   if (($7 | 0) == ($8 | 0)) {
    $37 = 1; //@line 7581
    return $37 | 0; //@line 7582
   }
   if (__ZeqRK13CharmFunctionS1_($8, $13) | 0) {
    $24 = 0; //@line 7587
    $26 = 1; //@line 7587
   } else {
    $37 = 0; //@line 7589
    return $37 | 0; //@line 7590
   }
   while (1) {
    $21 = HEAP32[$5 >> 2] | 0; //@line 7594
    if (!($24 >>> 0 < 0 | (($24 | 0) == 0 ? $26 >>> 0 < (((HEAP32[$6 >> 2] | 0) - $21 | 0) / 72 | 0) >>> 0 : 0))) {
     $37 = 1; //@line 7603
     label = 8; //@line 7604
     break;
    }
    $34 = __ZeqRK13CharmFunctionS1_($21 + ($26 * 72 | 0) | 0, (HEAP32[$10 >> 2] | 0) + ($26 * 72 | 0) | 0) | 0; //@line 7611
    $26 = _i64Add($26 | 0, $24 | 0, 1, 0) | 0; //@line 7612
    if (!$34) {
     $37 = 0; //@line 7617
     label = 8; //@line 7618
     break;
    } else {
     $24 = tempRet0; //@line 7615
    }
   }
   if ((label | 0) == 8) {
    return $37 | 0; //@line 7623
   }
   break;
  }
 case 2:
  {
   $39 = HEAP32[$1 + 16 >> 2] | 0; //@line 7629
   if (($39 | 0) != (HEAP32[$0 + 16 >> 2] | 0)) {
    $37 = 0; //@line 7634
    return $37 | 0; //@line 7635
   }
   if (!$39) {
    $45 = $0 + 24 | 0; //@line 7640
    $52 = $1 + 24 | 0; //@line 7647
    $37 = (HEAP32[$45 >> 2] | 0) == (HEAP32[$52 >> 2] | 0) ? (HEAP32[$45 + 4 >> 2] | 0) == (HEAP32[$52 + 4 >> 2] | 0) : 0; //@line 7656
    return $37 | 0; //@line 7657
   } else {
    $37 = +HEAPF64[$0 + 32 >> 3] == +HEAPF64[$1 + 32 >> 3]; //@line 7664
    return $37 | 0; //@line 7665
   }
   break;
  }
 case 3:
  {
   $66 = $0 + 4 | 0; //@line 7670
   $67 = $1 + 4 | 0; //@line 7671
   $69 = HEAP8[$66 + 11 >> 0] | 0; //@line 7673
   $70 = $69 << 24 >> 24 < 0; //@line 7674
   $73 = $69 & 255; //@line 7677
   $74 = $70 ? HEAP32[$0 + 8 >> 2] | 0 : $73; //@line 7678
   $76 = HEAP8[$67 + 11 >> 0] | 0; //@line 7680
   $77 = $76 << 24 >> 24 < 0; //@line 7681
   if (($74 | 0) != (($77 ? HEAP32[$1 + 8 >> 2] | 0 : $76 & 255) | 0)) {
    $37 = 0; //@line 7688
    return $37 | 0; //@line 7689
   }
   $83 = HEAP32[$66 >> 2] | 0; //@line 7691
   $84 = $70 ? $83 : $66; //@line 7692
   $86 = $77 ? HEAP32[$67 >> 2] | 0 : $67; //@line 7694
   $87 = ($74 | 0) == 0; //@line 7695
   if ($70) {
    if ($87) {
     $37 = 1; //@line 7698
     return $37 | 0; //@line 7699
    }
    $37 = (_memcmp($84, $86, $74) | 0) == 0; //@line 7703
    return $37 | 0; //@line 7704
   }
   if ($87) {
    $37 = 1; //@line 7707
    return $37 | 0; //@line 7708
   }
   if ((HEAP8[$86 >> 0] | 0) == ($83 & 255) << 24 >> 24) {
    $$02026$i3280 = $66; //@line 7715
    $$02125$i3381 = $73; //@line 7715
    $$027$i3179 = $86; //@line 7715
   } else {
    $37 = 0; //@line 7717
    return $37 | 0; //@line 7718
   }
   while (1) {
    $$02125$i3381 = $$02125$i3381 + -1 | 0; //@line 7721
    $$02026$i3280 = $$02026$i3280 + 1 | 0; //@line 7722
    if (!$$02125$i3381) {
     $37 = 1; //@line 7725
     label = 8; //@line 7726
     break;
    }
    $$027$i3179 = $$027$i3179 + 1 | 0; //@line 7729
    if ((HEAP8[$$02026$i3280 >> 0] | 0) != (HEAP8[$$027$i3179 >> 0] | 0)) {
     $37 = 0; //@line 7736
     label = 8; //@line 7737
     break;
    }
   }
   if ((label | 0) == 8) {
    return $37 | 0; //@line 7742
   }
   break;
  }
 case 4:
  {
   $99 = $0 + 52 | 0; //@line 7747
   $100 = $1 + 52 | 0; //@line 7748
   $102 = HEAP8[$99 + 11 >> 0] | 0; //@line 7750
   $103 = $102 << 24 >> 24 < 0; //@line 7751
   $106 = $102 & 255; //@line 7754
   $107 = $103 ? HEAP32[$0 + 56 >> 2] | 0 : $106; //@line 7755
   $109 = HEAP8[$100 + 11 >> 0] | 0; //@line 7757
   $110 = $109 << 24 >> 24 < 0; //@line 7758
   if (($107 | 0) != (($110 ? HEAP32[$1 + 56 >> 2] | 0 : $109 & 255) | 0)) {
    $37 = 0; //@line 7765
    return $37 | 0; //@line 7766
   }
   $116 = HEAP32[$99 >> 2] | 0; //@line 7768
   $117 = $103 ? $116 : $99; //@line 7769
   $119 = $110 ? HEAP32[$100 >> 2] | 0 : $100; //@line 7771
   $120 = ($107 | 0) == 0; //@line 7772
   if ($103) {
    if ($120) {
     $37 = 1; //@line 7775
     return $37 | 0; //@line 7776
    }
    $37 = (_memcmp($117, $119, $107) | 0) == 0; //@line 7780
    return $37 | 0; //@line 7781
   }
   if ($120) {
    $37 = 1; //@line 7784
    return $37 | 0; //@line 7785
   }
   if ((HEAP8[$119 >> 0] | 0) == ($116 & 255) << 24 >> 24) {
    $$02026$i86 = $99; //@line 7792
    $$02125$i87 = $106; //@line 7792
    $$027$i85 = $119; //@line 7792
   } else {
    $37 = 0; //@line 7794
    return $37 | 0; //@line 7795
   }
   while (1) {
    $$02125$i87 = $$02125$i87 + -1 | 0; //@line 7798
    $$02026$i86 = $$02026$i86 + 1 | 0; //@line 7799
    if (!$$02125$i87) {
     $37 = 1; //@line 7802
     label = 8; //@line 7803
     break;
    }
    $$027$i85 = $$027$i85 + 1 | 0; //@line 7806
    if ((HEAP8[$$02026$i86 >> 0] | 0) != (HEAP8[$$027$i85 >> 0] | 0)) {
     $37 = 0; //@line 7813
     label = 8; //@line 7814
     break;
    }
   }
   if ((label | 0) == 8) {
    return $37 | 0; //@line 7819
   }
   break;
  }
 case 0:
  {
   $132 = $0 + 52 | 0; //@line 7824
   $133 = $1 + 52 | 0; //@line 7825
   $135 = HEAP8[$132 + 11 >> 0] | 0; //@line 7827
   $136 = $135 << 24 >> 24 < 0; //@line 7828
   $139 = $135 & 255; //@line 7831
   $140 = $136 ? HEAP32[$0 + 56 >> 2] | 0 : $139; //@line 7832
   $142 = HEAP8[$133 + 11 >> 0] | 0; //@line 7834
   $143 = $142 << 24 >> 24 < 0; //@line 7835
   if (($140 | 0) != (($143 ? HEAP32[$1 + 56 >> 2] | 0 : $142 & 255) | 0)) {
    $37 = 0; //@line 7842
    return $37 | 0; //@line 7843
   }
   $149 = HEAP32[$132 >> 2] | 0; //@line 7845
   $150 = $136 ? $149 : $132; //@line 7846
   $152 = $143 ? HEAP32[$133 >> 2] | 0 : $133; //@line 7848
   $153 = ($140 | 0) == 0; //@line 7849
   if ($136) {
    if ($153) {
     $37 = 1; //@line 7852
     return $37 | 0; //@line 7853
    }
    $37 = (_memcmp($150, $152, $140) | 0) == 0; //@line 7857
    return $37 | 0; //@line 7858
   }
   if ($153) {
    $37 = 1; //@line 7861
    return $37 | 0; //@line 7862
   }
   if ((HEAP8[$152 >> 0] | 0) == ($149 & 255) << 24 >> 24) {
    $$02026$i4192 = $132; //@line 7869
    $$02125$i4293 = $139; //@line 7869
    $$027$i4091 = $152; //@line 7869
   } else {
    $37 = 0; //@line 7871
    return $37 | 0; //@line 7872
   }
   while (1) {
    $$02125$i4293 = $$02125$i4293 + -1 | 0; //@line 7875
    $$02026$i4192 = $$02026$i4192 + 1 | 0; //@line 7876
    if (!$$02125$i4293) {
     $37 = 1; //@line 7879
     label = 8; //@line 7880
     break;
    }
    $$027$i4091 = $$027$i4091 + 1 | 0; //@line 7883
    if ((HEAP8[$$02026$i4192 >> 0] | 0) != (HEAP8[$$027$i4091 >> 0] | 0)) {
     $37 = 0; //@line 7890
     label = 8; //@line 7891
     break;
    }
   }
   if ((label | 0) == 8) {
    return $37 | 0; //@line 7896
   }
   break;
  }
 default:
  {
   $37 = 0; //@line 7901
   return $37 | 0; //@line 7902
  }
 }
 return 0; //@line 7905
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa$i$i$i$i = 0, $$02026$i$i4$i = 0, $$02026$i$i4$i$us = 0, $$02125$i$i5$i = 0, $$02125$i$i5$i$us = 0, $$027$i$i3$i = 0, $$027$i$i3$i$us = 0, $$02836 = 0, $$02837 = 0, $$02837$us = 0, $$036$lcssa$i$i$i$i = 0, $$03639$i$i$i$i = 0, $$037$lcssa$i$i$i$i = 0, $$03738$i$i$i$i = 0, $$040$i$i$i$i = 0, $$1$i$i$i$i = 0, $$2$i$i$i$i = 0, $$3$i$i$i$i = 0, $$sroa$0$0 = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $12 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $93 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0; //@line 23799
 $4 = $3 << 24 >> 24 < 0; //@line 23800
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1; //@line 23805
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255; //@line 23806
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i = $9; //@line 23809
  $$03738$i$i$i$i = $10; //@line 23809
  $$040$i$i$i$i = $10; //@line 23809
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 23812
   $$03738$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i, 1540483477) | 0); //@line 23817
   $$040$i$i$i$i = $$040$i$i$i$i + -4 | 0; //@line 23819
   if ($$040$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i = $$03639$i$i$i$i + 4 | 0; //@line 23822
   }
  }
  $21 = $10 + -4 | 0; //@line 23827
  $22 = $21 & -4; //@line 23828
  $$0$lcssa$i$i$i$i = $21 - $22 | 0; //@line 23832
  $$036$lcssa$i$i$i$i = $9 + ($22 + 4) | 0; //@line 23832
  $$037$lcssa$i$i$i$i = $$03738$i$i$i$i; //@line 23832
 } else {
  $$0$lcssa$i$i$i$i = $10; //@line 23834
  $$036$lcssa$i$i$i$i = $9; //@line 23834
  $$037$lcssa$i$i$i$i = $10; //@line 23834
 }
 switch ($$0$lcssa$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i; //@line 23843
   label = 6; //@line 23844
   break;
  }
 case 2:
  {
   $$1$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 23848
   label = 6; //@line 23849
   break;
  }
 case 1:
  {
   $$2$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 23853
   label = 7; //@line 23854
   break;
  }
 default:
  {
   $$3$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 23858
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i; //@line 23867
  label = 7; //@line 23868
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i = Math_imul($$2$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i >> 0], 1540483477) | 0; //@line 23875
 }
 $41 = Math_imul($$3$i$i$i$i >>> 13 ^ $$3$i$i$i$i, 1540483477) | 0; //@line 23879
 $43 = $41 >>> 15 ^ $41; //@line 23881
 $45 = HEAP32[$0 + 4 >> 2] | 0; //@line 23883
 if (!$45) {
  $$sroa$0$0 = 0; //@line 23886
  return $$sroa$0$0 | 0; //@line 23887
 }
 $47 = $45 + -1 | 0; //@line 23889
 $49 = ($47 & $45 | 0) == 0; //@line 23891
 if ($49) {
  $55 = $43 & $47; //@line 23894
 } else {
  if ($43 >>> 0 < $45 >>> 0) {
   $55 = $43; //@line 23898
  } else {
   $55 = ($43 >>> 0) % ($45 >>> 0) | 0; //@line 23901
  }
 }
 $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0; //@line 23906
 if (!$56) {
  $$sroa$0$0 = 0; //@line 23909
  return $$sroa$0$0 | 0; //@line 23910
 }
 $$02836 = HEAP32[$56 >> 2] | 0; //@line 23912
 if (!$$02836) {
  $$sroa$0$0 = 0; //@line 23915
  return $$sroa$0$0 | 0; //@line 23916
 }
 $59 = ($10 | 0) == 0; //@line 23918
 if ($49) {
  $$02837$us = $$02836; //@line 23920
  L28 : while (1) {
   $61 = HEAP32[$$02837$us + 4 >> 2] | 0; //@line 23923
   $62 = ($61 | 0) == ($43 | 0); //@line 23924
   if (!($62 | ($61 & $47 | 0) == ($55 | 0))) {
    $$sroa$0$0 = 0; //@line 23929
    label = 40; //@line 23930
    break;
   }
   do {
    if ($62) {
     $65 = $$02837$us + 8 | 0; //@line 23935
     $67 = HEAP8[$65 + 11 >> 0] | 0; //@line 23937
     $68 = $67 << 24 >> 24 < 0; //@line 23938
     $71 = $67 & 255; //@line 23941
     if ((($68 ? HEAP32[$$02837$us + 12 >> 2] | 0 : $71) | 0) == ($10 | 0)) {
      $74 = HEAP32[$65 >> 2] | 0; //@line 23945
      $75 = $68 ? $74 : $65; //@line 23946
      if ($68) {
       if ($59) {
        $$sroa$0$0 = $$02837$us; //@line 23949
        label = 40; //@line 23950
        break L28;
       }
       if (!(_memcmp($75, $9, $10) | 0)) {
        $$sroa$0$0 = $$02837$us; //@line 23956
        label = 40; //@line 23957
        break L28;
       } else {
        break;
       }
      }
      if ($59) {
       $$sroa$0$0 = $$02837$us; //@line 23964
       label = 40; //@line 23965
       break L28;
      }
      if ((HEAP8[$9 >> 0] | 0) == ($74 & 255) << 24 >> 24) {
       $$02026$i$i4$i$us = $65; //@line 23973
       $$02125$i$i5$i$us = $71; //@line 23973
       $$027$i$i3$i$us = $9; //@line 23973
       do {
        $$02125$i$i5$i$us = $$02125$i$i5$i$us + -1 | 0; //@line 23975
        $$02026$i$i4$i$us = $$02026$i$i4$i$us + 1 | 0; //@line 23976
        if (!$$02125$i$i5$i$us) {
         $$sroa$0$0 = $$02837$us; //@line 23979
         label = 40; //@line 23980
         break L28;
        }
        $$027$i$i3$i$us = $$027$i$i3$i$us + 1 | 0; //@line 23983
       } while ((HEAP8[$$02026$i$i4$i$us >> 0] | 0) == (HEAP8[$$027$i$i3$i$us >> 0] | 0));
      }
     }
    }
   } while (0);
   $$02837$us = HEAP32[$$02837$us >> 2] | 0; //@line 23997
   if (!$$02837$us) {
    $$sroa$0$0 = 0; //@line 24000
    label = 40; //@line 24001
    break;
   }
  }
  if ((label | 0) == 40) {
   return $$sroa$0$0 | 0; //@line 24008
  }
 } else {
  $$02837 = $$02836; //@line 24011
 }
 L50 : while (1) {
  $89 = HEAP32[$$02837 + 4 >> 2] | 0; //@line 24015
  do {
   if (($89 | 0) == ($43 | 0)) {
    $96 = $$02837 + 8 | 0; //@line 24019
    $98 = HEAP8[$96 + 11 >> 0] | 0; //@line 24021
    $99 = $98 << 24 >> 24 < 0; //@line 24022
    $102 = $98 & 255; //@line 24025
    if ((($99 ? HEAP32[$$02837 + 12 >> 2] | 0 : $102) | 0) == ($10 | 0)) {
     $105 = HEAP32[$96 >> 2] | 0; //@line 24029
     $106 = $99 ? $105 : $96; //@line 24030
     if ($99) {
      if ($59) {
       $$sroa$0$0 = $$02837; //@line 24033
       label = 40; //@line 24034
       break L50;
      }
      if (!(_memcmp($106, $9, $10) | 0)) {
       $$sroa$0$0 = $$02837; //@line 24040
       label = 40; //@line 24041
       break L50;
      } else {
       break;
      }
     }
     if ($59) {
      $$sroa$0$0 = $$02837; //@line 24048
      label = 40; //@line 24049
      break L50;
     }
     if ((HEAP8[$9 >> 0] | 0) == ($105 & 255) << 24 >> 24) {
      $$02026$i$i4$i = $96; //@line 24057
      $$02125$i$i5$i = $102; //@line 24057
      $$027$i$i3$i = $9; //@line 24057
      do {
       $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 24059
       $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 24060
       if (!$$02125$i$i5$i) {
        $$sroa$0$0 = $$02837; //@line 24063
        label = 40; //@line 24064
        break L50;
       }
       $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 24067
      } while ((HEAP8[$$02026$i$i4$i >> 0] | 0) == (HEAP8[$$027$i$i3$i >> 0] | 0));
     }
    }
   } else {
    if ($89 >>> 0 < $45 >>> 0) {
     $93 = $89; //@line 24082
    } else {
     $93 = ($89 >>> 0) % ($45 >>> 0) | 0; //@line 24085
    }
    if (($93 | 0) != ($55 | 0)) {
     $$sroa$0$0 = 0; //@line 24089
     label = 40; //@line 24090
     break L50;
    }
   }
  } while (0);
  $$02837 = HEAP32[$$02837 >> 2] | 0; //@line 24095
  if (!$$02837) {
   $$sroa$0$0 = 0; //@line 24098
   label = 40; //@line 24099
   break;
  }
 }
 if ((label | 0) == 40) {
  return $$sroa$0$0 | 0; //@line 24106
 }
 return 0; //@line 24108
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$4$ph = 0, $$pre = 0, $$sink = 0, $102 = 0, $107 = 0, $110 = 0, $111 = 0, $13 = 0, $14 = 0, $17 = 0, $22 = 0, $23 = 0, $27 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $43 = 0, $46 = 0, $48 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $65 = 0, $68 = 0, $70 = 0, $78 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $87 = 0, $89 = 0, $91 = 0, $94 = 0, $96 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 56232
 STACKTOP = STACKTOP + 16 | 0; //@line 56233
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 56233
 $8 = sp; //@line 56234
 $$070 = $2; //@line 56235
 while (1) {
  if (($$070 | 0) == ($3 | 0)) {
   $$070$lcssa = $3; //@line 56239
   break;
  }
  if (!(HEAP8[$$070 >> 0] | 0)) {
   $$070$lcssa = $$070; //@line 56245
   break;
  }
  $$070 = $$070 + 1 | 0; //@line 56249
 }
 HEAP32[$7 >> 2] = $5; //@line 56251
 HEAP32[$4 >> 2] = $2; //@line 56252
 $13 = $6; //@line 56253
 $14 = $0 + 8 | 0; //@line 56254
 $$074 = $2; //@line 56255
 $$077 = $5; //@line 56255
 $$1 = $$070$lcssa; //@line 56255
 while (1) {
  if (($$077 | 0) == ($6 | 0) | ($$074 | 0) == ($3 | 0)) {
   $107 = $$074; //@line 56261
   label = 50; //@line 56262
   break;
  }
  $17 = $1; //@line 56265
  $22 = HEAP32[$17 + 4 >> 2] | 0; //@line 56270
  $23 = $8; //@line 56271
  HEAP32[$23 >> 2] = HEAP32[$17 >> 2]; //@line 56273
  HEAP32[$23 + 4 >> 2] = $22; //@line 56276
  $27 = $$1; //@line 56277
  $34 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0; //@line 56284
  __THREW__ = 0; //@line 56285
  $35 = invoke_iiiiii(23, $$077 | 0, $4 | 0, $27 - $$074 | 0, $13 - $$077 >> 2 | 0, $1 | 0) | 0; //@line 56286
  $36 = __THREW__; //@line 56287
  __THREW__ = 0; //@line 56287
  if ($36 & 1) {
   label = 11; //@line 56290
   break;
  }
  if ($34 | 0) {
   __THREW__ = 0; //@line 56295
   invoke_ii(147, $34 | 0) | 0; //@line 56296
   $39 = __THREW__; //@line 56297
   __THREW__ = 0; //@line 56297
   if ($39 & 1) {
    label = 10; //@line 56300
    break;
   }
  }
  if (($35 | 0) == -1) {
   $$175 = $$074; //@line 56306
   $storemerge = $$077; //@line 56306
   label = 16; //@line 56307
   break;
  }
  $78 = (HEAP32[$7 >> 2] | 0) + ($35 << 2) | 0; //@line 56311
  HEAP32[$7 >> 2] = $78; //@line 56312
  if (($78 | 0) == ($6 | 0)) {
   label = 47; //@line 56315
   break;
  }
  $$pre = HEAP32[$4 >> 2] | 0; //@line 56319
  if (($$1 | 0) == ($3 | 0)) {
   $$4$ph = $3; //@line 56321
   $110 = $78; //@line 56321
   $111 = $$pre; //@line 56321
  } else {
   $82 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0; //@line 56324
   __THREW__ = 0; //@line 56325
   $83 = invoke_iiiii(18, $78 | 0, $$pre | 0, 1, $1 | 0) | 0; //@line 56326
   $84 = __THREW__; //@line 56327
   __THREW__ = 0; //@line 56327
   if ($84 & 1) {
    label = 37; //@line 56330
    break;
   }
   if ($82 | 0) {
    __THREW__ = 0; //@line 56335
    invoke_ii(147, $82 | 0) | 0; //@line 56336
    $87 = __THREW__; //@line 56337
    __THREW__ = 0; //@line 56337
    if ($87 & 1) {
     label = 36; //@line 56340
     break;
    }
   }
   if ($83 | 0) {
    $$172$ph = 2; //@line 56346
    label = 46; //@line 56347
    break;
   }
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 4; //@line 56352
   $102 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 56354
   HEAP32[$4 >> 2] = $102; //@line 56355
   $$2 = $102; //@line 56356
   while (1) {
    if (($$2 | 0) == ($3 | 0)) {
     $$2$lcssa = $3; //@line 56360
     break;
    }
    if (!(HEAP8[$$2 >> 0] | 0)) {
     $$2$lcssa = $$2; //@line 56366
     break;
    }
    $$2 = $$2 + 1 | 0; //@line 56370
   }
   $$4$ph = $$2$lcssa; //@line 56373
   $110 = HEAP32[$7 >> 2] | 0; //@line 56373
   $111 = $102; //@line 56373
  }
  $$074 = $111; //@line 56375
  $$077 = $110; //@line 56375
  $$1 = $$4$ph; //@line 56375
 }
 do {
  if ((label | 0) == 10) {
   $41 = ___cxa_find_matching_catch_3(0) | 0; //@line 56379
   ___clang_call_terminate($41); //@line 56381
  } else if ((label | 0) == 11) {
   $43 = ___cxa_find_matching_catch_2() | 0; //@line 56385
   if ($34 | 0) {
    __THREW__ = 0; //@line 56389
    invoke_ii(147, $34 | 0) | 0; //@line 56390
    $46 = __THREW__; //@line 56391
    __THREW__ = 0; //@line 56391
    if ($46 & 1) {
     $48 = ___cxa_find_matching_catch_3(0) | 0; //@line 56394
     ___clang_call_terminate($48); //@line 56396
    }
   }
   ___resumeException($43 | 0); //@line 56400
  } else if ((label | 0) == 16) {
   L30 : while (1) {
    label = 0; //@line 56405
    HEAP32[$7 >> 2] = $storemerge; //@line 56406
    if (($$175 | 0) == (HEAP32[$4 >> 2] | 0)) {
     label = 30; //@line 56410
     break;
    }
    $56 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0; //@line 56416
    __THREW__ = 0; //@line 56417
    $57 = invoke_iiiii(18, $storemerge | 0, $$175 | 0, $27 - $$175 | 0, $8 | 0) | 0; //@line 56418
    $58 = __THREW__; //@line 56419
    __THREW__ = 0; //@line 56419
    if ($58 & 1) {
     label = 21; //@line 56422
     break;
    }
    if ($56 | 0) {
     __THREW__ = 0; //@line 56427
     invoke_ii(147, $56 | 0) | 0; //@line 56428
     $61 = __THREW__; //@line 56429
     __THREW__ = 0; //@line 56429
     if ($61 & 1) {
      label = 20; //@line 56432
      break;
     }
    }
    switch ($57 | 0) {
    case -1:
     {
      label = 27; //@line 56438
      break L30;
      break;
     }
    case -2:
     {
      label = 28; //@line 56443
      break L30;
      break;
     }
    case 0:
     {
      $$sink = 1; //@line 56448
      break;
     }
    default:
     {
      $$sink = $57; //@line 56452
     }
    }
    $$175 = $$175 + $$sink | 0; //@line 56458
    $storemerge = (HEAP32[$7 >> 2] | 0) + 4 | 0; //@line 56458
    label = 16; //@line 56459
   }
   if ((label | 0) == 20) {
    $63 = ___cxa_find_matching_catch_3(0) | 0; //@line 56462
    ___clang_call_terminate($63); //@line 56464
   } else if ((label | 0) == 21) {
    $65 = ___cxa_find_matching_catch_2() | 0; //@line 56468
    if ($56 | 0) {
     __THREW__ = 0; //@line 56472
     invoke_ii(147, $56 | 0) | 0; //@line 56473
     $68 = __THREW__; //@line 56474
     __THREW__ = 0; //@line 56474
     if ($68 & 1) {
      $70 = ___cxa_find_matching_catch_3(0) | 0; //@line 56477
      ___clang_call_terminate($70); //@line 56479
     }
    }
    ___resumeException($65 | 0); //@line 56483
   } else if ((label | 0) == 27) {
    HEAP32[$4 >> 2] = $$175; //@line 56487
    $$172$ph = 2; //@line 56488
    label = 46; //@line 56489
    break;
   } else if ((label | 0) == 28) {
    HEAP32[$4 >> 2] = $$175; //@line 56493
    $$172$ph = 1; //@line 56494
    label = 46; //@line 56495
    break;
   } else if ((label | 0) == 30) {
    HEAP32[$4 >> 2] = $$175; //@line 56499
    $$172$ph = ($$175 | 0) != ($3 | 0) & 1; //@line 56502
    label = 46; //@line 56503
    break;
   }
  } else if ((label | 0) == 36) {
   $89 = ___cxa_find_matching_catch_3(0) | 0; //@line 56508
   ___clang_call_terminate($89); //@line 56510
  } else if ((label | 0) == 37) {
   $91 = ___cxa_find_matching_catch_2() | 0; //@line 56514
   if ($82 | 0) {
    __THREW__ = 0; //@line 56518
    invoke_ii(147, $82 | 0) | 0; //@line 56519
    $94 = __THREW__; //@line 56520
    __THREW__ = 0; //@line 56520
    if ($94 & 1) {
     $96 = ___cxa_find_matching_catch_3(0) | 0; //@line 56523
     ___clang_call_terminate($96); //@line 56525
    }
   }
   ___resumeException($91 | 0); //@line 56529
  } else if ((label | 0) == 47) {
   $107 = HEAP32[$4 >> 2] | 0; //@line 56534
   label = 50; //@line 56535
  }
 } while (0);
 if ((label | 0) == 46) {
  $$273 = $$172$ph; //@line 56539
 } else if ((label | 0) == 50) {
  $$273 = ($107 | 0) != ($3 | 0) & 1; //@line 56544
 }
 STACKTOP = sp; //@line 56546
 return $$273 | 0; //@line 56546
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $122 = 0, $124 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $98 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13195
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13195
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13196
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 13197
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13197
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13198
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 13199
 $8 = $6 & 2047; //@line 13201
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 13202
 $11 = $9 & 2047; //@line 13204
 $12 = $3 & -2147483648; //@line 13205
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 13206
 $14 = tempRet0; //@line 13207
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 13213
  } else {
   $18 = ___DOUBLE_BITS_481($1) | 0; //@line 13215
   $20 = tempRet0 & 2147483647; //@line 13217
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 13226
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 13228
    $30 = tempRet0; //@line 13229
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 13245
     $42 = tempRet0; //@line 13246
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 13253
      $49 = $41; //@line 13253
      $50 = $42; //@line 13253
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 13255
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 13256
       $50 = tempRet0; //@line 13257
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 13266
        break;
       } else {
        $$073100 = $48; //@line 13264
       }
      }
     } else {
      $$073$lcssa = 0; //@line 13271
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 13274
     $$174 = $$073$lcssa; //@line 13276
     $87 = $59; //@line 13276
     $88 = tempRet0; //@line 13276
    } else {
     $$174 = $8; //@line 13280
     $87 = $2; //@line 13280
     $88 = $3 & 1048575 | 1048576; //@line 13280
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 13284
     $65 = tempRet0; //@line 13285
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 13292
      $72 = $64; //@line 13292
      $73 = $65; //@line 13292
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 13294
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 13295
       $73 = tempRet0; //@line 13296
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 13305
        break;
       } else {
        $$07194 = $71; //@line 13303
       }
      }
     } else {
      $$071$lcssa = 0; //@line 13310
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 13313
     $$172$ph = $$071$lcssa; //@line 13315
     $89 = $82; //@line 13315
     $90 = tempRet0; //@line 13315
    } else {
     $$172$ph = $11; //@line 13319
     $89 = $4; //@line 13319
     $90 = $5 & 1048575 | 1048576; //@line 13319
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 13322
    $92 = tempRet0; //@line 13323
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 13328
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 13331
      $100 = $92; //@line 13331
      $156 = $97; //@line 13331
      $157 = $87; //@line 13331
      $158 = $88; //@line 13331
      $98 = $91; //@line 13331
      while (1) {
       if ($156) {
        if (($98 | 0) == 0 & ($100 | 0) == 0) {
         break;
        } else {
         $104 = $98; //@line 13340
         $105 = $100; //@line 13340
        }
       } else {
        $104 = $157; //@line 13343
        $105 = $158; //@line 13343
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 13345
       $107 = tempRet0; //@line 13346
       $108 = $$27586 + -1 | 0; //@line 13347
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 13349
       $111 = tempRet0; //@line 13350
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 13355
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 13357
        $100 = $111; //@line 13357
        $156 = $116; //@line 13357
        $157 = $106; //@line 13357
        $158 = $107; //@line 13357
        $98 = $110; //@line 13357
       } else {
        $$275$lcssa = $108; //@line 13359
        $$lcssa = $116; //@line 13359
        $117 = $110; //@line 13359
        $119 = $111; //@line 13359
        $159 = $106; //@line 13359
        $160 = $107; //@line 13359
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 13364
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 13367
      $$lcssa = $97; //@line 13367
      $117 = $91; //@line 13367
      $119 = $92; //@line 13367
      $159 = $87; //@line 13367
      $160 = $88; //@line 13367
     }
    } while (0);
    if ($$lcssa) {
     if (($117 | 0) == 0 & ($119 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 13376
      break;
     } else {
      $122 = $119; //@line 13379
      $124 = $117; //@line 13379
     }
    } else {
     $122 = $160; //@line 13382
     $124 = $159; //@line 13382
    }
    if ($122 >>> 0 < 1048576 | ($122 | 0) == 1048576 & $124 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 13390
     $130 = $124; //@line 13390
     $131 = $122; //@line 13390
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 13392
      $133 = tempRet0; //@line 13393
      $134 = $$37683 + -1 | 0; //@line 13394
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 13401
       $130 = $132; //@line 13401
       $131 = $133; //@line 13401
      } else {
       $$376$lcssa = $134; //@line 13403
       $141 = $132; //@line 13403
       $142 = $133; //@line 13403
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 13408
     $141 = $124; //@line 13408
     $142 = $122; //@line 13408
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 13412
     $144 = tempRet0; //@line 13413
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 13414
     $153 = $144 | tempRet0; //@line 13418
     $155 = $143 | $145; //@line 13418
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 13421
     $153 = tempRet0; //@line 13423
     $155 = $150; //@line 13423
    }
    HEAP32[tempDoublePtr >> 2] = $155; //@line 13426
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 13426
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 13427
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 13432
  $$070 = $27 / $27; //@line 13434
 }
 return +$$070;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i37 = 0, $$0$i$i39 = 0, $$032 = 0, $$033 = 0, $$1 = 0, $$134 = 0, $$3 = 0, $$336 = 0, $$byval_copy = 0, $$sink1 = 0, $$sink62 = 0, $$sink63 = 0, $$sroa$052$0 = 0, $$sroa$052$1 = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $11 = 0, $110 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $32 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $77 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $95 = 0, $96 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 53537
 STACKTOP = STACKTOP + 480 | 0; //@line 53538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480); //@line 53538
 $$byval_copy = sp + 468 | 0; //@line 53539
 $6 = sp + 464 | 0; //@line 53540
 $7 = sp + 472 | 0; //@line 53541
 $8 = sp + 460 | 0; //@line 53542
 $9 = sp + 456 | 0; //@line 53543
 $10 = sp + 444 | 0; //@line 53544
 $11 = sp + 432 | 0; //@line 53545
 $12 = sp + 420 | 0; //@line 53546
 $13 = sp + 416 | 0; //@line 53547
 $14 = sp + 16 | 0; //@line 53548
 $15 = sp + 8 | 0; //@line 53549
 $16 = sp + 4 | 0; //@line 53550
 $17 = sp; //@line 53551
 __ZNKSt3__28ios_base6getlocEv($6, $3); //@line 53552
 __THREW__ = 0; //@line 53553
 $18 = invoke_iii(63, $6 | 0, 35544) | 0; //@line 53554
 $19 = __THREW__; //@line 53555
 __THREW__ = 0; //@line 53555
 L1 : do {
  if ($19 & 1) {
   $101 = ___cxa_find_matching_catch_2() | 0; //@line 53559
   $$3 = $101; //@line 53561
   $$336 = tempRet0; //@line 53561
  } else {
   $22 = $5 + 8 + 3 | 0; //@line 53564
   $23 = HEAP8[$22 >> 0] | 0; //@line 53565
   $24 = $23 << 24 >> 24 < 0; //@line 53566
   $25 = $5 + 4 | 0; //@line 53567
   do {
    if (!(($24 ? HEAP32[$25 >> 2] | 0 : $23 & 255) | 0)) {
     $46 = 0; //@line 53574
    } else {
     $32 = HEAP32[($24 ? HEAP32[$5 >> 2] | 0 : $5) >> 2] | 0; //@line 53578
     __THREW__ = 0; //@line 53582
     $36 = invoke_iii(HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0, $18 | 0, 45) | 0; //@line 53583
     $37 = __THREW__; //@line 53584
     __THREW__ = 0; //@line 53584
     if ($37 & 1) {
      $103 = ___cxa_find_matching_catch_2() | 0; //@line 53587
      $$3 = $103; //@line 53589
      $$336 = tempRet0; //@line 53589
      break L1;
     } else {
      $46 = ($32 | 0) == ($36 | 0); //@line 53593
      break;
     }
    }
   } while (0);
   HEAP32[$10 >> 2] = 0; //@line 53598
   HEAP32[$10 + 4 >> 2] = 0; //@line 53598
   HEAP32[$10 + 8 >> 2] = 0; //@line 53598
   $$0$i$i = 0; //@line 53599
   while (1) {
    if (($$0$i$i | 0) == 3) {
     break;
    }
    HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0; //@line 53606
    $$0$i$i = $$0$i$i + 1 | 0; //@line 53608
   }
   HEAP32[$11 >> 2] = 0; //@line 53610
   HEAP32[$11 + 4 >> 2] = 0; //@line 53610
   HEAP32[$11 + 8 >> 2] = 0; //@line 53610
   $$0$i$i37 = 0; //@line 53611
   while (1) {
    if (($$0$i$i37 | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i37 << 2) >> 2] = 0; //@line 53618
    $$0$i$i37 = $$0$i$i37 + 1 | 0; //@line 53620
   }
   HEAP32[$12 >> 2] = 0; //@line 53622
   HEAP32[$12 + 4 >> 2] = 0; //@line 53622
   HEAP32[$12 + 8 >> 2] = 0; //@line 53622
   $$0$i$i39 = 0; //@line 53623
   while (1) {
    if (($$0$i$i39 | 0) == 3) {
     break;
    }
    HEAP32[$12 + ($$0$i$i39 << 2) >> 2] = 0; //@line 53630
    $$0$i$i39 = $$0$i$i39 + 1 | 0; //@line 53632
   }
   __THREW__ = 0; //@line 53634
   invoke_viiiiiiiiii(4, $2 | 0, $46 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, $13 | 0); //@line 53635
   $47 = __THREW__; //@line 53636
   __THREW__ = 0; //@line 53636
   if ($47 & 1) {
    $105 = ___cxa_find_matching_catch_2() | 0; //@line 53639
    $$1 = $105; //@line 53641
    $$134 = tempRet0; //@line 53641
   } else {
    $49 = HEAP8[$22 >> 0] | 0; //@line 53643
    $50 = $49 << 24 >> 24 < 0; //@line 53644
    $53 = $50 ? HEAP32[$25 >> 2] | 0 : $49 & 255; //@line 53647
    $54 = HEAP32[$13 >> 2] | 0; //@line 53648
    if (($53 | 0) > ($54 | 0)) {
     $60 = HEAP8[$12 + 8 + 3 >> 0] | 0; //@line 53655
     $69 = HEAP8[$11 + 8 + 3 >> 0] | 0; //@line 53664
     $$sink1 = 1; //@line 53670
     $$sink62 = ($60 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $60 & 255) + ($53 - $54 << 1) | 0; //@line 53670
     $$sink63 = $69 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $69 & 255; //@line 53670
    } else {
     $77 = HEAP8[$12 + 8 + 3 >> 0] | 0; //@line 53674
     $85 = HEAP8[$11 + 8 + 3 >> 0] | 0; //@line 53682
     $$sink1 = 2; //@line 53688
     $$sink62 = $85 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $85 & 255; //@line 53688
     $$sink63 = $77 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $77 & 255; //@line 53688
    }
    $92 = $$sink63 + $54 + $$sink62 + $$sink1 | 0; //@line 53692
    if ($92 >>> 0 > 100) {
     $95 = _malloc($92 << 2) | 0; //@line 53696
     $96 = $95; //@line 53697
     if (!$95) {
      __THREW__ = 0; //@line 53700
      invoke_v(4); //@line 53701
      __THREW__ = 0; //@line 53702
      $99 = ___cxa_find_matching_catch_2() | 0; //@line 53703
      $$0 = $99; //@line 53705
      $$033 = tempRet0; //@line 53705
      $$sroa$052$1 = $96; //@line 53705
     } else {
      $$032 = $95; //@line 53707
      $$sroa$052$0 = $96; //@line 53707
      label = 24; //@line 53708
     }
    } else {
     $$032 = $14; //@line 53711
     $$sroa$052$0 = 0; //@line 53711
     label = 24; //@line 53712
    }
    if ((label | 0) == 24) {
     $110 = $50 ? HEAP32[$5 >> 2] | 0 : $5; //@line 53718
     __THREW__ = 0; //@line 53722
     invoke_viiiiiiiiiiiiiii(2, $$032 | 0, $15 | 0, $16 | 0, HEAP32[$3 + 4 >> 2] | 0, $110 | 0, $110 + ($53 << 2) | 0, $18 | 0, $46 | 0, $7 | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, $10 | 0, $11 | 0, $12 | 0, $54 | 0); //@line 53723
     $114 = __THREW__; //@line 53724
     __THREW__ = 0; //@line 53724
     if (!($114 & 1)) {
      HEAP32[$17 >> 2] = HEAP32[$1 >> 2]; //@line 53728
      $117 = HEAP32[$15 >> 2] | 0; //@line 53729
      $118 = HEAP32[$16 >> 2] | 0; //@line 53730
      __THREW__ = 0; //@line 53731
      HEAP32[$$byval_copy >> 2] = HEAP32[$17 >> 2]; //@line 53732
      $119 = invoke_iiiiiii(40, $$byval_copy | 0, $$032 | 0, $117 | 0, $118 | 0, $3 | 0, $4 | 0) | 0; //@line 53733
      $120 = __THREW__; //@line 53734
      __THREW__ = 0; //@line 53734
      if (!($120 & 1)) {
       if ($$sroa$052$0 | 0) {
        _free($$sroa$052$0); //@line 53740
       }
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12); //@line 53742
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 53743
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 53744
       __ZNSt3__26localeD2Ev($6); //@line 53745
       STACKTOP = sp; //@line 53746
       return $119 | 0; //@line 53746
      }
     }
     $124 = ___cxa_find_matching_catch_2() | 0; //@line 53749
     $$0 = $124; //@line 53751
     $$033 = tempRet0; //@line 53751
     $$sroa$052$1 = $$sroa$052$0; //@line 53751
    }
    if ($$sroa$052$1 | 0) {
     _free($$sroa$052$1); //@line 53756
    }
    $$1 = $$0; //@line 53758
    $$134 = $$033; //@line 53758
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12); //@line 53760
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11); //@line 53761
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 53762
   $$3 = $$1; //@line 53763
   $$336 = $$134; //@line 53763
  }
 } while (0);
 __ZNSt3__26localeD2Ev($6); //@line 53766
 ___resumeException($$3 | 0); //@line 53767
 return 0; //@line 53769
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02026$i$i4$i = 0, $$02125$i$i5$i = 0, $$027$i$i3$i = 0, $$054$ph$ph103 = 0, $$055 = 0, $$055$in95104 = 0, $$055$in98 = 0, $$0559296101 = 0, $$0559296105 = 0, $$0559299 = 0, $$05593 = 0, $$056$ph$ph102 = 0, $$056$ph97 = 0, $$058106 = 0, $$066 = 0, $$072 = 0, $$072$phi = 0, $$072$us = 0, $$072$us$phi = 0, $$072$us77 = 0, $$072$us77$phi = 0, $106 = 0, $11 = 0, $117 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $30 = 0, $34 = 0, $38 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $69 = 0, $72 = 0, $74 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $96 = 0, label = 0;
 $2 = $0 + 4 | 0; //@line 22464
 if (!$1) {
  $117 = HEAP32[$0 >> 2] | 0; //@line 22467
  HEAP32[$0 >> 2] = 0; //@line 22468
  if ($117 | 0) {
   __ZdlPv($117); //@line 22471
  }
  HEAP32[$2 >> 2] = 0; //@line 22473
  return;
 }
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0; //@line 22478
  __THREW__ = 0; //@line 22479
  invoke_vii(119, $5 | 0, 31992); //@line 22480
  $6 = __THREW__; //@line 22481
  __THREW__ = 0; //@line 22481
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0; //@line 22484
   ___cxa_free_exception($5 | 0); //@line 22486
   ___resumeException($8 | 0); //@line 22487
  } else {
   HEAP32[$5 >> 2] = 13224; //@line 22490
   ___cxa_throw($5 | 0, 2856, 240); //@line 22491
  }
 }
 $11 = __Znwj($1 << 2) | 0; //@line 22496
 $12 = HEAP32[$0 >> 2] | 0; //@line 22497
 HEAP32[$0 >> 2] = $11; //@line 22498
 if ($12 | 0) {
  __ZdlPv($12); //@line 22501
 }
 HEAP32[$2 >> 2] = $1; //@line 22503
 $$058106 = 0; //@line 22504
 do {
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058106 << 2) >> 2] = 0; //@line 22508
  $$058106 = $$058106 + 1 | 0; //@line 22509
 } while (($$058106 | 0) != ($1 | 0));
 $14 = $0 + 8 | 0; //@line 22517
 $15 = HEAP32[$14 >> 2] | 0; //@line 22518
 if (!$15) {
  return;
 }
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 22524
 $22 = $1 + -1 | 0; //@line 22525
 $24 = ($22 & $1 | 0) == 0; //@line 22527
 if ($24) {
  $30 = $21 & $22; //@line 22530
 } else {
  if ($21 >>> 0 < $1 >>> 0) {
   $30 = $21; //@line 22534
  } else {
   $30 = ($21 >>> 0) % ($1 >>> 0) | 0; //@line 22537
  }
 }
 HEAP32[(HEAP32[$0 >> 2] | 0) + ($30 << 2) >> 2] = $14; //@line 22542
 $$0559296101 = HEAP32[$15 >> 2] | 0; //@line 22543
 if (!$$0559296101) {
  return;
 } else {
  $$054$ph$ph103 = $30; //@line 22548
  $$055$in95104 = $15; //@line 22548
  $$0559296105 = $$0559296101; //@line 22548
  $$056$ph$ph102 = $15; //@line 22548
 }
 L30 : while (1) {
  $$055$in98 = $$055$in95104; //@line 22551
  $$0559299 = $$0559296105; //@line 22551
  $$056$ph97 = $$056$ph$ph102; //@line 22551
  L32 : while (1) {
   $$05593 = $$0559299; //@line 22553
   while (1) {
    $34 = HEAP32[$$05593 + 4 >> 2] | 0; //@line 22556
    if ($24) {
     $38 = $34 & $22; //@line 22559
    } else {
     if ($34 >>> 0 < $1 >>> 0) {
      $38 = $34; //@line 22563
     } else {
      $38 = ($34 >>> 0) % ($1 >>> 0) | 0; //@line 22566
     }
    }
    if (($38 | 0) == ($$054$ph$ph103 | 0)) {
     break;
    }
    $41 = (HEAP32[$0 >> 2] | 0) + ($38 << 2) | 0; //@line 22574
    if (!(HEAP32[$41 >> 2] | 0)) {
     break L32;
    }
    $44 = HEAP32[$$05593 >> 2] | 0; //@line 22580
    L43 : do {
     if (!$44) {
      $$066 = $$05593; //@line 22584
     } else {
      $46 = $$05593 + 8 | 0; //@line 22586
      $48 = HEAP8[$46 + 11 >> 0] | 0; //@line 22588
      $49 = $48 << 24 >> 24 < 0; //@line 22589
      $52 = $48 & 255; //@line 22592
      $53 = $49 ? HEAP32[$$05593 + 12 >> 2] | 0 : $52; //@line 22593
      $54 = ($53 | 0) == 0; //@line 22594
      if ($49) {
       $$072$us = $$05593; //@line 22596
       $56 = $44; //@line 22596
       while (1) {
        $55 = $56 + 8 | 0; //@line 22598
        $58 = HEAP8[$55 + 11 >> 0] | 0; //@line 22600
        $59 = $58 << 24 >> 24 < 0; //@line 22601
        if (($53 | 0) != (($59 ? HEAP32[$56 + 12 >> 2] | 0 : $58 & 255) | 0)) {
         $$066 = $$072$us; //@line 22608
         break L43;
        }
        if (!$54) {
         if (_memcmp(HEAP32[$46 >> 2] | 0, $59 ? HEAP32[$55 >> 2] | 0 : $55, $53) | 0) {
          $$066 = $$072$us; //@line 22618
          break L43;
         }
        }
        $69 = HEAP32[$56 >> 2] | 0; //@line 22622
        if (!$69) {
         $$066 = $56; //@line 22625
         break L43;
        } else {
         $$072$us$phi = $56; //@line 22628
         $56 = $69; //@line 22628
         $$072$us = $$072$us$phi; //@line 22628
        }
       }
      }
      if ($54) {
       $$072$us77 = $$05593; //@line 22633
       $72 = $44; //@line 22633
       while (1) {
        $74 = HEAP8[$72 + 8 + 11 >> 0] | 0; //@line 22637
        if (($74 << 24 >> 24 < 0 ? HEAP32[$72 + 12 >> 2] | 0 : $74 & 255) | 0) {
         $$066 = $$072$us77; //@line 22645
         break L43;
        }
        $81 = HEAP32[$72 >> 2] | 0; //@line 22648
        if (!$81) {
         $$066 = $72; //@line 22651
         break L43;
        } else {
         $$072$us77$phi = $72; //@line 22654
         $72 = $81; //@line 22654
         $$072$us77 = $$072$us77$phi; //@line 22654
        }
       }
      }
      $$072 = $$05593; //@line 22658
      $85 = $44; //@line 22658
      while (1) {
       $84 = $85 + 8 | 0; //@line 22660
       $87 = HEAP8[$84 + 11 >> 0] | 0; //@line 22662
       $88 = $87 << 24 >> 24 < 0; //@line 22663
       if (($53 | 0) != (($88 ? HEAP32[$85 + 12 >> 2] | 0 : $87 & 255) | 0)) {
        $$066 = $$072; //@line 22670
        break L43;
       }
       $96 = $88 ? HEAP32[$84 >> 2] | 0 : $84; //@line 22675
       if ((HEAP8[$96 >> 0] | 0) == (HEAP32[$46 >> 2] & 255) << 24 >> 24) {
        $$02026$i$i4$i = $46; //@line 22680
        $$02125$i$i5$i = $52; //@line 22680
        $$027$i$i3$i = $96; //@line 22680
       } else {
        $$066 = $$072; //@line 22682
        break L43;
       }
       while (1) {
        $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 22686
        $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 22687
        if (!$$02125$i$i5$i) {
         break;
        }
        $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 22692
        if ((HEAP8[$$02026$i$i4$i >> 0] | 0) != (HEAP8[$$027$i$i3$i >> 0] | 0)) {
         $$066 = $$072; //@line 22699
         break L43;
        }
       }
       $106 = HEAP32[$85 >> 2] | 0; //@line 22703
       if (!$106) {
        $$066 = $85; //@line 22706
        break;
       } else {
        $$072$phi = $85; //@line 22709
        $85 = $106; //@line 22709
        $$072 = $$072$phi; //@line 22709
       }
      }
     }
    } while (0);
    HEAP32[$$056$ph97 >> 2] = HEAP32[$$066 >> 2]; //@line 22715
    HEAP32[$$066 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2]; //@line 22720
    HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2] = $$05593; //@line 22724
    $$055 = HEAP32[$$055$in98 >> 2] | 0; //@line 22725
    if (!$$055) {
     label = 45; //@line 22728
     break L30;
    } else {
     $$05593 = $$055; //@line 22731
    }
   }
   $$0559299 = HEAP32[$$05593 >> 2] | 0; //@line 22734
   if (!$$0559299) {
    label = 45; //@line 22737
    break L30;
   } else {
    $$055$in98 = $$05593; //@line 22740
    $$056$ph97 = $$05593; //@line 22740
   }
  }
  HEAP32[$41 >> 2] = $$056$ph97; //@line 22743
  $$0559296105 = HEAP32[$$05593 >> 2] | 0; //@line 22744
  if (!$$0559296105) {
   label = 45; //@line 22747
   break;
  } else {
   $$054$ph$ph103 = $38; //@line 22750
   $$055$in95104 = $$05593; //@line 22750
   $$056$ph$ph102 = $$05593; //@line 22750
  }
 }
 if ((label | 0) == 45) {
  return;
 }
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02026$i$i4$i = 0, $$02125$i$i5$i = 0, $$027$i$i3$i = 0, $$054$ph$ph103 = 0, $$055 = 0, $$055$in95104 = 0, $$055$in98 = 0, $$0559296101 = 0, $$0559296105 = 0, $$0559299 = 0, $$05593 = 0, $$056$ph$ph102 = 0, $$056$ph97 = 0, $$058106 = 0, $$066 = 0, $$072 = 0, $$072$phi = 0, $$072$us = 0, $$072$us$phi = 0, $$072$us77 = 0, $$072$us77$phi = 0, $106 = 0, $11 = 0, $117 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $30 = 0, $34 = 0, $38 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $69 = 0, $72 = 0, $74 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $96 = 0, label = 0;
 $2 = $0 + 4 | 0; //@line 16096
 if (!$1) {
  $117 = HEAP32[$0 >> 2] | 0; //@line 16099
  HEAP32[$0 >> 2] = 0; //@line 16100
  if ($117 | 0) {
   __ZdlPv($117); //@line 16103
  }
  HEAP32[$2 >> 2] = 0; //@line 16105
  return;
 }
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0; //@line 16110
  __THREW__ = 0; //@line 16111
  invoke_vii(119, $5 | 0, 31992); //@line 16112
  $6 = __THREW__; //@line 16113
  __THREW__ = 0; //@line 16113
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0; //@line 16116
   ___cxa_free_exception($5 | 0); //@line 16118
   ___resumeException($8 | 0); //@line 16119
  } else {
   HEAP32[$5 >> 2] = 13224; //@line 16122
   ___cxa_throw($5 | 0, 2856, 240); //@line 16123
  }
 }
 $11 = __Znwj($1 << 2) | 0; //@line 16128
 $12 = HEAP32[$0 >> 2] | 0; //@line 16129
 HEAP32[$0 >> 2] = $11; //@line 16130
 if ($12 | 0) {
  __ZdlPv($12); //@line 16133
 }
 HEAP32[$2 >> 2] = $1; //@line 16135
 $$058106 = 0; //@line 16136
 do {
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058106 << 2) >> 2] = 0; //@line 16140
  $$058106 = $$058106 + 1 | 0; //@line 16141
 } while (($$058106 | 0) != ($1 | 0));
 $14 = $0 + 8 | 0; //@line 16149
 $15 = HEAP32[$14 >> 2] | 0; //@line 16150
 if (!$15) {
  return;
 }
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 16156
 $22 = $1 + -1 | 0; //@line 16157
 $24 = ($22 & $1 | 0) == 0; //@line 16159
 if ($24) {
  $30 = $21 & $22; //@line 16162
 } else {
  if ($21 >>> 0 < $1 >>> 0) {
   $30 = $21; //@line 16166
  } else {
   $30 = ($21 >>> 0) % ($1 >>> 0) | 0; //@line 16169
  }
 }
 HEAP32[(HEAP32[$0 >> 2] | 0) + ($30 << 2) >> 2] = $14; //@line 16174
 $$0559296101 = HEAP32[$15 >> 2] | 0; //@line 16175
 if (!$$0559296101) {
  return;
 } else {
  $$054$ph$ph103 = $30; //@line 16180
  $$055$in95104 = $15; //@line 16180
  $$0559296105 = $$0559296101; //@line 16180
  $$056$ph$ph102 = $15; //@line 16180
 }
 L30 : while (1) {
  $$055$in98 = $$055$in95104; //@line 16183
  $$0559299 = $$0559296105; //@line 16183
  $$056$ph97 = $$056$ph$ph102; //@line 16183
  L32 : while (1) {
   $$05593 = $$0559299; //@line 16185
   while (1) {
    $34 = HEAP32[$$05593 + 4 >> 2] | 0; //@line 16188
    if ($24) {
     $38 = $34 & $22; //@line 16191
    } else {
     if ($34 >>> 0 < $1 >>> 0) {
      $38 = $34; //@line 16195
     } else {
      $38 = ($34 >>> 0) % ($1 >>> 0) | 0; //@line 16198
     }
    }
    if (($38 | 0) == ($$054$ph$ph103 | 0)) {
     break;
    }
    $41 = (HEAP32[$0 >> 2] | 0) + ($38 << 2) | 0; //@line 16206
    if (!(HEAP32[$41 >> 2] | 0)) {
     break L32;
    }
    $44 = HEAP32[$$05593 >> 2] | 0; //@line 16212
    L43 : do {
     if (!$44) {
      $$066 = $$05593; //@line 16216
     } else {
      $46 = $$05593 + 8 | 0; //@line 16218
      $48 = HEAP8[$46 + 11 >> 0] | 0; //@line 16220
      $49 = $48 << 24 >> 24 < 0; //@line 16221
      $52 = $48 & 255; //@line 16224
      $53 = $49 ? HEAP32[$$05593 + 12 >> 2] | 0 : $52; //@line 16225
      $54 = ($53 | 0) == 0; //@line 16226
      if ($49) {
       $$072$us = $$05593; //@line 16228
       $56 = $44; //@line 16228
       while (1) {
        $55 = $56 + 8 | 0; //@line 16230
        $58 = HEAP8[$55 + 11 >> 0] | 0; //@line 16232
        $59 = $58 << 24 >> 24 < 0; //@line 16233
        if (($53 | 0) != (($59 ? HEAP32[$56 + 12 >> 2] | 0 : $58 & 255) | 0)) {
         $$066 = $$072$us; //@line 16240
         break L43;
        }
        if (!$54) {
         if (_memcmp(HEAP32[$46 >> 2] | 0, $59 ? HEAP32[$55 >> 2] | 0 : $55, $53) | 0) {
          $$066 = $$072$us; //@line 16250
          break L43;
         }
        }
        $69 = HEAP32[$56 >> 2] | 0; //@line 16254
        if (!$69) {
         $$066 = $56; //@line 16257
         break L43;
        } else {
         $$072$us$phi = $56; //@line 16260
         $56 = $69; //@line 16260
         $$072$us = $$072$us$phi; //@line 16260
        }
       }
      }
      if ($54) {
       $$072$us77 = $$05593; //@line 16265
       $72 = $44; //@line 16265
       while (1) {
        $74 = HEAP8[$72 + 8 + 11 >> 0] | 0; //@line 16269
        if (($74 << 24 >> 24 < 0 ? HEAP32[$72 + 12 >> 2] | 0 : $74 & 255) | 0) {
         $$066 = $$072$us77; //@line 16277
         break L43;
        }
        $81 = HEAP32[$72 >> 2] | 0; //@line 16280
        if (!$81) {
         $$066 = $72; //@line 16283
         break L43;
        } else {
         $$072$us77$phi = $72; //@line 16286
         $72 = $81; //@line 16286
         $$072$us77 = $$072$us77$phi; //@line 16286
        }
       }
      }
      $$072 = $$05593; //@line 16290
      $85 = $44; //@line 16290
      while (1) {
       $84 = $85 + 8 | 0; //@line 16292
       $87 = HEAP8[$84 + 11 >> 0] | 0; //@line 16294
       $88 = $87 << 24 >> 24 < 0; //@line 16295
       if (($53 | 0) != (($88 ? HEAP32[$85 + 12 >> 2] | 0 : $87 & 255) | 0)) {
        $$066 = $$072; //@line 16302
        break L43;
       }
       $96 = $88 ? HEAP32[$84 >> 2] | 0 : $84; //@line 16307
       if ((HEAP8[$96 >> 0] | 0) == (HEAP32[$46 >> 2] & 255) << 24 >> 24) {
        $$02026$i$i4$i = $46; //@line 16312
        $$02125$i$i5$i = $52; //@line 16312
        $$027$i$i3$i = $96; //@line 16312
       } else {
        $$066 = $$072; //@line 16314
        break L43;
       }
       while (1) {
        $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 16318
        $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 16319
        if (!$$02125$i$i5$i) {
         break;
        }
        $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 16324
        if ((HEAP8[$$02026$i$i4$i >> 0] | 0) != (HEAP8[$$027$i$i3$i >> 0] | 0)) {
         $$066 = $$072; //@line 16331
         break L43;
        }
       }
       $106 = HEAP32[$85 >> 2] | 0; //@line 16335
       if (!$106) {
        $$066 = $85; //@line 16338
        break;
       } else {
        $$072$phi = $85; //@line 16341
        $85 = $106; //@line 16341
        $$072 = $$072$phi; //@line 16341
       }
      }
     }
    } while (0);
    HEAP32[$$056$ph97 >> 2] = HEAP32[$$066 >> 2]; //@line 16347
    HEAP32[$$066 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2]; //@line 16352
    HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2] = $$05593; //@line 16356
    $$055 = HEAP32[$$055$in98 >> 2] | 0; //@line 16357
    if (!$$055) {
     label = 45; //@line 16360
     break L30;
    } else {
     $$05593 = $$055; //@line 16363
    }
   }
   $$0559299 = HEAP32[$$05593 >> 2] | 0; //@line 16366
   if (!$$0559299) {
    label = 45; //@line 16369
    break L30;
   } else {
    $$055$in98 = $$05593; //@line 16372
    $$056$ph97 = $$05593; //@line 16372
   }
  }
  HEAP32[$41 >> 2] = $$056$ph97; //@line 16375
  $$0559296105 = HEAP32[$$05593 >> 2] | 0; //@line 16376
  if (!$$0559296105) {
   label = 45; //@line 16379
   break;
  } else {
   $$054$ph$ph103 = $38; //@line 16382
   $$055$in95104 = $$05593; //@line 16382
   $$056$ph$ph102 = $$05593; //@line 16382
  }
 }
 if ((label | 0) == 45) {
  return;
 }
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02026$i$i4$i = 0, $$02125$i$i5$i = 0, $$027$i$i3$i = 0, $$054$ph$ph103 = 0, $$055 = 0, $$055$in95104 = 0, $$055$in98 = 0, $$0559296101 = 0, $$0559296105 = 0, $$0559299 = 0, $$05593 = 0, $$056$ph$ph102 = 0, $$056$ph97 = 0, $$058106 = 0, $$066 = 0, $$072 = 0, $$072$phi = 0, $$072$us = 0, $$072$us$phi = 0, $$072$us77 = 0, $$072$us77$phi = 0, $106 = 0, $11 = 0, $117 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $30 = 0, $34 = 0, $38 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $69 = 0, $72 = 0, $74 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $96 = 0, label = 0;
 $2 = $0 + 4 | 0; //@line 23415
 if (!$1) {
  $117 = HEAP32[$0 >> 2] | 0; //@line 23418
  HEAP32[$0 >> 2] = 0; //@line 23419
  if ($117 | 0) {
   __ZdlPv($117); //@line 23422
  }
  HEAP32[$2 >> 2] = 0; //@line 23424
  return;
 }
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0; //@line 23429
  __THREW__ = 0; //@line 23430
  invoke_vii(119, $5 | 0, 31992); //@line 23431
  $6 = __THREW__; //@line 23432
  __THREW__ = 0; //@line 23432
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0; //@line 23435
   ___cxa_free_exception($5 | 0); //@line 23437
   ___resumeException($8 | 0); //@line 23438
  } else {
   HEAP32[$5 >> 2] = 13224; //@line 23441
   ___cxa_throw($5 | 0, 2856, 240); //@line 23442
  }
 }
 $11 = __Znwj($1 << 2) | 0; //@line 23447
 $12 = HEAP32[$0 >> 2] | 0; //@line 23448
 HEAP32[$0 >> 2] = $11; //@line 23449
 if ($12 | 0) {
  __ZdlPv($12); //@line 23452
 }
 HEAP32[$2 >> 2] = $1; //@line 23454
 $$058106 = 0; //@line 23455
 do {
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058106 << 2) >> 2] = 0; //@line 23459
  $$058106 = $$058106 + 1 | 0; //@line 23460
 } while (($$058106 | 0) != ($1 | 0));
 $14 = $0 + 8 | 0; //@line 23468
 $15 = HEAP32[$14 >> 2] | 0; //@line 23469
 if (!$15) {
  return;
 }
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 23475
 $22 = $1 + -1 | 0; //@line 23476
 $24 = ($22 & $1 | 0) == 0; //@line 23478
 if ($24) {
  $30 = $21 & $22; //@line 23481
 } else {
  if ($21 >>> 0 < $1 >>> 0) {
   $30 = $21; //@line 23485
  } else {
   $30 = ($21 >>> 0) % ($1 >>> 0) | 0; //@line 23488
  }
 }
 HEAP32[(HEAP32[$0 >> 2] | 0) + ($30 << 2) >> 2] = $14; //@line 23493
 $$0559296101 = HEAP32[$15 >> 2] | 0; //@line 23494
 if (!$$0559296101) {
  return;
 } else {
  $$054$ph$ph103 = $30; //@line 23499
  $$055$in95104 = $15; //@line 23499
  $$0559296105 = $$0559296101; //@line 23499
  $$056$ph$ph102 = $15; //@line 23499
 }
 L30 : while (1) {
  $$055$in98 = $$055$in95104; //@line 23502
  $$0559299 = $$0559296105; //@line 23502
  $$056$ph97 = $$056$ph$ph102; //@line 23502
  L32 : while (1) {
   $$05593 = $$0559299; //@line 23504
   while (1) {
    $34 = HEAP32[$$05593 + 4 >> 2] | 0; //@line 23507
    if ($24) {
     $38 = $34 & $22; //@line 23510
    } else {
     if ($34 >>> 0 < $1 >>> 0) {
      $38 = $34; //@line 23514
     } else {
      $38 = ($34 >>> 0) % ($1 >>> 0) | 0; //@line 23517
     }
    }
    if (($38 | 0) == ($$054$ph$ph103 | 0)) {
     break;
    }
    $41 = (HEAP32[$0 >> 2] | 0) + ($38 << 2) | 0; //@line 23525
    if (!(HEAP32[$41 >> 2] | 0)) {
     break L32;
    }
    $44 = HEAP32[$$05593 >> 2] | 0; //@line 23531
    L43 : do {
     if (!$44) {
      $$066 = $$05593; //@line 23535
     } else {
      $46 = $$05593 + 8 | 0; //@line 23537
      $48 = HEAP8[$46 + 11 >> 0] | 0; //@line 23539
      $49 = $48 << 24 >> 24 < 0; //@line 23540
      $52 = $48 & 255; //@line 23543
      $53 = $49 ? HEAP32[$$05593 + 12 >> 2] | 0 : $52; //@line 23544
      $54 = ($53 | 0) == 0; //@line 23545
      if ($49) {
       $$072$us = $$05593; //@line 23547
       $56 = $44; //@line 23547
       while (1) {
        $55 = $56 + 8 | 0; //@line 23549
        $58 = HEAP8[$55 + 11 >> 0] | 0; //@line 23551
        $59 = $58 << 24 >> 24 < 0; //@line 23552
        if (($53 | 0) != (($59 ? HEAP32[$56 + 12 >> 2] | 0 : $58 & 255) | 0)) {
         $$066 = $$072$us; //@line 23559
         break L43;
        }
        if (!$54) {
         if (_memcmp(HEAP32[$46 >> 2] | 0, $59 ? HEAP32[$55 >> 2] | 0 : $55, $53) | 0) {
          $$066 = $$072$us; //@line 23569
          break L43;
         }
        }
        $69 = HEAP32[$56 >> 2] | 0; //@line 23573
        if (!$69) {
         $$066 = $56; //@line 23576
         break L43;
        } else {
         $$072$us$phi = $56; //@line 23579
         $56 = $69; //@line 23579
         $$072$us = $$072$us$phi; //@line 23579
        }
       }
      }
      if ($54) {
       $$072$us77 = $$05593; //@line 23584
       $72 = $44; //@line 23584
       while (1) {
        $74 = HEAP8[$72 + 8 + 11 >> 0] | 0; //@line 23588
        if (($74 << 24 >> 24 < 0 ? HEAP32[$72 + 12 >> 2] | 0 : $74 & 255) | 0) {
         $$066 = $$072$us77; //@line 23596
         break L43;
        }
        $81 = HEAP32[$72 >> 2] | 0; //@line 23599
        if (!$81) {
         $$066 = $72; //@line 23602
         break L43;
        } else {
         $$072$us77$phi = $72; //@line 23605
         $72 = $81; //@line 23605
         $$072$us77 = $$072$us77$phi; //@line 23605
        }
       }
      }
      $$072 = $$05593; //@line 23609
      $85 = $44; //@line 23609
      while (1) {
       $84 = $85 + 8 | 0; //@line 23611
       $87 = HEAP8[$84 + 11 >> 0] | 0; //@line 23613
       $88 = $87 << 24 >> 24 < 0; //@line 23614
       if (($53 | 0) != (($88 ? HEAP32[$85 + 12 >> 2] | 0 : $87 & 255) | 0)) {
        $$066 = $$072; //@line 23621
        break L43;
       }
       $96 = $88 ? HEAP32[$84 >> 2] | 0 : $84; //@line 23626
       if ((HEAP8[$96 >> 0] | 0) == (HEAP32[$46 >> 2] & 255) << 24 >> 24) {
        $$02026$i$i4$i = $46; //@line 23631
        $$02125$i$i5$i = $52; //@line 23631
        $$027$i$i3$i = $96; //@line 23631
       } else {
        $$066 = $$072; //@line 23633
        break L43;
       }
       while (1) {
        $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 23637
        $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 23638
        if (!$$02125$i$i5$i) {
         break;
        }
        $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 23643
        if ((HEAP8[$$02026$i$i4$i >> 0] | 0) != (HEAP8[$$027$i$i3$i >> 0] | 0)) {
         $$066 = $$072; //@line 23650
         break L43;
        }
       }
       $106 = HEAP32[$85 >> 2] | 0; //@line 23654
       if (!$106) {
        $$066 = $85; //@line 23657
        break;
       } else {
        $$072$phi = $85; //@line 23660
        $85 = $106; //@line 23660
        $$072 = $$072$phi; //@line 23660
       }
      }
     }
    } while (0);
    HEAP32[$$056$ph97 >> 2] = HEAP32[$$066 >> 2]; //@line 23666
    HEAP32[$$066 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2]; //@line 23671
    HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2] = $$05593; //@line 23675
    $$055 = HEAP32[$$055$in98 >> 2] | 0; //@line 23676
    if (!$$055) {
     label = 45; //@line 23679
     break L30;
    } else {
     $$05593 = $$055; //@line 23682
    }
   }
   $$0559299 = HEAP32[$$05593 >> 2] | 0; //@line 23685
   if (!$$0559299) {
    label = 45; //@line 23688
    break L30;
   } else {
    $$055$in98 = $$05593; //@line 23691
    $$056$ph97 = $$05593; //@line 23691
   }
  }
  HEAP32[$41 >> 2] = $$056$ph97; //@line 23694
  $$0559296105 = HEAP32[$$05593 >> 2] | 0; //@line 23695
  if (!$$0559296105) {
   label = 45; //@line 23698
   break;
  } else {
   $$054$ph$ph103 = $38; //@line 23701
   $$055$in95104 = $$05593; //@line 23701
   $$056$ph$ph102 = $$05593; //@line 23701
  }
 }
 if ((label | 0) == 45) {
  return;
 }
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02026$i$i4$i = 0, $$02125$i$i5$i = 0, $$027$i$i3$i = 0, $$054$ph$ph103 = 0, $$055 = 0, $$055$in95104 = 0, $$055$in98 = 0, $$0559296101 = 0, $$0559296105 = 0, $$0559299 = 0, $$05593 = 0, $$056$ph$ph102 = 0, $$056$ph97 = 0, $$058106 = 0, $$066 = 0, $$072 = 0, $$072$phi = 0, $$072$us = 0, $$072$us$phi = 0, $$072$us77 = 0, $$072$us77$phi = 0, $106 = 0, $11 = 0, $117 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $30 = 0, $34 = 0, $38 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $69 = 0, $72 = 0, $74 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $96 = 0, label = 0;
 $2 = $0 + 4 | 0; //@line 25614
 if (!$1) {
  $117 = HEAP32[$0 >> 2] | 0; //@line 25617
  HEAP32[$0 >> 2] = 0; //@line 25618
  if ($117 | 0) {
   __ZdlPv($117); //@line 25621
  }
  HEAP32[$2 >> 2] = 0; //@line 25623
  return;
 }
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0; //@line 25628
  __THREW__ = 0; //@line 25629
  invoke_vii(119, $5 | 0, 31992); //@line 25630
  $6 = __THREW__; //@line 25631
  __THREW__ = 0; //@line 25631
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0; //@line 25634
   ___cxa_free_exception($5 | 0); //@line 25636
   ___resumeException($8 | 0); //@line 25637
  } else {
   HEAP32[$5 >> 2] = 13224; //@line 25640
   ___cxa_throw($5 | 0, 2856, 240); //@line 25641
  }
 }
 $11 = __Znwj($1 << 2) | 0; //@line 25646
 $12 = HEAP32[$0 >> 2] | 0; //@line 25647
 HEAP32[$0 >> 2] = $11; //@line 25648
 if ($12 | 0) {
  __ZdlPv($12); //@line 25651
 }
 HEAP32[$2 >> 2] = $1; //@line 25653
 $$058106 = 0; //@line 25654
 do {
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058106 << 2) >> 2] = 0; //@line 25658
  $$058106 = $$058106 + 1 | 0; //@line 25659
 } while (($$058106 | 0) != ($1 | 0));
 $14 = $0 + 8 | 0; //@line 25667
 $15 = HEAP32[$14 >> 2] | 0; //@line 25668
 if (!$15) {
  return;
 }
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 25674
 $22 = $1 + -1 | 0; //@line 25675
 $24 = ($22 & $1 | 0) == 0; //@line 25677
 if ($24) {
  $30 = $21 & $22; //@line 25680
 } else {
  if ($21 >>> 0 < $1 >>> 0) {
   $30 = $21; //@line 25684
  } else {
   $30 = ($21 >>> 0) % ($1 >>> 0) | 0; //@line 25687
  }
 }
 HEAP32[(HEAP32[$0 >> 2] | 0) + ($30 << 2) >> 2] = $14; //@line 25692
 $$0559296101 = HEAP32[$15 >> 2] | 0; //@line 25693
 if (!$$0559296101) {
  return;
 } else {
  $$054$ph$ph103 = $30; //@line 25698
  $$055$in95104 = $15; //@line 25698
  $$0559296105 = $$0559296101; //@line 25698
  $$056$ph$ph102 = $15; //@line 25698
 }
 L30 : while (1) {
  $$055$in98 = $$055$in95104; //@line 25701
  $$0559299 = $$0559296105; //@line 25701
  $$056$ph97 = $$056$ph$ph102; //@line 25701
  L32 : while (1) {
   $$05593 = $$0559299; //@line 25703
   while (1) {
    $34 = HEAP32[$$05593 + 4 >> 2] | 0; //@line 25706
    if ($24) {
     $38 = $34 & $22; //@line 25709
    } else {
     if ($34 >>> 0 < $1 >>> 0) {
      $38 = $34; //@line 25713
     } else {
      $38 = ($34 >>> 0) % ($1 >>> 0) | 0; //@line 25716
     }
    }
    if (($38 | 0) == ($$054$ph$ph103 | 0)) {
     break;
    }
    $41 = (HEAP32[$0 >> 2] | 0) + ($38 << 2) | 0; //@line 25724
    if (!(HEAP32[$41 >> 2] | 0)) {
     break L32;
    }
    $44 = HEAP32[$$05593 >> 2] | 0; //@line 25730
    L43 : do {
     if (!$44) {
      $$066 = $$05593; //@line 25734
     } else {
      $46 = $$05593 + 8 | 0; //@line 25736
      $48 = HEAP8[$46 + 11 >> 0] | 0; //@line 25738
      $49 = $48 << 24 >> 24 < 0; //@line 25739
      $52 = $48 & 255; //@line 25742
      $53 = $49 ? HEAP32[$$05593 + 12 >> 2] | 0 : $52; //@line 25743
      $54 = ($53 | 0) == 0; //@line 25744
      if ($49) {
       $$072$us = $$05593; //@line 25746
       $56 = $44; //@line 25746
       while (1) {
        $55 = $56 + 8 | 0; //@line 25748
        $58 = HEAP8[$55 + 11 >> 0] | 0; //@line 25750
        $59 = $58 << 24 >> 24 < 0; //@line 25751
        if (($53 | 0) != (($59 ? HEAP32[$56 + 12 >> 2] | 0 : $58 & 255) | 0)) {
         $$066 = $$072$us; //@line 25758
         break L43;
        }
        if (!$54) {
         if (_memcmp(HEAP32[$46 >> 2] | 0, $59 ? HEAP32[$55 >> 2] | 0 : $55, $53) | 0) {
          $$066 = $$072$us; //@line 25768
          break L43;
         }
        }
        $69 = HEAP32[$56 >> 2] | 0; //@line 25772
        if (!$69) {
         $$066 = $56; //@line 25775
         break L43;
        } else {
         $$072$us$phi = $56; //@line 25778
         $56 = $69; //@line 25778
         $$072$us = $$072$us$phi; //@line 25778
        }
       }
      }
      if ($54) {
       $$072$us77 = $$05593; //@line 25783
       $72 = $44; //@line 25783
       while (1) {
        $74 = HEAP8[$72 + 8 + 11 >> 0] | 0; //@line 25787
        if (($74 << 24 >> 24 < 0 ? HEAP32[$72 + 12 >> 2] | 0 : $74 & 255) | 0) {
         $$066 = $$072$us77; //@line 25795
         break L43;
        }
        $81 = HEAP32[$72 >> 2] | 0; //@line 25798
        if (!$81) {
         $$066 = $72; //@line 25801
         break L43;
        } else {
         $$072$us77$phi = $72; //@line 25804
         $72 = $81; //@line 25804
         $$072$us77 = $$072$us77$phi; //@line 25804
        }
       }
      }
      $$072 = $$05593; //@line 25808
      $85 = $44; //@line 25808
      while (1) {
       $84 = $85 + 8 | 0; //@line 25810
       $87 = HEAP8[$84 + 11 >> 0] | 0; //@line 25812
       $88 = $87 << 24 >> 24 < 0; //@line 25813
       if (($53 | 0) != (($88 ? HEAP32[$85 + 12 >> 2] | 0 : $87 & 255) | 0)) {
        $$066 = $$072; //@line 25820
        break L43;
       }
       $96 = $88 ? HEAP32[$84 >> 2] | 0 : $84; //@line 25825
       if ((HEAP8[$96 >> 0] | 0) == (HEAP32[$46 >> 2] & 255) << 24 >> 24) {
        $$02026$i$i4$i = $46; //@line 25830
        $$02125$i$i5$i = $52; //@line 25830
        $$027$i$i3$i = $96; //@line 25830
       } else {
        $$066 = $$072; //@line 25832
        break L43;
       }
       while (1) {
        $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 25836
        $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 25837
        if (!$$02125$i$i5$i) {
         break;
        }
        $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 25842
        if ((HEAP8[$$02026$i$i4$i >> 0] | 0) != (HEAP8[$$027$i$i3$i >> 0] | 0)) {
         $$066 = $$072; //@line 25849
         break L43;
        }
       }
       $106 = HEAP32[$85 >> 2] | 0; //@line 25853
       if (!$106) {
        $$066 = $85; //@line 25856
        break;
       } else {
        $$072$phi = $85; //@line 25859
        $85 = $106; //@line 25859
        $$072 = $$072$phi; //@line 25859
       }
      }
     }
    } while (0);
    HEAP32[$$056$ph97 >> 2] = HEAP32[$$066 >> 2]; //@line 25865
    HEAP32[$$066 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2]; //@line 25870
    HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2] = $$05593; //@line 25874
    $$055 = HEAP32[$$055$in98 >> 2] | 0; //@line 25875
    if (!$$055) {
     label = 45; //@line 25878
     break L30;
    } else {
     $$05593 = $$055; //@line 25881
    }
   }
   $$0559299 = HEAP32[$$05593 >> 2] | 0; //@line 25884
   if (!$$0559299) {
    label = 45; //@line 25887
    break L30;
   } else {
    $$055$in98 = $$05593; //@line 25890
    $$056$ph97 = $$05593; //@line 25890
   }
  }
  HEAP32[$41 >> 2] = $$056$ph97; //@line 25893
  $$0559296105 = HEAP32[$$05593 >> 2] | 0; //@line 25894
  if (!$$0559296105) {
   label = 45; //@line 25897
   break;
  } else {
   $$054$ph$ph103 = $38; //@line 25900
   $$055$in95104 = $$05593; //@line 25900
   $$056$ph$ph102 = $$05593; //@line 25900
  }
 }
 if ((label | 0) == 45) {
  return;
 }
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i37 = 0, $$0$i$i40 = 0, $$032 = 0, $$033 = 0, $$1 = 0, $$134 = 0, $$3 = 0, $$336 = 0, $$byval_copy = 0, $$sink1 = 0, $$sink63 = 0, $$sink64 = 0, $$sroa$053$0 = 0, $$sroa$053$1 = 0, $10 = 0, $104 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $35 = 0, $36 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $66 = 0, $7 = 0, $73 = 0, $8 = 0, $80 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 52194
 STACKTOP = STACKTOP + 176 | 0; //@line 52195
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 52195
 $$byval_copy = sp + 56 | 0; //@line 52196
 $6 = sp + 52 | 0; //@line 52197
 $7 = sp + 164 | 0; //@line 52198
 $8 = sp + 161 | 0; //@line 52199
 $9 = sp + 160 | 0; //@line 52200
 $10 = sp + 40 | 0; //@line 52201
 $11 = sp + 28 | 0; //@line 52202
 $12 = sp + 16 | 0; //@line 52203
 $13 = sp + 12 | 0; //@line 52204
 $14 = sp + 60 | 0; //@line 52205
 $15 = sp + 8 | 0; //@line 52206
 $16 = sp + 4 | 0; //@line 52207
 $17 = sp; //@line 52208
 __ZNKSt3__28ios_base6getlocEv($6, $3); //@line 52209
 __THREW__ = 0; //@line 52210
 $18 = invoke_iii(63, $6 | 0, 35512) | 0; //@line 52211
 $19 = __THREW__; //@line 52212
 __THREW__ = 0; //@line 52212
 L1 : do {
  if ($19 & 1) {
   $95 = ___cxa_find_matching_catch_2() | 0; //@line 52216
   $$3 = $95; //@line 52218
   $$336 = tempRet0; //@line 52218
  } else {
   $21 = $5 + 11 | 0; //@line 52220
   $22 = HEAP8[$21 >> 0] | 0; //@line 52221
   $23 = $22 << 24 >> 24 < 0; //@line 52222
   $24 = $5 + 4 | 0; //@line 52223
   do {
    if (!(($23 ? HEAP32[$24 >> 2] | 0 : $22 & 255) | 0)) {
     $45 = 0; //@line 52230
    } else {
     $31 = HEAP8[($23 ? HEAP32[$5 >> 2] | 0 : $5) >> 0] | 0; //@line 52234
     __THREW__ = 0; //@line 52238
     $35 = invoke_iii(HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] | 0, $18 | 0, 45) | 0; //@line 52239
     $36 = __THREW__; //@line 52240
     __THREW__ = 0; //@line 52240
     if ($36 & 1) {
      $97 = ___cxa_find_matching_catch_2() | 0; //@line 52243
      $$3 = $97; //@line 52245
      $$336 = tempRet0; //@line 52245
      break L1;
     } else {
      $45 = $31 << 24 >> 24 == $35 << 24 >> 24; //@line 52249
      break;
     }
    }
   } while (0);
   HEAP32[$10 >> 2] = 0; //@line 52254
   HEAP32[$10 + 4 >> 2] = 0; //@line 52254
   HEAP32[$10 + 8 >> 2] = 0; //@line 52254
   $$0$i$i = 0; //@line 52255
   while (1) {
    if (($$0$i$i | 0) == 3) {
     break;
    }
    HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0; //@line 52262
    $$0$i$i = $$0$i$i + 1 | 0; //@line 52264
   }
   HEAP32[$11 >> 2] = 0; //@line 52266
   HEAP32[$11 + 4 >> 2] = 0; //@line 52266
   HEAP32[$11 + 8 >> 2] = 0; //@line 52266
   $$0$i$i37 = 0; //@line 52267
   while (1) {
    if (($$0$i$i37 | 0) == 3) {
     break;
    }
    HEAP32[$11 + ($$0$i$i37 << 2) >> 2] = 0; //@line 52274
    $$0$i$i37 = $$0$i$i37 + 1 | 0; //@line 52276
   }
   HEAP32[$12 >> 2] = 0; //@line 52278
   HEAP32[$12 + 4 >> 2] = 0; //@line 52278
   HEAP32[$12 + 8 >> 2] = 0; //@line 52278
   $$0$i$i40 = 0; //@line 52279
   while (1) {
    if (($$0$i$i40 | 0) == 3) {
     break;
    }
    HEAP32[$12 + ($$0$i$i40 << 2) >> 2] = 0; //@line 52286
    $$0$i$i40 = $$0$i$i40 + 1 | 0; //@line 52288
   }
   __THREW__ = 0; //@line 52290
   invoke_viiiiiiiiii(3, $2 | 0, $45 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, $13 | 0); //@line 52291
   $46 = __THREW__; //@line 52292
   __THREW__ = 0; //@line 52292
   if ($46 & 1) {
    $99 = ___cxa_find_matching_catch_2() | 0; //@line 52295
    $$1 = $99; //@line 52297
    $$134 = tempRet0; //@line 52297
   } else {
    $48 = HEAP8[$21 >> 0] | 0; //@line 52299
    $49 = $48 << 24 >> 24 < 0; //@line 52300
    $52 = $49 ? HEAP32[$24 >> 2] | 0 : $48 & 255; //@line 52303
    $53 = HEAP32[$13 >> 2] | 0; //@line 52304
    if (($52 | 0) > ($53 | 0)) {
     $58 = HEAP8[$12 + 11 >> 0] | 0; //@line 52310
     $66 = HEAP8[$11 + 11 >> 0] | 0; //@line 52318
     $$sink1 = 1; //@line 52324
     $$sink63 = ($58 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $58 & 255) + ($52 - $53 << 1) | 0; //@line 52324
     $$sink64 = $66 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $66 & 255; //@line 52324
    } else {
     $73 = HEAP8[$12 + 11 >> 0] | 0; //@line 52327
     $80 = HEAP8[$11 + 11 >> 0] | 0; //@line 52334
     $$sink1 = 2; //@line 52340
     $$sink63 = $80 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $80 & 255; //@line 52340
     $$sink64 = $73 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $73 & 255; //@line 52340
    }
    $87 = $$sink64 + $53 + $$sink63 + $$sink1 | 0; //@line 52344
    if ($87 >>> 0 > 100) {
     $89 = _malloc($87) | 0; //@line 52347
     $90 = $89; //@line 52348
     if (!$89) {
      __THREW__ = 0; //@line 52351
      invoke_v(4); //@line 52352
      __THREW__ = 0; //@line 52353
      $93 = ___cxa_find_matching_catch_2() | 0; //@line 52354
      $$0 = $93; //@line 52356
      $$033 = tempRet0; //@line 52356
      $$sroa$053$1 = $90; //@line 52356
     } else {
      $$032 = $89; //@line 52358
      $$sroa$053$0 = $90; //@line 52358
      label = 24; //@line 52359
     }
    } else {
     $$032 = $14; //@line 52362
     $$sroa$053$0 = 0; //@line 52362
     label = 24; //@line 52363
    }
    if ((label | 0) == 24) {
     $104 = $49 ? HEAP32[$5 >> 2] | 0 : $5; //@line 52369
     __THREW__ = 0; //@line 52373
     invoke_viiiiiiiiiiiiiii(1, $$032 | 0, $15 | 0, $16 | 0, HEAP32[$3 + 4 >> 2] | 0, $104 | 0, $104 + $52 | 0, $18 | 0, $45 | 0, $7 | 0, HEAP8[$8 >> 0] | 0, HEAP8[$9 >> 0] | 0, $10 | 0, $11 | 0, $12 | 0, $53 | 0); //@line 52374
     $108 = __THREW__; //@line 52375
     __THREW__ = 0; //@line 52375
     if (!($108 & 1)) {
      HEAP32[$17 >> 2] = HEAP32[$1 >> 2]; //@line 52379
      $111 = HEAP32[$15 >> 2] | 0; //@line 52380
      $112 = HEAP32[$16 >> 2] | 0; //@line 52381
      __THREW__ = 0; //@line 52382
      HEAP32[$$byval_copy >> 2] = HEAP32[$17 >> 2]; //@line 52383
      $113 = invoke_iiiiiii(39, $$byval_copy | 0, $$032 | 0, $111 | 0, $112 | 0, $3 | 0, $4 | 0) | 0; //@line 52384
      $114 = __THREW__; //@line 52385
      __THREW__ = 0; //@line 52385
      if (!($114 & 1)) {
       if ($$sroa$053$0 | 0) {
        _free($$sroa$053$0); //@line 52391
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12); //@line 52393
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52394
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 52395
       __ZNSt3__26localeD2Ev($6); //@line 52396
       STACKTOP = sp; //@line 52397
       return $113 | 0; //@line 52397
      }
     }
     $118 = ___cxa_find_matching_catch_2() | 0; //@line 52400
     $$0 = $118; //@line 52402
     $$033 = tempRet0; //@line 52402
     $$sroa$053$1 = $$sroa$053$0; //@line 52402
    }
    if ($$sroa$053$1 | 0) {
     _free($$sroa$053$1); //@line 52407
    }
    $$1 = $$0; //@line 52409
    $$134 = $$033; //@line 52409
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12); //@line 52411
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11); //@line 52412
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10); //@line 52413
   $$3 = $$1; //@line 52414
   $$336 = $$134; //@line 52414
  }
 } while (0);
 __ZNSt3__26localeD2Ev($6); //@line 52417
 ___resumeException($$3 | 0); //@line 52418
 return 0; //@line 52420
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa$i$i$i$i = 0, $$02026$i$i4$i = 0, $$02026$i$i4$i$us = 0, $$02125$i$i5$i = 0, $$02125$i$i5$i$us = 0, $$027$i$i3$i = 0, $$027$i$i3$i$us = 0, $$02836 = 0, $$02837 = 0, $$02837$us = 0, $$036$lcssa$i$i$i$i = 0, $$03639$i$i$i$i = 0, $$037$lcssa$i$i$i$i = 0, $$03738$i$i$i$i = 0, $$040$i$i$i$i = 0, $$1$i$i$i$i = 0, $$2$i$i$i$i = 0, $$3$i$i$i$i = 0, $$sroa$0$0 = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $12 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $93 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0; //@line 1485
 $4 = $3 << 24 >> 24 < 0; //@line 1486
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1; //@line 1491
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255; //@line 1492
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i = $9; //@line 1495
  $$03738$i$i$i$i = $10; //@line 1495
  $$040$i$i$i$i = $10; //@line 1495
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 1498
   $$03738$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i, 1540483477) | 0); //@line 1503
   $$040$i$i$i$i = $$040$i$i$i$i + -4 | 0; //@line 1505
   if ($$040$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i = $$03639$i$i$i$i + 4 | 0; //@line 1508
   }
  }
  $21 = $10 + -4 | 0; //@line 1513
  $22 = $21 & -4; //@line 1514
  $$0$lcssa$i$i$i$i = $21 - $22 | 0; //@line 1518
  $$036$lcssa$i$i$i$i = $9 + ($22 + 4) | 0; //@line 1518
  $$037$lcssa$i$i$i$i = $$03738$i$i$i$i; //@line 1518
 } else {
  $$0$lcssa$i$i$i$i = $10; //@line 1520
  $$036$lcssa$i$i$i$i = $9; //@line 1520
  $$037$lcssa$i$i$i$i = $10; //@line 1520
 }
 switch ($$0$lcssa$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i; //@line 1529
   label = 6; //@line 1530
   break;
  }
 case 2:
  {
   $$1$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 1534
   label = 6; //@line 1535
   break;
  }
 case 1:
  {
   $$2$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 1539
   label = 7; //@line 1540
   break;
  }
 default:
  {
   $$3$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 1544
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i; //@line 1553
  label = 7; //@line 1554
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i = Math_imul($$2$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i >> 0], 1540483477) | 0; //@line 1561
 }
 $41 = Math_imul($$3$i$i$i$i >>> 13 ^ $$3$i$i$i$i, 1540483477) | 0; //@line 1565
 $43 = $41 >>> 15 ^ $41; //@line 1567
 $45 = HEAP32[$0 + 4 >> 2] | 0; //@line 1569
 if (!$45) {
  $$sroa$0$0 = 0; //@line 1572
  return $$sroa$0$0 | 0; //@line 1573
 }
 $47 = $45 + -1 | 0; //@line 1575
 $49 = ($47 & $45 | 0) == 0; //@line 1577
 if ($49) {
  $55 = $43 & $47; //@line 1580
 } else {
  if ($43 >>> 0 < $45 >>> 0) {
   $55 = $43; //@line 1584
  } else {
   $55 = ($43 >>> 0) % ($45 >>> 0) | 0; //@line 1587
  }
 }
 $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0; //@line 1592
 if (!$56) {
  $$sroa$0$0 = 0; //@line 1595
  return $$sroa$0$0 | 0; //@line 1596
 }
 $$02836 = HEAP32[$56 >> 2] | 0; //@line 1598
 if (!$$02836) {
  $$sroa$0$0 = 0; //@line 1601
  return $$sroa$0$0 | 0; //@line 1602
 }
 $59 = ($10 | 0) == 0; //@line 1604
 if ($49) {
  $$02837$us = $$02836; //@line 1606
  L28 : while (1) {
   $61 = HEAP32[$$02837$us + 4 >> 2] | 0; //@line 1609
   $62 = ($61 | 0) == ($43 | 0); //@line 1610
   if (!($62 | ($61 & $47 | 0) == ($55 | 0))) {
    $$sroa$0$0 = 0; //@line 1615
    label = 40; //@line 1616
    break;
   }
   do {
    if ($62) {
     $65 = $$02837$us + 8 | 0; //@line 1621
     $67 = HEAP8[$65 + 11 >> 0] | 0; //@line 1623
     $68 = $67 << 24 >> 24 < 0; //@line 1624
     $71 = $67 & 255; //@line 1627
     if ((($68 ? HEAP32[$$02837$us + 12 >> 2] | 0 : $71) | 0) == ($10 | 0)) {
      $74 = HEAP32[$65 >> 2] | 0; //@line 1631
      $75 = $68 ? $74 : $65; //@line 1632
      if ($68) {
       if ($59) {
        $$sroa$0$0 = $$02837$us; //@line 1635
        label = 40; //@line 1636
        break L28;
       }
       if (!(_memcmp($75, $9, $10) | 0)) {
        $$sroa$0$0 = $$02837$us; //@line 1642
        label = 40; //@line 1643
        break L28;
       } else {
        break;
       }
      }
      if ($59) {
       $$sroa$0$0 = $$02837$us; //@line 1650
       label = 40; //@line 1651
       break L28;
      }
      if ((HEAP8[$9 >> 0] | 0) == ($74 & 255) << 24 >> 24) {
       $$02026$i$i4$i$us = $65; //@line 1659
       $$02125$i$i5$i$us = $71; //@line 1659
       $$027$i$i3$i$us = $9; //@line 1659
       do {
        $$02125$i$i5$i$us = $$02125$i$i5$i$us + -1 | 0; //@line 1661
        $$02026$i$i4$i$us = $$02026$i$i4$i$us + 1 | 0; //@line 1662
        if (!$$02125$i$i5$i$us) {
         $$sroa$0$0 = $$02837$us; //@line 1665
         label = 40; //@line 1666
         break L28;
        }
        $$027$i$i3$i$us = $$027$i$i3$i$us + 1 | 0; //@line 1669
       } while ((HEAP8[$$02026$i$i4$i$us >> 0] | 0) == (HEAP8[$$027$i$i3$i$us >> 0] | 0));
      }
     }
    }
   } while (0);
   $$02837$us = HEAP32[$$02837$us >> 2] | 0; //@line 1683
   if (!$$02837$us) {
    $$sroa$0$0 = 0; //@line 1686
    label = 40; //@line 1687
    break;
   }
  }
  if ((label | 0) == 40) {
   return $$sroa$0$0 | 0; //@line 1694
  }
 } else {
  $$02837 = $$02836; //@line 1697
 }
 L50 : while (1) {
  $89 = HEAP32[$$02837 + 4 >> 2] | 0; //@line 1701
  do {
   if (($89 | 0) == ($43 | 0)) {
    $96 = $$02837 + 8 | 0; //@line 1705
    $98 = HEAP8[$96 + 11 >> 0] | 0; //@line 1707
    $99 = $98 << 24 >> 24 < 0; //@line 1708
    $102 = $98 & 255; //@line 1711
    if ((($99 ? HEAP32[$$02837 + 12 >> 2] | 0 : $102) | 0) == ($10 | 0)) {
     $105 = HEAP32[$96 >> 2] | 0; //@line 1715
     $106 = $99 ? $105 : $96; //@line 1716
     if ($99) {
      if ($59) {
       $$sroa$0$0 = $$02837; //@line 1719
       label = 40; //@line 1720
       break L50;
      }
      if (!(_memcmp($106, $9, $10) | 0)) {
       $$sroa$0$0 = $$02837; //@line 1726
       label = 40; //@line 1727
       break L50;
      } else {
       break;
      }
     }
     if ($59) {
      $$sroa$0$0 = $$02837; //@line 1734
      label = 40; //@line 1735
      break L50;
     }
     if ((HEAP8[$9 >> 0] | 0) == ($105 & 255) << 24 >> 24) {
      $$02026$i$i4$i = $96; //@line 1743
      $$02125$i$i5$i = $102; //@line 1743
      $$027$i$i3$i = $9; //@line 1743
      do {
       $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 1745
       $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 1746
       if (!$$02125$i$i5$i) {
        $$sroa$0$0 = $$02837; //@line 1749
        label = 40; //@line 1750
        break L50;
       }
       $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 1753
      } while ((HEAP8[$$02026$i$i4$i >> 0] | 0) == (HEAP8[$$027$i$i3$i >> 0] | 0));
     }
    }
   } else {
    if ($89 >>> 0 < $45 >>> 0) {
     $93 = $89; //@line 1768
    } else {
     $93 = ($89 >>> 0) % ($45 >>> 0) | 0; //@line 1771
    }
    if (($93 | 0) != ($55 | 0)) {
     $$sroa$0$0 = 0; //@line 1775
     label = 40; //@line 1776
     break L50;
    }
   }
  } while (0);
  $$02837 = HEAP32[$$02837 >> 2] | 0; //@line 1781
  if (!$$02837) {
   $$sroa$0$0 = 0; //@line 1784
   label = 40; //@line 1785
   break;
  }
 }
 if ((label | 0) == 40) {
  return $$sroa$0$0 | 0; //@line 1792
 }
 return 0; //@line 1794
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa$i$i$i$i = 0, $$02026$i$i4$i = 0, $$02026$i$i4$i$us = 0, $$02125$i$i5$i = 0, $$02125$i$i5$i$us = 0, $$027$i$i3$i = 0, $$027$i$i3$i$us = 0, $$02836 = 0, $$02837 = 0, $$02837$us = 0, $$036$lcssa$i$i$i$i = 0, $$03639$i$i$i$i = 0, $$037$lcssa$i$i$i$i = 0, $$03738$i$i$i$i = 0, $$040$i$i$i$i = 0, $$1$i$i$i$i = 0, $$2$i$i$i$i = 0, $$3$i$i$i$i = 0, $$sroa$0$0 = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $12 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $93 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0; //@line 8987
 $4 = $3 << 24 >> 24 < 0; //@line 8988
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1; //@line 8993
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255; //@line 8994
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i = $9; //@line 8997
  $$03738$i$i$i$i = $10; //@line 8997
  $$040$i$i$i$i = $10; //@line 8997
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 9000
   $$03738$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i, 1540483477) | 0); //@line 9005
   $$040$i$i$i$i = $$040$i$i$i$i + -4 | 0; //@line 9007
   if ($$040$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i = $$03639$i$i$i$i + 4 | 0; //@line 9010
   }
  }
  $21 = $10 + -4 | 0; //@line 9015
  $22 = $21 & -4; //@line 9016
  $$0$lcssa$i$i$i$i = $21 - $22 | 0; //@line 9020
  $$036$lcssa$i$i$i$i = $9 + ($22 + 4) | 0; //@line 9020
  $$037$lcssa$i$i$i$i = $$03738$i$i$i$i; //@line 9020
 } else {
  $$0$lcssa$i$i$i$i = $10; //@line 9022
  $$036$lcssa$i$i$i$i = $9; //@line 9022
  $$037$lcssa$i$i$i$i = $10; //@line 9022
 }
 switch ($$0$lcssa$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i; //@line 9031
   label = 6; //@line 9032
   break;
  }
 case 2:
  {
   $$1$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 9036
   label = 6; //@line 9037
   break;
  }
 case 1:
  {
   $$2$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 9041
   label = 7; //@line 9042
   break;
  }
 default:
  {
   $$3$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 9046
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i; //@line 9055
  label = 7; //@line 9056
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i = Math_imul($$2$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i >> 0], 1540483477) | 0; //@line 9063
 }
 $41 = Math_imul($$3$i$i$i$i >>> 13 ^ $$3$i$i$i$i, 1540483477) | 0; //@line 9067
 $43 = $41 >>> 15 ^ $41; //@line 9069
 $45 = HEAP32[$0 + 4 >> 2] | 0; //@line 9071
 if (!$45) {
  $$sroa$0$0 = 0; //@line 9074
  return $$sroa$0$0 | 0; //@line 9075
 }
 $47 = $45 + -1 | 0; //@line 9077
 $49 = ($47 & $45 | 0) == 0; //@line 9079
 if ($49) {
  $55 = $43 & $47; //@line 9082
 } else {
  if ($43 >>> 0 < $45 >>> 0) {
   $55 = $43; //@line 9086
  } else {
   $55 = ($43 >>> 0) % ($45 >>> 0) | 0; //@line 9089
  }
 }
 $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0; //@line 9094
 if (!$56) {
  $$sroa$0$0 = 0; //@line 9097
  return $$sroa$0$0 | 0; //@line 9098
 }
 $$02836 = HEAP32[$56 >> 2] | 0; //@line 9100
 if (!$$02836) {
  $$sroa$0$0 = 0; //@line 9103
  return $$sroa$0$0 | 0; //@line 9104
 }
 $59 = ($10 | 0) == 0; //@line 9106
 if ($49) {
  $$02837$us = $$02836; //@line 9108
  L28 : while (1) {
   $61 = HEAP32[$$02837$us + 4 >> 2] | 0; //@line 9111
   $62 = ($61 | 0) == ($43 | 0); //@line 9112
   if (!($62 | ($61 & $47 | 0) == ($55 | 0))) {
    $$sroa$0$0 = 0; //@line 9117
    label = 40; //@line 9118
    break;
   }
   do {
    if ($62) {
     $65 = $$02837$us + 8 | 0; //@line 9123
     $67 = HEAP8[$65 + 11 >> 0] | 0; //@line 9125
     $68 = $67 << 24 >> 24 < 0; //@line 9126
     $71 = $67 & 255; //@line 9129
     if ((($68 ? HEAP32[$$02837$us + 12 >> 2] | 0 : $71) | 0) == ($10 | 0)) {
      $74 = HEAP32[$65 >> 2] | 0; //@line 9133
      $75 = $68 ? $74 : $65; //@line 9134
      if ($68) {
       if ($59) {
        $$sroa$0$0 = $$02837$us; //@line 9137
        label = 40; //@line 9138
        break L28;
       }
       if (!(_memcmp($75, $9, $10) | 0)) {
        $$sroa$0$0 = $$02837$us; //@line 9144
        label = 40; //@line 9145
        break L28;
       } else {
        break;
       }
      }
      if ($59) {
       $$sroa$0$0 = $$02837$us; //@line 9152
       label = 40; //@line 9153
       break L28;
      }
      if ((HEAP8[$9 >> 0] | 0) == ($74 & 255) << 24 >> 24) {
       $$02026$i$i4$i$us = $65; //@line 9161
       $$02125$i$i5$i$us = $71; //@line 9161
       $$027$i$i3$i$us = $9; //@line 9161
       do {
        $$02125$i$i5$i$us = $$02125$i$i5$i$us + -1 | 0; //@line 9163
        $$02026$i$i4$i$us = $$02026$i$i4$i$us + 1 | 0; //@line 9164
        if (!$$02125$i$i5$i$us) {
         $$sroa$0$0 = $$02837$us; //@line 9167
         label = 40; //@line 9168
         break L28;
        }
        $$027$i$i3$i$us = $$027$i$i3$i$us + 1 | 0; //@line 9171
       } while ((HEAP8[$$02026$i$i4$i$us >> 0] | 0) == (HEAP8[$$027$i$i3$i$us >> 0] | 0));
      }
     }
    }
   } while (0);
   $$02837$us = HEAP32[$$02837$us >> 2] | 0; //@line 9185
   if (!$$02837$us) {
    $$sroa$0$0 = 0; //@line 9188
    label = 40; //@line 9189
    break;
   }
  }
  if ((label | 0) == 40) {
   return $$sroa$0$0 | 0; //@line 9196
  }
 } else {
  $$02837 = $$02836; //@line 9199
 }
 L50 : while (1) {
  $89 = HEAP32[$$02837 + 4 >> 2] | 0; //@line 9203
  do {
   if (($89 | 0) == ($43 | 0)) {
    $96 = $$02837 + 8 | 0; //@line 9207
    $98 = HEAP8[$96 + 11 >> 0] | 0; //@line 9209
    $99 = $98 << 24 >> 24 < 0; //@line 9210
    $102 = $98 & 255; //@line 9213
    if ((($99 ? HEAP32[$$02837 + 12 >> 2] | 0 : $102) | 0) == ($10 | 0)) {
     $105 = HEAP32[$96 >> 2] | 0; //@line 9217
     $106 = $99 ? $105 : $96; //@line 9218
     if ($99) {
      if ($59) {
       $$sroa$0$0 = $$02837; //@line 9221
       label = 40; //@line 9222
       break L50;
      }
      if (!(_memcmp($106, $9, $10) | 0)) {
       $$sroa$0$0 = $$02837; //@line 9228
       label = 40; //@line 9229
       break L50;
      } else {
       break;
      }
     }
     if ($59) {
      $$sroa$0$0 = $$02837; //@line 9236
      label = 40; //@line 9237
      break L50;
     }
     if ((HEAP8[$9 >> 0] | 0) == ($105 & 255) << 24 >> 24) {
      $$02026$i$i4$i = $96; //@line 9245
      $$02125$i$i5$i = $102; //@line 9245
      $$027$i$i3$i = $9; //@line 9245
      do {
       $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 9247
       $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 9248
       if (!$$02125$i$i5$i) {
        $$sroa$0$0 = $$02837; //@line 9251
        label = 40; //@line 9252
        break L50;
       }
       $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 9255
      } while ((HEAP8[$$02026$i$i4$i >> 0] | 0) == (HEAP8[$$027$i$i3$i >> 0] | 0));
     }
    }
   } else {
    if ($89 >>> 0 < $45 >>> 0) {
     $93 = $89; //@line 9270
    } else {
     $93 = ($89 >>> 0) % ($45 >>> 0) | 0; //@line 9273
    }
    if (($93 | 0) != ($55 | 0)) {
     $$sroa$0$0 = 0; //@line 9277
     label = 40; //@line 9278
     break L50;
    }
   }
  } while (0);
  $$02837 = HEAP32[$$02837 >> 2] | 0; //@line 9283
  if (!$$02837) {
   $$sroa$0$0 = 0; //@line 9286
   label = 40; //@line 9287
   break;
  }
 }
 if ((label | 0) == 40) {
  return $$sroa$0$0 | 0; //@line 9294
 }
 return 0; //@line 9296
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa$i$i$i$i = 0, $$02026$i$i4$i = 0, $$02026$i$i4$i$us = 0, $$02125$i$i5$i = 0, $$02125$i$i5$i$us = 0, $$027$i$i3$i = 0, $$027$i$i3$i$us = 0, $$02836 = 0, $$02837 = 0, $$02837$us = 0, $$036$lcssa$i$i$i$i = 0, $$03639$i$i$i$i = 0, $$037$lcssa$i$i$i$i = 0, $$03738$i$i$i$i = 0, $$040$i$i$i$i = 0, $$1$i$i$i$i = 0, $$2$i$i$i$i = 0, $$3$i$i$i$i = 0, $$sroa$0$0 = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $12 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $71 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $93 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0;
 $3 = HEAP8[$1 + 11 >> 0] | 0; //@line 9311
 $4 = $3 << 24 >> 24 < 0; //@line 9312
 $9 = $4 ? HEAP32[$1 >> 2] | 0 : $1; //@line 9317
 $10 = $4 ? HEAP32[$1 + 4 >> 2] | 0 : $3 & 255; //@line 9318
 if ($10 >>> 0 > 3) {
  $$03639$i$i$i$i = $9; //@line 9321
  $$03738$i$i$i$i = $10; //@line 9321
  $$040$i$i$i$i = $10; //@line 9321
  while (1) {
   $12 = Math_imul(HEAPU8[$$03639$i$i$i$i >> 0] | HEAPU8[$$03639$i$i$i$i + 1 >> 0] << 8 | HEAPU8[$$03639$i$i$i$i + 2 >> 0] << 16 | HEAPU8[$$03639$i$i$i$i + 3 >> 0] << 24, 1540483477) | 0; //@line 9324
   $$03738$i$i$i$i = (Math_imul($12 >>> 24 ^ $12, 1540483477) | 0) ^ (Math_imul($$03738$i$i$i$i, 1540483477) | 0); //@line 9329
   $$040$i$i$i$i = $$040$i$i$i$i + -4 | 0; //@line 9331
   if ($$040$i$i$i$i >>> 0 <= 3) {
    break;
   } else {
    $$03639$i$i$i$i = $$03639$i$i$i$i + 4 | 0; //@line 9334
   }
  }
  $21 = $10 + -4 | 0; //@line 9339
  $22 = $21 & -4; //@line 9340
  $$0$lcssa$i$i$i$i = $21 - $22 | 0; //@line 9344
  $$036$lcssa$i$i$i$i = $9 + ($22 + 4) | 0; //@line 9344
  $$037$lcssa$i$i$i$i = $$03738$i$i$i$i; //@line 9344
 } else {
  $$0$lcssa$i$i$i$i = $10; //@line 9346
  $$036$lcssa$i$i$i$i = $9; //@line 9346
  $$037$lcssa$i$i$i$i = $10; //@line 9346
 }
 switch ($$0$lcssa$i$i$i$i | 0) {
 case 3:
  {
   $$1$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 2 >> 0] << 16 ^ $$037$lcssa$i$i$i$i; //@line 9355
   label = 6; //@line 9356
   break;
  }
 case 2:
  {
   $$1$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 9360
   label = 6; //@line 9361
   break;
  }
 case 1:
  {
   $$2$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 9365
   label = 7; //@line 9366
   break;
  }
 default:
  {
   $$3$i$i$i$i = $$037$lcssa$i$i$i$i; //@line 9370
  }
 }
 if ((label | 0) == 6) {
  $$2$i$i$i$i = HEAPU8[$$036$lcssa$i$i$i$i + 1 >> 0] << 8 ^ $$1$i$i$i$i; //@line 9379
  label = 7; //@line 9380
 }
 if ((label | 0) == 7) {
  $$3$i$i$i$i = Math_imul($$2$i$i$i$i ^ HEAPU8[$$036$lcssa$i$i$i$i >> 0], 1540483477) | 0; //@line 9387
 }
 $41 = Math_imul($$3$i$i$i$i >>> 13 ^ $$3$i$i$i$i, 1540483477) | 0; //@line 9391
 $43 = $41 >>> 15 ^ $41; //@line 9393
 $45 = HEAP32[$0 + 4 >> 2] | 0; //@line 9395
 if (!$45) {
  $$sroa$0$0 = 0; //@line 9398
  return $$sroa$0$0 | 0; //@line 9399
 }
 $47 = $45 + -1 | 0; //@line 9401
 $49 = ($47 & $45 | 0) == 0; //@line 9403
 if ($49) {
  $55 = $43 & $47; //@line 9406
 } else {
  if ($43 >>> 0 < $45 >>> 0) {
   $55 = $43; //@line 9410
  } else {
   $55 = ($43 >>> 0) % ($45 >>> 0) | 0; //@line 9413
  }
 }
 $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($55 << 2) >> 2] | 0; //@line 9418
 if (!$56) {
  $$sroa$0$0 = 0; //@line 9421
  return $$sroa$0$0 | 0; //@line 9422
 }
 $$02836 = HEAP32[$56 >> 2] | 0; //@line 9424
 if (!$$02836) {
  $$sroa$0$0 = 0; //@line 9427
  return $$sroa$0$0 | 0; //@line 9428
 }
 $59 = ($10 | 0) == 0; //@line 9430
 if ($49) {
  $$02837$us = $$02836; //@line 9432
  L28 : while (1) {
   $61 = HEAP32[$$02837$us + 4 >> 2] | 0; //@line 9435
   $62 = ($61 | 0) == ($43 | 0); //@line 9436
   if (!($62 | ($61 & $47 | 0) == ($55 | 0))) {
    $$sroa$0$0 = 0; //@line 9441
    label = 40; //@line 9442
    break;
   }
   do {
    if ($62) {
     $65 = $$02837$us + 8 | 0; //@line 9447
     $67 = HEAP8[$65 + 11 >> 0] | 0; //@line 9449
     $68 = $67 << 24 >> 24 < 0; //@line 9450
     $71 = $67 & 255; //@line 9453
     if ((($68 ? HEAP32[$$02837$us + 12 >> 2] | 0 : $71) | 0) == ($10 | 0)) {
      $74 = HEAP32[$65 >> 2] | 0; //@line 9457
      $75 = $68 ? $74 : $65; //@line 9458
      if ($68) {
       if ($59) {
        $$sroa$0$0 = $$02837$us; //@line 9461
        label = 40; //@line 9462
        break L28;
       }
       if (!(_memcmp($75, $9, $10) | 0)) {
        $$sroa$0$0 = $$02837$us; //@line 9468
        label = 40; //@line 9469
        break L28;
       } else {
        break;
       }
      }
      if ($59) {
       $$sroa$0$0 = $$02837$us; //@line 9476
       label = 40; //@line 9477
       break L28;
      }
      if ((HEAP8[$9 >> 0] | 0) == ($74 & 255) << 24 >> 24) {
       $$02026$i$i4$i$us = $65; //@line 9485
       $$02125$i$i5$i$us = $71; //@line 9485
       $$027$i$i3$i$us = $9; //@line 9485
       do {
        $$02125$i$i5$i$us = $$02125$i$i5$i$us + -1 | 0; //@line 9487
        $$02026$i$i4$i$us = $$02026$i$i4$i$us + 1 | 0; //@line 9488
        if (!$$02125$i$i5$i$us) {
         $$sroa$0$0 = $$02837$us; //@line 9491
         label = 40; //@line 9492
         break L28;
        }
        $$027$i$i3$i$us = $$027$i$i3$i$us + 1 | 0; //@line 9495
       } while ((HEAP8[$$02026$i$i4$i$us >> 0] | 0) == (HEAP8[$$027$i$i3$i$us >> 0] | 0));
      }
     }
    }
   } while (0);
   $$02837$us = HEAP32[$$02837$us >> 2] | 0; //@line 9509
   if (!$$02837$us) {
    $$sroa$0$0 = 0; //@line 9512
    label = 40; //@line 9513
    break;
   }
  }
  if ((label | 0) == 40) {
   return $$sroa$0$0 | 0; //@line 9520
  }
 } else {
  $$02837 = $$02836; //@line 9523
 }
 L50 : while (1) {
  $89 = HEAP32[$$02837 + 4 >> 2] | 0; //@line 9527
  do {
   if (($89 | 0) == ($43 | 0)) {
    $96 = $$02837 + 8 | 0; //@line 9531
    $98 = HEAP8[$96 + 11 >> 0] | 0; //@line 9533
    $99 = $98 << 24 >> 24 < 0; //@line 9534
    $102 = $98 & 255; //@line 9537
    if ((($99 ? HEAP32[$$02837 + 12 >> 2] | 0 : $102) | 0) == ($10 | 0)) {
     $105 = HEAP32[$96 >> 2] | 0; //@line 9541
     $106 = $99 ? $105 : $96; //@line 9542
     if ($99) {
      if ($59) {
       $$sroa$0$0 = $$02837; //@line 9545
       label = 40; //@line 9546
       break L50;
      }
      if (!(_memcmp($106, $9, $10) | 0)) {
       $$sroa$0$0 = $$02837; //@line 9552
       label = 40; //@line 9553
       break L50;
      } else {
       break;
      }
     }
     if ($59) {
      $$sroa$0$0 = $$02837; //@line 9560
      label = 40; //@line 9561
      break L50;
     }
     if ((HEAP8[$9 >> 0] | 0) == ($105 & 255) << 24 >> 24) {
      $$02026$i$i4$i = $96; //@line 9569
      $$02125$i$i5$i = $102; //@line 9569
      $$027$i$i3$i = $9; //@line 9569
      do {
       $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 9571
       $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 9572
       if (!$$02125$i$i5$i) {
        $$sroa$0$0 = $$02837; //@line 9575
        label = 40; //@line 9576
        break L50;
       }
       $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 9579
      } while ((HEAP8[$$02026$i$i4$i >> 0] | 0) == (HEAP8[$$027$i$i3$i >> 0] | 0));
     }
    }
   } else {
    if ($89 >>> 0 < $45 >>> 0) {
     $93 = $89; //@line 9594
    } else {
     $93 = ($89 >>> 0) % ($45 >>> 0) | 0; //@line 9597
    }
    if (($93 | 0) != ($55 | 0)) {
     $$sroa$0$0 = 0; //@line 9601
     label = 40; //@line 9602
     break L50;
    }
   }
  } while (0);
  $$02837 = HEAP32[$$02837 >> 2] | 0; //@line 9607
  if (!$$02837) {
   $$sroa$0$0 = 0; //@line 9610
   label = 40; //@line 9611
   break;
  }
 }
 if ((label | 0) == 40) {
  return $$sroa$0$0 | 0; //@line 9618
 }
 return 0; //@line 9620
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02026$i$i4$i = 0, $$02125$i$i5$i = 0, $$027$i$i3$i = 0, $$054$ph$ph103 = 0, $$055 = 0, $$055$in95104 = 0, $$055$in98 = 0, $$0559296101 = 0, $$0559296105 = 0, $$0559299 = 0, $$05593 = 0, $$056$ph$ph102 = 0, $$056$ph97 = 0, $$058106 = 0, $$066 = 0, $$072 = 0, $$072$phi = 0, $$072$us = 0, $$072$us$phi = 0, $$072$us77 = 0, $$072$us77$phi = 0, $106 = 0, $11 = 0, $117 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $30 = 0, $34 = 0, $38 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $69 = 0, $72 = 0, $74 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $96 = 0, label = 0;
 $2 = $0 + 4 | 0; //@line 3034
 if (!$1) {
  $117 = HEAP32[$0 >> 2] | 0; //@line 3037
  HEAP32[$0 >> 2] = 0; //@line 3038
  if ($117 | 0) {
   __ZdlPv($117); //@line 3041
  }
  HEAP32[$2 >> 2] = 0; //@line 3043
  return;
 }
 if ($1 >>> 0 > 1073741823) {
  $5 = ___cxa_allocate_exception(8) | 0; //@line 3048
  __THREW__ = 0; //@line 3049
  invoke_vii(119, $5 | 0, 31992); //@line 3050
  $6 = __THREW__; //@line 3051
  __THREW__ = 0; //@line 3051
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0; //@line 3054
   ___cxa_free_exception($5 | 0); //@line 3056
   ___resumeException($8 | 0); //@line 3057
  } else {
   HEAP32[$5 >> 2] = 13224; //@line 3060
   ___cxa_throw($5 | 0, 2856, 240); //@line 3061
  }
 }
 $11 = __Znwj($1 << 2) | 0; //@line 3066
 $12 = HEAP32[$0 >> 2] | 0; //@line 3067
 HEAP32[$0 >> 2] = $11; //@line 3068
 if ($12 | 0) {
  __ZdlPv($12); //@line 3071
 }
 HEAP32[$2 >> 2] = $1; //@line 3073
 $$058106 = 0; //@line 3074
 do {
  HEAP32[(HEAP32[$0 >> 2] | 0) + ($$058106 << 2) >> 2] = 0; //@line 3078
  $$058106 = $$058106 + 1 | 0; //@line 3079
 } while (($$058106 | 0) != ($1 | 0));
 $14 = $0 + 8 | 0; //@line 3087
 $15 = HEAP32[$14 >> 2] | 0; //@line 3088
 if (!$15) {
  return;
 }
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 3094
 $22 = $1 + -1 | 0; //@line 3095
 $24 = ($22 & $1 | 0) == 0; //@line 3097
 if ($24) {
  $30 = $21 & $22; //@line 3100
 } else {
  if ($21 >>> 0 < $1 >>> 0) {
   $30 = $21; //@line 3104
  } else {
   $30 = ($21 >>> 0) % ($1 >>> 0) | 0; //@line 3107
  }
 }
 HEAP32[(HEAP32[$0 >> 2] | 0) + ($30 << 2) >> 2] = $14; //@line 3112
 $$0559296101 = HEAP32[$15 >> 2] | 0; //@line 3113
 if (!$$0559296101) {
  return;
 } else {
  $$054$ph$ph103 = $30; //@line 3118
  $$055$in95104 = $15; //@line 3118
  $$0559296105 = $$0559296101; //@line 3118
  $$056$ph$ph102 = $15; //@line 3118
 }
 L30 : while (1) {
  $$055$in98 = $$055$in95104; //@line 3121
  $$0559299 = $$0559296105; //@line 3121
  $$056$ph97 = $$056$ph$ph102; //@line 3121
  L32 : while (1) {
   $$05593 = $$0559299; //@line 3123
   while (1) {
    $34 = HEAP32[$$05593 + 4 >> 2] | 0; //@line 3126
    if ($24) {
     $38 = $34 & $22; //@line 3129
    } else {
     if ($34 >>> 0 < $1 >>> 0) {
      $38 = $34; //@line 3133
     } else {
      $38 = ($34 >>> 0) % ($1 >>> 0) | 0; //@line 3136
     }
    }
    if (($38 | 0) == ($$054$ph$ph103 | 0)) {
     break;
    }
    $41 = (HEAP32[$0 >> 2] | 0) + ($38 << 2) | 0; //@line 3144
    if (!(HEAP32[$41 >> 2] | 0)) {
     break L32;
    }
    $44 = HEAP32[$$05593 >> 2] | 0; //@line 3150
    L43 : do {
     if (!$44) {
      $$066 = $$05593; //@line 3154
     } else {
      $46 = $$05593 + 8 | 0; //@line 3156
      $48 = HEAP8[$46 + 11 >> 0] | 0; //@line 3158
      $49 = $48 << 24 >> 24 < 0; //@line 3159
      $52 = $48 & 255; //@line 3162
      $53 = $49 ? HEAP32[$$05593 + 12 >> 2] | 0 : $52; //@line 3163
      $54 = ($53 | 0) == 0; //@line 3164
      if ($49) {
       $$072$us = $$05593; //@line 3166
       $56 = $44; //@line 3166
       while (1) {
        $55 = $56 + 8 | 0; //@line 3168
        $58 = HEAP8[$55 + 11 >> 0] | 0; //@line 3170
        $59 = $58 << 24 >> 24 < 0; //@line 3171
        if (($53 | 0) != (($59 ? HEAP32[$56 + 12 >> 2] | 0 : $58 & 255) | 0)) {
         $$066 = $$072$us; //@line 3178
         break L43;
        }
        if (!$54) {
         if (_memcmp(HEAP32[$46 >> 2] | 0, $59 ? HEAP32[$55 >> 2] | 0 : $55, $53) | 0) {
          $$066 = $$072$us; //@line 3188
          break L43;
         }
        }
        $69 = HEAP32[$56 >> 2] | 0; //@line 3192
        if (!$69) {
         $$066 = $56; //@line 3195
         break L43;
        } else {
         $$072$us$phi = $56; //@line 3198
         $56 = $69; //@line 3198
         $$072$us = $$072$us$phi; //@line 3198
        }
       }
      }
      if ($54) {
       $$072$us77 = $$05593; //@line 3203
       $72 = $44; //@line 3203
       while (1) {
        $74 = HEAP8[$72 + 8 + 11 >> 0] | 0; //@line 3207
        if (($74 << 24 >> 24 < 0 ? HEAP32[$72 + 12 >> 2] | 0 : $74 & 255) | 0) {
         $$066 = $$072$us77; //@line 3215
         break L43;
        }
        $81 = HEAP32[$72 >> 2] | 0; //@line 3218
        if (!$81) {
         $$066 = $72; //@line 3221
         break L43;
        } else {
         $$072$us77$phi = $72; //@line 3224
         $72 = $81; //@line 3224
         $$072$us77 = $$072$us77$phi; //@line 3224
        }
       }
      }
      $$072 = $$05593; //@line 3228
      $85 = $44; //@line 3228
      while (1) {
       $84 = $85 + 8 | 0; //@line 3230
       $87 = HEAP8[$84 + 11 >> 0] | 0; //@line 3232
       $88 = $87 << 24 >> 24 < 0; //@line 3233
       if (($53 | 0) != (($88 ? HEAP32[$85 + 12 >> 2] | 0 : $87 & 255) | 0)) {
        $$066 = $$072; //@line 3240
        break L43;
       }
       $96 = $88 ? HEAP32[$84 >> 2] | 0 : $84; //@line 3245
       if ((HEAP8[$96 >> 0] | 0) == (HEAP32[$46 >> 2] & 255) << 24 >> 24) {
        $$02026$i$i4$i = $46; //@line 3250
        $$02125$i$i5$i = $52; //@line 3250
        $$027$i$i3$i = $96; //@line 3250
       } else {
        $$066 = $$072; //@line 3252
        break L43;
       }
       while (1) {
        $$02125$i$i5$i = $$02125$i$i5$i + -1 | 0; //@line 3256
        $$02026$i$i4$i = $$02026$i$i4$i + 1 | 0; //@line 3257
        if (!$$02125$i$i5$i) {
         break;
        }
        $$027$i$i3$i = $$027$i$i3$i + 1 | 0; //@line 3262
        if ((HEAP8[$$02026$i$i4$i >> 0] | 0) != (HEAP8[$$027$i$i3$i >> 0] | 0)) {
         $$066 = $$072; //@line 3269
         break L43;
        }
       }
       $106 = HEAP32[$85 >> 2] | 0; //@line 3273
       if (!$106) {
        $$066 = $85; //@line 3276
        break;
       } else {
        $$072$phi = $85; //@line 3279
        $85 = $106; //@line 3279
        $$072 = $$072$phi; //@line 3279
       }
      }
     }
    } while (0);
    HEAP32[$$056$ph97 >> 2] = HEAP32[$$066 >> 2]; //@line 3285
    HEAP32[$$066 >> 2] = HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2]; //@line 3290
    HEAP32[HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] >> 2] = $$05593; //@line 3294
    $$055 = HEAP32[$$055$in98 >> 2] | 0; //@line 3295
    if (!$$055) {
     label = 45; //@line 3298
     break L30;
    } else {
     $$05593 = $$055; //@line 3301
    }
   }
   $$0559299 = HEAP32[$$05593 >> 2] | 0; //@line 3304
   if (!$$0559299) {
    label = 45; //@line 3307
    break L30;
   } else {
    $$055$in98 = $$05593; //@line 3310
    $$056$ph97 = $$05593; //@line 3310
   }
  }
  HEAP32[$41 >> 2] = $$056$ph97; //@line 3313
  $$0559296105 = HEAP32[$$05593 >> 2] | 0; //@line 3314
  if (!$$0559296105) {
   label = 45; //@line 3317
   break;
  } else {
   $$054$ph$ph103 = $38; //@line 3320
   $$055$in95104 = $$05593; //@line 3320
   $$056$ph$ph102 = $$05593; //@line 3320
  }
 }
 if ((label | 0) == 45) {
  return;
 }
}
function __ZN6Runner14doesStackExistE13CharmFunction($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$09 = 0, $$1 = 0, $$byval_copy2 = 0, $$sroa$036$044 = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $65 = 0, $66 = 0, $71 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $83 = 0, $87 = 0, $89 = 0, $90 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4781
 STACKTOP = STACKTOP + 192 | 0; //@line 4782
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192); //@line 4782
 $$byval_copy2 = sp + 177 | 0; //@line 4783
 $2 = sp + 176 | 0; //@line 4784
 $3 = sp; //@line 4785
 $4 = sp + 104 | 0; //@line 4786
 $6 = HEAP32[$0 + 72 >> 2] | 0; //@line 4788
 $8 = HEAP32[$0 + 76 >> 2] | 0; //@line 4790
 if (($6 | 0) == ($8 | 0)) {
  $$1 = 0; //@line 4793
  STACKTOP = sp; //@line 4794
  return $$1 | 0; //@line 4794
 }
 $10 = $3 + 8 | 0; //@line 4796
 $11 = $3 + 80 | 0; //@line 4797
 $12 = $4 + 52 | 0; //@line 4798
 $13 = $12 + 11 | 0; //@line 4799
 $14 = $4 + 40 | 0; //@line 4800
 $15 = $4 + 4 | 0; //@line 4801
 $16 = $15 + 11 | 0; //@line 4802
 $17 = $4 + 44 | 0; //@line 4803
 $18 = $4 + 48 | 0; //@line 4804
 $$sroa$036$044 = $6; //@line 4805
 L4 : while (1) {
  $21 = $$sroa$036$044; //@line 4807
  $26 = HEAP32[$21 + 4 >> 2] | 0; //@line 4812
  $27 = $3; //@line 4813
  HEAP32[$27 >> 2] = HEAP32[$21 >> 2]; //@line 4815
  HEAP32[$27 + 4 >> 2] = $26; //@line 4818
  __ZN13CharmFunctionC2ERKS_($10, $$sroa$036$044 + 8 | 0); //@line 4820
  __THREW__ = 0; //@line 4822
  invoke_vii(122, $11 | 0, $$sroa$036$044 + 80 | 0); //@line 4823
  $33 = __THREW__; //@line 4824
  __THREW__ = 0; //@line 4824
  if ($33 & 1) {
   label = 5; //@line 4827
   break;
  }
  __THREW__ = 0; //@line 4830
  invoke_vii(120, $4 | 0, $1 | 0); //@line 4831
  $63 = __THREW__; //@line 4832
  __THREW__ = 0; //@line 4832
  if ($63 & 1) {
   label = 32; //@line 4835
   break;
  }
  __THREW__ = 0; //@line 4838
  $65 = invoke_iii(56, $3 | 0, $4 | 0) | 0; //@line 4839
  $66 = __THREW__; //@line 4840
  __THREW__ = 0; //@line 4840
  if ($66 & 1) {
   label = 33; //@line 4843
   break;
  }
  if ((HEAP8[$13 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 4850
  }
  $71 = HEAP32[$14 >> 2] | 0; //@line 4852
  if ($71 | 0) {
   $73 = HEAP32[$17 >> 2] | 0; //@line 4855
   if (($73 | 0) == ($71 | 0)) {
    $83 = $71; //@line 4858
   } else {
    $76 = $73; //@line 4860
    do {
     $75 = $76 + -72 | 0; //@line 4862
     HEAP32[$17 >> 2] = $75; //@line 4863
     __THREW__ = 0; //@line 4864
     HEAP8[$$byval_copy2 >> 0] = HEAP8[$2 >> 0] | 0; //@line 4865
     invoke_viii(13, $$byval_copy2 | 0, $18 | 0, $75 | 0); //@line 4866
     $77 = __THREW__; //@line 4867
     __THREW__ = 0; //@line 4867
     if ($77 & 1) {
      label = 26; //@line 4870
      break L4;
     }
     $76 = HEAP32[$17 >> 2] | 0; //@line 4873
    } while (($76 | 0) != ($71 | 0));
    $83 = HEAP32[$14 >> 2] | 0; //@line 4882
   }
   __ZdlPv($83); //@line 4884
  }
  if ((HEAP8[$16 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$15 >> 2] | 0); //@line 4890
  }
  __ZN5StackD2Ev($3); //@line 4892
  $$sroa$036$044 = $$sroa$036$044 + 104 | 0; //@line 4893
  if ($65) {
   $$1 = 1; //@line 4895
   label = 46; //@line 4896
   break;
  }
  if (($$sroa$036$044 | 0) == ($8 | 0)) {
   $$1 = 0; //@line 4901
   label = 46; //@line 4902
   break;
  }
 }
 if ((label | 0) == 5) {
  $35 = ___cxa_find_matching_catch_2() | 0; //@line 4909
  $37 = $3 + 60 | 0; //@line 4911
  if ((HEAP8[$37 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$37 >> 2] | 0); //@line 4917
  }
  $42 = $3 + 48 | 0; //@line 4919
  $43 = HEAP32[$42 >> 2] | 0; //@line 4920
  if ($43 | 0) {
   $45 = $3 + 52 | 0; //@line 4923
   $46 = HEAP32[$45 >> 2] | 0; //@line 4924
   do {
    if (($46 | 0) == ($43 | 0)) {
     $57 = $43; //@line 4928
    } else {
     $48 = $3 + 56 | 0; //@line 4930
     $50 = $46; //@line 4931
     while (1) {
      $49 = $50 + -72 | 0; //@line 4933
      HEAP32[$45 >> 2] = $49; //@line 4934
      __THREW__ = 0; //@line 4935
      HEAP8[$$byval_copy2 >> 0] = HEAP8[$2 >> 0] | 0; //@line 4936
      invoke_viii(13, $$byval_copy2 | 0, $48 | 0, $49 | 0); //@line 4937
      $51 = __THREW__; //@line 4938
      __THREW__ = 0; //@line 4938
      if ($51 & 1) {
       label = 12; //@line 4941
       break;
      }
      $50 = HEAP32[$45 >> 2] | 0; //@line 4944
      if (($50 | 0) == ($43 | 0)) {
       label = 13; //@line 4947
       break;
      }
     }
     if ((label | 0) == 12) {
      $55 = ___cxa_find_matching_catch_3(0) | 0; //@line 4954
      ___clang_call_terminate($55); //@line 4956
     } else if ((label | 0) == 13) {
      $57 = HEAP32[$42 >> 2] | 0; //@line 4961
      break;
     }
    }
   } while (0);
   __ZdlPv($57); //@line 4966
  }
  $58 = $3 + 12 | 0; //@line 4968
  if ((HEAP8[$58 + 11 >> 0] | 0) >= 0) {
   ___resumeException($35 | 0); //@line 4973
  }
  __ZdlPv(HEAP32[$58 >> 2] | 0); //@line 4977
  ___resumeException($35 | 0); //@line 4978
 } else if ((label | 0) == 26) {
  $81 = ___cxa_find_matching_catch_3(0) | 0; //@line 4982
  ___clang_call_terminate($81); //@line 4984
 } else if ((label | 0) == 32) {
  $87 = ___cxa_find_matching_catch_2() | 0; //@line 4988
  $$0 = tempRet0; //@line 4990
  $$09 = $87; //@line 4990
  __ZN5StackD2Ev($3); //@line 4991
  ___resumeException($$09 | 0); //@line 4992
 } else if ((label | 0) == 33) {
  $89 = ___cxa_find_matching_catch_2() | 0; //@line 4996
  $90 = tempRet0; //@line 4997
  if ((HEAP8[$13 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$12 >> 2] | 0); //@line 5002
  }
  $94 = HEAP32[$14 >> 2] | 0; //@line 5004
  if ($94 | 0) {
   $96 = HEAP32[$17 >> 2] | 0; //@line 5007
   do {
    if (($96 | 0) == ($94 | 0)) {
     $106 = $94; //@line 5011
    } else {
     $99 = $96; //@line 5013
     while (1) {
      $98 = $99 + -72 | 0; //@line 5015
      HEAP32[$17 >> 2] = $98; //@line 5016
      __THREW__ = 0; //@line 5017
      HEAP8[$$byval_copy2 >> 0] = HEAP8[$2 >> 0] | 0; //@line 5018
      invoke_viii(13, $$byval_copy2 | 0, $18 | 0, $98 | 0); //@line 5019
      $100 = __THREW__; //@line 5020
      __THREW__ = 0; //@line 5020
      if ($100 & 1) {
       label = 40; //@line 5023
       break;
      }
      $99 = HEAP32[$17 >> 2] | 0; //@line 5026
      if (($99 | 0) == ($94 | 0)) {
       label = 41; //@line 5029
       break;
      }
     }
     if ((label | 0) == 40) {
      $104 = ___cxa_find_matching_catch_3(0) | 0; //@line 5036
      ___clang_call_terminate($104); //@line 5038
     } else if ((label | 0) == 41) {
      $106 = HEAP32[$14 >> 2] | 0; //@line 5043
      break;
     }
    }
   } while (0);
   __ZdlPv($106); //@line 5048
  }
  if ((HEAP8[$16 >> 0] | 0) >= 0) {
   $$0 = $90; //@line 5053
   $$09 = $89; //@line 5053
   __ZN5StackD2Ev($3); //@line 5054
   ___resumeException($$09 | 0); //@line 5055
  }
  __ZdlPv(HEAP32[$15 >> 2] | 0); //@line 5059
  $$0 = $90; //@line 5060
  $$09 = $89; //@line 5060
  __ZN5StackD2Ev($3); //@line 5061
  ___resumeException($$09 | 0); //@line 5062
 } else if ((label | 0) == 46) {
  STACKTOP = sp; //@line 5066
  return $$1 | 0; //@line 5066
 }
 return 0; //@line 5068
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i99 = 0, $$07$i$i = 0, $$07$i$i98 = 0, $$081 = 0, $$082 = 0, $$086 = 0, $$1 = 0, $$183 = 0, $$187 = 0, $$pre$phiZ2D = 0, $101 = 0, $113 = 0, $114 = 0, $116 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $38 = 0, $46 = 0, $51 = 0, $52 = 0, $54 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $95 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 38002
 STACKTOP = STACKTOP + 16 | 0; //@line 38003
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 38003
 $7 = sp; //@line 38004
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 35544) | 0; //@line 38005
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 35552) | 0; //@line 38006
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 255]($7, $9); //@line 38010
 $13 = $7 + 11 | 0; //@line 38011
 $14 = HEAP8[$13 >> 0] | 0; //@line 38012
 $16 = $7 + 4 | 0; //@line 38014
 L1 : do {
  if (!(($14 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $14 & 255) | 0)) {
   __THREW__ = 0; //@line 38024
   invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0, $8 | 0, $0 | 0, $2 | 0, $3 | 0) | 0; //@line 38025
   $24 = __THREW__; //@line 38026
   __THREW__ = 0; //@line 38026
   if ($24 & 1) {
    label = 28; //@line 38029
   } else {
    $27 = $0; //@line 38032
    $29 = $3 + ($2 - $27 << 2) | 0; //@line 38034
    HEAP32[$5 >> 2] = $29; //@line 38035
    $$pre$phiZ2D = $27; //@line 38036
    $124 = $29; //@line 38036
    label = 27; //@line 38037
   }
  } else {
   HEAP32[$5 >> 2] = $3; //@line 38040
   $30 = HEAP8[$0 >> 0] | 0; //@line 38041
   switch ($30 << 24 >> 24) {
   case 43:
   case 45:
    {
     __THREW__ = 0; //@line 38047
     $34 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, $30 | 0) | 0; //@line 38048
     $35 = __THREW__; //@line 38049
     __THREW__ = 0; //@line 38049
     if ($35 & 1) {
      label = 28; //@line 38052
      break L1;
     }
     $38 = HEAP32[$5 >> 2] | 0; //@line 38056
     HEAP32[$5 >> 2] = $38 + 4; //@line 38058
     HEAP32[$38 >> 2] = $34; //@line 38059
     $$086 = $0 + 1 | 0; //@line 38060
     break;
    }
   default:
    {
     $$086 = $0; //@line 38064
    }
   }
   L9 : do {
    if (($2 - $$086 | 0) > 1) {
     if ((HEAP8[$$086 >> 0] | 0) == 48) {
      $46 = $$086 + 1 | 0; //@line 38076
      switch (HEAP8[$46 >> 0] | 0) {
      case 88:
      case 120:
       {
        break;
       }
      default:
       {
        $$187 = $$086; //@line 38083
        break L9;
       }
      }
      __THREW__ = 0; //@line 38090
      $51 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, 48) | 0; //@line 38091
      $52 = __THREW__; //@line 38092
      __THREW__ = 0; //@line 38092
      if ($52 & 1) {
       label = 28; //@line 38095
       break L1;
      }
      $54 = HEAP32[$5 >> 2] | 0; //@line 38098
      HEAP32[$5 >> 2] = $54 + 4; //@line 38100
      HEAP32[$54 >> 2] = $51; //@line 38101
      __THREW__ = 0; //@line 38106
      $60 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, HEAP8[$46 >> 0] | 0) | 0; //@line 38107
      $61 = __THREW__; //@line 38108
      __THREW__ = 0; //@line 38108
      if ($61 & 1) {
       label = 28; //@line 38111
       break L1;
      }
      $64 = HEAP32[$5 >> 2] | 0; //@line 38115
      HEAP32[$5 >> 2] = $64 + 4; //@line 38117
      HEAP32[$64 >> 2] = $60; //@line 38118
      $$187 = $$086 + 2 | 0; //@line 38119
     } else {
      $$187 = $$086; //@line 38121
     }
    } else {
     $$187 = $$086; //@line 38124
    }
   } while (0);
   L16 : do {
    if (($$187 | 0) != ($2 | 0)) {
     $$0$i$i = $2; //@line 38130
     $$07$i$i = $$187; //@line 38130
     while (1) {
      $67 = $$0$i$i + -1 | 0; //@line 38132
      if ($$07$i$i >>> 0 >= $67 >>> 0) {
       break L16;
      }
      $69 = HEAP8[$$07$i$i >> 0] | 0; //@line 38137
      HEAP8[$$07$i$i >> 0] = HEAP8[$67 >> 0] | 0; //@line 38139
      HEAP8[$67 >> 0] = $69; //@line 38140
      $$0$i$i = $67; //@line 38142
      $$07$i$i = $$07$i$i + 1 | 0; //@line 38142
     }
    }
   } while (0);
   __THREW__ = 0; //@line 38149
   $75 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0, $9 | 0) | 0; //@line 38150
   $76 = __THREW__; //@line 38151
   __THREW__ = 0; //@line 38151
   if ($76 & 1) {
    label = 28; //@line 38154
   } else {
    $$0 = $$187; //@line 38156
    $$081 = 0; //@line 38156
    $$082 = 0; //@line 38156
    while (1) {
     if ($$0 >>> 0 >= $2 >>> 0) {
      break;
     }
     $95 = HEAP8[((HEAP8[$13 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$081 >> 0] | 0; //@line 38167
     if ($95 << 24 >> 24 != 0 & ($$082 | 0) == ($95 << 24 >> 24 | 0)) {
      $99 = HEAP32[$5 >> 2] | 0; //@line 38173
      HEAP32[$5 >> 2] = $99 + 4; //@line 38175
      HEAP32[$99 >> 2] = $75; //@line 38176
      $101 = HEAP8[$13 >> 0] | 0; //@line 38177
      $$1 = $$081 + ($$081 >>> 0 < (($101 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $101 & 255) + -1 | 0) >>> 0 & 1) | 0; //@line 38186
      $$183 = 0; //@line 38186
     } else {
      $$1 = $$081; //@line 38188
      $$183 = $$082; //@line 38188
     }
     __THREW__ = 0; //@line 38194
     $113 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, HEAP8[$$0 >> 0] | 0) | 0; //@line 38195
     $114 = __THREW__; //@line 38196
     __THREW__ = 0; //@line 38196
     if ($114 & 1) {
      label = 28; //@line 38199
      break L1;
     }
     $116 = HEAP32[$5 >> 2] | 0; //@line 38202
     HEAP32[$5 >> 2] = $116 + 4; //@line 38204
     HEAP32[$116 >> 2] = $113; //@line 38205
     $$0 = $$0 + 1 | 0; //@line 38208
     $$081 = $$1; //@line 38208
     $$082 = $$183 + 1 | 0; //@line 38208
    }
    $80 = $0; //@line 38211
    $82 = $3 + ($$187 - $80 << 2) | 0; //@line 38213
    $83 = HEAP32[$5 >> 2] | 0; //@line 38214
    if (($82 | 0) == ($83 | 0)) {
     $$pre$phiZ2D = $80; //@line 38217
     $124 = $82; //@line 38217
     label = 27; //@line 38218
    } else {
     $$0$i$i99 = $83; //@line 38220
     $$07$i$i98 = $82; //@line 38220
     while (1) {
      $85 = $$0$i$i99 + -4 | 0; //@line 38222
      if ($$07$i$i98 >>> 0 >= $85 >>> 0) {
       break;
      }
      $87 = HEAP32[$$07$i$i98 >> 2] | 0; //@line 38227
      HEAP32[$$07$i$i98 >> 2] = HEAP32[$85 >> 2]; //@line 38229
      HEAP32[$85 >> 2] = $87; //@line 38230
      $$0$i$i99 = $85; //@line 38232
      $$07$i$i98 = $$07$i$i98 + 4 | 0; //@line 38232
     }
     $$pre$phiZ2D = $80; //@line 38235
     $124 = HEAP32[$5 >> 2] | 0; //@line 38235
     label = 27; //@line 38236
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $124 : $3 + ($1 - $$pre$phiZ2D << 2) | 0; //@line 38247
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 38248
  STACKTOP = sp; //@line 38249
  return;
 } else if ((label | 0) == 28) {
  $125 = ___cxa_find_matching_catch_2() | 0; //@line 38252
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 38254
  ___resumeException($125 | 0); //@line 38255
 }
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i96 = 0, $$07$i$i = 0, $$07$i$i95 = 0, $$078 = 0, $$079 = 0, $$083 = 0, $$1 = 0, $$180 = 0, $$184 = 0, $$pre$phiZ2D = 0, $101 = 0, $113 = 0, $114 = 0, $116 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $38 = 0, $46 = 0, $51 = 0, $52 = 0, $54 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $95 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 36280
 STACKTOP = STACKTOP + 16 | 0; //@line 36281
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 36281
 $7 = sp; //@line 36282
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 35512) | 0; //@line 36283
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 35528) | 0; //@line 36284
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 255]($7, $9); //@line 36288
 $13 = $7 + 11 | 0; //@line 36289
 $14 = HEAP8[$13 >> 0] | 0; //@line 36290
 $16 = $7 + 4 | 0; //@line 36292
 L1 : do {
  if (!(($14 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $14 & 255) | 0)) {
   __THREW__ = 0; //@line 36302
   invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0, $8 | 0, $0 | 0, $2 | 0, $3 | 0) | 0; //@line 36303
   $24 = __THREW__; //@line 36304
   __THREW__ = 0; //@line 36304
   if ($24 & 1) {
    label = 28; //@line 36307
   } else {
    $27 = $0; //@line 36310
    $29 = $3 + ($2 - $27) | 0; //@line 36312
    HEAP32[$5 >> 2] = $29; //@line 36313
    $$pre$phiZ2D = $27; //@line 36314
    $124 = $29; //@line 36314
    label = 27; //@line 36315
   }
  } else {
   HEAP32[$5 >> 2] = $3; //@line 36318
   $30 = HEAP8[$0 >> 0] | 0; //@line 36319
   switch ($30 << 24 >> 24) {
   case 43:
   case 45:
    {
     __THREW__ = 0; //@line 36325
     $34 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, $30 | 0) | 0; //@line 36326
     $35 = __THREW__; //@line 36327
     __THREW__ = 0; //@line 36327
     if ($35 & 1) {
      label = 28; //@line 36330
      break L1;
     }
     $38 = HEAP32[$5 >> 2] | 0; //@line 36334
     HEAP32[$5 >> 2] = $38 + 1; //@line 36336
     HEAP8[$38 >> 0] = $34; //@line 36337
     $$083 = $0 + 1 | 0; //@line 36338
     break;
    }
   default:
    {
     $$083 = $0; //@line 36342
    }
   }
   L9 : do {
    if (($2 - $$083 | 0) > 1) {
     if ((HEAP8[$$083 >> 0] | 0) == 48) {
      $46 = $$083 + 1 | 0; //@line 36354
      switch (HEAP8[$46 >> 0] | 0) {
      case 88:
      case 120:
       {
        break;
       }
      default:
       {
        $$184 = $$083; //@line 36361
        break L9;
       }
      }
      __THREW__ = 0; //@line 36368
      $51 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, 48) | 0; //@line 36369
      $52 = __THREW__; //@line 36370
      __THREW__ = 0; //@line 36370
      if ($52 & 1) {
       label = 28; //@line 36373
       break L1;
      }
      $54 = HEAP32[$5 >> 2] | 0; //@line 36376
      HEAP32[$5 >> 2] = $54 + 1; //@line 36378
      HEAP8[$54 >> 0] = $51; //@line 36379
      __THREW__ = 0; //@line 36384
      $60 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, HEAP8[$46 >> 0] | 0) | 0; //@line 36385
      $61 = __THREW__; //@line 36386
      __THREW__ = 0; //@line 36386
      if ($61 & 1) {
       label = 28; //@line 36389
       break L1;
      }
      $64 = HEAP32[$5 >> 2] | 0; //@line 36393
      HEAP32[$5 >> 2] = $64 + 1; //@line 36395
      HEAP8[$64 >> 0] = $60; //@line 36396
      $$184 = $$083 + 2 | 0; //@line 36397
     } else {
      $$184 = $$083; //@line 36399
     }
    } else {
     $$184 = $$083; //@line 36402
    }
   } while (0);
   L16 : do {
    if (($$184 | 0) != ($2 | 0)) {
     $$0$i$i = $2; //@line 36408
     $$07$i$i = $$184; //@line 36408
     while (1) {
      $67 = $$0$i$i + -1 | 0; //@line 36410
      if ($$07$i$i >>> 0 >= $67 >>> 0) {
       break L16;
      }
      $69 = HEAP8[$$07$i$i >> 0] | 0; //@line 36415
      HEAP8[$$07$i$i >> 0] = HEAP8[$67 >> 0] | 0; //@line 36417
      HEAP8[$67 >> 0] = $69; //@line 36418
      $$0$i$i = $67; //@line 36420
      $$07$i$i = $$07$i$i + 1 | 0; //@line 36420
     }
    }
   } while (0);
   __THREW__ = 0; //@line 36427
   $75 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0, $9 | 0) | 0; //@line 36428
   $76 = __THREW__; //@line 36429
   __THREW__ = 0; //@line 36429
   if ($76 & 1) {
    label = 28; //@line 36432
   } else {
    $$0 = $$184; //@line 36434
    $$078 = 0; //@line 36434
    $$079 = 0; //@line 36434
    while (1) {
     if ($$0 >>> 0 >= $2 >>> 0) {
      break;
     }
     $95 = HEAP8[((HEAP8[$13 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$078 >> 0] | 0; //@line 36445
     if ($95 << 24 >> 24 != 0 & ($$079 | 0) == ($95 << 24 >> 24 | 0)) {
      $99 = HEAP32[$5 >> 2] | 0; //@line 36451
      HEAP32[$5 >> 2] = $99 + 1; //@line 36453
      HEAP8[$99 >> 0] = $75; //@line 36454
      $101 = HEAP8[$13 >> 0] | 0; //@line 36455
      $$1 = $$078 + ($$078 >>> 0 < (($101 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $101 & 255) + -1 | 0) >>> 0 & 1) | 0; //@line 36464
      $$180 = 0; //@line 36464
     } else {
      $$1 = $$078; //@line 36466
      $$180 = $$079; //@line 36466
     }
     __THREW__ = 0; //@line 36472
     $113 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, HEAP8[$$0 >> 0] | 0) | 0; //@line 36473
     $114 = __THREW__; //@line 36474
     __THREW__ = 0; //@line 36474
     if ($114 & 1) {
      label = 28; //@line 36477
      break L1;
     }
     $116 = HEAP32[$5 >> 2] | 0; //@line 36480
     HEAP32[$5 >> 2] = $116 + 1; //@line 36482
     HEAP8[$116 >> 0] = $113; //@line 36483
     $$0 = $$0 + 1 | 0; //@line 36486
     $$078 = $$1; //@line 36486
     $$079 = $$180 + 1 | 0; //@line 36486
    }
    $80 = $0; //@line 36489
    $82 = $3 + ($$184 - $80) | 0; //@line 36491
    $83 = HEAP32[$5 >> 2] | 0; //@line 36492
    if (($82 | 0) == ($83 | 0)) {
     $$pre$phiZ2D = $80; //@line 36495
     $124 = $82; //@line 36495
     label = 27; //@line 36496
    } else {
     $$0$i$i96 = $83; //@line 36498
     $$07$i$i95 = $82; //@line 36498
     while (1) {
      $85 = $$0$i$i96 + -1 | 0; //@line 36500
      if ($$07$i$i95 >>> 0 >= $85 >>> 0) {
       break;
      }
      $87 = HEAP8[$$07$i$i95 >> 0] | 0; //@line 36505
      HEAP8[$$07$i$i95 >> 0] = HEAP8[$85 >> 0] | 0; //@line 36507
      HEAP8[$85 >> 0] = $87; //@line 36508
      $$0$i$i96 = $85; //@line 36510
      $$07$i$i95 = $$07$i$i95 + 1 | 0; //@line 36510
     }
     $$pre$phiZ2D = $80; //@line 36513
     $124 = HEAP32[$5 >> 2] | 0; //@line 36513
     label = 27; //@line 36514
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $124 : $3 + ($1 - $$pre$phiZ2D) | 0; //@line 36525
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 36526
  STACKTOP = sp; //@line 36527
  return;
 } else if ((label | 0) == 28) {
  $125 = ___cxa_find_matching_catch_2() | 0; //@line 36530
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7); //@line 36532
  ___resumeException($125 | 0); //@line 36533
 }
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$6 = 0, $$7 = 0, $$cast = 0, $$phi$trans$insert = 0, $$phi$trans$insert64 = 0, $$phi$trans$insert67 = 0, $$pre = 0, $$pre$phi72Z2D = 0, $$pre$phi73Z2D = 0, $$pre$phi75Z2D = 0, $$pre$phi78Z2D = 0, $$pre$phiZ2D = 0, $$pre68 = 0, $$pre70 = 0, $$sink$i = 0, $$sink4$i = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $17 = 0, $2 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $5 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $86 = 0, $88 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22029
 STACKTOP = STACKTOP + 16 | 0; //@line 22030
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22030
 $2 = sp + 8 | 0; //@line 22031
 $3 = sp + 4 | 0; //@line 22032
 $4 = sp; //@line 22033
 $5 = $0 + 64 | 0; //@line 22034
 if (!(HEAP32[$5 >> 2] | 0)) {
  $$7 = -1; //@line 22038
  STACKTOP = sp; //@line 22039
  return $$7 | 0; //@line 22039
 }
 $8 = $0 + 92 | 0; //@line 22041
 if (!(HEAP32[$8 >> 2] & 16)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 22047
  HEAP32[$0 + 12 >> 2] = 0; //@line 22049
  HEAP32[$0 + 16 >> 2] = 0; //@line 22051
  $17 = HEAP32[$0 + 52 >> 2] | 0; //@line 22053
  do {
   if ($17 >>> 0 > 8) {
    if (!(HEAP8[$0 + 98 >> 0] | 0)) {
     $27 = HEAP32[$0 + 56 >> 2] | 0; //@line 22062
     $$sink$i = $27 + ((HEAP32[$0 + 60 >> 2] | 0) + -1) | 0; //@line 22067
     $$sink4$i = $27; //@line 22067
     break;
    } else {
     $23 = HEAP32[$0 + 32 >> 2] | 0; //@line 22071
     $$sink$i = $23 + ($17 + -1) | 0; //@line 22074
     $$sink4$i = $23; //@line 22074
     break;
    }
   } else {
    $$sink$i = 0; //@line 22078
    $$sink4$i = 0; //@line 22078
   }
  } while (0);
  HEAP32[$0 + 24 >> 2] = $$sink4$i; //@line 22082
  $33 = $0 + 20 | 0; //@line 22083
  HEAP32[$33 >> 2] = $$sink4$i; //@line 22084
  $34 = $0 + 28 | 0; //@line 22085
  HEAP32[$34 >> 2] = $$sink$i; //@line 22086
  HEAP32[$8 >> 2] = 16; //@line 22087
  $$pre$phi72Z2D = $33; //@line 22090
  $$pre$phi73Z2D = $34; //@line 22090
  $$pre$phi75Z2D = $34; //@line 22090
  $$pre$phiZ2D = $33; //@line 22090
  $108 = $$sink4$i; //@line 22090
  $109 = $$sink$i; //@line 22090
  $110 = $$sink4$i; //@line 22090
 } else {
  $$phi$trans$insert = $0 + 20 | 0; //@line 22092
  $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 22093
  $$phi$trans$insert64 = $0 + 28 | 0; //@line 22094
  $$pre$phi72Z2D = $$phi$trans$insert; //@line 22097
  $$pre$phi73Z2D = $$phi$trans$insert64; //@line 22097
  $$pre$phi75Z2D = $$phi$trans$insert64; //@line 22097
  $$pre$phiZ2D = $$phi$trans$insert; //@line 22097
  $108 = $$pre; //@line 22097
  $109 = HEAP32[$$phi$trans$insert64 >> 2] | 0; //@line 22097
  $110 = $$pre; //@line 22097
 }
 $37 = ($1 | 0) == -1; //@line 22099
 $$phi$trans$insert67 = $0 + 24 | 0; //@line 22100
 $$pre68 = HEAP32[$$phi$trans$insert67 >> 2] | 0; //@line 22101
 if ($37) {
  $44 = $$pre68; //@line 22103
  $46 = $110; //@line 22103
 } else {
  if (!$$pre68) {
   HEAP32[$$phi$trans$insert67 >> 2] = $2; //@line 22108
   HEAP32[$$pre$phiZ2D >> 2] = $2; //@line 22109
   HEAP32[$$pre$phi73Z2D >> 2] = $2 + 1; //@line 22110
   $41 = $2; //@line 22111
  } else {
   $41 = $$pre68; //@line 22113
  }
  HEAP8[$41 >> 0] = $1; //@line 22116
  $43 = (HEAP32[$$phi$trans$insert67 >> 2] | 0) + 1 | 0; //@line 22118
  HEAP32[$$phi$trans$insert67 >> 2] = $43; //@line 22119
  $44 = $43; //@line 22121
  $46 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 22121
 }
 L20 : do {
  if (($44 | 0) == ($46 | 0)) {
   label = 32; //@line 22126
  } else {
   L22 : do {
    if (!(HEAP8[$0 + 98 >> 0] | 0)) {
     $56 = $0 + 32 | 0; //@line 22133
     $57 = HEAP32[$56 >> 2] | 0; //@line 22134
     HEAP32[$3 >> 2] = $57; //@line 22135
     $58 = $0 + 68 | 0; //@line 22136
     $59 = HEAP32[$58 >> 2] | 0; //@line 22137
     if (!$59) {
      $73 = ___cxa_allocate_exception(4) | 0; //@line 22140
      __ZNSt8bad_castC2Ev($73); //@line 22141
      ___cxa_throw($73 | 0, 2904, 248); //@line 22142
     }
     $61 = $57; //@line 22145
     $62 = $0 + 72 | 0; //@line 22146
     $63 = $0 + 52 | 0; //@line 22147
     $69 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$59 >> 2] | 0) + 12 >> 2] & 15]($59, $62, $46, $44, $4, $61, $61 + (HEAP32[$63 >> 2] | 0) | 0, $3) | 0; //@line 22153
     $71 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 22155
     L27 : do {
      if ((HEAP32[$4 >> 2] | 0) != ($71 | 0)) {
       $74 = $69; //@line 22159
       $77 = $71; //@line 22159
       while (1) {
        if (($74 | 0) == 3) {
         label = 21; //@line 22163
         break;
        }
        if ($74 >>> 0 >= 2) {
         break L27;
        }
        $86 = HEAP32[$56 >> 2] | 0; //@line 22172
        $88 = (HEAP32[$3 >> 2] | 0) - $86 | 0; //@line 22174
        if ((_fwrite($86, 1, $88, HEAP32[$5 >> 2] | 0) | 0) != ($88 | 0)) {
         break L27;
        }
        if (($74 | 0) != 1) {
         label = 28; //@line 22182
         break;
        }
        $92 = HEAP32[$4 >> 2] | 0; //@line 22185
        $93 = HEAP32[$$phi$trans$insert67 >> 2] | 0; //@line 22186
        HEAP32[$$pre$phi72Z2D >> 2] = $92; //@line 22187
        HEAP32[$$pre$phi73Z2D >> 2] = $93; //@line 22188
        $$cast = $92; //@line 22191
        $96 = $$cast + ($93 - $92) | 0; //@line 22192
        HEAP32[$$phi$trans$insert67 >> 2] = $96; //@line 22193
        $97 = HEAP32[$58 >> 2] | 0; //@line 22194
        if (!$97) {
         label = 19; //@line 22197
         break;
        }
        $$pre70 = HEAP32[$56 >> 2] | 0; //@line 22200
        $74 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$97 >> 2] | 0) + 12 >> 2] & 15]($97, $62, $$cast, $96, $4, $$pre70, $$pre70 + (HEAP32[$63 >> 2] | 0) | 0, $3) | 0; //@line 22206
        $106 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 22208
        if ((HEAP32[$4 >> 2] | 0) == ($106 | 0)) {
         break L27;
        } else {
         $77 = $106; //@line 22213
        }
       }
       if ((label | 0) == 19) {
        $73 = ___cxa_allocate_exception(4) | 0; //@line 22217
        __ZNSt8bad_castC2Ev($73); //@line 22218
        ___cxa_throw($73 | 0, 2904, 248); //@line 22219
       } else if ((label | 0) == 21) {
        $79 = (HEAP32[$$phi$trans$insert67 >> 2] | 0) - $77 | 0; //@line 22225
        if ((_fwrite($77, 1, $79, HEAP32[$5 >> 2] | 0) | 0) != ($79 | 0)) {
         break;
        }
       } else if ((label | 0) == 28) {}
       $$pre$phi78Z2D = $$phi$trans$insert67; //@line 22235
       break L22;
      }
     } while (0);
     $$6 = -1; //@line 22239
     break L20;
    } else {
     $52 = $44 - $46 | 0; //@line 22244
     if ((_fwrite($46, 1, $52, HEAP32[$5 >> 2] | 0) | 0) != ($52 | 0)) {
      $$6 = -1; //@line 22249
      break L20;
     }
     $$pre$phi78Z2D = $$phi$trans$insert67; //@line 22252
    }
   } while (0);
   HEAP32[$$pre$phi78Z2D >> 2] = $108; //@line 22255
   HEAP32[$$pre$phi72Z2D >> 2] = $108; //@line 22256
   HEAP32[$$pre$phi75Z2D >> 2] = $109; //@line 22257
   label = 32; //@line 22258
  }
 } while (0);
 if ((label | 0) == 32) {
  $$6 = $37 ? 0 : $1; //@line 22263
 }
 $$7 = $$6; //@line 22265
 STACKTOP = sp; //@line 22266
 return $$7 | 0; //@line 22266
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24980 = 0, $$25279 = 0, $$45482 = 0, $$483 = 0, $$byval_copy = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 37144
 STACKTOP = STACKTOP + 336 | 0; //@line 37145
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336); //@line 37145
 $$byval_copy = sp + 300 | 0; //@line 37146
 $vararg_buffer9 = sp + 48 | 0; //@line 37147
 $vararg_buffer5 = sp + 32 | 0; //@line 37148
 $vararg_buffer2 = sp + 24 | 0; //@line 37149
 $vararg_buffer = sp + 8 | 0; //@line 37150
 $5 = sp; //@line 37151
 $6 = sp + 304 | 0; //@line 37152
 $7 = sp + 296 | 0; //@line 37153
 $8 = sp + 68 | 0; //@line 37154
 $9 = sp + 64 | 0; //@line 37155
 $10 = sp + 60 | 0; //@line 37156
 $11 = sp + 56 | 0; //@line 37157
 $12 = $5; //@line 37158
 HEAP32[$12 >> 2] = 37; //@line 37160
 HEAP32[$12 + 4 >> 2] = 0; //@line 37163
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 30015, HEAP32[$2 + 4 >> 2] | 0) | 0; //@line 37167
 HEAP32[$7 >> 2] = $6; //@line 37168
 $20 = __ZNSt3__26__clocEv() | 0; //@line 37169
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2]; //@line 37173
  HEAPF64[$vararg_buffer + 8 >> 3] = $4; //@line 37175
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0; //@line 37177
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4; //@line 37179
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0; //@line 37181
 }
 L5 : do {
  if (($$0 | 0) > 29) {
   if ($19) {
    __THREW__ = 0; //@line 37187
    $26 = invoke_i(2) | 0; //@line 37188
    $27 = __THREW__; //@line 37189
    __THREW__ = 0; //@line 37189
    if (!($27 & 1)) {
     __THREW__ = 0; //@line 37194
     HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 37195
     HEAPF64[$vararg_buffer5 + 8 >> 3] = $4; //@line 37197
     $31 = invoke_iiiii(15, $7 | 0, $26 | 0, $5 | 0, $vararg_buffer5 | 0) | 0; //@line 37198
     $32 = __THREW__; //@line 37199
     __THREW__ = 0; //@line 37199
     if (!($32 & 1)) {
      $$1 = $31; //@line 37202
      label = 12; //@line 37203
     }
    }
   } else {
    __THREW__ = 0; //@line 37207
    $36 = invoke_i(2) | 0; //@line 37208
    $37 = __THREW__; //@line 37209
    __THREW__ = 0; //@line 37209
    if (!($37 & 1)) {
     __THREW__ = 0; //@line 37212
     HEAPF64[$vararg_buffer9 >> 3] = $4; //@line 37213
     $39 = invoke_iiiii(15, $7 | 0, $36 | 0, $5 | 0, $vararg_buffer9 | 0) | 0; //@line 37214
     $40 = __THREW__; //@line 37215
     __THREW__ = 0; //@line 37215
     if (!($40 & 1)) {
      $$1 = $39; //@line 37218
      label = 12; //@line 37219
     }
    }
   }
   do {
    if ((label | 0) == 12) {
     $42 = HEAP32[$7 >> 2] | 0; //@line 37225
     if (!$42) {
      __THREW__ = 0; //@line 37228
      invoke_v(4); //@line 37229
      __THREW__ = 0; //@line 37230
      break;
     } else {
      $$2 = $$1; //@line 37234
      $$sroa$069$0 = $42; //@line 37234
      $47 = $42; //@line 37234
      label = 15; //@line 37235
      break L5;
     }
    }
   } while (0);
   $34 = ___cxa_find_matching_catch_2() | 0; //@line 37240
   $$45482 = tempRet0; //@line 37242
   $$483 = $34; //@line 37242
  } else {
   $$2 = $$0; //@line 37245
   $$sroa$069$0 = 0; //@line 37245
   $47 = HEAP32[$7 >> 2] | 0; //@line 37245
   label = 15; //@line 37246
  }
 } while (0);
 if ((label | 0) == 15) {
  $46 = $47 + $$2 | 0; //@line 37250
  $48 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47, $46, $2) | 0; //@line 37251
  do {
   if (($47 | 0) == ($6 | 0)) {
    $$046 = $8; //@line 37255
    $$sroa$058$0 = 0; //@line 37255
    label = 19; //@line 37256
   } else {
    $51 = _malloc($$2 << 3) | 0; //@line 37259
    if (!$51) {
     __THREW__ = 0; //@line 37262
     invoke_v(4); //@line 37263
     __THREW__ = 0; //@line 37264
     $54 = ___cxa_find_matching_catch_2() | 0; //@line 37265
     $$24980 = $54; //@line 37267
     $$25279 = tempRet0; //@line 37267
     break;
    } else {
     $$046 = $51; //@line 37271
     $$sroa$058$0 = $51; //@line 37271
     label = 19; //@line 37272
     break;
    }
   }
  } while (0);
  if ((label | 0) == 19) {
   __THREW__ = 0; //@line 37278
   invoke_vii(132, $$byval_copy | 0, $2 | 0); //@line 37279
   $57 = __THREW__; //@line 37280
   __THREW__ = 0; //@line 37280
   do {
    if ($57 & 1) {
     $71 = ___cxa_find_matching_catch_2() | 0; //@line 37284
     $$047 = $71; //@line 37286
     $$050 = tempRet0; //@line 37286
     label = 29; //@line 37287
    } else {
     __THREW__ = 0; //@line 37289
     invoke_viiiiiii(5, $47 | 0, $48 | 0, $46 | 0, $$046 | 0, $9 | 0, $10 | 0, $$byval_copy | 0); //@line 37290
     $59 = __THREW__; //@line 37291
     __THREW__ = 0; //@line 37291
     if ($59 & 1) {
      $73 = ___cxa_find_matching_catch_2() | 0; //@line 37294
      $74 = tempRet0; //@line 37295
      __ZNSt3__26localeD2Ev($$byval_copy); //@line 37296
      $$047 = $73; //@line 37297
      $$050 = $74; //@line 37297
      label = 29; //@line 37298
      break;
     }
     __ZNSt3__26localeD2Ev($$byval_copy); //@line 37301
     HEAP32[$11 >> 2] = HEAP32[$1 >> 2]; //@line 37303
     $62 = HEAP32[$9 >> 2] | 0; //@line 37304
     $63 = HEAP32[$10 >> 2] | 0; //@line 37305
     __THREW__ = 0; //@line 37306
     HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2]; //@line 37307
     $64 = invoke_iiiiiii(40, $$byval_copy | 0, $$046 | 0, $62 | 0, $63 | 0, $2 | 0, $3 | 0) | 0; //@line 37308
     $65 = __THREW__; //@line 37309
     __THREW__ = 0; //@line 37309
     if ($65 & 1) {
      $75 = ___cxa_find_matching_catch_2() | 0; //@line 37312
      $$148 = $75; //@line 37314
      $$151 = tempRet0; //@line 37314
      break;
     }
     HEAP32[$1 >> 2] = $64; //@line 37317
     if ($$sroa$058$0 | 0) {
      _free($$sroa$058$0); //@line 37321
     }
     if ($$sroa$069$0 | 0) {
      _free($$sroa$069$0); //@line 37326
     }
     STACKTOP = sp; //@line 37328
     return $64 | 0; //@line 37328
    }
   } while (0);
   if ((label | 0) == 29) {
    $$148 = $$047; //@line 37332
    $$151 = $$050; //@line 37332
   }
   if (!$$sroa$058$0) {
    $$24980 = $$148; //@line 37336
    $$25279 = $$151; //@line 37336
   } else {
    _free($$sroa$058$0); //@line 37339
    $$24980 = $$148; //@line 37340
    $$25279 = $$151; //@line 37340
   }
  }
  if (!$$sroa$069$0) {
   $$45482 = $$25279; //@line 37345
   $$483 = $$24980; //@line 37345
  } else {
   _free($$sroa$069$0); //@line 37348
   $$45482 = $$25279; //@line 37349
   $$483 = $$24980; //@line 37349
  }
 }
 ___resumeException($$483 | 0); //@line 37352
 return 0; //@line 37354
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24980 = 0, $$25279 = 0, $$45482 = 0, $$483 = 0, $$byval_copy = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 36921
 STACKTOP = STACKTOP + 336 | 0; //@line 36922
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336); //@line 36922
 $$byval_copy = sp + 300 | 0; //@line 36923
 $vararg_buffer9 = sp + 48 | 0; //@line 36924
 $vararg_buffer5 = sp + 32 | 0; //@line 36925
 $vararg_buffer2 = sp + 24 | 0; //@line 36926
 $vararg_buffer = sp + 8 | 0; //@line 36927
 $5 = sp; //@line 36928
 $6 = sp + 304 | 0; //@line 36929
 $7 = sp + 296 | 0; //@line 36930
 $8 = sp + 68 | 0; //@line 36931
 $9 = sp + 64 | 0; //@line 36932
 $10 = sp + 60 | 0; //@line 36933
 $11 = sp + 56 | 0; //@line 36934
 $12 = $5; //@line 36935
 HEAP32[$12 >> 2] = 37; //@line 36937
 HEAP32[$12 + 4 >> 2] = 0; //@line 36940
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 39514, HEAP32[$2 + 4 >> 2] | 0) | 0; //@line 36944
 HEAP32[$7 >> 2] = $6; //@line 36945
 $20 = __ZNSt3__26__clocEv() | 0; //@line 36946
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2]; //@line 36950
  HEAPF64[$vararg_buffer + 8 >> 3] = $4; //@line 36952
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0; //@line 36954
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4; //@line 36956
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0; //@line 36958
 }
 L5 : do {
  if (($$0 | 0) > 29) {
   if ($19) {
    __THREW__ = 0; //@line 36964
    $26 = invoke_i(2) | 0; //@line 36965
    $27 = __THREW__; //@line 36966
    __THREW__ = 0; //@line 36966
    if (!($27 & 1)) {
     __THREW__ = 0; //@line 36971
     HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 36972
     HEAPF64[$vararg_buffer5 + 8 >> 3] = $4; //@line 36974
     $31 = invoke_iiiii(15, $7 | 0, $26 | 0, $5 | 0, $vararg_buffer5 | 0) | 0; //@line 36975
     $32 = __THREW__; //@line 36976
     __THREW__ = 0; //@line 36976
     if (!($32 & 1)) {
      $$1 = $31; //@line 36979
      label = 12; //@line 36980
     }
    }
   } else {
    __THREW__ = 0; //@line 36984
    $36 = invoke_i(2) | 0; //@line 36985
    $37 = __THREW__; //@line 36986
    __THREW__ = 0; //@line 36986
    if (!($37 & 1)) {
     __THREW__ = 0; //@line 36989
     HEAPF64[$vararg_buffer9 >> 3] = $4; //@line 36990
     $39 = invoke_iiiii(15, $7 | 0, $36 | 0, $5 | 0, $vararg_buffer9 | 0) | 0; //@line 36991
     $40 = __THREW__; //@line 36992
     __THREW__ = 0; //@line 36992
     if (!($40 & 1)) {
      $$1 = $39; //@line 36995
      label = 12; //@line 36996
     }
    }
   }
   do {
    if ((label | 0) == 12) {
     $42 = HEAP32[$7 >> 2] | 0; //@line 37002
     if (!$42) {
      __THREW__ = 0; //@line 37005
      invoke_v(4); //@line 37006
      __THREW__ = 0; //@line 37007
      break;
     } else {
      $$2 = $$1; //@line 37011
      $$sroa$069$0 = $42; //@line 37011
      $47 = $42; //@line 37011
      label = 15; //@line 37012
      break L5;
     }
    }
   } while (0);
   $34 = ___cxa_find_matching_catch_2() | 0; //@line 37017
   $$45482 = tempRet0; //@line 37019
   $$483 = $34; //@line 37019
  } else {
   $$2 = $$0; //@line 37022
   $$sroa$069$0 = 0; //@line 37022
   $47 = HEAP32[$7 >> 2] | 0; //@line 37022
   label = 15; //@line 37023
  }
 } while (0);
 if ((label | 0) == 15) {
  $46 = $47 + $$2 | 0; //@line 37027
  $48 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47, $46, $2) | 0; //@line 37028
  do {
   if (($47 | 0) == ($6 | 0)) {
    $$046 = $8; //@line 37032
    $$sroa$058$0 = 0; //@line 37032
    label = 19; //@line 37033
   } else {
    $51 = _malloc($$2 << 3) | 0; //@line 37036
    if (!$51) {
     __THREW__ = 0; //@line 37039
     invoke_v(4); //@line 37040
     __THREW__ = 0; //@line 37041
     $54 = ___cxa_find_matching_catch_2() | 0; //@line 37042
     $$24980 = $54; //@line 37044
     $$25279 = tempRet0; //@line 37044
     break;
    } else {
     $$046 = $51; //@line 37048
     $$sroa$058$0 = $51; //@line 37048
     label = 19; //@line 37049
     break;
    }
   }
  } while (0);
  if ((label | 0) == 19) {
   __THREW__ = 0; //@line 37055
   invoke_vii(132, $$byval_copy | 0, $2 | 0); //@line 37056
   $57 = __THREW__; //@line 37057
   __THREW__ = 0; //@line 37057
   do {
    if ($57 & 1) {
     $71 = ___cxa_find_matching_catch_2() | 0; //@line 37061
     $$047 = $71; //@line 37063
     $$050 = tempRet0; //@line 37063
     label = 29; //@line 37064
    } else {
     __THREW__ = 0; //@line 37066
     invoke_viiiiiii(5, $47 | 0, $48 | 0, $46 | 0, $$046 | 0, $9 | 0, $10 | 0, $$byval_copy | 0); //@line 37067
     $59 = __THREW__; //@line 37068
     __THREW__ = 0; //@line 37068
     if ($59 & 1) {
      $73 = ___cxa_find_matching_catch_2() | 0; //@line 37071
      $74 = tempRet0; //@line 37072
      __ZNSt3__26localeD2Ev($$byval_copy); //@line 37073
      $$047 = $73; //@line 37074
      $$050 = $74; //@line 37074
      label = 29; //@line 37075
      break;
     }
     __ZNSt3__26localeD2Ev($$byval_copy); //@line 37078
     HEAP32[$11 >> 2] = HEAP32[$1 >> 2]; //@line 37080
     $62 = HEAP32[$9 >> 2] | 0; //@line 37081
     $63 = HEAP32[$10 >> 2] | 0; //@line 37082
     __THREW__ = 0; //@line 37083
     HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2]; //@line 37084
     $64 = invoke_iiiiiii(40, $$byval_copy | 0, $$046 | 0, $62 | 0, $63 | 0, $2 | 0, $3 | 0) | 0; //@line 37085
     $65 = __THREW__; //@line 37086
     __THREW__ = 0; //@line 37086
     if ($65 & 1) {
      $75 = ___cxa_find_matching_catch_2() | 0; //@line 37089
      $$148 = $75; //@line 37091
      $$151 = tempRet0; //@line 37091
      break;
     }
     HEAP32[$1 >> 2] = $64; //@line 37094
     if ($$sroa$058$0 | 0) {
      _free($$sroa$058$0); //@line 37098
     }
     if ($$sroa$069$0 | 0) {
      _free($$sroa$069$0); //@line 37103
     }
     STACKTOP = sp; //@line 37105
     return $64 | 0; //@line 37105
    }
   } while (0);
   if ((label | 0) == 29) {
    $$148 = $$047; //@line 37109
    $$151 = $$050; //@line 37109
   }
   if (!$$sroa$058$0) {
    $$24980 = $$148; //@line 37113
    $$25279 = $$151; //@line 37113
   } else {
    _free($$sroa$058$0); //@line 37116
    $$24980 = $$148; //@line 37117
    $$25279 = $$151; //@line 37117
   }
  }
  if (!$$sroa$069$0) {
   $$45482 = $$25279; //@line 37122
   $$483 = $$24980; //@line 37122
  } else {
   _free($$sroa$069$0); //@line 37125
   $$45482 = $$25279; //@line 37126
   $$483 = $$24980; //@line 37126
  }
 }
 ___resumeException($$483 | 0); //@line 37129
 return 0; //@line 37131
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24982 = 0, $$25281 = 0, $$45484 = 0, $$485 = 0, $$byval_copy = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35317
 STACKTOP = STACKTOP + 176 | 0; //@line 35318
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 35318
 $$byval_copy = sp + 72 | 0; //@line 35319
 $vararg_buffer9 = sp + 48 | 0; //@line 35320
 $vararg_buffer5 = sp + 32 | 0; //@line 35321
 $vararg_buffer2 = sp + 24 | 0; //@line 35322
 $vararg_buffer = sp + 8 | 0; //@line 35323
 $5 = sp; //@line 35324
 $6 = sp + 134 | 0; //@line 35325
 $7 = sp + 68 | 0; //@line 35326
 $8 = sp + 76 | 0; //@line 35327
 $9 = sp + 64 | 0; //@line 35328
 $10 = sp + 60 | 0; //@line 35329
 $11 = sp + 56 | 0; //@line 35330
 $12 = $5; //@line 35331
 HEAP32[$12 >> 2] = 37; //@line 35333
 HEAP32[$12 + 4 >> 2] = 0; //@line 35336
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 30015, HEAP32[$2 + 4 >> 2] | 0) | 0; //@line 35340
 HEAP32[$7 >> 2] = $6; //@line 35341
 $20 = __ZNSt3__26__clocEv() | 0; //@line 35342
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2]; //@line 35346
  HEAPF64[$vararg_buffer + 8 >> 3] = $4; //@line 35348
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0; //@line 35350
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4; //@line 35352
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0; //@line 35354
 }
 L5 : do {
  if (($$0 | 0) > 29) {
   if ($19) {
    __THREW__ = 0; //@line 35360
    $26 = invoke_i(2) | 0; //@line 35361
    $27 = __THREW__; //@line 35362
    __THREW__ = 0; //@line 35362
    if (!($27 & 1)) {
     __THREW__ = 0; //@line 35367
     HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 35368
     HEAPF64[$vararg_buffer5 + 8 >> 3] = $4; //@line 35370
     $31 = invoke_iiiii(15, $7 | 0, $26 | 0, $5 | 0, $vararg_buffer5 | 0) | 0; //@line 35371
     $32 = __THREW__; //@line 35372
     __THREW__ = 0; //@line 35372
     if (!($32 & 1)) {
      $$1 = $31; //@line 35375
      label = 12; //@line 35376
     }
    }
   } else {
    __THREW__ = 0; //@line 35380
    $36 = invoke_i(2) | 0; //@line 35381
    $37 = __THREW__; //@line 35382
    __THREW__ = 0; //@line 35382
    if (!($37 & 1)) {
     __THREW__ = 0; //@line 35385
     HEAPF64[$vararg_buffer9 >> 3] = $4; //@line 35386
     $39 = invoke_iiiii(15, $7 | 0, $36 | 0, $5 | 0, $vararg_buffer9 | 0) | 0; //@line 35387
     $40 = __THREW__; //@line 35388
     __THREW__ = 0; //@line 35388
     if (!($40 & 1)) {
      $$1 = $39; //@line 35391
      label = 12; //@line 35392
     }
    }
   }
   do {
    if ((label | 0) == 12) {
     $42 = HEAP32[$7 >> 2] | 0; //@line 35398
     if (!$42) {
      __THREW__ = 0; //@line 35401
      invoke_v(4); //@line 35402
      __THREW__ = 0; //@line 35403
      break;
     } else {
      $$2 = $$1; //@line 35407
      $$sroa$071$0 = $42; //@line 35407
      $47 = $42; //@line 35407
      label = 15; //@line 35408
      break L5;
     }
    }
   } while (0);
   $34 = ___cxa_find_matching_catch_2() | 0; //@line 35413
   $$45484 = tempRet0; //@line 35415
   $$485 = $34; //@line 35415
  } else {
   $$2 = $$0; //@line 35418
   $$sroa$071$0 = 0; //@line 35418
   $47 = HEAP32[$7 >> 2] | 0; //@line 35418
   label = 15; //@line 35419
  }
 } while (0);
 if ((label | 0) == 15) {
  $46 = $47 + $$2 | 0; //@line 35423
  $48 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47, $46, $2) | 0; //@line 35424
  do {
   if (($47 | 0) == ($6 | 0)) {
    $$046 = $8; //@line 35428
    $$sroa$060$0 = 0; //@line 35428
    label = 19; //@line 35429
   } else {
    $51 = _malloc($$2 << 1) | 0; //@line 35432
    if (!$51) {
     __THREW__ = 0; //@line 35435
     invoke_v(4); //@line 35436
     __THREW__ = 0; //@line 35437
     $54 = ___cxa_find_matching_catch_2() | 0; //@line 35438
     $$24982 = $54; //@line 35440
     $$25281 = tempRet0; //@line 35440
     break;
    } else {
     $$046 = $51; //@line 35444
     $$sroa$060$0 = $51; //@line 35444
     label = 19; //@line 35445
     break;
    }
   }
  } while (0);
  if ((label | 0) == 19) {
   __THREW__ = 0; //@line 35451
   invoke_vii(132, $$byval_copy | 0, $2 | 0); //@line 35452
   $57 = __THREW__; //@line 35453
   __THREW__ = 0; //@line 35453
   do {
    if ($57 & 1) {
     $71 = ___cxa_find_matching_catch_2() | 0; //@line 35457
     $$047 = $71; //@line 35459
     $$050 = tempRet0; //@line 35459
     label = 29; //@line 35460
    } else {
     __THREW__ = 0; //@line 35462
     invoke_viiiiiii(3, $47 | 0, $48 | 0, $46 | 0, $$046 | 0, $9 | 0, $10 | 0, $$byval_copy | 0); //@line 35463
     $59 = __THREW__; //@line 35464
     __THREW__ = 0; //@line 35464
     if ($59 & 1) {
      $73 = ___cxa_find_matching_catch_2() | 0; //@line 35467
      $74 = tempRet0; //@line 35468
      __ZNSt3__26localeD2Ev($$byval_copy); //@line 35469
      $$047 = $73; //@line 35470
      $$050 = $74; //@line 35470
      label = 29; //@line 35471
      break;
     }
     __ZNSt3__26localeD2Ev($$byval_copy); //@line 35474
     HEAP32[$11 >> 2] = HEAP32[$1 >> 2]; //@line 35476
     $62 = HEAP32[$9 >> 2] | 0; //@line 35477
     $63 = HEAP32[$10 >> 2] | 0; //@line 35478
     __THREW__ = 0; //@line 35479
     HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2]; //@line 35480
     $64 = invoke_iiiiiii(39, $$byval_copy | 0, $$046 | 0, $62 | 0, $63 | 0, $2 | 0, $3 | 0) | 0; //@line 35481
     $65 = __THREW__; //@line 35482
     __THREW__ = 0; //@line 35482
     if ($65 & 1) {
      $75 = ___cxa_find_matching_catch_2() | 0; //@line 35485
      $$148 = $75; //@line 35487
      $$151 = tempRet0; //@line 35487
      break;
     }
     HEAP32[$1 >> 2] = $64; //@line 35490
     if ($$sroa$060$0 | 0) {
      _free($$sroa$060$0); //@line 35494
     }
     if ($$sroa$071$0 | 0) {
      _free($$sroa$071$0); //@line 35499
     }
     STACKTOP = sp; //@line 35501
     return $64 | 0; //@line 35501
    }
   } while (0);
   if ((label | 0) == 29) {
    $$148 = $$047; //@line 35505
    $$151 = $$050; //@line 35505
   }
   if (!$$sroa$060$0) {
    $$24982 = $$148; //@line 35509
    $$25281 = $$151; //@line 35509
   } else {
    _free($$sroa$060$0); //@line 35512
    $$24982 = $$148; //@line 35513
    $$25281 = $$151; //@line 35513
   }
  }
  if (!$$sroa$071$0) {
   $$45484 = $$25281; //@line 35518
   $$485 = $$24982; //@line 35518
  } else {
   _free($$sroa$071$0); //@line 35521
   $$45484 = $$25281; //@line 35522
   $$485 = $$24982; //@line 35522
  }
 }
 ___resumeException($$485 | 0); //@line 35525
 return 0; //@line 35527
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24982 = 0, $$25281 = 0, $$45484 = 0, $$485 = 0, $$byval_copy = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35094
 STACKTOP = STACKTOP + 176 | 0; //@line 35095
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 35095
 $$byval_copy = sp + 72 | 0; //@line 35096
 $vararg_buffer9 = sp + 48 | 0; //@line 35097
 $vararg_buffer5 = sp + 32 | 0; //@line 35098
 $vararg_buffer2 = sp + 24 | 0; //@line 35099
 $vararg_buffer = sp + 8 | 0; //@line 35100
 $5 = sp; //@line 35101
 $6 = sp + 134 | 0; //@line 35102
 $7 = sp + 68 | 0; //@line 35103
 $8 = sp + 76 | 0; //@line 35104
 $9 = sp + 64 | 0; //@line 35105
 $10 = sp + 60 | 0; //@line 35106
 $11 = sp + 56 | 0; //@line 35107
 $12 = $5; //@line 35108
 HEAP32[$12 >> 2] = 37; //@line 35110
 HEAP32[$12 + 4 >> 2] = 0; //@line 35113
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 39514, HEAP32[$2 + 4 >> 2] | 0) | 0; //@line 35117
 HEAP32[$7 >> 2] = $6; //@line 35118
 $20 = __ZNSt3__26__clocEv() | 0; //@line 35119
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2]; //@line 35123
  HEAPF64[$vararg_buffer + 8 >> 3] = $4; //@line 35125
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0; //@line 35127
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4; //@line 35129
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0; //@line 35131
 }
 L5 : do {
  if (($$0 | 0) > 29) {
   if ($19) {
    __THREW__ = 0; //@line 35137
    $26 = invoke_i(2) | 0; //@line 35138
    $27 = __THREW__; //@line 35139
    __THREW__ = 0; //@line 35139
    if (!($27 & 1)) {
     __THREW__ = 0; //@line 35144
     HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 35145
     HEAPF64[$vararg_buffer5 + 8 >> 3] = $4; //@line 35147
     $31 = invoke_iiiii(15, $7 | 0, $26 | 0, $5 | 0, $vararg_buffer5 | 0) | 0; //@line 35148
     $32 = __THREW__; //@line 35149
     __THREW__ = 0; //@line 35149
     if (!($32 & 1)) {
      $$1 = $31; //@line 35152
      label = 12; //@line 35153
     }
    }
   } else {
    __THREW__ = 0; //@line 35157
    $36 = invoke_i(2) | 0; //@line 35158
    $37 = __THREW__; //@line 35159
    __THREW__ = 0; //@line 35159
    if (!($37 & 1)) {
     __THREW__ = 0; //@line 35162
     HEAPF64[$vararg_buffer9 >> 3] = $4; //@line 35163
     $39 = invoke_iiiii(15, $7 | 0, $36 | 0, $5 | 0, $vararg_buffer9 | 0) | 0; //@line 35164
     $40 = __THREW__; //@line 35165
     __THREW__ = 0; //@line 35165
     if (!($40 & 1)) {
      $$1 = $39; //@line 35168
      label = 12; //@line 35169
     }
    }
   }
   do {
    if ((label | 0) == 12) {
     $42 = HEAP32[$7 >> 2] | 0; //@line 35175
     if (!$42) {
      __THREW__ = 0; //@line 35178
      invoke_v(4); //@line 35179
      __THREW__ = 0; //@line 35180
      break;
     } else {
      $$2 = $$1; //@line 35184
      $$sroa$071$0 = $42; //@line 35184
      $47 = $42; //@line 35184
      label = 15; //@line 35185
      break L5;
     }
    }
   } while (0);
   $34 = ___cxa_find_matching_catch_2() | 0; //@line 35190
   $$45484 = tempRet0; //@line 35192
   $$485 = $34; //@line 35192
  } else {
   $$2 = $$0; //@line 35195
   $$sroa$071$0 = 0; //@line 35195
   $47 = HEAP32[$7 >> 2] | 0; //@line 35195
   label = 15; //@line 35196
  }
 } while (0);
 if ((label | 0) == 15) {
  $46 = $47 + $$2 | 0; //@line 35200
  $48 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47, $46, $2) | 0; //@line 35201
  do {
   if (($47 | 0) == ($6 | 0)) {
    $$046 = $8; //@line 35205
    $$sroa$060$0 = 0; //@line 35205
    label = 19; //@line 35206
   } else {
    $51 = _malloc($$2 << 1) | 0; //@line 35209
    if (!$51) {
     __THREW__ = 0; //@line 35212
     invoke_v(4); //@line 35213
     __THREW__ = 0; //@line 35214
     $54 = ___cxa_find_matching_catch_2() | 0; //@line 35215
     $$24982 = $54; //@line 35217
     $$25281 = tempRet0; //@line 35217
     break;
    } else {
     $$046 = $51; //@line 35221
     $$sroa$060$0 = $51; //@line 35221
     label = 19; //@line 35222
     break;
    }
   }
  } while (0);
  if ((label | 0) == 19) {
   __THREW__ = 0; //@line 35228
   invoke_vii(132, $$byval_copy | 0, $2 | 0); //@line 35229
   $57 = __THREW__; //@line 35230
   __THREW__ = 0; //@line 35230
   do {
    if ($57 & 1) {
     $71 = ___cxa_find_matching_catch_2() | 0; //@line 35234
     $$047 = $71; //@line 35236
     $$050 = tempRet0; //@line 35236
     label = 29; //@line 35237
    } else {
     __THREW__ = 0; //@line 35239
     invoke_viiiiiii(3, $47 | 0, $48 | 0, $46 | 0, $$046 | 0, $9 | 0, $10 | 0, $$byval_copy | 0); //@line 35240
     $59 = __THREW__; //@line 35241
     __THREW__ = 0; //@line 35241
     if ($59 & 1) {
      $73 = ___cxa_find_matching_catch_2() | 0; //@line 35244
      $74 = tempRet0; //@line 35245
      __ZNSt3__26localeD2Ev($$byval_copy); //@line 35246
      $$047 = $73; //@line 35247
      $$050 = $74; //@line 35247
      label = 29; //@line 35248
      break;
     }
     __ZNSt3__26localeD2Ev($$byval_copy); //@line 35251
     HEAP32[$11 >> 2] = HEAP32[$1 >> 2]; //@line 35253
     $62 = HEAP32[$9 >> 2] | 0; //@line 35254
     $63 = HEAP32[$10 >> 2] | 0; //@line 35255
     __THREW__ = 0; //@line 35256
     HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2]; //@line 35257
     $64 = invoke_iiiiiii(39, $$byval_copy | 0, $$046 | 0, $62 | 0, $63 | 0, $2 | 0, $3 | 0) | 0; //@line 35258
     $65 = __THREW__; //@line 35259
     __THREW__ = 0; //@line 35259
     if ($65 & 1) {
      $75 = ___cxa_find_matching_catch_2() | 0; //@line 35262
      $$148 = $75; //@line 35264
      $$151 = tempRet0; //@line 35264
      break;
     }
     HEAP32[$1 >> 2] = $64; //@line 35267
     if ($$sroa$060$0 | 0) {
      _free($$sroa$060$0); //@line 35271
     }
     if ($$sroa$071$0 | 0) {
      _free($$sroa$071$0); //@line 35276
     }
     STACKTOP = sp; //@line 35278
     return $64 | 0; //@line 35278
    }
   } while (0);
   if ((label | 0) == 29) {
    $$148 = $$047; //@line 35282
    $$151 = $$050; //@line 35282
   }
   if (!$$sroa$060$0) {
    $$24982 = $$148; //@line 35286
    $$25281 = $$151; //@line 35286
   } else {
    _free($$sroa$060$0); //@line 35289
    $$24982 = $$148; //@line 35290
    $$25281 = $$151; //@line 35290
   }
  }
  if (!$$sroa$071$0) {
   $$45484 = $$25281; //@line 35295
   $$485 = $$24982; //@line 35295
  } else {
   _free($$sroa$071$0); //@line 35298
   $$45484 = $$25281; //@line 35299
   $$485 = $$24982; //@line 35299
  }
 }
 ___resumeException($$485 | 0); //@line 35302
 return 0; //@line 35304
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i$i = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $51 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $90 = 0, $96 = 0, $$06$i$i$looptemp = 0;
 $2 = $0 + 4 | 0; //@line 31118
 $4 = HEAP32[$0 >> 2] | 0; //@line 31120
 $6 = ((HEAP32[$2 >> 2] | 0) - $4 | 0) / 72 | 0; //@line 31122
 $7 = $6 + 1 | 0; //@line 31123
 if ($7 >>> 0 > 59652323) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 31126
 }
 $9 = $0 + 8 | 0; //@line 31129
 $12 = ((HEAP32[$9 >> 2] | 0) - $4 | 0) / 72 | 0; //@line 31132
 $14 = $12 << 1; //@line 31134
 $$sroa$speculated$$i = $12 >>> 0 < 29826161 ? $14 >>> 0 < $7 >>> 0 ? $7 : $14 : 59652323; //@line 31137
 do {
  if (!$$sroa$speculated$$i) {
   $26 = 0; //@line 31141
  } else {
   if ($$sroa$speculated$$i >>> 0 <= 59652323) {
    $26 = __Znwj($$sroa$speculated$$i * 72 | 0) | 0; //@line 31147
    break;
   }
   $18 = ___cxa_allocate_exception(8) | 0; //@line 31150
   __THREW__ = 0; //@line 31151
   invoke_vii(119, $18 | 0, 31992); //@line 31152
   $19 = __THREW__; //@line 31153
   __THREW__ = 0; //@line 31153
   if ($19 & 1) {
    $21 = ___cxa_find_matching_catch_2() | 0; //@line 31156
    ___cxa_free_exception($18 | 0); //@line 31158
    ___resumeException($21 | 0); //@line 31159
   } else {
    HEAP32[$18 >> 2] = 13224; //@line 31162
    ___cxa_throw($18 | 0, 2856, 240); //@line 31163
   }
  }
 } while (0);
 $25 = $26 + ($6 * 72 | 0) | 0; //@line 31168
 $27 = $25; //@line 31169
 $29 = $26 + ($$sroa$speculated$$i * 72 | 0) | 0; //@line 31171
 HEAP32[$25 >> 2] = HEAP32[$1 >> 2]; //@line 31173
 $31 = $26 + ($6 * 72 | 0) + 4 | 0; //@line 31174
 $32 = $1 + 4 | 0; //@line 31175
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2]; //@line 31176
 HEAP32[$31 + 4 >> 2] = HEAP32[$32 + 4 >> 2]; //@line 31176
 HEAP32[$31 + 8 >> 2] = HEAP32[$32 + 8 >> 2]; //@line 31176
 HEAP32[$32 >> 2] = 0; //@line 31177
 HEAP32[$32 + 4 >> 2] = 0; //@line 31177
 HEAP32[$32 + 8 >> 2] = 0; //@line 31177
 $33 = $26 + ($6 * 72 | 0) + 16 | 0; //@line 31178
 $34 = $1 + 16 | 0; //@line 31179
 HEAP32[$33 >> 2] = HEAP32[$34 >> 2]; //@line 31180
 HEAP32[$33 + 4 >> 2] = HEAP32[$34 + 4 >> 2]; //@line 31180
 HEAP32[$33 + 8 >> 2] = HEAP32[$34 + 8 >> 2]; //@line 31180
 HEAP32[$33 + 12 >> 2] = HEAP32[$34 + 12 >> 2]; //@line 31180
 HEAP32[$33 + 16 >> 2] = HEAP32[$34 + 16 >> 2]; //@line 31180
 HEAP32[$33 + 20 >> 2] = HEAP32[$34 + 20 >> 2]; //@line 31180
 $36 = $1 + 40 | 0; //@line 31182
 HEAP32[$26 + ($6 * 72 | 0) + 48 >> 2] = 0; //@line 31185
 HEAP32[$26 + ($6 * 72 | 0) + 40 >> 2] = HEAP32[$36 >> 2]; //@line 31187
 $40 = $1 + 44 | 0; //@line 31188
 HEAP32[$26 + ($6 * 72 | 0) + 44 >> 2] = HEAP32[$40 >> 2]; //@line 31190
 $42 = $1 + 48 | 0; //@line 31191
 HEAP32[$26 + ($6 * 72 | 0) + 48 >> 2] = HEAP32[$42 >> 2]; //@line 31194
 HEAP32[$42 >> 2] = 0; //@line 31195
 HEAP32[$40 >> 2] = 0; //@line 31196
 HEAP32[$36 >> 2] = 0; //@line 31197
 $45 = $26 + ($6 * 72 | 0) + 52 | 0; //@line 31198
 $46 = $1 + 52 | 0; //@line 31199
 HEAP32[$45 >> 2] = HEAP32[$46 >> 2]; //@line 31200
 HEAP32[$45 + 4 >> 2] = HEAP32[$46 + 4 >> 2]; //@line 31200
 HEAP32[$45 + 8 >> 2] = HEAP32[$46 + 8 >> 2]; //@line 31200
 HEAP32[$46 >> 2] = 0; //@line 31201
 HEAP32[$46 + 4 >> 2] = 0; //@line 31201
 HEAP32[$46 + 8 >> 2] = 0; //@line 31201
 HEAP16[$26 + ($6 * 72 | 0) + 64 >> 1] = HEAP16[$1 + 64 >> 1] | 0; //@line 31205
 $51 = $25 + 72 | 0; //@line 31207
 $52 = HEAP32[$0 >> 2] | 0; //@line 31208
 $53 = HEAP32[$2 >> 2] | 0; //@line 31209
 if (($53 | 0) == ($52 | 0)) {
  $83 = $27; //@line 31213
  $84 = $52; //@line 31213
  $86 = $52; //@line 31213
 } else {
  $$06$i$i = $53; //@line 31215
  $$sroa$7$0 = $27; //@line 31215
  $58 = $25; //@line 31215
  do {
   $$06$i$i$looptemp = $$06$i$i;
   $$06$i$i = $$06$i$i + -72 | 0; //@line 31217
   HEAP32[$58 + -72 >> 2] = HEAP32[$$06$i$i >> 2]; //@line 31220
   $60 = $58 + -68 | 0; //@line 31221
   $61 = $$06$i$i$looptemp + -68 | 0; //@line 31222
   HEAP32[$60 >> 2] = HEAP32[$61 >> 2]; //@line 31223
   HEAP32[$60 + 4 >> 2] = HEAP32[$61 + 4 >> 2]; //@line 31223
   HEAP32[$60 + 8 >> 2] = HEAP32[$61 + 8 >> 2]; //@line 31223
   HEAP32[$61 >> 2] = 0; //@line 31224
   HEAP32[$61 + 4 >> 2] = 0; //@line 31224
   HEAP32[$61 + 8 >> 2] = 0; //@line 31224
   $62 = $58 + -56 | 0; //@line 31225
   $63 = $$06$i$i$looptemp + -56 | 0; //@line 31226
   HEAP32[$62 >> 2] = HEAP32[$63 >> 2]; //@line 31227
   HEAP32[$62 + 4 >> 2] = HEAP32[$63 + 4 >> 2]; //@line 31227
   HEAP32[$62 + 8 >> 2] = HEAP32[$63 + 8 >> 2]; //@line 31227
   HEAP32[$62 + 12 >> 2] = HEAP32[$63 + 12 >> 2]; //@line 31227
   HEAP32[$62 + 16 >> 2] = HEAP32[$63 + 16 >> 2]; //@line 31227
   HEAP32[$62 + 20 >> 2] = HEAP32[$63 + 20 >> 2]; //@line 31227
   $64 = $58 + -32 | 0; //@line 31228
   $65 = $$06$i$i$looptemp + -32 | 0; //@line 31229
   HEAP32[$64 >> 2] = 0; //@line 31230
   $66 = $58 + -28 | 0; //@line 31231
   HEAP32[$66 >> 2] = 0; //@line 31232
   HEAP32[$58 + -24 >> 2] = 0; //@line 31234
   HEAP32[$64 >> 2] = HEAP32[$65 >> 2]; //@line 31236
   $69 = $$06$i$i$looptemp + -28 | 0; //@line 31237
   HEAP32[$66 >> 2] = HEAP32[$69 >> 2]; //@line 31239
   $71 = $$06$i$i$looptemp + -24 | 0; //@line 31240
   HEAP32[$58 + -24 >> 2] = HEAP32[$71 >> 2]; //@line 31243
   HEAP32[$71 >> 2] = 0; //@line 31244
   HEAP32[$69 >> 2] = 0; //@line 31245
   HEAP32[$65 >> 2] = 0; //@line 31246
   $74 = $58 + -20 | 0; //@line 31247
   $75 = $$06$i$i$looptemp + -20 | 0; //@line 31248
   HEAP32[$74 >> 2] = HEAP32[$75 >> 2]; //@line 31249
   HEAP32[$74 + 4 >> 2] = HEAP32[$75 + 4 >> 2]; //@line 31249
   HEAP32[$74 + 8 >> 2] = HEAP32[$75 + 8 >> 2]; //@line 31249
   HEAP32[$75 >> 2] = 0; //@line 31250
   HEAP32[$75 + 4 >> 2] = 0; //@line 31250
   HEAP32[$75 + 8 >> 2] = 0; //@line 31250
   HEAP16[$58 + -8 >> 1] = HEAP16[$$06$i$i$looptemp + -8 >> 1] | 0; //@line 31254
   $58 = $$sroa$7$0 + -72 | 0; //@line 31256
   $$sroa$7$0 = $58; //@line 31257
  } while (($$06$i$i | 0) != ($52 | 0));
  $83 = $$sroa$7$0; //@line 31267
  $84 = HEAP32[$0 >> 2] | 0; //@line 31267
  $86 = HEAP32[$2 >> 2] | 0; //@line 31267
 }
 HEAP32[$0 >> 2] = $83; //@line 31269
 HEAP32[$2 >> 2] = $51; //@line 31270
 HEAP32[$9 >> 2] = $29; //@line 31271
 $85 = $84; //@line 31272
 if (($86 | 0) != ($85 | 0)) {
  $89 = $86; //@line 31275
  do {
   $90 = $89 + -20 | 0; //@line 31278
   if ((HEAP8[$90 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$90 >> 2] | 0); //@line 31284
   }
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($89 + -32 | 0); //@line 31287
   $96 = $89 + -68 | 0; //@line 31288
   $89 = $89 + -72 | 0; //@line 31277
   if ((HEAP8[$96 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$96 >> 2] | 0); //@line 31294
   }
  } while (($89 | 0) != ($85 | 0));
 }
 if (!$84) {
  return;
 }
 __ZdlPv($84); //@line 31309
 return;
}
function __ZNSt3__26vectorI22CharmTypeSignatureUnitNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i$i = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $100 = 0, $101 = 0, $110 = 0, $111 = 0, $113 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $60 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $97 = 0, $eh$lpad$body47$index3Z2D = 0, $eh$lpad$body47$indexZ2D = 0, $eh$lpad$body48$index9Z2D = 0, $eh$lpad$body48$indexZ2D = 0, $$06$i$i$looptemp = 0, $85$looptemp = 0;
 $2 = $0 + 4 | 0; //@line 28915
 $4 = HEAP32[$0 >> 2] | 0; //@line 28917
 $6 = ((HEAP32[$2 >> 2] | 0) - $4 | 0) / 24 | 0; //@line 28919
 $7 = $6 + 1 | 0; //@line 28920
 if ($7 >>> 0 > 178956970) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 28923
 }
 $9 = $0 + 8 | 0; //@line 28926
 $12 = ((HEAP32[$9 >> 2] | 0) - $4 | 0) / 24 | 0; //@line 28929
 $14 = $12 << 1; //@line 28931
 $$sroa$speculated$$i = $12 >>> 0 < 89478485 ? $14 >>> 0 < $7 >>> 0 ? $7 : $14 : 178956970; //@line 28934
 do {
  if (!$$sroa$speculated$$i) {
   $113 = 0; //@line 28938
   $26 = 0; //@line 28938
  } else {
   if ($$sroa$speculated$$i >>> 0 <= 178956970) {
    $24 = __Znwj($$sroa$speculated$$i * 24 | 0) | 0; //@line 28943
    $113 = $24; //@line 28944
    $26 = $24; //@line 28944
    break;
   }
   $18 = ___cxa_allocate_exception(8) | 0; //@line 28947
   __THREW__ = 0; //@line 28948
   invoke_vii(119, $18 | 0, 31992); //@line 28949
   $19 = __THREW__; //@line 28950
   __THREW__ = 0; //@line 28950
   if ($19 & 1) {
    $21 = ___cxa_find_matching_catch_2() | 0; //@line 28953
    ___cxa_free_exception($18 | 0); //@line 28955
    ___resumeException($21 | 0); //@line 28956
   } else {
    HEAP32[$18 >> 2] = 13224; //@line 28959
    ___cxa_throw($18 | 0, 2856, 240); //@line 28960
   }
  }
 } while (0);
 $25 = $26 + ($6 * 24 | 0) | 0; //@line 28965
 $27 = $25; //@line 28966
 $29 = $26 + ($$sroa$speculated$$i * 24 | 0) | 0; //@line 28968
 __THREW__ = 0; //@line 28969
 invoke_vii(140, $25 | 0, $1 | 0); //@line 28970
 $30 = __THREW__; //@line 28971
 __THREW__ = 0; //@line 28971
 do {
  if ($30 & 1) {
   $110 = ___cxa_find_matching_catch_2() | 0; //@line 28975
   $111 = tempRet0; //@line 28976
   if (!$26) {
    $eh$lpad$body48$index9Z2D = $111; //@line 28979
    $eh$lpad$body48$indexZ2D = $110; //@line 28979
    ___resumeException($eh$lpad$body48$indexZ2D | 0); //@line 28980
   } else {
    $eh$lpad$body47$index3Z2D = $111; //@line 28983
    $eh$lpad$body47$indexZ2D = $110; //@line 28983
   }
  } else {
   __THREW__ = 0; //@line 28988
   invoke_vii(140, $26 + ($6 * 24 | 0) + 12 | 0, $1 + 12 | 0); //@line 28989
   $34 = __THREW__; //@line 28990
   __THREW__ = 0; //@line 28990
   if ($34 & 1) {
    $36 = ___cxa_find_matching_catch_2() | 0; //@line 28993
    $37 = tempRet0; //@line 28994
    $38 = HEAP32[$25 >> 2] | 0; //@line 28995
    if (!$38) {
     $eh$lpad$body47$index3Z2D = $37; //@line 28998
     $eh$lpad$body47$indexZ2D = $36; //@line 28998
     break;
    }
    $40 = $26 + ($6 * 24 | 0) + 4 | 0; //@line 29001
    $41 = HEAP32[$40 >> 2] | 0; //@line 29002
    if (($41 | 0) != ($38 | 0)) {
     HEAP32[$40 >> 2] = $41 + (~(($41 + -4 - $38 | 0) >>> 2) << 2); //@line 29012
    }
    __ZdlPv($38); //@line 29014
    $eh$lpad$body47$index3Z2D = $37; //@line 29015
    $eh$lpad$body47$indexZ2D = $36; //@line 29015
    break;
   }
   $49 = $25 + 24 | 0; //@line 29019
   $50 = HEAP32[$0 >> 2] | 0; //@line 29020
   $51 = HEAP32[$2 >> 2] | 0; //@line 29021
   if (($51 | 0) == ($50 | 0)) {
    $79 = $27; //@line 29025
    $80 = $50; //@line 29025
    $82 = $50; //@line 29025
   } else {
    $$06$i$i = $51; //@line 29027
    $$sroa$7$0 = $27; //@line 29027
    $55 = $25; //@line 29027
    do {
     $54 = $55 + -24 | 0; //@line 29029
     $$06$i$i$looptemp = $$06$i$i;
     $$06$i$i = $$06$i$i + -24 | 0; //@line 29030
     HEAP32[$54 >> 2] = 0; //@line 29031
     $57 = $55 + -20 | 0; //@line 29032
     HEAP32[$57 >> 2] = 0; //@line 29033
     HEAP32[$55 + -16 >> 2] = 0; //@line 29035
     HEAP32[$54 >> 2] = HEAP32[$$06$i$i >> 2]; //@line 29037
     $60 = $$06$i$i$looptemp + -20 | 0; //@line 29038
     HEAP32[$57 >> 2] = HEAP32[$60 >> 2]; //@line 29040
     $62 = $$06$i$i$looptemp + -16 | 0; //@line 29041
     HEAP32[$55 + -16 >> 2] = HEAP32[$62 >> 2]; //@line 29044
     HEAP32[$62 >> 2] = 0; //@line 29045
     HEAP32[$60 >> 2] = 0; //@line 29046
     HEAP32[$$06$i$i >> 2] = 0; //@line 29047
     $65 = $55 + -12 | 0; //@line 29048
     $66 = $$06$i$i$looptemp + -12 | 0; //@line 29049
     HEAP32[$65 >> 2] = 0; //@line 29050
     $67 = $55 + -8 | 0; //@line 29051
     HEAP32[$67 >> 2] = 0; //@line 29052
     HEAP32[$55 + -4 >> 2] = 0; //@line 29054
     HEAP32[$65 >> 2] = HEAP32[$66 >> 2]; //@line 29056
     $70 = $$06$i$i$looptemp + -8 | 0; //@line 29057
     HEAP32[$67 >> 2] = HEAP32[$70 >> 2]; //@line 29059
     $72 = $$06$i$i$looptemp + -4 | 0; //@line 29060
     HEAP32[$55 + -4 >> 2] = HEAP32[$72 >> 2]; //@line 29063
     HEAP32[$72 >> 2] = 0; //@line 29064
     HEAP32[$70 >> 2] = 0; //@line 29065
     HEAP32[$66 >> 2] = 0; //@line 29066
     $55 = $$sroa$7$0 + -24 | 0; //@line 29068
     $$sroa$7$0 = $55; //@line 29069
    } while (($$06$i$i | 0) != ($50 | 0));
    $79 = $$sroa$7$0; //@line 29079
    $80 = HEAP32[$0 >> 2] | 0; //@line 29079
    $82 = HEAP32[$2 >> 2] | 0; //@line 29079
   }
   HEAP32[$0 >> 2] = $79; //@line 29081
   HEAP32[$2 >> 2] = $49; //@line 29082
   HEAP32[$9 >> 2] = $29; //@line 29083
   $81 = $80; //@line 29084
   if (($82 | 0) != ($81 | 0)) {
    $85 = $82; //@line 29087
    do {
     $85$looptemp = $85;
     $85 = $85 + -24 | 0; //@line 29089
     $87 = HEAP32[$85$looptemp + -12 >> 2] | 0; //@line 29091
     if ($87 | 0) {
      $89 = $85$looptemp + -8 | 0; //@line 29094
      $90 = HEAP32[$89 >> 2] | 0; //@line 29095
      if (($90 | 0) != ($87 | 0)) {
       HEAP32[$89 >> 2] = $90 + (~(($90 + -4 - $87 | 0) >>> 2) << 2); //@line 29105
      }
      __ZdlPv($87); //@line 29107
     }
     $97 = HEAP32[$85 >> 2] | 0; //@line 29109
     if ($97 | 0) {
      $100 = $85$looptemp + -20 | 0; //@line 29112
      $101 = HEAP32[$100 >> 2] | 0; //@line 29113
      if (($101 | 0) != ($97 | 0)) {
       HEAP32[$100 >> 2] = $101 + (~(($101 + -4 - $97 | 0) >>> 2) << 2); //@line 29123
      }
      __ZdlPv($97); //@line 29125
     }
    } while (($85 | 0) != ($81 | 0));
   }
   if (!$80) {
    return;
   }
   __ZdlPv($80); //@line 29140
   return;
  }
 } while (0);
 __ZdlPv($113); //@line 29144
 $eh$lpad$body48$index9Z2D = $eh$lpad$body47$index3Z2D; //@line 29145
 $eh$lpad$body48$indexZ2D = $eh$lpad$body47$indexZ2D; //@line 29145
 ___resumeException($eh$lpad$body48$indexZ2D | 0); //@line 29146
}
function __ZN6Runner18addNamespacePrefixER13CharmFunctionNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$036 = 0, $$pre = 0, $$pre78 = 0, $$sroa$059$073 = 0, $$sroa$067$074 = 0, $14 = 0, $15 = 0, $17 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $58 = 0, $59 = 0, $63 = 0, $66 = 0, $7 = 0, $75 = 0, $80 = 0, $82 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10812
 STACKTOP = STACKTOP + 48 | 0; //@line 10813
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10813
 $3 = sp + 12 | 0; //@line 10814
 $4 = sp + 24 | 0; //@line 10815
 $5 = sp; //@line 10816
 $7 = HEAP8[$2 + 11 >> 0] | 0; //@line 10818
 if (!(($7 << 24 >> 24 < 0 ? HEAP32[$2 + 4 >> 2] | 0 : $7 & 255) | 0)) {
  __THREW__ = 0; //@line 10826
  $14 = invoke_iiiiii(21, $2 | 0, 0, -1, 39514, 0) | 0; //@line 10827
  $15 = __THREW__; //@line 10828
  __THREW__ = 0; //@line 10828
  if ($15 & 1) {
   $17 = ___cxa_find_matching_catch_3(0) | 0; //@line 10831
   ___clang_call_terminate($17); //@line 10833
  }
  if (!$14) {
   STACKTOP = sp; //@line 10838
   return;
  }
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 4:
  {
   $63 = $1 + 52 | 0; //@line 10844
   $66 = (__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_($0 + 104 | 0, $63) | 0) != 0; //@line 10847
   if ($66 | ((__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_(HEAP32[$0 + 96 >> 2] | 0, $63) | 0) != 0 | (__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEERKT_(HEAP32[$0 + 100 >> 2] | 0, $63) | 0) != 0)) {
    STACKTOP = sp; //@line 10859
    return;
   }
   __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($4, $2, $63); //@line 10861
   $75 = $63 + 11 | 0; //@line 10862
   if ((HEAP8[$75 >> 0] | 0) < 0) {
    HEAP8[HEAP32[$63 >> 2] >> 0] = 0; //@line 10867
    HEAP32[$1 + 56 >> 2] = 0; //@line 10869
   } else {
    HEAP8[$63 >> 0] = 0; //@line 10871
    HEAP8[$75 >> 0] = 0; //@line 10872
   }
   __THREW__ = 0; //@line 10874
   invoke_vii(129, $63 | 0, 0); //@line 10875
   $80 = __THREW__; //@line 10876
   __THREW__ = 0; //@line 10876
   if ($80 & 1) {
    $82 = ___cxa_find_matching_catch_3(0) | 0; //@line 10879
    ___clang_call_terminate($82); //@line 10881
   }
   HEAP32[$63 >> 2] = HEAP32[$4 >> 2]; //@line 10884
   HEAP32[$63 + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 10884
   HEAP32[$63 + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 10884
   STACKTOP = sp; //@line 10885
   return;
  }
 case 0:
  {
   $39 = $1 + 52 | 0; //@line 10889
   __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($4, $2, $39); //@line 10890
   $40 = $39 + 11 | 0; //@line 10891
   if ((HEAP8[$40 >> 0] | 0) < 0) {
    HEAP8[HEAP32[$39 >> 2] >> 0] = 0; //@line 10896
    HEAP32[$1 + 56 >> 2] = 0; //@line 10898
   } else {
    HEAP8[$39 >> 0] = 0; //@line 10900
    HEAP8[$40 >> 0] = 0; //@line 10901
   }
   __THREW__ = 0; //@line 10903
   invoke_vii(129, $39 | 0, 0); //@line 10904
   $45 = __THREW__; //@line 10905
   __THREW__ = 0; //@line 10905
   if ($45 & 1) {
    $47 = ___cxa_find_matching_catch_3(0) | 0; //@line 10908
    ___clang_call_terminate($47); //@line 10910
   }
   HEAP32[$39 >> 2] = HEAP32[$4 >> 2]; //@line 10913
   HEAP32[$39 + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 10913
   HEAP32[$39 + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 10913
   $$pre = HEAP32[$1 + 40 >> 2] | 0; //@line 10915
   $$pre78 = HEAP32[$1 + 44 >> 2] | 0; //@line 10917
   if (($$pre | 0) == ($$pre78 | 0)) {
    STACKTOP = sp; //@line 10920
    return;
   }
   $50 = $5 + 11 | 0; //@line 10922
   $$sroa$059$073 = $$pre; //@line 10923
   while (1) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($5, $2); //@line 10925
    __THREW__ = 0; //@line 10926
    invoke_viii(19, $0 | 0, $$sroa$059$073 | 0, $5 | 0); //@line 10927
    $51 = __THREW__; //@line 10928
    __THREW__ = 0; //@line 10928
    if ($51 & 1) {
     break;
    }
    if ((HEAP8[$50 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 10937
    }
    $$sroa$059$073 = $$sroa$059$073 + 72 | 0; //@line 10939
    if (($$sroa$059$073 | 0) == ($$pre78 | 0)) {
     label = 34; //@line 10942
     break;
    }
   }
   if ((label | 0) == 34) {
    STACKTOP = sp; //@line 10949
    return;
   }
   $58 = ___cxa_find_matching_catch_2() | 0; //@line 10951
   $59 = tempRet0; //@line 10952
   if ((HEAP8[$50 >> 0] | 0) >= 0) {
    $$0 = $58; //@line 10956
    $$036 = $59; //@line 10956
    ___resumeException($$0 | 0); //@line 10957
   }
   __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 10961
   $$0 = $58; //@line 10962
   $$036 = $59; //@line 10962
   ___resumeException($$0 | 0); //@line 10963
   break;
  }
 case 1:
  {
   $22 = HEAP32[$1 + 40 >> 2] | 0; //@line 10969
   $24 = HEAP32[$1 + 44 >> 2] | 0; //@line 10971
   if (($22 | 0) == ($24 | 0)) {
    STACKTOP = sp; //@line 10974
    return;
   }
   $26 = $3 + 11 | 0; //@line 10976
   $$sroa$067$074 = $22; //@line 10977
   while (1) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3, $2); //@line 10979
    __THREW__ = 0; //@line 10980
    invoke_viii(19, $0 | 0, $$sroa$067$074 | 0, $3 | 0); //@line 10981
    $27 = __THREW__; //@line 10982
    __THREW__ = 0; //@line 10982
    if ($27 & 1) {
     break;
    }
    if ((HEAP8[$26 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 10991
    }
    $$sroa$067$074 = $$sroa$067$074 + 72 | 0; //@line 10993
    if (($$sroa$067$074 | 0) == ($24 | 0)) {
     label = 34; //@line 10996
     break;
    }
   }
   if ((label | 0) == 34) {
    STACKTOP = sp; //@line 11003
    return;
   }
   $34 = ___cxa_find_matching_catch_2() | 0; //@line 11005
   $35 = tempRet0; //@line 11006
   if ((HEAP8[$26 >> 0] | 0) >= 0) {
    $$0 = $34; //@line 11010
    $$036 = $35; //@line 11010
    ___resumeException($$0 | 0); //@line 11011
   }
   __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 11015
   $$0 = $34; //@line 11016
   $$036 = $35; //@line 11016
   ___resumeException($$0 | 0); //@line 11017
   break;
  }
 default:
  {
   STACKTOP = sp; //@line 11022
   return;
  }
 }
}
function __ZNSt3__24moveI13CharmFunctionPS1_RS1_PS2_iLi0ES1_S2_S3_S4_iLi0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS5_IT_T0_T1_T2_T3_XT4_EEESH_SB_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$$i = 0, $$022$ = 0, $$02241 = 0, $$02830$i = 0, $$078$i$i$i = 0, $$09$i$i$i = 0, $$off0 = 0, $$off32 = 0, $$sink$i = 0, $$sink$i$i = 0, $101 = 0, $104 = 0, $108 = 0, $11 = 0, $110 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $7 = 0, $73 = 0, $75 = 0, $78 = 0, $82 = 0, $84 = 0, $89 = 0, $9 = 0, $90 = 0, $99 = 0, $tmpcast24$sroa$0$0 = 0, $tmpcast24$sroa$0$1 = 0, $tmpcast24$sroa$0$2$in = 0, $tmpcast24$sroa$0$3 = 0, $tmpcast24$sroa$7$0 = 0, $tmpcast24$sroa$7$1 = 0, $tmpcast24$sroa$7$2 = 0, $$02830$i$looptemp = 0;
 $5 = HEAP32[$2 + 4 >> 2] | 0; //@line 13169
 $6 = $1 + 4 | 0; //@line 13170
 $7 = HEAP32[$6 >> 2] | 0; //@line 13171
 $9 = $7; //@line 13173
 if (($5 | 0) != ($7 | 0)) {
  $11 = HEAP32[$2 >> 2] | 0; //@line 13176
  $12 = HEAP32[$1 >> 2] | 0; //@line 13177
  $24 = (($11 - $12 >> 2) * 56 | 0) + (($5 - (HEAP32[$11 >> 2] | 0) | 0) / 72 | 0) + (($9 - (HEAP32[$12 >> 2] | 0) | 0) / -72 | 0) | 0; //@line 13190
  if (($24 | 0) > 0) {
   $32 = $3; //@line 13194
   $$02241 = $24; //@line 13200
   $$off0 = HEAP32[$32 >> 2] | 0; //@line 13200
   $$off32 = HEAP32[$32 + 4 >> 2] | 0; //@line 13200
   $39 = HEAP32[$1 >> 2] | 0; //@line 13200
   $42 = $7; //@line 13200
   $99 = $9; //@line 13200
   while (1) {
    $40 = (HEAP32[$39 >> 2] | 0) + 4032 | 0; //@line 13203
    $45 = ($40 - $42 | 0) / 72 | 0; //@line 13207
    $46 = ($45 | 0) > ($$02241 | 0); //@line 13208
    $$ = $46 ? $42 + ($$02241 * 72 | 0) | 0 : $40; //@line 13210
    $$022$ = $46 ? $$02241 : $45; //@line 13211
    if (($42 | 0) == ($$ | 0)) {
     $tmpcast24$sroa$0$3 = $$off0; //@line 13214
     $tmpcast24$sroa$7$2 = $$off32; //@line 13214
    } else {
     $49 = $$; //@line 13216
     $$02830$i = $42; //@line 13219
     $53 = $$off0; //@line 13219
     $56 = $$off32; //@line 13219
     $73 = $$off32; //@line 13219
     $tmpcast24$sroa$0$0 = $$off0; //@line 13219
     $tmpcast24$sroa$7$0 = $$off32; //@line 13219
     while (1) {
      $59 = ((HEAP32[$53 >> 2] | 0) + 4032 - $56 | 0) / 72 | 0; //@line 13226
      $62 = ($49 - $$02830$i | 0) / 72 | 0; //@line 13229
      $63 = ($62 | 0) > ($59 | 0); //@line 13230
      $$$i = $63 ? $59 : $62; //@line 13232
      $$02830$i$looptemp = $$02830$i;
      $$02830$i = $63 ? $$02830$i + ($59 * 72 | 0) | 0 : $$; //@line 13233
      if (($$02830$i$looptemp | 0) != ($$02830$i | 0)) {
       $$078$i$i$i = $$02830$i$looptemp; //@line 13236
       $$09$i$i$i = $56; //@line 13236
       while (1) {
        __ZN13CharmFunctionaSEOS_($$09$i$i$i, $$078$i$i$i) | 0; //@line 13238
        $$078$i$i$i = $$078$i$i$i + 72 | 0; //@line 13239
        if (($$078$i$i$i | 0) == ($$02830$i | 0)) {
         break;
        } else {
         $$09$i$i$i = $$09$i$i$i + 72 | 0; //@line 13245
        }
       }
      }
      if (!$$$i) {
       $122 = $73; //@line 13251
       $123 = $53; //@line 13251
       $124 = $56; //@line 13251
       $tmpcast24$sroa$0$1 = $tmpcast24$sroa$0$0; //@line 13251
       $tmpcast24$sroa$7$1 = $tmpcast24$sroa$7$0; //@line 13251
      } else {
       $75 = (($73 - (HEAP32[$53 >> 2] | 0) | 0) / 72 | 0) + $$$i | 0; //@line 13256
       if (($75 | 0) > 0) {
        $78 = $53 + ((($75 >>> 0) / 56 | 0) << 2) | 0; //@line 13260
        $$sink$i$i = (HEAP32[$78 >> 2] | 0) + ((($75 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13264
        $tmpcast24$sroa$0$2$in = $78; //@line 13264
       } else {
        $82 = 55 - $75 | 0; //@line 13266
        $84 = $53 + ((($82 | 0) / -56 | 0) << 2) | 0; //@line 13268
        $$sink$i$i = (HEAP32[$84 >> 2] | 0) + ((55 - (($82 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 13273
        $tmpcast24$sroa$0$2$in = $84; //@line 13273
       }
       $89 = $$sink$i$i; //@line 13276
       $122 = $89; //@line 13277
       $123 = $tmpcast24$sroa$0$2$in; //@line 13277
       $124 = $$sink$i$i; //@line 13277
       $tmpcast24$sroa$0$1 = $tmpcast24$sroa$0$2$in; //@line 13277
       $tmpcast24$sroa$7$1 = $89; //@line 13277
      }
      if (($$02830$i | 0) == ($$ | 0)) {
       $tmpcast24$sroa$0$3 = $tmpcast24$sroa$0$1; //@line 13281
       $tmpcast24$sroa$7$2 = $tmpcast24$sroa$7$1; //@line 13281
       break;
      } else {
       $53 = $123; //@line 13284
       $56 = $124; //@line 13284
       $73 = $122; //@line 13284
       $tmpcast24$sroa$0$0 = $tmpcast24$sroa$0$1; //@line 13284
       $tmpcast24$sroa$7$0 = $tmpcast24$sroa$7$1; //@line 13284
      }
     }
    }
    $90 = $3; //@line 13288
    HEAP32[$90 >> 2] = $tmpcast24$sroa$0$3; //@line 13290
    HEAP32[$90 + 4 >> 2] = $tmpcast24$sroa$7$2; //@line 13293
    $$02241 = $$02241 - $$022$ | 0; //@line 13294
    if (!$$022$) {
     $125 = $99; //@line 13297
     $126 = $39; //@line 13297
     $127 = $42; //@line 13297
    } else {
     $101 = (($99 - (HEAP32[$39 >> 2] | 0) | 0) / 72 | 0) + $$022$ | 0; //@line 13302
     if (($101 | 0) > 0) {
      $104 = $39 + ((($101 >>> 0) / 56 | 0) << 2) | 0; //@line 13306
      HEAP32[$1 >> 2] = $104; //@line 13307
      $$sink$i = (HEAP32[$104 >> 2] | 0) + ((($101 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13311
      $128 = $104; //@line 13311
     } else {
      $108 = 55 - $101 | 0; //@line 13313
      $110 = $39 + ((($108 | 0) / -56 | 0) << 2) | 0; //@line 13315
      HEAP32[$1 >> 2] = $110; //@line 13316
      $$sink$i = (HEAP32[$110 >> 2] | 0) + ((55 - (($108 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 13321
      $128 = $110; //@line 13321
     }
     HEAP32[$6 >> 2] = $$sink$i; //@line 13323
     $125 = $$sink$i; //@line 13325
     $126 = $128; //@line 13325
     $127 = $$sink$i; //@line 13325
    }
    if (($$02241 | 0) <= 0) {
     $118 = $tmpcast24$sroa$0$3; //@line 13331
     $121 = $tmpcast24$sroa$7$2; //@line 13331
     break;
    } else {
     $$off0 = $tmpcast24$sroa$0$3; //@line 13329
     $$off32 = $tmpcast24$sroa$7$2; //@line 13329
     $39 = $126; //@line 13329
     $42 = $127; //@line 13329
     $99 = $125; //@line 13329
    }
   }
   $116 = $0; //@line 13335
   $117 = $116; //@line 13336
   HEAP32[$117 >> 2] = $118; //@line 13337
   $119 = $116 + 4 | 0; //@line 13338
   $120 = $119; //@line 13339
   HEAP32[$120 >> 2] = $121; //@line 13340
   return;
  }
 }
 $26 = $3; //@line 13344
 $118 = HEAP32[$26 >> 2] | 0; //@line 13350
 $121 = HEAP32[$26 + 4 >> 2] | 0; //@line 13350
 $116 = $0; //@line 13351
 $117 = $116; //@line 13352
 HEAP32[$117 >> 2] = $118; //@line 13353
 $119 = $116 + 4 | 0; //@line 13354
 $120 = $119; //@line 13355
 HEAP32[$120 >> 2] = $121; //@line 13356
 return;
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$06$i = 0, $$07$i = 0, $$in = 0, $$pre$phiZ2D = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $55 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $9 = 0, $$06$i$looptemp = 0;
 $3 = $1 + 4 | 0; //@line 11972
 $4 = HEAP32[$3 >> 2] | 0; //@line 11973
 $5 = HEAP32[$0 >> 2] | 0; //@line 11974
 if (($5 | 0) == ($2 | 0)) {
  $$in = $4; //@line 11977
 } else {
  $$06$i = $2; //@line 11979
  $9 = $4; //@line 11979
  while (1) {
   $$06$i$looptemp = $$06$i;
   $$06$i = $$06$i + -72 | 0; //@line 11981
   HEAP32[$9 + -72 >> 2] = HEAP32[$$06$i >> 2]; //@line 11984
   $11 = $9 + -68 | 0; //@line 11985
   $12 = $$06$i$looptemp + -68 | 0; //@line 11986
   HEAP32[$11 >> 2] = HEAP32[$12 >> 2]; //@line 11987
   HEAP32[$11 + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 11987
   HEAP32[$11 + 8 >> 2] = HEAP32[$12 + 8 >> 2]; //@line 11987
   HEAP32[$12 >> 2] = 0; //@line 11988
   HEAP32[$12 + 4 >> 2] = 0; //@line 11988
   HEAP32[$12 + 8 >> 2] = 0; //@line 11988
   $13 = $9 + -56 | 0; //@line 11989
   $14 = $$06$i$looptemp + -56 | 0; //@line 11990
   HEAP32[$13 >> 2] = HEAP32[$14 >> 2]; //@line 11991
   HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2]; //@line 11991
   HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2]; //@line 11991
   HEAP32[$13 + 12 >> 2] = HEAP32[$14 + 12 >> 2]; //@line 11991
   HEAP32[$13 + 16 >> 2] = HEAP32[$14 + 16 >> 2]; //@line 11991
   HEAP32[$13 + 20 >> 2] = HEAP32[$14 + 20 >> 2]; //@line 11991
   $15 = $9 + -32 | 0; //@line 11992
   $16 = $$06$i$looptemp + -32 | 0; //@line 11993
   HEAP32[$15 >> 2] = 0; //@line 11994
   $17 = $9 + -28 | 0; //@line 11995
   HEAP32[$17 >> 2] = 0; //@line 11996
   HEAP32[$9 + -24 >> 2] = 0; //@line 11998
   HEAP32[$15 >> 2] = HEAP32[$16 >> 2]; //@line 12000
   $20 = $$06$i$looptemp + -28 | 0; //@line 12001
   HEAP32[$17 >> 2] = HEAP32[$20 >> 2]; //@line 12003
   $22 = $$06$i$looptemp + -24 | 0; //@line 12004
   HEAP32[$9 + -24 >> 2] = HEAP32[$22 >> 2]; //@line 12007
   HEAP32[$22 >> 2] = 0; //@line 12008
   HEAP32[$20 >> 2] = 0; //@line 12009
   HEAP32[$16 >> 2] = 0; //@line 12010
   $25 = $9 + -20 | 0; //@line 12011
   $26 = $$06$i$looptemp + -20 | 0; //@line 12012
   HEAP32[$25 >> 2] = HEAP32[$26 >> 2]; //@line 12013
   HEAP32[$25 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 12013
   HEAP32[$25 + 8 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 12013
   HEAP32[$26 >> 2] = 0; //@line 12014
   HEAP32[$26 + 4 >> 2] = 0; //@line 12014
   HEAP32[$26 + 8 >> 2] = 0; //@line 12014
   HEAP16[$9 + -8 >> 1] = HEAP16[$$06$i$looptemp + -8 >> 1] | 0; //@line 12018
   $31 = (HEAP32[$3 >> 2] | 0) + -72 | 0; //@line 12020
   HEAP32[$3 >> 2] = $31; //@line 12021
   if (($$06$i | 0) == ($5 | 0)) {
    $$in = $31; //@line 12024
    break;
   } else {
    $9 = $31; //@line 12027
   }
  }
 }
 $33 = $0 + 4 | 0; //@line 12031
 $34 = HEAP32[$33 >> 2] | 0; //@line 12032
 $35 = $1 + 8 | 0; //@line 12033
 if (($34 | 0) == ($2 | 0)) {
  $$pre$phiZ2D = $3; //@line 12037
  $64 = $$in; //@line 12037
  $63 = HEAP32[$0 >> 2] | 0; //@line 12038
  HEAP32[$0 >> 2] = $64; //@line 12039
  HEAP32[$$pre$phiZ2D >> 2] = $63; //@line 12040
  $65 = HEAP32[$33 >> 2] | 0; //@line 12041
  $66 = HEAP32[$35 >> 2] | 0; //@line 12042
  HEAP32[$33 >> 2] = $66; //@line 12043
  HEAP32[$35 >> 2] = $65; //@line 12044
  $67 = $0 + 8 | 0; //@line 12045
  $68 = $1 + 12 | 0; //@line 12046
  $69 = HEAP32[$67 >> 2] | 0; //@line 12047
  $70 = HEAP32[$68 >> 2] | 0; //@line 12048
  HEAP32[$67 >> 2] = $70; //@line 12049
  HEAP32[$68 >> 2] = $69; //@line 12050
  $71 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 12051
  HEAP32[$1 >> 2] = $71; //@line 12052
  return $4 | 0; //@line 12053
 }
 $$07$i = $2; //@line 12056
 $39 = HEAP32[$35 >> 2] | 0; //@line 12056
 do {
  HEAP32[$39 >> 2] = HEAP32[$$07$i >> 2]; //@line 12059
  $40 = $39 + 4 | 0; //@line 12060
  $41 = $$07$i + 4 | 0; //@line 12061
  HEAP32[$40 >> 2] = HEAP32[$41 >> 2]; //@line 12062
  HEAP32[$40 + 4 >> 2] = HEAP32[$41 + 4 >> 2]; //@line 12062
  HEAP32[$40 + 8 >> 2] = HEAP32[$41 + 8 >> 2]; //@line 12062
  HEAP32[$41 >> 2] = 0; //@line 12063
  HEAP32[$41 + 4 >> 2] = 0; //@line 12063
  HEAP32[$41 + 8 >> 2] = 0; //@line 12063
  $42 = $39 + 16 | 0; //@line 12064
  $43 = $$07$i + 16 | 0; //@line 12065
  HEAP32[$42 >> 2] = HEAP32[$43 >> 2]; //@line 12066
  HEAP32[$42 + 4 >> 2] = HEAP32[$43 + 4 >> 2]; //@line 12066
  HEAP32[$42 + 8 >> 2] = HEAP32[$43 + 8 >> 2]; //@line 12066
  HEAP32[$42 + 12 >> 2] = HEAP32[$43 + 12 >> 2]; //@line 12066
  HEAP32[$42 + 16 >> 2] = HEAP32[$43 + 16 >> 2]; //@line 12066
  HEAP32[$42 + 20 >> 2] = HEAP32[$43 + 20 >> 2]; //@line 12066
  $44 = $39 + 40 | 0; //@line 12067
  $45 = $$07$i + 40 | 0; //@line 12068
  HEAP32[$44 >> 2] = 0; //@line 12069
  $46 = $39 + 44 | 0; //@line 12070
  HEAP32[$46 >> 2] = 0; //@line 12071
  HEAP32[$39 + 48 >> 2] = 0; //@line 12073
  HEAP32[$44 >> 2] = HEAP32[$45 >> 2]; //@line 12075
  $49 = $$07$i + 44 | 0; //@line 12076
  HEAP32[$46 >> 2] = HEAP32[$49 >> 2]; //@line 12078
  $51 = $$07$i + 48 | 0; //@line 12079
  HEAP32[$39 + 48 >> 2] = HEAP32[$51 >> 2]; //@line 12082
  HEAP32[$51 >> 2] = 0; //@line 12083
  HEAP32[$49 >> 2] = 0; //@line 12084
  HEAP32[$45 >> 2] = 0; //@line 12085
  $54 = $39 + 52 | 0; //@line 12086
  $55 = $$07$i + 52 | 0; //@line 12087
  HEAP32[$54 >> 2] = HEAP32[$55 >> 2]; //@line 12088
  HEAP32[$54 + 4 >> 2] = HEAP32[$55 + 4 >> 2]; //@line 12088
  HEAP32[$54 + 8 >> 2] = HEAP32[$55 + 8 >> 2]; //@line 12088
  HEAP32[$55 >> 2] = 0; //@line 12089
  HEAP32[$55 + 4 >> 2] = 0; //@line 12089
  HEAP32[$55 + 8 >> 2] = 0; //@line 12089
  HEAP16[$39 + 64 >> 1] = HEAP16[$$07$i + 64 >> 1] | 0; //@line 12093
  $$07$i = $$07$i + 72 | 0; //@line 12094
  $39 = (HEAP32[$35 >> 2] | 0) + 72 | 0; //@line 12096
  HEAP32[$35 >> 2] = $39; //@line 12097
 } while (($$07$i | 0) != ($34 | 0));
 $$pre$phiZ2D = $3; //@line 12106
 $64 = HEAP32[$3 >> 2] | 0; //@line 12106
 $63 = HEAP32[$0 >> 2] | 0; //@line 12107
 HEAP32[$0 >> 2] = $64; //@line 12108
 HEAP32[$$pre$phiZ2D >> 2] = $63; //@line 12109
 $65 = HEAP32[$33 >> 2] | 0; //@line 12110
 $66 = HEAP32[$35 >> 2] | 0; //@line 12111
 HEAP32[$33 >> 2] = $66; //@line 12112
 HEAP32[$35 >> 2] = $65; //@line 12113
 $67 = $0 + 8 | 0; //@line 12114
 $68 = $1 + 12 | 0; //@line 12115
 $69 = HEAP32[$67 >> 2] | 0; //@line 12116
 $70 = HEAP32[$68 >> 2] | 0; //@line 12117
 HEAP32[$67 >> 2] = $70; //@line 12118
 HEAP32[$68 >> 2] = $69; //@line 12119
 $71 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 12120
 HEAP32[$1 >> 2] = $71; //@line 12121
 return $4 | 0; //@line 12122
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0, $$1 = 0, $$3 = 0, $$phi$trans$insert = 0, $$phi$trans$insert56 = 0, $$pre$phi64Z2D = 0, $$pre$phi66Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink$i = 0, $$sink55 = 0, $1 = 0, $102 = 0, $105 = 0, $107 = 0, $109 = 0, $111 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $15 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $34 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $49 = 0, $55 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21728
 STACKTOP = STACKTOP + 16 | 0; //@line 21729
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21729
 $1 = sp + 4 | 0; //@line 21730
 $2 = sp; //@line 21731
 $3 = $0 + 64 | 0; //@line 21732
 if (!(HEAP32[$3 >> 2] | 0)) {
  $$0 = -1; //@line 21736
  STACKTOP = sp; //@line 21737
  return $$0 | 0; //@line 21737
 }
 $6 = $0 + 92 | 0; //@line 21739
 if (!(HEAP32[$6 >> 2] & 8)) {
  HEAP32[$0 + 24 >> 2] = 0; //@line 21745
  HEAP32[$0 + 20 >> 2] = 0; //@line 21747
  HEAP32[$0 + 28 >> 2] = 0; //@line 21749
  $15 = (HEAP8[$0 + 98 >> 0] | 0) == 0; //@line 21752
  $$sink$i = HEAP32[($15 ? $0 + 56 | 0 : $0 + 32 | 0) >> 2] | 0; //@line 21759
  $21 = $$sink$i + (HEAP32[($15 ? $0 + 60 | 0 : $0 + 52 | 0) >> 2] | 0) | 0; //@line 21761
  HEAP32[$0 + 8 >> 2] = $$sink$i; //@line 21763
  $23 = $0 + 12 | 0; //@line 21764
  HEAP32[$23 >> 2] = $21; //@line 21765
  HEAP32[$0 + 16 >> 2] = $21; //@line 21767
  HEAP32[$6 >> 2] = 8; //@line 21768
  $$0$i = 1; //@line 21769
  $$pre$phiZ2D = $23; //@line 21769
  $25 = $21; //@line 21769
 } else {
  $$phi$trans$insert = $0 + 12 | 0; //@line 21771
  $$0$i = 0; //@line 21773
  $$pre$phiZ2D = $$phi$trans$insert; //@line 21773
  $25 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 21773
 }
 if (!$25) {
  $27 = $1 + 1 | 0; //@line 21777
  HEAP32[$0 + 8 >> 2] = $1; //@line 21779
  HEAP32[$$pre$phiZ2D >> 2] = $27; //@line 21780
  HEAP32[$0 + 16 >> 2] = $27; //@line 21782
  $37 = $27; //@line 21783
 } else {
  $37 = $25; //@line 21785
 }
 $$phi$trans$insert56 = $0 + 16 | 0; //@line 21787
 if ($$0$i) {
  $39 = HEAP32[$$phi$trans$insert56 >> 2] | 0; //@line 21790
  $41 = 0; //@line 21790
 } else {
  $30 = HEAP32[$$phi$trans$insert56 >> 2] | 0; //@line 21792
  $34 = ($30 - (HEAP32[$0 + 8 >> 2] | 0) | 0) / 2 | 0; //@line 21796
  $39 = $30; //@line 21800
  $41 = $34 >>> 0 < 4 ? $34 : 4; //@line 21800
 }
 do {
  if (($37 | 0) == ($39 | 0)) {
   $42 = $0 + 8 | 0; //@line 21806
   _memmove(HEAP32[$42 >> 2] | 0, $37 + (0 - $41) | 0, $41 | 0) | 0; //@line 21809
   if (HEAP8[$0 + 98 >> 0] | 0) {
    $49 = HEAP32[$42 >> 2] | 0; //@line 21815
    $55 = _fread($49 + $41 | 0, 1, (HEAP32[$$phi$trans$insert56 >> 2] | 0) - $41 - $49 | 0, HEAP32[$3 >> 2] | 0) | 0; //@line 21821
    if (!$55) {
     $$3 = -1; //@line 21824
     $$pre$phi64Z2D = $42; //@line 21824
     break;
    }
    $58 = (HEAP32[$42 >> 2] | 0) + $41 | 0; //@line 21828
    HEAP32[$$pre$phiZ2D >> 2] = $58; //@line 21830
    HEAP32[$$phi$trans$insert56 >> 2] = $58 + $55; //@line 21831
    $$3 = HEAPU8[$58 >> 0] | 0; //@line 21834
    $$pre$phi64Z2D = $42; //@line 21834
    break;
   }
   $62 = $0 + 40 | 0; //@line 21837
   $63 = HEAP32[$62 >> 2] | 0; //@line 21838
   $64 = $0 + 36 | 0; //@line 21839
   $65 = HEAP32[$64 >> 2] | 0; //@line 21840
   $67 = $63; //@line 21842
   $68 = $65; //@line 21843
   if (($63 | 0) == ($65 | 0)) {
    $$pre$phi66Z2D = $0 + 32 | 0; //@line 21846
    $74 = $68; //@line 21846
    $75 = $67; //@line 21846
   } else {
    $70 = $0 + 32 | 0; //@line 21849
    _memmove(HEAP32[$70 >> 2] | 0, $65 | 0, $67 - $68 | 0) | 0; //@line 21851
    $$pre$phi66Z2D = $70; //@line 21854
    $74 = HEAP32[$64 >> 2] | 0; //@line 21854
    $75 = HEAP32[$62 >> 2] | 0; //@line 21854
   }
   $72 = HEAP32[$$pre$phi66Z2D >> 2] | 0; //@line 21856
   $76 = $72 + ($75 - $74) | 0; //@line 21858
   HEAP32[$64 >> 2] = $76; //@line 21859
   if (($72 | 0) == ($0 + 44 | 0)) {
    $83 = 8; //@line 21864
   } else {
    $83 = HEAP32[$0 + 52 >> 2] | 0; //@line 21868
   }
   $82 = $72 + $83 | 0; //@line 21870
   HEAP32[$62 >> 2] = $82; //@line 21871
   $84 = $0 + 60 | 0; //@line 21872
   $86 = (HEAP32[$84 >> 2] | 0) - $41 | 0; //@line 21874
   $87 = $82 - $76 | 0; //@line 21876
   $89 = $0 + 72 | 0; //@line 21879
   $91 = $89; //@line 21881
   $96 = HEAP32[$91 + 4 >> 2] | 0; //@line 21886
   $97 = $0 + 80 | 0; //@line 21887
   HEAP32[$97 >> 2] = HEAP32[$91 >> 2]; //@line 21889
   HEAP32[$97 + 4 >> 2] = $96; //@line 21892
   $102 = _fread($76, 1, $87 >>> 0 < $86 >>> 0 ? $87 : $86, HEAP32[$3 >> 2] | 0) | 0; //@line 21894
   if (!$102) {
    $$3 = -1; //@line 21897
    $$pre$phi64Z2D = $42; //@line 21897
   } else {
    $105 = HEAP32[$0 + 68 >> 2] | 0; //@line 21900
    if (!$105) {
     $107 = ___cxa_allocate_exception(4) | 0; //@line 21903
     __ZNSt8bad_castC2Ev($107); //@line 21904
     ___cxa_throw($107 | 0, 2904, 248); //@line 21905
    }
    $109 = (HEAP32[$64 >> 2] | 0) + $102 | 0; //@line 21909
    HEAP32[$62 >> 2] = $109; //@line 21910
    $111 = HEAP32[$42 >> 2] | 0; //@line 21912
    if ((FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$105 >> 2] | 0) + 16 >> 2] & 15]($105, $89, HEAP32[$$pre$phi66Z2D >> 2] | 0, $109, $64, $111 + $41 | 0, $111 + (HEAP32[$84 >> 2] | 0) | 0, $2) | 0) == 3) {
     $120 = HEAP32[$$pre$phi66Z2D >> 2] | 0; //@line 21922
     $121 = HEAP32[$62 >> 2] | 0; //@line 21923
     HEAP32[$42 >> 2] = $120; //@line 21924
     $$sink = $121; //@line 21925
     $$sink55 = $120; //@line 21925
     label = 25; //@line 21926
    } else {
     $122 = HEAP32[$2 >> 2] | 0; //@line 21928
     $124 = (HEAP32[$42 >> 2] | 0) + $41 | 0; //@line 21930
     if (($122 | 0) == ($124 | 0)) {
      $$1 = -1; //@line 21933
     } else {
      $$sink = $122; //@line 21935
      $$sink55 = $124; //@line 21935
      label = 25; //@line 21936
     }
    }
    if ((label | 0) == 25) {
     HEAP32[$$pre$phiZ2D >> 2] = $$sink55; //@line 21940
     HEAP32[$$phi$trans$insert56 >> 2] = $$sink; //@line 21941
     $$1 = HEAPU8[$$sink55 >> 0] | 0; //@line 21944
    }
    $$3 = $$1; //@line 21946
    $$pre$phi64Z2D = $42; //@line 21946
   }
  } else {
   $$3 = HEAPU8[$37 >> 0] | 0; //@line 21952
   $$pre$phi64Z2D = $0 + 8 | 0; //@line 21952
  }
 } while (0);
 if ((HEAP32[$$pre$phi64Z2D >> 2] | 0) == ($1 | 0)) {
  HEAP32[$$pre$phi64Z2D >> 2] = 0; //@line 21958
  HEAP32[$$pre$phiZ2D >> 2] = 0; //@line 21959
  HEAP32[$$phi$trans$insert56 >> 2] = 0; //@line 21960
 }
 $$0 = $$3; //@line 21962
 STACKTOP = sp; //@line 21963
 return $$0 | 0; //@line 21963
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa$i$i = 0, $$03$i$i = 0, $$byval_copy = 0, $$sroa$08$0$i = 0, $$sroa$speculated$$i = 0, $10 = 0, $100 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $53 = 0, $56 = 0, $57 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $89 = 0, $91 = 0, $95 = 0, $96 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10708
 STACKTOP = STACKTOP + 16 | 0; //@line 10709
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10709
 $$byval_copy = sp + 1 | 0; //@line 10710
 $3 = sp; //@line 10711
 $4 = HEAP32[$1 >> 2] | 0; //@line 10712
 $5 = HEAP32[$2 >> 2] | 0; //@line 10713
 $7 = ($5 - $4 | 0) / 72 | 0; //@line 10715
 $8 = $0 + 8 | 0; //@line 10716
 $10 = HEAP32[$0 >> 2] | 0; //@line 10718
 $14 = $4; //@line 10722
 $15 = $10; //@line 10723
 $16 = $5; //@line 10724
 if ($7 >>> 0 > (((HEAP32[$8 >> 2] | 0) - $10 | 0) / 72 | 0) >>> 0) {
  __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($0); //@line 10726
  if ($7 >>> 0 > 59652323) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 10729
  }
  $89 = ((HEAP32[$8 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 72 | 0; //@line 10735
  $91 = $89 << 1; //@line 10737
  $$sroa$speculated$$i = $89 >>> 0 < 29826161 ? $91 >>> 0 < $7 >>> 0 ? $7 : $91 : 59652323; //@line 10740
  if ($$sroa$speculated$$i >>> 0 > 59652323) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 10743
  }
  $95 = __Znwj($$sroa$speculated$$i * 72 | 0) | 0; //@line 10747
  $96 = $0 + 4 | 0; //@line 10748
  HEAP32[$96 >> 2] = $95; //@line 10749
  HEAP32[$0 >> 2] = $95; //@line 10750
  HEAP32[$8 >> 2] = $95 + ($$sroa$speculated$$i * 72 | 0); //@line 10752
  if (($14 | 0) == ($16 | 0)) {
   STACKTOP = sp; //@line 10755
   return;
  } else {
   $100 = $14; //@line 10757
   $99 = $95; //@line 10757
  }
  do {
   __ZN13CharmFunctionC2ERKS_($99, $100); //@line 10760
   $100 = $100 + 72 | 0; //@line 10761
   $99 = (HEAP32[$96 >> 2] | 0) + 72 | 0; //@line 10763
   HEAP32[$96 >> 2] = $99; //@line 10764
  } while (($100 | 0) != ($16 | 0));
  STACKTOP = sp; //@line 10772
  return;
 }
 $17 = $0 + 4 | 0; //@line 10774
 $20 = ((HEAP32[$17 >> 2] | 0) - $10 | 0) / 72 | 0; //@line 10777
 $21 = $7 >>> 0 > $20 >>> 0; //@line 10778
 $24 = $21 ? $14 + ($20 * 72 | 0) | 0 : $5; //@line 10782
 if (($14 | 0) == ($24 | 0)) {
  $$0$lcssa$i$i = $15; //@line 10785
 } else {
  $$03$i$i = $15; //@line 10787
  $$sroa$08$0$i = $14; //@line 10787
  while (1) {
   HEAP32[$$03$i$i >> 2] = HEAP32[$$sroa$08$0$i >> 2]; //@line 10790
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($$03$i$i + 4 | 0, $$sroa$08$0$i + 4 | 0) | 0; //@line 10793
   $29 = $$03$i$i + 16 | 0; //@line 10794
   $30 = $$sroa$08$0$i + 16 | 0; //@line 10795
   HEAP32[$29 >> 2] = HEAP32[$30 >> 2]; //@line 10796
   HEAP32[$29 + 4 >> 2] = HEAP32[$30 + 4 >> 2]; //@line 10796
   HEAP32[$29 + 8 >> 2] = HEAP32[$30 + 8 >> 2]; //@line 10796
   HEAP32[$29 + 12 >> 2] = HEAP32[$30 + 12 >> 2]; //@line 10796
   HEAP32[$29 + 16 >> 2] = HEAP32[$30 + 16 >> 2]; //@line 10796
   HEAP32[$29 + 20 >> 2] = HEAP32[$30 + 20 >> 2]; //@line 10796
   if (($$03$i$i | 0) != ($$sroa$08$0$i | 0)) {
    __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($$03$i$i + 40 | 0, HEAP32[$$sroa$08$0$i + 40 >> 2] | 0, HEAP32[$$sroa$08$0$i + 44 >> 2] | 0); //@line 10804
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($$03$i$i + 52 | 0, $$sroa$08$0$i + 52 | 0) | 0; //@line 10808
   HEAP16[$$03$i$i + 64 >> 1] = HEAP16[$$sroa$08$0$i + 64 >> 1] | 0; //@line 10812
   $$sroa$08$0$i = $$sroa$08$0$i + 72 | 0; //@line 10813
   $43 = $$03$i$i + 72 | 0; //@line 10814
   if (($$sroa$08$0$i | 0) == ($24 | 0)) {
    $$0$lcssa$i$i = $43; //@line 10817
    break;
   } else {
    $$03$i$i = $43; //@line 10820
   }
  }
 }
 if ($21) {
  $45 = HEAP32[$2 >> 2] | 0; //@line 10825
  if (($45 | 0) == ($24 | 0)) {
   STACKTOP = sp; //@line 10828
   return;
  }
  $47 = HEAP32[$17 >> 2] | 0; //@line 10831
  $48 = $24; //@line 10831
  do {
   __ZN13CharmFunctionC2ERKS_($47, $48); //@line 10833
   $48 = $48 + 72 | 0; //@line 10834
   $47 = (HEAP32[$17 >> 2] | 0) + 72 | 0; //@line 10836
   HEAP32[$17 >> 2] = $47; //@line 10837
  } while (($48 | 0) != ($45 | 0));
  STACKTOP = sp; //@line 10845
  return;
 }
 $53 = HEAP32[$17 >> 2] | 0; //@line 10847
 if (($53 | 0) == ($$0$lcssa$i$i | 0)) {
  STACKTOP = sp; //@line 10850
  return;
 }
 $56 = $53; //@line 10852
 L34 : while (1) {
  HEAP32[$17 >> 2] = $56 + -72; //@line 10855
  $57 = $56 + -20 | 0; //@line 10856
  if ((HEAP8[$57 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$57 >> 2] | 0); //@line 10862
  }
  $62 = $56 + -32 | 0; //@line 10864
  $63 = HEAP32[$62 >> 2] | 0; //@line 10865
  if ($63 | 0) {
   $65 = $56 + -28 | 0; //@line 10868
   $66 = HEAP32[$65 >> 2] | 0; //@line 10869
   if (($66 | 0) == ($63 | 0)) {
    $77 = $63; //@line 10872
   } else {
    $68 = $56 + -24 | 0; //@line 10874
    $70 = $66; //@line 10875
    do {
     $69 = $70 + -72 | 0; //@line 10877
     HEAP32[$65 >> 2] = $69; //@line 10878
     __THREW__ = 0; //@line 10879
     HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 10880
     invoke_viii(13, $$byval_copy | 0, $68 | 0, $69 | 0); //@line 10881
     $71 = __THREW__; //@line 10882
     __THREW__ = 0; //@line 10882
     if ($71 & 1) {
      label = 19; //@line 10885
      break L34;
     }
     $70 = HEAP32[$65 >> 2] | 0; //@line 10888
    } while (($70 | 0) != ($63 | 0));
    $77 = HEAP32[$62 >> 2] | 0; //@line 10897
   }
   __ZdlPv($77); //@line 10899
  }
  $78 = $56 + -68 | 0; //@line 10901
  if ((HEAP8[$78 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$78 >> 2] | 0); //@line 10907
  }
  $56 = HEAP32[$17 >> 2] | 0; //@line 10909
  if (($56 | 0) == ($$0$lcssa$i$i | 0)) {
   label = 31; //@line 10912
   break;
  }
 }
 if ((label | 0) == 19) {
  $75 = ___cxa_find_matching_catch_3(0) | 0; //@line 10919
  ___clang_call_terminate($75); //@line 10921
 } else if ((label | 0) == 31) {
  STACKTOP = sp; //@line 10925
  return;
 }
}
function ___get_locale($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $11 = 0, $15 = 0, $2 = 0, $21 = 0, $23 = 0, $3 = 0, $40 = 0, $48 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $70 = 0, $72 = 0, $76 = 0, $78 = 0, $82 = 0, $86 = 0, $93 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17360
 STACKTOP = STACKTOP + 272 | 0; //@line 17361
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272); //@line 17361
 $2 = sp + 8 | 0; //@line 17362
 $3 = sp; //@line 17363
 do {
  if (!(HEAP8[$1 >> 0] | 0)) {
   $6 = _getenv(28882) | 0; //@line 17368
   if ($6 | 0) {
    if (HEAP8[$6 >> 0] | 0) {
     $$1 = $6; //@line 17374
     break;
    }
   }
   $11 = _getenv(28889 + ($0 * 12 | 0) | 0) | 0; //@line 17379
   if ($11 | 0) {
    if (HEAP8[$11 >> 0] | 0) {
     $$1 = $11; //@line 17385
     break;
    }
   }
   $15 = _getenv(28961) | 0; //@line 17389
   if ($15 | 0) {
    if (HEAP8[$15 >> 0] | 0) {
     $$1 = $15; //@line 17395
     break;
    }
   }
   $$1 = 28966; //@line 17399
  } else {
   $$1 = $1; //@line 17401
  }
 } while (0);
 $$093118 = 0; //@line 17404
 L13 : while (1) {
  switch (HEAP8[$$1 + $$093118 >> 0] | 0) {
  case 47:
  case 0:
   {
    $$093$lcssa = $$093118; //@line 17410
    break L13;
    break;
   }
  default:
   {}
  }
  $21 = $$093118 + 1 | 0; //@line 17417
  if ($21 >>> 0 < 15) {
   $$093118 = $21; //@line 17420
  } else {
   $$093$lcssa = $21; //@line 17422
   break;
  }
 }
 $23 = HEAP8[$$1 >> 0] | 0; //@line 17426
 if ($23 << 24 >> 24 == 46) {
  $$2122 = 28966; //@line 17429
  label = 15; //@line 17430
 } else {
  if (!(HEAP8[$$1 + $$093$lcssa >> 0] | 0)) {
   if ($23 << 24 >> 24 == 67) {
    $$2122 = $$1; //@line 17438
    label = 15; //@line 17439
   } else {
    $$2123 = $$1; //@line 17441
    label = 16; //@line 17442
   }
  } else {
   $$2122 = 28966; //@line 17445
   label = 15; //@line 17446
  }
 }
 if ((label | 0) == 15) {
  if (!(HEAP8[$$2122 + 1 >> 0] | 0)) {
   $$2124 = $$2122; //@line 17454
   label = 18; //@line 17455
  } else {
   $$2123 = $$2122; //@line 17457
   label = 16; //@line 17458
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   if (!(_strcmp($$2123, 28966) | 0)) {
    $$2124 = $$2123; //@line 17466
    label = 18; //@line 17467
   } else {
    if (!(_strcmp($$2123, 28974) | 0)) {
     $$2124 = $$2123; //@line 17472
     label = 18; //@line 17473
    } else {
     $40 = HEAP32[8613] | 0; //@line 17475
     if ($40 | 0) {
      $$094114 = $40; //@line 17478
      do {
       if (!(_strcmp($$2123, $$094114 + 8 | 0) | 0)) {
        $$0 = $$094114; //@line 17484
        break L22;
       }
       $$094114 = HEAP32[$$094114 + 24 >> 2] | 0; //@line 17488
      } while (($$094114 | 0) != 0);
     }
     ___lock(34456); //@line 17497
     $48 = HEAP32[8613] | 0; //@line 17498
     L32 : do {
      if ($48 | 0) {
       $$195112 = $48; //@line 17502
       while (1) {
        if (!(_strcmp($$2123, $$195112 + 8 | 0) | 0)) {
         break;
        }
        $54 = HEAP32[$$195112 + 24 >> 2] | 0; //@line 17511
        if (!$54) {
         break L32;
        } else {
         $$195112 = $54; //@line 17516
        }
       }
       ___unlock(34456); //@line 17519
       $$0 = $$195112; //@line 17520
       break L22;
      }
     } while (0);
     L39 : do {
      if (!(HEAP32[8588] | 0)) {
       $58 = _getenv(28980) | 0; //@line 17528
       if (!$58) {
        label = 41; //@line 17531
       } else {
        if (!(HEAP8[$58 >> 0] | 0)) {
         label = 41; //@line 17536
        } else {
         $62 = 254 - $$093$lcssa | 0; //@line 17538
         $63 = $$093$lcssa + 1 | 0; //@line 17539
         $$1100111 = $58; //@line 17540
         while (1) {
          $64 = ___strchrnul($$1100111, 58) | 0; //@line 17542
          $68 = HEAP8[$64 >> 0] | 0; //@line 17546
          $70 = $64 - $$1100111 + (($68 << 24 >> 24 != 0) << 31 >> 31) | 0; //@line 17549
          if ($70 >>> 0 < $62 >>> 0) {
           _memcpy($2 | 0, $$1100111 | 0, $70 | 0) | 0; //@line 17552
           $72 = $2 + $70 | 0; //@line 17553
           HEAP8[$72 >> 0] = 47; //@line 17554
           _memcpy($72 + 1 | 0, $$2123 | 0, $$093$lcssa | 0) | 0; //@line 17556
           HEAP8[$2 + ($63 + $70) >> 0] = 0; //@line 17559
           $76 = ___map_file($2 | 0, $3 | 0) | 0; //@line 17560
           if ($76 | 0) {
            break;
           }
           $86 = HEAP8[$64 >> 0] | 0; //@line 17566
          } else {
           $86 = $68; //@line 17568
          }
          $$1100111 = $64 + ($86 << 24 >> 24 != 0 & 1) | 0; //@line 17572
          if (!(HEAP8[$$1100111 >> 0] | 0)) {
           label = 41; //@line 17576
           break L39;
          }
         }
         $78 = _malloc(28) | 0; //@line 17582
         if (!$78) {
          ___munmap($76, HEAP32[$3 >> 2] | 0) | 0; //@line 17586
          label = 41; //@line 17587
          break;
         } else {
          HEAP32[$78 >> 2] = $76; //@line 17590
          HEAP32[$78 + 4 >> 2] = HEAP32[$3 >> 2]; //@line 17593
          $82 = $78 + 8 | 0; //@line 17594
          _memcpy($82 | 0, $$2123 | 0, $$093$lcssa | 0) | 0; //@line 17595
          HEAP8[$82 + $$093$lcssa >> 0] = 0; //@line 17597
          HEAP32[$78 + 24 >> 2] = HEAP32[8613]; //@line 17600
          HEAP32[8613] = $78; //@line 17601
          $$4 = $78; //@line 17602
          break;
         }
        }
       }
      } else {
       label = 41; //@line 17608
      }
     } while (0);
     if ((label | 0) == 41) {
      $93 = _malloc(28) | 0; //@line 17612
      if (!$93) {
       $$4 = $93; //@line 17615
      } else {
       HEAP32[$93 >> 2] = HEAP32[1382]; //@line 17618
       HEAP32[$93 + 4 >> 2] = HEAP32[1383]; //@line 17621
       $98 = $93 + 8 | 0; //@line 17622
       _memcpy($98 | 0, $$2123 | 0, $$093$lcssa | 0) | 0; //@line 17623
       HEAP8[$98 + $$093$lcssa >> 0] = 0; //@line 17625
       HEAP32[$93 + 24 >> 2] = HEAP32[8613]; //@line 17628
       HEAP32[8613] = $93; //@line 17629
       $$4 = $93; //@line 17630
      }
     }
     ___unlock(34456); //@line 17637
     $$0 = ($0 | 0) == 0 & ($$4 | 0) == 0 ? 5528 : $$4; //@line 17638
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 18) {
   if (!$0) {
    if ((HEAP8[$$2124 + 1 >> 0] | 0) == 46) {
     $$0 = 5528; //@line 17651
     break;
    }
   }
   $$0 = 0; //@line 17655
  }
 } while (0);
 STACKTOP = sp; //@line 17658
 return $$0 | 0; //@line 17658
}
function __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i34 = 0, $$0$i29 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $$2 = 0, $$224 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $28 = 0, $30 = 0, $31 = 0, $38 = 0, $39 = 0, $49 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $84 = 0, $85 = 0, $9 = 0, $95 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 54753
 STACKTOP = STACKTOP + 224 | 0; //@line 54754
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 54754
 $6 = sp + 184 | 0; //@line 54755
 $7 = sp + 192 | 0; //@line 54756
 $8 = sp + 180 | 0; //@line 54757
 $9 = sp + 176 | 0; //@line 54758
 $10 = sp + 168 | 0; //@line 54759
 $11 = sp + 40 | 0; //@line 54760
 $12 = sp + 32 | 0; //@line 54761
 $13 = sp + 28 | 0; //@line 54762
 $14 = sp + 16 | 0; //@line 54763
 $15 = sp + 8 | 0; //@line 54764
 $16 = sp; //@line 54765
 HEAP32[$14 >> 2] = 0; //@line 54766
 HEAP32[$14 + 4 >> 2] = 0; //@line 54766
 HEAP32[$14 + 8 >> 2] = 0; //@line 54766
 $$0$i$i = 0; //@line 54767
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$14 + ($$0$i$i << 2) >> 2] = 0; //@line 54774
  $$0$i$i = $$0$i$i + 1 | 0; //@line 54776
 }
 HEAP32[$15 + 4 >> 2] = 0; //@line 54779
 HEAP32[$15 >> 2] = 12376; //@line 54780
 $22 = HEAP8[$5 + 8 + 3 >> 0] | 0; //@line 54783
 $23 = $22 << 24 >> 24 < 0; //@line 54784
 $28 = $23 ? HEAP32[$5 >> 2] | 0 : $5; //@line 54789
 $30 = $28 + (($23 ? HEAP32[$5 + 4 >> 2] | 0 : $22 & 255) << 2) | 0; //@line 54791
 $31 = $7 + 32 | 0; //@line 54792
 $$016$i = $28; //@line 54793
 $$017$i = 0; //@line 54793
 L5 : while (1) {
  if (!(($$017$i | 0) != 2 & $$016$i >>> 0 < $30 >>> 0)) {
   label = 13; //@line 54799
   break;
  }
  HEAP32[$9 >> 2] = $$016$i; //@line 54802
  __THREW__ = 0; //@line 54806
  $38 = invoke_iiiiiiiii(HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] | 0, $15 | 0, $6 | 0, $$016$i | 0, $30 | 0, $9 | 0, $7 | 0, $31 | 0, $8 | 0) | 0; //@line 54807
  $39 = __THREW__; //@line 54808
  __THREW__ = 0; //@line 54808
  if ($39 & 1) {
   label = 14; //@line 54811
   break;
  }
  if (($38 | 0) == 2 ? 1 : (HEAP32[$9 >> 2] | 0) == ($$016$i | 0)) {
   label = 8; //@line 54819
   break;
  } else {
   $$0$i29 = $7; //@line 54822
  }
  while (1) {
   if ($$0$i29 >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) {
    break;
   }
   __THREW__ = 0; //@line 54831
   invoke_vii(116, $14 | 0, HEAP8[$$0$i29 >> 0] | 0); //@line 54832
   $49 = __THREW__; //@line 54833
   __THREW__ = 0; //@line 54833
   if ($49 & 1) {
    label = 14; //@line 54836
    break L5;
   }
   $$0$i29 = $$0$i29 + 1 | 0; //@line 54840
  }
  $$016$i = HEAP32[$9 >> 2] | 0; //@line 54843
  $$017$i = $38; //@line 54843
 }
 do {
  if ((label | 0) == 8) {
   __THREW__ = 0; //@line 54847
   invoke_vi(268, 30868); //@line 54848
   __THREW__ = 0; //@line 54849
   label = 14; //@line 54850
  } else if ((label | 0) == 13) {
   __ZNSt3__26locale5facetD2Ev($15); //@line 54853
   $60 = (HEAP8[$14 + 11 >> 0] | 0) < 0 ? HEAP32[$14 >> 2] | 0 : $14; //@line 54862
   __THREW__ = 0; //@line 54863
   $61 = invoke_iiiii(17, (($2 | 0) == -1 ? -1 : $2 << 1) | 0, $3 | 0, $4 | 0, $60 | 0) | 0; //@line 54864
   $62 = __THREW__; //@line 54865
   __THREW__ = 0; //@line 54865
   if ($62 & 1) {
    $98 = ___cxa_find_matching_catch_2() | 0; //@line 54868
    $$2 = $98; //@line 54870
    $$224 = tempRet0; //@line 54870
    break;
   }
   HEAP32[$0 >> 2] = 0; //@line 54873
   HEAP32[$0 + 4 >> 2] = 0; //@line 54873
   HEAP32[$0 + 8 >> 2] = 0; //@line 54873
   $$0$i$i34 = 0; //@line 54874
   while (1) {
    if (($$0$i$i34 | 0) == 3) {
     break;
    }
    HEAP32[$0 + ($$0$i$i34 << 2) >> 2] = 0; //@line 54881
    $$0$i$i34 = $$0$i$i34 + 1 | 0; //@line 54883
   }
   HEAP32[$16 + 4 >> 2] = 0; //@line 54886
   HEAP32[$16 >> 2] = 12424; //@line 54887
   $70 = $60 + (_strlen($61) | 0) | 0; //@line 54889
   $71 = $70; //@line 54890
   $72 = $11 + 128 | 0; //@line 54891
   $$019$i = $60; //@line 54892
   $$020$i = 0; //@line 54892
   L23 : while (1) {
    if (!(($$020$i | 0) != 2 & $$019$i >>> 0 < $70 >>> 0)) {
     label = 27; //@line 54898
     break;
    }
    HEAP32[$13 >> 2] = $$019$i; //@line 54901
    __THREW__ = 0; //@line 54910
    $84 = invoke_iiiiiiiii(HEAP32[(HEAP32[$16 >> 2] | 0) + 16 >> 2] | 0, $16 | 0, $10 | 0, $$019$i | 0, (($71 - $$019$i | 0) > 32 ? $$019$i + 32 | 0 : $70) | 0, $13 | 0, $11 | 0, $72 | 0, $12 | 0) | 0; //@line 54911
    $85 = __THREW__; //@line 54912
    __THREW__ = 0; //@line 54912
    if ($85 & 1) {
     break;
    }
    if (($84 | 0) == 2 ? 1 : (HEAP32[$13 >> 2] | 0) == ($$019$i | 0)) {
     label = 22; //@line 54922
     break;
    } else {
     $$0$i = $11; //@line 54925
    }
    while (1) {
     if ($$0$i >>> 0 >= (HEAP32[$12 >> 2] | 0) >>> 0) {
      break;
     }
     __THREW__ = 0; //@line 54934
     invoke_vii(148, $0 | 0, HEAP32[$$0$i >> 2] | 0); //@line 54935
     $95 = __THREW__; //@line 54936
     __THREW__ = 0; //@line 54936
     if ($95 & 1) {
      break L23;
     }
     $$0$i = $$0$i + 4 | 0; //@line 54942
    }
    $$019$i = HEAP32[$13 >> 2] | 0; //@line 54945
    $$020$i = $84; //@line 54945
   }
   if ((label | 0) == 22) {
    __THREW__ = 0; //@line 54948
    invoke_vi(268, 30868); //@line 54949
    __THREW__ = 0; //@line 54950
   } else if ((label | 0) == 27) {
    __ZNSt3__26locale5facetD2Ev($16); //@line 54953
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14); //@line 54954
    STACKTOP = sp; //@line 54955
    return;
   }
   $100 = ___cxa_find_matching_catch_2() | 0; //@line 54957
   $101 = tempRet0; //@line 54958
   __ZNSt3__26locale5facetD2Ev($16); //@line 54959
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0); //@line 54960
   $$2 = $100; //@line 54961
   $$224 = $101; //@line 54961
  }
 } while (0);
 if ((label | 0) == 14) {
  $64 = ___cxa_find_matching_catch_2() | 0; //@line 54965
  $65 = tempRet0; //@line 54966
  __ZNSt3__26locale5facetD2Ev($15); //@line 54967
  $$2 = $64; //@line 54968
  $$224 = $65; //@line 54968
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14); //@line 54970
 ___resumeException($$2 | 0); //@line 54971
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPKS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0$lcssa$i$i = 0, $$07$i$i = 0, $$07$i$i21 = 0, $$078$i$i = 0, $$09$i$i = 0, $$byval_copy = 0, $$sroa$speculated$$i = 0, $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $39 = 0, $42 = 0, $47 = 0, $50 = 0, $51 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $8 = 0, $83 = 0, $85 = 0, $89 = 0, $90 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14463
 STACKTOP = STACKTOP + 16 | 0; //@line 14464
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14464
 $$byval_copy = sp + 1 | 0; //@line 14465
 $3 = sp; //@line 14466
 $7 = ($2 - $1 | 0) / 72 | 0; //@line 14470
 $8 = $0 + 8 | 0; //@line 14471
 $10 = HEAP32[$0 >> 2] | 0; //@line 14473
 $14 = $10; //@line 14477
 if ($7 >>> 0 > (((HEAP32[$8 >> 2] | 0) - $10 | 0) / 72 | 0) >>> 0) {
  __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($0); //@line 14479
  if ($7 >>> 0 > 59652323) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 14482
  }
  $83 = ((HEAP32[$8 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 72 | 0; //@line 14488
  $85 = $83 << 1; //@line 14490
  $$sroa$speculated$$i = $83 >>> 0 < 29826161 ? $85 >>> 0 < $7 >>> 0 ? $7 : $85 : 59652323; //@line 14493
  if ($$sroa$speculated$$i >>> 0 > 59652323) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 14496
  }
  $89 = __Znwj($$sroa$speculated$$i * 72 | 0) | 0; //@line 14500
  $90 = $0 + 4 | 0; //@line 14501
  HEAP32[$90 >> 2] = $89; //@line 14502
  HEAP32[$0 >> 2] = $89; //@line 14503
  HEAP32[$8 >> 2] = $89 + ($$sroa$speculated$$i * 72 | 0); //@line 14505
  if (($1 | 0) == ($2 | 0)) {
   STACKTOP = sp; //@line 14508
   return;
  } else {
   $$07$i$i = $1; //@line 14510
   $93 = $89; //@line 14510
  }
  do {
   __ZN13CharmFunctionC2ERKS_($93, $$07$i$i); //@line 14513
   $$07$i$i = $$07$i$i + 72 | 0; //@line 14514
   $93 = (HEAP32[$90 >> 2] | 0) + 72 | 0; //@line 14516
   HEAP32[$90 >> 2] = $93; //@line 14517
  } while (($$07$i$i | 0) != ($2 | 0));
  STACKTOP = sp; //@line 14525
  return;
 }
 $15 = $0 + 4 | 0; //@line 14527
 $18 = ((HEAP32[$15 >> 2] | 0) - $10 | 0) / 72 | 0; //@line 14530
 $19 = $7 >>> 0 > $18 >>> 0; //@line 14531
 $20 = $1 + ($18 * 72 | 0) | 0; //@line 14532
 $$ = $19 ? $20 : $2; //@line 14533
 if (($$ | 0) == ($1 | 0)) {
  $$0$lcssa$i$i = $14; //@line 14536
 } else {
  $$078$i$i = $1; //@line 14538
  $$09$i$i = $14; //@line 14538
  while (1) {
   HEAP32[$$09$i$i >> 2] = HEAP32[$$078$i$i >> 2]; //@line 14541
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($$09$i$i + 4 | 0, $$078$i$i + 4 | 0) | 0; //@line 14544
   $25 = $$09$i$i + 16 | 0; //@line 14545
   $26 = $$078$i$i + 16 | 0; //@line 14546
   HEAP32[$25 >> 2] = HEAP32[$26 >> 2]; //@line 14547
   HEAP32[$25 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 14547
   HEAP32[$25 + 8 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 14547
   HEAP32[$25 + 12 >> 2] = HEAP32[$26 + 12 >> 2]; //@line 14547
   HEAP32[$25 + 16 >> 2] = HEAP32[$26 + 16 >> 2]; //@line 14547
   HEAP32[$25 + 20 >> 2] = HEAP32[$26 + 20 >> 2]; //@line 14547
   if (($$09$i$i | 0) != ($$078$i$i | 0)) {
    __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($$09$i$i + 40 | 0, HEAP32[$$078$i$i + 40 >> 2] | 0, HEAP32[$$078$i$i + 44 >> 2] | 0); //@line 14555
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($$09$i$i + 52 | 0, $$078$i$i + 52 | 0) | 0; //@line 14559
   HEAP16[$$09$i$i + 64 >> 1] = HEAP16[$$078$i$i + 64 >> 1] | 0; //@line 14563
   $$078$i$i = $$078$i$i + 72 | 0; //@line 14564
   $39 = $$09$i$i + 72 | 0; //@line 14565
   if (($$078$i$i | 0) == ($$ | 0)) {
    $$0$lcssa$i$i = $39; //@line 14568
    break;
   } else {
    $$09$i$i = $39; //@line 14571
   }
  }
 }
 if ($19) {
  if (($$ | 0) == ($2 | 0)) {
   STACKTOP = sp; //@line 14578
   return;
  }
  $$07$i$i21 = $20; //@line 14581
  $42 = HEAP32[$15 >> 2] | 0; //@line 14581
  do {
   __ZN13CharmFunctionC2ERKS_($42, $$07$i$i21); //@line 14583
   $$07$i$i21 = $$07$i$i21 + 72 | 0; //@line 14584
   $42 = (HEAP32[$15 >> 2] | 0) + 72 | 0; //@line 14586
   HEAP32[$15 >> 2] = $42; //@line 14587
  } while (($$07$i$i21 | 0) != ($2 | 0));
  STACKTOP = sp; //@line 14595
  return;
 }
 $47 = HEAP32[$15 >> 2] | 0; //@line 14597
 if (($47 | 0) == ($$0$lcssa$i$i | 0)) {
  STACKTOP = sp; //@line 14600
  return;
 }
 $50 = $47; //@line 14602
 L34 : while (1) {
  HEAP32[$15 >> 2] = $50 + -72; //@line 14605
  $51 = $50 + -20 | 0; //@line 14606
  if ((HEAP8[$51 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$51 >> 2] | 0); //@line 14612
  }
  $56 = $50 + -32 | 0; //@line 14614
  $57 = HEAP32[$56 >> 2] | 0; //@line 14615
  if ($57 | 0) {
   $59 = $50 + -28 | 0; //@line 14618
   $60 = HEAP32[$59 >> 2] | 0; //@line 14619
   if (($60 | 0) == ($57 | 0)) {
    $71 = $57; //@line 14622
   } else {
    $62 = $50 + -24 | 0; //@line 14624
    $64 = $60; //@line 14625
    do {
     $63 = $64 + -72 | 0; //@line 14627
     HEAP32[$59 >> 2] = $63; //@line 14628
     __THREW__ = 0; //@line 14629
     HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 14630
     invoke_viii(13, $$byval_copy | 0, $62 | 0, $63 | 0); //@line 14631
     $65 = __THREW__; //@line 14632
     __THREW__ = 0; //@line 14632
     if ($65 & 1) {
      label = 19; //@line 14635
      break L34;
     }
     $64 = HEAP32[$59 >> 2] | 0; //@line 14638
    } while (($64 | 0) != ($57 | 0));
    $71 = HEAP32[$56 >> 2] | 0; //@line 14647
   }
   __ZdlPv($71); //@line 14649
  }
  $72 = $50 + -68 | 0; //@line 14651
  if ((HEAP8[$72 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$72 >> 2] | 0); //@line 14657
  }
  $50 = HEAP32[$15 >> 2] | 0; //@line 14659
  if (($50 | 0) == ($$0$lcssa$i$i | 0)) {
   label = 31; //@line 14662
   break;
  }
 }
 if ((label | 0) == 19) {
  $69 = ___cxa_find_matching_catch_3(0) | 0; //@line 14669
  ___clang_call_terminate($69); //@line 14671
 } else if ((label | 0) == 31) {
  STACKTOP = sp; //@line 14675
  return;
 }
}
function __ZNSt3__26vectorI22CharmTypeSignatureUnitNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0$lcssa$i$i = 0, $$07$i$i = 0, $$07$i$i21 = 0, $$078$i$i = 0, $$09$i$i = 0, $$sroa$speculated$$i = 0, $101 = 0, $103 = 0, $105 = 0, $106 = 0, $115 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $31 = 0, $34 = 0, $37 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $93 = 0, $96 = 0, $99 = 0, label = 0;
 $6 = ($2 - $1 | 0) / 24 | 0; //@line 21870
 $7 = $0 + 8 | 0; //@line 21871
 $9 = HEAP32[$0 >> 2] | 0; //@line 21873
 $13 = $9; //@line 21877
 if ($6 >>> 0 > (((HEAP32[$7 >> 2] | 0) - $9 | 0) / 24 | 0) >>> 0) {
  __ZNSt3__26vectorI22CharmTypeSignatureUnitNS_9allocatorIS1_EEE10deallocateEv($0); //@line 21879
  if ($6 >>> 0 > 178956970) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 21882
  }
  $86 = ((HEAP32[$7 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 24 | 0; //@line 21888
  $88 = $86 << 1; //@line 21890
  $$sroa$speculated$$i = $86 >>> 0 < 89478485 ? $88 >>> 0 < $6 >>> 0 ? $6 : $88 : 178956970; //@line 21893
  if ($$sroa$speculated$$i >>> 0 > 178956970) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 21896
  }
  $92 = __Znwj($$sroa$speculated$$i * 24 | 0) | 0; //@line 21900
  $93 = $0 + 4 | 0; //@line 21901
  HEAP32[$93 >> 2] = $92; //@line 21902
  HEAP32[$0 >> 2] = $92; //@line 21903
  HEAP32[$7 >> 2] = $92 + ($$sroa$speculated$$i * 24 | 0); //@line 21905
  if (($1 | 0) == ($2 | 0)) {
   return;
  } else {
   $$07$i$i = $1; //@line 21910
   $96 = $92; //@line 21910
  }
  while (1) {
   __ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEEC2ERKS4_($96, $$07$i$i); //@line 21913
   __THREW__ = 0; //@line 21916
   invoke_vii(140, $96 + 12 | 0, $$07$i$i + 12 | 0); //@line 21917
   $99 = __THREW__; //@line 21918
   __THREW__ = 0; //@line 21918
   if ($99 & 1) {
    break;
   }
   $$07$i$i = $$07$i$i + 24 | 0; //@line 21923
   $115 = (HEAP32[$93 >> 2] | 0) + 24 | 0; //@line 21925
   HEAP32[$93 >> 2] = $115; //@line 21926
   if (($$07$i$i | 0) == ($2 | 0)) {
    label = 38; //@line 21929
    break;
   } else {
    $96 = $115; //@line 21932
   }
  }
  if ((label | 0) == 38) {
   return;
  }
  $101 = ___cxa_find_matching_catch_2() | 0; //@line 21938
  $103 = HEAP32[$96 >> 2] | 0; //@line 21940
  if (!$103) {
   ___resumeException($101 | 0); //@line 21943
  }
  $105 = $96 + 4 | 0; //@line 21946
  $106 = HEAP32[$105 >> 2] | 0; //@line 21947
  if (($106 | 0) != ($103 | 0)) {
   HEAP32[$105 >> 2] = $106 + (~(($106 + -4 - $103 | 0) >>> 2) << 2); //@line 21957
  }
  __ZdlPv($103); //@line 21959
  ___resumeException($101 | 0); //@line 21960
 }
 $14 = $0 + 4 | 0; //@line 21963
 $17 = ((HEAP32[$14 >> 2] | 0) - $9 | 0) / 24 | 0; //@line 21966
 $18 = $6 >>> 0 > $17 >>> 0; //@line 21967
 $19 = $1 + ($17 * 24 | 0) | 0; //@line 21968
 $$ = $18 ? $19 : $2; //@line 21969
 if (($$ | 0) == ($1 | 0)) {
  $$0$lcssa$i$i = $13; //@line 21972
 } else {
  $$078$i$i = $1; //@line 21974
  $$09$i$i = $13; //@line 21974
  while (1) {
   if (($$09$i$i | 0) != ($$078$i$i | 0)) {
    __ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($$09$i$i, HEAP32[$$078$i$i >> 2] | 0, HEAP32[$$078$i$i + 4 >> 2] | 0); //@line 21981
    __ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($$09$i$i + 12 | 0, HEAP32[$$078$i$i + 12 >> 2] | 0, HEAP32[$$078$i$i + 16 >> 2] | 0); //@line 21987
   }
   $$078$i$i = $$078$i$i + 24 | 0; //@line 21989
   $31 = $$09$i$i + 24 | 0; //@line 21990
   if (($$078$i$i | 0) == ($$ | 0)) {
    $$0$lcssa$i$i = $31; //@line 21993
    break;
   } else {
    $$09$i$i = $31; //@line 21996
   }
  }
 }
 if ($18) {
  if (($$ | 0) == ($2 | 0)) {
   return;
  }
  $$07$i$i21 = $19; //@line 22006
  $34 = HEAP32[$14 >> 2] | 0; //@line 22006
  while (1) {
   __ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEEC2ERKS4_($34, $$07$i$i21); //@line 22008
   __THREW__ = 0; //@line 22011
   invoke_vii(140, $34 + 12 | 0, $$07$i$i21 + 12 | 0); //@line 22012
   $37 = __THREW__; //@line 22013
   __THREW__ = 0; //@line 22013
   if ($37 & 1) {
    break;
   }
   $$07$i$i21 = $$07$i$i21 + 24 | 0; //@line 22018
   $53 = (HEAP32[$14 >> 2] | 0) + 24 | 0; //@line 22020
   HEAP32[$14 >> 2] = $53; //@line 22021
   if (($$07$i$i21 | 0) == ($2 | 0)) {
    label = 38; //@line 22024
    break;
   } else {
    $34 = $53; //@line 22027
   }
  }
  if ((label | 0) == 38) {
   return;
  }
  $39 = ___cxa_find_matching_catch_2() | 0; //@line 22033
  $41 = HEAP32[$34 >> 2] | 0; //@line 22035
  if (!$41) {
   ___resumeException($39 | 0); //@line 22038
  }
  $43 = $34 + 4 | 0; //@line 22041
  $44 = HEAP32[$43 >> 2] | 0; //@line 22042
  if (($44 | 0) != ($41 | 0)) {
   HEAP32[$43 >> 2] = $44 + (~(($44 + -4 - $41 | 0) >>> 2) << 2); //@line 22052
  }
  __ZdlPv($41); //@line 22054
  ___resumeException($39 | 0); //@line 22055
 } else {
  $55 = HEAP32[$14 >> 2] | 0; //@line 22058
  if (($55 | 0) == ($$0$lcssa$i$i | 0)) {
   return;
  } else {
   $58 = $55; //@line 22063
  }
  do {
   $57 = $58 + -24 | 0; //@line 22066
   HEAP32[$14 >> 2] = $57; //@line 22067
   $60 = HEAP32[$58 + -12 >> 2] | 0; //@line 22069
   if ($60 | 0) {
    $62 = $58 + -8 | 0; //@line 22072
    $63 = HEAP32[$62 >> 2] | 0; //@line 22073
    if (($63 | 0) != ($60 | 0)) {
     HEAP32[$62 >> 2] = $63 + (~(($63 + -4 - $60 | 0) >>> 2) << 2); //@line 22083
    }
    __ZdlPv($60); //@line 22085
   }
   $70 = HEAP32[$57 >> 2] | 0; //@line 22087
   if ($70 | 0) {
    $74 = $58 + -20 | 0; //@line 22090
    $75 = HEAP32[$74 >> 2] | 0; //@line 22091
    if (($75 | 0) != ($70 | 0)) {
     HEAP32[$74 >> 2] = $75 + (~(($75 + -4 - $70 | 0) >>> 2) << 2); //@line 22101
    }
    __ZdlPv($70); //@line 22103
   }
   $58 = HEAP32[$14 >> 2] | 0; //@line 22105
  } while (($58 | 0) != ($$0$lcssa$i$i | 0));
  return;
 }
}
function _runCapsule($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $$03$i = 0, $$06 = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $37 = 0, $39 = 0, $44 = 0, $46 = 0, $48 = 0, $53 = 0, $55 = 0, $57 = 0, $62 = 0, $67 = 0, $68 = 0, $70 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 105
 STACKTOP = STACKTOP + 160 | 0; //@line 106
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 106
 $2 = sp + 136 | 0; //@line 107
 $3 = sp; //@line 108
 $9 = HEAP32[34640 + (HEAP32[(HEAP32[8660] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0; //@line 114
 $10 = $3 + 56 | 0; //@line 115
 $11 = $3 + 4 | 0; //@line 116
 HEAP32[$3 >> 2] = 796; //@line 117
 HEAP32[$10 >> 2] = 816; //@line 118
 __THREW__ = 0; //@line 120
 invoke_vii(110, $3 + 56 | 0, $11 | 0); //@line 121
 $13 = __THREW__; //@line 122
 __THREW__ = 0; //@line 122
 if ($13 & 1) {
  $37 = ___cxa_find_matching_catch_2() | 0; //@line 125
  $$0$i = tempRet0; //@line 127
  $$03$i = $37; //@line 127
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($10); //@line 128
  ___resumeException($$03$i | 0); //@line 129
 }
 HEAP32[$3 + 128 >> 2] = 0; //@line 133
 HEAP32[$3 + 132 >> 2] = -1; //@line 135
 HEAP32[$3 >> 2] = 2980; //@line 136
 HEAP32[$10 >> 2] = 3e3; //@line 137
 __THREW__ = 0; //@line 138
 invoke_vi(253, $11 | 0); //@line 139
 $17 = __THREW__; //@line 140
 __THREW__ = 0; //@line 140
 do {
  if ($17 & 1) {
   $39 = ___cxa_find_matching_catch_2() | 0; //@line 144
   $eh$lpad$body$i$index2Z2D = tempRet0; //@line 146
   $eh$lpad$body$i$indexZ2D = $39; //@line 146
  } else {
   HEAP32[$11 >> 2] = 3032; //@line 148
   $19 = $3 + 36 | 0; //@line 149
   $20 = $3 + 52 | 0; //@line 150
   HEAP32[$19 >> 2] = 0; //@line 151
   HEAP32[$19 + 4 >> 2] = 0; //@line 151
   HEAP32[$19 + 8 >> 2] = 0; //@line 151
   HEAP32[$19 + 12 >> 2] = 0; //@line 151
   HEAP32[$20 >> 2] = 16; //@line 152
   HEAP32[$2 >> 2] = 0; //@line 153
   HEAP32[$2 + 4 >> 2] = 0; //@line 153
   HEAP32[$2 + 8 >> 2] = 0; //@line 153
   __THREW__ = 0; //@line 154
   invoke_vii(111, $11 | 0, $2 | 0); //@line 155
   $21 = __THREW__; //@line 156
   __THREW__ = 0; //@line 156
   if ($21 & 1) {
    $27 = ___cxa_find_matching_catch_2() | 0; //@line 159
    $28 = tempRet0; //@line 160
    if ((HEAP8[$2 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 166
    }
    if ((HEAP8[$19 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 173
    }
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($11); //@line 175
    $eh$lpad$body$i$index2Z2D = $28; //@line 176
    $eh$lpad$body$i$indexZ2D = $27; //@line 176
    break;
   }
   if ((HEAP8[$2 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 184
   }
   $44 = 34640 + (HEAP32[(HEAP32[8660] | 0) + -12 >> 2] | 0) | 0; //@line 189
   HEAP32[$44 + 24 >> 2] = $11; //@line 191
   __THREW__ = 0; //@line 192
   invoke_vii(112, $44 | 0, 0); //@line 193
   $46 = __THREW__; //@line 194
   __THREW__ = 0; //@line 194
   do {
    if ($46 & 1) {
     label = 24; //@line 198
    } else {
     __THREW__ = 0; //@line 200
     invoke_vii(113, $0 | 0, $1 | 0); //@line 201
     $48 = __THREW__; //@line 202
     __THREW__ = 0; //@line 202
     if ($48 & 1) {
      label = 24; //@line 205
     } else {
      $53 = 34640 + (HEAP32[(HEAP32[8660] | 0) + -12 >> 2] | 0) | 0; //@line 210
      HEAP32[$53 + 24 >> 2] = $9; //@line 212
      __THREW__ = 0; //@line 213
      invoke_vii(112, $53 | 0, 0); //@line 214
      $55 = __THREW__; //@line 215
      __THREW__ = 0; //@line 215
      if ($55 & 1) {
       label = 24; //@line 218
      } else {
       __THREW__ = 0; //@line 220
       invoke_vii(114, $2 | 0, $11 | 0); //@line 221
       $57 = __THREW__; //@line 222
       __THREW__ = 0; //@line 222
       if ($57 & 1) {
        $70 = ___cxa_find_matching_catch_2() | 0; //@line 225
        $$0 = tempRet0; //@line 227
        $$06 = $70; //@line 227
        break;
       }
       if ((HEAP8[$2 + 11 >> 0] | 0) < 0) {
        $62 = HEAP32[$2 >> 2] | 0; //@line 234
        __ZdlPv($62); //@line 235
        $67 = $62; //@line 236
       } else {
        $67 = $2; //@line 238
       }
       HEAP32[$3 >> 2] = 2980; //@line 240
       HEAP32[$10 >> 2] = 3e3; //@line 241
       HEAP32[$11 >> 2] = 3032; //@line 242
       if ((HEAP8[$19 + 11 >> 0] | 0) >= 0) {
        __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($11); //@line 247
        __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($3, 3012); //@line 248
        __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($10); //@line 249
        STACKTOP = sp; //@line 250
        return $67 | 0; //@line 250
       }
       __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 253
       __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($11); //@line 254
       __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($3, 3012); //@line 255
       __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($10); //@line 256
       STACKTOP = sp; //@line 257
       return $67 | 0; //@line 257
      }
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    $68 = ___cxa_find_matching_catch_2() | 0; //@line 263
    $$0 = tempRet0; //@line 265
    $$06 = $68; //@line 265
   }
   HEAP32[$3 >> 2] = 2980; //@line 267
   HEAP32[$10 >> 2] = 3e3; //@line 268
   HEAP32[$11 >> 2] = 3032; //@line 269
   if ((HEAP8[$19 + 11 >> 0] | 0) >= 0) {
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($11); //@line 274
    __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($3, 3012); //@line 275
    __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($10); //@line 276
    ___resumeException($$06 | 0); //@line 277
   }
   __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 281
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($11); //@line 282
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($3, 3012); //@line 283
   __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($10); //@line 284
   ___resumeException($$06 | 0); //@line 285
  }
 } while (0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($3, 3012); //@line 289
 $$0$i = $eh$lpad$body$i$index2Z2D; //@line 290
 $$03$i = $eh$lpad$body$i$indexZ2D; //@line 290
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($10); //@line 291
 ___resumeException($$03$i | 0); //@line 292
 return 0; //@line 294
}
function __ZN6Runner18switchCurrentStackE13CharmFunction($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02 = 0, $$byval_copy1 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6751
 STACKTOP = STACKTOP + 80 | 0; //@line 6752
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6752
 $$byval_copy1 = sp + 73 | 0; //@line 6753
 $2 = sp + 72 | 0; //@line 6754
 $3 = sp; //@line 6755
 __ZN13CharmFunctionC2ERKS_($3, $1); //@line 6756
 __THREW__ = 0; //@line 6757
 $4 = invoke_iii(57, $0 | 0, $3 | 0) | 0; //@line 6758
 $5 = __THREW__; //@line 6759
 __THREW__ = 0; //@line 6759
 if ($5 & 1) {
  $49 = ___cxa_find_matching_catch_2() | 0; //@line 6762
  $50 = tempRet0; //@line 6763
  $51 = $3 + 52 | 0; //@line 6764
  if ((HEAP8[$51 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$51 >> 2] | 0); //@line 6770
  }
  $56 = $3 + 40 | 0; //@line 6772
  $57 = HEAP32[$56 >> 2] | 0; //@line 6773
  if ($57 | 0) {
   $59 = $3 + 44 | 0; //@line 6776
   $60 = HEAP32[$59 >> 2] | 0; //@line 6777
   do {
    if (($60 | 0) == ($57 | 0)) {
     $71 = $57; //@line 6781
    } else {
     $62 = $3 + 48 | 0; //@line 6783
     $64 = $60; //@line 6784
     while (1) {
      $63 = $64 + -72 | 0; //@line 6786
      HEAP32[$59 >> 2] = $63; //@line 6787
      __THREW__ = 0; //@line 6788
      HEAP8[$$byval_copy1 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6789
      invoke_viii(13, $$byval_copy1 | 0, $62 | 0, $63 | 0); //@line 6790
      $65 = __THREW__; //@line 6791
      __THREW__ = 0; //@line 6791
      if ($65 & 1) {
       label = 25; //@line 6794
       break;
      }
      $64 = HEAP32[$59 >> 2] | 0; //@line 6797
      if (($64 | 0) == ($57 | 0)) {
       label = 26; //@line 6800
       break;
      }
     }
     if ((label | 0) == 25) {
      $69 = ___cxa_find_matching_catch_3(0) | 0; //@line 6807
      ___clang_call_terminate($69); //@line 6809
     } else if ((label | 0) == 26) {
      $71 = HEAP32[$56 >> 2] | 0; //@line 6814
      break;
     }
    }
   } while (0);
   __ZdlPv($71); //@line 6819
  }
  $72 = $3 + 4 | 0; //@line 6821
  if ((HEAP8[$72 + 11 >> 0] | 0) >= 0) {
   $$0 = $50; //@line 6826
   $$02 = $49; //@line 6826
   ___resumeException($$02 | 0); //@line 6827
  }
  __ZdlPv(HEAP32[$72 >> 2] | 0); //@line 6831
  $$0 = $50; //@line 6832
  $$02 = $49; //@line 6832
  ___resumeException($$02 | 0); //@line 6833
 }
 $7 = $3 + 52 | 0; //@line 6836
 if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 6842
 }
 $12 = $3 + 40 | 0; //@line 6844
 $13 = HEAP32[$12 >> 2] | 0; //@line 6845
 if ($13 | 0) {
  $15 = $3 + 44 | 0; //@line 6848
  $16 = HEAP32[$15 >> 2] | 0; //@line 6849
  do {
   if (($16 | 0) == ($13 | 0)) {
    $27 = $13; //@line 6853
   } else {
    $18 = $3 + 48 | 0; //@line 6855
    $20 = $16; //@line 6856
    while (1) {
     $19 = $20 + -72 | 0; //@line 6858
     HEAP32[$15 >> 2] = $19; //@line 6859
     __THREW__ = 0; //@line 6860
     HEAP8[$$byval_copy1 >> 0] = HEAP8[$2 >> 0] | 0; //@line 6861
     invoke_viii(13, $$byval_copy1 | 0, $18 | 0, $19 | 0); //@line 6862
     $21 = __THREW__; //@line 6863
     __THREW__ = 0; //@line 6863
     if ($21 & 1) {
      label = 9; //@line 6866
      break;
     }
     $20 = HEAP32[$15 >> 2] | 0; //@line 6869
     if (($20 | 0) == ($13 | 0)) {
      label = 10; //@line 6872
      break;
     }
    }
    if ((label | 0) == 9) {
     $25 = ___cxa_find_matching_catch_3(0) | 0; //@line 6879
     ___clang_call_terminate($25); //@line 6881
    } else if ((label | 0) == 10) {
     $27 = HEAP32[$12 >> 2] | 0; //@line 6886
     break;
    }
   }
  } while (0);
  __ZdlPv($27); //@line 6891
 }
 $28 = $3 + 4 | 0; //@line 6893
 if ((HEAP8[$28 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 6899
 }
 if ($4) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6903
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0 + 4 | 0, $1 + 4 | 0) | 0; //@line 6906
  $36 = $0 + 16 | 0; //@line 6907
  $37 = $1 + 16 | 0; //@line 6908
  HEAP32[$36 >> 2] = HEAP32[$37 >> 2]; //@line 6909
  HEAP32[$36 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 6909
  HEAP32[$36 + 8 >> 2] = HEAP32[$37 + 8 >> 2]; //@line 6909
  HEAP32[$36 + 12 >> 2] = HEAP32[$37 + 12 >> 2]; //@line 6909
  HEAP32[$36 + 16 >> 2] = HEAP32[$37 + 16 >> 2]; //@line 6909
  HEAP32[$36 + 20 >> 2] = HEAP32[$37 + 20 >> 2]; //@line 6909
  if (($0 | 0) == ($1 | 0)) {
   $44 = $0 + 52 | 0; //@line 6912
   $45 = $1 + 52 | 0; //@line 6913
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($44, $45) | 0; //@line 6914
   $46 = $0 + 64 | 0; //@line 6915
   $47 = $1 + 64 | 0; //@line 6916
   $48 = HEAP16[$47 >> 1] | 0; //@line 6917
   HEAP16[$46 >> 1] = $48; //@line 6918
   STACKTOP = sp; //@line 6919
   return;
  }
  __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($0 + 40 | 0, HEAP32[$1 + 40 >> 2] | 0, HEAP32[$1 + 44 >> 2] | 0); //@line 6926
  $44 = $0 + 52 | 0; //@line 6927
  $45 = $1 + 52 | 0; //@line 6928
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($44, $45) | 0; //@line 6929
  $46 = $0 + 64 | 0; //@line 6930
  $47 = $1 + 64 | 0; //@line 6931
  $48 = HEAP16[$47 >> 1] | 0; //@line 6932
  HEAP16[$46 >> 1] = $48; //@line 6933
  STACKTOP = sp; //@line 6934
  return;
 } else {
  $77 = ___cxa_allocate_exception(8) | 0; //@line 6936
  __THREW__ = 0; //@line 6937
  invoke_vii(125, $77 | 0, 14240); //@line 6938
  $78 = __THREW__; //@line 6939
  __THREW__ = 0; //@line 6939
  if (!($78 & 1)) {
   ___cxa_throw($77 | 0, 2824, 242); //@line 6942
  }
  $80 = ___cxa_find_matching_catch_2() | 0; //@line 6945
  $81 = tempRet0; //@line 6946
  ___cxa_free_exception($77 | 0); //@line 6947
  $$0 = $81; //@line 6948
  $$02 = $80; //@line 6948
  ___resumeException($$02 | 0); //@line 6949
 }
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$03$i$i$i = 0, $$byval_copy1 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $57 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20822
 STACKTOP = STACKTOP + 96 | 0; //@line 20823
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 20823
 $$byval_copy1 = sp + 85 | 0; //@line 20824
 $2 = sp + 84 | 0; //@line 20825
 $3 = sp; //@line 20826
 $4 = sp + 72 | 0; //@line 20827
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv(HEAP32[$1 >> 2] | 0) | 0); //@line 20830
 do {
  if ((HEAP32[$3 >> 2] | 0) == 3) {
   $8 = $3 + 4 | 0; //@line 20835
   __THREW__ = 0; //@line 20836
   invoke_vii(115, $4 | 0, $8 | 0); //@line 20837
   $9 = __THREW__; //@line 20838
   __THREW__ = 0; //@line 20838
   if ($9 & 1) {
    label = 18; //@line 20841
   } else {
    $11 = $4 + 11 | 0; //@line 20843
    $12 = HEAP8[$11 >> 0] | 0; //@line 20844
    $13 = $12 << 24 >> 24 < 0; //@line 20845
    __THREW__ = 0; //@line 20852
    invoke_iiii(32, 34640, ($13 ? HEAP32[$4 >> 2] | 0 : $4) | 0, ($13 ? HEAP32[$4 + 4 >> 2] | 0 : $12 & 255) | 0) | 0; //@line 20853
    $20 = __THREW__; //@line 20854
    __THREW__ = 0; //@line 20854
    if ($20 & 1) {
     $52 = ___cxa_find_matching_catch_2() | 0; //@line 20857
     $53 = tempRet0; //@line 20858
     if ((HEAP8[$11 >> 0] | 0) >= 0) {
      $$0$i$i$i = $53; //@line 20862
      $$03$i$i$i = $52; //@line 20862
      break;
     }
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 20866
     $$0$i$i$i = $53; //@line 20867
     $$03$i$i$i = $52; //@line 20867
     break;
    }
    if ((HEAP8[$11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 20874
    }
    $25 = $3 + 52 | 0; //@line 20876
    if ((HEAP8[$25 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$25 >> 2] | 0); //@line 20882
    }
    $30 = $3 + 40 | 0; //@line 20884
    $31 = HEAP32[$30 >> 2] | 0; //@line 20885
    if ($31 | 0) {
     $33 = $3 + 44 | 0; //@line 20888
     $34 = HEAP32[$33 >> 2] | 0; //@line 20889
     do {
      if (($34 | 0) == ($31 | 0)) {
       $45 = $31; //@line 20893
      } else {
       $36 = $3 + 48 | 0; //@line 20895
       $38 = $34; //@line 20896
       while (1) {
        $37 = $38 + -72 | 0; //@line 20898
        HEAP32[$33 >> 2] = $37; //@line 20899
        __THREW__ = 0; //@line 20900
        HEAP8[$$byval_copy1 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20901
        invoke_viii(13, $$byval_copy1 | 0, $36 | 0, $37 | 0); //@line 20902
        $39 = __THREW__; //@line 20903
        __THREW__ = 0; //@line 20903
        if ($39 & 1) {
         label = 13; //@line 20906
         break;
        }
        $38 = HEAP32[$33 >> 2] | 0; //@line 20909
        if (($38 | 0) == ($31 | 0)) {
         label = 14; //@line 20912
         break;
        }
       }
       if ((label | 0) == 13) {
        $43 = ___cxa_find_matching_catch_3(0) | 0; //@line 20919
        ___clang_call_terminate($43); //@line 20921
       } else if ((label | 0) == 14) {
        $45 = HEAP32[$30 >> 2] | 0; //@line 20926
        break;
       }
      }
     } while (0);
     __ZdlPv($45); //@line 20931
    }
    if ((HEAP8[$8 + 11 >> 0] | 0) >= 0) {
     STACKTOP = sp; //@line 20937
     return;
    }
    __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 20940
    STACKTOP = sp; //@line 20941
    return;
   }
  } else {
   $57 = ___cxa_allocate_exception(8) | 0; //@line 20944
   __THREW__ = 0; //@line 20945
   invoke_vii(125, $57 | 0, 20495); //@line 20946
   $58 = __THREW__; //@line 20947
   __THREW__ = 0; //@line 20947
   if ($58 & 1) {
    $61 = ___cxa_find_matching_catch_2() | 0; //@line 20950
    $62 = tempRet0; //@line 20951
    ___cxa_free_exception($57 | 0); //@line 20952
    $$0$i$i$i = $62; //@line 20953
    $$03$i$i$i = $61; //@line 20953
    break;
   } else {
    __THREW__ = 0; //@line 20956
    invoke_viii(16, $57 | 0, 2824, 242); //@line 20957
    __THREW__ = 0; //@line 20958
    label = 18; //@line 20959
    break;
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $50 = ___cxa_find_matching_catch_2() | 0; //@line 20965
  $$0$i$i$i = tempRet0; //@line 20967
  $$03$i$i$i = $50; //@line 20967
 }
 $63 = $3 + 52 | 0; //@line 20969
 if ((HEAP8[$63 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$63 >> 2] | 0); //@line 20975
 }
 $68 = $3 + 40 | 0; //@line 20977
 $69 = HEAP32[$68 >> 2] | 0; //@line 20978
 if ($69 | 0) {
  $71 = $3 + 44 | 0; //@line 20981
  $72 = HEAP32[$71 >> 2] | 0; //@line 20982
  do {
   if (($72 | 0) == ($69 | 0)) {
    $83 = $69; //@line 20986
   } else {
    $74 = $3 + 48 | 0; //@line 20988
    $76 = $72; //@line 20989
    while (1) {
     $75 = $76 + -72 | 0; //@line 20991
     HEAP32[$71 >> 2] = $75; //@line 20992
     __THREW__ = 0; //@line 20993
     HEAP8[$$byval_copy1 >> 0] = HEAP8[$2 >> 0] | 0; //@line 20994
     invoke_viii(13, $$byval_copy1 | 0, $74 | 0, $75 | 0); //@line 20995
     $77 = __THREW__; //@line 20996
     __THREW__ = 0; //@line 20996
     if ($77 & 1) {
      label = 31; //@line 20999
      break;
     }
     $76 = HEAP32[$71 >> 2] | 0; //@line 21002
     if (($76 | 0) == ($69 | 0)) {
      label = 32; //@line 21005
      break;
     }
    }
    if ((label | 0) == 31) {
     $81 = ___cxa_find_matching_catch_3(0) | 0; //@line 21012
     ___clang_call_terminate($81); //@line 21014
    } else if ((label | 0) == 32) {
     $83 = HEAP32[$68 >> 2] | 0; //@line 21019
     break;
    }
   }
  } while (0);
  __ZdlPv($83); //@line 21024
 }
 $84 = $3 + 4 | 0; //@line 21026
 if ((HEAP8[$84 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$03$i$i$i | 0); //@line 21031
 }
 __ZdlPv(HEAP32[$84 >> 2] | 0); //@line 21035
 ___resumeException($$03$i$i$i | 0); //@line 21036
}
function __ZNSt3__28ios_base4InitC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $42 = 0, $50 = 0, $51 = 0, $53 = 0, $7 = 0, $70 = 0, $77 = 0, $9 = 0;
 $1 = HEAP32[1234] | 0; //@line 20628
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(35144, $1, 35200); //@line 20629
 HEAP32[8616] = 9632; //@line 20630
 HEAP32[8618] = 9652; //@line 20631
 HEAP32[8617] = 0; //@line 20632
 __THREW__ = 0; //@line 20633
 invoke_vii(110, 34472, 35144); //@line 20634
 $2 = __THREW__; //@line 20635
 __THREW__ = 0; //@line 20635
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 20638
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(34472); //@line 20640
  ___resumeException($4 | 0); //@line 20641
 }
 HEAP32[8636] = 0; //@line 20644
 HEAP32[8637] = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 20646
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(35208, $1, 35264); //@line 20647
 HEAP32[8638] = 9680; //@line 20648
 HEAP32[8640] = 9700; //@line 20649
 HEAP32[8639] = 0; //@line 20650
 __THREW__ = 0; //@line 20651
 invoke_vii(110, 34560, 35208); //@line 20652
 $7 = __THREW__; //@line 20653
 __THREW__ = 0; //@line 20653
 if ($7 & 1) {
  $9 = ___cxa_find_matching_catch_2() | 0; //@line 20656
  __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(34560); //@line 20658
  ___resumeException($9 | 0); //@line 20659
 }
 HEAP32[8658] = 0; //@line 20662
 HEAP32[8659] = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 20664
 $12 = HEAP32[1266] | 0; //@line 20665
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(35272, $12, 35320); //@line 20666
 HEAP32[8660] = 28; //@line 20667
 HEAP32[8661] = 48; //@line 20668
 __THREW__ = 0; //@line 20669
 invoke_vii(110, 34644, 35272); //@line 20670
 $13 = __THREW__; //@line 20671
 __THREW__ = 0; //@line 20671
 if ($13 & 1) {
  $15 = ___cxa_find_matching_catch_2() | 0; //@line 20674
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(34644); //@line 20676
  ___resumeException($15 | 0); //@line 20677
 }
 HEAP32[8679] = 0; //@line 20680
 HEAP32[8680] = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 20682
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(35328, $12, 35376); //@line 20683
 HEAP32[8681] = 9736; //@line 20684
 HEAP32[8682] = 9756; //@line 20685
 __THREW__ = 0; //@line 20686
 invoke_vii(110, 34728, 35328); //@line 20687
 $18 = __THREW__; //@line 20688
 __THREW__ = 0; //@line 20688
 if ($18 & 1) {
  $20 = ___cxa_find_matching_catch_2() | 0; //@line 20691
  __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(34728); //@line 20693
  ___resumeException($20 | 0); //@line 20694
 }
 HEAP32[8700] = 0; //@line 20697
 HEAP32[8701] = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 20699
 $23 = HEAP32[1299] | 0; //@line 20700
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(35384, $23, 35432); //@line 20701
 HEAP32[8702] = 28; //@line 20702
 HEAP32[8703] = 48; //@line 20703
 __THREW__ = 0; //@line 20704
 invoke_vii(110, 34812, 35384); //@line 20705
 $24 = __THREW__; //@line 20706
 __THREW__ = 0; //@line 20706
 if ($24 & 1) {
  $26 = ___cxa_find_matching_catch_2() | 0; //@line 20709
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(34812); //@line 20711
  ___resumeException($26 | 0); //@line 20712
 }
 HEAP32[8721] = 0; //@line 20715
 HEAP32[8722] = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 20717
 $34 = HEAP32[34808 + (HEAP32[(HEAP32[8702] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0; //@line 20723
 HEAP32[8744] = 28; //@line 20724
 HEAP32[8745] = 48; //@line 20725
 __THREW__ = 0; //@line 20726
 invoke_vii(110, 34980, $34 | 0); //@line 20727
 $35 = __THREW__; //@line 20728
 __THREW__ = 0; //@line 20728
 if ($35 & 1) {
  $37 = ___cxa_find_matching_catch_2() | 0; //@line 20731
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(34980); //@line 20733
  ___resumeException($37 | 0); //@line 20734
 }
 HEAP32[8763] = 0; //@line 20737
 HEAP32[8764] = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 20739
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(35440, $23, 35488); //@line 20740
 HEAP32[8723] = 9736; //@line 20741
 HEAP32[8724] = 9756; //@line 20742
 __THREW__ = 0; //@line 20743
 invoke_vii(110, 34896, 35440); //@line 20744
 $40 = __THREW__; //@line 20745
 __THREW__ = 0; //@line 20745
 if ($40 & 1) {
  $42 = ___cxa_find_matching_catch_2() | 0; //@line 20748
  __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(34896); //@line 20750
  ___resumeException($42 | 0); //@line 20751
 }
 HEAP32[8742] = 0; //@line 20754
 HEAP32[8743] = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 20756
 $50 = HEAP32[34892 + (HEAP32[(HEAP32[8723] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0; //@line 20762
 HEAP32[8765] = 9736; //@line 20763
 HEAP32[8766] = 9756; //@line 20764
 __THREW__ = 0; //@line 20765
 invoke_vii(110, 35064, $50 | 0); //@line 20766
 $51 = __THREW__; //@line 20767
 __THREW__ = 0; //@line 20767
 if ($51 & 1) {
  $53 = ___cxa_find_matching_catch_2() | 0; //@line 20770
  __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(35064); //@line 20772
  ___resumeException($53 | 0); //@line 20773
 } else {
  HEAP32[8784] = 0; //@line 20776
  HEAP32[8785] = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 20778
  HEAP32[34464 + (HEAP32[(HEAP32[8616] | 0) + -12 >> 2] | 0) + 72 >> 2] = 34640; //@line 20784
  HEAP32[34552 + (HEAP32[(HEAP32[8638] | 0) + -12 >> 2] | 0) + 72 >> 2] = 34724; //@line 20790
  $70 = 34808 + (HEAP32[(HEAP32[8702] | 0) + -12 >> 2] | 0) + 4 | 0; //@line 20795
  HEAP32[$70 >> 2] = HEAP32[$70 >> 2] | 8192; //@line 20798
  $77 = 34892 + (HEAP32[(HEAP32[8723] | 0) + -12 >> 2] | 0) + 4 | 0; //@line 20803
  HEAP32[$77 >> 2] = HEAP32[$77 >> 2] | 8192; //@line 20806
  HEAP32[34808 + (HEAP32[(HEAP32[8702] | 0) + -12 >> 2] | 0) + 72 >> 2] = 34640; //@line 20812
  HEAP32[34892 + (HEAP32[(HEAP32[8723] | 0) + -12 >> 2] | 0) + 72 >> 2] = 34724; //@line 20818
  return;
 }
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $13 = 0, $14 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $50 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20123
 STACKTOP = STACKTOP + 16 | 0; //@line 20124
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20124
 $$byval_copy = sp + 12 | 0; //@line 20125
 $3 = sp + 8 | 0; //@line 20126
 $4 = sp; //@line 20127
 __THREW__ = 0; //@line 20128
 invoke_vii(136, $4 | 0, $0 | 0); //@line 20129
 $5 = __THREW__; //@line 20130
 __THREW__ = 0; //@line 20130
 L1 : do {
  if ($5 & 1) {
   $56 = ___cxa_find_matching_catch_3(0) | 0; //@line 20134
   $$1 = $56; //@line 20136
   $$pre$phi13Z2D = $0; //@line 20136
   $$pre$phi15Z2D = $0; //@line 20136
   label = 20; //@line 20137
  } else {
   L4 : do {
    if (HEAP8[$4 >> 0] | 0) {
     __ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 20147
     __THREW__ = 0; //@line 20148
     $13 = invoke_iii(63, $$byval_copy | 0, 35568) | 0; //@line 20149
     $14 = __THREW__; //@line 20150
     __THREW__ = 0; //@line 20150
     L6 : do {
      if ($14 & 1) {
       $58 = ___cxa_find_matching_catch_3(0) | 0; //@line 20154
       __ZNSt3__26localeD2Ev($$byval_copy); //@line 20156
       $$0 = $58; //@line 20157
      } else {
       __ZNSt3__26localeD2Ev($$byval_copy); //@line 20159
       $19 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20163
       $21 = HEAP32[$19 + 24 >> 2] | 0; //@line 20165
       $22 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 20166
       $23 = $19 + 76 | 0; //@line 20167
       do {
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($22, HEAP32[$23 >> 2] | 0) | 0) {
         __ZNKSt3__28ios_base6getlocEv($$byval_copy, $19); //@line 20172
         __THREW__ = 0; //@line 20173
         $26 = invoke_iii(63, $$byval_copy | 0, 35512) | 0; //@line 20174
         $27 = __THREW__; //@line 20175
         __THREW__ = 0; //@line 20175
         if (!($27 & 1)) {
          __THREW__ = 0; //@line 20181
          $32 = invoke_iii(HEAP32[(HEAP32[$26 >> 2] | 0) + 28 >> 2] | 0, $26 | 0, 32) | 0; //@line 20182
          $33 = __THREW__; //@line 20183
          __THREW__ = 0; //@line 20183
          if (!($33 & 1)) {
           __ZNSt3__26localeD2Ev($$byval_copy); //@line 20186
           $37 = $32 << 24 >> 24; //@line 20187
           HEAP32[$23 >> 2] = $37; //@line 20188
           $$pre$phiZ2D = $19; //@line 20189
           $39 = $37; //@line 20189
           label = 10; //@line 20190
           break;
          }
         }
         $35 = ___cxa_find_matching_catch_3(0) | 0; //@line 20194
         __ZNSt3__26localeD2Ev($$byval_copy); //@line 20196
         $eh$lpad$body$indexZ2D = $35; //@line 20197
        } else {
         $$pre$phiZ2D = $19; //@line 20200
         $39 = HEAP32[$23 >> 2] | 0; //@line 20200
         label = 10; //@line 20201
        }
       } while (0);
       do {
        if ((label | 0) == 10) {
         $38 = $39 & 255; //@line 20206
         $42 = HEAP32[(HEAP32[$13 >> 2] | 0) + 20 >> 2] | 0; //@line 20209
         HEAP32[$3 >> 2] = $21; //@line 20210
         __THREW__ = 0; //@line 20211
         HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 20212
         $43 = invoke_iiiiiii($42 | 0, $13 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $38 | 0, $1 | 0, $2 | 0) | 0; //@line 20213
         $44 = __THREW__; //@line 20214
         __THREW__ = 0; //@line 20214
         if ($44 & 1) {
          $60 = ___cxa_find_matching_catch_3(0) | 0; //@line 20217
          $eh$lpad$body$indexZ2D = $60; //@line 20219
          break;
         }
         if ($43 | 0) {
          break L4;
         }
         $50 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20229
         __THREW__ = 0; //@line 20233
         invoke_vii(112, $50 | 0, HEAP32[$50 + 16 >> 2] | 5 | 0); //@line 20234
         $54 = __THREW__; //@line 20235
         __THREW__ = 0; //@line 20235
         if (!($54 & 1)) {
          break L4;
         }
         $62 = ___cxa_find_matching_catch_3(0) | 0; //@line 20240
         $$0 = $62; //@line 20242
         break L6;
        }
       } while (0);
       $$0 = $eh$lpad$body$indexZ2D; //@line 20246
      }
     } while (0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4); //@line 20249
     $$1 = $$0; //@line 20250
     $$pre$phi13Z2D = $0; //@line 20250
     $$pre$phi15Z2D = $0; //@line 20250
     label = 20; //@line 20251
     break L1;
    }
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4); //@line 20255
  }
 } while (0);
 do {
  if ((label | 0) == 20) {
   ___cxa_begin_catch($$1 | 0) | 0; //@line 20260
   __THREW__ = 0; //@line 20265
   invoke_vi(262, $$pre$phi15Z2D + (HEAP32[(HEAP32[$$pre$phi13Z2D >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 20266
   $68 = __THREW__; //@line 20267
   __THREW__ = 0; //@line 20267
   if (!($68 & 1)) {
    ___cxa_end_catch(); //@line 20270
    break;
   }
   $70 = ___cxa_find_matching_catch_2() | 0; //@line 20273
   __THREW__ = 0; //@line 20275
   invoke_v(3); //@line 20276
   $72 = __THREW__; //@line 20277
   __THREW__ = 0; //@line 20277
   if ($72 & 1) {
    $74 = ___cxa_find_matching_catch_3(0) | 0; //@line 20280
    ___clang_call_terminate($74); //@line 20282
   } else {
    ___resumeException($70 | 0); //@line 20285
   }
  }
 } while (0);
 STACKTOP = sp; //@line 20290
 return $0 | 0; //@line 20290
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0$i$lcssa = 0, $$0$i23 = 0, $$07$i22 = 0, $$byval_copy = 0, $$sroa$speculated$$i = 0, $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $25 = 0, $26 = 0, $3 = 0, $39 = 0, $46 = 0, $49 = 0, $50 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $82 = 0, $84 = 0, $88 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2336
 STACKTOP = STACKTOP + 16 | 0; //@line 2337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2337
 $$byval_copy = sp + 1 | 0; //@line 2338
 $3 = sp; //@line 2339
 $7 = ($2 - $1 | 0) / 72 | 0; //@line 2343
 $8 = $0 + 8 | 0; //@line 2344
 $10 = HEAP32[$0 >> 2] | 0; //@line 2346
 $14 = $10; //@line 2350
 if ($7 >>> 0 > (((HEAP32[$8 >> 2] | 0) - $10 | 0) / 72 | 0) >>> 0) {
  __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($0); //@line 2352
  if ($7 >>> 0 > 59652323) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 2355
  }
  $82 = ((HEAP32[$8 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 72 | 0; //@line 2361
  $84 = $82 << 1; //@line 2363
  $$sroa$speculated$$i = $82 >>> 0 < 29826161 ? $84 >>> 0 < $7 >>> 0 ? $7 : $84 : 59652323; //@line 2366
  if ($$sroa$speculated$$i >>> 0 > 59652323) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 2369
  }
  $88 = __Znwj($$sroa$speculated$$i * 72 | 0) | 0; //@line 2373
  HEAP32[$0 + 4 >> 2] = $88; //@line 2375
  HEAP32[$0 >> 2] = $88; //@line 2376
  HEAP32[$8 >> 2] = $88 + ($$sroa$speculated$$i * 72 | 0); //@line 2378
  __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0, $1, $2, $7); //@line 2379
  STACKTOP = sp; //@line 2380
  return;
 }
 $15 = $0 + 4 | 0; //@line 2382
 $18 = ((HEAP32[$15 >> 2] | 0) - $10 | 0) / 72 | 0; //@line 2385
 $19 = $7 >>> 0 > $18 >>> 0; //@line 2386
 $$ = $19 ? $1 + ($18 * 72 | 0) | 0 : $2; //@line 2388
 if (($$ | 0) == ($1 | 0)) {
  $$0$i$lcssa = $14; //@line 2391
 } else {
  $$0$i23 = $14; //@line 2393
  $$07$i22 = $1; //@line 2393
  while (1) {
   HEAP32[$$0$i23 >> 2] = HEAP32[$$07$i22 >> 2]; //@line 2396
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($$0$i23 + 4 | 0, $$07$i22 + 4 | 0) | 0; //@line 2399
   $25 = $$0$i23 + 16 | 0; //@line 2400
   $26 = $$07$i22 + 16 | 0; //@line 2401
   HEAP32[$25 >> 2] = HEAP32[$26 >> 2]; //@line 2402
   HEAP32[$25 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 2402
   HEAP32[$25 + 8 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 2402
   HEAP32[$25 + 12 >> 2] = HEAP32[$26 + 12 >> 2]; //@line 2402
   HEAP32[$25 + 16 >> 2] = HEAP32[$26 + 16 >> 2]; //@line 2402
   HEAP32[$25 + 20 >> 2] = HEAP32[$26 + 20 >> 2]; //@line 2402
   if (($$0$i23 | 0) != ($$07$i22 | 0)) {
    __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($$0$i23 + 40 | 0, HEAP32[$$07$i22 + 40 >> 2] | 0, HEAP32[$$07$i22 + 44 >> 2] | 0); //@line 2410
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($$0$i23 + 52 | 0, $$07$i22 + 52 | 0) | 0; //@line 2414
   HEAP16[$$0$i23 + 64 >> 1] = HEAP16[$$07$i22 + 64 >> 1] | 0; //@line 2418
   $$07$i22 = $$07$i22 + 72 | 0; //@line 2419
   $39 = $$0$i23 + 72 | 0; //@line 2420
   if (($$07$i22 | 0) == ($$ | 0)) {
    $$0$i$lcssa = $39; //@line 2423
    break;
   } else {
    $$0$i23 = $39; //@line 2426
   }
  }
 }
 if ($19) {
  __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0, $$, $2, $7 - (((HEAP32[$15 >> 2] | 0) - (HEAP32[$0 >> 2] | 0) | 0) / 72 | 0) | 0); //@line 2436
  STACKTOP = sp; //@line 2437
  return;
 }
 $46 = HEAP32[$15 >> 2] | 0; //@line 2439
 if (($46 | 0) == ($$0$i$lcssa | 0)) {
  STACKTOP = sp; //@line 2442
  return;
 }
 $49 = $46; //@line 2444
 L25 : while (1) {
  HEAP32[$15 >> 2] = $49 + -72; //@line 2447
  $50 = $49 + -20 | 0; //@line 2448
  if ((HEAP8[$50 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$50 >> 2] | 0); //@line 2454
  }
  $55 = $49 + -32 | 0; //@line 2456
  $56 = HEAP32[$55 >> 2] | 0; //@line 2457
  if ($56 | 0) {
   $58 = $49 + -28 | 0; //@line 2460
   $59 = HEAP32[$58 >> 2] | 0; //@line 2461
   if (($59 | 0) == ($56 | 0)) {
    $70 = $56; //@line 2464
   } else {
    $61 = $49 + -24 | 0; //@line 2466
    $63 = $59; //@line 2467
    do {
     $62 = $63 + -72 | 0; //@line 2469
     HEAP32[$58 >> 2] = $62; //@line 2470
     __THREW__ = 0; //@line 2471
     HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 2472
     invoke_viii(13, $$byval_copy | 0, $61 | 0, $62 | 0); //@line 2473
     $64 = __THREW__; //@line 2474
     __THREW__ = 0; //@line 2474
     if ($64 & 1) {
      label = 17; //@line 2477
      break L25;
     }
     $63 = HEAP32[$58 >> 2] | 0; //@line 2480
    } while (($63 | 0) != ($56 | 0));
    $70 = HEAP32[$55 >> 2] | 0; //@line 2489
   }
   __ZdlPv($70); //@line 2491
  }
  $71 = $49 + -68 | 0; //@line 2493
  if ((HEAP8[$71 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$71 >> 2] | 0); //@line 2499
  }
  $49 = HEAP32[$15 >> 2] | 0; //@line 2501
  if (($49 | 0) == ($$0$i$lcssa | 0)) {
   label = 28; //@line 2504
   break;
  }
 }
 if ((label | 0) == 17) {
  $68 = ___cxa_find_matching_catch_3(0) | 0; //@line 2511
  ___clang_call_terminate($68); //@line 2513
 } else if ((label | 0) == 28) {
  STACKTOP = sp; //@line 2517
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $13 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $47 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $77 = 0, $78 = 0, label = 0;
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 64411
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $58 = HEAP32[$0 + 12 >> 2] | 0; //@line 64418
    $59 = $0 + 16 + ($58 << 3) | 0; //@line 64419
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 64420
    $60 = $0 + 24 | 0; //@line 64421
    if (($58 | 0) <= 1) {
     break;
    }
    $63 = HEAP32[$0 + 8 >> 2] | 0; //@line 64427
    if (!($63 & 2)) {
     $66 = $1 + 36 | 0; //@line 64431
     if ((HEAP32[$66 >> 2] | 0) != 1) {
      if (!($63 & 1)) {
       $78 = $1 + 54 | 0; //@line 64438
       $$2 = $60; //@line 64439
       while (1) {
        if (HEAP8[$78 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$66 >> 2] | 0) == 1) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 64451
        $$2 = $$2 + 8 | 0; //@line 64452
        if ($$2 >>> 0 >= $59 >>> 0) {
         break L1;
        }
       }
      }
      $76 = $1 + 24 | 0; //@line 64461
      $77 = $1 + 54 | 0; //@line 64462
      $$1 = $60; //@line 64463
      while (1) {
       if (HEAP8[$77 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$66 >> 2] | 0) == 1) {
        if ((HEAP32[$76 >> 2] | 0) == 1) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 64479
       $$1 = $$1 + 8 | 0; //@line 64480
       if ($$1 >>> 0 >= $59 >>> 0) {
        break L1;
       }
      }
     }
    }
    $69 = $1 + 54 | 0; //@line 64490
    $$0 = $60; //@line 64491
    while (1) {
     if (HEAP8[$69 >> 0] | 0) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 64498
     $$0 = $$0 + 8 | 0; //@line 64499
     if ($$0 >>> 0 >= $59 >>> 0) {
      break L1;
     }
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 64512
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 64517
     $19 = $1 + 44 | 0; //@line 64518
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 64527
     $26 = $1 + 52 | 0; //@line 64528
     $27 = $1 + 53 | 0; //@line 64529
     $28 = $1 + 54 | 0; //@line 64530
     $29 = $0 + 8 | 0; //@line 64531
     $30 = $1 + 24 | 0; //@line 64532
     $$081$off0 = 0; //@line 64533
     $$084 = $0 + 16 | 0; //@line 64533
     $$085$off0 = 0; //@line 64533
     L32 : while (1) {
      if ($$084 >>> 0 >= $25 >>> 0) {
       $$283$off0 = $$081$off0; //@line 64537
       label = 18; //@line 64538
       break;
      }
      HEAP8[$26 >> 0] = 0; //@line 64541
      HEAP8[$27 >> 0] = 0; //@line 64542
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 64543
      if (HEAP8[$28 >> 0] | 0) {
       $$283$off0 = $$081$off0; //@line 64547
       label = 18; //@line 64548
       break;
      }
      do {
       if (!(HEAP8[$27 >> 0] | 0)) {
        $$182$off0 = $$081$off0; //@line 64555
        $$186$off0 = $$085$off0; //@line 64555
       } else {
        if (!(HEAP8[$26 >> 0] | 0)) {
         if (!(HEAP32[$29 >> 2] & 1)) {
          $$283$off0 = 1; //@line 64564
          label = 18; //@line 64565
          break L32;
         } else {
          $$182$off0 = 1; //@line 64568
          $$186$off0 = $$085$off0; //@line 64568
          break;
         }
        }
        if ((HEAP32[$30 >> 2] | 0) == 1) {
         label = 23; //@line 64575
         break L32;
        }
        if (!(HEAP32[$29 >> 2] & 2)) {
         label = 23; //@line 64582
         break L32;
        } else {
         $$182$off0 = 1; //@line 64585
         $$186$off0 = 1; //@line 64585
        }
       }
      } while (0);
      $$081$off0 = $$182$off0; //@line 64590
      $$084 = $$084 + 8 | 0; //@line 64590
      $$085$off0 = $$186$off0; //@line 64590
     }
     do {
      if ((label | 0) == 18) {
       if (!$$085$off0) {
        HEAP32[$13 >> 2] = $2; //@line 64595
        $47 = $1 + 40 | 0; //@line 64596
        HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1; //@line 64599
        if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
         if ((HEAP32[$30 >> 2] | 0) == 2) {
          HEAP8[$28 >> 0] = 1; //@line 64607
          if ($$283$off0) {
           label = 23; //@line 64609
           break;
          } else {
           $55 = 4; //@line 64612
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23; //@line 64619
       } else {
        $55 = 4; //@line 64621
       }
      }
     } while (0);
     if ((label | 0) == 23) {
      $55 = 3; //@line 64626
     }
     HEAP32[$19 >> 2] = $55; //@line 64628
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 64635
   }
  }
 } while (0);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20300
 STACKTOP = STACKTOP + 16 | 0; //@line 20301
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20301
 $$byval_copy = sp + 12 | 0; //@line 20302
 $2 = sp + 8 | 0; //@line 20303
 $3 = sp; //@line 20304
 __THREW__ = 0; //@line 20305
 invoke_vii(136, $3 | 0, $0 | 0); //@line 20306
 $4 = __THREW__; //@line 20307
 __THREW__ = 0; //@line 20307
 L1 : do {
  if ($4 & 1) {
   $55 = ___cxa_find_matching_catch_3(0) | 0; //@line 20311
   $$1 = $55; //@line 20313
   $$pre$phi13Z2D = $0; //@line 20313
   $$pre$phi15Z2D = $0; //@line 20313
   label = 20; //@line 20314
  } else {
   L4 : do {
    if (HEAP8[$3 >> 0] | 0) {
     __ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 20324
     __THREW__ = 0; //@line 20325
     $12 = invoke_iii(63, $$byval_copy | 0, 35568) | 0; //@line 20326
     $13 = __THREW__; //@line 20327
     __THREW__ = 0; //@line 20327
     L6 : do {
      if ($13 & 1) {
       $57 = ___cxa_find_matching_catch_3(0) | 0; //@line 20331
       __ZNSt3__26localeD2Ev($$byval_copy); //@line 20333
       $$0 = $57; //@line 20334
      } else {
       __ZNSt3__26localeD2Ev($$byval_copy); //@line 20336
       $18 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20340
       $20 = HEAP32[$18 + 24 >> 2] | 0; //@line 20342
       $21 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 20343
       $22 = $18 + 76 | 0; //@line 20344
       do {
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($21, HEAP32[$22 >> 2] | 0) | 0) {
         __ZNKSt3__28ios_base6getlocEv($$byval_copy, $18); //@line 20349
         __THREW__ = 0; //@line 20350
         $25 = invoke_iii(63, $$byval_copy | 0, 35512) | 0; //@line 20351
         $26 = __THREW__; //@line 20352
         __THREW__ = 0; //@line 20352
         if (!($26 & 1)) {
          __THREW__ = 0; //@line 20358
          $31 = invoke_iii(HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] | 0, $25 | 0, 32) | 0; //@line 20359
          $32 = __THREW__; //@line 20360
          __THREW__ = 0; //@line 20360
          if (!($32 & 1)) {
           __ZNSt3__26localeD2Ev($$byval_copy); //@line 20363
           $36 = $31 << 24 >> 24; //@line 20364
           HEAP32[$22 >> 2] = $36; //@line 20365
           $$pre$phiZ2D = $18; //@line 20366
           $38 = $36; //@line 20366
           label = 10; //@line 20367
           break;
          }
         }
         $34 = ___cxa_find_matching_catch_3(0) | 0; //@line 20371
         __ZNSt3__26localeD2Ev($$byval_copy); //@line 20373
         $eh$lpad$body$indexZ2D = $34; //@line 20374
        } else {
         $$pre$phiZ2D = $18; //@line 20377
         $38 = HEAP32[$22 >> 2] | 0; //@line 20377
         label = 10; //@line 20378
        }
       } while (0);
       do {
        if ((label | 0) == 10) {
         $37 = $38 & 255; //@line 20383
         $41 = HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] | 0; //@line 20386
         HEAP32[$2 >> 2] = $20; //@line 20387
         __THREW__ = 0; //@line 20388
         HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 20389
         $42 = invoke_iiiiid($41 | 0, $12 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $37 | 0, +$1) | 0; //@line 20390
         $43 = __THREW__; //@line 20391
         __THREW__ = 0; //@line 20391
         if ($43 & 1) {
          $59 = ___cxa_find_matching_catch_3(0) | 0; //@line 20394
          $eh$lpad$body$indexZ2D = $59; //@line 20396
          break;
         }
         if ($42 | 0) {
          break L4;
         }
         $49 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20406
         __THREW__ = 0; //@line 20410
         invoke_vii(112, $49 | 0, HEAP32[$49 + 16 >> 2] | 5 | 0); //@line 20411
         $53 = __THREW__; //@line 20412
         __THREW__ = 0; //@line 20412
         if (!($53 & 1)) {
          break L4;
         }
         $61 = ___cxa_find_matching_catch_3(0) | 0; //@line 20417
         $$0 = $61; //@line 20419
         break L6;
        }
       } while (0);
       $$0 = $eh$lpad$body$indexZ2D; //@line 20423
      }
     } while (0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3); //@line 20426
     $$1 = $$0; //@line 20427
     $$pre$phi13Z2D = $0; //@line 20427
     $$pre$phi15Z2D = $0; //@line 20427
     label = 20; //@line 20428
     break L1;
    }
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3); //@line 20432
  }
 } while (0);
 do {
  if ((label | 0) == 20) {
   ___cxa_begin_catch($$1 | 0) | 0; //@line 20437
   __THREW__ = 0; //@line 20442
   invoke_vi(262, $$pre$phi15Z2D + (HEAP32[(HEAP32[$$pre$phi13Z2D >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 20443
   $67 = __THREW__; //@line 20444
   __THREW__ = 0; //@line 20444
   if (!($67 & 1)) {
    ___cxa_end_catch(); //@line 20447
    break;
   }
   $69 = ___cxa_find_matching_catch_2() | 0; //@line 20450
   __THREW__ = 0; //@line 20452
   invoke_v(3); //@line 20453
   $71 = __THREW__; //@line 20454
   __THREW__ = 0; //@line 20454
   if ($71 & 1) {
    $73 = ___cxa_find_matching_catch_3(0) | 0; //@line 20457
    ___clang_call_terminate($73); //@line 20459
   } else {
    ___resumeException($69 | 0); //@line 20462
   }
  }
 } while (0);
 STACKTOP = sp; //@line 20467
 return $0 | 0; //@line 20467
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$06$i$i = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $72 = 0, $78 = 0, $86 = 0, $89 = 0, $9 = 0, $$06$i$i$looptemp = 0;
 $2 = $0 + 4 | 0; //@line 1959
 $4 = HEAP32[$0 >> 2] | 0; //@line 1961
 $6 = ((HEAP32[$2 >> 2] | 0) - $4 | 0) / 72 | 0; //@line 1963
 $7 = $6 + 1 | 0; //@line 1964
 if ($7 >>> 0 > 59652323) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 1967
 }
 $9 = $0 + 8 | 0; //@line 1970
 $12 = ((HEAP32[$9 >> 2] | 0) - $4 | 0) / 72 | 0; //@line 1973
 $14 = $12 << 1; //@line 1975
 $$sroa$speculated$$i = $12 >>> 0 < 29826161 ? $14 >>> 0 < $7 >>> 0 ? $7 : $14 : 59652323; //@line 1978
 do {
  if (!$$sroa$speculated$$i) {
   $26 = 0; //@line 1982
   $89 = 0; //@line 1982
  } else {
   if ($$sroa$speculated$$i >>> 0 <= 59652323) {
    $24 = __Znwj($$sroa$speculated$$i * 72 | 0) | 0; //@line 1987
    $26 = $24; //@line 1988
    $89 = $24; //@line 1988
    break;
   }
   $18 = ___cxa_allocate_exception(8) | 0; //@line 1991
   __THREW__ = 0; //@line 1992
   invoke_vii(119, $18 | 0, 31992); //@line 1993
   $19 = __THREW__; //@line 1994
   __THREW__ = 0; //@line 1994
   if ($19 & 1) {
    $21 = ___cxa_find_matching_catch_2() | 0; //@line 1997
    ___cxa_free_exception($18 | 0); //@line 1999
    ___resumeException($21 | 0); //@line 2000
   } else {
    HEAP32[$18 >> 2] = 13224; //@line 2003
    ___cxa_throw($18 | 0, 2856, 240); //@line 2004
   }
  }
 } while (0);
 $25 = $26 + ($6 * 72 | 0) | 0; //@line 2009
 $27 = $25; //@line 2010
 $29 = $26 + ($$sroa$speculated$$i * 72 | 0) | 0; //@line 2012
 __THREW__ = 0; //@line 2013
 invoke_vii(120, $25 | 0, $1 | 0); //@line 2014
 $30 = __THREW__; //@line 2015
 __THREW__ = 0; //@line 2015
 if ($30 & 1) {
  $86 = ___cxa_find_matching_catch_2() | 0; //@line 2018
  if (!$26) {
   ___resumeException($86 | 0); //@line 2022
  }
  __ZdlPv($89); //@line 2025
  ___resumeException($86 | 0); //@line 2026
 }
 $33 = $25 + 72 | 0; //@line 2030
 $34 = HEAP32[$0 >> 2] | 0; //@line 2031
 $35 = HEAP32[$2 >> 2] | 0; //@line 2032
 if (($35 | 0) == ($34 | 0)) {
  $65 = $27; //@line 2036
  $66 = $34; //@line 2036
  $68 = $34; //@line 2036
 } else {
  $$06$i$i = $35; //@line 2038
  $$sroa$7$0 = $27; //@line 2038
  $40 = $25; //@line 2038
  do {
   $$06$i$i$looptemp = $$06$i$i;
   $$06$i$i = $$06$i$i + -72 | 0; //@line 2040
   HEAP32[$40 + -72 >> 2] = HEAP32[$$06$i$i >> 2]; //@line 2043
   $42 = $40 + -68 | 0; //@line 2044
   $43 = $$06$i$i$looptemp + -68 | 0; //@line 2045
   HEAP32[$42 >> 2] = HEAP32[$43 >> 2]; //@line 2046
   HEAP32[$42 + 4 >> 2] = HEAP32[$43 + 4 >> 2]; //@line 2046
   HEAP32[$42 + 8 >> 2] = HEAP32[$43 + 8 >> 2]; //@line 2046
   HEAP32[$43 >> 2] = 0; //@line 2047
   HEAP32[$43 + 4 >> 2] = 0; //@line 2047
   HEAP32[$43 + 8 >> 2] = 0; //@line 2047
   $44 = $40 + -56 | 0; //@line 2048
   $45 = $$06$i$i$looptemp + -56 | 0; //@line 2049
   HEAP32[$44 >> 2] = HEAP32[$45 >> 2]; //@line 2050
   HEAP32[$44 + 4 >> 2] = HEAP32[$45 + 4 >> 2]; //@line 2050
   HEAP32[$44 + 8 >> 2] = HEAP32[$45 + 8 >> 2]; //@line 2050
   HEAP32[$44 + 12 >> 2] = HEAP32[$45 + 12 >> 2]; //@line 2050
   HEAP32[$44 + 16 >> 2] = HEAP32[$45 + 16 >> 2]; //@line 2050
   HEAP32[$44 + 20 >> 2] = HEAP32[$45 + 20 >> 2]; //@line 2050
   $46 = $40 + -32 | 0; //@line 2051
   $47 = $$06$i$i$looptemp + -32 | 0; //@line 2052
   HEAP32[$46 >> 2] = 0; //@line 2053
   $48 = $40 + -28 | 0; //@line 2054
   HEAP32[$48 >> 2] = 0; //@line 2055
   HEAP32[$40 + -24 >> 2] = 0; //@line 2057
   HEAP32[$46 >> 2] = HEAP32[$47 >> 2]; //@line 2059
   $51 = $$06$i$i$looptemp + -28 | 0; //@line 2060
   HEAP32[$48 >> 2] = HEAP32[$51 >> 2]; //@line 2062
   $53 = $$06$i$i$looptemp + -24 | 0; //@line 2063
   HEAP32[$40 + -24 >> 2] = HEAP32[$53 >> 2]; //@line 2066
   HEAP32[$53 >> 2] = 0; //@line 2067
   HEAP32[$51 >> 2] = 0; //@line 2068
   HEAP32[$47 >> 2] = 0; //@line 2069
   $56 = $40 + -20 | 0; //@line 2070
   $57 = $$06$i$i$looptemp + -20 | 0; //@line 2071
   HEAP32[$56 >> 2] = HEAP32[$57 >> 2]; //@line 2072
   HEAP32[$56 + 4 >> 2] = HEAP32[$57 + 4 >> 2]; //@line 2072
   HEAP32[$56 + 8 >> 2] = HEAP32[$57 + 8 >> 2]; //@line 2072
   HEAP32[$57 >> 2] = 0; //@line 2073
   HEAP32[$57 + 4 >> 2] = 0; //@line 2073
   HEAP32[$57 + 8 >> 2] = 0; //@line 2073
   HEAP16[$40 + -8 >> 1] = HEAP16[$$06$i$i$looptemp + -8 >> 1] | 0; //@line 2077
   $40 = $$sroa$7$0 + -72 | 0; //@line 2079
   $$sroa$7$0 = $40; //@line 2080
  } while (($$06$i$i | 0) != ($34 | 0));
  $65 = $$sroa$7$0; //@line 2090
  $66 = HEAP32[$0 >> 2] | 0; //@line 2090
  $68 = HEAP32[$2 >> 2] | 0; //@line 2090
 }
 HEAP32[$0 >> 2] = $65; //@line 2092
 HEAP32[$2 >> 2] = $33; //@line 2093
 HEAP32[$9 >> 2] = $29; //@line 2094
 $67 = $66; //@line 2095
 if (($68 | 0) != ($67 | 0)) {
  $71 = $68; //@line 2098
  do {
   $72 = $71 + -20 | 0; //@line 2101
   if ((HEAP8[$72 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$72 >> 2] | 0); //@line 2107
   }
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($71 + -32 | 0); //@line 2110
   $78 = $71 + -68 | 0; //@line 2111
   $71 = $71 + -72 | 0; //@line 2100
   if ((HEAP8[$78 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$78 >> 2] | 0); //@line 2117
   }
  } while (($71 | 0) != ($67 | 0));
 }
 if (!$66) {
  return;
 }
 __ZdlPv($66); //@line 2132
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$030 = 0, $$2 = 0, $$233 = 0, $$byval_copy = 0, $$byval_copy9 = 0, $$sink$index3 = 0, $$sroa$027$0 = 0, $$sroa$027$0$copyload29 = 0, $16 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 29091
 STACKTOP = STACKTOP + 48 | 0; //@line 29092
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 29092
 $$byval_copy9 = sp + 40 | 0; //@line 29093
 $$byval_copy = sp + 16 | 0; //@line 29094
 $6 = sp + 8 | 0; //@line 29095
 $7 = sp + 12 | 0; //@line 29096
 $8 = sp + 4 | 0; //@line 29097
 $9 = sp; //@line 29098
 L1 : do {
  if (!(HEAP32[$3 + 4 >> 2] & 1)) {
   HEAP32[$6 >> 2] = -1; //@line 29105
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 29108
   HEAP32[$7 >> 2] = HEAP32[$1 >> 2]; //@line 29110
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 29112
   HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2]; //@line 29113
   HEAP32[$$byval_copy9 >> 2] = HEAP32[$8 >> 2]; //@line 29114
   HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiii[$16 & 63]($0, $$byval_copy, $$byval_copy9, $3, $4, $6) | 0; //@line 29116
   switch (HEAP32[$6 >> 2] | 0) {
   case 0:
    {
     HEAP8[$5 >> 0] = 0; //@line 29120
     break;
    }
   case 1:
    {
     HEAP8[$5 >> 0] = 1; //@line 29124
     break;
    }
   default:
    {
     HEAP8[$5 >> 0] = 1; //@line 29128
     HEAP32[$4 >> 2] = 4; //@line 29129
    }
   }
   $$sroa$027$0 = HEAP32[$1 >> 2] | 0; //@line 29133
  } else {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy9, $3); //@line 29135
   __THREW__ = 0; //@line 29136
   $21 = invoke_iii(63, $$byval_copy9 | 0, 35544) | 0; //@line 29137
   $22 = __THREW__; //@line 29138
   __THREW__ = 0; //@line 29138
   do {
    if ($22 & 1) {
     $46 = ___cxa_find_matching_catch_2() | 0; //@line 29142
     $47 = tempRet0; //@line 29143
     __ZNSt3__26localeD2Ev($$byval_copy9); //@line 29144
     $$2 = $46; //@line 29145
     $$233 = $47; //@line 29145
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy9); //@line 29147
     __ZNKSt3__28ios_base6getlocEv($$byval_copy9, $3); //@line 29148
     __THREW__ = 0; //@line 29149
     $24 = invoke_iii(63, $$byval_copy9 | 0, 35552) | 0; //@line 29150
     $25 = __THREW__; //@line 29151
     __THREW__ = 0; //@line 29151
     if ($25 & 1) {
      $48 = ___cxa_find_matching_catch_2() | 0; //@line 29154
      $49 = tempRet0; //@line 29155
      __ZNSt3__26localeD2Ev($$byval_copy9); //@line 29156
      $$2 = $48; //@line 29157
      $$233 = $49; //@line 29157
      break;
     }
     __ZNSt3__26localeD2Ev($$byval_copy9); //@line 29160
     __THREW__ = 0; //@line 29164
     invoke_vii(HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0, $$byval_copy | 0, $24 | 0); //@line 29165
     $30 = __THREW__; //@line 29166
     __THREW__ = 0; //@line 29166
     L15 : do {
      if ($30 & 1) {
       $32 = ___cxa_find_matching_catch_2() | 0; //@line 29170
       $$030 = $32; //@line 29172
       $$sink$index3 = tempRet0; //@line 29172
      } else {
       __THREW__ = 0; //@line 29178
       invoke_vii(HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0, $$byval_copy + 12 | 0, $24 | 0); //@line 29179
       $37 = __THREW__; //@line 29180
       __THREW__ = 0; //@line 29180
       if ($37 & 1) {
        $58 = ___cxa_find_matching_catch_2() | 0; //@line 29183
        $59 = tempRet0; //@line 29184
        __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy); //@line 29185
        $$030 = $58; //@line 29186
        $$sink$index3 = $59; //@line 29186
        break;
       }
       HEAP32[$9 >> 2] = HEAP32[$2 >> 2]; //@line 29190
       $40 = $$byval_copy + 24 | 0; //@line 29191
       __THREW__ = 0; //@line 29192
       HEAP32[$$byval_copy9 >> 2] = HEAP32[$9 >> 2]; //@line 29193
       $41 = invoke_iiiiiiii(8, $1 | 0, $$byval_copy9 | 0, $$byval_copy | 0, $40 | 0, $21 | 0, $4 | 0, 1) | 0; //@line 29194
       $42 = __THREW__; //@line 29195
       __THREW__ = 0; //@line 29195
       if ($42 & 1) {
        $50 = ___cxa_find_matching_catch_2() | 0; //@line 29198
        $51 = tempRet0; //@line 29199
        $56 = $40; //@line 29200
        while (1) {
         $56 = $56 + -12 | 0; //@line 29202
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56); //@line 29203
         if (($56 | 0) == ($$byval_copy | 0)) {
          $$030 = $50; //@line 29206
          $$sink$index3 = $51; //@line 29206
          break L15;
         }
        }
       }
       HEAP8[$5 >> 0] = ($41 | 0) == ($$byval_copy | 0) & 1; //@line 29215
       $$sroa$027$0$copyload29 = HEAP32[$1 >> 2] | 0; //@line 29216
       $53 = $40; //@line 29217
       do {
        $53 = $53 + -12 | 0; //@line 29219
        __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($53); //@line 29220
       } while (($53 | 0) != ($$byval_copy | 0));
       $$sroa$027$0 = $$sroa$027$0$copyload29; //@line 29228
       break L1;
      }
     } while (0);
     $$2 = $$030; //@line 29232
     $$233 = $$sink$index3; //@line 29232
    }
   } while (0);
   ___resumeException($$2 | 0); //@line 29235
  }
 } while (0);
 STACKTOP = sp; //@line 29239
 return $$sroa$027$0 | 0; //@line 29239
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$030 = 0, $$2 = 0, $$233 = 0, $$byval_copy = 0, $$byval_copy9 = 0, $$sink$index3 = 0, $$sroa$027$0 = 0, $$sroa$027$0$copyload29 = 0, $16 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 22566
 STACKTOP = STACKTOP + 48 | 0; //@line 22567
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 22567
 $$byval_copy9 = sp + 40 | 0; //@line 22568
 $$byval_copy = sp + 16 | 0; //@line 22569
 $6 = sp + 8 | 0; //@line 22570
 $7 = sp + 12 | 0; //@line 22571
 $8 = sp + 4 | 0; //@line 22572
 $9 = sp; //@line 22573
 L1 : do {
  if (!(HEAP32[$3 + 4 >> 2] & 1)) {
   HEAP32[$6 >> 2] = -1; //@line 22580
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 22583
   HEAP32[$7 >> 2] = HEAP32[$1 >> 2]; //@line 22585
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 22587
   HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2]; //@line 22588
   HEAP32[$$byval_copy9 >> 2] = HEAP32[$8 >> 2]; //@line 22589
   HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiii[$16 & 63]($0, $$byval_copy, $$byval_copy9, $3, $4, $6) | 0; //@line 22591
   switch (HEAP32[$6 >> 2] | 0) {
   case 0:
    {
     HEAP8[$5 >> 0] = 0; //@line 22595
     break;
    }
   case 1:
    {
     HEAP8[$5 >> 0] = 1; //@line 22599
     break;
    }
   default:
    {
     HEAP8[$5 >> 0] = 1; //@line 22603
     HEAP32[$4 >> 2] = 4; //@line 22604
    }
   }
   $$sroa$027$0 = HEAP32[$1 >> 2] | 0; //@line 22608
  } else {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy9, $3); //@line 22610
   __THREW__ = 0; //@line 22611
   $21 = invoke_iii(63, $$byval_copy9 | 0, 35512) | 0; //@line 22612
   $22 = __THREW__; //@line 22613
   __THREW__ = 0; //@line 22613
   do {
    if ($22 & 1) {
     $46 = ___cxa_find_matching_catch_2() | 0; //@line 22617
     $47 = tempRet0; //@line 22618
     __ZNSt3__26localeD2Ev($$byval_copy9); //@line 22619
     $$2 = $46; //@line 22620
     $$233 = $47; //@line 22620
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy9); //@line 22622
     __ZNKSt3__28ios_base6getlocEv($$byval_copy9, $3); //@line 22623
     __THREW__ = 0; //@line 22624
     $24 = invoke_iii(63, $$byval_copy9 | 0, 35528) | 0; //@line 22625
     $25 = __THREW__; //@line 22626
     __THREW__ = 0; //@line 22626
     if ($25 & 1) {
      $48 = ___cxa_find_matching_catch_2() | 0; //@line 22629
      $49 = tempRet0; //@line 22630
      __ZNSt3__26localeD2Ev($$byval_copy9); //@line 22631
      $$2 = $48; //@line 22632
      $$233 = $49; //@line 22632
      break;
     }
     __ZNSt3__26localeD2Ev($$byval_copy9); //@line 22635
     __THREW__ = 0; //@line 22639
     invoke_vii(HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0, $$byval_copy | 0, $24 | 0); //@line 22640
     $30 = __THREW__; //@line 22641
     __THREW__ = 0; //@line 22641
     L15 : do {
      if ($30 & 1) {
       $32 = ___cxa_find_matching_catch_2() | 0; //@line 22645
       $$030 = $32; //@line 22647
       $$sink$index3 = tempRet0; //@line 22647
      } else {
       __THREW__ = 0; //@line 22653
       invoke_vii(HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0, $$byval_copy + 12 | 0, $24 | 0); //@line 22654
       $37 = __THREW__; //@line 22655
       __THREW__ = 0; //@line 22655
       if ($37 & 1) {
        $58 = ___cxa_find_matching_catch_2() | 0; //@line 22658
        $59 = tempRet0; //@line 22659
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy); //@line 22660
        $$030 = $58; //@line 22661
        $$sink$index3 = $59; //@line 22661
        break;
       }
       HEAP32[$9 >> 2] = HEAP32[$2 >> 2]; //@line 22665
       $40 = $$byval_copy + 24 | 0; //@line 22666
       __THREW__ = 0; //@line 22667
       HEAP32[$$byval_copy9 >> 2] = HEAP32[$9 >> 2]; //@line 22668
       $41 = invoke_iiiiiiii(7, $1 | 0, $$byval_copy9 | 0, $$byval_copy | 0, $40 | 0, $21 | 0, $4 | 0, 1) | 0; //@line 22669
       $42 = __THREW__; //@line 22670
       __THREW__ = 0; //@line 22670
       if ($42 & 1) {
        $50 = ___cxa_find_matching_catch_2() | 0; //@line 22673
        $51 = tempRet0; //@line 22674
        $56 = $40; //@line 22675
        while (1) {
         $56 = $56 + -12 | 0; //@line 22677
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56); //@line 22678
         if (($56 | 0) == ($$byval_copy | 0)) {
          $$030 = $50; //@line 22681
          $$sink$index3 = $51; //@line 22681
          break L15;
         }
        }
       }
       HEAP8[$5 >> 0] = ($41 | 0) == ($$byval_copy | 0) & 1; //@line 22690
       $$sroa$027$0$copyload29 = HEAP32[$1 >> 2] | 0; //@line 22691
       $53 = $40; //@line 22692
       do {
        $53 = $53 + -12 | 0; //@line 22694
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($53); //@line 22695
       } while (($53 | 0) != ($$byval_copy | 0));
       $$sroa$027$0 = $$sroa$027$0$copyload29; //@line 22703
       break L1;
      }
     } while (0);
     $$2 = $$030; //@line 22707
     $$233 = $$sink$index3; //@line 22707
    }
   } while (0);
   ___resumeException($$2 | 0); //@line 22710
  }
 } while (0);
 STACKTOP = sp; //@line 22714
 return $$sroa$027$0 | 0; //@line 22714
}
function __ZN6Parser17recognizeFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$015$off049$i = 0, $$ptr$i47$i = 0, $$sroa$013$017$add$i$i = 0, $$sroa$013$017$add$i46$i = 0, $$sroa$034$048$i = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $65 = 0, $7 = 0, $merge$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 26502
 STACKTOP = STACKTOP + 16 | 0; //@line 26503
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26503
 $2 = sp; //@line 26504
 $3 = $1 + 11 | 0; //@line 26505
 $4 = HEAP8[$3 >> 0] | 0; //@line 26506
 $6 = $1 + 4 | 0; //@line 26508
 $7 = HEAP32[$6 >> 2] | 0; //@line 26509
 do {
  if ((($4 << 24 >> 24 < 0 ? $7 : $4 & 255) | 0) == 1) {
   __THREW__ = 0; //@line 26515
   $11 = invoke_iiiiii(21, $1 | 0, 0, -1, 20982, 1) | 0; //@line 26516
   $12 = __THREW__; //@line 26517
   __THREW__ = 0; //@line 26517
   if ($12 & 1) {
    $14 = ___cxa_find_matching_catch_3(0) | 0; //@line 26520
    ___clang_call_terminate($14); //@line 26522
   }
   if (!$11) {
    $$0 = 1; //@line 26527
    STACKTOP = sp; //@line 26528
    return $$0 | 0; //@line 26528
   } else {
    $17 = HEAP8[$3 >> 0] | 0; //@line 26532
    $20 = HEAP32[$6 >> 2] | 0; //@line 26532
    break;
   }
  } else {
   $17 = $4; //@line 26536
   $20 = $7; //@line 26536
  }
 } while (0);
 do {
  if ((($17 << 24 >> 24 < 0 ? $20 : $17 & 255) | 0) == 1) {
   __THREW__ = 0; //@line 26545
   $23 = invoke_iiiiii(21, $1 | 0, 0, -1, 20984, 1) | 0; //@line 26546
   $24 = __THREW__; //@line 26547
   __THREW__ = 0; //@line 26547
   if ($24 & 1) {
    $26 = ___cxa_find_matching_catch_3(0) | 0; //@line 26550
    ___clang_call_terminate($26); //@line 26552
   }
   if (!$23) {
    $$0 = 3; //@line 26557
    STACKTOP = sp; //@line 26558
    return $$0 | 0; //@line 26558
   } else {
    $29 = HEAP8[$3 >> 0] | 0; //@line 26562
    $32 = HEAP32[$6 >> 2] | 0; //@line 26562
    break;
   }
  } else {
   $29 = $17; //@line 26566
   $32 = $20; //@line 26566
  }
 } while (0);
 if ((($29 << 24 >> 24 < 0 ? $32 : $29 & 255) | 0) == 2) {
  __THREW__ = 0; //@line 26574
  $35 = invoke_iiiiii(21, $1 | 0, 0, -1, 20986, 2) | 0; //@line 26575
  $36 = __THREW__; //@line 26576
  __THREW__ = 0; //@line 26576
  if ($36 & 1) {
   $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 26579
   ___clang_call_terminate($38); //@line 26581
  }
  if (!$35) {
   $$0 = 0; //@line 26586
   STACKTOP = sp; //@line 26587
   return $$0 | 0; //@line 26587
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2, $1); //@line 26590
 $41 = $2 + 11 | 0; //@line 26591
 $42 = HEAP8[$41 >> 0] | 0; //@line 26592
 $43 = $42 << 24 >> 24 < 0; //@line 26593
 $48 = $43 ? HEAP32[$2 >> 2] | 0 : $2; //@line 26598
 $49 = $43 ? HEAP32[$2 + 4 >> 2] | 0 : $42 & 255; //@line 26599
 $50 = $48 + $49 | 0; //@line 26600
 do {
  if (!$49) {
   $merge$i = 4; //@line 26604
  } else {
   $$015$off049$i = 0; //@line 26606
   $$sroa$034$048$i = $48; //@line 26606
   L27 : while (1) {
    $52 = HEAP8[$$sroa$034$048$i >> 0] | 0; //@line 26608
    __THREW__ = 0; //@line 26609
    $53 = invoke_ii(142, 16) | 0; //@line 26610
    $54 = __THREW__; //@line 26611
    __THREW__ = 0; //@line 26611
    if ($54 & 1) {
     label = 26; //@line 26614
     break;
    }
    dest = $53; //@line 26617
    src = 20967; //@line 26617
    stop = dest + 12 | 0; //@line 26617
    do {
     HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 26617
     dest = dest + 1 | 0; //@line 26617
     src = src + 1 | 0; //@line 26617
    } while ((dest | 0) < (stop | 0));
    HEAP8[$53 + 12 >> 0] = 0; //@line 26619
    if ($52 << 24 >> 24 != 45) {
     $$ptr$i47$i = $53 + 1 | 0; //@line 26623
     $$sroa$013$017$add$i46$i = 1; //@line 26623
     while (1) {
      if (($$sroa$013$017$add$i46$i | 0) == 12) {
       label = 22; //@line 26627
       break L27;
      }
      $$sroa$013$017$add$i$i = $$sroa$013$017$add$i46$i + 1 | 0; //@line 26632
      if ((HEAP8[$$ptr$i47$i >> 0] | 0) == $52 << 24 >> 24) {
       break;
      } else {
       $$ptr$i47$i = $53 + $$sroa$013$017$add$i$i | 0; //@line 26637
       $$sroa$013$017$add$i46$i = $$sroa$013$017$add$i$i; //@line 26637
      }
     }
    }
    __ZdlPv($53); //@line 26641
    $$015$off049$i = $$015$off049$i | ($52 + -45 & 255) > 1; //@line 26644
    $$sroa$034$048$i = $$sroa$034$048$i + 1 | 0; //@line 26645
    if (($$sroa$034$048$i | 0) == ($50 | 0)) {
     label = 23; //@line 26648
     break;
    }
   }
   if ((label | 0) == 22) {
    __ZdlPv($53); //@line 26655
    $merge$i = 4; //@line 26656
    break;
   } else if ((label | 0) == 23) {
    $merge$i = $$015$off049$i ? 2 : 4; //@line 26661
    break;
   } else if ((label | 0) == 26) {
    $65 = ___cxa_find_matching_catch_2() | 0; //@line 26665
    if ((HEAP8[$41 >> 0] | 0) >= 0) {
     ___resumeException($65 | 0); //@line 26670
    }
    __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 26674
    ___resumeException($65 | 0); //@line 26675
   }
  }
 } while (0);
 if ((HEAP8[$41 >> 0] | 0) >= 0) {
  $$0 = $merge$i; //@line 26683
  STACKTOP = sp; //@line 26684
  return $$0 | 0; //@line 26684
 }
 __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 26687
 $$0 = $merge$i; //@line 26688
 STACKTOP = sp; //@line 26689
 return $$0 | 0; //@line 26689
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$8 = 0, $$pre$phiZ2D = 0, $$sink110 = 0, $10 = 0, $101 = 0, $103 = 0, $107 = 0, $11 = 0, $110 = 0, $131 = 0, $133 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $41 = 0, $47 = 0, $55 = 0, $57 = 0, $64 = 0, $73 = 0, $82 = 0, $84 = 0, $86 = 0, $92 = 0, $95 = 0, label = 0;
 HEAP32[$2 >> 2] = $0; //@line 57342
 HEAP32[$5 >> 2] = $3; //@line 57343
 if (!($7 & 4)) {
  $$pre$phiZ2D = $1; //@line 57348
 } else {
  $10 = HEAP32[$2 >> 2] | 0; //@line 57350
  $11 = $1; //@line 57351
  if (($11 - $10 | 0) > 2) {
   if ((HEAP8[$10 >> 0] | 0) == -17) {
    if ((HEAP8[$10 + 1 >> 0] | 0) == -69) {
     if ((HEAP8[$10 + 2 >> 0] | 0) == -65) {
      HEAP32[$2 >> 2] = $10 + 3; //@line 57368
      $$pre$phiZ2D = $11; //@line 57369
     } else {
      $$pre$phiZ2D = $11; //@line 57371
     }
    } else {
     $$pre$phiZ2D = $11; //@line 57374
    }
   } else {
    $$pre$phiZ2D = $11; //@line 57377
   }
  } else {
   $$pre$phiZ2D = $11; //@line 57380
  }
 }
 $24 = $4; //@line 57383
 L9 : while (1) {
  $25 = HEAP32[$2 >> 2] | 0; //@line 57385
  $26 = $25 >>> 0 < $1 >>> 0; //@line 57386
  if (!$26) {
   label = 41; //@line 57388
   break;
  }
  $27 = HEAP32[$5 >> 2] | 0; //@line 57391
  if ($27 >>> 0 >= $4 >>> 0) {
   label = 41; //@line 57394
   break;
  }
  $29 = HEAP8[$25 >> 0] | 0; //@line 57397
  $30 = $29 & 255; //@line 57398
  if ($30 >>> 0 > $6 >>> 0) {
   $$8 = 2; //@line 57401
   break;
  }
  do {
   if ($29 << 24 >> 24 > -1) {
    HEAP16[$27 >> 1] = $29 & 255; //@line 57408
    $$sink110 = 1; //@line 57409
    $133 = $25; //@line 57409
   } else {
    if (($29 & 255) < 194) {
     $$8 = 2; //@line 57413
     break L9;
    }
    if (($29 & 255) < 224) {
     if (($$pre$phiZ2D - $25 | 0) < 2) {
      $$8 = 1; //@line 57422
      break L9;
     }
     $41 = HEAPU8[$25 + 1 >> 0] | 0; //@line 57427
     if (($41 & 192 | 0) != 128) {
      $$8 = 2; //@line 57431
      break L9;
     }
     $47 = $41 & 63 | $30 << 6 & 1984; //@line 57437
     if ($47 >>> 0 > $6 >>> 0) {
      $$8 = 2; //@line 57440
      break L9;
     }
     HEAP16[$27 >> 1] = $47; //@line 57444
     $$sink110 = 2; //@line 57445
     $133 = $25; //@line 57445
     break;
    }
    if (($29 & 255) < 240) {
     if (($$pre$phiZ2D - $25 | 0) < 3) {
      $$8 = 1; //@line 57454
      break L9;
     }
     $55 = HEAP8[$25 + 1 >> 0] | 0; //@line 57458
     $57 = HEAP8[$25 + 2 >> 0] | 0; //@line 57460
     switch ($29 << 24 >> 24) {
     case -32:
      {
       if (($55 & -32) << 24 >> 24 != -96) {
        $$8 = 2; //@line 57466
        break L9;
       }
       break;
      }
     case -19:
      {
       if (($55 & -32) << 24 >> 24 != -128) {
        $$8 = 2; //@line 57475
        break L9;
       }
       break;
      }
     default:
      {
       if (($55 & -64) << 24 >> 24 != -128) {
        $$8 = 2; //@line 57484
        break L9;
       }
      }
     }
     $64 = $57 & 255; //@line 57489
     if (($64 & 192 | 0) != 128) {
      $$8 = 2; //@line 57493
      break L9;
     }
     $73 = ($55 & 63) << 6 | $30 << 12 | $64 & 63; //@line 57502
     if (($73 & 65535) >>> 0 > $6 >>> 0) {
      $$8 = 2; //@line 57506
      break L9;
     }
     HEAP16[$27 >> 1] = $73; //@line 57510
     $$sink110 = 3; //@line 57511
     $133 = $25; //@line 57511
     break;
    }
    if (($29 & 255) >= 245) {
     $$8 = 2; //@line 57516
     break L9;
    }
    if (($$pre$phiZ2D - $25 | 0) < 4) {
     $$8 = 1; //@line 57523
     break L9;
    }
    $82 = HEAP8[$25 + 1 >> 0] | 0; //@line 57527
    $84 = HEAP8[$25 + 2 >> 0] | 0; //@line 57529
    $86 = HEAP8[$25 + 3 >> 0] | 0; //@line 57531
    switch ($29 << 24 >> 24) {
    case -16:
     {
      if (($82 + 112 & 255) >= 48) {
       $$8 = 2; //@line 57537
       break L9;
      }
      break;
     }
    case -12:
     {
      if (($82 & -16) << 24 >> 24 != -128) {
       $$8 = 2; //@line 57546
       break L9;
      }
      break;
     }
    default:
     {
      if (($82 & -64) << 24 >> 24 != -128) {
       $$8 = 2; //@line 57555
       break L9;
      }
     }
    }
    $92 = $84 & 255; //@line 57560
    if (($92 & 192 | 0) != 128) {
     $$8 = 2; //@line 57564
     break L9;
    }
    $95 = $86 & 255; //@line 57567
    if (($95 & 192 | 0) != 128) {
     $$8 = 2; //@line 57571
     break L9;
    }
    if (($24 - $27 | 0) < 4) {
     $$8 = 1; //@line 57578
     break L9;
    }
    $101 = $30 & 7; //@line 57581
    $103 = $82 & 255; //@line 57583
    $107 = $92 << 6; //@line 57587
    $110 = $95 & 63; //@line 57590
    if (($103 << 12 & 258048 | $101 << 18 | $107 & 4032 | $110) >>> 0 > $6 >>> 0) {
     $$8 = 2; //@line 57594
     break L9;
    }
    HEAP16[$27 >> 1] = $103 << 2 & 60 | $92 >>> 4 & 3 | (($103 >>> 4 & 3 | $101 << 2) << 6) + 16320 | 55296; //@line 57611
    $131 = $27 + 2 | 0; //@line 57616
    HEAP32[$5 >> 2] = $131; //@line 57617
    HEAP16[$131 >> 1] = $110 | $107 & 960 | 56320; //@line 57618
    $$sink110 = 4; //@line 57620
    $133 = HEAP32[$2 >> 2] | 0; //@line 57620
   }
  } while (0);
  HEAP32[$2 >> 2] = $133 + $$sink110; //@line 57624
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 2; //@line 57627
 }
 if ((label | 0) == 41) {
  $$8 = $26 & 1; //@line 57631
 }
 return $$8 | 0; //@line 57633
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$i = 0, $$03$i$i$i = 0, $$byval_copy1 = 0, $10 = 0, $17 = 0, $2 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $48 = 0, $50 = 0, $51 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21101
 STACKTOP = STACKTOP + 96 | 0; //@line 21102
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 21102
 $$byval_copy1 = sp + 85 | 0; //@line 21103
 $2 = sp + 84 | 0; //@line 21104
 $3 = sp + 72 | 0; //@line 21105
 $4 = sp; //@line 21106
 __ZN5Stack3popEv($4, __ZN6Runner15getCurrentStackEv(HEAP32[$1 >> 2] | 0) | 0); //@line 21109
 __THREW__ = 0; //@line 21110
 invoke_vii(135, $3 | 0, $4 | 0); //@line 21111
 $6 = __THREW__; //@line 21112
 __THREW__ = 0; //@line 21112
 do {
  if ($6 & 1) {
   $48 = ___cxa_find_matching_catch_2() | 0; //@line 21116
   $$0$i$i$i = tempRet0; //@line 21118
   $$03$i$i$i = $48; //@line 21118
  } else {
   $8 = $3 + 11 | 0; //@line 21120
   $9 = HEAP8[$8 >> 0] | 0; //@line 21121
   $10 = $9 << 24 >> 24 < 0; //@line 21122
   __THREW__ = 0; //@line 21129
   invoke_iiii(32, 34640, ($10 ? HEAP32[$3 >> 2] | 0 : $3) | 0, ($10 ? HEAP32[$3 + 4 >> 2] | 0 : $9 & 255) | 0) | 0; //@line 21130
   $17 = __THREW__; //@line 21131
   __THREW__ = 0; //@line 21131
   if ($17 & 1) {
    $50 = ___cxa_find_matching_catch_2() | 0; //@line 21134
    $51 = tempRet0; //@line 21135
    if ((HEAP8[$8 >> 0] | 0) >= 0) {
     $$0$i$i$i = $51; //@line 21139
     $$03$i$i$i = $50; //@line 21139
     break;
    }
    __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 21143
    $$0$i$i$i = $51; //@line 21144
    $$03$i$i$i = $50; //@line 21144
    break;
   }
   if ((HEAP8[$8 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 21151
   }
   $22 = $4 + 52 | 0; //@line 21153
   if ((HEAP8[$22 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 21159
   }
   $27 = $4 + 40 | 0; //@line 21161
   $28 = HEAP32[$27 >> 2] | 0; //@line 21162
   if ($28 | 0) {
    $30 = $4 + 44 | 0; //@line 21165
    $31 = HEAP32[$30 >> 2] | 0; //@line 21166
    do {
     if (($31 | 0) == ($28 | 0)) {
      $42 = $28; //@line 21170
     } else {
      $33 = $4 + 48 | 0; //@line 21172
      $35 = $31; //@line 21173
      while (1) {
       $34 = $35 + -72 | 0; //@line 21175
       HEAP32[$30 >> 2] = $34; //@line 21176
       __THREW__ = 0; //@line 21177
       HEAP8[$$byval_copy1 >> 0] = HEAP8[$2 >> 0] | 0; //@line 21178
       invoke_viii(13, $$byval_copy1 | 0, $33 | 0, $34 | 0); //@line 21179
       $36 = __THREW__; //@line 21180
       __THREW__ = 0; //@line 21180
       if ($36 & 1) {
        label = 12; //@line 21183
        break;
       }
       $35 = HEAP32[$30 >> 2] | 0; //@line 21186
       if (($35 | 0) == ($28 | 0)) {
        label = 13; //@line 21189
        break;
       }
      }
      if ((label | 0) == 12) {
       $40 = ___cxa_find_matching_catch_3(0) | 0; //@line 21196
       ___clang_call_terminate($40); //@line 21198
      } else if ((label | 0) == 13) {
       $42 = HEAP32[$27 >> 2] | 0; //@line 21203
       break;
      }
     }
    } while (0);
    __ZdlPv($42); //@line 21208
   }
   $43 = $4 + 4 | 0; //@line 21210
   if ((HEAP8[$43 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 21215
    return;
   }
   __ZdlPv(HEAP32[$43 >> 2] | 0); //@line 21218
   STACKTOP = sp; //@line 21219
   return;
  }
 } while (0);
 $55 = $4 + 52 | 0; //@line 21222
 if ((HEAP8[$55 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$55 >> 2] | 0); //@line 21228
 }
 $60 = $4 + 40 | 0; //@line 21230
 $61 = HEAP32[$60 >> 2] | 0; //@line 21231
 if ($61 | 0) {
  $63 = $4 + 44 | 0; //@line 21234
  $64 = HEAP32[$63 >> 2] | 0; //@line 21235
  do {
   if (($64 | 0) == ($61 | 0)) {
    $75 = $61; //@line 21239
   } else {
    $66 = $4 + 48 | 0; //@line 21241
    $68 = $64; //@line 21242
    while (1) {
     $67 = $68 + -72 | 0; //@line 21244
     HEAP32[$63 >> 2] = $67; //@line 21245
     __THREW__ = 0; //@line 21246
     HEAP8[$$byval_copy1 >> 0] = HEAP8[$2 >> 0] | 0; //@line 21247
     invoke_viii(13, $$byval_copy1 | 0, $66 | 0, $67 | 0); //@line 21248
     $69 = __THREW__; //@line 21249
     __THREW__ = 0; //@line 21249
     if ($69 & 1) {
      label = 27; //@line 21252
      break;
     }
     $68 = HEAP32[$63 >> 2] | 0; //@line 21255
     if (($68 | 0) == ($61 | 0)) {
      label = 28; //@line 21258
      break;
     }
    }
    if ((label | 0) == 27) {
     $73 = ___cxa_find_matching_catch_3(0) | 0; //@line 21265
     ___clang_call_terminate($73); //@line 21267
    } else if ((label | 0) == 28) {
     $75 = HEAP32[$60 >> 2] | 0; //@line 21272
     break;
    }
   }
  } while (0);
  __ZdlPv($75); //@line 21277
 }
 $76 = $4 + 4 | 0; //@line 21279
 if ((HEAP8[$76 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$03$i$i$i | 0); //@line 21284
 }
 __ZdlPv(HEAP32[$76 >> 2] | 0); //@line 21288
 ___resumeException($$03$i$i$i | 0); //@line 21289
}
function __ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i39 = 0, $$033 = 0, $$134$ph = 0, $$237$ph = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phiZ2D = 0, $$sink38$sink$index = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $47 = 0, $54 = 0, $58 = 0, $60 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20781
 STACKTOP = STACKTOP + 16 | 0; //@line 20782
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20782
 $3 = sp; //@line 20783
 __THREW__ = 0; //@line 20784
 invoke_viii(23, $3 | 0, $0 | 0, 1); //@line 20785
 $4 = __THREW__; //@line 20786
 __THREW__ = 0; //@line 20786
 L1 : do {
  if ($4 & 1) {
   $34 = ___cxa_find_matching_catch_3(0) | 0; //@line 20790
   $$pre$phi51Z2D = $0; //@line 20792
   $$pre$phi53Z2D = $0; //@line 20792
   $$sink38$sink$index = $34; //@line 20792
  } else {
   do {
    if (HEAP8[$3 >> 0] | 0) {
     $8 = $1 + 11 | 0; //@line 20798
     if ((HEAP8[$8 >> 0] | 0) < 0) {
      HEAP8[HEAP32[$1 >> 2] >> 0] = 0; //@line 20803
      $12 = $1 + 4 | 0; //@line 20804
      HEAP32[$12 >> 2] = 0; //@line 20805
      $$pre$phiZ2D = $12; //@line 20806
     } else {
      HEAP8[$1 >> 0] = 0; //@line 20808
      HEAP8[$8 >> 0] = 0; //@line 20809
      $$pre$phiZ2D = $1 + 4 | 0; //@line 20811
     }
     $$033 = 0; //@line 20813
     while (1) {
      $18 = HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0; //@line 20820
      $19 = $18 + 12 | 0; //@line 20821
      $20 = HEAP32[$19 >> 2] | 0; //@line 20822
      if (($20 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) {
       __THREW__ = 0; //@line 20830
       $27 = invoke_ii(HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] | 0, $18 | 0) | 0; //@line 20831
       $28 = __THREW__; //@line 20832
       __THREW__ = 0; //@line 20832
       if ($28 & 1) {
        label = 12; //@line 20835
        break;
       }
       if (($27 | 0) == -1) {
        $$134$ph = $$033; //@line 20840
        $$237$ph = 2; //@line 20840
        label = 17; //@line 20841
        break;
       } else {
        $$0$i39 = $27; //@line 20844
       }
      } else {
       HEAP32[$19 >> 2] = $20 + 1; //@line 20848
       $$0$i39 = HEAPU8[$20 >> 0] | 0; //@line 20851
      }
      $38 = $$033 + 1 | 0; //@line 20853
      $39 = $$0$i39 & 255; //@line 20854
      if ($39 << 24 >> 24 == $2 << 24 >> 24) {
       $$134$ph = $38; //@line 20857
       $$237$ph = 0; //@line 20857
       label = 17; //@line 20858
       break;
      }
      __THREW__ = 0; //@line 20861
      invoke_vii(116, $1 | 0, $39 | 0); //@line 20862
      $41 = __THREW__; //@line 20863
      __THREW__ = 0; //@line 20863
      if ($41 & 1) {
       label = 16; //@line 20866
       break;
      }
      if ((HEAP8[$8 >> 0] | 0) < 0 & (HEAP32[$$pre$phiZ2D >> 2] | 0) == -17) {
       $$134$ph = $38; //@line 20875
       $$237$ph = 4; //@line 20875
       label = 17; //@line 20876
       break;
      } else {
       $$033 = $38; //@line 20879
      }
     }
     if ((label | 0) == 12) {
      $36 = ___cxa_find_matching_catch_3(0) | 0; //@line 20883
      $$pre$phi51Z2D = $0; //@line 20885
      $$pre$phi53Z2D = $0; //@line 20885
      $$sink38$sink$index = $36; //@line 20885
      break L1;
     } else if ((label | 0) == 16) {
      $47 = ___cxa_find_matching_catch_3(0) | 0; //@line 20889
      $$pre$phi51Z2D = $0; //@line 20891
      $$pre$phi53Z2D = $0; //@line 20891
      $$sink38$sink$index = $47; //@line 20891
      break L1;
     } else if ((label | 0) == 17) {
      $54 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20901
      __THREW__ = 0; //@line 20905
      invoke_vii(112, $54 | 0, HEAP32[$54 + 16 >> 2] | (($$134$ph | 0) == 0 ? $$237$ph | 4 : $$237$ph) | 0); //@line 20906
      $58 = __THREW__; //@line 20907
      __THREW__ = 0; //@line 20907
      if (!($58 & 1)) {
       break;
      }
      $60 = ___cxa_find_matching_catch_3(0) | 0; //@line 20912
      $$pre$phi51Z2D = $0; //@line 20914
      $$pre$phi53Z2D = $0; //@line 20914
      $$sink38$sink$index = $60; //@line 20914
      break L1;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 20919
   return $0 | 0; //@line 20919
  }
 } while (0);
 ___cxa_begin_catch($$sink38$sink$index | 0) | 0; //@line 20922
 __THREW__ = 0; //@line 20927
 invoke_vi(262, $$pre$phi53Z2D + (HEAP32[(HEAP32[$$pre$phi51Z2D >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 20928
 $66 = __THREW__; //@line 20929
 __THREW__ = 0; //@line 20929
 if (!($66 & 1)) {
  ___cxa_end_catch(); //@line 20932
  STACKTOP = sp; //@line 20933
  return $0 | 0; //@line 20933
 }
 $68 = ___cxa_find_matching_catch_2() | 0; //@line 20935
 __THREW__ = 0; //@line 20937
 invoke_v(3); //@line 20938
 $70 = __THREW__; //@line 20939
 __THREW__ = 0; //@line 20939
 if ($70 & 1) {
  $72 = ___cxa_find_matching_catch_3(0) | 0; //@line 20942
  ___clang_call_terminate($72); //@line 20944
 } else {
  ___resumeException($68 | 0); //@line 20947
 }
 return 0; //@line 20950
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01743 = 0, $$018$off041 = 0, $$1445157 = 0, $$145 = 0, $$phitmp$i = 0, $$pre$phi60Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $47 = 0, $5 = 0, $6 = 0, $eh$lpad$body$indexZ2D = 0, label = 0;
 if ($1 >>> 0 > 1073741807) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 62193
 }
 $3 = $0 + 8 | 0; //@line 62196
 $4 = $3 + 3 | 0; //@line 62197
 $5 = HEAP8[$4 >> 0] | 0; //@line 62198
 $6 = $5 << 24 >> 24 < 0; //@line 62199
 if ($6) {
  $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 62206
  $18 = (HEAP32[$3 >> 2] & 2147483647) + -1 | 0; //@line 62206
 } else {
  $12 = $5 & 255; //@line 62209
  $18 = 1; //@line 62209
 }
 $$sroa$speculated = $12 >>> 0 > $1 >>> 0 ? $12 : $1; //@line 62212
 $14 = $$sroa$speculated >>> 0 < 2; //@line 62213
 $$phitmp$i = $14 ? 1 : ($$sroa$speculated + 4 & -4) + -1 | 0; //@line 62217
 L8 : do {
  if (($$phitmp$i | 0) != ($18 | 0)) {
   do {
    if ($14) {
     $42 = HEAP32[$0 >> 2] | 0; //@line 62223
     if ($6) {
      $$01743 = $42; //@line 62225
      $$018$off041 = 0; //@line 62225
      $$145 = $0; //@line 62225
      label = 26; //@line 62226
     } else {
      __ZNSt3__211char_traitsIwE4copyEPwPKwj($0, $42, ($5 & 255) + 1 | 0) | 0; //@line 62230
      __ZdlPv($42); //@line 62231
      label = 29; //@line 62232
     }
    } else {
     $20 = $$phitmp$i + 1 | 0; //@line 62236
     $21 = $20 >>> 0 > 1073741823; //@line 62237
     L14 : do {
      if ($$phitmp$i >>> 0 > $18 >>> 0) {
       if (!$21) {
        $$sink = __Znwj($20 << 2) | 0; //@line 62243
        break;
       }
       $22 = ___cxa_allocate_exception(8) | 0; //@line 62246
       __THREW__ = 0; //@line 62247
       invoke_vii(119, $22 | 0, 31992); //@line 62248
       $23 = __THREW__; //@line 62249
       __THREW__ = 0; //@line 62249
       if ($23 & 1) {
        $25 = ___cxa_find_matching_catch_2() | 0; //@line 62252
        ___cxa_free_exception($22 | 0); //@line 62254
        ___resumeException($25 | 0); //@line 62255
       } else {
        HEAP32[$22 >> 2] = 13224; //@line 62258
        ___cxa_throw($22 | 0, 2856, 240); //@line 62259
       }
      } else {
       do {
        if ($21) {
         $29 = ___cxa_allocate_exception(8) | 0; //@line 62265
         __THREW__ = 0; //@line 62266
         invoke_vii(119, $29 | 0, 31992); //@line 62267
         $30 = __THREW__; //@line 62268
         __THREW__ = 0; //@line 62268
         if ($30 & 1) {
          $33 = ___cxa_find_matching_catch_3(0) | 0; //@line 62271
          ___cxa_free_exception($29 | 0); //@line 62273
          $eh$lpad$body$indexZ2D = $33; //@line 62274
          break;
         } else {
          HEAP32[$29 >> 2] = 13224; //@line 62277
          __THREW__ = 0; //@line 62278
          invoke_viii(16, $29 | 0, 2856, 240); //@line 62279
          __THREW__ = 0; //@line 62280
          label = 19; //@line 62281
          break;
         }
        } else {
         __THREW__ = 0; //@line 62286
         $36 = invoke_ii(142, $20 << 2 | 0) | 0; //@line 62287
         $37 = __THREW__; //@line 62288
         __THREW__ = 0; //@line 62288
         if ($37 & 1) {
          label = 19; //@line 62291
         } else {
          $$sink = $36; //@line 62293
          break L14;
         }
        }
       } while (0);
       if ((label | 0) == 19) {
        $39 = ___cxa_find_matching_catch_3(0) | 0; //@line 62299
        $eh$lpad$body$indexZ2D = $39; //@line 62301
       }
       ___cxa_begin_catch($eh$lpad$body$indexZ2D | 0) | 0; //@line 62303
       ___cxa_end_catch(); //@line 62304
       break L8;
      }
     } while (0);
     if ($6) {
      $$01743 = HEAP32[$0 >> 2] | 0; //@line 62310
      $$018$off041 = 1; //@line 62310
      $$145 = $$sink; //@line 62310
      label = 26; //@line 62311
      break;
     } else {
      __ZNSt3__211char_traitsIwE4copyEPwPKwj($$sink, $0, ($5 & 255) + 1 | 0) | 0; //@line 62316
      $$1445157 = $$sink; //@line 62318
      $$pre$phi60Z2D = $20; //@line 62318
      $$pre$phiZ2D = $0 + 4 | 0; //@line 62318
      label = 28; //@line 62319
      break;
     }
    }
   } while (0);
   if ((label | 0) == 26) {
    $47 = $0 + 4 | 0; //@line 62325
    __ZNSt3__211char_traitsIwE4copyEPwPKwj($$145, $$01743, (HEAP32[$47 >> 2] | 0) + 1 | 0) | 0; //@line 62328
    __ZdlPv($$01743); //@line 62329
    if ($$018$off041) {
     $$1445157 = $$145; //@line 62332
     $$pre$phi60Z2D = $$phitmp$i + 1 | 0; //@line 62332
     $$pre$phiZ2D = $47; //@line 62332
     label = 28; //@line 62333
    } else {
     label = 29; //@line 62335
    }
   }
   if ((label | 0) == 28) {
    HEAP32[$3 >> 2] = $$pre$phi60Z2D | -2147483648; //@line 62340
    HEAP32[$$pre$phiZ2D >> 2] = $12; //@line 62341
    HEAP32[$0 >> 2] = $$1445157; //@line 62342
    break;
   } else if ((label | 0) == 29) {
    HEAP8[$4 >> 0] = $12; //@line 62347
    break;
   }
  }
 } while (0);
 return;
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$byval_copy = 0, $$pre$phi19Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $5 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $eh$lpad$body$sink$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8970
 STACKTOP = STACKTOP + 16 | 0; //@line 8971
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8971
 $$byval_copy = sp + 12 | 0; //@line 8972
 $3 = sp; //@line 8973
 $4 = sp + 8 | 0; //@line 8974
 __THREW__ = 0; //@line 8975
 invoke_vii(136, $3 | 0, $0 | 0); //@line 8976
 $5 = __THREW__; //@line 8977
 __THREW__ = 0; //@line 8977
 L1 : do {
  if ($5 & 1) {
   $55 = ___cxa_find_matching_catch_3(0) | 0; //@line 8981
   $$1 = $55; //@line 8983
   $$pre$phi19Z2D = $0; //@line 8983
   $$pre$phiZ2D = $0; //@line 8983
  } else {
   do {
    if (HEAP8[$3 >> 0] | 0) {
     $10 = (HEAP32[$0 >> 2] | 0) + -12 | 0; //@line 8990
     HEAP32[$4 >> 2] = HEAP32[$0 + (HEAP32[$10 >> 2] | 0) + 24 >> 2]; //@line 8995
     $16 = $0 + (HEAP32[$10 >> 2] | 0) | 0; //@line 8997
     $18 = HEAP32[$16 + 4 >> 2] | 0; //@line 8999
     $19 = $1 + $2 | 0; //@line 9000
     $20 = $16 + 76 | 0; //@line 9001
     $21 = HEAP32[$20 >> 2] | 0; //@line 9002
     do {
      if (($21 | 0) == -1) {
       __THREW__ = 0; //@line 9006
       invoke_vii(132, $$byval_copy | 0, $16 | 0); //@line 9007
       $23 = __THREW__; //@line 9008
       __THREW__ = 0; //@line 9008
       if ($23 & 1) {
        label = 14; //@line 9011
       } else {
        __THREW__ = 0; //@line 9013
        $25 = invoke_iii(63, $$byval_copy | 0, 35512) | 0; //@line 9014
        $26 = __THREW__; //@line 9015
        __THREW__ = 0; //@line 9015
        if (!($26 & 1)) {
         __THREW__ = 0; //@line 9021
         $31 = invoke_iii(HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] | 0, $25 | 0, 32) | 0; //@line 9022
         $32 = __THREW__; //@line 9023
         __THREW__ = 0; //@line 9023
         if (!($32 & 1)) {
          __ZNSt3__26localeD2Ev($$byval_copy); //@line 9026
          $36 = $31 << 24 >> 24; //@line 9027
          HEAP32[$20 >> 2] = $36; //@line 9028
          $38 = $36; //@line 9029
          label = 9; //@line 9030
          break;
         }
        }
        $34 = ___cxa_find_matching_catch_3(0) | 0; //@line 9034
        __ZNSt3__26localeD2Ev($$byval_copy); //@line 9036
        $eh$lpad$body$sink$indexZ2D = $34; //@line 9037
       }
      } else {
       $38 = $21; //@line 9040
       label = 9; //@line 9041
      }
     } while (0);
     if ((label | 0) == 9) {
      $37 = $38 & 255; //@line 9045
      $41 = ($18 & 176 | 0) == 32 ? $19 : $1; //@line 9048
      __THREW__ = 0; //@line 9049
      HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 9050
      $42 = invoke_iiiiiii(39, $$byval_copy | 0, $1 | 0, $41 | 0, $19 | 0, $16 | 0, $37 | 0) | 0; //@line 9051
      $43 = __THREW__; //@line 9052
      __THREW__ = 0; //@line 9052
      if ($43 & 1) {
       label = 14; //@line 9055
      } else {
       if ($42 | 0) {
        break;
       }
       $49 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 9064
       __THREW__ = 0; //@line 9068
       invoke_vii(112, $49 | 0, HEAP32[$49 + 16 >> 2] | 5 | 0); //@line 9069
       $53 = __THREW__; //@line 9070
       __THREW__ = 0; //@line 9070
       if (!($53 & 1)) {
        break;
       }
       $57 = ___cxa_find_matching_catch_3(0) | 0; //@line 9075
       $eh$lpad$body$sink$indexZ2D = $57; //@line 9077
      }
     }
     if ((label | 0) == 14) {
      $59 = ___cxa_find_matching_catch_3(0) | 0; //@line 9081
      $eh$lpad$body$sink$indexZ2D = $59; //@line 9083
     }
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3); //@line 9085
     $$1 = $eh$lpad$body$sink$indexZ2D; //@line 9086
     $$pre$phi19Z2D = $0; //@line 9086
     $$pre$phiZ2D = $0; //@line 9086
     break L1;
    }
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3); //@line 9090
   STACKTOP = sp; //@line 9091
   return $0 | 0; //@line 9091
  }
 } while (0);
 ___cxa_begin_catch($$1 | 0) | 0; //@line 9094
 __THREW__ = 0; //@line 9099
 invoke_vi(262, $$pre$phi19Z2D + (HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 9100
 $65 = __THREW__; //@line 9101
 __THREW__ = 0; //@line 9101
 if (!($65 & 1)) {
  ___cxa_end_catch(); //@line 9104
  STACKTOP = sp; //@line 9105
  return $0 | 0; //@line 9105
 }
 $67 = ___cxa_find_matching_catch_2() | 0; //@line 9107
 __THREW__ = 0; //@line 9109
 invoke_v(3); //@line 9110
 $69 = __THREW__; //@line 9111
 __THREW__ = 0; //@line 9111
 if ($69 & 1) {
  $71 = ___cxa_find_matching_catch_3(0) | 0; //@line 9114
  ___clang_call_terminate($71); //@line 9116
 } else {
  ___resumeException($67 | 0); //@line 9119
 }
 return 0; //@line 9122
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i17 = 0, $$pre$i4$i$i1923 = 0, $$sink3 = 0, $20 = 0, $23 = 0, $35 = 0, $37 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $63 = 0, $66 = 0, $8 = 0, $80 = 0, $94 = 0, $95 = 0, label = 0;
 $5 = HEAP32[$1 >> 2] | 0; //@line 43382
 do {
  if (!$5) {
   $94 = 1; //@line 43386
  } else {
   $8 = HEAP32[$5 + 12 >> 2] | 0; //@line 43389
   if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 255]($5) | 0; //@line 43398
   } else {
    $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0; //@line 43402
   }
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0; //@line 43407
    $94 = 1; //@line 43408
    break;
   } else {
    $94 = (HEAP32[$1 >> 2] | 0) == 0; //@line 43413
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$2 >> 2] | 0; //@line 43418
 do {
  if (!$20) {
   label = 14; //@line 43422
  } else {
   $23 = HEAP32[$20 + 12 >> 2] | 0; //@line 43425
   if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) {
    $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 255]($20) | 0; //@line 43434
   } else {
    $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0; //@line 43438
   }
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0; //@line 43443
    label = 14; //@line 43444
    break;
   } else {
    if ($94) {
     $$pre$i4$i$i1923 = $20; //@line 43448
     label = 16; //@line 43449
     break;
    } else {
     $$sink3 = 6; //@line 43452
     label = 38; //@line 43453
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($94) {
   $$sink3 = 6; //@line 43461
   label = 38; //@line 43462
  } else {
   $$pre$i4$i$i1923 = 0; //@line 43464
   label = 16; //@line 43465
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   $35 = HEAP32[$1 >> 2] | 0; //@line 43470
   $37 = HEAP32[$35 + 12 >> 2] | 0; //@line 43472
   if (($37 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 255]($35) | 0; //@line 43481
   } else {
    $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0; //@line 43485
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 63]($4, $$0$i$i, 0) | 0) << 24 >> 24 == 37) {
    $52 = HEAP32[$1 >> 2] | 0; //@line 43493
    $53 = $52 + 12 | 0; //@line 43494
    $54 = HEAP32[$53 >> 2] | 0; //@line 43495
    if (($54 | 0) == (HEAP32[$52 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$52 >> 2] | 0) + 40 >> 2] & 255]($52) | 0; //@line 43503
    } else {
     HEAP32[$53 >> 2] = $54 + 4; //@line 43506
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$54 >> 2] | 0) | 0; //@line 43508
    }
    $63 = HEAP32[$1 >> 2] | 0; //@line 43510
    do {
     if (!$63) {
      $95 = 1; //@line 43514
     } else {
      $66 = HEAP32[$63 + 12 >> 2] | 0; //@line 43517
      if (($66 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) {
       $$0$i$i$i$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 36 >> 2] & 255]($63) | 0; //@line 43526
      } else {
       $$0$i$i$i$i11 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$66 >> 2] | 0) | 0; //@line 43530
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i11, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 43535
       $95 = 1; //@line 43536
       break;
      } else {
       $95 = (HEAP32[$1 >> 2] | 0) == 0; //@line 43541
       break;
      }
     }
    } while (0);
    do {
     if ($$pre$i4$i$i1923 | 0) {
      $80 = HEAP32[$$pre$i4$i$i1923 + 12 >> 2] | 0; //@line 43550
      if (($80 | 0) == (HEAP32[$$pre$i4$i$i1923 + 16 >> 2] | 0)) {
       $$0$i$i2$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i4$i$i1923 >> 2] | 0) + 36 >> 2] & 255]($$pre$i4$i$i1923) | 0; //@line 43559
      } else {
       $$0$i$i2$i$i17 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$80 >> 2] | 0) | 0; //@line 43563
      }
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i17, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0; //@line 43568
       break;
      } else {
       if ($95) {
        break L22;
       } else {
        $$sink3 = 2; //@line 43574
        label = 38; //@line 43575
        break L22;
       }
      }
     }
    } while (0);
    if ($95) {
     $$sink3 = 2; //@line 43582
     label = 38; //@line 43583
    }
   } else {
    $$sink3 = 4; //@line 43586
    label = 38; //@line 43587
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | $$sink3; //@line 43594
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i17 = 0, $$pre$i4$i$i1923 = 0, $$sink3 = 0, $20 = 0, $23 = 0, $35 = 0, $37 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $64 = 0, $67 = 0, $8 = 0, $81 = 0, $95 = 0, $96 = 0, label = 0;
 $5 = HEAP32[$1 >> 2] | 0; //@line 40462
 do {
  if (!$5) {
   $95 = 1; //@line 40466
  } else {
   $8 = HEAP32[$5 + 12 >> 2] | 0; //@line 40469
   if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) {
    $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 255]($5) | 0; //@line 40478
   } else {
    $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0; //@line 40482
   }
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0; //@line 40487
    $95 = 1; //@line 40488
    break;
   } else {
    $95 = (HEAP32[$1 >> 2] | 0) == 0; //@line 40493
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$2 >> 2] | 0; //@line 40498
 do {
  if (!$20) {
   label = 14; //@line 40502
  } else {
   $23 = HEAP32[$20 + 12 >> 2] | 0; //@line 40505
   if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) {
    $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 255]($20) | 0; //@line 40514
   } else {
    $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0; //@line 40518
   }
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0; //@line 40523
    label = 14; //@line 40524
    break;
   } else {
    if ($95) {
     $$pre$i4$i$i1923 = $20; //@line 40528
     label = 16; //@line 40529
     break;
    } else {
     $$sink3 = 6; //@line 40532
     label = 38; //@line 40533
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  if ($95) {
   $$sink3 = 6; //@line 40541
   label = 38; //@line 40542
  } else {
   $$pre$i4$i$i1923 = 0; //@line 40544
   label = 16; //@line 40545
  }
 }
 L22 : do {
  if ((label | 0) == 16) {
   $35 = HEAP32[$1 >> 2] | 0; //@line 40550
   $37 = HEAP32[$35 + 12 >> 2] | 0; //@line 40552
   if (($37 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) {
    $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 255]($35) | 0; //@line 40561
   } else {
    $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0; //@line 40565
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 63]($4, $$0$i$i & 255, 0) | 0) << 24 >> 24 == 37) {
    $53 = HEAP32[$1 >> 2] | 0; //@line 40574
    $54 = $53 + 12 | 0; //@line 40575
    $55 = HEAP32[$54 >> 2] | 0; //@line 40576
    if (($55 | 0) == (HEAP32[$53 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 40 >> 2] & 255]($53) | 0; //@line 40584
    } else {
     HEAP32[$54 >> 2] = $55 + 1; //@line 40587
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$55 >> 0] | 0) | 0; //@line 40589
    }
    $64 = HEAP32[$1 >> 2] | 0; //@line 40591
    do {
     if (!$64) {
      $96 = 1; //@line 40595
     } else {
      $67 = HEAP32[$64 + 12 >> 2] | 0; //@line 40598
      if (($67 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) {
       $$0$i$i$i$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 255]($64) | 0; //@line 40607
      } else {
       $$0$i$i$i$i11 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$67 >> 0] | 0) | 0; //@line 40611
      }
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i11, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0; //@line 40616
       $96 = 1; //@line 40617
       break;
      } else {
       $96 = (HEAP32[$1 >> 2] | 0) == 0; //@line 40622
       break;
      }
     }
    } while (0);
    do {
     if ($$pre$i4$i$i1923 | 0) {
      $81 = HEAP32[$$pre$i4$i$i1923 + 12 >> 2] | 0; //@line 40631
      if (($81 | 0) == (HEAP32[$$pre$i4$i$i1923 + 16 >> 2] | 0)) {
       $$0$i$i2$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i4$i$i1923 >> 2] | 0) + 36 >> 2] & 255]($$pre$i4$i$i1923) | 0; //@line 40640
      } else {
       $$0$i$i2$i$i17 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$81 >> 0] | 0) | 0; //@line 40644
      }
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i17, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0; //@line 40649
       break;
      } else {
       if ($96) {
        break L22;
       } else {
        $$sink3 = 2; //@line 40655
        label = 38; //@line 40656
        break L22;
       }
      }
     }
    } while (0);
    if ($96) {
     $$sink3 = 2; //@line 40663
     label = 38; //@line 40664
    }
   } else {
    $$sink3 = 4; //@line 40667
    label = 38; //@line 40668
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | $$sink3; //@line 40675
 }
 return;
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$4 = 0, $$pre80 = 0, $100 = 0, $109 = 0, $114 = 0, $117 = 0, $129 = 0, $134 = 0, $137 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $32 = 0, $43 = 0, $46 = 0, $58 = 0, $63 = 0, $69 = 0, $71 = 0, $77 = 0, $87 = 0, $91 = 0, label = 0;
 HEAP32[$2 >> 2] = $0; //@line 57652
 HEAP32[$5 >> 2] = $3; //@line 57653
 $$pre80 = $4; //@line 57656
 if (!($7 & 2)) {
  label = 4; //@line 57658
 } else {
  if (($$pre80 - $3 | 0) < 3) {
   $$4 = 1; //@line 57664
  } else {
   HEAP32[$5 >> 2] = $3 + 1; //@line 57667
   HEAP8[$3 >> 0] = -17; //@line 57668
   $14 = HEAP32[$5 >> 2] | 0; //@line 57669
   HEAP32[$5 >> 2] = $14 + 1; //@line 57671
   HEAP8[$14 >> 0] = -69; //@line 57672
   $16 = HEAP32[$5 >> 2] | 0; //@line 57673
   HEAP32[$5 >> 2] = $16 + 1; //@line 57675
   HEAP8[$16 >> 0] = -65; //@line 57676
   label = 4; //@line 57677
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $18 = $1; //@line 57682
   $19 = HEAP32[$2 >> 2] | 0; //@line 57684
   while (1) {
    if ($19 >>> 0 >= $1 >>> 0) {
     $$4 = 0; //@line 57688
     break L4;
    }
    $21 = HEAP16[$19 >> 1] | 0; //@line 57691
    $22 = $21 & 65535; //@line 57692
    if ($22 >>> 0 > $6 >>> 0) {
     $$4 = 2; //@line 57695
     break L4;
    }
    do {
     if (($21 & 65535) < 128) {
      $25 = HEAP32[$5 >> 2] | 0; //@line 57701
      if (($$pre80 - $25 | 0) < 1) {
       $$4 = 1; //@line 57706
       break L4;
      }
      HEAP32[$5 >> 2] = $25 + 1; //@line 57711
      HEAP8[$25 >> 0] = $21; //@line 57712
     } else {
      if (($21 & 65535) < 2048) {
       $32 = HEAP32[$5 >> 2] | 0; //@line 57716
       if (($$pre80 - $32 | 0) < 2) {
        $$4 = 1; //@line 57721
        break L4;
       }
       HEAP32[$5 >> 2] = $32 + 1; //@line 57728
       HEAP8[$32 >> 0] = $22 >>> 6 | 192; //@line 57729
       $43 = HEAP32[$5 >> 2] | 0; //@line 57733
       HEAP32[$5 >> 2] = $43 + 1; //@line 57735
       HEAP8[$43 >> 0] = $22 & 63 | 128; //@line 57736
       break;
      }
      if (($21 & 65535) < 55296) {
       $46 = HEAP32[$5 >> 2] | 0; //@line 57741
       if (($$pre80 - $46 | 0) < 3) {
        $$4 = 1; //@line 57746
        break L4;
       }
       HEAP32[$5 >> 2] = $46 + 1; //@line 57753
       HEAP8[$46 >> 0] = $22 >>> 12 | 224; //@line 57754
       $58 = HEAP32[$5 >> 2] | 0; //@line 57759
       HEAP32[$5 >> 2] = $58 + 1; //@line 57761
       HEAP8[$58 >> 0] = $22 >>> 6 & 63 | 128; //@line 57762
       $63 = HEAP32[$5 >> 2] | 0; //@line 57766
       HEAP32[$5 >> 2] = $63 + 1; //@line 57768
       HEAP8[$63 >> 0] = $22 & 63 | 128; //@line 57769
       break;
      }
      if (($21 & 65535) >= 56320) {
       if (($21 & 65535) < 57344) {
        $$4 = 2; //@line 57776
        break L4;
       }
       $117 = HEAP32[$5 >> 2] | 0; //@line 57779
       if (($$pre80 - $117 | 0) < 3) {
        $$4 = 1; //@line 57784
        break L4;
       }
       HEAP32[$5 >> 2] = $117 + 1; //@line 57791
       HEAP8[$117 >> 0] = $22 >>> 12 | 224; //@line 57792
       $129 = HEAP32[$5 >> 2] | 0; //@line 57797
       HEAP32[$5 >> 2] = $129 + 1; //@line 57799
       HEAP8[$129 >> 0] = $22 >>> 6 & 63 | 128; //@line 57800
       $134 = HEAP32[$5 >> 2] | 0; //@line 57804
       HEAP32[$5 >> 2] = $134 + 1; //@line 57806
       HEAP8[$134 >> 0] = $22 & 63 | 128; //@line 57807
       break;
      }
      if (($18 - $19 | 0) < 4) {
       $$4 = 1; //@line 57814
       break L4;
      }
      $69 = $19 + 2 | 0; //@line 57817
      $71 = HEAPU16[$69 >> 1] | 0; //@line 57819
      if (($71 & 64512 | 0) != 56320) {
       $$4 = 2; //@line 57823
       break L4;
      }
      if (($$pre80 - (HEAP32[$5 >> 2] | 0) | 0) < 4) {
       $$4 = 1; //@line 57830
       break L4;
      }
      $77 = $22 & 960; //@line 57833
      if ((($77 << 10) + 65536 | $22 << 10 & 64512 | $71 & 1023) >>> 0 > $6 >>> 0) {
       $$4 = 2; //@line 57843
       break L4;
      }
      HEAP32[$2 >> 2] = $69; //@line 57846
      $87 = ($77 >>> 6) + 1 | 0; //@line 57848
      $91 = HEAP32[$5 >> 2] | 0; //@line 57852
      HEAP32[$5 >> 2] = $91 + 1; //@line 57854
      HEAP8[$91 >> 0] = $87 >>> 2 | 240; //@line 57855
      $100 = HEAP32[$5 >> 2] | 0; //@line 57863
      HEAP32[$5 >> 2] = $100 + 1; //@line 57865
      HEAP8[$100 >> 0] = $22 >>> 2 & 15 | $87 << 4 & 48 | 128; //@line 57866
      $109 = HEAP32[$5 >> 2] | 0; //@line 57874
      HEAP32[$5 >> 2] = $109 + 1; //@line 57876
      HEAP8[$109 >> 0] = $22 << 4 & 48 | $71 >>> 6 & 15 | 128; //@line 57877
      $114 = HEAP32[$5 >> 2] | 0; //@line 57881
      HEAP32[$5 >> 2] = $114 + 1; //@line 57883
      HEAP8[$114 >> 0] = $71 & 63 | 128; //@line 57884
     }
    } while (0);
    $137 = (HEAP32[$2 >> 2] | 0) + 2 | 0; //@line 57888
    HEAP32[$2 >> 2] = $137; //@line 57889
    $19 = $137; //@line 57890
   }
  }
 } while (0);
 return $$4 | 0; //@line 57894
}
function __ZN19PredefinedFunctions18addBuiltinFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvP6RunnerEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $$pre$phi$i$i$i$iZ2D = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $6 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $72 = 0, $74 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14578
 STACKTOP = STACKTOP + 80 | 0; //@line 14579
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 14579
 $3 = sp + 64 | 0; //@line 14580
 $4 = sp + 40 | 0; //@line 14581
 $5 = sp + 68 | 0; //@line 14582
 $6 = sp; //@line 14583
 HEAP32[$6 + 16 >> 2] = 0; //@line 14585
 $8 = $6 + 24 | 0; //@line 14586
 HEAP32[$8 >> 2] = 0; //@line 14587
 $10 = HEAP32[$2 + 16 >> 2] | 0; //@line 14589
 do {
  if (!$10) {
   $12 = $4 + 16 | 0; //@line 14593
   HEAP32[$12 >> 2] = 0; //@line 14594
   $$pre$phi$i$i$i$iZ2D = $12; //@line 14595
   label = 7; //@line 14596
  } else {
   if (($2 | 0) == ($10 | 0)) {
    $14 = $4 + 16 | 0; //@line 14600
    HEAP32[$14 >> 2] = $4; //@line 14601
    __THREW__ = 0; //@line 14605
    invoke_vii(HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] | 0, $10 | 0, $4 | 0); //@line 14606
    $18 = __THREW__; //@line 14607
    __THREW__ = 0; //@line 14607
    if ($18 & 1) {
     break;
    } else {
     $$pre$phi$i$i$i$iZ2D = $14; //@line 14612
     label = 7; //@line 14613
     break;
    }
   }
   __THREW__ = 0; //@line 14620
   $23 = invoke_ii(HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2] | 0, $10 | 0) | 0; //@line 14621
   $24 = __THREW__; //@line 14622
   __THREW__ = 0; //@line 14622
   if (!($24 & 1)) {
    $26 = $4 + 16 | 0; //@line 14625
    HEAP32[$26 >> 2] = $23; //@line 14626
    $$pre$phi$i$i$i$iZ2D = $26; //@line 14627
    label = 7; //@line 14628
   }
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   __ZNSt3__28functionIFvP6RunnerEE4swapERS4_($4, $6); //@line 14634
   $27 = HEAP32[$$pre$phi$i$i$i$iZ2D >> 2] | 0; //@line 14635
   if (($4 | 0) == ($27 | 0)) {
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[$27 >> 2] | 0) + 16 >> 2] & 511]($27); //@line 14641
   } else {
    if ($27 | 0) {
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$27 >> 2] | 0) + 20 >> 2] & 511]($27); //@line 14648
    }
   }
   $36 = $6 + 32 | 0; //@line 14651
   HEAP8[$36 >> 0] = 0; //@line 14652
   __THREW__ = 0; //@line 14653
   $37 = invoke_iii(62, $0 | 0, $1 | 0) | 0; //@line 14654
   $38 = __THREW__; //@line 14655
   __THREW__ = 0; //@line 14655
   if (!($38 & 1)) {
    $40 = $37 + 24 | 0; //@line 14658
    $41 = HEAP32[$40 >> 2] | 0; //@line 14659
    $43 = HEAP32[$8 >> 2] | 0; //@line 14661
    $44 = ($43 | 0) == -1; //@line 14662
    do {
     if (($41 | 0) == -1) {
      if ($44) {
       HEAP8[$37 + 32 >> 0] = HEAP8[$36 >> 0] | 0; //@line 14668
       STACKTOP = sp; //@line 14669
       return;
      } else {
       label = 19; //@line 14671
      }
     } else {
      if ($44) {
       __THREW__ = 0; //@line 14677
       invoke_vii(HEAP32[3088 + ($41 << 2) >> 2] | 0, $3 | 0, $37 | 0); //@line 14678
       $49 = __THREW__; //@line 14679
       __THREW__ = 0; //@line 14679
       if ($49 & 1) {
        $51 = ___cxa_find_matching_catch_3(0) | 0; //@line 14682
        ___clang_call_terminate($51); //@line 14684
       } else {
        HEAP32[$40 >> 2] = -1; //@line 14687
        break;
       }
      } else {
       label = 19; //@line 14691
      }
     }
    } while (0);
    if ((label | 0) == 19) {
     HEAP32[$3 >> 2] = $37; //@line 14696
     __THREW__ = 0; //@line 14699
     invoke_viii(HEAP32[3096 + ($43 << 2) >> 2] | 0, $3 | 0, $37 | 0, $6 | 0); //@line 14700
     $55 = __THREW__; //@line 14701
     __THREW__ = 0; //@line 14701
     if ($55 & 1) {
      break;
     }
    }
    $$pr = HEAP32[$8 >> 2] | 0; //@line 14707
    HEAP8[$37 + 32 >> 0] = HEAP8[$36 >> 0] | 0; //@line 14710
    if (($$pr | 0) == -1) {
     STACKTOP = sp; //@line 14713
     return;
    }
    __THREW__ = 0; //@line 14717
    invoke_vii(HEAP32[3088 + ($$pr << 2) >> 2] | 0, $3 | 0, $6 | 0); //@line 14718
    $62 = __THREW__; //@line 14719
    __THREW__ = 0; //@line 14719
    if ($62 & 1) {
     $64 = ___cxa_find_matching_catch_3(0) | 0; //@line 14722
     ___clang_call_terminate($64); //@line 14724
    }
    STACKTOP = sp; //@line 14727
    return;
   }
  }
 } while (0);
 $66 = ___cxa_find_matching_catch_2() | 0; //@line 14731
 $68 = HEAP32[$8 >> 2] | 0; //@line 14733
 if (($68 | 0) == -1) {
  ___resumeException($66 | 0); //@line 14736
 }
 __THREW__ = 0; //@line 14741
 invoke_vii(HEAP32[3088 + ($68 << 2) >> 2] | 0, $5 | 0, $6 | 0); //@line 14742
 $72 = __THREW__; //@line 14743
 __THREW__ = 0; //@line 14743
 if ($72 & 1) {
  $74 = ___cxa_find_matching_catch_3(0) | 0; //@line 14746
  ___clang_call_terminate($74); //@line 14748
 }
 ___resumeException($66 | 0); //@line 14751
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0 | 0;
 var $$129$off0 = 0, $$131 = 0, $$4 = 0, $1 = 0, $10 = 0, $109 = 0, $114 = 0, $115 = 0, $120 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $35 = 0, $37 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $6 = 0, $68 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $84 = 0, $88 = 0, $89 = 0, $9 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21145
 STACKTOP = STACKTOP + 16 | 0; //@line 21146
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21146
 $1 = sp; //@line 21147
 $2 = $0 + 64 | 0; //@line 21148
 if (!(HEAP32[$2 >> 2] | 0)) {
  $$4 = 0; //@line 21152
  STACKTOP = sp; //@line 21153
  return $$4 | 0; //@line 21153
 }
 $5 = $0 + 68 | 0; //@line 21155
 $6 = HEAP32[$5 >> 2] | 0; //@line 21156
 if (!$6) {
  $8 = ___cxa_allocate_exception(4) | 0; //@line 21159
  __ZNSt8bad_castC2Ev($8); //@line 21160
  ___cxa_throw($8 | 0, 2904, 248); //@line 21161
 }
 $9 = $0 + 92 | 0; //@line 21164
 $10 = HEAP32[$9 >> 2] | 0; //@line 21165
 do {
  if (!($10 & 16)) {
   if ($10 & 8 | 0) {
    $47 = $0 + 80 | 0; //@line 21174
    $52 = HEAP32[$47 + 4 >> 2] | 0; //@line 21179
    $53 = $1; //@line 21180
    HEAP32[$53 >> 2] = HEAP32[$47 >> 2]; //@line 21182
    HEAP32[$53 + 4 >> 2] = $52; //@line 21185
    do {
     if (!(HEAP8[$0 + 98 >> 0] | 0)) {
      $68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 255]($6) | 0; //@line 21194
      $71 = $0 + 36 | 0; //@line 21197
      $72 = HEAP32[$71 >> 2] | 0; //@line 21198
      $73 = (HEAP32[$0 + 40 >> 2] | 0) - $72 | 0; //@line 21199
      if (($68 | 0) > 0) {
       $$129$off0 = 0; //@line 21210
       $$131 = (Math_imul((HEAP32[$0 + 16 >> 2] | 0) - (HEAP32[$0 + 12 >> 2] | 0) | 0, $68) | 0) + $73 | 0; //@line 21210
       break;
      }
      $84 = HEAP32[$0 + 12 >> 2] | 0; //@line 21214
      if (($84 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) {
       $$129$off0 = 0; //@line 21219
       $$131 = $73; //@line 21219
      } else {
       $88 = HEAP32[$5 >> 2] | 0; //@line 21221
       $89 = $0 + 32 | 0; //@line 21222
       $98 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$88 >> 2] | 0) + 32 >> 2] & 31]($88, $1, HEAP32[$89 >> 2] | 0, $72, $84 - (HEAP32[$0 + 8 >> 2] | 0) | 0) | 0; //@line 21231
       $$129$off0 = 1; //@line 21237
       $$131 = $73 - $98 + (HEAP32[$71 >> 2] | 0) - (HEAP32[$89 >> 2] | 0) | 0; //@line 21237
      }
     } else {
      $$129$off0 = 0; //@line 21245
      $$131 = (HEAP32[$0 + 16 >> 2] | 0) - (HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 21245
     }
    } while (0);
    if (___fseeko(HEAP32[$2 >> 2] | 0, 0 - $$131 | 0, 1) | 0) {
     $$4 = -1; //@line 21253
     STACKTOP = sp; //@line 21254
     return $$4 | 0; //@line 21254
    }
    if ($$129$off0) {
     $109 = $1; //@line 21258
     $114 = HEAP32[$109 + 4 >> 2] | 0; //@line 21263
     $115 = $0 + 72 | 0; //@line 21264
     HEAP32[$115 >> 2] = HEAP32[$109 >> 2]; //@line 21266
     HEAP32[$115 + 4 >> 2] = $114; //@line 21269
    }
    $120 = HEAP32[$0 + 32 >> 2] | 0; //@line 21272
    HEAP32[$0 + 40 >> 2] = $120; //@line 21274
    HEAP32[$0 + 36 >> 2] = $120; //@line 21276
    HEAP32[$0 + 8 >> 2] = 0; //@line 21278
    HEAP32[$0 + 12 >> 2] = 0; //@line 21280
    HEAP32[$0 + 16 >> 2] = 0; //@line 21282
    HEAP32[$9 >> 2] = 0; //@line 21283
   }
  } else {
   if ((HEAP32[$0 + 24 >> 2] | 0) != (HEAP32[$0 + 20 >> 2] | 0)) {
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] & 127]($0, -1) | 0) == -1) {
     $$4 = -1; //@line 21298
     STACKTOP = sp; //@line 21299
     return $$4 | 0; //@line 21299
    }
   }
   $23 = $0 + 72 | 0; //@line 21302
   $24 = $0 + 32 | 0; //@line 21303
   $25 = $0 + 52 | 0; //@line 21304
   L30 : while (1) {
    $26 = HEAP32[$5 >> 2] | 0; //@line 21306
    $27 = HEAP32[$24 >> 2] | 0; //@line 21307
    $33 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 31]($26, $23, $27, $27 + (HEAP32[$25 >> 2] | 0) | 0, $1) | 0; //@line 21313
    $35 = HEAP32[$24 >> 2] | 0; //@line 21315
    $37 = (HEAP32[$1 >> 2] | 0) - $35 | 0; //@line 21317
    if ((_fwrite($35, 1, $37, HEAP32[$2 >> 2] | 0) | 0) != ($37 | 0)) {
     $$4 = -1; //@line 21322
     label = 24; //@line 21323
     break;
    }
    switch ($33 | 0) {
    case 1:
     {
      break;
     }
    case 2:
     {
      $$4 = -1; //@line 21331
      label = 24; //@line 21332
      break L30;
      break;
     }
    default:
     {
      label = 10; //@line 21337
      break L30;
     }
    }
   }
   if ((label | 0) == 10) {
    if (!(_fflush(HEAP32[$2 >> 2] | 0) | 0)) {
     break;
    } else {
     $$4 = -1; //@line 21349
    }
    STACKTOP = sp; //@line 21351
    return $$4 | 0; //@line 21351
   } else if ((label | 0) == 24) {
    STACKTOP = sp; //@line 21354
    return $$4 | 0; //@line 21354
   }
  }
 } while (0);
 $$4 = 0; //@line 21358
 STACKTOP = sp; //@line 21359
 return $$4 | 0; //@line 21359
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i4$i$i15 = 0, $100 = 0, $21 = 0, $24 = 0, $36 = 0, $38 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $67 = 0, $70 = 0, $84 = 0, $9 = 0, $98 = 0, $99 = 0, label = 0;
 $5 = $4 + 8 | 0; //@line 40029
 L1 : while (1) {
  $6 = HEAP32[$1 >> 2] | 0; //@line 40031
  do {
   if (!$6) {
    $98 = 1; //@line 40035
   } else {
    $9 = HEAP32[$6 + 12 >> 2] | 0; //@line 40038
    if (($9 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 255]($6) | 0; //@line 40047
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0; //@line 40051
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 40056
     $98 = 1; //@line 40057
     break;
    } else {
     $98 = (HEAP32[$1 >> 2] | 0) == 0; //@line 40062
     break;
    }
   }
  } while (0);
  $21 = HEAP32[$2 >> 2] | 0; //@line 40067
  do {
   if (!$21) {
    label = 15; //@line 40071
   } else {
    $24 = HEAP32[$21 + 12 >> 2] | 0; //@line 40074
    if (($24 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) {
     $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 255]($21) | 0; //@line 40083
    } else {
     $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0; //@line 40087
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0; //@line 40092
     label = 15; //@line 40093
     break;
    } else {
     if ($98) {
      $99 = $21; //@line 40097
      break;
     } else {
      $$pre$i4$i$i15 = $21; //@line 40100
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0; //@line 40107
   if ($98) {
    $$pre$i4$i$i15 = 0; //@line 40109
    break;
   } else {
    $99 = 0; //@line 40112
   }
  }
  $36 = HEAP32[$1 >> 2] | 0; //@line 40115
  $38 = HEAP32[$36 + 12 >> 2] | 0; //@line 40117
  if (($38 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 255]($36) | 0; //@line 40126
  } else {
   $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$38 >> 0] | 0) | 0; //@line 40130
  }
  if (($$0$i$i & 255) << 24 >> 24 <= -1) {
   $$pre$i4$i$i15 = $99; //@line 40135
   break;
  }
  if (!(HEAP16[(HEAP32[$5 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $$pre$i4$i$i15 = $99; //@line 40146
   break;
  }
  $56 = HEAP32[$1 >> 2] | 0; //@line 40149
  $57 = $56 + 12 | 0; //@line 40150
  $58 = HEAP32[$57 >> 2] | 0; //@line 40151
  if (($58 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 40 >> 2] & 255]($56) | 0; //@line 40159
   continue;
  } else {
   HEAP32[$57 >> 2] = $58 + 1; //@line 40163
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$58 >> 0] | 0) | 0; //@line 40165
   continue;
  }
 }
 $67 = HEAP32[$1 >> 2] | 0; //@line 40169
 do {
  if (!$67) {
   $100 = 1; //@line 40173
  } else {
   $70 = HEAP32[$67 + 12 >> 2] | 0; //@line 40176
   if (($70 | 0) == (HEAP32[$67 + 16 >> 2] | 0)) {
    $$0$i$i$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 255]($67) | 0; //@line 40185
   } else {
    $$0$i$i$i$i7 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$70 >> 0] | 0) | 0; //@line 40189
   }
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i7, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0; //@line 40194
    $100 = 1; //@line 40195
    break;
   } else {
    $100 = (HEAP32[$1 >> 2] | 0) == 0; //@line 40200
    break;
   }
  }
 } while (0);
 do {
  if (!$$pre$i4$i$i15) {
   label = 38; //@line 40208
  } else {
   $84 = HEAP32[$$pre$i4$i$i15 + 12 >> 2] | 0; //@line 40211
   if (($84 | 0) == (HEAP32[$$pre$i4$i$i15 + 16 >> 2] | 0)) {
    $$0$i$i2$i$i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i4$i$i15 >> 2] | 0) + 36 >> 2] & 255]($$pre$i4$i$i15) | 0; //@line 40220
   } else {
    $$0$i$i2$i$i13 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$84 >> 0] | 0) | 0; //@line 40224
   }
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i13, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0; //@line 40229
    label = 38; //@line 40230
    break;
   } else {
    if ($100) {
     break;
    } else {
     label = 40; //@line 40236
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 38) {
  if ($100) {
   label = 40; //@line 40244
  }
 }
 if ((label | 0) == 40) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2; //@line 40250
 }
 return;
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$9 = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink106 = 0, $10 = 0, $104 = 0, $11 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $39 = 0, $45 = 0, $52 = 0, $54 = 0, $61 = 0, $71 = 0, $78 = 0, $80 = 0, $82 = 0, $88 = 0, $91 = 0, label = 0;
 HEAP32[$2 >> 2] = $0; //@line 55352
 HEAP32[$5 >> 2] = $3; //@line 55353
 if (!($7 & 4)) {
  $$pre$phiZ2D = $1; //@line 55358
 } else {
  $10 = HEAP32[$2 >> 2] | 0; //@line 55360
  $11 = $1; //@line 55361
  if (($11 - $10 | 0) > 2) {
   if ((HEAP8[$10 >> 0] | 0) == -17) {
    if ((HEAP8[$10 + 1 >> 0] | 0) == -69) {
     if ((HEAP8[$10 + 2 >> 0] | 0) == -65) {
      HEAP32[$2 >> 2] = $10 + 3; //@line 55378
      $$pre$phiZ2D = $11; //@line 55379
     } else {
      $$pre$phiZ2D = $11; //@line 55381
     }
    } else {
     $$pre$phiZ2D = $11; //@line 55384
    }
   } else {
    $$pre$phiZ2D = $11; //@line 55387
   }
  } else {
   $$pre$phiZ2D = $11; //@line 55390
  }
 }
 L9 : while (1) {
  $24 = HEAP32[$2 >> 2] | 0; //@line 55394
  $25 = $24 >>> 0 < $1 >>> 0; //@line 55395
  if (!$25) {
   label = 36; //@line 55397
   break;
  }
  $26 = HEAP32[$5 >> 2] | 0; //@line 55400
  if ($26 >>> 0 >= $4 >>> 0) {
   label = 36; //@line 55403
   break;
  }
  $28 = HEAP8[$24 >> 0] | 0; //@line 55406
  $29 = $28 & 255; //@line 55407
  do {
   if ($28 << 24 >> 24 > -1) {
    if ($29 >>> 0 > $6 >>> 0) {
     $$9 = 2; //@line 55413
     break L9;
    } else {
     $$sink = $29; //@line 55416
     $$sink106 = 1; //@line 55416
    }
   } else {
    if (($28 & 255) < 194) {
     $$9 = 2; //@line 55421
     break L9;
    }
    if (($28 & 255) < 224) {
     if (($$pre$phiZ2D - $24 | 0) < 2) {
      $$9 = 1; //@line 55430
      break L9;
     }
     $39 = HEAPU8[$24 + 1 >> 0] | 0; //@line 55435
     if (($39 & 192 | 0) != 128) {
      $$9 = 2; //@line 55439
      break L9;
     }
     $45 = $39 & 63 | $29 << 6 & 1984; //@line 55445
     if ($45 >>> 0 > $6 >>> 0) {
      $$9 = 2; //@line 55448
      break L9;
     } else {
      $$sink = $45; //@line 55451
      $$sink106 = 2; //@line 55451
      break;
     }
    }
    if (($28 & 255) < 240) {
     if (($$pre$phiZ2D - $24 | 0) < 3) {
      $$9 = 1; //@line 55461
      break L9;
     }
     $52 = HEAP8[$24 + 1 >> 0] | 0; //@line 55465
     $54 = HEAP8[$24 + 2 >> 0] | 0; //@line 55467
     switch ($28 << 24 >> 24) {
     case -32:
      {
       if (($52 & -32) << 24 >> 24 != -96) {
        $$9 = 2; //@line 55473
        break L9;
       }
       break;
      }
     case -19:
      {
       if (($52 & -32) << 24 >> 24 != -128) {
        $$9 = 2; //@line 55482
        break L9;
       }
       break;
      }
     default:
      {
       if (($52 & -64) << 24 >> 24 != -128) {
        $$9 = 2; //@line 55491
        break L9;
       }
      }
     }
     $61 = $54 & 255; //@line 55496
     if (($61 & 192 | 0) != 128) {
      $$9 = 2; //@line 55500
      break L9;
     }
     $71 = ($52 & 63) << 6 | $29 << 12 & 61440 | $61 & 63; //@line 55510
     if ($71 >>> 0 > $6 >>> 0) {
      $$9 = 2; //@line 55513
      break L9;
     } else {
      $$sink = $71; //@line 55516
      $$sink106 = 3; //@line 55516
      break;
     }
    }
    if (($28 & 255) >= 245) {
     $$9 = 2; //@line 55522
     break L9;
    }
    if (($$pre$phiZ2D - $24 | 0) < 4) {
     $$9 = 1; //@line 55529
     break L9;
    }
    $78 = HEAP8[$24 + 1 >> 0] | 0; //@line 55533
    $80 = HEAP8[$24 + 2 >> 0] | 0; //@line 55535
    $82 = HEAP8[$24 + 3 >> 0] | 0; //@line 55537
    switch ($28 << 24 >> 24) {
    case -16:
     {
      if (($78 + 112 & 255) >= 48) {
       $$9 = 2; //@line 55543
       break L9;
      }
      break;
     }
    case -12:
     {
      if (($78 & -16) << 24 >> 24 != -128) {
       $$9 = 2; //@line 55552
       break L9;
      }
      break;
     }
    default:
     {
      if (($78 & -64) << 24 >> 24 != -128) {
       $$9 = 2; //@line 55561
       break L9;
      }
     }
    }
    $88 = $80 & 255; //@line 55566
    if (($88 & 192 | 0) != 128) {
     $$9 = 2; //@line 55570
     break L9;
    }
    $91 = $82 & 255; //@line 55573
    if (($91 & 192 | 0) != 128) {
     $$9 = 2; //@line 55577
     break L9;
    }
    $104 = ($78 & 63) << 12 | $29 << 18 & 1835008 | $88 << 6 & 4032 | $91 & 63; //@line 55590
    if ($104 >>> 0 > $6 >>> 0) {
     $$9 = 2; //@line 55593
     break L9;
    } else {
     $$sink = $104; //@line 55596
     $$sink106 = 4; //@line 55596
    }
   }
  } while (0);
  HEAP32[$26 >> 2] = $$sink; //@line 55600
  HEAP32[$2 >> 2] = $24 + $$sink106; //@line 55602
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 4; //@line 55605
 }
 if ((label | 0) == 36) {
  $$9 = $25 & 1; //@line 55609
 }
 return $$9 | 0; //@line 55611
}
function __ZN16FunctionAnalyzer13_isInlineableENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE13CharmFunction($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$016 = 0, $$017 = 0, $$02026$i27 = 0, $$02125$i28 = 0, $$027$i26 = 0, $$1 = 0, $$1$i = 0, $$2$off0 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $8 = 0, $80 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24119
 STACKTOP = STACKTOP + 96 | 0; //@line 24120
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 24120
 $3 = sp + 72 | 0; //@line 24121
 $4 = sp; //@line 24122
 $5 = $2 + 40 | 0; //@line 24123
 $6 = $2 + 44 | 0; //@line 24124
 $8 = HEAP32[$5 >> 2] | 0; //@line 24126
 if ((HEAP32[$6 >> 2] | 0) == ($8 | 0)) {
  $$2$off0 = 1; //@line 24129
  STACKTOP = sp; //@line 24130
  return $$2$off0 | 0; //@line 24130
 }
 $10 = $3 + 11 | 0; //@line 24132
 $11 = $1 + 11 | 0; //@line 24133
 $12 = $1 + 4 | 0; //@line 24134
 $$in = $8; //@line 24135
 $26 = 0; //@line 24135
 $80 = 0; //@line 24135
 while (1) {
  $24 = $$in; //@line 24137
  if ((HEAP32[$24 + ($26 * 72 | 0) >> 2] | 0) == 1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3, $1); //@line 24142
   __THREW__ = 0; //@line 24145
   invoke_vii(120, $4 | 0, (HEAP32[$5 >> 2] | 0) + ($26 * 72 | 0) | 0); //@line 24146
   $31 = __THREW__; //@line 24147
   __THREW__ = 0; //@line 24147
   if ($31 & 1) {
    label = 9; //@line 24150
    break;
   }
   __THREW__ = 0; //@line 24153
   $33 = invoke_iiii(35, $0 | 0, $3 | 0, $4 | 0) | 0; //@line 24154
   $34 = __THREW__; //@line 24155
   __THREW__ = 0; //@line 24155
   if ($34 & 1) {
    label = 10; //@line 24158
    break;
   }
   $37 = ($33 ^ 1) & 1; //@line 24162
   __ZN13CharmFunctionD2Ev($4); //@line 24163
   if ((HEAP8[$10 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 24168
    $$1 = $37; //@line 24169
   } else {
    $$1 = $37; //@line 24171
   }
  } else {
   $48 = $24 + ($26 * 72 | 0) + 52 | 0; //@line 24174
   $49 = HEAP8[$11 >> 0] | 0; //@line 24175
   $50 = $49 << 24 >> 24 < 0; //@line 24176
   $52 = $49 & 255; //@line 24178
   $53 = $50 ? HEAP32[$12 >> 2] | 0 : $52; //@line 24179
   $55 = HEAP8[$48 + 11 >> 0] | 0; //@line 24181
   $56 = $55 << 24 >> 24 < 0; //@line 24182
   L12 : do {
    if (($53 | 0) == (($56 ? HEAP32[$24 + ($26 * 72 | 0) + 56 >> 2] | 0 : $55 & 255) | 0)) {
     $62 = HEAP32[$1 >> 2] | 0; //@line 24190
     $63 = $50 ? $62 : $1; //@line 24191
     $65 = $56 ? HEAP32[$48 >> 2] | 0 : $48; //@line 24193
     $66 = ($53 | 0) == 0; //@line 24194
     if ($50) {
      if ($66) {
       $$1$i = 1; //@line 24197
       break;
      }
      $$1$i = (_memcmp($63, $65, $53) | 0) == 0; //@line 24202
      break;
     }
     if ($66) {
      $$1$i = 1; //@line 24206
     } else {
      if ((HEAP8[$65 >> 0] | 0) == ($62 & 255) << 24 >> 24) {
       $$02026$i27 = $1; //@line 24213
       $$02125$i28 = $52; //@line 24213
       $$027$i26 = $65; //@line 24213
       while (1) {
        $$02125$i28 = $$02125$i28 + -1 | 0; //@line 24215
        $$02026$i27 = $$02026$i27 + 1 | 0; //@line 24216
        if (!$$02125$i28) {
         $$1$i = 1; //@line 24219
         break L12;
        }
        $$027$i26 = $$027$i26 + 1 | 0; //@line 24222
        if ((HEAP8[$$02026$i27 >> 0] | 0) != (HEAP8[$$027$i26 >> 0] | 0)) {
         $$1$i = 0; //@line 24229
         break;
        }
       }
      } else {
       $$1$i = 0; //@line 24234
      }
     }
    } else {
     $$1$i = 0; //@line 24238
    }
   } while (0);
   $$1 = $$1$i & 1; //@line 24242
  }
  $26 = _i64Add($26 | 0, $80 | 0, 1, 0) | 0; //@line 24245
  $80 = tempRet0; //@line 24246
  if ($$1 << 24 >> 24) {
   $$2$off0 = 0; //@line 24248
   label = 24; //@line 24249
   break;
  }
  $$in = HEAP32[$5 >> 2] | 0; //@line 24253
  if (!($80 >>> 0 < 0 | (($80 | 0) == 0 ? $26 >>> 0 < (((HEAP32[$6 >> 2] | 0) - $$in | 0) / 72 | 0) >>> 0 : 0))) {
   $$2$off0 = 1; //@line 24264
   label = 24; //@line 24265
   break;
  }
 }
 if ((label | 0) == 9) {
  $41 = ___cxa_find_matching_catch_2() | 0; //@line 24270
  $$016 = tempRet0; //@line 24272
  $$017 = $41; //@line 24272
 } else if ((label | 0) == 10) {
  $43 = ___cxa_find_matching_catch_2() | 0; //@line 24275
  $44 = tempRet0; //@line 24276
  __ZN13CharmFunctionD2Ev($4); //@line 24277
  $$016 = $44; //@line 24278
  $$017 = $43; //@line 24278
 } else if ((label | 0) == 24) {
  STACKTOP = sp; //@line 24281
  return $$2$off0 | 0; //@line 24281
 }
 if ((HEAP8[$10 >> 0] | 0) >= 0) {
  ___resumeException($$017 | 0); //@line 24286
 }
 __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 24290
 ___resumeException($$017 | 0); //@line 24291
 return 0; //@line 24293
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$sroa$028$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$pre$phiZ2D = 0, $$sroa$028$137 = 0, $12 = 0, $17 = 0, $22 = 0, $23 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $69 = 0, $7 = 0, $71 = 0, $82 = 0, $9 = 0, $98 = 0, sp = 0;
 sp = STACKTOP; //@line 19695
 STACKTOP = STACKTOP + 16 | 0; //@line 19696
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19696
 $3 = sp; //@line 19697
 HEAP8[$0 >> 0] = 0; //@line 19698
 $7 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 19702
 $9 = HEAP32[$7 + 16 >> 2] | 0; //@line 19704
 if (!$9) {
  $12 = HEAP32[$7 + 72 >> 2] | 0; //@line 19708
  if ($12 | 0) {
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($12) | 0; //@line 19711
  }
  do {
   if (!$2) {
    $17 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 19718
    if (HEAP32[$17 + 4 >> 2] & 4096 | 0) {
     __ZNKSt3__28ios_base6getlocEv($3, $17); //@line 19724
     __THREW__ = 0; //@line 19725
     $22 = invoke_iii(63, $3 | 0, 35512) | 0; //@line 19726
     $23 = __THREW__; //@line 19727
     __THREW__ = 0; //@line 19727
     if ($23 & 1) {
      $69 = ___cxa_find_matching_catch_2() | 0; //@line 19730
      __ZNSt3__26localeD2Ev($3); //@line 19732
      ___resumeException($69 | 0); //@line 19733
     }
     __ZNSt3__26localeD2Ev($3); //@line 19736
     $30 = HEAP32[$1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0; //@line 19742
     $31 = $22 + 8 | 0; //@line 19743
     $32 = $30; //@line 19744
     $33 = ($30 | 0) == 0; //@line 19745
     $34 = $32 + 12 | 0; //@line 19746
     $35 = $32 + 16 | 0; //@line 19747
     $36 = $30; //@line 19748
     while (1) {
      if ($33) {
       $$pre$phiZ2D = 0; //@line 19751
       $$sroa$028$137 = 0; //@line 19751
       break;
      }
      $37 = HEAP32[$34 >> 2] | 0; //@line 19754
      if (($37 | 0) == (HEAP32[$35 >> 2] | 0)) {
       $$0$i$i$i$i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 255]($32) | 0; //@line 19762
      } else {
       $$0$i$i$i$i15 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0; //@line 19766
      }
      $47 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0; //@line 19769
      $$$sroa$028$0 = $47 ? 0 : $30; //@line 19770
      if ($47) {
       $$pre$phiZ2D = 0; //@line 19772
       $$sroa$028$137 = 0; //@line 19772
       break;
      }
      $48 = $$$sroa$028$0; //@line 19775
      $49 = $48 + 12 | 0; //@line 19776
      $50 = HEAP32[$49 >> 2] | 0; //@line 19777
      $51 = $48 + 16 | 0; //@line 19778
      if (($50 | 0) == (HEAP32[$51 >> 2] | 0)) {
       $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$$sroa$028$0 >> 2] | 0) + 36 >> 2] & 255]($48) | 0; //@line 19787
      } else {
       $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$50 >> 0] | 0) | 0; //@line 19791
      }
      if (($$0$i$i & 255) << 24 >> 24 <= -1) {
       $$pre$phiZ2D = $48; //@line 19796
       $$sroa$028$137 = $30; //@line 19796
       break;
      }
      if (!(HEAP16[(HEAP32[$31 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
       $$pre$phiZ2D = $48; //@line 19807
       $$sroa$028$137 = $30; //@line 19807
       break;
      }
      $71 = HEAP32[$49 >> 2] | 0; //@line 19810
      if (($71 | 0) == (HEAP32[$51 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$$sroa$028$0 >> 2] | 0) + 40 >> 2] & 255]($48) | 0; //@line 19818
       continue;
      } else {
       HEAP32[$49 >> 2] = $71 + 1; //@line 19822
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$71 >> 0] | 0) | 0; //@line 19824
       continue;
      }
     }
     if ($$sroa$028$137 | 0) {
      $82 = HEAP32[$$pre$phiZ2D + 12 >> 2] | 0; //@line 19831
      if (($82 | 0) == (HEAP32[$$pre$phiZ2D + 16 >> 2] | 0)) {
       $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$028$137 >> 2] | 0) + 36 >> 2] & 255]($$pre$phiZ2D) | 0; //@line 19841
      } else {
       $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$82 >> 0] | 0) | 0; //@line 19845
      }
      if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) {
       break;
      }
     }
     $98 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 19856
     __ZNSt3__28ios_base5clearEj($98, HEAP32[$98 + 16 >> 2] | 6); //@line 19860
    }
   }
  } while (0);
  HEAP8[$0 >> 0] = (HEAP32[$1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] | 0) == 0 & 1; //@line 19872
 } else {
  __ZNSt3__28ios_base5clearEj($7, $9 | 4); //@line 19875
 }
 STACKTOP = sp; //@line 19877
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i4$i$i15 = 0, $20 = 0, $23 = 0, $35 = 0, $37 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $62 = 0, $65 = 0, $79 = 0, $8 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0;
 L1 : while (1) {
  $5 = HEAP32[$1 >> 2] | 0; //@line 42959
  do {
   if (!$5) {
    $93 = 1; //@line 42963
   } else {
    $8 = HEAP32[$5 + 12 >> 2] | 0; //@line 42966
    if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) {
     $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 255]($5) | 0; //@line 42975
    } else {
     $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0; //@line 42979
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0; //@line 42984
     $93 = 1; //@line 42985
     break;
    } else {
     $93 = (HEAP32[$1 >> 2] | 0) == 0; //@line 42990
     break;
    }
   }
  } while (0);
  $20 = HEAP32[$2 >> 2] | 0; //@line 42995
  do {
   if (!$20) {
    label = 15; //@line 42999
   } else {
    $23 = HEAP32[$20 + 12 >> 2] | 0; //@line 43002
    if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) {
     $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 255]($20) | 0; //@line 43011
    } else {
     $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0; //@line 43015
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0; //@line 43020
     label = 15; //@line 43021
     break;
    } else {
     if ($93) {
      $94 = $20; //@line 43025
      break;
     } else {
      $$pre$i4$i$i15 = $20; //@line 43028
      break L1;
     }
    }
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0; //@line 43035
   if ($93) {
    $$pre$i4$i$i15 = 0; //@line 43037
    break;
   } else {
    $94 = 0; //@line 43040
   }
  }
  $35 = HEAP32[$1 >> 2] | 0; //@line 43043
  $37 = HEAP32[$35 + 12 >> 2] | 0; //@line 43045
  if (($37 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) {
   $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 255]($35) | 0; //@line 43054
  } else {
   $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0; //@line 43058
  }
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 63]($4, 8192, $$0$i$i) | 0)) {
   $$pre$i4$i$i15 = $94; //@line 43065
   break;
  }
  $51 = HEAP32[$1 >> 2] | 0; //@line 43068
  $52 = $51 + 12 | 0; //@line 43069
  $53 = HEAP32[$52 >> 2] | 0; //@line 43070
  if (($53 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 40 >> 2] & 255]($51) | 0; //@line 43078
   continue;
  } else {
   HEAP32[$52 >> 2] = $53 + 4; //@line 43082
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0; //@line 43084
   continue;
  }
 }
 $62 = HEAP32[$1 >> 2] | 0; //@line 43088
 do {
  if (!$62) {
   $95 = 1; //@line 43092
  } else {
   $65 = HEAP32[$62 + 12 >> 2] | 0; //@line 43095
   if (($65 | 0) == (HEAP32[$62 + 16 >> 2] | 0)) {
    $$0$i$i$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$62 >> 2] | 0) + 36 >> 2] & 255]($62) | 0; //@line 43104
   } else {
    $$0$i$i$i$i7 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$65 >> 2] | 0) | 0; //@line 43108
   }
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i7, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0; //@line 43113
    $95 = 1; //@line 43114
    break;
   } else {
    $95 = (HEAP32[$1 >> 2] | 0) == 0; //@line 43119
    break;
   }
  }
 } while (0);
 do {
  if (!$$pre$i4$i$i15) {
   label = 37; //@line 43127
  } else {
   $79 = HEAP32[$$pre$i4$i$i15 + 12 >> 2] | 0; //@line 43130
   if (($79 | 0) == (HEAP32[$$pre$i4$i$i15 + 16 >> 2] | 0)) {
    $$0$i$i2$i$i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i4$i$i15 >> 2] | 0) + 36 >> 2] & 255]($$pre$i4$i$i15) | 0; //@line 43139
   } else {
    $$0$i$i2$i$i13 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$79 >> 2] | 0) | 0; //@line 43143
   }
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i13, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0; //@line 43148
    label = 37; //@line 43149
    break;
   } else {
    if ($95) {
     break;
    } else {
     label = 39; //@line 43155
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 37) {
  if ($95) {
   label = 39; //@line 43163
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2; //@line 43169
 }
 return;
}
function __ZN6Runner15getCurrentStackEv($0) {
 $0 = $0 | 0;
 var $$01032 = 0, $$1 = 0, $$byval_copy1 = 0, $$cast = 0, $$cast31 = 0, $$cast33 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6561
 STACKTOP = STACKTOP + 80 | 0; //@line 6562
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6562
 $$byval_copy1 = sp + 73 | 0; //@line 6563
 $1 = sp + 72 | 0; //@line 6564
 $2 = sp; //@line 6565
 $3 = $0 + 72 | 0; //@line 6566
 $4 = $0 + 76 | 0; //@line 6567
 $6 = HEAP32[$3 >> 2] | 0; //@line 6569
 $$cast31 = $6; //@line 6571
 if ((HEAP32[$4 >> 2] | 0) == ($6 | 0)) {
  $$1 = $$cast31; //@line 6573
  STACKTOP = sp; //@line 6574
  return $$1 | 0; //@line 6574
 }
 $8 = $2 + 52 | 0; //@line 6576
 $9 = $8 + 11 | 0; //@line 6577
 $10 = $2 + 40 | 0; //@line 6578
 $11 = $2 + 4 | 0; //@line 6579
 $12 = $11 + 11 | 0; //@line 6580
 $13 = $2 + 44 | 0; //@line 6581
 $14 = $2 + 48 | 0; //@line 6582
 $$01032 = 0; //@line 6583
 $$cast33 = $$cast31; //@line 6583
 L4 : while (1) {
  __ZN13CharmFunctionC2ERKS_($2, $0); //@line 6586
  __THREW__ = 0; //@line 6587
  $16 = invoke_iii(56, $$cast33 + ($$01032 * 104 | 0) | 0, $2 | 0) | 0; //@line 6588
  $17 = __THREW__; //@line 6589
  __THREW__ = 0; //@line 6589
  if ($17 & 1) {
   label = 16; //@line 6592
   break;
  }
  if ((HEAP8[$9 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 6599
  }
  $22 = HEAP32[$10 >> 2] | 0; //@line 6601
  if ($22 | 0) {
   $24 = HEAP32[$13 >> 2] | 0; //@line 6604
   if (($24 | 0) == ($22 | 0)) {
    $34 = $22; //@line 6607
   } else {
    $27 = $24; //@line 6609
    do {
     $26 = $27 + -72 | 0; //@line 6611
     HEAP32[$13 >> 2] = $26; //@line 6612
     __THREW__ = 0; //@line 6613
     HEAP8[$$byval_copy1 >> 0] = HEAP8[$1 >> 0] | 0; //@line 6614
     invoke_viii(13, $$byval_copy1 | 0, $14 | 0, $26 | 0); //@line 6615
     $28 = __THREW__; //@line 6616
     __THREW__ = 0; //@line 6616
     if ($28 & 1) {
      label = 10; //@line 6619
      break L4;
     }
     $27 = HEAP32[$13 >> 2] | 0; //@line 6622
    } while (($27 | 0) != ($22 | 0));
    $34 = HEAP32[$10 >> 2] | 0; //@line 6631
   }
   __ZdlPv($34); //@line 6633
  }
  if ((HEAP8[$12 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 6639
  }
  if ($16) {
   label = 30; //@line 6642
   break;
  }
  $59 = $$01032 + 1 | 0; //@line 6645
  $61 = HEAP32[$3 >> 2] | 0; //@line 6647
  $$cast = $61; //@line 6651
  if ($59 >>> 0 < (((HEAP32[$4 >> 2] | 0) - $61 | 0) / 104 | 0) >>> 0) {
   $$01032 = $59; //@line 6653
   $$cast33 = $$cast; //@line 6653
  } else {
   $$1 = $$cast; //@line 6655
   label = 31; //@line 6656
   break;
  }
 }
 if ((label | 0) == 10) {
  $32 = ___cxa_find_matching_catch_3(0) | 0; //@line 6661
  ___clang_call_terminate($32); //@line 6663
 } else if ((label | 0) == 16) {
  $38 = ___cxa_find_matching_catch_2() | 0; //@line 6667
  if ((HEAP8[$9 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 6673
  }
  $43 = HEAP32[$10 >> 2] | 0; //@line 6675
  if ($43 | 0) {
   $45 = HEAP32[$13 >> 2] | 0; //@line 6678
   do {
    if (($45 | 0) == ($43 | 0)) {
     $55 = $43; //@line 6682
    } else {
     $48 = $45; //@line 6684
     while (1) {
      $47 = $48 + -72 | 0; //@line 6686
      HEAP32[$13 >> 2] = $47; //@line 6687
      __THREW__ = 0; //@line 6688
      HEAP8[$$byval_copy1 >> 0] = HEAP8[$1 >> 0] | 0; //@line 6689
      invoke_viii(13, $$byval_copy1 | 0, $14 | 0, $47 | 0); //@line 6690
      $49 = __THREW__; //@line 6691
      __THREW__ = 0; //@line 6691
      if ($49 & 1) {
       label = 23; //@line 6694
       break;
      }
      $48 = HEAP32[$13 >> 2] | 0; //@line 6697
      if (($48 | 0) == ($43 | 0)) {
       label = 24; //@line 6700
       break;
      }
     }
     if ((label | 0) == 23) {
      $53 = ___cxa_find_matching_catch_3(0) | 0; //@line 6707
      ___clang_call_terminate($53); //@line 6709
     } else if ((label | 0) == 24) {
      $55 = HEAP32[$10 >> 2] | 0; //@line 6714
      break;
     }
    }
   } while (0);
   __ZdlPv($55); //@line 6719
  }
  if ((HEAP8[$12 >> 0] | 0) >= 0) {
   ___resumeException($38 | 0); //@line 6724
  }
  __ZdlPv(HEAP32[$11 >> 2] | 0); //@line 6728
  ___resumeException($38 | 0); //@line 6729
 } else if ((label | 0) == 30) {
  $$1 = (HEAP32[$3 >> 2] | 0) + ($$01032 * 104 | 0) | 0; //@line 6735
  STACKTOP = sp; //@line 6736
  return $$1 | 0; //@line 6736
 } else if ((label | 0) == 31) {
  STACKTOP = sp; //@line 6739
  return $$1 | 0; //@line 6739
 }
 return 0; //@line 6741
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$021$i$i = 0, $$040 = 0, $17 = 0, $24 = 0, $25 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $5 = 0, $50 = 0, $51 = 0, $58 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 51191
 STACKTOP = STACKTOP + 16 | 0; //@line 51192
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 51192
 $3 = sp + 12 | 0; //@line 51193
 $4 = sp; //@line 51194
 $5 = $0 + 8 | 0; //@line 51195
 $6 = $5 + 3 | 0; //@line 51196
 $7 = HEAP8[$6 >> 0] | 0; //@line 51197
 $8 = $7 << 24 >> 24 < 0; //@line 51198
 if ($8) {
  $63 = HEAP32[$0 + 4 >> 2] | 0; //@line 51205
  $64 = (HEAP32[$5 >> 2] & 2147483647) + -1 | 0; //@line 51205
 } else {
  $63 = $7 & 255; //@line 51208
  $64 = 1; //@line 51208
 }
 $17 = $2 - $1 >> 2; //@line 51213
 do {
  if ($17 | 0) {
   if ($8) {
    $24 = HEAP32[$0 >> 2] | 0; //@line 51221
    $25 = HEAP32[$0 + 4 >> 2] | 0; //@line 51221
   } else {
    $24 = $0; //@line 51224
    $25 = $7 & 255; //@line 51224
   }
   if (!(__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($1, $24, $24 + ($25 << 2) | 0) | 0)) {
    if (($64 - $63 | 0) >>> 0 < $17 >>> 0) {
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0, $64, $63 + $17 - $64 | 0, $63, $63, 0, 0); //@line 51234
    }
    if ((HEAP8[$6 >> 0] | 0) < 0) {
     $72 = HEAP32[$0 >> 2] | 0; //@line 51240
    } else {
     $72 = $0; //@line 51242
    }
    $$0 = $72 + ($63 << 2) | 0; //@line 51245
    $$040 = $1; //@line 51245
    while (1) {
     if (($$040 | 0) == ($2 | 0)) {
      break;
     }
     __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $$040); //@line 51251
     $$0 = $$0 + 4 | 0; //@line 51254
     $$040 = $$040 + 4 | 0; //@line 51254
    }
    HEAP32[$3 >> 2] = 0; //@line 51256
    __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $3); //@line 51257
    $76 = $63 + $17 | 0; //@line 51258
    if ((HEAP8[$6 >> 0] | 0) < 0) {
     HEAP32[$0 + 4 >> 2] = $76; //@line 51263
     break;
    } else {
     HEAP8[$6 >> 0] = $76; //@line 51267
     break;
    }
   }
   HEAP32[$4 >> 2] = 0; //@line 51271
   HEAP32[$4 + 4 >> 2] = 0; //@line 51271
   HEAP32[$4 + 8 >> 2] = 0; //@line 51271
   if ($17 >>> 0 > 1073741807) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4); //@line 51274
   }
   do {
    if ($17 >>> 0 < 2) {
     HEAP8[$4 + 8 + 3 >> 0] = $17; //@line 51283
     $$0$i$i = $1; //@line 51284
     $$021$i$i = $4; //@line 51284
    } else {
     $33 = $17 + 4 & -4; //@line 51287
     if ($33 >>> 0 <= 1073741823) {
      $41 = __Znwj($33 << 2) | 0; //@line 51291
      HEAP32[$4 >> 2] = $41; //@line 51292
      HEAP32[$4 + 8 >> 2] = $33 | -2147483648; //@line 51295
      HEAP32[$4 + 4 >> 2] = $17; //@line 51297
      $$0$i$i = $1; //@line 51298
      $$021$i$i = $41; //@line 51298
      break;
     }
     $35 = ___cxa_allocate_exception(8) | 0; //@line 51301
     __THREW__ = 0; //@line 51302
     invoke_vii(119, $35 | 0, 31992); //@line 51303
     $36 = __THREW__; //@line 51304
     __THREW__ = 0; //@line 51304
     if ($36 & 1) {
      $38 = ___cxa_find_matching_catch_2() | 0; //@line 51307
      ___cxa_free_exception($35 | 0); //@line 51309
      ___resumeException($38 | 0); //@line 51310
     } else {
      HEAP32[$35 >> 2] = 13224; //@line 51313
      ___cxa_throw($35 | 0, 2856, 240); //@line 51314
     }
    }
   } while (0);
   while (1) {
    if (($$0$i$i | 0) == ($2 | 0)) {
     break;
    }
    __ZNSt3__211char_traitsIwE6assignERwRKw($$021$i$i, $$0$i$i); //@line 51324
    $$0$i$i = $$0$i$i + 4 | 0; //@line 51327
    $$021$i$i = $$021$i$i + 4 | 0; //@line 51327
   }
   HEAP32[$3 >> 2] = 0; //@line 51329
   __ZNSt3__211char_traitsIwE6assignERwRKw($$021$i$i, $3); //@line 51330
   $50 = HEAP8[$4 + 8 + 3 >> 0] | 0; //@line 51333
   $51 = $50 << 24 >> 24 < 0; //@line 51334
   __THREW__ = 0; //@line 51341
   invoke_iiii(46, $0 | 0, ($51 ? HEAP32[$4 >> 2] | 0 : $4) | 0, ($51 ? HEAP32[$4 + 4 >> 2] | 0 : $50 & 255) | 0) | 0; //@line 51342
   $58 = __THREW__; //@line 51343
   __THREW__ = 0; //@line 51343
   if ($58 & 1) {
    $60 = ___cxa_find_matching_catch_2() | 0; //@line 51346
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4); //@line 51348
    ___resumeException($60 | 0); //@line 51349
   } else {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4); //@line 51352
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 51357
 return $0 | 0; //@line 51357
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100 = 0, $$194 = 0, $$2102 = 0, $$598 = 0, $$lcssa148$sink = 0, $$pre142 = 0, $21 = 0, $22 = 0, $33 = 0, $43 = 0, $47 = 0, $49 = 0, $56 = 0, $70 = 0, $76 = 0, $78 = 0, $80 = 0, $86 = 0, $89 = 0, label = 0;
 $$pre142 = $1; //@line 57074
 if (!($4 & 4)) {
  $$0100 = 0; //@line 57076
  $$194 = $0; //@line 57076
 } else {
  if (($$pre142 - $0 | 0) > 2) {
   if ((HEAP8[$0 >> 0] | 0) == -17) {
    if ((HEAP8[$0 + 1 >> 0] | 0) == -69) {
     $$0100 = 0; //@line 57094
     $$194 = (HEAP8[$0 + 2 >> 0] | 0) == -65 ? $0 + 3 | 0 : $0; //@line 57094
    } else {
     $$0100 = 0; //@line 57096
     $$194 = $0; //@line 57096
    }
   } else {
    $$0100 = 0; //@line 57099
    $$194 = $0; //@line 57099
   }
  } else {
   $$0100 = 0; //@line 57102
   $$194 = $0; //@line 57102
  }
 }
 L6 : while (1) {
  if (!($$0100 >>> 0 < $2 >>> 0 & $$194 >>> 0 < $1 >>> 0)) {
   label = 33; //@line 57110
   break;
  }
  $21 = HEAP8[$$194 >> 0] | 0; //@line 57113
  $22 = $21 & 255; //@line 57114
  if ($22 >>> 0 > $3 >>> 0) {
   label = 33; //@line 57117
   break;
  }
  do {
   if ($21 << 24 >> 24 > -1) {
    $$2102 = $$0100; //@line 57124
    $$598 = $$194 + 1 | 0; //@line 57124
   } else {
    if (($21 & 255) < 194) {
     label = 33; //@line 57128
     break L6;
    }
    if (($21 & 255) < 224) {
     if (($$pre142 - $$194 | 0) < 2) {
      label = 33; //@line 57137
      break L6;
     }
     $33 = HEAPU8[$$194 + 1 >> 0] | 0; //@line 57142
     if (($33 & 192 | 0) != 128) {
      label = 33; //@line 57146
      break L6;
     }
     if (($33 & 63 | $22 << 6 & 1984) >>> 0 > $3 >>> 0) {
      label = 33; //@line 57156
      break L6;
     } else {
      $$2102 = $$0100; //@line 57159
      $$598 = $$194 + 2 | 0; //@line 57159
      break;
     }
    }
    if (($21 & 255) < 240) {
     $43 = $$194; //@line 57165
     if (($$pre142 - $43 | 0) < 3) {
      label = 33; //@line 57169
      break L6;
     }
     $47 = HEAP8[$$194 + 1 >> 0] | 0; //@line 57173
     $49 = HEAP8[$$194 + 2 >> 0] | 0; //@line 57175
     switch ($21 << 24 >> 24) {
     case -32:
      {
       if (($47 & -32) << 24 >> 24 != -96) {
        $$lcssa148$sink = $43; //@line 57181
        break L6;
       }
       break;
      }
     case -19:
      {
       if (($47 & -32) << 24 >> 24 != -128) {
        $$lcssa148$sink = $43; //@line 57190
        break L6;
       }
       break;
      }
     default:
      {
       if (($47 & -64) << 24 >> 24 != -128) {
        $$lcssa148$sink = $43; //@line 57199
        break L6;
       }
      }
     }
     $56 = $49 & 255; //@line 57204
     if (($56 & 192 | 0) != 128) {
      label = 33; //@line 57208
      break L6;
     }
     if ((($47 & 63) << 6 | $22 << 12 & 61440 | $56 & 63) >>> 0 > $3 >>> 0) {
      label = 33; //@line 57222
      break L6;
     } else {
      $$2102 = $$0100; //@line 57225
      $$598 = $$194 + 3 | 0; //@line 57225
      break;
     }
    }
    if (($21 & 255) >= 245) {
     label = 33; //@line 57231
     break L6;
    }
    $70 = $$194; //@line 57234
    if (($2 - $$0100 | 0) >>> 0 < 2 | ($$pre142 - $70 | 0) < 4) {
     label = 33; //@line 57241
     break L6;
    }
    $76 = HEAP8[$$194 + 1 >> 0] | 0; //@line 57245
    $78 = HEAP8[$$194 + 2 >> 0] | 0; //@line 57247
    $80 = HEAP8[$$194 + 3 >> 0] | 0; //@line 57249
    switch ($21 << 24 >> 24) {
    case -16:
     {
      if (($76 + 112 & 255) >= 48) {
       $$lcssa148$sink = $70; //@line 57255
       break L6;
      }
      break;
     }
    case -12:
     {
      if (($76 & -16) << 24 >> 24 != -128) {
       $$lcssa148$sink = $70; //@line 57264
       break L6;
      }
      break;
     }
    default:
     {
      if (($76 & -64) << 24 >> 24 != -128) {
       $$lcssa148$sink = $70; //@line 57273
       break L6;
      }
     }
    }
    $86 = $78 & 255; //@line 57278
    if (($86 & 192 | 0) != 128) {
     label = 33; //@line 57282
     break L6;
    }
    $89 = $80 & 255; //@line 57285
    if (($89 & 192 | 0) != 128) {
     label = 33; //@line 57289
     break L6;
    }
    if ((($76 & 63) << 12 | $22 << 18 & 1835008 | $86 << 6 & 4032 | $89 & 63) >>> 0 > $3 >>> 0) {
     label = 33; //@line 57307
     break L6;
    } else {
     $$2102 = $$0100 + 1 | 0; //@line 57310
     $$598 = $$194 + 4 | 0; //@line 57310
    }
   }
  } while (0);
  $$0100 = $$2102 + 1 | 0; //@line 57315
  $$194 = $$598; //@line 57315
 }
 if ((label | 0) == 33) {
  $$lcssa148$sink = $$194; //@line 57319
 }
 return $$lcssa148$sink - $0 | 0; //@line 57323
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$pre$phi46Z2D = 0, $$pre$phi48Z2D = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $44 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 37420
 STACKTOP = STACKTOP + 16 | 0; //@line 37421
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 37421
 $6 = sp + 12 | 0; //@line 37422
 $7 = sp; //@line 37423
 $8 = HEAP32[$0 >> 2] | 0; //@line 37424
 L1 : do {
  if (!$8) {
   $$sroa$0$2 = 0; //@line 37428
  } else {
   $10 = $3; //@line 37430
   $11 = $1; //@line 37431
   $13 = $10 - $11 >> 2; //@line 37433
   $14 = $4 + 12 | 0; //@line 37434
   $15 = HEAP32[$14 >> 2] | 0; //@line 37435
   $$0 = ($15 | 0) > ($13 | 0) ? $15 - $13 | 0 : 0; //@line 37438
   $18 = $2; //@line 37439
   $19 = $18 - $11 | 0; //@line 37440
   $20 = $19 >> 2; //@line 37441
   if (($19 | 0) > 0) {
    if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] & 63]($8, $1, $20) | 0) != ($20 | 0)) {
     HEAP32[$0 >> 2] = 0; //@line 37450
     $$sroa$0$2 = 0; //@line 37451
     break;
    }
   }
   do {
    if (($$0 | 0) > 0) {
     HEAP32[$7 >> 2] = 0; //@line 37458
     HEAP32[$7 + 4 >> 2] = 0; //@line 37458
     HEAP32[$7 + 8 >> 2] = 0; //@line 37458
     if ($$0 >>> 0 > 1073741807) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($7); //@line 37461
     }
     do {
      if ($$0 >>> 0 < 2) {
       $32 = $7 + 8 + 3 | 0; //@line 37469
       HEAP8[$32 >> 0] = $$0; //@line 37470
       $$0$i$i = $7; //@line 37471
       $$pre$phi46Z2D = $32; //@line 37471
       $$pre$phi48Z2D = $7; //@line 37471
      } else {
       $34 = $$0 + 4 & -4; //@line 37474
       if ($34 >>> 0 <= 1073741823) {
        $42 = __Znwj($34 << 2) | 0; //@line 37478
        HEAP32[$7 >> 2] = $42; //@line 37479
        $44 = $7 + 8 | 0; //@line 37481
        HEAP32[$44 >> 2] = $34 | -2147483648; //@line 37482
        HEAP32[$7 + 4 >> 2] = $$0; //@line 37484
        $$0$i$i = $42; //@line 37486
        $$pre$phi46Z2D = $44 + 3 | 0; //@line 37486
        $$pre$phi48Z2D = $7; //@line 37486
        break;
       }
       $36 = ___cxa_allocate_exception(8) | 0; //@line 37489
       __THREW__ = 0; //@line 37490
       invoke_vii(119, $36 | 0, 31992); //@line 37491
       $37 = __THREW__; //@line 37492
       __THREW__ = 0; //@line 37492
       if ($37 & 1) {
        $39 = ___cxa_find_matching_catch_2() | 0; //@line 37495
        ___cxa_free_exception($36 | 0); //@line 37497
        ___resumeException($39 | 0); //@line 37498
       } else {
        HEAP32[$36 >> 2] = 13224; //@line 37501
        ___cxa_throw($36 | 0, 2856, 240); //@line 37502
       }
      }
     } while (0);
     __ZNSt3__211char_traitsIwE6assignEPwjw($$0$i$i, $$0, $5) | 0; //@line 37507
     HEAP32[$6 >> 2] = 0; //@line 37509
     __ZNSt3__211char_traitsIwE6assignERwRKw($$0$i$i + ($$0 << 2) | 0, $6); //@line 37510
     __THREW__ = 0; //@line 37518
     $54 = invoke_iiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0, $8 | 0, ((HEAP8[$$pre$phi46Z2D >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $$pre$phi48Z2D) | 0, $$0 | 0) | 0; //@line 37519
     $55 = __THREW__; //@line 37520
     __THREW__ = 0; //@line 37520
     if ($55 & 1) {
      $58 = ___cxa_find_matching_catch_2() | 0; //@line 37523
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7); //@line 37525
      ___resumeException($58 | 0); //@line 37526
     }
     if (($54 | 0) == ($$0 | 0)) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7); //@line 37531
      break;
     } else {
      HEAP32[$0 >> 2] = 0; //@line 37534
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7); //@line 37535
      $$sroa$0$2 = 0; //@line 37536
      break L1;
     }
    }
   } while (0);
   $60 = $10 - $18 | 0; //@line 37541
   $61 = $60 >> 2; //@line 37542
   if (($60 | 0) > 0) {
    if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] & 63]($8, $2, $61) | 0) != ($61 | 0)) {
     HEAP32[$0 >> 2] = 0; //@line 37551
     $$sroa$0$2 = 0; //@line 37552
     break;
    }
   }
   HEAP32[$14 >> 2] = 0; //@line 37556
   $$sroa$0$2 = $8; //@line 37557
  }
 } while (0);
 STACKTOP = sp; //@line 37560
 return $$sroa$0$2 | 0; //@line 37560
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$013$0 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $61 = 0, $62 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 36562
 STACKTOP = STACKTOP + 16 | 0; //@line 36563
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 36563
 $$byval_copy = sp + 4 | 0; //@line 36564
 $5 = sp; //@line 36565
 L1 : do {
  if (!(HEAP32[$2 + 4 >> 2] & 1)) {
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 36574
   HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 36576
   $14 = $4 & 1; //@line 36577
   HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 36578
   $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$12 & 31]($0, $$byval_copy, $2, $3, $14) | 0; //@line 36580
  } else {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 36582
   __THREW__ = 0; //@line 36583
   $16 = invoke_iii(63, $$byval_copy | 0, 35552) | 0; //@line 36584
   $17 = __THREW__; //@line 36585
   __THREW__ = 0; //@line 36585
   do {
    if ($17 & 1) {
     $39 = ___cxa_find_matching_catch_2() | 0; //@line 36589
     $40 = tempRet0; //@line 36590
     __ZNSt3__26localeD2Ev($$byval_copy); //@line 36591
     $$0 = $40; //@line 36592
     $$011 = $39; //@line 36592
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy); //@line 36594
     $19 = HEAP32[$16 >> 2] | 0; //@line 36595
     if ($4) {
      FUNCTION_TABLE_vii[HEAP32[$19 + 24 >> 2] & 255]($$byval_copy, $16); //@line 36599
     } else {
      FUNCTION_TABLE_vii[HEAP32[$19 + 28 >> 2] & 255]($$byval_copy, $16); //@line 36603
     }
     $25 = $$byval_copy + 8 + 3 | 0; //@line 36606
     $26 = HEAP8[$25 >> 0] | 0; //@line 36607
     $28 = HEAP32[$$byval_copy >> 2] | 0; //@line 36609
     $29 = $$byval_copy + 4 | 0; //@line 36611
     $$sroa$013$0 = $26 << 24 >> 24 < 0 ? $28 : $$byval_copy; //@line 36612
     $30 = $26; //@line 36612
     $34 = $28; //@line 36612
     while (1) {
      $31 = $30 << 24 >> 24 < 0; //@line 36614
      if (($$sroa$013$0 | 0) == (($31 ? $34 : $$byval_copy) + (($31 ? HEAP32[$29 >> 2] | 0 : $30 & 255) << 2) | 0)) {
       label = 9; //@line 36622
       break;
      }
      $41 = HEAP32[$$sroa$013$0 >> 2] | 0; //@line 36625
      $42 = HEAP32[$1 >> 2] | 0; //@line 36626
      if ($42 | 0) {
       $44 = $42 + 24 | 0; //@line 36629
       $45 = HEAP32[$44 >> 2] | 0; //@line 36630
       if (($45 | 0) == (HEAP32[$42 + 28 >> 2] | 0)) {
        $51 = HEAP32[(HEAP32[$42 >> 2] | 0) + 52 >> 2] | 0; //@line 36637
        $52 = __ZNSt3__211char_traitsIwE11to_int_typeEw($41) | 0; //@line 36638
        __THREW__ = 0; //@line 36639
        $53 = invoke_iii($51 | 0, $42 | 0, $52 | 0) | 0; //@line 36640
        $54 = __THREW__; //@line 36641
        __THREW__ = 0; //@line 36641
        if ($54 & 1) {
         label = 18; //@line 36644
         break;
        } else {
         $$0$i$i = $53; //@line 36647
        }
       } else {
        HEAP32[$44 >> 2] = $45 + 4; //@line 36651
        HEAP32[$45 >> 2] = $41; //@line 36652
        $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($41) | 0; //@line 36654
       }
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 36659
       }
      }
      $$sroa$013$0 = $$sroa$013$0 + 4 | 0; //@line 36665
      $30 = HEAP8[$25 >> 0] | 0; //@line 36665
      $34 = HEAP32[$$byval_copy >> 2] | 0; //@line 36665
     }
     if ((label | 0) == 9) {
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 36668
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy); //@line 36669
      $$sroa$0$0 = $$sroa$0$0$copyload; //@line 36670
      break L1;
     } else if ((label | 0) == 18) {
      $61 = ___cxa_find_matching_catch_2() | 0; //@line 36674
      $62 = tempRet0; //@line 36675
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy); //@line 36676
      $$0 = $62; //@line 36677
      $$011 = $61; //@line 36677
      break;
     }
    }
   } while (0);
   ___resumeException($$011 | 0); //@line 36682
  }
 } while (0);
 STACKTOP = sp; //@line 36686
 return $$sroa$0$0 | 0; //@line 36686
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$013$0 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $60 = 0, $61 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 34736
 STACKTOP = STACKTOP + 16 | 0; //@line 34737
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 34737
 $$byval_copy = sp + 4 | 0; //@line 34738
 $5 = sp; //@line 34739
 L1 : do {
  if (!(HEAP32[$2 + 4 >> 2] & 1)) {
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 34748
   HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 34750
   $14 = $4 & 1; //@line 34751
   HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 34752
   $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$12 & 31]($0, $$byval_copy, $2, $3, $14) | 0; //@line 34754
  } else {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 34756
   __THREW__ = 0; //@line 34757
   $16 = invoke_iii(63, $$byval_copy | 0, 35528) | 0; //@line 34758
   $17 = __THREW__; //@line 34759
   __THREW__ = 0; //@line 34759
   do {
    if ($17 & 1) {
     $38 = ___cxa_find_matching_catch_2() | 0; //@line 34763
     $39 = tempRet0; //@line 34764
     __ZNSt3__26localeD2Ev($$byval_copy); //@line 34765
     $$0 = $39; //@line 34766
     $$011 = $38; //@line 34766
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy); //@line 34768
     $19 = HEAP32[$16 >> 2] | 0; //@line 34769
     if ($4) {
      FUNCTION_TABLE_vii[HEAP32[$19 + 24 >> 2] & 255]($$byval_copy, $16); //@line 34773
     } else {
      FUNCTION_TABLE_vii[HEAP32[$19 + 28 >> 2] & 255]($$byval_copy, $16); //@line 34777
     }
     $24 = $$byval_copy + 11 | 0; //@line 34779
     $25 = HEAP8[$24 >> 0] | 0; //@line 34780
     $27 = HEAP32[$$byval_copy >> 2] | 0; //@line 34782
     $28 = $$byval_copy + 4 | 0; //@line 34784
     $$sroa$013$0 = $25 << 24 >> 24 < 0 ? $27 : $$byval_copy; //@line 34785
     $29 = $25; //@line 34785
     $33 = $27; //@line 34785
     while (1) {
      $30 = $29 << 24 >> 24 < 0; //@line 34787
      if (($$sroa$013$0 | 0) == (($30 ? $33 : $$byval_copy) + ($30 ? HEAP32[$28 >> 2] | 0 : $29 & 255) | 0)) {
       label = 9; //@line 34795
       break;
      }
      $40 = HEAP8[$$sroa$013$0 >> 0] | 0; //@line 34798
      $41 = HEAP32[$1 >> 2] | 0; //@line 34799
      if ($41 | 0) {
       $43 = $41 + 24 | 0; //@line 34802
       $44 = HEAP32[$43 >> 2] | 0; //@line 34803
       if (($44 | 0) == (HEAP32[$41 + 28 >> 2] | 0)) {
        $50 = HEAP32[(HEAP32[$41 >> 2] | 0) + 52 >> 2] | 0; //@line 34810
        $51 = __ZNSt3__211char_traitsIcE11to_int_typeEc($40) | 0; //@line 34811
        __THREW__ = 0; //@line 34812
        $52 = invoke_iii($50 | 0, $41 | 0, $51 | 0) | 0; //@line 34813
        $53 = __THREW__; //@line 34814
        __THREW__ = 0; //@line 34814
        if ($53 & 1) {
         label = 18; //@line 34817
         break;
        } else {
         $$0$i$i = $52; //@line 34820
        }
       } else {
        HEAP32[$43 >> 2] = $44 + 1; //@line 34824
        HEAP8[$44 >> 0] = $40; //@line 34825
        $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($40) | 0; //@line 34827
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0; //@line 34832
       }
      }
      $$sroa$013$0 = $$sroa$013$0 + 1 | 0; //@line 34838
      $29 = HEAP8[$24 >> 0] | 0; //@line 34838
      $33 = HEAP32[$$byval_copy >> 2] | 0; //@line 34838
     }
     if ((label | 0) == 9) {
      $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0; //@line 34841
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy); //@line 34842
      $$sroa$0$0 = $$sroa$0$0$copyload; //@line 34843
      break L1;
     } else if ((label | 0) == 18) {
      $60 = ___cxa_find_matching_catch_2() | 0; //@line 34847
      $61 = tempRet0; //@line 34848
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy); //@line 34849
      $$0 = $61; //@line 34850
      $$011 = $60; //@line 34850
      break;
     }
    }
   } while (0);
   ___resumeException($$011 | 0); //@line 34855
  }
 } while (0);
 STACKTOP = sp; //@line 34859
 return $$sroa$0$0 | 0; //@line 34859
}
function __ZN6Parser19parseNumberFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$65$0$$sroa_idx6 = 0, $$sroa$7$0 = 0.0, $$sroa$7$0$$sroa_idx9 = 0, $11 = 0, $13 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1157
 STACKTOP = STACKTOP + 16 | 0; //@line 1158
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1158
 $$byval_copy = sp + 1 | 0; //@line 1159
 $3 = sp; //@line 1160
 $4 = $0 + 4 | 0; //@line 1161
 HEAP32[$4 >> 2] = 0; //@line 1162
 HEAP32[$4 + 4 >> 2] = 0; //@line 1162
 HEAP32[$4 + 8 >> 2] = 0; //@line 1162
 $5 = $0 + 40 | 0; //@line 1163
 HEAP32[$5 >> 2] = 0; //@line 1164
 HEAP32[$5 + 4 >> 2] = 0; //@line 1164
 HEAP32[$5 + 8 >> 2] = 0; //@line 1164
 HEAP32[$5 + 12 >> 2] = 0; //@line 1164
 HEAP32[$5 + 16 >> 2] = 0; //@line 1164
 HEAP32[$5 + 20 >> 2] = 0; //@line 1164
 HEAP32[$0 >> 2] = 2; //@line 1165
 if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($2, 46, 0) | 0) == -1) {
  __THREW__ = 0; //@line 1169
  $38 = invoke_iiii(38, $2 | 0, 0, 10) | 0; //@line 1170
  $39 = tempRet0; //@line 1171
  $40 = __THREW__; //@line 1172
  __THREW__ = 0; //@line 1172
  if (!($40 & 1)) {
   $$sroa$0$0 = 0; //@line 1175
   $$sroa$7$0 = 0.0; //@line 1175
   $44 = $38; //@line 1175
   $47 = $39; //@line 1175
   $$sroa$0$0$$sroa_idx = $0 + 16 | 0; //@line 1176
   HEAP32[$$sroa$0$0$$sroa_idx >> 2] = $$sroa$0$0; //@line 1177
   $$sroa$65$0$$sroa_idx6 = $0 + 24 | 0; //@line 1178
   $42 = $$sroa$65$0$$sroa_idx6; //@line 1179
   $43 = $42; //@line 1180
   HEAP32[$43 >> 2] = $44; //@line 1181
   $45 = $42 + 4 | 0; //@line 1182
   $46 = $45; //@line 1183
   HEAP32[$46 >> 2] = $47; //@line 1184
   $$sroa$7$0$$sroa_idx9 = $0 + 32 | 0; //@line 1185
   HEAPF64[$$sroa$7$0$$sroa_idx9 >> 3] = $$sroa$7$0; //@line 1186
   STACKTOP = sp; //@line 1187
   return;
  }
 } else {
  __THREW__ = 0; //@line 1190
  $8 = +invoke_dii(1, $2 | 0, 0); //@line 1191
  $9 = __THREW__; //@line 1192
  __THREW__ = 0; //@line 1192
  if (!($9 & 1)) {
   $$sroa$0$0 = 1; //@line 1195
   $$sroa$7$0 = $8; //@line 1195
   $44 = 0; //@line 1195
   $47 = 0; //@line 1195
   $$sroa$0$0$$sroa_idx = $0 + 16 | 0; //@line 1196
   HEAP32[$$sroa$0$0$$sroa_idx >> 2] = $$sroa$0$0; //@line 1197
   $$sroa$65$0$$sroa_idx6 = $0 + 24 | 0; //@line 1198
   $42 = $$sroa$65$0$$sroa_idx6; //@line 1199
   $43 = $42; //@line 1200
   HEAP32[$43 >> 2] = $44; //@line 1201
   $45 = $42 + 4 | 0; //@line 1202
   $46 = $45; //@line 1203
   HEAP32[$46 >> 2] = $47; //@line 1204
   $$sroa$7$0$$sroa_idx9 = $0 + 32 | 0; //@line 1205
   HEAPF64[$$sroa$7$0$$sroa_idx9 >> 3] = $$sroa$7$0; //@line 1206
   STACKTOP = sp; //@line 1207
   return;
  }
 }
 $11 = ___cxa_find_matching_catch_2() | 0; //@line 1210
 $13 = $0 + 52 | 0; //@line 1212
 if ((HEAP8[$13 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$13 >> 2] | 0); //@line 1218
 }
 $18 = $0 + 40 | 0; //@line 1220
 $19 = HEAP32[$18 >> 2] | 0; //@line 1221
 if ($19 | 0) {
  $21 = $0 + 44 | 0; //@line 1224
  $22 = HEAP32[$21 >> 2] | 0; //@line 1225
  do {
   if (($22 | 0) == ($19 | 0)) {
    $33 = $19; //@line 1229
   } else {
    $24 = $0 + 48 | 0; //@line 1231
    $26 = $22; //@line 1232
    while (1) {
     $25 = $26 + -72 | 0; //@line 1234
     HEAP32[$21 >> 2] = $25; //@line 1235
     __THREW__ = 0; //@line 1236
     HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 1237
     invoke_viii(13, $$byval_copy | 0, $24 | 0, $25 | 0); //@line 1238
     $27 = __THREW__; //@line 1239
     __THREW__ = 0; //@line 1239
     if ($27 & 1) {
      label = 10; //@line 1242
      break;
     }
     $26 = HEAP32[$21 >> 2] | 0; //@line 1245
     if (($26 | 0) == ($19 | 0)) {
      label = 11; //@line 1248
      break;
     }
    }
    if ((label | 0) == 10) {
     $31 = ___cxa_find_matching_catch_3(0) | 0; //@line 1255
     ___clang_call_terminate($31); //@line 1257
    } else if ((label | 0) == 11) {
     $33 = HEAP32[$18 >> 2] | 0; //@line 1262
     break;
    }
   }
  } while (0);
  __ZdlPv($33); //@line 1267
 }
 if ((HEAP8[$4 + 11 >> 0] | 0) >= 0) {
  ___resumeException($11 | 0); //@line 1273
 }
 __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 1277
 ___resumeException($11 | 0); //@line 1278
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEEC2ERKS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i13 = 0, $$0$i$i22 = 0, $$08$i$i = 0, $$sink1 = 0, $$sink2 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $51 = 0, $53 = 0, $7 = 0, $8 = 0, label = 0;
 HEAP32[$0 >> 2] = 0; //@line 2720
 $2 = $0 + 4 | 0; //@line 2721
 HEAP32[$2 >> 2] = 0; //@line 2722
 HEAP32[$0 + 8 >> 2] = 0; //@line 2724
 $4 = $1 + 4 | 0; //@line 2725
 $7 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0; //@line 2728
 $8 = ($7 | 0) / 72 | 0; //@line 2729
 if (!$7) {
  return;
 }
 if ($8 >>> 0 > 59652323) {
  __THREW__ = 0; //@line 2736
  invoke_vi(254, $0 | 0); //@line 2737
  __THREW__ = 0; //@line 2738
 } else {
  __THREW__ = 0; //@line 2740
  $12 = invoke_ii(142, $7 | 0) | 0; //@line 2741
  $13 = __THREW__; //@line 2742
  __THREW__ = 0; //@line 2742
  if (!($13 & 1)) {
   HEAP32[$2 >> 2] = $12; //@line 2745
   HEAP32[$0 >> 2] = $12; //@line 2746
   HEAP32[$0 + 8 >> 2] = $12 + ($8 * 72 | 0); //@line 2749
   $17 = HEAP32[$1 >> 2] | 0; //@line 2750
   $18 = HEAP32[$4 >> 2] | 0; //@line 2751
   if (($17 | 0) == ($18 | 0)) {
    return;
   } else {
    $$0$i$i22 = $17; //@line 2756
    $21 = $12; //@line 2756
   }
   while (1) {
    HEAP32[$21 >> 2] = HEAP32[$$0$i$i22 >> 2]; //@line 2760
    $22 = $21 + 4 | 0; //@line 2761
    __THREW__ = 0; //@line 2763
    invoke_vii(115, $22 | 0, $$0$i$i22 + 4 | 0); //@line 2764
    $24 = __THREW__; //@line 2765
    __THREW__ = 0; //@line 2765
    if ($24 & 1) {
     label = 14; //@line 2768
     break;
    }
    $26 = $21 + 16 | 0; //@line 2771
    $27 = $$0$i$i22 + 16 | 0; //@line 2772
    HEAP32[$26 >> 2] = HEAP32[$27 >> 2]; //@line 2773
    HEAP32[$26 + 4 >> 2] = HEAP32[$27 + 4 >> 2]; //@line 2773
    HEAP32[$26 + 8 >> 2] = HEAP32[$27 + 8 >> 2]; //@line 2773
    HEAP32[$26 + 12 >> 2] = HEAP32[$27 + 12 >> 2]; //@line 2773
    HEAP32[$26 + 16 >> 2] = HEAP32[$27 + 16 >> 2]; //@line 2773
    HEAP32[$26 + 20 >> 2] = HEAP32[$27 + 20 >> 2]; //@line 2773
    $28 = $21 + 40 | 0; //@line 2774
    __THREW__ = 0; //@line 2776
    invoke_vii(118, $28 | 0, $$0$i$i22 + 40 | 0); //@line 2777
    $30 = __THREW__; //@line 2778
    __THREW__ = 0; //@line 2778
    if ($30 & 1) {
     label = 9; //@line 2781
     break;
    }
    __THREW__ = 0; //@line 2786
    invoke_vii(115, $21 + 52 | 0, $$0$i$i22 + 52 | 0); //@line 2787
    $34 = __THREW__; //@line 2788
    __THREW__ = 0; //@line 2788
    if ($34 & 1) {
     label = 10; //@line 2791
     break;
    }
    HEAP16[$21 + 64 >> 1] = HEAP16[$$0$i$i22 + 64 >> 1] | 0; //@line 2797
    $$0$i$i22 = $$0$i$i22 + 72 | 0; //@line 2798
    $21 = (HEAP32[$2 >> 2] | 0) + 72 | 0; //@line 2800
    HEAP32[$2 >> 2] = $21; //@line 2801
    if (($$0$i$i22 | 0) == ($18 | 0)) {
     label = 17; //@line 2804
     break;
    }
   }
   if ((label | 0) == 9) {
    $36 = ___cxa_find_matching_catch_2() | 0; //@line 2811
    $$0$i$i13 = tempRet0; //@line 2813
    $$08$i$i = $36; //@line 2813
   } else if ((label | 0) == 10) {
    $38 = ___cxa_find_matching_catch_2() | 0; //@line 2816
    $39 = tempRet0; //@line 2817
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($28); //@line 2818
    $$0$i$i13 = $39; //@line 2819
    $$08$i$i = $38; //@line 2819
   } else if ((label | 0) == 14) {
    $51 = ___cxa_find_matching_catch_2() | 0; //@line 2822
    $$sink1 = tempRet0; //@line 2824
    $$sink2 = $51; //@line 2824
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($0); //@line 2825
    ___resumeException($$sink2 | 0); //@line 2826
   } else if ((label | 0) == 17) {
    return;
   }
   if ((HEAP8[$22 + 11 >> 0] | 0) >= 0) {
    $$sink1 = $$0$i$i13; //@line 2836
    $$sink2 = $$08$i$i; //@line 2836
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($0); //@line 2837
    ___resumeException($$sink2 | 0); //@line 2838
   }
   __ZdlPv(HEAP32[$22 >> 2] | 0); //@line 2842
   $$sink1 = $$0$i$i13; //@line 2843
   $$sink2 = $$08$i$i; //@line 2843
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($0); //@line 2844
   ___resumeException($$sink2 | 0); //@line 2845
  }
 }
 $53 = ___cxa_find_matching_catch_2() | 0; //@line 2849
 $$sink1 = tempRet0; //@line 2851
 $$sink2 = $53; //@line 2851
 __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($0); //@line 2852
 ___resumeException($$sink2 | 0); //@line 2853
}
function __ZN19PredefinedFunctions18addBuiltinFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvP6RunnerP13RunnerContextEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $$sink = 0, $15 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16397
 STACKTOP = STACKTOP + 48 | 0; //@line 16398
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 16398
 $3 = sp + 40 | 0; //@line 16399
 $4 = sp + 44 | 0; //@line 16400
 $5 = sp; //@line 16401
 $6 = $5 + 16 | 0; //@line 16402
 HEAP32[$6 >> 2] = 0; //@line 16403
 $7 = $5 + 24 | 0; //@line 16404
 HEAP32[$7 >> 2] = -1; //@line 16405
 $9 = HEAP32[$2 + 16 >> 2] | 0; //@line 16407
 do {
  if (!$9) {
   $$sink = 0; //@line 16411
   label = 5; //@line 16412
  } else {
   if (($2 | 0) == ($9 | 0)) {
    HEAP32[$6 >> 2] = $5; //@line 16416
    __THREW__ = 0; //@line 16420
    invoke_vii(HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0, $9 | 0, $5 | 0); //@line 16421
    $15 = __THREW__; //@line 16422
    __THREW__ = 0; //@line 16422
    if ($15 & 1) {
     break;
    } else {
     label = 6; //@line 16427
     break;
    }
   } else {
    __THREW__ = 0; //@line 16434
    $20 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0, $9 | 0) | 0; //@line 16435
    $21 = __THREW__; //@line 16436
    __THREW__ = 0; //@line 16436
    if ($21 & 1) {
     break;
    } else {
     $$sink = $20; //@line 16441
     label = 5; //@line 16442
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$6 >> 2] = $$sink; //@line 16449
  label = 6; //@line 16450
 }
 do {
  if ((label | 0) == 6) {
   HEAP32[$7 >> 2] = 1; //@line 16454
   $23 = $5 + 32 | 0; //@line 16455
   HEAP8[$23 >> 0] = 1; //@line 16456
   __THREW__ = 0; //@line 16457
   $24 = invoke_iii(62, $0 | 0, $1 | 0) | 0; //@line 16458
   $25 = __THREW__; //@line 16459
   __THREW__ = 0; //@line 16459
   if (!($25 & 1)) {
    $27 = $24 + 24 | 0; //@line 16462
    $28 = HEAP32[$27 >> 2] | 0; //@line 16463
    $30 = HEAP32[$7 >> 2] | 0; //@line 16465
    $31 = ($30 | 0) == -1; //@line 16466
    do {
     if (($28 | 0) == -1) {
      if ($31) {
       HEAP8[$24 + 32 >> 0] = HEAP8[$23 >> 0] | 0; //@line 16472
       STACKTOP = sp; //@line 16473
       return;
      } else {
       label = 14; //@line 16475
      }
     } else {
      if ($31) {
       __THREW__ = 0; //@line 16481
       invoke_vii(HEAP32[3088 + ($28 << 2) >> 2] | 0, $3 | 0, $24 | 0); //@line 16482
       $36 = __THREW__; //@line 16483
       __THREW__ = 0; //@line 16483
       if ($36 & 1) {
        $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 16486
        ___clang_call_terminate($38); //@line 16488
       } else {
        HEAP32[$27 >> 2] = -1; //@line 16491
        break;
       }
      } else {
       label = 14; //@line 16495
      }
     }
    } while (0);
    if ((label | 0) == 14) {
     HEAP32[$3 >> 2] = $24; //@line 16500
     __THREW__ = 0; //@line 16503
     invoke_viii(HEAP32[3096 + ($30 << 2) >> 2] | 0, $3 | 0, $24 | 0, $5 | 0); //@line 16504
     $42 = __THREW__; //@line 16505
     __THREW__ = 0; //@line 16505
     if ($42 & 1) {
      break;
     }
    }
    $$pr = HEAP32[$7 >> 2] | 0; //@line 16511
    HEAP8[$24 + 32 >> 0] = HEAP8[$23 >> 0] | 0; //@line 16514
    if (($$pr | 0) == -1) {
     STACKTOP = sp; //@line 16517
     return;
    }
    __THREW__ = 0; //@line 16521
    invoke_vii(HEAP32[3088 + ($$pr << 2) >> 2] | 0, $3 | 0, $5 | 0); //@line 16522
    $49 = __THREW__; //@line 16523
    __THREW__ = 0; //@line 16523
    if ($49 & 1) {
     $51 = ___cxa_find_matching_catch_3(0) | 0; //@line 16526
     ___clang_call_terminate($51); //@line 16528
    }
    STACKTOP = sp; //@line 16531
    return;
   }
  }
 } while (0);
 $53 = ___cxa_find_matching_catch_2() | 0; //@line 16535
 $55 = HEAP32[$7 >> 2] | 0; //@line 16537
 if (($55 | 0) == -1) {
  ___resumeException($53 | 0); //@line 16540
 }
 __THREW__ = 0; //@line 16545
 invoke_vii(HEAP32[3088 + ($55 << 2) >> 2] | 0, $4 | 0, $5 | 0); //@line 16546
 $59 = __THREW__; //@line 16547
 __THREW__ = 0; //@line 16547
 if ($59 & 1) {
  $61 = ___cxa_find_matching_catch_3(0) | 0; //@line 16550
  ___clang_call_terminate($61); //@line 16552
 }
 ___resumeException($53 | 0); //@line 16555
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$091 = 0, $$185 = 0, $$589 = 0, $$pre$sink = 0, $$pre136 = 0, $21 = 0, $22 = 0, $33 = 0, $43 = 0, $47 = 0, $49 = 0, $56 = 0, $70 = 0, $74 = 0, $76 = 0, $78 = 0, $84 = 0, $87 = 0, label = 0;
 $$pre136 = $1; //@line 55090
 if (!($4 & 4)) {
  $$091 = 0; //@line 55092
  $$185 = $0; //@line 55092
 } else {
  if (($$pre136 - $0 | 0) > 2) {
   if ((HEAP8[$0 >> 0] | 0) == -17) {
    if ((HEAP8[$0 + 1 >> 0] | 0) == -69) {
     $$091 = 0; //@line 55110
     $$185 = (HEAP8[$0 + 2 >> 0] | 0) == -65 ? $0 + 3 | 0 : $0; //@line 55110
    } else {
     $$091 = 0; //@line 55112
     $$185 = $0; //@line 55112
    }
   } else {
    $$091 = 0; //@line 55115
    $$185 = $0; //@line 55115
   }
  } else {
   $$091 = 0; //@line 55118
   $$185 = $0; //@line 55118
  }
 }
 L6 : while (1) {
  if (!($$091 >>> 0 < $2 >>> 0 & $$185 >>> 0 < $1 >>> 0)) {
   label = 34; //@line 55126
   break;
  }
  $21 = HEAP8[$$185 >> 0] | 0; //@line 55129
  $22 = $21 & 255; //@line 55130
  do {
   if ($21 << 24 >> 24 > -1) {
    if ($22 >>> 0 > $3 >>> 0) {
     label = 34; //@line 55136
     break L6;
    }
    $$589 = $$185 + 1 | 0; //@line 55140
   } else {
    if (($21 & 255) < 194) {
     label = 34; //@line 55144
     break L6;
    }
    if (($21 & 255) < 224) {
     if (($$pre136 - $$185 | 0) < 2) {
      label = 34; //@line 55153
      break L6;
     }
     $33 = HEAPU8[$$185 + 1 >> 0] | 0; //@line 55158
     if (($33 & 192 | 0) != 128) {
      label = 34; //@line 55162
      break L6;
     }
     if (($33 & 63 | $22 << 6 & 1984) >>> 0 > $3 >>> 0) {
      label = 34; //@line 55171
      break L6;
     }
     $$589 = $$185 + 2 | 0; //@line 55175
     break;
    }
    if (($21 & 255) < 240) {
     $43 = $$185; //@line 55180
     if (($$pre136 - $43 | 0) < 3) {
      label = 34; //@line 55184
      break L6;
     }
     $47 = HEAP8[$$185 + 1 >> 0] | 0; //@line 55188
     $49 = HEAP8[$$185 + 2 >> 0] | 0; //@line 55190
     switch ($21 << 24 >> 24) {
     case -32:
      {
       if (($47 & -32) << 24 >> 24 != -96) {
        $$pre$sink = $43; //@line 55196
        break L6;
       }
       break;
      }
     case -19:
      {
       if (($47 & -32) << 24 >> 24 != -128) {
        $$pre$sink = $43; //@line 55205
        break L6;
       }
       break;
      }
     default:
      {
       if (($47 & -64) << 24 >> 24 != -128) {
        $$pre$sink = $43; //@line 55214
        break L6;
       }
      }
     }
     $56 = $49 & 255; //@line 55219
     if (($56 & 192 | 0) != 128) {
      label = 34; //@line 55223
      break L6;
     }
     if ((($47 & 63) << 6 | $22 << 12 & 61440 | $56 & 63) >>> 0 > $3 >>> 0) {
      label = 34; //@line 55237
      break L6;
     } else {
      $$589 = $$185 + 3 | 0; //@line 55240
      break;
     }
    }
    if (($21 & 255) >= 245) {
     label = 34; //@line 55246
     break L6;
    }
    $70 = $$185; //@line 55249
    if (($$pre136 - $70 | 0) < 4) {
     label = 34; //@line 55253
     break L6;
    }
    $74 = HEAP8[$$185 + 1 >> 0] | 0; //@line 55257
    $76 = HEAP8[$$185 + 2 >> 0] | 0; //@line 55259
    $78 = HEAP8[$$185 + 3 >> 0] | 0; //@line 55261
    switch ($21 << 24 >> 24) {
    case -16:
     {
      if (($74 + 112 & 255) >= 48) {
       $$pre$sink = $70; //@line 55267
       break L6;
      }
      break;
     }
    case -12:
     {
      if (($74 & -16) << 24 >> 24 != -128) {
       $$pre$sink = $70; //@line 55276
       break L6;
      }
      break;
     }
    default:
     {
      if (($74 & -64) << 24 >> 24 != -128) {
       $$pre$sink = $70; //@line 55285
       break L6;
      }
     }
    }
    $84 = $76 & 255; //@line 55290
    if (($84 & 192 | 0) != 128) {
     label = 34; //@line 55294
     break L6;
    }
    $87 = $78 & 255; //@line 55297
    if (($87 & 192 | 0) != 128) {
     label = 34; //@line 55301
     break L6;
    }
    if ((($74 & 63) << 12 | $22 << 18 & 1835008 | $84 << 6 & 4032 | $87 & 63) >>> 0 > $3 >>> 0) {
     label = 34; //@line 55318
     break L6;
    } else {
     $$589 = $$185 + 4 | 0; //@line 55321
    }
   }
  } while (0);
  $$091 = $$091 + 1 | 0; //@line 55326
  $$185 = $$589; //@line 55326
 }
 if ((label | 0) == 34) {
  $$pre$sink = $$185; //@line 55330
 }
 return $$pre$sink - $0 | 0; //@line 55334
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$phi$trans$insert = 0, $$pre$phi26Z2D = 0, $$pre$phi28Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $65 = 0, $68 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 1077
 STACKTOP = STACKTOP + 16 | 0; //@line 1078
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1078
 $2 = sp; //@line 1079
 if (($1 | 0) == -1) {
  $$1 = 0; //@line 1082
  STACKTOP = sp; //@line 1083
  return $$1 | 0; //@line 1083
 }
 $4 = $0 + 12 | 0; //@line 1085
 $6 = $0 + 8 | 0; //@line 1087
 $8 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0; //@line 1089
 $9 = $0 + 24 | 0; //@line 1090
 $10 = HEAP32[$9 >> 2] | 0; //@line 1091
 $11 = $0 + 28 | 0; //@line 1092
 $12 = HEAP32[$11 >> 2] | 0; //@line 1093
 do {
  if (($10 | 0) == ($12 | 0)) {
   $14 = $0 + 48 | 0; //@line 1097
   if (!(HEAP32[$14 >> 2] & 16)) {
    $$1 = -1; //@line 1102
    STACKTOP = sp; //@line 1103
    return $$1 | 0; //@line 1103
   }
   $18 = $0 + 20 | 0; //@line 1105
   $19 = HEAP32[$18 >> 2] | 0; //@line 1106
   $21 = $10 - $19 | 0; //@line 1108
   $22 = $0 + 44 | 0; //@line 1109
   $24 = (HEAP32[$22 >> 2] | 0) - $19 | 0; //@line 1111
   $25 = $0 + 32 | 0; //@line 1112
   __THREW__ = 0; //@line 1113
   invoke_vii(116, $25 | 0, 0); //@line 1114
   $26 = __THREW__; //@line 1115
   __THREW__ = 0; //@line 1115
   if (!($26 & 1)) {
    $28 = $25 + 11 | 0; //@line 1118
    if ((HEAP8[$28 >> 0] | 0) < 0) {
     $34 = (HEAP32[$0 + 40 >> 2] & 2147483647) + -1 | 0; //@line 1126
    } else {
     $34 = 10; //@line 1128
    }
    __THREW__ = 0; //@line 1130
    invoke_viii(14, $25 | 0, $34 | 0, 0); //@line 1131
    $35 = __THREW__; //@line 1132
    __THREW__ = 0; //@line 1132
    if (!($35 & 1)) {
     $37 = HEAP8[$28 >> 0] | 0; //@line 1135
     if ($37 << 24 >> 24 < 0) {
      $44 = HEAP32[$25 >> 2] | 0; //@line 1141
      $45 = HEAP32[$0 + 36 >> 2] | 0; //@line 1141
     } else {
      $44 = $25; //@line 1144
      $45 = $37 & 255; //@line 1144
     }
     $43 = $44 + $45 | 0; //@line 1146
     HEAP32[$18 >> 2] = $44; //@line 1147
     HEAP32[$11 >> 2] = $43; //@line 1148
     $46 = $44 + $21 | 0; //@line 1149
     HEAP32[$9 >> 2] = $46; //@line 1150
     $47 = $44 + $24 | 0; //@line 1151
     HEAP32[$22 >> 2] = $47; //@line 1152
     $$pre$phi26Z2D = $22; //@line 1153
     $$pre$phi28Z2D = $14; //@line 1153
     $$pre$phiZ2D = $22; //@line 1153
     $51 = $46; //@line 1153
     $53 = $47; //@line 1153
     $68 = $43; //@line 1153
     break;
    }
   }
   $48 = ___cxa_find_matching_catch_3(0) | 0; //@line 1157
   ___cxa_begin_catch($48 | 0) | 0; //@line 1159
   ___cxa_end_catch(); //@line 1160
   $$1 = -1; //@line 1161
   STACKTOP = sp; //@line 1162
   return $$1 | 0; //@line 1162
  } else {
   $$phi$trans$insert = $0 + 44 | 0; //@line 1164
   $$pre$phi26Z2D = $$phi$trans$insert; //@line 1167
   $$pre$phi28Z2D = $0 + 48 | 0; //@line 1167
   $$pre$phiZ2D = $$phi$trans$insert; //@line 1167
   $51 = $10; //@line 1167
   $53 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 1167
   $68 = $12; //@line 1167
  }
 } while (0);
 $50 = $51 + 1 | 0; //@line 1170
 HEAP32[$2 >> 2] = $50; //@line 1171
 $55 = HEAP32[($50 >>> 0 < $53 >>> 0 ? $$pre$phiZ2D : $2) >> 2] | 0; //@line 1174
 HEAP32[$$pre$phi26Z2D >> 2] = $55; //@line 1175
 if (HEAP32[$$pre$phi28Z2D >> 2] & 8 | 0) {
  $59 = $0 + 32 | 0; //@line 1180
  if ((HEAP8[$59 + 11 >> 0] | 0) < 0) {
   $65 = HEAP32[$59 >> 2] | 0; //@line 1186
  } else {
   $65 = $59; //@line 1188
  }
  HEAP32[$6 >> 2] = $65; //@line 1191
  HEAP32[$4 >> 2] = $65 + $8; //@line 1192
  HEAP32[$0 + 16 >> 2] = $55; //@line 1194
 }
 if (($51 | 0) == ($68 | 0)) {
  $$1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] & 127]($0, $1 & 255) | 0; //@line 1203
  STACKTOP = sp; //@line 1204
  return $$1 | 0; //@line 1204
 } else {
  HEAP32[$9 >> 2] = $50; //@line 1207
  HEAP8[$51 >> 0] = $1; //@line 1208
  $$1 = $1 & 255; //@line 1210
  STACKTOP = sp; //@line 1211
  return $$1 | 0; //@line 1211
 }
 return 0; //@line 1213
}
function __ZNSt3__210__stdinbufIcE9__getcharEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $5 = 0, $51 = 0, $6 = 0, $61 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22040
 STACKTOP = STACKTOP + 32 | 0; //@line 22041
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 22041
 $2 = sp + 16 | 0; //@line 22042
 $3 = sp + 8 | 0; //@line 22043
 $4 = sp + 4 | 0; //@line 22044
 $5 = sp; //@line 22045
 $6 = $0 + 52 | 0; //@line 22046
 if (!(HEAP8[$6 >> 0] | 0)) {
  $13 = HEAP32[$0 + 44 >> 2] | 0; //@line 22051
  $$sroa$speculated = ($13 | 0) > 1 ? $13 : 1; //@line 22053
  $15 = $0 + 32 | 0; //@line 22054
  $$052 = 0; //@line 22055
  while (1) {
   if (($$052 | 0) >= ($$sroa$speculated | 0)) {
    label = 9; //@line 22059
    break;
   }
   $18 = _getc(HEAP32[$15 >> 2] | 0) | 0; //@line 22063
   if (($18 | 0) == -1) {
    label = 8; //@line 22066
    break;
   }
   HEAP8[$2 + $$052 >> 0] = $18; //@line 22071
   $$052 = $$052 + 1 | 0; //@line 22073
  }
  if ((label | 0) == 8) {
   $$10 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 22077
  } else if ((label | 0) == 9) {
   do {
    if (!(HEAP8[$0 + 53 >> 0] | 0)) {
     $28 = $0 + 40 | 0; //@line 22085
     $29 = $0 + 36 | 0; //@line 22086
     $30 = $3 + 1 | 0; //@line 22087
     $$048 = $$sroa$speculated; //@line 22088
     L11 : while (1) {
      $31 = HEAP32[$28 >> 2] | 0; //@line 22090
      $32 = $31; //@line 22091
      $34 = HEAP32[$32 >> 2] | 0; //@line 22093
      $37 = HEAP32[$32 + 4 >> 2] | 0; //@line 22096
      $38 = HEAP32[$29 >> 2] | 0; //@line 22097
      $39 = $2 + $$048 | 0; //@line 22098
      switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] & 15]($38, $31, $2, $39, $4, $3, $30, $5) | 0) {
      case 3:
       {
        label = 16; //@line 22105
        break L11;
        break;
       }
      case 2:
       {
        label = 18; //@line 22110
        break L11;
        break;
       }
      case 1:
       {
        break;
       }
      default:
       {
        break L11;
       }
      }
      $45 = HEAP32[$28 >> 2] | 0; //@line 22122
      HEAP32[$45 >> 2] = $34; //@line 22124
      HEAP32[$45 + 4 >> 2] = $37; //@line 22127
      if (($$048 | 0) == 8) {
       label = 18; //@line 22130
       break;
      }
      $51 = _getc(HEAP32[$15 >> 2] | 0) | 0; //@line 22134
      if (($51 | 0) == -1) {
       label = 18; //@line 22137
       break;
      }
      HEAP8[$39 >> 0] = $51; //@line 22141
      $$048 = $$048 + 1 | 0; //@line 22143
     }
     if ((label | 0) == 16) {
      HEAP8[$3 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22147
     } else if ((label | 0) == 18) {
      $$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 22151
      break;
     }
     $$351 = $$048; //@line 22154
     label = 19; //@line 22155
    } else {
     HEAP8[$3 >> 0] = HEAP8[$2 >> 0] | 0; //@line 22158
     $$351 = $$sroa$speculated; //@line 22159
     label = 19; //@line 22160
    }
   } while (0);
   L21 : do {
    if ((label | 0) == 19) {
     L23 : do {
      if ($1) {
       HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0; //@line 22170
      } else {
       $$0 = $$351; //@line 22172
       do {
        if (($$0 | 0) <= 0) {
         break L23;
        }
        $$0 = $$0 + -1 | 0; //@line 22178
        $61 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$2 + $$0 >> 0] | 0) | 0; //@line 22181
       } while ((_ungetc($61, HEAP32[$15 >> 2] | 0) | 0) != -1);
       $$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 22192
       break L21;
      }
     } while (0);
     $$9 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0; //@line 22198
    }
   } while (0);
   $$10 = $$9; //@line 22201
  }
  $$11 = $$10; //@line 22203
 } else {
  $9 = $0 + 48 | 0; //@line 22205
  $10 = HEAP32[$9 >> 2] | 0; //@line 22206
  if ($1) {
   HEAP32[$9 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 22209
   HEAP8[$6 >> 0] = 0; //@line 22210
   $$11 = $10; //@line 22211
  } else {
   $$11 = $10; //@line 22213
  }
 }
 STACKTOP = sp; //@line 22216
 return $$11 | 0; //@line 22216
}
function __ZNSt3__210__stdinbufIwE9__getcharEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $46 = 0, $5 = 0, $52 = 0, $6 = 0, $64 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21682
 STACKTOP = STACKTOP + 32 | 0; //@line 21683
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21683
 $2 = sp + 16 | 0; //@line 21684
 $3 = sp + 8 | 0; //@line 21685
 $4 = sp + 4 | 0; //@line 21686
 $5 = sp; //@line 21687
 $6 = $0 + 52 | 0; //@line 21688
 if (!(HEAP8[$6 >> 0] | 0)) {
  $13 = HEAP32[$0 + 44 >> 2] | 0; //@line 21693
  $$sroa$speculated = ($13 | 0) > 1 ? $13 : 1; //@line 21695
  $15 = $0 + 32 | 0; //@line 21696
  $$052 = 0; //@line 21697
  while (1) {
   if (($$052 | 0) >= ($$sroa$speculated | 0)) {
    label = 9; //@line 21701
    break;
   }
   $18 = _getc(HEAP32[$15 >> 2] | 0) | 0; //@line 21705
   if (($18 | 0) == -1) {
    label = 8; //@line 21708
    break;
   }
   HEAP8[$2 + $$052 >> 0] = $18; //@line 21713
   $$052 = $$052 + 1 | 0; //@line 21715
  }
  if ((label | 0) == 8) {
   $$10 = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 21719
  } else if ((label | 0) == 9) {
   do {
    if (!(HEAP8[$0 + 53 >> 0] | 0)) {
     $29 = $0 + 40 | 0; //@line 21727
     $30 = $0 + 36 | 0; //@line 21728
     $31 = $3 + 4 | 0; //@line 21729
     $$048 = $$sroa$speculated; //@line 21730
     L11 : while (1) {
      $32 = HEAP32[$29 >> 2] | 0; //@line 21732
      $33 = $32; //@line 21733
      $35 = HEAP32[$33 >> 2] | 0; //@line 21735
      $38 = HEAP32[$33 + 4 >> 2] | 0; //@line 21738
      $39 = HEAP32[$30 >> 2] | 0; //@line 21739
      $40 = $2 + $$048 | 0; //@line 21740
      switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$39 >> 2] | 0) + 16 >> 2] & 15]($39, $32, $2, $40, $4, $3, $31, $5) | 0) {
      case 3:
       {
        label = 16; //@line 21747
        break L11;
        break;
       }
      case 2:
       {
        label = 18; //@line 21752
        break L11;
        break;
       }
      case 1:
       {
        break;
       }
      default:
       {
        break L11;
       }
      }
      $46 = HEAP32[$29 >> 2] | 0; //@line 21764
      HEAP32[$46 >> 2] = $35; //@line 21766
      HEAP32[$46 + 4 >> 2] = $38; //@line 21769
      if (($$048 | 0) == 8) {
       label = 18; //@line 21772
       break;
      }
      $52 = _getc(HEAP32[$15 >> 2] | 0) | 0; //@line 21776
      if (($52 | 0) == -1) {
       label = 18; //@line 21779
       break;
      }
      HEAP8[$40 >> 0] = $52; //@line 21783
      $$048 = $$048 + 1 | 0; //@line 21785
     }
     if ((label | 0) == 16) {
      HEAP32[$3 >> 2] = HEAP8[$2 >> 0]; //@line 21790
     } else if ((label | 0) == 18) {
      $$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 21794
      break;
     }
     $$351 = $$048; //@line 21797
     label = 19; //@line 21798
    } else {
     HEAP32[$3 >> 2] = HEAP8[$2 >> 0]; //@line 21802
     $$351 = $$sroa$speculated; //@line 21803
     label = 19; //@line 21804
    }
   } while (0);
   L21 : do {
    if ((label | 0) == 19) {
     L23 : do {
      if ($1) {
       HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$3 >> 2] | 0) | 0; //@line 21814
      } else {
       $$0 = $$351; //@line 21816
       do {
        if (($$0 | 0) <= 0) {
         break L23;
        }
        $$0 = $$0 + -1 | 0; //@line 21822
        $64 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[$2 + $$0 >> 0] | 0) | 0; //@line 21826
       } while ((_ungetc($64, HEAP32[$15 >> 2] | 0) | 0) != -1);
       $$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 21837
       break L21;
      }
     } while (0);
     $$9 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$3 >> 2] | 0) | 0; //@line 21843
    }
   } while (0);
   $$10 = $$9; //@line 21846
  }
  $$11 = $$10; //@line 21848
 } else {
  $9 = $0 + 48 | 0; //@line 21850
  $10 = HEAP32[$9 >> 2] | 0; //@line 21851
  if ($1) {
   HEAP32[$9 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 21854
   HEAP8[$6 >> 0] = 0; //@line 21855
   $$11 = $10; //@line 21856
  } else {
   $$11 = $10; //@line 21858
  }
 }
 STACKTOP = sp; //@line 21861
 return $$11 | 0; //@line 21861
}
function _wcsrtombs($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05675 = 0, $$057$lcssa = 0, $$05785 = 0, $$05874 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26084 = 0, $$279 = 0, $$3 = 0, $$361 = 0, $$478 = 0, $$5 = 0, $$pn = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $24 = 0, $32 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $51 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15491
 STACKTOP = STACKTOP + 16 | 0; //@line 15492
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15492
 $4 = sp; //@line 15493
 L1 : do {
  if (!$0) {
   $7 = HEAP32[$1 >> 2] | 0; //@line 15497
   $8 = HEAP32[$7 >> 2] | 0; //@line 15498
   if (!$8) {
    $$0 = 0; //@line 15501
   } else {
    $$05675 = $7; //@line 15503
    $$05874 = 0; //@line 15503
    $10 = $8; //@line 15503
    while (1) {
     if ($10 >>> 0 > 127) {
      $12 = _wcrtomb($4, $10, 0) | 0; //@line 15507
      if (($12 | 0) == -1) {
       $$0 = -1; //@line 15510
       break L1;
      } else {
       $$pn = $12; //@line 15513
      }
     } else {
      $$pn = 1; //@line 15516
     }
     $$159 = $$pn + $$05874 | 0; //@line 15518
     $$05675 = $$05675 + 4 | 0; //@line 15519
     $10 = HEAP32[$$05675 >> 2] | 0; //@line 15520
     if (!$10) {
      $$0 = $$159; //@line 15523
      break;
     } else {
      $$05874 = $$159; //@line 15526
     }
    }
   }
  } else {
   L9 : do {
    if ($2 >>> 0 > 3) {
     $$05785 = $0; //@line 15535
     $$26084 = $2; //@line 15535
     $19 = HEAP32[$1 >> 2] | 0; //@line 15535
     while (1) {
      $18 = HEAP32[$19 >> 2] | 0; //@line 15537
      if (($18 + -1 | 0) >>> 0 > 126) {
       if (!$18) {
        break;
       }
       $24 = _wcrtomb($$05785, $18, 0) | 0; //@line 15545
       if (($24 | 0) == -1) {
        $$0 = -1; //@line 15548
        break L1;
       }
       $$1 = $$05785 + $24 | 0; //@line 15553
       $$361 = $$26084 - $24 | 0; //@line 15553
       $32 = $19; //@line 15553
      } else {
       HEAP8[$$05785 >> 0] = $18; //@line 15557
       $$1 = $$05785 + 1 | 0; //@line 15560
       $$361 = $$26084 + -1 | 0; //@line 15560
       $32 = HEAP32[$1 >> 2] | 0; //@line 15560
      }
      $19 = $32 + 4 | 0; //@line 15562
      HEAP32[$1 >> 2] = $19; //@line 15563
      if ($$361 >>> 0 <= 3) {
       $$057$lcssa = $$1; //@line 15568
       $$260$lcssa = $$361; //@line 15568
       break L9;
      } else {
       $$05785 = $$1; //@line 15566
       $$26084 = $$361; //@line 15566
      }
     }
     HEAP8[$$05785 >> 0] = 0; //@line 15572
     HEAP32[$1 >> 2] = 0; //@line 15573
     $$0 = $2 - $$26084 | 0; //@line 15575
     break L1;
    } else {
     $$057$lcssa = $0; //@line 15578
     $$260$lcssa = $2; //@line 15578
    }
   } while (0);
   if (!$$260$lcssa) {
    $$0 = $2; //@line 15583
   } else {
    $$279 = $$057$lcssa; //@line 15586
    $$478 = $$260$lcssa; //@line 15586
    $35 = HEAP32[$1 >> 2] | 0; //@line 15586
    while (1) {
     $34 = HEAP32[$35 >> 2] | 0; //@line 15588
     if (($34 + -1 | 0) >>> 0 > 126) {
      if (!$34) {
       label = 19; //@line 15594
       break;
      }
      $40 = _wcrtomb($4, $34, 0) | 0; //@line 15597
      if (($40 | 0) == -1) {
       $$0 = -1; //@line 15600
       break L1;
      }
      if ($$478 >>> 0 < $40 >>> 0) {
       label = 22; //@line 15605
       break;
      }
      _wcrtomb($$279, HEAP32[$35 >> 2] | 0, 0) | 0; //@line 15609
      $$3 = $$279 + $40 | 0; //@line 15612
      $$5 = $$478 - $40 | 0; //@line 15612
      $51 = $35; //@line 15612
     } else {
      HEAP8[$$279 >> 0] = $34; //@line 15616
      $$3 = $$279 + 1 | 0; //@line 15619
      $$5 = $$478 + -1 | 0; //@line 15619
      $51 = HEAP32[$1 >> 2] | 0; //@line 15619
     }
     $35 = $51 + 4 | 0; //@line 15621
     HEAP32[$1 >> 2] = $35; //@line 15622
     if (!$$5) {
      $$0 = $2; //@line 15625
      break L1;
     } else {
      $$279 = $$3; //@line 15628
      $$478 = $$5; //@line 15628
     }
    }
    if ((label | 0) == 19) {
     HEAP8[$$279 >> 0] = 0; //@line 15632
     HEAP32[$1 >> 2] = 0; //@line 15633
     $$0 = $2 - $$478 | 0; //@line 15635
     break;
    } else if ((label | 0) == 22) {
     $$0 = $2 - $$478 | 0; //@line 15640
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 15646
 return $$0 | 0; //@line 15646
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $15 = 0, $18 = 0, $25 = 0, $30 = 0, $34 = 0, $43 = 0, $48 = 0, $50 = 0, $56 = 0, $59 = 0, $60 = 0, $69 = 0, $72 = 0, $81 = 0, $88 = 0, $93 = 0, $95 = 0;
 L1 : do {
  if ($0 << 24 >> 24 == $5 << 24 >> 24) {
   if (!(HEAP8[$1 >> 0] | 0)) {
    $$2 = -1; //@line 24269
   } else {
    HEAP8[$1 >> 0] = 0; //@line 24271
    $15 = HEAP32[$4 >> 2] | 0; //@line 24272
    HEAP32[$4 >> 2] = $15 + 1; //@line 24274
    HEAP8[$15 >> 0] = 46; //@line 24275
    $18 = HEAP8[$7 + 11 >> 0] | 0; //@line 24277
    if (!(($18 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $18 & 255) | 0)) {
     $$2 = 0; //@line 24285
    } else {
     $25 = HEAP32[$9 >> 2] | 0; //@line 24287
     if (($25 - $8 | 0) < 160) {
      $30 = HEAP32[$10 >> 2] | 0; //@line 24293
      HEAP32[$9 >> 2] = $25 + 4; //@line 24295
      HEAP32[$25 >> 2] = $30; //@line 24296
      $$2 = 0; //@line 24297
     } else {
      $$2 = 0; //@line 24299
     }
    }
   }
  } else {
   if ($0 << 24 >> 24 == $6 << 24 >> 24) {
    $34 = HEAP8[$7 + 11 >> 0] | 0; //@line 24307
    if (($34 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $34 & 255) | 0) {
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$2 = -1; //@line 24318
      break;
     }
     $43 = HEAP32[$9 >> 2] | 0; //@line 24321
     if (($43 - $8 | 0) >= 160) {
      $$2 = 0; //@line 24327
      break;
     }
     $48 = HEAP32[$10 >> 2] | 0; //@line 24330
     HEAP32[$9 >> 2] = $43 + 4; //@line 24332
     HEAP32[$43 >> 2] = $48; //@line 24333
     HEAP32[$10 >> 2] = 0; //@line 24334
     $$2 = 0; //@line 24335
     break;
    }
   }
   $50 = $11 + 32 | 0; //@line 24339
   $$0$i$idx = 0; //@line 24340
   while (1) {
    $$0$i$ptr = $11 + $$0$i$idx | 0; //@line 24342
    if (($$0$i$idx | 0) == 32) {
     $$0$lcssa$i = $50; //@line 24345
     break;
    }
    if ((HEAP8[$$0$i$ptr >> 0] | 0) == $0 << 24 >> 24) {
     $$0$lcssa$i = $$0$i$ptr; //@line 24352
     break;
    } else {
     $$0$i$idx = $$0$i$idx + 1 | 0; //@line 24355
    }
   }
   $56 = $$0$lcssa$i - $11 | 0; //@line 24360
   if (($56 | 0) > 31) {
    $$2 = -1; //@line 24363
   } else {
    $59 = HEAP8[29766 + $56 >> 0] | 0; //@line 24366
    switch ($56 | 0) {
    case 24:
    case 25:
     {
      $60 = HEAP32[$4 >> 2] | 0; //@line 24369
      if (($60 | 0) != ($3 | 0)) {
       if ((HEAP8[$60 + -1 >> 0] & 95) != (HEAP8[$2 >> 0] & 127)) {
        $$2 = -1; //@line 24379
        break L1;
       }
      }
      HEAP32[$4 >> 2] = $60 + 1; //@line 24384
      HEAP8[$60 >> 0] = $59; //@line 24385
      $$2 = 0; //@line 24386
      break L1;
      break;
     }
    case 23:
    case 22:
     {
      HEAP8[$2 >> 0] = 80; //@line 24391
      $69 = HEAP32[$4 >> 2] | 0; //@line 24392
      HEAP32[$4 >> 2] = $69 + 1; //@line 24394
      HEAP8[$69 >> 0] = $59; //@line 24395
      $$2 = 0; //@line 24396
      break L1;
      break;
     }
    default:
     {
      $72 = $59 & 95; //@line 24402
      if (($72 | 0) == (HEAP8[$2 >> 0] | 0)) {
       HEAP8[$2 >> 0] = $72 | 128; //@line 24409
       if (HEAP8[$1 >> 0] | 0) {
        HEAP8[$1 >> 0] = 0; //@line 24413
        $81 = HEAP8[$7 + 11 >> 0] | 0; //@line 24415
        if (($81 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $81 & 255) | 0) {
         $88 = HEAP32[$9 >> 2] | 0; //@line 24423
         if (($88 - $8 | 0) < 160) {
          $93 = HEAP32[$10 >> 2] | 0; //@line 24429
          HEAP32[$9 >> 2] = $88 + 4; //@line 24431
          HEAP32[$88 >> 2] = $93; //@line 24432
         }
        }
       }
      }
      $95 = HEAP32[$4 >> 2] | 0; //@line 24437
      HEAP32[$4 >> 2] = $95 + 1; //@line 24439
      HEAP8[$95 >> 0] = $59; //@line 24440
      if (($56 | 0) > 21) {
       $$2 = 0; //@line 24443
       break L1;
      }
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1; //@line 24448
      $$2 = 0; //@line 24449
      break L1;
     }
    }
   }
  }
 } while (0);
 return $$2 | 0; //@line 24456
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy1 = 0, $$val = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $58 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23928
 STACKTOP = STACKTOP + 80 | 0; //@line 23929
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 23929
 $$byval_copy1 = sp + 73 | 0; //@line 23930
 $2 = sp + 72 | 0; //@line 23931
 $3 = sp; //@line 23932
 $$val = HEAP32[$1 >> 2] | 0; //@line 23933
 $4 = __ZN6Runner15getCurrentStackEv($$val) | 0; //@line 23934
 __ZN13CharmFunctionC2ERKS_($3, (__ZN6Runner15getCurrentStackEv($$val) | 0) + 8 | 0); //@line 23937
 __THREW__ = 0; //@line 23938
 invoke_vii(128, $4 | 0, $3 | 0); //@line 23939
 $7 = __THREW__; //@line 23940
 __THREW__ = 0; //@line 23940
 if ($7 & 1) {
  $35 = ___cxa_find_matching_catch_2() | 0; //@line 23943
  $37 = $3 + 52 | 0; //@line 23945
  if ((HEAP8[$37 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$37 >> 2] | 0); //@line 23951
  }
  $42 = $3 + 40 | 0; //@line 23953
  $43 = HEAP32[$42 >> 2] | 0; //@line 23954
  if ($43 | 0) {
   $45 = $3 + 44 | 0; //@line 23957
   $46 = HEAP32[$45 >> 2] | 0; //@line 23958
   do {
    if (($46 | 0) == ($43 | 0)) {
     $57 = $43; //@line 23962
    } else {
     $48 = $3 + 48 | 0; //@line 23964
     $50 = $46; //@line 23965
     while (1) {
      $49 = $50 + -72 | 0; //@line 23967
      HEAP32[$45 >> 2] = $49; //@line 23968
      __THREW__ = 0; //@line 23969
      HEAP8[$$byval_copy1 >> 0] = HEAP8[$2 >> 0] | 0; //@line 23970
      invoke_viii(13, $$byval_copy1 | 0, $48 | 0, $49 | 0); //@line 23971
      $51 = __THREW__; //@line 23972
      __THREW__ = 0; //@line 23972
      if ($51 & 1) {
       label = 21; //@line 23975
       break;
      }
      $50 = HEAP32[$45 >> 2] | 0; //@line 23978
      if (($50 | 0) == ($43 | 0)) {
       label = 22; //@line 23981
       break;
      }
     }
     if ((label | 0) == 21) {
      $55 = ___cxa_find_matching_catch_3(0) | 0; //@line 23988
      ___clang_call_terminate($55); //@line 23990
     } else if ((label | 0) == 22) {
      $57 = HEAP32[$42 >> 2] | 0; //@line 23995
      break;
     }
    }
   } while (0);
   __ZdlPv($57); //@line 24000
  }
  $58 = $3 + 4 | 0; //@line 24002
  if ((HEAP8[$58 + 11 >> 0] | 0) >= 0) {
   ___resumeException($35 | 0); //@line 24007
  }
  __ZdlPv(HEAP32[$58 >> 2] | 0); //@line 24011
  ___resumeException($35 | 0); //@line 24012
 } else {
  $9 = $3 + 52 | 0; //@line 24015
  if ((HEAP8[$9 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 24021
  }
  $14 = $3 + 40 | 0; //@line 24023
  $15 = HEAP32[$14 >> 2] | 0; //@line 24024
  if ($15 | 0) {
   $17 = $3 + 44 | 0; //@line 24027
   $18 = HEAP32[$17 >> 2] | 0; //@line 24028
   do {
    if (($18 | 0) == ($15 | 0)) {
     $29 = $15; //@line 24032
    } else {
     $20 = $3 + 48 | 0; //@line 24034
     $22 = $18; //@line 24035
     while (1) {
      $21 = $22 + -72 | 0; //@line 24037
      HEAP32[$17 >> 2] = $21; //@line 24038
      __THREW__ = 0; //@line 24039
      HEAP8[$$byval_copy1 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24040
      invoke_viii(13, $$byval_copy1 | 0, $20 | 0, $21 | 0); //@line 24041
      $23 = __THREW__; //@line 24042
      __THREW__ = 0; //@line 24042
      if ($23 & 1) {
       label = 9; //@line 24045
       break;
      }
      $22 = HEAP32[$17 >> 2] | 0; //@line 24048
      if (($22 | 0) == ($15 | 0)) {
       label = 10; //@line 24051
       break;
      }
     }
     if ((label | 0) == 9) {
      $27 = ___cxa_find_matching_catch_3(0) | 0; //@line 24058
      ___clang_call_terminate($27); //@line 24060
     } else if ((label | 0) == 10) {
      $29 = HEAP32[$14 >> 2] | 0; //@line 24065
      break;
     }
    }
   } while (0);
   __ZdlPv($29); //@line 24070
  }
  $30 = $3 + 4 | 0; //@line 24072
  if ((HEAP8[$30 + 11 >> 0] | 0) >= 0) {
   STACKTOP = sp; //@line 24077
   return;
  }
  __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 24080
  STACKTOP = sp; //@line 24081
  return;
 }
}
function __ZN6Parser12escapeStringENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phi58Z2D = 0, $$pre$phi60Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink$ph = 0, $$sink2 = 0, $$sroa$0$sroa$0 = 0, $$sroa$028 = 0, $$sroa$028$0$$sroa$028$0$3054 = 0, $14 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2264
 STACKTOP = STACKTOP + 16 | 0; //@line 2265
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2265
 $$sroa$028 = sp + 4 | 0; //@line 2266
 $$sroa$0$sroa$0 = sp; //@line 2267
 $3 = $2 + 11 | 0; //@line 2268
 $4 = HEAP8[$3 >> 0] | 0; //@line 2269
 if ($4 << 24 >> 24 < 0) {
  $$pre$phi58Z2D = $2; //@line 2273
  $$pre$phiZ2D = $2; //@line 2273
  $$sink$ph = HEAP32[$2 >> 2] | 0; //@line 2273
 } else {
  $$pre$phi58Z2D = $2; //@line 2275
  $$pre$phiZ2D = $2; //@line 2275
  $$sink$ph = $2; //@line 2275
 }
 $7 = $2 + 4 | 0; //@line 2277
 $$sink = $$sink$ph; //@line 2278
 $$sink2 = $$sroa$028; //@line 2278
 $8 = $4; //@line 2278
 while (1) {
  HEAP32[$$sink2 >> 2] = $$sink; //@line 2280
  $9 = $8 << 24 >> 24 < 0; //@line 2281
  if ($9) {
   $14 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 2285
   $15 = HEAP32[$7 >> 2] | 0; //@line 2285
  } else {
   $14 = $$pre$phi58Z2D; //@line 2288
   $15 = $8 & 255; //@line 2288
  }
  $$sroa$028$0$$sroa$028$0$3054 = HEAP32[$$sroa$028 >> 2] | 0; //@line 2291
  $17 = $$sroa$028$0$$sroa$028$0$3054; //@line 2293
  if (($$sroa$028$0$$sroa$028$0$3054 | 0) == ($14 + $15 | 0)) {
   label = 24; //@line 2295
   break;
  }
  if ($9) {
   $22 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 2301
   $23 = HEAP32[$7 >> 2] | 0; //@line 2301
  } else {
   $22 = $$pre$phi58Z2D; //@line 2304
   $23 = $8 & 255; //@line 2304
  }
  if (($$sroa$028$0$$sroa$028$0$3054 | 0) == ($22 + $23 + -1 | 0)) {
   label = 24; //@line 2310
   break;
  }
  L17 : do {
   if ((HEAP8[$$sroa$028$0$$sroa$028$0$3054 >> 0] | 0) == 92) {
    if ($9) {
     $29 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 2319
    } else {
     $29 = $$pre$phi58Z2D; //@line 2321
    }
    $31 = $17 - $29 | 0; //@line 2324
    $32 = $$sroa$028$0$$sroa$028$0$3054 + 1 | 0; //@line 2325
    switch (HEAP8[$32 >> 0] | 0) {
    case 110:
     {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($2, $31, 2, 21110) | 0; //@line 2329
      $$pre$phi60Z2D = $32; //@line 2330
      break L17;
      break;
     }
    case 34:
     {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($2, $31, 2, 20984) | 0; //@line 2335
      $$pre$phi60Z2D = $32; //@line 2336
      break L17;
      break;
     }
    case 116:
     {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($2, $31, 2, 21112) | 0; //@line 2341
      $$pre$phi60Z2D = $32; //@line 2342
      break L17;
      break;
     }
    case 48:
     {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($2, $31, 2, 37440) | 0; //@line 2347
      $$pre$phi60Z2D = $32; //@line 2348
      break L17;
      break;
     }
    case 92:
     {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($2, $31, 2, 21114) | 0; //@line 2353
      $$pre$phi60Z2D = $32; //@line 2354
      break L17;
      break;
     }
    default:
     {
      $$pre$phi60Z2D = $32; //@line 2359
      break L17;
     }
    }
   } else {
    $$pre$phi60Z2D = $$sroa$028$0$$sroa$028$0$3054 + 1 | 0; //@line 2365
   }
  } while (0);
  HEAP32[$$sroa$028 >> 2] = $$pre$phi60Z2D; //@line 2369
  $$sink = $$sroa$028$0$$sroa$028$0$3054; //@line 2371
  $$sink2 = $$sroa$0$sroa$0; //@line 2371
  $8 = HEAP8[$3 >> 0] | 0; //@line 2371
 }
 if ((label | 0) == 24) {
  HEAP32[$0 >> 2] = HEAP32[$$pre$phi58Z2D >> 2]; //@line 2374
  HEAP32[$0 + 4 >> 2] = HEAP32[$$pre$phi58Z2D + 4 >> 2]; //@line 2374
  HEAP32[$0 + 8 >> 2] = HEAP32[$$pre$phi58Z2D + 8 >> 2]; //@line 2374
  HEAP32[$$pre$phi58Z2D >> 2] = 0; //@line 2375
  HEAP32[$$pre$phi58Z2D + 4 >> 2] = 0; //@line 2375
  HEAP32[$$pre$phi58Z2D + 8 >> 2] = 0; //@line 2375
  STACKTOP = sp; //@line 2376
  return;
 }
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 12931
 $3 = HEAP32[$2 >> 2] | 0; //@line 12932
 $4 = $0 + 100 | 0; //@line 12933
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 12938
  $11 = HEAPU8[$3 >> 0] | 0; //@line 12941
 } else {
  $11 = ___shgetc($0) | 0; //@line 12944
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 12949
   $14 = HEAP32[$2 >> 2] | 0; //@line 12950
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 12955
    $22 = HEAPU8[$14 >> 0] | 0; //@line 12958
   } else {
    $22 = ___shgetc($0) | 0; //@line 12961
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 12971
     $$049 = $22; //@line 12971
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 12975
     $$0 = $13; //@line 12976
     $$049 = $22; //@line 12976
    }
   } else {
    $$0 = $13; //@line 12979
    $$049 = $22; //@line 12979
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 12984
   $$049 = $11; //@line 12984
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 12993
   $101 = 0; //@line 12993
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 12997
   $100 = -2147483648; //@line 12998
   $101 = 0; //@line 12998
  }
 } else {
  $$04860 = 0; //@line 13001
  $$159 = $$049; //@line 13001
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 13005
   $38 = HEAP32[$2 >> 2] | 0; //@line 13006
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 13011
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 13014
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 13017
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 13024
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 13030
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 13034
   $55 = $$04860; //@line 13034
   $56 = $50; //@line 13034
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 13036
    $58 = tempRet0; //@line 13037
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 13040
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 13042
    $64 = tempRet0; //@line 13043
    $65 = HEAP32[$2 >> 2] | 0; //@line 13044
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 13049
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 13052
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 13055
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 13066
     $55 = $63; //@line 13066
     $56 = $64; //@line 13066
    } else {
     $$2$lcssa = $$2$be; //@line 13068
     $94 = $63; //@line 13068
     $95 = $64; //@line 13068
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 13073
   $94 = $$04860; //@line 13073
   $95 = $50; //@line 13073
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 13079
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 13084
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 13087
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 13090
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 13104
  }
  $93 = ($$0 | 0) != 0; //@line 13106
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 13107
  $100 = $93 ? tempRet0 : $95; //@line 13111
  $101 = $93 ? $96 : $94; //@line 13111
 }
 tempRet0 = $100; //@line 13113
 return $101 | 0; //@line 13114
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $$040 = 0, $16 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $62 = 0, $67 = 0, $7 = 0, $8 = 0, $scevgep45 = 0, sp = 0;
 sp = STACKTOP; //@line 47649
 STACKTOP = STACKTOP + 16 | 0; //@line 47650
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 47650
 $3 = $1; //@line 47651
 $4 = sp + 12 | 0; //@line 47652
 $5 = sp; //@line 47653
 $6 = $0 + 11 | 0; //@line 47654
 $7 = HEAP8[$6 >> 0] | 0; //@line 47655
 $8 = $7 << 24 >> 24 < 0; //@line 47656
 if ($8) {
  $53 = HEAP32[$0 + 4 >> 2] | 0; //@line 47664
  $54 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; //@line 47664
 } else {
  $53 = $7 & 255; //@line 47667
  $54 = 10; //@line 47667
 }
 $16 = $2 - $3 | 0; //@line 47670
 do {
  if ($16 | 0) {
   if ($8) {
    $23 = HEAP32[$0 >> 2] | 0; //@line 47678
    $24 = HEAP32[$0 + 4 >> 2] | 0; //@line 47678
   } else {
    $23 = $0; //@line 47681
    $24 = $7 & 255; //@line 47681
   }
   if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1, $23, $23 + $24 | 0) | 0) {
    HEAP32[$5 >> 2] = 0; //@line 47686
    HEAP32[$5 + 4 >> 2] = 0; //@line 47686
    HEAP32[$5 + 8 >> 2] = 0; //@line 47686
    if ($16 >>> 0 > 4294967279) {
     __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($5); //@line 47689
    }
    if ($16 >>> 0 < 11) {
     HEAP8[$5 + 11 >> 0] = $16; //@line 47696
     $$021$ph$i$i = $5; //@line 47697
    } else {
     $31 = $16 + 16 & -16; //@line 47700
     $32 = __Znwj($31) | 0; //@line 47701
     HEAP32[$5 >> 2] = $32; //@line 47702
     HEAP32[$5 + 8 >> 2] = $31 | -2147483648; //@line 47705
     HEAP32[$5 + 4 >> 2] = $16; //@line 47707
     $$021$ph$i$i = $32; //@line 47708
    }
    $$0$i$i = $1; //@line 47710
    $$021$i$i = $$021$ph$i$i; //@line 47710
    while (1) {
     if (($$0$i$i | 0) == ($2 | 0)) {
      break;
     }
     __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i, $$0$i$i); //@line 47716
     $$0$i$i = $$0$i$i + 1 | 0; //@line 47719
     $$021$i$i = $$021$i$i + 1 | 0; //@line 47719
    }
    HEAP8[$4 >> 0] = 0; //@line 47722
    __ZNSt3__211char_traitsIcE6assignERcRKc($$021$ph$i$i + $16 | 0, $4); //@line 47723
    $40 = HEAP8[$5 + 11 >> 0] | 0; //@line 47725
    $41 = $40 << 24 >> 24 < 0; //@line 47726
    __THREW__ = 0; //@line 47733
    invoke_iiii(29, $0 | 0, ($41 ? HEAP32[$5 >> 2] | 0 : $5) | 0, ($41 ? HEAP32[$5 + 4 >> 2] | 0 : $40 & 255) | 0) | 0; //@line 47734
    $48 = __THREW__; //@line 47735
    __THREW__ = 0; //@line 47735
    if ($48 & 1) {
     $50 = ___cxa_find_matching_catch_2() | 0; //@line 47738
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5); //@line 47740
     ___resumeException($50 | 0); //@line 47741
    } else {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5); //@line 47744
     break;
    }
   } else {
    if (($54 - $53 | 0) >>> 0 < $16 >>> 0) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0, $54, $53 + $16 - $54 | 0, $53, $53, 0, 0); //@line 47753
    }
    if ((HEAP8[$6 >> 0] | 0) < 0) {
     $62 = HEAP32[$0 >> 2] | 0; //@line 47759
    } else {
     $62 = $0; //@line 47761
    }
    $scevgep45 = $2 + ($53 - $3) | 0; //@line 47766
    $$0 = $62 + $53 | 0; //@line 47767
    $$040 = $1; //@line 47767
    while (1) {
     if (($$040 | 0) == ($2 | 0)) {
      break;
     }
     __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $$040); //@line 47773
     $$0 = $$0 + 1 | 0; //@line 47776
     $$040 = $$040 + 1 | 0; //@line 47776
    }
    HEAP8[$4 >> 0] = 0; //@line 47779
    __ZNSt3__211char_traitsIcE6assignERcRKc($62 + $scevgep45 | 0, $4); //@line 47780
    $67 = $53 + $16 | 0; //@line 47781
    if ((HEAP8[$6 >> 0] | 0) < 0) {
     HEAP32[$0 + 4 >> 2] = $67; //@line 47786
     break;
    } else {
     HEAP8[$6 >> 0] = $67; //@line 47790
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 47796
 return $0 | 0; //@line 47796
}
function __ZN6Runner12getReferenceE13CharmFunction($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $$sroa$010$021 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7394
 STACKTOP = STACKTOP + 160 | 0; //@line 7395
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 7395
 $$byval_copy = sp + 145 | 0; //@line 7396
 $3 = sp + 144 | 0; //@line 7397
 $4 = sp; //@line 7398
 $6 = HEAP32[$1 + 84 >> 2] | 0; //@line 7400
 $8 = HEAP32[$1 + 88 >> 2] | 0; //@line 7402
 L1 : do {
  if (($6 | 0) != ($8 | 0)) {
   $10 = $4 + 72 | 0; //@line 7406
   $$sroa$010$021 = $6; //@line 7407
   while (1) {
    __ZN13CharmFunctionC2ERKS_($4, $$sroa$010$021); //@line 7409
    __THREW__ = 0; //@line 7411
    invoke_vii(120, $10 | 0, $$sroa$010$021 + 72 | 0); //@line 7412
    $12 = __THREW__; //@line 7413
    __THREW__ = 0; //@line 7413
    if ($12 & 1) {
     label = 4; //@line 7416
     break;
    }
    __THREW__ = 0; //@line 7419
    $42 = invoke_iii(58, $4 | 0, $2 | 0) | 0; //@line 7420
    $43 = __THREW__; //@line 7421
    __THREW__ = 0; //@line 7421
    if ($43 & 1) {
     label = 20; //@line 7424
     break;
    }
    if ($42) {
     label = 19; //@line 7428
     break;
    }
    __ZN9ReferenceD2Ev($4); //@line 7431
    $$sroa$010$021 = $$sroa$010$021 + 144 | 0; //@line 7432
    if (($$sroa$010$021 | 0) == ($8 | 0)) {
     break L1;
    }
   }
   if ((label | 0) == 4) {
    $14 = ___cxa_find_matching_catch_2() | 0; //@line 7441
    $16 = $4 + 52 | 0; //@line 7443
    if ((HEAP8[$16 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$16 >> 2] | 0); //@line 7449
    }
    $21 = $4 + 40 | 0; //@line 7451
    $22 = HEAP32[$21 >> 2] | 0; //@line 7452
    if ($22 | 0) {
     $24 = $4 + 44 | 0; //@line 7455
     $25 = HEAP32[$24 >> 2] | 0; //@line 7456
     do {
      if (($25 | 0) == ($22 | 0)) {
       $36 = $22; //@line 7460
      } else {
       $27 = $4 + 48 | 0; //@line 7462
       $29 = $25; //@line 7463
       while (1) {
        $28 = $29 + -72 | 0; //@line 7465
        HEAP32[$24 >> 2] = $28; //@line 7466
        __THREW__ = 0; //@line 7467
        HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 7468
        invoke_viii(13, $$byval_copy | 0, $27 | 0, $28 | 0); //@line 7469
        $30 = __THREW__; //@line 7470
        __THREW__ = 0; //@line 7470
        if ($30 & 1) {
         label = 11; //@line 7473
         break;
        }
        $29 = HEAP32[$24 >> 2] | 0; //@line 7476
        if (($29 | 0) == ($22 | 0)) {
         label = 12; //@line 7479
         break;
        }
       }
       if ((label | 0) == 11) {
        $34 = ___cxa_find_matching_catch_3(0) | 0; //@line 7486
        ___clang_call_terminate($34); //@line 7488
       } else if ((label | 0) == 12) {
        $36 = HEAP32[$21 >> 2] | 0; //@line 7493
        break;
       }
      }
     } while (0);
     __ZdlPv($36); //@line 7498
    }
    $37 = $4 + 4 | 0; //@line 7500
    if ((HEAP8[$37 + 11 >> 0] | 0) >= 0) {
     ___resumeException($14 | 0); //@line 7505
    }
    __ZdlPv(HEAP32[$37 >> 2] | 0); //@line 7509
    ___resumeException($14 | 0); //@line 7510
   } else if ((label | 0) == 19) {
    __THREW__ = 0; //@line 7514
    invoke_vii(120, $0 | 0, $10 | 0); //@line 7515
    $45 = __THREW__; //@line 7516
    __THREW__ = 0; //@line 7516
    if ($45 & 1) {
     $47 = ___cxa_find_matching_catch_2() | 0; //@line 7519
     $48 = tempRet0; //@line 7520
     __ZN9ReferenceD2Ev($4); //@line 7521
     ___resumeException($47 | 0); //@line 7522
    }
    __ZN9ReferenceD2Ev($4); //@line 7525
    STACKTOP = sp; //@line 7526
    return;
   } else if ((label | 0) == 20) {
    $47 = ___cxa_find_matching_catch_2() | 0; //@line 7529
    $48 = tempRet0; //@line 7530
    __ZN9ReferenceD2Ev($4); //@line 7531
    ___resumeException($47 | 0); //@line 7532
   }
  }
 } while (0);
 __ZN5Stack5zeroFEv($0); //@line 7537
 STACKTOP = sp; //@line 7538
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$069 = 0, $$070 = 0, $$074 = 0, $$091 = 0, $$292 = 0, $$3 = 0, $$373 = 0, $$377 = 0, $$393 = 0, $$4 = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $21 = 0, $25 = 0, $28 = 0, $29 = 0, $40 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 61742
 STACKTOP = STACKTOP + 16 | 0; //@line 61743
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61743
 $5 = sp; //@line 61744
 $6 = $0 + 11 | 0; //@line 61745
 $7 = HEAP8[$6 >> 0] | 0; //@line 61746
 $8 = $7 << 24 >> 24 < 0; //@line 61747
 if ($8) {
  $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 61751
 } else {
  $12 = $7 & 255; //@line 61754
 }
 if ($12 >>> 0 < $1 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0); //@line 61758
 }
 $14 = $12 - $1 | 0; //@line 61761
 $$sroa$speculated = $14 >>> 0 < $2 >>> 0 ? $14 : $2; //@line 61763
 if ($8) {
  $21 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; //@line 61769
 } else {
  $21 = 10; //@line 61771
 }
 if (($$sroa$speculated - $12 + $21 | 0) >>> 0 < $4 >>> 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $21, $12 + $4 - $$sroa$speculated - $21 | 0, $12, $1, $$sroa$speculated, $4, $3); //@line 61780
 } else {
  if ($8) {
   $29 = HEAP32[$0 >> 2] | 0; //@line 61784
  } else {
   $29 = $0; //@line 61786
  }
  do {
   if (($$sroa$speculated | 0) == ($4 | 0)) {
    $$292 = $4; //@line 61791
    $$3 = $1; //@line 61791
    $$373 = $3; //@line 61791
    $$377 = $4; //@line 61791
    label = 21; //@line 61792
   } else {
    $25 = $14 - $$sroa$speculated | 0; //@line 61794
    if (!$25) {
     $$292 = $$sroa$speculated; //@line 61797
     $$3 = $1; //@line 61797
     $$373 = $3; //@line 61797
     $$377 = $4; //@line 61797
     label = 21; //@line 61798
    } else {
     $28 = $29 + $1 | 0; //@line 61801
     if ($$sroa$speculated >>> 0 > $4 >>> 0) {
      __ZNSt3__211char_traitsIcE4moveEPcPKcj($28, $3, $4) | 0; //@line 61803
      __ZNSt3__211char_traitsIcE4moveEPcPKcj($28 + $4 | 0, $28 + $$sroa$speculated | 0, $25) | 0; //@line 61806
      $$393 = $$sroa$speculated; //@line 61807
      $$4 = $4; //@line 61807
      break;
     }
     do {
      if ($28 >>> 0 < $3 >>> 0 & ($29 + $12 | 0) >>> 0 > $3 >>> 0) {
       if (($28 + $$sroa$speculated | 0) >>> 0 > $3 >>> 0) {
        __ZNSt3__211char_traitsIcE4moveEPcPKcj($28, $3, $$sroa$speculated) | 0; //@line 61819
        $$069 = $$sroa$speculated + $1 | 0; //@line 61823
        $$070 = $3 + $4 | 0; //@line 61823
        $$074 = $4 - $$sroa$speculated | 0; //@line 61823
        $$091 = 0; //@line 61823
        break;
       } else {
        $$069 = $1; //@line 61828
        $$070 = $3 + ($4 - $$sroa$speculated) | 0; //@line 61828
        $$074 = $4; //@line 61828
        $$091 = $$sroa$speculated; //@line 61828
        break;
       }
      } else {
       $$069 = $1; //@line 61832
       $$070 = $3; //@line 61832
       $$074 = $4; //@line 61832
       $$091 = $$sroa$speculated; //@line 61832
      }
     } while (0);
     $40 = $29 + $$069 | 0; //@line 61835
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($40 + $$074 | 0, $40 + $$091 | 0, $25) | 0; //@line 61838
     $$292 = $$091; //@line 61839
     $$3 = $$069; //@line 61839
     $$373 = $$070; //@line 61839
     $$377 = $$074; //@line 61839
     label = 21; //@line 61840
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($29 + $$3 | 0, $$373, $$377) | 0; //@line 61846
   $$393 = $$292; //@line 61847
   $$4 = $$377; //@line 61847
  }
  $47 = $$4 - $$393 + $12 | 0; //@line 61850
  if ((HEAP8[$6 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $47; //@line 61855
  } else {
   HEAP8[$6 >> 0] = $47; //@line 61858
  }
  HEAP8[$5 >> 0] = 0; //@line 61861
  __ZNSt3__211char_traitsIcE6assignERcRKc($29 + $47 | 0, $5); //@line 61862
 }
 STACKTOP = sp; //@line 61864
 return $0 | 0; //@line 61864
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $15 = 0, $18 = 0, $25 = 0, $30 = 0, $34 = 0, $43 = 0, $48 = 0, $50 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $71 = 0, $80 = 0, $87 = 0, $92 = 0, $94 = 0;
 L1 : do {
  if (($0 | 0) == ($5 | 0)) {
   if (!(HEAP8[$1 >> 0] | 0)) {
    $$2 = -1; //@line 30588
   } else {
    HEAP8[$1 >> 0] = 0; //@line 30590
    $15 = HEAP32[$4 >> 2] | 0; //@line 30591
    HEAP32[$4 >> 2] = $15 + 1; //@line 30593
    HEAP8[$15 >> 0] = 46; //@line 30594
    $18 = HEAP8[$7 + 11 >> 0] | 0; //@line 30596
    if (!(($18 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $18 & 255) | 0)) {
     $$2 = 0; //@line 30604
    } else {
     $25 = HEAP32[$9 >> 2] | 0; //@line 30606
     if (($25 - $8 | 0) < 160) {
      $30 = HEAP32[$10 >> 2] | 0; //@line 30612
      HEAP32[$9 >> 2] = $25 + 4; //@line 30614
      HEAP32[$25 >> 2] = $30; //@line 30615
      $$2 = 0; //@line 30616
     } else {
      $$2 = 0; //@line 30618
     }
    }
   }
  } else {
   if (($0 | 0) == ($6 | 0)) {
    $34 = HEAP8[$7 + 11 >> 0] | 0; //@line 30626
    if (($34 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $34 & 255) | 0) {
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$2 = -1; //@line 30637
      break;
     }
     $43 = HEAP32[$9 >> 2] | 0; //@line 30640
     if (($43 - $8 | 0) >= 160) {
      $$2 = 0; //@line 30646
      break;
     }
     $48 = HEAP32[$10 >> 2] | 0; //@line 30649
     HEAP32[$9 >> 2] = $43 + 4; //@line 30651
     HEAP32[$43 >> 2] = $48; //@line 30652
     HEAP32[$10 >> 2] = 0; //@line 30653
     $$2 = 0; //@line 30654
     break;
    }
   }
   $50 = $11 + 128 | 0; //@line 30658
   $$0$i$idx = 0; //@line 30659
   while (1) {
    $$0$i$ptr = $11 + ($$0$i$idx << 2) | 0; //@line 30661
    if (($$0$i$idx | 0) == 32) {
     $$0$lcssa$i = $50; //@line 30664
     break;
    }
    if ((HEAP32[$$0$i$ptr >> 2] | 0) == ($0 | 0)) {
     $$0$lcssa$i = $$0$i$ptr; //@line 30671
     break;
    } else {
     $$0$i$idx = $$0$i$idx + 1 | 0; //@line 30674
    }
   }
   $56 = $$0$lcssa$i - $11 | 0; //@line 30679
   $57 = $56 >> 2; //@line 30680
   if (($56 | 0) > 124) {
    $$2 = -1; //@line 30683
   } else {
    $60 = HEAP8[29766 + $57 >> 0] | 0; //@line 30686
    switch ($57 | 0) {
    case 24:
    case 25:
     {
      $61 = HEAP32[$4 >> 2] | 0; //@line 30689
      if (($61 | 0) != ($3 | 0)) {
       if ((HEAP8[$61 + -1 >> 0] & 95) != (HEAP8[$2 >> 0] & 127)) {
        $$2 = -1; //@line 30699
        break L1;
       }
      }
      HEAP32[$4 >> 2] = $61 + 1; //@line 30704
      HEAP8[$61 >> 0] = $60; //@line 30705
      $$2 = 0; //@line 30706
      break L1;
      break;
     }
    case 23:
    case 22:
     {
      HEAP8[$2 >> 0] = 80; //@line 30711
      break;
     }
    default:
     {
      $71 = $60 & 95; //@line 30716
      if (($71 | 0) == (HEAP8[$2 >> 0] | 0)) {
       HEAP8[$2 >> 0] = $71 | 128; //@line 30723
       if (HEAP8[$1 >> 0] | 0) {
        HEAP8[$1 >> 0] = 0; //@line 30727
        $80 = HEAP8[$7 + 11 >> 0] | 0; //@line 30729
        if (($80 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $80 & 255) | 0) {
         $87 = HEAP32[$9 >> 2] | 0; //@line 30737
         if (($87 - $8 | 0) < 160) {
          $92 = HEAP32[$10 >> 2] | 0; //@line 30743
          HEAP32[$9 >> 2] = $87 + 4; //@line 30745
          HEAP32[$87 >> 2] = $92; //@line 30746
         }
        }
       }
      }
     }
    }
    $94 = HEAP32[$4 >> 2] | 0; //@line 30753
    HEAP32[$4 >> 2] = $94 + 1; //@line 30755
    HEAP8[$94 >> 0] = $60; //@line 30756
    if (($56 | 0) > 84) {
     $$2 = 0; //@line 30759
    } else {
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1; //@line 30763
     $$2 = 0; //@line 30764
    }
   }
  }
 } while (0);
 return $$2 | 0; //@line 30769
}
function _mbsnrtowcs($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$04975 = 0, $$05274 = 0, $$055$ = 0, $$05573 = 0, $$064 = 0, $$076 = 0, $$1 = 0, $$150 = 0, $$153 = 0, $$156 = 0, $$25170 = 0, $$25469 = 0, $$257 = 0, $$271 = 0, $$3 = 0, $$35868 = 0, $$59 = 0, $$cast = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $30 = 0, $31 = 0, $39 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 16525
 STACKTOP = STACKTOP + 1040 | 0; //@line 16526
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040); //@line 16526
 $5 = sp + 8 | 0; //@line 16527
 $6 = sp; //@line 16528
 $7 = HEAP32[$1 >> 2] | 0; //@line 16529
 HEAP32[$6 >> 2] = $7; //@line 16530
 $8 = ($0 | 0) != 0; //@line 16531
 $$ = $8 ? $3 : 256; //@line 16532
 $$59 = $8 ? $0 : $5; //@line 16533
 $$cast = $7; //@line 16534
 L1 : do {
  if (($$ | 0) != 0 & ($7 | 0) != 0) {
   $$04975 = 0; //@line 16540
   $$05274 = $2; //@line 16540
   $$05573 = $$; //@line 16540
   $$076 = $$59; //@line 16540
   $44 = $$cast; //@line 16540
   while (1) {
    $11 = $$05274 >>> 2; //@line 16542
    $12 = $11 >>> 0 >= $$05573 >>> 0; //@line 16543
    if (!($$05274 >>> 0 > 131 | $12)) {
     $$064 = $$076; //@line 16547
     $$150 = $$04975; //@line 16547
     $$153 = $$05274; //@line 16547
     $$257 = $$05573; //@line 16547
     $25 = $44; //@line 16547
     break L1;
    }
    $$055$ = $12 ? $$05573 : $11; //@line 16550
    $15 = $$05274 - $$055$ | 0; //@line 16551
    $16 = _mbsrtowcs($$076, $6, $$055$, $4) | 0; //@line 16552
    if (($16 | 0) == -1) {
     break;
    }
    $18 = ($$076 | 0) == ($5 | 0); //@line 16557
    $$156 = $$05573 - ($18 ? 0 : $16) | 0; //@line 16560
    $$1 = $18 ? $$076 : $$076 + ($16 << 2) | 0; //@line 16561
    $21 = $16 + $$04975 | 0; //@line 16562
    $22 = HEAP32[$6 >> 2] | 0; //@line 16563
    if (($$156 | 0) != 0 & ($22 | 0) != 0) {
     $$04975 = $21; //@line 16568
     $$05274 = $15; //@line 16568
     $$05573 = $$156; //@line 16568
     $$076 = $$1; //@line 16568
     $44 = $22; //@line 16568
    } else {
     $$064 = $$1; //@line 16570
     $$150 = $21; //@line 16570
     $$153 = $15; //@line 16570
     $$257 = $$156; //@line 16570
     $25 = $22; //@line 16570
     break L1;
    }
   }
   $$064 = $$076; //@line 16575
   $$150 = -1; //@line 16575
   $$153 = $15; //@line 16575
   $$257 = 0; //@line 16575
   $25 = HEAP32[$6 >> 2] | 0; //@line 16575
  } else {
   $$064 = $$59; //@line 16577
   $$150 = 0; //@line 16577
   $$153 = $2; //@line 16577
   $$257 = $$; //@line 16577
   $25 = $$cast; //@line 16577
  }
 } while (0);
 L8 : do {
  if (!$25) {
   $$3 = $$150; //@line 16583
  } else {
   if (($$257 | 0) != 0 & ($$153 | 0) != 0) {
    $$25170 = $$150; //@line 16589
    $$25469 = $$153; //@line 16589
    $$271 = $$064; //@line 16589
    $$35868 = $$257; //@line 16589
    $30 = $25; //@line 16589
    while (1) {
     $31 = _mbrtowc($$271, $30, $$25469, $4) | 0; //@line 16591
     if (($31 + 2 | 0) >>> 0 < 3) {
      break;
     }
     $30 = (HEAP32[$6 >> 2] | 0) + $31 | 0; //@line 16598
     HEAP32[$6 >> 2] = $30; //@line 16599
     $$25469 = $$25469 - $31 | 0; //@line 16600
     $$35868 = $$35868 + -1 | 0; //@line 16602
     $39 = $$25170 + 1 | 0; //@line 16603
     if (!(($$35868 | 0) != 0 & ($$25469 | 0) != 0)) {
      $$3 = $39; //@line 16610
      break L8;
     } else {
      $$25170 = $39; //@line 16608
      $$271 = $$271 + 4 | 0; //@line 16608
     }
    }
    switch ($31 | 0) {
    case -1:
     {
      $$3 = -1; //@line 16616
      break L8;
      break;
     }
    case 0:
     {
      HEAP32[$6 >> 2] = 0; //@line 16621
      $$3 = $$25170; //@line 16622
      break L8;
      break;
     }
    default:
     {
      HEAP32[$4 >> 2] = 0; //@line 16627
      $$3 = $$25170; //@line 16628
      break L8;
     }
    }
   } else {
    $$3 = $$150; //@line 16633
   }
  }
 } while (0);
 if ($8) {
  HEAP32[$1 >> 2] = HEAP32[$6 >> 2]; //@line 16639
 }
 STACKTOP = sp; //@line 16641
 return $$3 | 0; //@line 16641
}
function _pop_arg_166($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 8275
      $10 = HEAP32[$9 >> 2] | 0; //@line 8276
      HEAP32[$2 >> 2] = $9 + 4; //@line 8278
      HEAP32[$0 >> 2] = $10; //@line 8279
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 8295
      $17 = HEAP32[$16 >> 2] | 0; //@line 8296
      HEAP32[$2 >> 2] = $16 + 4; //@line 8298
      $20 = $0; //@line 8301
      HEAP32[$20 >> 2] = $17; //@line 8303
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 8306
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 8322
      $30 = HEAP32[$29 >> 2] | 0; //@line 8323
      HEAP32[$2 >> 2] = $29 + 4; //@line 8325
      $31 = $0; //@line 8326
      HEAP32[$31 >> 2] = $30; //@line 8328
      HEAP32[$31 + 4 >> 2] = 0; //@line 8331
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 8347
      $41 = $40; //@line 8348
      $43 = HEAP32[$41 >> 2] | 0; //@line 8350
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 8353
      HEAP32[$2 >> 2] = $40 + 8; //@line 8355
      $47 = $0; //@line 8356
      HEAP32[$47 >> 2] = $43; //@line 8358
      HEAP32[$47 + 4 >> 2] = $46; //@line 8361
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 8377
      $57 = HEAP32[$56 >> 2] | 0; //@line 8378
      HEAP32[$2 >> 2] = $56 + 4; //@line 8380
      $59 = ($57 & 65535) << 16 >> 16; //@line 8382
      $62 = $0; //@line 8385
      HEAP32[$62 >> 2] = $59; //@line 8387
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 8390
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 8406
      $72 = HEAP32[$71 >> 2] | 0; //@line 8407
      HEAP32[$2 >> 2] = $71 + 4; //@line 8409
      $73 = $0; //@line 8411
      HEAP32[$73 >> 2] = $72 & 65535; //@line 8413
      HEAP32[$73 + 4 >> 2] = 0; //@line 8416
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 8432
      $83 = HEAP32[$82 >> 2] | 0; //@line 8433
      HEAP32[$2 >> 2] = $82 + 4; //@line 8435
      $85 = ($83 & 255) << 24 >> 24; //@line 8437
      $88 = $0; //@line 8440
      HEAP32[$88 >> 2] = $85; //@line 8442
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 8445
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 8461
      $98 = HEAP32[$97 >> 2] | 0; //@line 8462
      HEAP32[$2 >> 2] = $97 + 4; //@line 8464
      $99 = $0; //@line 8466
      HEAP32[$99 >> 2] = $98 & 255; //@line 8468
      HEAP32[$99 + 4 >> 2] = 0; //@line 8471
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 8487
      $109 = +HEAPF64[$108 >> 3]; //@line 8488
      HEAP32[$2 >> 2] = $108 + 8; //@line 8490
      HEAPF64[$0 >> 3] = $109; //@line 8491
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 8507
      $116 = +HEAPF64[$115 >> 3]; //@line 8508
      HEAP32[$2 >> 2] = $115 + 8; //@line 8510
      HEAPF64[$0 >> 3] = $116; //@line 8511
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function _wcsnrtombs($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$04773 = 0, $$05072 = 0, $$053$$050 = 0, $$05371 = 0, $$062 = 0, $$074 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$154 = 0, $$24968 = 0, $$25267 = 0, $$255 = 0, $$269 = 0, $$3 = 0, $$35666 = 0, $$57 = 0, $$cast = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $24 = 0, $30 = 0, $31 = 0, $40 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 17135
 STACKTOP = STACKTOP + 272 | 0; //@line 17136
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272); //@line 17136
 $5 = sp + 8 | 0; //@line 17137
 $6 = sp; //@line 17138
 $7 = HEAP32[$1 >> 2] | 0; //@line 17139
 HEAP32[$6 >> 2] = $7; //@line 17140
 $8 = ($0 | 0) != 0; //@line 17141
 $$ = $8 ? $3 : 256; //@line 17142
 $$57 = $8 ? $0 : $5; //@line 17143
 $$cast = $7; //@line 17144
 L1 : do {
  if (($$ | 0) != 0 & ($7 | 0) != 0) {
   $$04773 = 0; //@line 17150
   $$05072 = $2; //@line 17150
   $$05371 = $$; //@line 17150
   $$074 = $$57; //@line 17150
   $45 = $$cast; //@line 17150
   while (1) {
    $11 = $$05072 >>> 0 >= $$05371 >>> 0; //@line 17152
    if (!($11 | $$05072 >>> 0 > 32)) {
     $$062 = $$074; //@line 17156
     $$148 = $$04773; //@line 17156
     $$151 = $$05072; //@line 17156
     $$255 = $$05371; //@line 17156
     $24 = $45; //@line 17156
     break L1;
    }
    $$053$$050 = $11 ? $$05371 : $$05072; //@line 17159
    $14 = $$05072 - $$053$$050 | 0; //@line 17160
    $15 = _wcsrtombs($$074, $6, $$053$$050, 0) | 0; //@line 17161
    if (($15 | 0) == -1) {
     break;
    }
    $17 = ($$074 | 0) == ($5 | 0); //@line 17166
    $$154 = $$05371 - ($17 ? 0 : $15) | 0; //@line 17169
    $$1 = $17 ? $$074 : $$074 + $15 | 0; //@line 17170
    $20 = $15 + $$04773 | 0; //@line 17171
    $21 = HEAP32[$6 >> 2] | 0; //@line 17172
    if (($$154 | 0) != 0 & ($21 | 0) != 0) {
     $$04773 = $20; //@line 17177
     $$05072 = $14; //@line 17177
     $$05371 = $$154; //@line 17177
     $$074 = $$1; //@line 17177
     $45 = $21; //@line 17177
    } else {
     $$062 = $$1; //@line 17179
     $$148 = $20; //@line 17179
     $$151 = $14; //@line 17179
     $$255 = $$154; //@line 17179
     $24 = $21; //@line 17179
     break L1;
    }
   }
   $$062 = $$074; //@line 17184
   $$148 = -1; //@line 17184
   $$151 = $14; //@line 17184
   $$255 = 0; //@line 17184
   $24 = HEAP32[$6 >> 2] | 0; //@line 17184
  } else {
   $$062 = $$57; //@line 17186
   $$148 = 0; //@line 17186
   $$151 = $2; //@line 17186
   $$255 = $$; //@line 17186
   $24 = $$cast; //@line 17186
  }
 } while (0);
 L8 : do {
  if (!$24) {
   $$3 = $$148; //@line 17192
  } else {
   if (($$255 | 0) != 0 & ($$151 | 0) != 0) {
    $$24968 = $$148; //@line 17198
    $$25267 = $$151; //@line 17198
    $$269 = $$062; //@line 17198
    $$35666 = $$255; //@line 17198
    $30 = $24; //@line 17198
    while (1) {
     $31 = _wcrtomb($$269, HEAP32[$30 >> 2] | 0, 0) | 0; //@line 17201
     if (($31 + 1 | 0) >>> 0 < 2) {
      break;
     }
     $30 = (HEAP32[$6 >> 2] | 0) + 4 | 0; //@line 17208
     HEAP32[$6 >> 2] = $30; //@line 17209
     $$25267 = $$25267 + -1 | 0; //@line 17210
     $$35666 = $$35666 - $31 | 0; //@line 17212
     $40 = $31 + $$24968 | 0; //@line 17213
     if (!(($$35666 | 0) != 0 & ($$25267 | 0) != 0)) {
      $$3 = $40; //@line 17220
      break L8;
     } else {
      $$24968 = $40; //@line 17218
      $$269 = $$269 + $31 | 0; //@line 17218
     }
    }
    if (!$31) {
     HEAP32[$6 >> 2] = 0; //@line 17226
     $$3 = $$24968; //@line 17227
    } else {
     $$3 = -1; //@line 17229
    }
   } else {
    $$3 = $$148; //@line 17232
   }
  }
 } while (0);
 if ($8) {
  HEAP32[$1 >> 2] = HEAP32[$6 >> 2]; //@line 17238
 }
 STACKTOP = sp; //@line 17240
 return $$3 | 0; //@line 17240
}
function __ZNSt3__213move_backwardIP13CharmFunctionS1_S2_RS1_PS2_iLi0EEENS_16__deque_iteratorIT0_T1_T2_T3_T4_XT5_EEET_SC_SB_PNS_9enable_ifIXsr27__is_random_access_iteratorISC_EE5valueEvE4typeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$025 = 0, $$02644 = 0, $$056$i$i = 0, $$07$i$i = 0, $$sink$i$i = 0, $$sink$i$i$i$i = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $26 = 0, $28 = 0, $34 = 0, $37 = 0, $40 = 0, $41 = 0, $55 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $tmpcast27$sroa$0$0$in = 0, $$02644$looptemp = 0;
 if (($2 | 0) == ($1 | 0)) {
  $69 = $3; //@line 13460
  $70 = $69; //@line 13461
  $71 = HEAP32[$70 >> 2] | 0; //@line 13462
  $72 = $69 + 4 | 0; //@line 13463
  $73 = $72; //@line 13464
  $74 = HEAP32[$73 >> 2] | 0; //@line 13465
  $75 = $0; //@line 13466
  $76 = $75; //@line 13467
  HEAP32[$76 >> 2] = $71; //@line 13468
  $77 = $75 + 4 | 0; //@line 13469
  $78 = $77; //@line 13470
  HEAP32[$78 >> 2] = $74; //@line 13471
  return;
 }
 $6 = $1; //@line 13474
 $7 = $3 + 4 | 0; //@line 13475
 $$02644 = $2; //@line 13476
 do {
  $8 = $3; //@line 13478
  $10 = HEAP32[$8 >> 2] | 0; //@line 13480
  $14 = $10; //@line 13484
  $17 = (HEAP32[$8 + 4 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0; //@line 13487
  $18 = ($17 | 0) / 72 | 0; //@line 13488
  $19 = $18 + -1 | 0; //@line 13489
  if (($17 | 0) > 72) {
   $22 = $14 + ((($19 >>> 0) / 56 | 0) << 2) | 0; //@line 13493
   $$sink$i$i$i$i = (HEAP32[$22 >> 2] | 0) + ((($19 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13497
   $tmpcast27$sroa$0$0$in = $22; //@line 13497
  } else {
   $26 = 56 - $18 | 0; //@line 13499
   $28 = $14 + ((($26 | 0) / -56 | 0) << 2) | 0; //@line 13501
   $$sink$i$i$i$i = (HEAP32[$28 >> 2] | 0) + ((55 - (($26 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 13506
   $tmpcast27$sroa$0$0$in = $28; //@line 13506
  }
  $34 = $$sink$i$i$i$i + 72 | 0; //@line 13509
  $37 = ($34 - (HEAP32[$tmpcast27$sroa$0$0$in >> 2] | 0) | 0) / 72 | 0; //@line 13512
  $40 = ($$02644 - $6 | 0) / 72 | 0; //@line 13515
  $41 = ($40 | 0) > ($37 | 0); //@line 13516
  $$025 = $41 ? $37 : $40; //@line 13519
  $$02644$looptemp = $$02644;
  $$02644 = $41 ? $$02644 + ((0 - $37 | 0) * 72 | 0) | 0 : $1; //@line 13520
  if (($$02644$looptemp | 0) != ($$02644 | 0)) {
   $$056$i$i = $$02644$looptemp; //@line 13523
   $$07$i$i = $34; //@line 13523
   do {
    $$056$i$i = $$056$i$i + -72 | 0; //@line 13525
    $$07$i$i = $$07$i$i + -72 | 0; //@line 13526
    __ZN13CharmFunctionaSEOS_($$07$i$i, $$056$i$i) | 0; //@line 13527
   } while (($$056$i$i | 0) != ($$02644 | 0));
  }
  if ($$025 | 0) {
   $55 = (((HEAP32[$7 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0) / 72 | 0) - $$025 | 0; //@line 13543
   if (($55 | 0) > 0) {
    $58 = $14 + ((($55 >>> 0) / 56 | 0) << 2) | 0; //@line 13547
    HEAP32[$3 >> 2] = $58; //@line 13548
    $$sink$i$i = (HEAP32[$58 >> 2] | 0) + ((($55 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13552
   } else {
    $62 = 55 - $55 | 0; //@line 13554
    $64 = $14 + ((($62 | 0) / -56 | 0) << 2) | 0; //@line 13556
    HEAP32[$3 >> 2] = $64; //@line 13557
    $$sink$i$i = (HEAP32[$64 >> 2] | 0) + ((55 - (($62 | 0) % 56 | 0) | 0) * 72 | 0) | 0; //@line 13562
   }
   HEAP32[$7 >> 2] = $$sink$i$i; //@line 13564
  }
 } while (($$02644 | 0) != ($1 | 0));
 $69 = $3; //@line 13573
 $70 = $69; //@line 13574
 $71 = HEAP32[$70 >> 2] | 0; //@line 13575
 $72 = $69 + 4 | 0; //@line 13576
 $73 = $72; //@line 13577
 $74 = HEAP32[$73 >> 2] | 0; //@line 13578
 $75 = $0; //@line 13579
 $76 = $75; //@line 13580
 HEAP32[$76 >> 2] = $71; //@line 13581
 $77 = $75 + 4 | 0; //@line 13582
 $78 = $77; //@line 13583
 HEAP32[$78 >> 2] = $74; //@line 13584
 return;
}
function __ZNSt3__28functionIFvP6RunnerP13RunnerContextEE4swapERS6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $51 = 0, $56 = 0, $58 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 15592
 STACKTOP = STACKTOP + 16 | 0; //@line 15593
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15593
 $2 = sp; //@line 15594
 if (($1 | 0) == ($0 | 0)) {
  STACKTOP = sp; //@line 15597
  return;
 }
 $4 = $0 + 16 | 0; //@line 15599
 $5 = HEAP32[$4 >> 2] | 0; //@line 15600
 $7 = $5; //@line 15602
 $8 = $1 + 16 | 0; //@line 15603
 if (($5 | 0) != ($0 | 0)) {
  $51 = HEAP32[$8 >> 2] | 0; //@line 15605
  if (($1 | 0) != ($51 | 0)) {
   HEAP32[$4 >> 2] = $51; //@line 15609
   HEAP32[$8 >> 2] = $7; //@line 15610
   STACKTOP = sp; //@line 15611
   return;
  }
  __THREW__ = 0; //@line 15616
  invoke_vii(HEAP32[(HEAP32[$51 >> 2] | 0) + 12 >> 2] | 0, $51 | 0, $0 | 0); //@line 15617
  $56 = __THREW__; //@line 15618
  __THREW__ = 0; //@line 15618
  if ($56 & 1) {
   $64 = ___cxa_find_matching_catch_3(0) | 0; //@line 15621
   $65 = tempRet0; //@line 15622
   ___clang_call_terminate($64); //@line 15623
  }
  $58 = HEAP32[$8 >> 2] | 0; //@line 15626
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$58 >> 2] | 0) + 16 >> 2] & 511]($58); //@line 15630
  HEAP32[$8 >> 2] = HEAP32[$4 >> 2]; //@line 15632
  HEAP32[$4 >> 2] = $0; //@line 15633
  STACKTOP = sp; //@line 15634
  return;
 }
 if ((HEAP32[$8 >> 2] | 0) != ($1 | 0)) {
  __THREW__ = 0; //@line 15642
  invoke_vii(HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0, $5 | 0, $1 | 0); //@line 15643
  $43 = __THREW__; //@line 15644
  __THREW__ = 0; //@line 15644
  if ($43 & 1) {
   $64 = ___cxa_find_matching_catch_3(0) | 0; //@line 15647
   $65 = tempRet0; //@line 15648
   ___clang_call_terminate($64); //@line 15649
  }
  $45 = HEAP32[$4 >> 2] | 0; //@line 15652
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$45 >> 2] | 0) + 16 >> 2] & 511]($45); //@line 15656
  $49 = $1 + 16 | 0; //@line 15657
  HEAP32[$4 >> 2] = HEAP32[$49 >> 2]; //@line 15659
  HEAP32[$49 >> 2] = $1; //@line 15660
  STACKTOP = sp; //@line 15661
  return;
 }
 __THREW__ = 0; //@line 15666
 invoke_vii(HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0, $5 | 0, $2 | 0); //@line 15667
 $14 = __THREW__; //@line 15668
 __THREW__ = 0; //@line 15668
 if ($14 & 1) {
  $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 15671
  $39 = tempRet0; //@line 15672
  ___clang_call_terminate($38); //@line 15673
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 15676
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$16 >> 2] | 0) + 16 >> 2] & 511]($16); //@line 15680
 HEAP32[$4 >> 2] = 0; //@line 15681
 $20 = HEAP32[$8 >> 2] | 0; //@line 15682
 __THREW__ = 0; //@line 15686
 invoke_vii(HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] | 0, $20 | 0, $0 | 0); //@line 15687
 $24 = __THREW__; //@line 15688
 __THREW__ = 0; //@line 15688
 if ($24 & 1) {
  $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 15691
  $39 = tempRet0; //@line 15692
  ___clang_call_terminate($38); //@line 15693
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 15696
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$26 >> 2] | 0) + 16 >> 2] & 511]($26); //@line 15700
 HEAP32[$8 >> 2] = 0; //@line 15701
 HEAP32[$4 >> 2] = $0; //@line 15702
 __THREW__ = 0; //@line 15706
 invoke_vii(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0, $2 | 0, $1 | 0); //@line 15707
 $33 = __THREW__; //@line 15708
 __THREW__ = 0; //@line 15708
 if ($33 & 1) {
  $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 15711
  $39 = tempRet0; //@line 15712
  ___clang_call_terminate($38); //@line 15713
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] & 511]($2); //@line 15719
 HEAP32[$8 >> 2] = $1; //@line 15720
 STACKTOP = sp; //@line 15721
 return;
}
function __ZNSt3__28functionIFvP6RunnerEE4swapERS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $51 = 0, $56 = 0, $58 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 14761
 STACKTOP = STACKTOP + 16 | 0; //@line 14762
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14762
 $2 = sp; //@line 14763
 if (($1 | 0) == ($0 | 0)) {
  STACKTOP = sp; //@line 14766
  return;
 }
 $4 = $0 + 16 | 0; //@line 14768
 $5 = HEAP32[$4 >> 2] | 0; //@line 14769
 $7 = $5; //@line 14771
 $8 = $1 + 16 | 0; //@line 14772
 if (($5 | 0) != ($0 | 0)) {
  $51 = HEAP32[$8 >> 2] | 0; //@line 14774
  if (($1 | 0) != ($51 | 0)) {
   HEAP32[$4 >> 2] = $51; //@line 14778
   HEAP32[$8 >> 2] = $7; //@line 14779
   STACKTOP = sp; //@line 14780
   return;
  }
  __THREW__ = 0; //@line 14785
  invoke_vii(HEAP32[(HEAP32[$51 >> 2] | 0) + 12 >> 2] | 0, $51 | 0, $0 | 0); //@line 14786
  $56 = __THREW__; //@line 14787
  __THREW__ = 0; //@line 14787
  if ($56 & 1) {
   $64 = ___cxa_find_matching_catch_3(0) | 0; //@line 14790
   $65 = tempRet0; //@line 14791
   ___clang_call_terminate($64); //@line 14792
  }
  $58 = HEAP32[$8 >> 2] | 0; //@line 14795
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$58 >> 2] | 0) + 16 >> 2] & 511]($58); //@line 14799
  HEAP32[$8 >> 2] = HEAP32[$4 >> 2]; //@line 14801
  HEAP32[$4 >> 2] = $0; //@line 14802
  STACKTOP = sp; //@line 14803
  return;
 }
 if ((HEAP32[$8 >> 2] | 0) != ($1 | 0)) {
  __THREW__ = 0; //@line 14811
  invoke_vii(HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0, $5 | 0, $1 | 0); //@line 14812
  $43 = __THREW__; //@line 14813
  __THREW__ = 0; //@line 14813
  if ($43 & 1) {
   $64 = ___cxa_find_matching_catch_3(0) | 0; //@line 14816
   $65 = tempRet0; //@line 14817
   ___clang_call_terminate($64); //@line 14818
  }
  $45 = HEAP32[$4 >> 2] | 0; //@line 14821
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$45 >> 2] | 0) + 16 >> 2] & 511]($45); //@line 14825
  $49 = $1 + 16 | 0; //@line 14826
  HEAP32[$4 >> 2] = HEAP32[$49 >> 2]; //@line 14828
  HEAP32[$49 >> 2] = $1; //@line 14829
  STACKTOP = sp; //@line 14830
  return;
 }
 __THREW__ = 0; //@line 14835
 invoke_vii(HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0, $5 | 0, $2 | 0); //@line 14836
 $14 = __THREW__; //@line 14837
 __THREW__ = 0; //@line 14837
 if ($14 & 1) {
  $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 14840
  $39 = tempRet0; //@line 14841
  ___clang_call_terminate($38); //@line 14842
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 14845
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$16 >> 2] | 0) + 16 >> 2] & 511]($16); //@line 14849
 HEAP32[$4 >> 2] = 0; //@line 14850
 $20 = HEAP32[$8 >> 2] | 0; //@line 14851
 __THREW__ = 0; //@line 14855
 invoke_vii(HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] | 0, $20 | 0, $0 | 0); //@line 14856
 $24 = __THREW__; //@line 14857
 __THREW__ = 0; //@line 14857
 if ($24 & 1) {
  $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 14860
  $39 = tempRet0; //@line 14861
  ___clang_call_terminate($38); //@line 14862
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 14865
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$26 >> 2] | 0) + 16 >> 2] & 511]($26); //@line 14869
 HEAP32[$8 >> 2] = 0; //@line 14870
 HEAP32[$4 >> 2] = $0; //@line 14871
 __THREW__ = 0; //@line 14875
 invoke_vii(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0, $2 | 0, $1 | 0); //@line 14876
 $33 = __THREW__; //@line 14877
 __THREW__ = 0; //@line 14877
 if ($33 & 1) {
  $38 = ___cxa_find_matching_catch_3(0) | 0; //@line 14880
  $39 = tempRet0; //@line 14881
  ___clang_call_terminate($38); //@line 14882
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] & 511]($2); //@line 14888
 HEAP32[$8 >> 2] = $1; //@line 14889
 STACKTOP = sp; //@line 14890
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i$i = 0, $$pre$phi9Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $35 = 0, $39 = 0, $41 = 0, $43 = 0, $49 = 0, $51 = 0, $53 = 0, $55 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20476
 STACKTOP = STACKTOP + 16 | 0; //@line 20477
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20477
 $2 = sp; //@line 20478
 __THREW__ = 0; //@line 20479
 invoke_vii(136, $2 | 0, $0 | 0); //@line 20480
 $3 = __THREW__; //@line 20481
 __THREW__ = 0; //@line 20481
 L1 : do {
  if ($3 & 1) {
   $41 = ___cxa_find_matching_catch_3(0) | 0; //@line 20485
   $$0 = $41; //@line 20487
   $$pre$phi9Z2D = $0; //@line 20487
   $$pre$phiZ2D = $0; //@line 20487
   label = 12; //@line 20488
  } else {
   L4 : do {
    if (HEAP8[$2 >> 0] | 0) {
     $12 = HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0; //@line 20499
     $13 = $12; //@line 20500
     do {
      if (!$12) {
       label = 8; //@line 20504
      } else {
       $15 = $13 + 24 | 0; //@line 20506
       $16 = HEAP32[$15 >> 2] | 0; //@line 20507
       if (($16 | 0) == (HEAP32[$13 + 28 >> 2] | 0)) {
        $23 = HEAP32[(HEAP32[$12 >> 2] | 0) + 52 >> 2] | 0; //@line 20515
        $24 = __ZNSt3__211char_traitsIcE11to_int_typeEc($1) | 0; //@line 20516
        __THREW__ = 0; //@line 20517
        $25 = invoke_iii($23 | 0, $13 | 0, $24 | 0) | 0; //@line 20518
        $26 = __THREW__; //@line 20519
        __THREW__ = 0; //@line 20519
        if ($26 & 1) {
         break;
        } else {
         $$0$i$i = $25; //@line 20524
        }
       } else {
        HEAP32[$15 >> 2] = $16 + 1; //@line 20528
        HEAP8[$16 >> 0] = $1; //@line 20529
        $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($1) | 0; //@line 20531
       }
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        label = 8; //@line 20536
       } else {
        break L4;
       }
      }
     } while (0);
     if ((label | 0) == 8) {
      $35 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20546
      __THREW__ = 0; //@line 20550
      invoke_vii(112, $35 | 0, HEAP32[$35 + 16 >> 2] | 1 | 0); //@line 20551
      $39 = __THREW__; //@line 20552
      __THREW__ = 0; //@line 20552
      if (!($39 & 1)) {
       break;
      }
     }
     $43 = ___cxa_find_matching_catch_3(0) | 0; //@line 20558
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2); //@line 20560
     $$0 = $43; //@line 20561
     $$pre$phi9Z2D = $0; //@line 20561
     $$pre$phiZ2D = $0; //@line 20561
     label = 12; //@line 20562
     break L1;
    }
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2); //@line 20566
  }
 } while (0);
 do {
  if ((label | 0) == 12) {
   ___cxa_begin_catch($$0 | 0) | 0; //@line 20571
   __THREW__ = 0; //@line 20576
   invoke_vi(262, $$pre$phi9Z2D + (HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 20577
   $49 = __THREW__; //@line 20578
   __THREW__ = 0; //@line 20578
   if (!($49 & 1)) {
    ___cxa_end_catch(); //@line 20581
    break;
   }
   $51 = ___cxa_find_matching_catch_2() | 0; //@line 20584
   __THREW__ = 0; //@line 20586
   invoke_v(3); //@line 20587
   $53 = __THREW__; //@line 20588
   __THREW__ = 0; //@line 20588
   if ($53 & 1) {
    $55 = ___cxa_find_matching_catch_3(0) | 0; //@line 20591
    ___clang_call_terminate($55); //@line 20593
   } else {
    ___resumeException($51 | 0); //@line 20596
   }
  }
 } while (0);
 STACKTOP = sp; //@line 20601
 return $0 | 0; //@line 20601
}
function __ZN22CInterpretationCapsule3runEPc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$i$i = 0, $$017$i$i = 0, $$1 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 303
 STACKTOP = STACKTOP + 64 | 0; //@line 304
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 304
 $2 = sp + 40 | 0; //@line 305
 $3 = sp + 24 | 0; //@line 306
 $4 = sp + 12 | 0; //@line 307
 $5 = sp; //@line 308
 HEAP32[$2 >> 2] = 0; //@line 309
 HEAP32[$2 + 4 >> 2] = 0; //@line 309
 HEAP32[$2 + 8 >> 2] = 0; //@line 309
 $6 = _strlen($1) | 0; //@line 310
 if ($6 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($2); //@line 313
 }
 if ($6 >>> 0 < 11) {
  HEAP8[$2 + 11 >> 0] = $6; //@line 320
  if (!$6) {
   $$017$i$i = $2; //@line 323
  } else {
   $$016$i$i = $2; //@line 325
   label = 6; //@line 326
  }
 } else {
  $10 = $6 + 16 & -16; //@line 330
  $11 = __Znwj($10) | 0; //@line 331
  HEAP32[$2 >> 2] = $11; //@line 332
  HEAP32[$2 + 8 >> 2] = $10 | -2147483648; //@line 335
  HEAP32[$2 + 4 >> 2] = $6; //@line 337
  $$016$i$i = $11; //@line 338
  label = 6; //@line 339
 }
 if ((label | 0) == 6) {
  _memcpy($$016$i$i | 0, $1 | 0, $6 | 0) | 0; //@line 342
  $$017$i$i = $$016$i$i; //@line 343
 }
 HEAP8[$$017$i$i + $6 >> 0] = 0; //@line 346
 $20 = HEAP32[$0 + 4 >> 2] | 0; //@line 348
 $21 = HEAP32[$0 >> 2] | 0; //@line 349
 __THREW__ = 0; //@line 350
 invoke_vii(115, $4 | 0, $2 | 0); //@line 351
 $22 = __THREW__; //@line 352
 __THREW__ = 0; //@line 352
 if ($22 & 1) {
  $40 = ___cxa_find_matching_catch_2() | 0; //@line 355
  $$2 = tempRet0; //@line 357
  $$25 = $40; //@line 357
 } else {
  __THREW__ = 0; //@line 359
  invoke_viii(11, $3 | 0, $21 | 0, $4 | 0); //@line 360
  $24 = __THREW__; //@line 361
  __THREW__ = 0; //@line 361
  do {
   if ($24 & 1) {
    $42 = ___cxa_find_matching_catch_2() | 0; //@line 365
    $$1 = tempRet0; //@line 367
    $$14 = $42; //@line 367
   } else {
    $26 = $5 + 11 | 0; //@line 369
    HEAP32[$5 >> 2] = 0; //@line 370
    HEAP32[$5 + 4 >> 2] = 0; //@line 370
    HEAP32[$5 + 8 >> 2] = 0; //@line 370
    __THREW__ = 0; //@line 371
    invoke_viii(12, $20 | 0, $3 | 0, $5 | 0); //@line 372
    $27 = __THREW__; //@line 373
    __THREW__ = 0; //@line 373
    if ($27 & 1) {
     $44 = ___cxa_find_matching_catch_2() | 0; //@line 376
     $45 = tempRet0; //@line 377
     if ((HEAP8[$26 >> 0] | 0) < 0) {
      __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 382
     }
     __ZNSt3__24pairINS_6vectorI13CharmFunctionNS_9allocatorIS2_EEEEP16FunctionAnalyzerED2Ev($3); //@line 384
     $$1 = $45; //@line 385
     $$14 = $44; //@line 385
     break;
    }
    if ((HEAP8[$26 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 392
    }
    __ZNSt3__24pairINS_6vectorI13CharmFunctionNS_9allocatorIS2_EEEEP16FunctionAnalyzerED2Ev($3); //@line 394
    if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 400
    }
    if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) {
     STACKTOP = sp; //@line 406
     return;
    }
    __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 409
    STACKTOP = sp; //@line 410
    return;
   }
  } while (0);
  if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 418
   $$2 = $$1; //@line 419
   $$25 = $$14; //@line 419
  } else {
   $$2 = $$1; //@line 421
   $$25 = $$14; //@line 421
  }
 }
 if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$25 | 0); //@line 428
 }
 __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 432
 ___resumeException($$25 | 0); //@line 433
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$pre = 0, $12 = 0, $13 = 0, $23 = 0, $28 = 0, $31 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $93 = 0;
 $6 = $1 + 44 | 0; //@line 769
 $7 = HEAP32[$6 >> 2] | 0; //@line 770
 $8 = $1 + 24 | 0; //@line 771
 $9 = HEAP32[$8 >> 2] | 0; //@line 772
 $12 = $9; //@line 775
 if ($7 >>> 0 < $9 >>> 0) {
  HEAP32[$6 >> 2] = $9; //@line 777
  $39 = $12; //@line 778
 } else {
  $39 = $7; //@line 780
 }
 $13 = $5 & 24; //@line 782
 L4 : do {
  if (!$13) {
   $90 = -1; //@line 786
   $93 = -1; //@line 786
  } else {
   if (($4 | 0) == 1 & ($13 | 0) == 24) {
    $90 = -1; //@line 792
    $93 = -1; //@line 792
   } else {
    L7 : do {
     switch ($4 | 0) {
     case 0:
      {
       $42 = 0; //@line 797
       $43 = 0; //@line 797
       break;
      }
     case 1:
      {
       if (!($5 & 8)) {
        $28 = $12 - (HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 806
        $42 = $28; //@line 809
        $43 = (($28 | 0) < 0) << 31 >> 31; //@line 809
        break L7;
       } else {
        $23 = (HEAP32[$1 + 12 >> 2] | 0) - (HEAP32[$1 + 8 >> 2] | 0) | 0; //@line 816
        $42 = $23; //@line 819
        $43 = (($23 | 0) < 0) << 31 >> 31; //@line 819
        break L7;
       }
       break;
      }
     case 2:
      {
       $31 = $1 + 32 | 0; //@line 825
       if ((HEAP8[$31 + 11 >> 0] | 0) < 0) {
        $36 = HEAP32[$31 >> 2] | 0; //@line 831
       } else {
        $36 = $31; //@line 833
       }
       $38 = $39 - $36 | 0; //@line 836
       $42 = $38; //@line 839
       $43 = (($38 | 0) < 0) << 31 >> 31; //@line 839
       break;
      }
     default:
      {
       $90 = -1; //@line 843
       $93 = -1; //@line 843
       break L4;
      }
     }
    } while (0);
    $44 = _i64Add($42 | 0, $43 | 0, $2 | 0, $3 | 0) | 0; //@line 848
    $45 = tempRet0; //@line 849
    if (($45 | 0) < 0) {
     $90 = -1; //@line 852
     $93 = -1; //@line 852
    } else {
     $47 = $1 + 32 | 0; //@line 854
     if ((HEAP8[$47 + 11 >> 0] | 0) < 0) {
      $52 = HEAP32[$47 >> 2] | 0; //@line 860
     } else {
      $52 = $47; //@line 862
     }
     $54 = $39 - $52 | 0; //@line 865
     $56 = (($54 | 0) < 0) << 31 >> 31; //@line 867
     if (($45 | 0) > ($56 | 0) | ($45 | 0) == ($56 | 0) & $44 >>> 0 > $54 >>> 0) {
      $90 = -1; //@line 874
      $93 = -1; //@line 874
     } else {
      $$pre = $5 & 8; //@line 879
      if (!(($44 | 0) == 0 & ($45 | 0) == 0)) {
       if ($$pre | 0) {
        if (!(HEAP32[$1 + 12 >> 2] | 0)) {
         $90 = -1; //@line 887
         $93 = -1; //@line 887
         break;
        }
       }
       if (($5 & 16 | 0) != 0 & ($9 | 0) == 0) {
        $90 = -1; //@line 896
        $93 = -1; //@line 896
        break;
       }
      }
      if ($$pre | 0) {
       HEAP32[$1 + 12 >> 2] = (HEAP32[$1 + 8 >> 2] | 0) + $44; //@line 906
       HEAP32[$1 + 16 >> 2] = $39; //@line 908
      }
      if (!($5 & 16)) {
       $90 = $44; //@line 913
       $93 = $45; //@line 913
      } else {
       HEAP32[$8 >> 2] = (HEAP32[$1 + 20 >> 2] | 0) + $44; //@line 918
       $90 = $44; //@line 919
       $93 = $45; //@line 919
      }
     }
    }
   }
  }
 } while (0);
 $83 = $0; //@line 926
 HEAP32[$83 >> 2] = 0; //@line 928
 HEAP32[$83 + 4 >> 2] = 0; //@line 931
 $88 = $0 + 8 | 0; //@line 933
 HEAP32[$88 >> 2] = $90; //@line 935
 HEAP32[$88 + 4 >> 2] = $93; //@line 938
 return;
}
function __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE8__appendINS_16__deque_iteratorIS1_PKS1_RS7_PKS8_iLi0EEEEEvT_SD_PNS_9enable_ifIXsr21__is_forward_iteratorISD_EE5valueEvE4typeE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i$i = 0, $$sroa$0$022 = 0, $$sroa$0$1 = 0, $$sroa$5$0$ph = 0, $$sroa$5$021 = 0, $$sroa$5$1 = 0, $10 = 0, $12 = 0, $15 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $73 = 0, $75 = 0, $77 = 0, $81 = 0, $82 = 0, $86 = 0, $88 = 0, $9 = 0;
 $4 = $1; //@line 5185
 $6 = HEAP32[$4 >> 2] | 0; //@line 5187
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 5190
 $10 = $2; //@line 5191
 $12 = HEAP32[$10 >> 2] | 0; //@line 5193
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 5196
 if (($15 | 0) == ($9 | 0)) {
  $$0$i$i$i = 0; //@line 5202
 } else {
  $$0$i$i$i = (($15 - (HEAP32[$12 >> 2] | 0) | 0) / 72 | 0) + (($12 - $6 >> 2) * 56 | 0) + (($9 - (HEAP32[$6 >> 2] | 0) | 0) / -72 | 0) | 0; //@line 5217
 }
 $32 = $0 + 8 | 0; //@line 5219
 $33 = HEAP32[$32 >> 2] | 0; //@line 5220
 $34 = $0 + 4 | 0; //@line 5221
 $35 = HEAP32[$34 >> 2] | 0; //@line 5222
 $37 = $33 - $35 >> 2; //@line 5224
 $41 = $0 + 16 | 0; //@line 5229
 $42 = HEAP32[$41 >> 2] | 0; //@line 5230
 $43 = $0 + 20 | 0; //@line 5231
 $44 = HEAP32[$43 >> 2] | 0; //@line 5232
 $45 = (($37 | 0) == 0 ? 0 : ($37 * 56 | 0) + -1 | 0) - ($44 + $42) | 0; //@line 5234
 if ($$0$i$i$i >>> 0 > $45 >>> 0) {
  __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE19__add_back_capacityEj($0, $$0$i$i$i - $45 | 0); //@line 5240
  $51 = HEAP32[$43 >> 2] | 0; //@line 5245
  $52 = HEAP32[$41 >> 2] | 0; //@line 5245
  $55 = HEAP32[$34 >> 2] | 0; //@line 5245
  $56 = HEAP32[$32 >> 2] | 0; //@line 5245
 } else {
  $51 = $44; //@line 5247
  $52 = $42; //@line 5247
  $55 = $35; //@line 5247
  $56 = $33; //@line 5247
 }
 $50 = $52 + $51 | 0; //@line 5249
 $54 = $55 + ((($50 >>> 0) / 56 | 0) << 2) | 0; //@line 5251
 if (($56 | 0) == ($55 | 0)) {
  $$sroa$5$0$ph = 0; //@line 5254
 } else {
  $$sroa$5$0$ph = (HEAP32[$54 >> 2] | 0) + ((($50 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 5260
 }
 $61 = $1 + 4 | 0; //@line 5262
 $62 = HEAP32[$61 >> 2] | 0; //@line 5263
 $64 = HEAP32[$2 + 4 >> 2] | 0; //@line 5265
 if (($62 | 0) == ($64 | 0)) {
  return;
 }
 $$sroa$0$022 = $54; //@line 5270
 $$sroa$5$021 = $$sroa$5$0$ph; //@line 5270
 $67 = $62; //@line 5270
 $77 = $6; //@line 5270
 while (1) {
  $66 = $$sroa$5$021; //@line 5272
  __ZN13CharmFunctionC2ERKS_($66, $67); //@line 5273
  $69 = $66 + 72 | 0; //@line 5275
  if (($69 - (HEAP32[$$sroa$0$022 >> 2] | 0) | 0) == 4032) {
   $73 = $$sroa$0$022 + 4 | 0; //@line 5280
   $$sroa$0$1 = $73; //@line 5282
   $$sroa$5$1 = HEAP32[$73 >> 2] | 0; //@line 5282
  } else {
   $$sroa$0$1 = $$sroa$0$022; //@line 5284
   $$sroa$5$1 = $69; //@line 5284
  }
  $75 = $67 + 72 | 0; //@line 5286
  HEAP32[$61 >> 2] = $75; //@line 5287
  if (($75 - (HEAP32[$77 >> 2] | 0) | 0) == 4032) {
   $81 = $77 + 4 | 0; //@line 5293
   HEAP32[$1 >> 2] = $81; //@line 5294
   $82 = HEAP32[$81 >> 2] | 0; //@line 5295
   HEAP32[$61 >> 2] = $82; //@line 5296
   $86 = $82; //@line 5298
   $88 = $81; //@line 5298
  } else {
   $86 = $75; //@line 5300
   $88 = $77; //@line 5300
  }
  HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 1; //@line 5304
  if (($86 | 0) == ($64 | 0)) {
   break;
  } else {
   $$sroa$0$022 = $$sroa$0$1; //@line 5309
   $$sroa$5$021 = $$sroa$5$1; //@line 5309
   $67 = $86; //@line 5309
   $77 = $88; //@line 5309
  }
 }
 return;
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$016$i$i = 0, $$pre$phi47Z2D = 0, $$pre$phi49Z2D = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $27 = 0, $28 = 0, $33 = 0, $42 = 0, $43 = 0, $49 = 0, $57 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 9135
 STACKTOP = STACKTOP + 16 | 0; //@line 9136
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9136
 $6 = sp; //@line 9137
 $7 = HEAP32[$0 >> 2] | 0; //@line 9138
 if (!$7) {
  $$sroa$0$2 = 0; //@line 9141
  STACKTOP = sp; //@line 9142
  return $$sroa$0$2 | 0; //@line 9142
 }
 $9 = $3; //@line 9144
 $10 = $1; //@line 9145
 $11 = $9 - $10 | 0; //@line 9146
 $12 = $4 + 12 | 0; //@line 9147
 $13 = HEAP32[$12 >> 2] | 0; //@line 9148
 $$0 = ($13 | 0) > ($11 | 0) ? $13 - $11 | 0 : 0; //@line 9151
 $16 = $2; //@line 9152
 $17 = $16 - $10 | 0; //@line 9153
 if (($17 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 63]($7, $1, $17) | 0) != ($17 | 0)) {
   HEAP32[$0 >> 2] = 0; //@line 9162
   $$sroa$0$2 = 0; //@line 9163
   STACKTOP = sp; //@line 9164
   return $$sroa$0$2 | 0; //@line 9164
  }
 }
 do {
  if (($$0 | 0) > 0) {
   HEAP32[$6 >> 2] = 0; //@line 9170
   HEAP32[$6 + 4 >> 2] = 0; //@line 9170
   HEAP32[$6 + 8 >> 2] = 0; //@line 9170
   if ($$0 >>> 0 < 11) {
    $33 = $6 + 11 | 0; //@line 9174
    HEAP8[$33 >> 0] = $$0; //@line 9175
    $$016$i$i = $6; //@line 9176
    $$pre$phi47Z2D = $33; //@line 9176
    $$pre$phi49Z2D = $6; //@line 9176
   } else {
    $27 = $$0 + 16 & -16; //@line 9179
    $28 = __Znwj($27) | 0; //@line 9180
    HEAP32[$6 >> 2] = $28; //@line 9181
    HEAP32[$6 + 8 >> 2] = $27 | -2147483648; //@line 9184
    HEAP32[$6 + 4 >> 2] = $$0; //@line 9186
    $$016$i$i = $28; //@line 9188
    $$pre$phi47Z2D = $6 + 11 | 0; //@line 9188
    $$pre$phi49Z2D = $6; //@line 9188
   }
   _memset($$016$i$i | 0, $5 | 0, $$0 | 0) | 0; //@line 9190
   HEAP8[$$016$i$i + $$0 >> 0] = 0; //@line 9192
   __THREW__ = 0; //@line 9200
   $42 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0, $7 | 0, ((HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0 ? HEAP32[$$pre$phi49Z2D >> 2] | 0 : $6) | 0, $$0 | 0) | 0; //@line 9201
   $43 = __THREW__; //@line 9202
   __THREW__ = 0; //@line 9202
   if ($43 & 1) {
    $49 = ___cxa_find_matching_catch_2() | 0; //@line 9205
    if ((HEAP8[$$pre$phi47Z2D >> 0] | 0) >= 0) {
     ___resumeException($49 | 0); //@line 9210
    }
    __ZdlPv(HEAP32[$$pre$phi49Z2D >> 2] | 0); //@line 9214
    ___resumeException($49 | 0); //@line 9215
   }
   if (($42 | 0) == ($$0 | 0)) {
    if ((HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$$pre$phi49Z2D >> 2] | 0); //@line 9224
    }
    break;
   }
   HEAP32[$0 >> 2] = 0; //@line 9228
   if ((HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$$pre$phi49Z2D >> 2] | 0); //@line 9233
   }
   $$sroa$0$2 = 0; //@line 9235
   STACKTOP = sp; //@line 9236
   return $$sroa$0$2 | 0; //@line 9236
  }
 } while (0);
 $57 = $9 - $16 | 0; //@line 9239
 if (($57 | 0) > 0) {
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 63]($7, $2, $57) | 0) != ($57 | 0)) {
   HEAP32[$0 >> 2] = 0; //@line 9248
   $$sroa$0$2 = 0; //@line 9249
   STACKTOP = sp; //@line 9250
   return $$sroa$0$2 | 0; //@line 9250
  }
 }
 HEAP32[$12 >> 2] = 0; //@line 9253
 $$sroa$0$2 = $7; //@line 9254
 STACKTOP = sp; //@line 9255
 return $$sroa$0$2 | 0; //@line 9255
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$2 = 0, $$pre49 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $32 = 0, $43 = 0, $46 = 0, $48 = 0, $58 = 0, $63 = 0, $74 = 0, $80 = 0, $85 = 0, $88 = 0, label = 0;
 HEAP32[$2 >> 2] = $0; //@line 55628
 HEAP32[$5 >> 2] = $3; //@line 55629
 $$pre49 = $4; //@line 55632
 if (!($7 & 2)) {
  label = 4; //@line 55634
 } else {
  if (($$pre49 - $3 | 0) < 3) {
   $$2 = 1; //@line 55640
  } else {
   HEAP32[$5 >> 2] = $3 + 1; //@line 55643
   HEAP8[$3 >> 0] = -17; //@line 55644
   $14 = HEAP32[$5 >> 2] | 0; //@line 55645
   HEAP32[$5 >> 2] = $14 + 1; //@line 55647
   HEAP8[$14 >> 0] = -69; //@line 55648
   $16 = HEAP32[$5 >> 2] | 0; //@line 55649
   HEAP32[$5 >> 2] = $16 + 1; //@line 55651
   HEAP8[$16 >> 0] = -65; //@line 55652
   label = 4; //@line 55653
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $18 = HEAP32[$2 >> 2] | 0; //@line 55659
   while (1) {
    if ($18 >>> 0 >= $1 >>> 0) {
     $$2 = 0; //@line 55663
     break L4;
    }
    $20 = HEAP32[$18 >> 2] | 0; //@line 55666
    if ($20 >>> 0 > $6 >>> 0 | ($20 & -2048 | 0) == 55296) {
     $$2 = 2; //@line 55672
     break L4;
    }
    do {
     if ($20 >>> 0 < 128) {
      $25 = HEAP32[$5 >> 2] | 0; //@line 55678
      if (($$pre49 - $25 | 0) < 1) {
       $$2 = 1; //@line 55683
       break L4;
      }
      HEAP32[$5 >> 2] = $25 + 1; //@line 55688
      HEAP8[$25 >> 0] = $20; //@line 55689
     } else {
      if ($20 >>> 0 < 2048) {
       $32 = HEAP32[$5 >> 2] | 0; //@line 55693
       if (($$pre49 - $32 | 0) < 2) {
        $$2 = 1; //@line 55698
        break L4;
       }
       HEAP32[$5 >> 2] = $32 + 1; //@line 55705
       HEAP8[$32 >> 0] = $20 >>> 6 | 192; //@line 55706
       $43 = HEAP32[$5 >> 2] | 0; //@line 55710
       HEAP32[$5 >> 2] = $43 + 1; //@line 55712
       HEAP8[$43 >> 0] = $20 & 63 | 128; //@line 55713
       break;
      }
      $46 = HEAP32[$5 >> 2] | 0; //@line 55717
      $48 = $$pre49 - $46 | 0; //@line 55719
      if ($20 >>> 0 < 65536) {
       if (($48 | 0) < 3) {
        $$2 = 1; //@line 55723
        break L4;
       }
       HEAP32[$5 >> 2] = $46 + 1; //@line 55730
       HEAP8[$46 >> 0] = $20 >>> 12 | 224; //@line 55731
       $58 = HEAP32[$5 >> 2] | 0; //@line 55736
       HEAP32[$5 >> 2] = $58 + 1; //@line 55738
       HEAP8[$58 >> 0] = $20 >>> 6 & 63 | 128; //@line 55739
       $63 = HEAP32[$5 >> 2] | 0; //@line 55743
       HEAP32[$5 >> 2] = $63 + 1; //@line 55745
       HEAP8[$63 >> 0] = $20 & 63 | 128; //@line 55746
       break;
      } else {
       if (($48 | 0) < 4) {
        $$2 = 1; //@line 55751
        break L4;
       }
       HEAP32[$5 >> 2] = $46 + 1; //@line 55758
       HEAP8[$46 >> 0] = $20 >>> 18 | 240; //@line 55759
       $74 = HEAP32[$5 >> 2] | 0; //@line 55764
       HEAP32[$5 >> 2] = $74 + 1; //@line 55766
       HEAP8[$74 >> 0] = $20 >>> 12 & 63 | 128; //@line 55767
       $80 = HEAP32[$5 >> 2] | 0; //@line 55772
       HEAP32[$5 >> 2] = $80 + 1; //@line 55774
       HEAP8[$80 >> 0] = $20 >>> 6 & 63 | 128; //@line 55775
       $85 = HEAP32[$5 >> 2] | 0; //@line 55779
       HEAP32[$5 >> 2] = $85 + 1; //@line 55781
       HEAP8[$85 >> 0] = $20 & 63 | 128; //@line 55782
       break;
      }
     }
    } while (0);
    $88 = (HEAP32[$2 >> 2] | 0) + 4 | 0; //@line 55788
    HEAP32[$2 >> 2] = $88; //@line 55789
    $18 = $88; //@line 55790
   }
  }
 } while (0);
 return $$2 | 0; //@line 55794
}
function __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i25 = 0, $$0$i30 = 0, $$1 = 0, $$123 = 0, $10 = 0, $11 = 0, $16 = 0, $18 = 0, $21 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $41 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 54580
 STACKTOP = STACKTOP + 16 | 0; //@line 54581
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 54581
 $6 = sp; //@line 54582
 HEAP32[$6 >> 2] = 0; //@line 54583
 HEAP32[$6 + 4 >> 2] = 0; //@line 54583
 HEAP32[$6 + 8 >> 2] = 0; //@line 54583
 $$0$i$i = 0; //@line 54584
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0; //@line 54591
  $$0$i$i = $$0$i$i + 1 | 0; //@line 54593
 }
 $10 = HEAP8[$5 + 11 >> 0] | 0; //@line 54596
 $11 = $10 << 24 >> 24 < 0; //@line 54597
 $16 = $11 ? HEAP32[$5 >> 2] | 0 : $5; //@line 54602
 $18 = $16 + ($11 ? HEAP32[$5 + 4 >> 2] | 0 : $10 & 255) | 0; //@line 54604
 $$0$i30 = $16; //@line 54605
 while (1) {
  if ($$0$i30 >>> 0 >= $18 >>> 0) {
   label = 8; //@line 54609
   break;
  }
  __THREW__ = 0; //@line 54613
  invoke_vii(116, $6 | 0, HEAP8[$$0$i30 >> 0] | 0); //@line 54614
  $21 = __THREW__; //@line 54615
  __THREW__ = 0; //@line 54615
  if ($21 & 1) {
   label = 9; //@line 54618
   break;
  }
  $$0$i30 = $$0$i30 + 1 | 0; //@line 54622
 }
 do {
  if ((label | 0) == 8) {
   $32 = (HEAP8[$6 + 11 >> 0] | 0) < 0 ? HEAP32[$6 >> 2] | 0 : $6; //@line 54634
   __THREW__ = 0; //@line 54635
   $33 = invoke_iiiii(17, (($2 | 0) == -1 ? -1 : $2 << 1) | 0, $3 | 0, $4 | 0, $32 | 0) | 0; //@line 54636
   $34 = __THREW__; //@line 54637
   __THREW__ = 0; //@line 54637
   if ($34 & 1) {
    $47 = ___cxa_find_matching_catch_2() | 0; //@line 54640
    $$1 = $47; //@line 54642
    $$123 = tempRet0; //@line 54642
    break;
   }
   HEAP32[$0 >> 2] = 0; //@line 54645
   HEAP32[$0 + 4 >> 2] = 0; //@line 54645
   HEAP32[$0 + 8 >> 2] = 0; //@line 54645
   $$0$i$i25 = 0; //@line 54646
   while (1) {
    if (($$0$i$i25 | 0) == 3) {
     break;
    }
    HEAP32[$0 + ($$0$i$i25 << 2) >> 2] = 0; //@line 54653
    $$0$i$i25 = $$0$i$i25 + 1 | 0; //@line 54655
   }
   $41 = $32 + (_strlen($33) | 0) | 0; //@line 54658
   $$0$i = $32; //@line 54659
   while (1) {
    if ($$0$i >>> 0 >= $41 >>> 0) {
     label = 19; //@line 54663
     break;
    }
    __THREW__ = 0; //@line 54667
    invoke_vii(116, $0 | 0, HEAP8[$$0$i >> 0] | 0); //@line 54668
    $44 = __THREW__; //@line 54669
    __THREW__ = 0; //@line 54669
    if ($44 & 1) {
     label = 18; //@line 54672
     break;
    }
    $$0$i = $$0$i + 1 | 0; //@line 54676
   }
   if ((label | 0) == 18) {
    $49 = ___cxa_find_matching_catch_2() | 0; //@line 54679
    $50 = tempRet0; //@line 54680
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0); //@line 54681
    $$1 = $49; //@line 54682
    $$123 = $50; //@line 54682
    break;
   } else if ((label | 0) == 19) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6); //@line 54686
    STACKTOP = sp; //@line 54687
    return;
   }
  } else if ((label | 0) == 9) {
   $36 = ___cxa_find_matching_catch_2() | 0; //@line 54691
   $$1 = $36; //@line 54693
   $$123 = tempRet0; //@line 54693
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6); //@line 54696
 ___resumeException($$1 | 0); //@line 54697
}
function __ZN5Stack3popEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$03 = 0, $$byval_copy = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11906
 STACKTOP = STACKTOP + 96 | 0; //@line 11907
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 11907
 $$byval_copy = sp + 88 | 0; //@line 11908
 $2 = sp + 80 | 0; //@line 11909
 $3 = sp; //@line 11910
 $4 = sp + 72 | 0; //@line 11911
 $5 = $1 + 80 | 0; //@line 11912
 $6 = $1 + 84 | 0; //@line 11913
 $7 = HEAP32[$6 >> 2] | 0; //@line 11914
 $8 = $1 + 96 | 0; //@line 11915
 $9 = HEAP32[$8 >> 2] | 0; //@line 11916
 $11 = $7 + ((($9 >>> 0) / 56 | 0) << 2) | 0; //@line 11918
 if ((HEAP32[$1 + 88 >> 2] | 0) == ($7 | 0)) {
  $20 = 0; //@line 11923
 } else {
  $20 = (HEAP32[$11 >> 2] | 0) + ((($9 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 11929
 }
 HEAP32[$2 >> 2] = $11; //@line 11932
 HEAP32[$2 + 4 >> 2] = $20; //@line 11934
 $21 = $3 + 4 | 0; //@line 11935
 HEAP32[$21 >> 2] = 0; //@line 11936
 HEAP32[$21 + 4 >> 2] = 0; //@line 11936
 HEAP32[$21 + 8 >> 2] = 0; //@line 11936
 $22 = $3 + 40 | 0; //@line 11937
 HEAP32[$22 >> 2] = 0; //@line 11938
 HEAP32[$22 + 4 >> 2] = 0; //@line 11938
 HEAP32[$22 + 8 >> 2] = 0; //@line 11938
 HEAP32[$22 + 12 >> 2] = 0; //@line 11938
 HEAP32[$22 + 16 >> 2] = 0; //@line 11938
 HEAP32[$22 + 20 >> 2] = 0; //@line 11938
 HEAP32[$3 >> 2] = 2; //@line 11939
 HEAP32[$3 + 16 >> 2] = 0; //@line 11941
 $23 = $3 + 24 | 0; //@line 11943
 HEAP32[$23 >> 2] = 0; //@line 11945
 HEAP32[$23 + 4 >> 2] = 0; //@line 11948
 __THREW__ = 0; //@line 11949
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 11950
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 11950
 invoke_viiii(15, $4 | 0, $5 | 0, $$byval_copy | 0, $3 | 0); //@line 11951
 $27 = __THREW__; //@line 11952
 __THREW__ = 0; //@line 11952
 if ($27 & 1) {
  $58 = ___cxa_find_matching_catch_2() | 0; //@line 11955
  $59 = tempRet0; //@line 11956
  __ZN13CharmFunctionD2Ev($3); //@line 11957
  $$0 = $59; //@line 11958
  $$03 = $58; //@line 11958
  ___resumeException($$03 | 0); //@line 11959
 }
 __ZN13CharmFunctionD2Ev($3); //@line 11962
 $30 = HEAP32[$1 + 100 >> 2] | 0; //@line 11964
 if (!$30) {
  __ZNKSt3__219__deque_base_commonILb1EE20__throw_out_of_rangeEv($5); //@line 11967
 }
 $34 = $30 + -1 + (HEAP32[$8 >> 2] | 0) | 0; //@line 11972
 __ZN13CharmFunctionC2ERKS_($0, (HEAP32[(HEAP32[$6 >> 2] | 0) + ((($34 >>> 0) / 56 | 0) << 2) >> 2] | 0) + ((($34 >>> 0) % 56 | 0) * 72 | 0) | 0); //@line 11979
 __THREW__ = 0; //@line 11980
 invoke_vi(260, $5 | 0); //@line 11981
 $41 = __THREW__; //@line 11982
 __THREW__ = 0; //@line 11982
 if ($41 & 1) {
  $60 = ___cxa_find_matching_catch_2() | 0; //@line 11985
  $61 = tempRet0; //@line 11986
  __ZN13CharmFunctionD2Ev($0); //@line 11987
  $$0 = $61; //@line 11988
  $$03 = $60; //@line 11988
  ___resumeException($$03 | 0); //@line 11989
 }
 $43 = $1; //@line 11992
 $45 = HEAP32[$43 >> 2] | 0; //@line 11994
 $48 = HEAP32[$43 + 4 >> 2] | 0; //@line 11997
 if (($45 | 0) == 0 & ($48 | 0) == 0) {
  STACKTOP = sp; //@line 12002
  return;
 }
 $52 = _i64Add($45 | 0, $48 | 0, -1, -1) | 0; //@line 12004
 $54 = $1; //@line 12006
 HEAP32[$54 >> 2] = $52; //@line 12008
 HEAP32[$54 + 4 >> 2] = tempRet0; //@line 12011
 STACKTOP = sp; //@line 12012
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 8676
 $7 = ($2 | 0) != 0; //@line 8680
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 8684
   $$03555 = $0; //@line 8685
   $$03654 = $2; //@line 8685
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 8690
     $$036$lcssa64 = $$03654; //@line 8690
     label = 6; //@line 8691
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 8694
    $12 = $$03654 + -1 | 0; //@line 8695
    $16 = ($12 | 0) != 0; //@line 8699
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 8702
     $$03654 = $12; //@line 8702
    } else {
     $$035$lcssa = $11; //@line 8704
     $$036$lcssa = $12; //@line 8704
     $$lcssa = $16; //@line 8704
     label = 5; //@line 8705
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 8710
   $$036$lcssa = $2; //@line 8710
   $$lcssa = $7; //@line 8710
   label = 5; //@line 8711
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 8716
   $$036$lcssa64 = $$036$lcssa; //@line 8716
   label = 6; //@line 8717
  } else {
   $$2 = $$035$lcssa; //@line 8719
   $$3 = 0; //@line 8719
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 8725
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 8728
    $$3 = $$036$lcssa64; //@line 8728
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 8730
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 8734
      $$13745 = $$036$lcssa64; //@line 8734
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 8737
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 8746
       $30 = $$13745 + -4 | 0; //@line 8747
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 8750
        $$13745 = $30; //@line 8750
       } else {
        $$0$lcssa = $29; //@line 8752
        $$137$lcssa = $30; //@line 8752
        label = 11; //@line 8753
        break L11;
       }
      }
      $$140 = $$046; //@line 8757
      $$23839 = $$13745; //@line 8757
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 8759
      $$137$lcssa = $$036$lcssa64; //@line 8759
      label = 11; //@line 8760
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 8766
      $$3 = 0; //@line 8766
      break;
     } else {
      $$140 = $$0$lcssa; //@line 8769
      $$23839 = $$137$lcssa; //@line 8769
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 8776
      $$3 = $$23839; //@line 8776
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 8779
     $$23839 = $$23839 + -1 | 0; //@line 8780
     if (!$$23839) {
      $$2 = $35; //@line 8783
      $$3 = 0; //@line 8783
      break;
     } else {
      $$140 = $35; //@line 8786
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 8794
}
function __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE10push_frontERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $52 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 4 | 0; //@line 13595
 $3 = HEAP32[$2 >> 2] | 0; //@line 13596
 $4 = HEAP32[$0 >> 2] | 0; //@line 13597
 $6 = $4; //@line 13599
 do {
  if (($3 | 0) == ($4 | 0)) {
   $7 = $0 + 8 | 0; //@line 13602
   $8 = HEAP32[$7 >> 2] | 0; //@line 13603
   $9 = $0 + 12 | 0; //@line 13604
   $10 = HEAP32[$9 >> 2] | 0; //@line 13605
   $$cast = $10; //@line 13607
   if ($8 >>> 0 < $10 >>> 0) {
    $12 = $8; //@line 13609
    $16 = (($$cast - $12 >> 2) + 1 | 0) / 2 | 0; //@line 13613
    $17 = $8 + ($16 << 2) | 0; //@line 13614
    $19 = $12 - $3 | 0; //@line 13616
    $20 = $19 >> 2; //@line 13617
    $23 = $17 + (0 - $20 << 2) | 0; //@line 13620
    if (!$20) {
     $$0$i$i = $17; //@line 13622
     $25 = $8; //@line 13622
    } else {
     _memmove($23 | 0, $3 | 0, $19 | 0) | 0; //@line 13624
     $$0$i$i = $23; //@line 13626
     $25 = HEAP32[$7 >> 2] | 0; //@line 13626
    }
    HEAP32[$2 >> 2] = $$0$i$i; //@line 13628
    HEAP32[$7 >> 2] = $25 + ($16 << 2); //@line 13630
    $55 = $$0$i$i; //@line 13631
    break;
   }
   $27 = $$cast - $6 >> 1; //@line 13635
   $$sroa$speculated = ($27 | 0) == 0 ? 1 : $27; //@line 13637
   if ($$sroa$speculated >>> 0 > 1073741823) {
    $30 = ___cxa_allocate_exception(8) | 0; //@line 13640
    __THREW__ = 0; //@line 13641
    invoke_vii(119, $30 | 0, 31992); //@line 13642
    $31 = __THREW__; //@line 13643
    __THREW__ = 0; //@line 13643
    if ($31 & 1) {
     $33 = ___cxa_find_matching_catch_2() | 0; //@line 13646
     ___cxa_free_exception($30 | 0); //@line 13648
     ___resumeException($33 | 0); //@line 13649
    } else {
     HEAP32[$30 >> 2] = 13224; //@line 13652
     ___cxa_throw($30 | 0, 2856, 240); //@line 13653
    }
   }
   $38 = __Znwj($$sroa$speculated << 2) | 0; //@line 13660
   $39 = $38; //@line 13661
   $40 = $38 + (($$sroa$speculated + 3 | 0) >>> 2 << 2) | 0; //@line 13662
   $41 = $40; //@line 13663
   $43 = $38 + ($$sroa$speculated << 2) | 0; //@line 13665
   if (($3 | 0) == ($8 | 0)) {
    $$sroa$13$1 = $41; //@line 13668
    $52 = $3; //@line 13668
   } else {
    $$in = $40; //@line 13670
    $$sroa$13$0 = $41; //@line 13670
    $46 = $3; //@line 13670
    do {
     HEAP32[$$in >> 2] = HEAP32[$46 >> 2]; //@line 13673
     $$in = $$sroa$13$0 + 4 | 0; //@line 13675
     $$sroa$13$0 = $$in; //@line 13676
     $46 = $46 + 4 | 0; //@line 13677
    } while (($46 | 0) != ($8 | 0));
    $$sroa$13$1 = $$sroa$13$0; //@line 13686
    $52 = HEAP32[$0 >> 2] | 0; //@line 13686
   }
   HEAP32[$0 >> 2] = $39; //@line 13688
   HEAP32[$2 >> 2] = $41; //@line 13689
   HEAP32[$7 >> 2] = $$sroa$13$1; //@line 13690
   HEAP32[$9 >> 2] = $43; //@line 13691
   if (!$52) {
    $55 = $40; //@line 13694
   } else {
    __ZdlPv($52); //@line 13696
    $55 = HEAP32[$2 >> 2] | 0; //@line 13698
   }
  } else {
   $55 = $3; //@line 13701
  }
 } while (0);
 HEAP32[$55 + -4 >> 2] = HEAP32[$1 >> 2]; //@line 13706
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -4; //@line 13709
 return;
}
function __ZN9ReferenceD2Ev($0) {
 $0 = $0 | 0;
 var $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $28 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $48 = 0, $49 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4513
 STACKTOP = STACKTOP + 16 | 0; //@line 4514
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4514
 $$byval_copy1 = sp + 1 | 0; //@line 4515
 $1 = sp; //@line 4516
 $2 = $0 + 124 | 0; //@line 4517
 if ((HEAP8[$2 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 4523
 }
 $7 = $0 + 112 | 0; //@line 4525
 $8 = HEAP32[$7 >> 2] | 0; //@line 4526
 if ($8 | 0) {
  $10 = $0 + 116 | 0; //@line 4529
  $11 = HEAP32[$10 >> 2] | 0; //@line 4530
  do {
   if (($11 | 0) == ($8 | 0)) {
    $22 = $8; //@line 4534
   } else {
    $13 = $0 + 120 | 0; //@line 4536
    $15 = $11; //@line 4537
    while (1) {
     $14 = $15 + -72 | 0; //@line 4539
     HEAP32[$10 >> 2] = $14; //@line 4540
     __THREW__ = 0; //@line 4541
     HEAP8[$$byval_copy1 >> 0] = HEAP8[$1 >> 0] | 0; //@line 4542
     invoke_viii(13, $$byval_copy1 | 0, $13 | 0, $14 | 0); //@line 4543
     $16 = __THREW__; //@line 4544
     __THREW__ = 0; //@line 4544
     if ($16 & 1) {
      label = 8; //@line 4547
      break;
     }
     $15 = HEAP32[$10 >> 2] | 0; //@line 4550
     if (($15 | 0) == ($8 | 0)) {
      label = 9; //@line 4553
      break;
     }
    }
    if ((label | 0) == 8) {
     $20 = ___cxa_find_matching_catch_3(0) | 0; //@line 4560
     ___clang_call_terminate($20); //@line 4562
    } else if ((label | 0) == 9) {
     $22 = HEAP32[$7 >> 2] | 0; //@line 4567
     break;
    }
   }
  } while (0);
  __ZdlPv($22); //@line 4572
 }
 $23 = $0 + 76 | 0; //@line 4574
 if ((HEAP8[$23 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$23 >> 2] | 0); //@line 4580
 }
 $28 = $0 + 52 | 0; //@line 4582
 if ((HEAP8[$28 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$28 >> 2] | 0); //@line 4588
 }
 $33 = $0 + 40 | 0; //@line 4590
 $34 = HEAP32[$33 >> 2] | 0; //@line 4591
 if ($34 | 0) {
  $36 = $0 + 44 | 0; //@line 4594
  $37 = HEAP32[$36 >> 2] | 0; //@line 4595
  do {
   if (($37 | 0) == ($34 | 0)) {
    $48 = $34; //@line 4599
   } else {
    $39 = $0 + 48 | 0; //@line 4601
    $41 = $37; //@line 4602
    while (1) {
     $40 = $41 + -72 | 0; //@line 4604
     HEAP32[$36 >> 2] = $40; //@line 4605
     __THREW__ = 0; //@line 4606
     HEAP8[$$byval_copy1 >> 0] = HEAP8[$1 >> 0] | 0; //@line 4607
     invoke_viii(13, $$byval_copy1 | 0, $39 | 0, $40 | 0); //@line 4608
     $42 = __THREW__; //@line 4609
     __THREW__ = 0; //@line 4609
     if ($42 & 1) {
      label = 20; //@line 4612
      break;
     }
     $41 = HEAP32[$36 >> 2] | 0; //@line 4615
     if (($41 | 0) == ($34 | 0)) {
      label = 21; //@line 4618
      break;
     }
    }
    if ((label | 0) == 20) {
     $46 = ___cxa_find_matching_catch_3(0) | 0; //@line 4625
     ___clang_call_terminate($46); //@line 4627
    } else if ((label | 0) == 21) {
     $48 = HEAP32[$33 >> 2] | 0; //@line 4632
     break;
    }
   }
  } while (0);
  __ZdlPv($48); //@line 4637
 }
 $49 = $0 + 4 | 0; //@line 4639
 if ((HEAP8[$49 + 11 >> 0] | 0) >= 0) {
  STACKTOP = sp; //@line 4644
  return;
 }
 __ZdlPv(HEAP32[$49 >> 2] | 0); //@line 4647
 STACKTOP = sp; //@line 4648
 return;
}
function __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$021$lcssa$i$i = 0, $$021$lcssa$i$i8 = 0, $$021$ph$i$i = 0, $$021$ph$i$i1 = 0, $$02122$i$i = 0, $$02122$i$i4 = 0, $$023$i$i = 0, $$023$i$i3 = 0, $12 = 0, $14 = 0, $16 = 0, $22 = 0, $23 = 0, $3 = 0, $35 = 0, $37 = 0, $40 = 0, $46 = 0, $47 = 0, $6 = 0, $7 = 0, $9 = 0;
 $3 = HEAP32[$1 + 48 >> 2] | 0; //@line 1317
 if ($3 & 16 | 0) {
  $6 = $1 + 44 | 0; //@line 1321
  $7 = HEAP32[$6 >> 2] | 0; //@line 1322
  $9 = HEAP32[$1 + 24 >> 2] | 0; //@line 1324
  if ($7 >>> 0 < $9 >>> 0) {
   HEAP32[$6 >> 2] = $9; //@line 1327
   $14 = $9; //@line 1328
  } else {
   $14 = $7; //@line 1330
  }
  $12 = HEAP32[$1 + 20 >> 2] | 0; //@line 1333
  HEAP32[$0 >> 2] = 0; //@line 1334
  HEAP32[$0 + 4 >> 2] = 0; //@line 1334
  HEAP32[$0 + 8 >> 2] = 0; //@line 1334
  $16 = $14 - $12 | 0; //@line 1337
  if ($16 >>> 0 > 4294967279) {
   __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 1340
  }
  if ($16 >>> 0 < 11) {
   HEAP8[$0 + 11 >> 0] = $16; //@line 1347
   $$021$ph$i$i1 = $0; //@line 1348
  } else {
   $22 = $16 + 16 & -16; //@line 1351
   $23 = __Znwj($22) | 0; //@line 1352
   HEAP32[$0 >> 2] = $23; //@line 1353
   HEAP32[$0 + 8 >> 2] = $22 | -2147483648; //@line 1356
   HEAP32[$0 + 4 >> 2] = $16; //@line 1358
   $$021$ph$i$i1 = $23; //@line 1359
  }
  if (($12 | 0) == ($14 | 0)) {
   $$021$lcssa$i$i8 = $$021$ph$i$i1; //@line 1363
  } else {
   $$02122$i$i4 = $$021$ph$i$i1; //@line 1365
   $$023$i$i3 = $12; //@line 1365
   while (1) {
    HEAP8[$$02122$i$i4 >> 0] = HEAP8[$$023$i$i3 >> 0] | 0; //@line 1368
    $$023$i$i3 = $$023$i$i3 + 1 | 0; //@line 1369
    if (($$023$i$i3 | 0) == ($14 | 0)) {
     break;
    } else {
     $$02122$i$i4 = $$02122$i$i4 + 1 | 0; //@line 1375
    }
   }
   $$021$lcssa$i$i8 = $$021$ph$i$i1 + $16 | 0; //@line 1379
  }
  HEAP8[$$021$lcssa$i$i8 >> 0] = 0; //@line 1381
  return;
 }
 if (!($3 & 8)) {
  HEAP32[$0 >> 2] = 0; //@line 1387
  HEAP32[$0 + 4 >> 2] = 0; //@line 1387
  HEAP32[$0 + 8 >> 2] = 0; //@line 1387
  return;
 }
 $35 = HEAP32[$1 + 8 >> 2] | 0; //@line 1391
 $37 = HEAP32[$1 + 16 >> 2] | 0; //@line 1393
 HEAP32[$0 >> 2] = 0; //@line 1394
 HEAP32[$0 + 4 >> 2] = 0; //@line 1394
 HEAP32[$0 + 8 >> 2] = 0; //@line 1394
 $40 = $37 - $35 | 0; //@line 1397
 if ($40 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 1400
 }
 if ($40 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $40; //@line 1407
  $$021$ph$i$i = $0; //@line 1408
 } else {
  $46 = $40 + 16 & -16; //@line 1411
  $47 = __Znwj($46) | 0; //@line 1412
  HEAP32[$0 >> 2] = $47; //@line 1413
  HEAP32[$0 + 8 >> 2] = $46 | -2147483648; //@line 1416
  HEAP32[$0 + 4 >> 2] = $40; //@line 1418
  $$021$ph$i$i = $47; //@line 1419
 }
 if (($35 | 0) == ($37 | 0)) {
  $$021$lcssa$i$i = $$021$ph$i$i; //@line 1423
 } else {
  $$02122$i$i = $$021$ph$i$i; //@line 1425
  $$023$i$i = $35; //@line 1425
  while (1) {
   HEAP8[$$02122$i$i >> 0] = HEAP8[$$023$i$i >> 0] | 0; //@line 1428
   $$023$i$i = $$023$i$i + 1 | 0; //@line 1429
   if (($$023$i$i | 0) == ($37 | 0)) {
    break;
   } else {
    $$02122$i$i = $$02122$i$i + 1 | 0; //@line 1435
   }
  }
  $$021$lcssa$i$i = $$021$ph$i$i + $40 | 0; //@line 1439
 }
 HEAP8[$$021$lcssa$i$i >> 0] = 0; //@line 1441
 return;
}
function __ZNSt3__214__split_bufferIP13CharmFunctionRNS_9allocatorIS2_EEE10push_frontERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $52 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 4 | 0; //@line 6438
 $3 = HEAP32[$2 >> 2] | 0; //@line 6439
 $4 = HEAP32[$0 >> 2] | 0; //@line 6440
 $6 = $4; //@line 6442
 do {
  if (($3 | 0) == ($4 | 0)) {
   $7 = $0 + 8 | 0; //@line 6445
   $8 = HEAP32[$7 >> 2] | 0; //@line 6446
   $9 = $0 + 12 | 0; //@line 6447
   $10 = HEAP32[$9 >> 2] | 0; //@line 6448
   $$cast = $10; //@line 6450
   if ($8 >>> 0 < $10 >>> 0) {
    $12 = $8; //@line 6452
    $16 = (($$cast - $12 >> 2) + 1 | 0) / 2 | 0; //@line 6456
    $17 = $8 + ($16 << 2) | 0; //@line 6457
    $19 = $12 - $3 | 0; //@line 6459
    $20 = $19 >> 2; //@line 6460
    $23 = $17 + (0 - $20 << 2) | 0; //@line 6463
    if (!$20) {
     $$0$i$i = $17; //@line 6465
     $25 = $8; //@line 6465
    } else {
     _memmove($23 | 0, $3 | 0, $19 | 0) | 0; //@line 6467
     $$0$i$i = $23; //@line 6469
     $25 = HEAP32[$7 >> 2] | 0; //@line 6469
    }
    HEAP32[$2 >> 2] = $$0$i$i; //@line 6471
    HEAP32[$7 >> 2] = $25 + ($16 << 2); //@line 6473
    $55 = $$0$i$i; //@line 6474
    break;
   }
   $27 = $$cast - $6 >> 1; //@line 6478
   $$sroa$speculated = ($27 | 0) == 0 ? 1 : $27; //@line 6480
   if ($$sroa$speculated >>> 0 > 1073741823) {
    $30 = ___cxa_allocate_exception(8) | 0; //@line 6483
    __THREW__ = 0; //@line 6484
    invoke_vii(119, $30 | 0, 31992); //@line 6485
    $31 = __THREW__; //@line 6486
    __THREW__ = 0; //@line 6486
    if ($31 & 1) {
     $33 = ___cxa_find_matching_catch_2() | 0; //@line 6489
     ___cxa_free_exception($30 | 0); //@line 6491
     ___resumeException($33 | 0); //@line 6492
    } else {
     HEAP32[$30 >> 2] = 13224; //@line 6495
     ___cxa_throw($30 | 0, 2856, 240); //@line 6496
    }
   }
   $38 = __Znwj($$sroa$speculated << 2) | 0; //@line 6503
   $39 = $38; //@line 6504
   $40 = $38 + (($$sroa$speculated + 3 | 0) >>> 2 << 2) | 0; //@line 6505
   $41 = $40; //@line 6506
   $43 = $38 + ($$sroa$speculated << 2) | 0; //@line 6508
   if (($3 | 0) == ($8 | 0)) {
    $$sroa$13$1 = $41; //@line 6511
    $52 = $3; //@line 6511
   } else {
    $$in = $40; //@line 6513
    $$sroa$13$0 = $41; //@line 6513
    $46 = $3; //@line 6513
    do {
     HEAP32[$$in >> 2] = HEAP32[$46 >> 2]; //@line 6516
     $$in = $$sroa$13$0 + 4 | 0; //@line 6518
     $$sroa$13$0 = $$in; //@line 6519
     $46 = $46 + 4 | 0; //@line 6520
    } while (($46 | 0) != ($8 | 0));
    $$sroa$13$1 = $$sroa$13$0; //@line 6529
    $52 = HEAP32[$0 >> 2] | 0; //@line 6529
   }
   HEAP32[$0 >> 2] = $39; //@line 6531
   HEAP32[$2 >> 2] = $41; //@line 6532
   HEAP32[$7 >> 2] = $$sroa$13$1; //@line 6533
   HEAP32[$9 >> 2] = $43; //@line 6534
   if (!$52) {
    $55 = $40; //@line 6537
   } else {
    __ZdlPv($52); //@line 6539
    $55 = HEAP32[$2 >> 2] | 0; //@line 6541
   }
  } else {
   $55 = $3; //@line 6544
  }
 } while (0);
 HEAP32[$55 + -4 >> 2] = HEAP32[$1 >> 2]; //@line 6549
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -4; //@line 6552
 return;
}
function __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE10push_frontEOS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $52 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 4 | 0; //@line 6190
 $3 = HEAP32[$2 >> 2] | 0; //@line 6191
 $4 = HEAP32[$0 >> 2] | 0; //@line 6192
 $6 = $4; //@line 6194
 do {
  if (($3 | 0) == ($4 | 0)) {
   $7 = $0 + 8 | 0; //@line 6197
   $8 = HEAP32[$7 >> 2] | 0; //@line 6198
   $9 = $0 + 12 | 0; //@line 6199
   $10 = HEAP32[$9 >> 2] | 0; //@line 6200
   $$cast = $10; //@line 6202
   if ($8 >>> 0 < $10 >>> 0) {
    $12 = $8; //@line 6204
    $16 = (($$cast - $12 >> 2) + 1 | 0) / 2 | 0; //@line 6208
    $17 = $8 + ($16 << 2) | 0; //@line 6209
    $19 = $12 - $3 | 0; //@line 6211
    $20 = $19 >> 2; //@line 6212
    $23 = $17 + (0 - $20 << 2) | 0; //@line 6215
    if (!$20) {
     $$0$i$i = $17; //@line 6217
     $25 = $8; //@line 6217
    } else {
     _memmove($23 | 0, $3 | 0, $19 | 0) | 0; //@line 6219
     $$0$i$i = $23; //@line 6221
     $25 = HEAP32[$7 >> 2] | 0; //@line 6221
    }
    HEAP32[$2 >> 2] = $$0$i$i; //@line 6223
    HEAP32[$7 >> 2] = $25 + ($16 << 2); //@line 6225
    $55 = $$0$i$i; //@line 6226
    break;
   }
   $27 = $$cast - $6 >> 1; //@line 6230
   $$sroa$speculated = ($27 | 0) == 0 ? 1 : $27; //@line 6232
   if ($$sroa$speculated >>> 0 > 1073741823) {
    $30 = ___cxa_allocate_exception(8) | 0; //@line 6235
    __THREW__ = 0; //@line 6236
    invoke_vii(119, $30 | 0, 31992); //@line 6237
    $31 = __THREW__; //@line 6238
    __THREW__ = 0; //@line 6238
    if ($31 & 1) {
     $33 = ___cxa_find_matching_catch_2() | 0; //@line 6241
     ___cxa_free_exception($30 | 0); //@line 6243
     ___resumeException($33 | 0); //@line 6244
    } else {
     HEAP32[$30 >> 2] = 13224; //@line 6247
     ___cxa_throw($30 | 0, 2856, 240); //@line 6248
    }
   }
   $38 = __Znwj($$sroa$speculated << 2) | 0; //@line 6255
   $39 = $38; //@line 6256
   $40 = $38 + (($$sroa$speculated + 3 | 0) >>> 2 << 2) | 0; //@line 6257
   $41 = $40; //@line 6258
   $43 = $38 + ($$sroa$speculated << 2) | 0; //@line 6260
   if (($3 | 0) == ($8 | 0)) {
    $$sroa$13$1 = $41; //@line 6263
    $52 = $3; //@line 6263
   } else {
    $$in = $40; //@line 6265
    $$sroa$13$0 = $41; //@line 6265
    $46 = $3; //@line 6265
    do {
     HEAP32[$$in >> 2] = HEAP32[$46 >> 2]; //@line 6268
     $$in = $$sroa$13$0 + 4 | 0; //@line 6270
     $$sroa$13$0 = $$in; //@line 6271
     $46 = $46 + 4 | 0; //@line 6272
    } while (($46 | 0) != ($8 | 0));
    $$sroa$13$1 = $$sroa$13$0; //@line 6281
    $52 = HEAP32[$0 >> 2] | 0; //@line 6281
   }
   HEAP32[$0 >> 2] = $39; //@line 6283
   HEAP32[$2 >> 2] = $41; //@line 6284
   HEAP32[$7 >> 2] = $$sroa$13$1; //@line 6285
   HEAP32[$9 >> 2] = $43; //@line 6286
   if (!$52) {
    $55 = $40; //@line 6289
   } else {
    __ZdlPv($52); //@line 6291
    $55 = HEAP32[$2 >> 2] | 0; //@line 6293
   }
  } else {
   $55 = $3; //@line 6296
  }
 } while (0);
 HEAP32[$55 + -4 >> 2] = HEAP32[$1 >> 2]; //@line 6301
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -4; //@line 6304
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $$01740 = 0, $$018$off038 = 0, $$1414854 = 0, $$142 = 0, $$phitmp$i = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $3 = 0, $33 = 0, $4 = 0, $5 = 0, label = 0;
 if ($1 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 61140
 }
 $3 = $0 + 11 | 0; //@line 61143
 $4 = HEAP8[$3 >> 0] | 0; //@line 61144
 $5 = $4 << 24 >> 24 < 0; //@line 61145
 if ($5) {
  $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 61153
  $18 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; //@line 61153
 } else {
  $12 = $4 & 255; //@line 61156
  $18 = 10; //@line 61156
 }
 $$sroa$speculated = $12 >>> 0 > $1 >>> 0 ? $12 : $1; //@line 61159
 $14 = $$sroa$speculated >>> 0 < 11; //@line 61160
 $$phitmp$i = $14 ? 10 : ($$sroa$speculated + 16 & -16) + -1 | 0; //@line 61164
 L8 : do {
  if (($$phitmp$i | 0) != ($18 | 0)) {
   do {
    if ($14) {
     $28 = HEAP32[$0 >> 2] | 0; //@line 61170
     if ($5) {
      $$01740 = $28; //@line 61172
      $$018$off038 = 0; //@line 61172
      $$142 = $0; //@line 61172
      label = 17; //@line 61173
     } else {
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($0, $28, ($4 & 255) + 1 | 0) | 0; //@line 61177
      __ZdlPv($28); //@line 61178
      label = 20; //@line 61179
     }
    } else {
     $20 = $$phitmp$i + 1 | 0; //@line 61183
     if ($$phitmp$i >>> 0 > $18 >>> 0) {
      $$016 = __Znwj($20) | 0; //@line 61186
     } else {
      __THREW__ = 0; //@line 61188
      $22 = invoke_ii(142, $20 | 0) | 0; //@line 61189
      $23 = __THREW__; //@line 61190
      __THREW__ = 0; //@line 61190
      if ($23 & 1) {
       $25 = ___cxa_find_matching_catch_3(0) | 0; //@line 61193
       ___cxa_begin_catch($25 | 0) | 0; //@line 61195
       ___cxa_end_catch(); //@line 61196
       break L8;
      } else {
       $$016 = $22; //@line 61199
      }
     }
     if ($5) {
      $$01740 = HEAP32[$0 >> 2] | 0; //@line 61204
      $$018$off038 = 1; //@line 61204
      $$142 = $$016; //@line 61204
      label = 17; //@line 61205
      break;
     } else {
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($$016, $0, ($4 & 255) + 1 | 0) | 0; //@line 61210
      $$1414854 = $$016; //@line 61212
      $$pre$phi57Z2D = $20; //@line 61212
      $$pre$phiZ2D = $0 + 4 | 0; //@line 61212
      label = 19; //@line 61213
      break;
     }
    }
   } while (0);
   if ((label | 0) == 17) {
    $33 = $0 + 4 | 0; //@line 61219
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($$142, $$01740, (HEAP32[$33 >> 2] | 0) + 1 | 0) | 0; //@line 61222
    __ZdlPv($$01740); //@line 61223
    if ($$018$off038) {
     $$1414854 = $$142; //@line 61226
     $$pre$phi57Z2D = $$phitmp$i + 1 | 0; //@line 61226
     $$pre$phiZ2D = $33; //@line 61226
     label = 19; //@line 61227
    } else {
     label = 20; //@line 61229
    }
   }
   if ((label | 0) == 19) {
    HEAP32[$0 + 8 >> 2] = $$pre$phi57Z2D | -2147483648; //@line 61235
    HEAP32[$$pre$phiZ2D >> 2] = $12; //@line 61236
    HEAP32[$0 >> 2] = $$1414854; //@line 61237
    break;
   } else if ((label | 0) == 20) {
    HEAP8[$3 >> 0] = $12; //@line 61242
    break;
   }
  }
 } while (0);
 return;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $6 = 0, $7 = 0, $eh$lpad$body$indexZ2D = 0, label = 0;
 $1 = $0 + 8 | 0; //@line 56640
 __THREW__ = 0; //@line 56642
 $3 = invoke_ii(147, HEAP32[$1 >> 2] | 0) | 0; //@line 56643
 $4 = __THREW__; //@line 56644
 __THREW__ = 0; //@line 56644
 do {
  if ($4 & 1) {
   label = 21; //@line 56648
  } else {
   __THREW__ = 0; //@line 56650
   $6 = invoke_iiii(48, 0, 0, 4) | 0; //@line 56651
   $7 = __THREW__; //@line 56652
   __THREW__ = 0; //@line 56652
   if ($7 & 1) {
    $14 = ___cxa_find_matching_catch_3(0) | 0; //@line 56655
    if (!$3) {
     $eh$lpad$body$indexZ2D = $14; //@line 56659
     break;
    }
    __THREW__ = 0; //@line 56662
    invoke_ii(147, $3 | 0) | 0; //@line 56663
    $17 = __THREW__; //@line 56664
    __THREW__ = 0; //@line 56664
    if (!($17 & 1)) {
     $eh$lpad$body$indexZ2D = $14; //@line 56667
     break;
    }
    $19 = ___cxa_find_matching_catch_3(0) | 0; //@line 56670
    ___clang_call_terminate($19); //@line 56672
   }
   if ($3 | 0) {
    __THREW__ = 0; //@line 56677
    invoke_ii(147, $3 | 0) | 0; //@line 56678
    $10 = __THREW__; //@line 56679
    __THREW__ = 0; //@line 56679
    if ($10 & 1) {
     $12 = ___cxa_find_matching_catch_3(0) | 0; //@line 56682
     ___clang_call_terminate($12); //@line 56684
    }
   }
   if (!$6) {
    $22 = HEAP32[$1 >> 2] | 0; //@line 56690
    if (!$22) {
     $$0 = 1; //@line 56693
    } else {
     __THREW__ = 0; //@line 56695
     $24 = invoke_ii(147, $22 | 0) | 0; //@line 56696
     $25 = __THREW__; //@line 56697
     __THREW__ = 0; //@line 56697
     if ($25 & 1) {
      label = 21; //@line 56700
      break;
     }
     __THREW__ = 0; //@line 56703
     $27 = invoke_i(3) | 0; //@line 56704
     $28 = __THREW__; //@line 56705
     __THREW__ = 0; //@line 56705
     if ($28 & 1) {
      $35 = ___cxa_find_matching_catch_3(0) | 0; //@line 56708
      if (!$24) {
       $eh$lpad$body$indexZ2D = $35; //@line 56712
       break;
      }
      __THREW__ = 0; //@line 56715
      invoke_ii(147, $24 | 0) | 0; //@line 56716
      $38 = __THREW__; //@line 56717
      __THREW__ = 0; //@line 56717
      if (!($38 & 1)) {
       $eh$lpad$body$indexZ2D = $35; //@line 56720
       break;
      }
      $40 = ___cxa_find_matching_catch_3(0) | 0; //@line 56723
      ___clang_call_terminate($40); //@line 56725
     }
     if ($24 | 0) {
      __THREW__ = 0; //@line 56730
      invoke_ii(147, $24 | 0) | 0; //@line 56731
      $31 = __THREW__; //@line 56732
      __THREW__ = 0; //@line 56732
      if ($31 & 1) {
       $33 = ___cxa_find_matching_catch_3(0) | 0; //@line 56735
       ___clang_call_terminate($33); //@line 56737
      }
     }
     return ($27 | 0) == 1 | 0; //@line 56743
    }
   } else {
    $$0 = -1; //@line 56746
   }
   return $$0 | 0; //@line 56748
  }
 } while (0);
 if ((label | 0) == 21) {
  $43 = ___cxa_find_matching_catch_3(0) | 0; //@line 56752
  $eh$lpad$body$indexZ2D = $43; //@line 56754
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D); //@line 56756
 return 0; //@line 56758
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15330
 STACKTOP = STACKTOP + 16 | 0; //@line 15331
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15331
 $4 = sp; //@line 15332
 $$ = ($3 | 0) == 0 ? 34444 : $3; //@line 15334
 $6 = HEAP32[$$ >> 2] | 0; //@line 15335
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 15341
   } else {
    label = 17; //@line 15343
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 15347
   if (!$2) {
    $$0 = -2; //@line 15350
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 15354
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 15358
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 15361
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_619() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 15368
     $22 = HEAP8[$1 >> 0] | 0; //@line 15369
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 15373
      $$0 = 1; //@line 15374
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 15378
     if ($26 >>> 0 > 50) {
      label = 17; //@line 15381
      break;
     }
     $30 = HEAP32[5324 + ($26 << 2) >> 2] | 0; //@line 15386
     $31 = $2 + -1 | 0; //@line 15387
     if (!$31) {
      $$2 = $30; //@line 15390
     } else {
      $$03952 = $1 + 1 | 0; //@line 15392
      $$04051 = $30; //@line 15392
      $$04350 = $31; //@line 15392
      label = 11; //@line 15393
     }
    } else {
     $$03952 = $1; //@line 15396
     $$04051 = $6; //@line 15396
     $$04350 = $2; //@line 15396
     label = 11; //@line 15397
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 15401
      $35 = ($33 & 255) >>> 3; //@line 15403
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 15410
       break L1;
      } else {
       $$1 = $$03952; //@line 15413
       $$141 = $$04051; //@line 15413
       $$144 = $$04350; //@line 15413
       $44 = $33; //@line 15413
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 15417
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 15420
       $$144 = $$144 + -1 | 0; //@line 15421
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 15428
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 15431
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 15437
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 15441
      HEAP32[$$47 >> 2] = $$141; //@line 15442
      $$0 = $2 - $$144 | 0; //@line 15444
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 15448
    $$0 = -2; //@line 15449
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 15454
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 15456
  $$0 = -1; //@line 15457
 }
 STACKTOP = sp; //@line 15459
 return $$0 | 0; //@line 15459
}
function __ZNSt3__214__split_bufferIP13CharmFunctionRNS_9allocatorIS2_EEE9push_backEOS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$in = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $5 = 0, $51 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 8 | 0; //@line 6315
 $3 = HEAP32[$2 >> 2] | 0; //@line 6316
 $4 = $0 + 12 | 0; //@line 6317
 $5 = HEAP32[$4 >> 2] | 0; //@line 6318
 $7 = $5; //@line 6320
 do {
  if (($3 | 0) == ($5 | 0)) {
   $8 = $0 + 4 | 0; //@line 6323
   $9 = HEAP32[$8 >> 2] | 0; //@line 6324
   $10 = HEAP32[$0 >> 2] | 0; //@line 6325
   $12 = $10; //@line 6327
   if ($9 >>> 0 > $10 >>> 0) {
    $13 = $9; //@line 6329
    $17 = (($13 - $12 >> 2) + 1 | 0) / -2 | 0; //@line 6333
    $18 = $9 + ($17 << 2) | 0; //@line 6334
    $20 = $3 - $13 | 0; //@line 6336
    $21 = $20 >> 2; //@line 6337
    if (!$21) {
     $25 = $9; //@line 6340
    } else {
     _memmove($18 | 0, $9 | 0, $20 | 0) | 0; //@line 6342
     $25 = HEAP32[$8 >> 2] | 0; //@line 6344
    }
    $23 = $18 + ($21 << 2) | 0; //@line 6346
    HEAP32[$2 >> 2] = $23; //@line 6347
    HEAP32[$8 >> 2] = $25 + ($17 << 2); //@line 6349
    $55 = $23; //@line 6350
    break;
   }
   $27 = $7 - $12 >> 1; //@line 6354
   $$sroa$speculated = ($27 | 0) == 0 ? 1 : $27; //@line 6356
   if ($$sroa$speculated >>> 0 > 1073741823) {
    $30 = ___cxa_allocate_exception(8) | 0; //@line 6359
    __THREW__ = 0; //@line 6360
    invoke_vii(119, $30 | 0, 31992); //@line 6361
    $31 = __THREW__; //@line 6362
    __THREW__ = 0; //@line 6362
    if ($31 & 1) {
     $33 = ___cxa_find_matching_catch_2() | 0; //@line 6365
     ___cxa_free_exception($30 | 0); //@line 6367
     ___resumeException($33 | 0); //@line 6368
    } else {
     HEAP32[$30 >> 2] = 13224; //@line 6371
     ___cxa_throw($30 | 0, 2856, 240); //@line 6372
    }
   }
   $37 = __Znwj($$sroa$speculated << 2) | 0; //@line 6378
   $38 = $37; //@line 6379
   $39 = $37 + ($$sroa$speculated >>> 2 << 2) | 0; //@line 6380
   $40 = $39; //@line 6381
   $42 = $37 + ($$sroa$speculated << 2) | 0; //@line 6383
   if (($9 | 0) == ($3 | 0)) {
    $$sroa$13$1 = $40; //@line 6386
    $51 = $10; //@line 6386
   } else {
    $$in = $39; //@line 6388
    $$sroa$13$0 = $40; //@line 6388
    $45 = $9; //@line 6388
    do {
     HEAP32[$$in >> 2] = HEAP32[$45 >> 2]; //@line 6391
     $$in = $$sroa$13$0 + 4 | 0; //@line 6393
     $$sroa$13$0 = $$in; //@line 6394
     $45 = $45 + 4 | 0; //@line 6395
    } while (($45 | 0) != ($3 | 0));
    $$sroa$13$1 = $$sroa$13$0; //@line 6404
    $51 = HEAP32[$0 >> 2] | 0; //@line 6404
   }
   HEAP32[$0 >> 2] = $38; //@line 6406
   HEAP32[$8 >> 2] = $40; //@line 6407
   HEAP32[$2 >> 2] = $$sroa$13$1; //@line 6408
   HEAP32[$4 >> 2] = $42; //@line 6409
   if (!$51) {
    $55 = $$sroa$13$1; //@line 6413
   } else {
    __ZdlPv($51); //@line 6415
    $55 = HEAP32[$2 >> 2] | 0; //@line 6417
   }
  } else {
   $55 = $3; //@line 6420
  }
 } while (0);
 HEAP32[$55 >> 2] = HEAP32[$1 >> 2]; //@line 6424
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 4; //@line 6427
 return;
}
function __ZNSt3__214__split_bufferIP13CharmFunctionNS_9allocatorIS2_EEE9push_backEOS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$in = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $5 = 0, $51 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 8 | 0; //@line 6067
 $3 = HEAP32[$2 >> 2] | 0; //@line 6068
 $4 = $0 + 12 | 0; //@line 6069
 $5 = HEAP32[$4 >> 2] | 0; //@line 6070
 $7 = $5; //@line 6072
 do {
  if (($3 | 0) == ($5 | 0)) {
   $8 = $0 + 4 | 0; //@line 6075
   $9 = HEAP32[$8 >> 2] | 0; //@line 6076
   $10 = HEAP32[$0 >> 2] | 0; //@line 6077
   $12 = $10; //@line 6079
   if ($9 >>> 0 > $10 >>> 0) {
    $13 = $9; //@line 6081
    $17 = (($13 - $12 >> 2) + 1 | 0) / -2 | 0; //@line 6085
    $18 = $9 + ($17 << 2) | 0; //@line 6086
    $20 = $3 - $13 | 0; //@line 6088
    $21 = $20 >> 2; //@line 6089
    if (!$21) {
     $25 = $9; //@line 6092
    } else {
     _memmove($18 | 0, $9 | 0, $20 | 0) | 0; //@line 6094
     $25 = HEAP32[$8 >> 2] | 0; //@line 6096
    }
    $23 = $18 + ($21 << 2) | 0; //@line 6098
    HEAP32[$2 >> 2] = $23; //@line 6099
    HEAP32[$8 >> 2] = $25 + ($17 << 2); //@line 6101
    $55 = $23; //@line 6102
    break;
   }
   $27 = $7 - $12 >> 1; //@line 6106
   $$sroa$speculated = ($27 | 0) == 0 ? 1 : $27; //@line 6108
   if ($$sroa$speculated >>> 0 > 1073741823) {
    $30 = ___cxa_allocate_exception(8) | 0; //@line 6111
    __THREW__ = 0; //@line 6112
    invoke_vii(119, $30 | 0, 31992); //@line 6113
    $31 = __THREW__; //@line 6114
    __THREW__ = 0; //@line 6114
    if ($31 & 1) {
     $33 = ___cxa_find_matching_catch_2() | 0; //@line 6117
     ___cxa_free_exception($30 | 0); //@line 6119
     ___resumeException($33 | 0); //@line 6120
    } else {
     HEAP32[$30 >> 2] = 13224; //@line 6123
     ___cxa_throw($30 | 0, 2856, 240); //@line 6124
    }
   }
   $37 = __Znwj($$sroa$speculated << 2) | 0; //@line 6130
   $38 = $37; //@line 6131
   $39 = $37 + ($$sroa$speculated >>> 2 << 2) | 0; //@line 6132
   $40 = $39; //@line 6133
   $42 = $37 + ($$sroa$speculated << 2) | 0; //@line 6135
   if (($9 | 0) == ($3 | 0)) {
    $$sroa$13$1 = $40; //@line 6138
    $51 = $10; //@line 6138
   } else {
    $$in = $39; //@line 6140
    $$sroa$13$0 = $40; //@line 6140
    $45 = $9; //@line 6140
    do {
     HEAP32[$$in >> 2] = HEAP32[$45 >> 2]; //@line 6143
     $$in = $$sroa$13$0 + 4 | 0; //@line 6145
     $$sroa$13$0 = $$in; //@line 6146
     $45 = $45 + 4 | 0; //@line 6147
    } while (($45 | 0) != ($3 | 0));
    $$sroa$13$1 = $$sroa$13$0; //@line 6156
    $51 = HEAP32[$0 >> 2] | 0; //@line 6156
   }
   HEAP32[$0 >> 2] = $38; //@line 6158
   HEAP32[$8 >> 2] = $40; //@line 6159
   HEAP32[$2 >> 2] = $$sroa$13$1; //@line 6160
   HEAP32[$4 >> 2] = $42; //@line 6161
   if (!$51) {
    $55 = $$sroa$13$1; //@line 6165
   } else {
    __ZdlPv($51); //@line 6167
    $55 = HEAP32[$2 >> 2] | 0; //@line 6169
   }
  } else {
   $55 = $3; //@line 6172
  }
 } while (0);
 HEAP32[$55 >> 2] = HEAP32[$1 >> 2]; //@line 6176
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 4; //@line 6179
 return;
}
function __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $$0$i$i12 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 63028
 STACKTOP = STACKTOP + 1040 | 0; //@line 63029
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040); //@line 63029
 $vararg_buffer = sp; //@line 63030
 $2 = sp + 1032 | 0; //@line 63031
 $3 = sp + 8 | 0; //@line 63032
 $5 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 63034
 $6 = _strerror_r($1, $3, 1024) | 0; //@line 63035
 switch ($6 | 0) {
 case 0:
  {
   HEAP32[$0 >> 2] = 0; //@line 63038
   HEAP32[$0 + 4 >> 2] = 0; //@line 63038
   HEAP32[$0 + 8 >> 2] = 0; //@line 63038
   $23 = __ZNSt3__211char_traitsIcE6lengthEPKc($3) | 0; //@line 63039
   if ($23 >>> 0 > 4294967279) {
    __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 63042
   }
   if ($23 >>> 0 < 11) {
    HEAP8[$0 + 11 >> 0] = $23; //@line 63049
    $$0$i$i12 = $0; //@line 63050
   } else {
    $29 = $23 + 16 & -16; //@line 63053
    $30 = __Znwj($29) | 0; //@line 63054
    HEAP32[$0 >> 2] = $30; //@line 63055
    HEAP32[$0 + 8 >> 2] = $29 | -2147483648; //@line 63058
    HEAP32[$0 + 4 >> 2] = $23; //@line 63060
    $$0$i$i12 = $30; //@line 63061
   }
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i12, $3, $23) | 0; //@line 63063
   HEAP8[$2 >> 0] = 0; //@line 63065
   __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i12 + $23 | 0, $2); //@line 63066
   break;
  }
 case -1:
  {
   $10 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 63072
   label = 3; //@line 63073
   break;
  }
 default:
  {
   $10 = $6; //@line 63077
   label = 3; //@line 63078
  }
 }
 L11 : do {
  if ((label | 0) == 3) {
   HEAP32[(___errno_location() | 0) >> 2] = $5; //@line 63084
   switch ($10 | 0) {
   case 22:
    {
     HEAP32[$vararg_buffer >> 2] = $1; //@line 63087
     _snprintf($3, 1024, 32103, $vararg_buffer) | 0; //@line 63088
     HEAP32[$0 >> 2] = 0; //@line 63089
     HEAP32[$0 + 4 >> 2] = 0; //@line 63089
     HEAP32[$0 + 8 >> 2] = 0; //@line 63089
     $11 = __ZNSt3__211char_traitsIcE6lengthEPKc($3) | 0; //@line 63090
     if ($11 >>> 0 > 4294967279) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 63093
     }
     if ($11 >>> 0 < 11) {
      HEAP8[$0 + 11 >> 0] = $11; //@line 63100
      $$0$i$i = $0; //@line 63101
     } else {
      $17 = $11 + 16 & -16; //@line 63104
      $18 = __Znwj($17) | 0; //@line 63105
      HEAP32[$0 >> 2] = $18; //@line 63106
      HEAP32[$0 + 8 >> 2] = $17 | -2147483648; //@line 63109
      HEAP32[$0 + 4 >> 2] = $11; //@line 63111
      $$0$i$i = $18; //@line 63112
     }
     __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, $3, $11) | 0; //@line 63114
     HEAP8[$vararg_buffer >> 0] = 0; //@line 63116
     __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $11 | 0, $vararg_buffer); //@line 63117
     break L11;
     break;
    }
   case 34:
    {
     _abort(); //@line 63122
     break;
    }
   default:
    {
     ___assert_fail(32120, 32140, 99, 32221); //@line 63127
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 63133
 return;
}
function __ZNSt3__2L11init_monthsEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[33240] | 0)) {
  if (___cxa_guard_acquire(33240) | 0) {
   $4 = 35924; //@line 39165
   do {
    HEAP32[$4 >> 2] = 0; //@line 39167
    HEAP32[$4 + 4 >> 2] = 0; //@line 39167
    HEAP32[$4 + 8 >> 2] = 0; //@line 39167
    $$0$i$i = 0; //@line 39168
    while (1) {
     if (($$0$i$i | 0) == 3) {
      break;
     }
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0; //@line 39175
     $$0$i$i = $$0$i$i + 1 | 0; //@line 39177
    }
    $4 = $4 + 12 | 0; //@line 39179
   } while (($4 | 0) != 36212);
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35924, 30290) | 0; //@line 39189
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35936, 30298) | 0; //@line 39190
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35948, 30307) | 0; //@line 39191
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35960, 30313) | 0; //@line 39192
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35972, 30319) | 0; //@line 39193
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35984, 30323) | 0; //@line 39194
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35996, 30328) | 0; //@line 39195
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36008, 30333) | 0; //@line 39196
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36020, 30340) | 0; //@line 39197
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36032, 30350) | 0; //@line 39198
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36044, 30358) | 0; //@line 39199
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36056, 30367) | 0; //@line 39200
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36068, 30376) | 0; //@line 39201
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36080, 30380) | 0; //@line 39202
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36092, 30384) | 0; //@line 39203
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36104, 30388) | 0; //@line 39204
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36116, 30319) | 0; //@line 39205
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36128, 30392) | 0; //@line 39206
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36140, 30396) | 0; //@line 39207
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36152, 30400) | 0; //@line 39208
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36164, 30404) | 0; //@line 39209
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36176, 30408) | 0; //@line 39210
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36188, 30412) | 0; //@line 39211
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36200, 30416) | 0; //@line 39212
 return;
}
function __ZNSt3__2L12init_wmonthsEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[33320] | 0)) {
  if (___cxa_guard_acquire(33320) | 0) {
   $4 = 36736; //@line 42117
   do {
    HEAP32[$4 >> 2] = 0; //@line 42119
    HEAP32[$4 + 4 >> 2] = 0; //@line 42119
    HEAP32[$4 + 8 >> 2] = 0; //@line 42119
    $$0$i$i = 0; //@line 42120
    while (1) {
     if (($$0$i$i | 0) == 3) {
      break;
     }
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0; //@line 42127
     $$0$i$i = $$0$i$i + 1 | 0; //@line 42129
    }
    $4 = $4 + 12 | 0; //@line 42131
   } while (($4 | 0) != 37024);
  }
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36736, 10868) | 0; //@line 42141
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36748, 10900) | 0; //@line 42142
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36760, 10936) | 0; //@line 42143
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36772, 10960) | 0; //@line 42144
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36784, 10984) | 0; //@line 42145
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36796, 11e3) | 0; //@line 42146
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36808, 11020) | 0; //@line 42147
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36820, 11040) | 0; //@line 42148
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36832, 11068) | 0; //@line 42149
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36844, 11108) | 0; //@line 42150
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36856, 11140) | 0; //@line 42151
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36868, 11176) | 0; //@line 42152
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36880, 11212) | 0; //@line 42153
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36892, 11228) | 0; //@line 42154
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36904, 11244) | 0; //@line 42155
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36916, 11260) | 0; //@line 42156
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36928, 10984) | 0; //@line 42157
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36940, 11276) | 0; //@line 42158
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36952, 11292) | 0; //@line 42159
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36964, 11308) | 0; //@line 42160
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36976, 11324) | 0; //@line 42161
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36988, 11340) | 0; //@line 42162
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37e3, 11356) | 0; //@line 42163
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37012, 11372) | 0; //@line 42164
 return;
}
function __ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS3_IFvS5_P13RunnerContextEEEEEEE12__assign_altILb1ELj1ESB_RKSB_EEvRNS0_5__altIXT0_ET1_EEOT2_NS_17integral_constantIbXT_EEEENKUt_clENSN_IbLb1EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pr = 0, $13 = 0, $2 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $49 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15729
 STACKTOP = STACKTOP + 32 | 0; //@line 15730
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15730
 $2 = sp + 24 | 0; //@line 15731
 $3 = sp; //@line 15732
 $4 = HEAP32[$0 >> 2] | 0; //@line 15733
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 15735
 $7 = $6 + 16 | 0; //@line 15736
 $8 = HEAP32[$7 >> 2] | 0; //@line 15737
 do {
  if (!$8) {
   HEAP32[$3 + 16 >> 2] = 0; //@line 15742
  } else {
   if (($6 | 0) == ($8 | 0)) {
    HEAP32[$3 + 16 >> 2] = $3; //@line 15747
    $13 = HEAP32[$7 >> 2] | 0; //@line 15748
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] & 255]($13, $3); //@line 15752
    break;
   } else {
    HEAP32[$3 + 16 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] & 255]($8) | 0; //@line 15760
    break;
   }
  }
 } while (0);
 $22 = $4 + 24 | 0; //@line 15765
 $23 = HEAP32[$22 >> 2] | 0; //@line 15766
 do {
  if (($23 | 0) != -1) {
   __THREW__ = 0; //@line 15772
   invoke_vii(HEAP32[3088 + ($23 << 2) >> 2] | 0, $2 | 0, $4 | 0); //@line 15773
   $27 = __THREW__; //@line 15774
   __THREW__ = 0; //@line 15774
   if ($27 & 1) {
    $29 = ___cxa_find_matching_catch_3(0) | 0; //@line 15777
    ___clang_call_terminate($29); //@line 15779
   } else {
    break;
   }
  }
 } while (0);
 HEAP32[$22 >> 2] = -1; //@line 15786
 $31 = $3 + 16 | 0; //@line 15787
 $32 = HEAP32[$31 >> 2] | 0; //@line 15788
 do {
  if (!$32) {
   HEAP32[$4 + 16 >> 2] = 0; //@line 15793
   label = 16; //@line 15794
  } else {
   if (($3 | 0) != ($32 | 0)) {
    HEAP32[$4 + 16 >> 2] = $32; //@line 15799
    HEAP32[$31 >> 2] = 0; //@line 15800
    $47 = 0; //@line 15801
    $49 = 0; //@line 15801
    break;
   }
   HEAP32[$4 + 16 >> 2] = $4; //@line 15805
   $37 = HEAP32[$31 >> 2] | 0; //@line 15806
   __THREW__ = 0; //@line 15810
   invoke_vii(HEAP32[(HEAP32[$37 >> 2] | 0) + 12 >> 2] | 0, $37 | 0, $4 | 0); //@line 15811
   $41 = __THREW__; //@line 15812
   __THREW__ = 0; //@line 15812
   if ($41 & 1) {
    $44 = ___cxa_find_matching_catch_3(0) | 0; //@line 15815
    ___clang_call_terminate($44); //@line 15817
   } else {
    label = 16; //@line 15820
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  $$pr = HEAP32[$31 >> 2] | 0; //@line 15825
  $47 = $$pr; //@line 15826
  $49 = $$pr; //@line 15826
 }
 HEAP32[$22 >> 2] = 1; //@line 15828
 if (($3 | 0) == ($47 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$49 >> 2] | 0) + 16 >> 2] & 511]($49); //@line 15834
  STACKTOP = sp; //@line 15835
  return;
 }
 if (!$49) {
  STACKTOP = sp; //@line 15839
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$49 >> 2] | 0) + 20 >> 2] & 511]($49); //@line 15844
 STACKTOP = sp; //@line 15845
 return;
}
function __ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS3_IFvS5_P13RunnerContextEEEEEEE12__assign_altILb1ELj0ES7_RKS7_EEvRNS0_5__altIXT0_ET1_EEOT2_NS_17integral_constantIbXT_EEEENKUt_clENSN_IbLb1EEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pr = 0, $13 = 0, $2 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $49 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15853
 STACKTOP = STACKTOP + 32 | 0; //@line 15854
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15854
 $2 = sp + 24 | 0; //@line 15855
 $3 = sp; //@line 15856
 $4 = HEAP32[$0 >> 2] | 0; //@line 15857
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 15859
 $7 = $6 + 16 | 0; //@line 15860
 $8 = HEAP32[$7 >> 2] | 0; //@line 15861
 do {
  if (!$8) {
   HEAP32[$3 + 16 >> 2] = 0; //@line 15866
  } else {
   if (($6 | 0) == ($8 | 0)) {
    HEAP32[$3 + 16 >> 2] = $3; //@line 15871
    $13 = HEAP32[$7 >> 2] | 0; //@line 15872
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] & 255]($13, $3); //@line 15876
    break;
   } else {
    HEAP32[$3 + 16 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] & 255]($8) | 0; //@line 15884
    break;
   }
  }
 } while (0);
 $22 = $4 + 24 | 0; //@line 15889
 $23 = HEAP32[$22 >> 2] | 0; //@line 15890
 do {
  if (($23 | 0) != -1) {
   __THREW__ = 0; //@line 15896
   invoke_vii(HEAP32[3088 + ($23 << 2) >> 2] | 0, $2 | 0, $4 | 0); //@line 15897
   $27 = __THREW__; //@line 15898
   __THREW__ = 0; //@line 15898
   if ($27 & 1) {
    $29 = ___cxa_find_matching_catch_3(0) | 0; //@line 15901
    ___clang_call_terminate($29); //@line 15903
   } else {
    break;
   }
  }
 } while (0);
 HEAP32[$22 >> 2] = -1; //@line 15910
 $31 = $3 + 16 | 0; //@line 15911
 $32 = HEAP32[$31 >> 2] | 0; //@line 15912
 do {
  if (!$32) {
   HEAP32[$4 + 16 >> 2] = 0; //@line 15917
   label = 16; //@line 15918
  } else {
   if (($3 | 0) != ($32 | 0)) {
    HEAP32[$4 + 16 >> 2] = $32; //@line 15923
    HEAP32[$31 >> 2] = 0; //@line 15924
    $47 = 0; //@line 15925
    $49 = 0; //@line 15925
    break;
   }
   HEAP32[$4 + 16 >> 2] = $4; //@line 15929
   $37 = HEAP32[$31 >> 2] | 0; //@line 15930
   __THREW__ = 0; //@line 15934
   invoke_vii(HEAP32[(HEAP32[$37 >> 2] | 0) + 12 >> 2] | 0, $37 | 0, $4 | 0); //@line 15935
   $41 = __THREW__; //@line 15936
   __THREW__ = 0; //@line 15936
   if ($41 & 1) {
    $44 = ___cxa_find_matching_catch_3(0) | 0; //@line 15939
    ___clang_call_terminate($44); //@line 15941
   } else {
    label = 16; //@line 15944
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  $$pr = HEAP32[$31 >> 2] | 0; //@line 15949
  $47 = $$pr; //@line 15950
  $49 = $$pr; //@line 15950
 }
 HEAP32[$22 >> 2] = 0; //@line 15952
 if (($3 | 0) == ($47 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$49 >> 2] | 0) + 16 >> 2] & 511]($49); //@line 15958
  STACKTOP = sp; //@line 15959
  return;
 }
 if (!$49) {
  STACKTOP = sp; //@line 15963
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$49 >> 2] | 0) + 20 >> 2] & 511]($49); //@line 15968
 STACKTOP = sp; //@line 15969
 return;
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $14 = 0, $21 = 0, $29 = 0, $34 = 0, $36 = 0, $42 = 0, $43 = 0, $55 = 0, $58 = 0, label = 0;
 $10 = HEAP32[$3 >> 2] | 0; //@line 29924
 $11 = ($10 | 0) == ($2 | 0); //@line 29925
 do {
  if ($11) {
   $14 = (HEAP32[$9 + 96 >> 2] | 0) == ($0 | 0); //@line 29930
   if (!$14) {
    if ((HEAP32[$9 + 100 >> 2] | 0) != ($0 | 0)) {
     label = 5; //@line 29936
     break;
    }
   }
   HEAP32[$3 >> 2] = $2 + 1; //@line 29942
   HEAP8[$2 >> 0] = $14 ? 43 : 45; //@line 29943
   HEAP32[$4 >> 2] = 0; //@line 29944
   $$1 = 0; //@line 29945
  } else {
   label = 5; //@line 29947
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 5) {
   $21 = HEAP8[$6 + 11 >> 0] | 0; //@line 29953
   if (($0 | 0) == ($5 | 0) ? (($21 << 24 >> 24 < 0 ? HEAP32[$6 + 4 >> 2] | 0 : $21 & 255) | 0) != 0 : 0) {
    $29 = HEAP32[$8 >> 2] | 0; //@line 29963
    if (($29 - $7 | 0) >= 160) {
     $$1 = 0; //@line 29969
     break;
    }
    $34 = HEAP32[$4 >> 2] | 0; //@line 29972
    HEAP32[$8 >> 2] = $29 + 4; //@line 29974
    HEAP32[$29 >> 2] = $34; //@line 29975
    HEAP32[$4 >> 2] = 0; //@line 29976
    $$1 = 0; //@line 29977
    break;
   }
   $36 = $9 + 104 | 0; //@line 29980
   $$0$i$idx = 0; //@line 29981
   while (1) {
    $$0$i$ptr = $9 + ($$0$i$idx << 2) | 0; //@line 29983
    if (($$0$i$idx | 0) == 26) {
     $$0$lcssa$i = $36; //@line 29986
     break;
    }
    if ((HEAP32[$$0$i$ptr >> 2] | 0) == ($0 | 0)) {
     $$0$lcssa$i = $$0$i$ptr; //@line 29993
     break;
    } else {
     $$0$i$idx = $$0$i$idx + 1 | 0; //@line 29996
    }
   }
   $42 = $$0$lcssa$i - $9 | 0; //@line 30001
   $43 = $42 >> 2; //@line 30002
   if (($42 | 0) > 92) {
    $$1 = -1; //@line 30005
   } else {
    switch ($1 | 0) {
    case 10:
    case 8:
     {
      if (($43 | 0) >= ($1 | 0)) {
       $$1 = -1; //@line 30011
       break L6;
      }
      break;
     }
    case 16:
     {
      if (($42 | 0) >= 88) {
       if ($11) {
        $$1 = -1; //@line 30020
        break L6;
       }
       if (($10 - $2 | 0) >= 3) {
        $$1 = -1; //@line 30028
        break L6;
       }
       if ((HEAP8[$10 + -1 >> 0] | 0) != 48) {
        $$1 = -1; //@line 30035
        break L6;
       }
       HEAP32[$4 >> 2] = 0; //@line 30038
       $55 = HEAP8[29766 + $43 >> 0] | 0; //@line 30040
       HEAP32[$3 >> 2] = $10 + 1; //@line 30042
       HEAP8[$10 >> 0] = $55; //@line 30043
       $$1 = 0; //@line 30044
       break L6;
      }
      break;
     }
    default:
     {}
    }
    $58 = HEAP8[29766 + $43 >> 0] | 0; //@line 30053
    HEAP32[$3 >> 2] = $10 + 1; //@line 30055
    HEAP8[$10 >> 0] = $58; //@line 30056
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1; //@line 30059
    $$1 = 0; //@line 30060
   }
  }
 } while (0);
 return $$1 | 0; //@line 30064
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $14 = 0, $21 = 0, $29 = 0, $34 = 0, $36 = 0, $42 = 0, $54 = 0, $57 = 0, label = 0;
 $10 = HEAP32[$3 >> 2] | 0; //@line 23418
 $11 = ($10 | 0) == ($2 | 0); //@line 23419
 do {
  if ($11) {
   $14 = (HEAP8[$9 + 24 >> 0] | 0) == $0 << 24 >> 24; //@line 23424
   if (!$14) {
    if ((HEAP8[$9 + 25 >> 0] | 0) != $0 << 24 >> 24) {
     label = 5; //@line 23430
     break;
    }
   }
   HEAP32[$3 >> 2] = $2 + 1; //@line 23436
   HEAP8[$2 >> 0] = $14 ? 43 : 45; //@line 23437
   HEAP32[$4 >> 2] = 0; //@line 23438
   $$1 = 0; //@line 23439
  } else {
   label = 5; //@line 23441
  }
 } while (0);
 L6 : do {
  if ((label | 0) == 5) {
   $21 = HEAP8[$6 + 11 >> 0] | 0; //@line 23447
   if ($0 << 24 >> 24 == $5 << 24 >> 24 ? (($21 << 24 >> 24 < 0 ? HEAP32[$6 + 4 >> 2] | 0 : $21 & 255) | 0) != 0 : 0) {
    $29 = HEAP32[$8 >> 2] | 0; //@line 23457
    if (($29 - $7 | 0) >= 160) {
     $$1 = 0; //@line 23463
     break;
    }
    $34 = HEAP32[$4 >> 2] | 0; //@line 23466
    HEAP32[$8 >> 2] = $29 + 4; //@line 23468
    HEAP32[$29 >> 2] = $34; //@line 23469
    HEAP32[$4 >> 2] = 0; //@line 23470
    $$1 = 0; //@line 23471
    break;
   }
   $36 = $9 + 26 | 0; //@line 23474
   $$0$i$idx = 0; //@line 23475
   while (1) {
    $$0$i$ptr = $9 + $$0$i$idx | 0; //@line 23477
    if (($$0$i$idx | 0) == 26) {
     $$0$lcssa$i = $36; //@line 23480
     break;
    }
    if ((HEAP8[$$0$i$ptr >> 0] | 0) == $0 << 24 >> 24) {
     $$0$lcssa$i = $$0$i$ptr; //@line 23487
     break;
    } else {
     $$0$i$idx = $$0$i$idx + 1 | 0; //@line 23490
    }
   }
   $42 = $$0$lcssa$i - $9 | 0; //@line 23495
   if (($42 | 0) > 23) {
    $$1 = -1; //@line 23498
   } else {
    switch ($1 | 0) {
    case 10:
    case 8:
     {
      if (($42 | 0) >= ($1 | 0)) {
       $$1 = -1; //@line 23504
       break L6;
      }
      break;
     }
    case 16:
     {
      if (($42 | 0) >= 22) {
       if ($11) {
        $$1 = -1; //@line 23513
        break L6;
       }
       if (($10 - $2 | 0) >= 3) {
        $$1 = -1; //@line 23521
        break L6;
       }
       if ((HEAP8[$10 + -1 >> 0] | 0) != 48) {
        $$1 = -1; //@line 23528
        break L6;
       }
       HEAP32[$4 >> 2] = 0; //@line 23531
       $54 = HEAP8[29766 + $42 >> 0] | 0; //@line 23533
       HEAP32[$3 >> 2] = $10 + 1; //@line 23535
       HEAP8[$10 >> 0] = $54; //@line 23536
       $$1 = 0; //@line 23537
       break L6;
      }
      break;
     }
    default:
     {}
    }
    $57 = HEAP8[29766 + $42 >> 0] | 0; //@line 23546
    HEAP32[$3 >> 2] = $10 + 1; //@line 23548
    HEAP8[$10 >> 0] = $57; //@line 23549
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1; //@line 23552
    $$1 = 0; //@line 23553
   }
  }
 } while (0);
 return $$1 | 0; //@line 23557
}
function __ZN6Parser12advanceParseERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $33 = 0, $35 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 28738
 STACKTOP = STACKTOP + 16 | 0; //@line 28739
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 28739
 $3 = sp; //@line 28740
 $4 = $2 + 11 | 0; //@line 28741
 $5 = HEAP8[$4 >> 0] | 0; //@line 28742
 $7 = $2 + 4 | 0; //@line 28744
 if (!(($5 << 24 >> 24 < 0 ? HEAP32[$7 >> 2] | 0 : $5 & 255) | 0)) {
  __THREW__ = 0; //@line 28750
  $12 = invoke_iiiiii(21, $2 | 0, 0, -1, 39514, 0) | 0; //@line 28751
  $13 = __THREW__; //@line 28752
  __THREW__ = 0; //@line 28752
  if ($13 & 1) {
   $15 = ___cxa_find_matching_catch_3(0) | 0; //@line 28755
   ___clang_call_terminate($15); //@line 28757
  }
  if (!$12) {
   $$0 = 0; //@line 28762
   STACKTOP = sp; //@line 28763
   return $$0 | 0; //@line 28763
  }
 }
 $18 = __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($2, 32, 0) | 0; //@line 28766
 if (($18 | 0) == -1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($1, $2) | 0; //@line 28769
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($2, 39514) | 0; //@line 28770
  $$0 = 1; //@line 28771
  STACKTOP = sp; //@line 28772
  return $$0 | 0; //@line 28772
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($3, $2, 0, $18, $2); //@line 28774
 $20 = $1 + 11 | 0; //@line 28775
 if ((HEAP8[$20 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$1 >> 2] >> 0] = 0; //@line 28780
  HEAP32[$1 + 4 >> 2] = 0; //@line 28782
 } else {
  HEAP8[$1 >> 0] = 0; //@line 28784
  HEAP8[$20 >> 0] = 0; //@line 28785
 }
 __THREW__ = 0; //@line 28787
 invoke_vii(129, $1 | 0, 0); //@line 28788
 $25 = __THREW__; //@line 28789
 __THREW__ = 0; //@line 28789
 if ($25 & 1) {
  $27 = ___cxa_find_matching_catch_3(0) | 0; //@line 28792
  ___clang_call_terminate($27); //@line 28794
 }
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2]; //@line 28797
 HEAP32[$1 + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 28797
 HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 28797
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($3, $2, $18 + 1 | 0, -1, $2); //@line 28799
 if ((HEAP8[$4 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$2 >> 2] >> 0] = 0; //@line 28804
  HEAP32[$7 >> 2] = 0; //@line 28805
 } else {
  HEAP8[$2 >> 0] = 0; //@line 28807
  HEAP8[$4 >> 0] = 0; //@line 28808
 }
 __THREW__ = 0; //@line 28810
 invoke_vii(129, $2 | 0, 0); //@line 28811
 $33 = __THREW__; //@line 28812
 __THREW__ = 0; //@line 28812
 if ($33 & 1) {
  $35 = ___cxa_find_matching_catch_3(0) | 0; //@line 28815
  ___clang_call_terminate($35); //@line 28817
 }
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 28820
 HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 28820
 HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 28820
 $$0 = 1; //@line 28821
 STACKTOP = sp; //@line 28822
 return $$0 | 0; //@line 28822
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6985
 STACKTOP = STACKTOP + 48 | 0; //@line 6986
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6986
 $vararg_buffer3 = sp + 16 | 0; //@line 6987
 $vararg_buffer = sp; //@line 6988
 $3 = sp + 32 | 0; //@line 6989
 $4 = $0 + 28 | 0; //@line 6990
 $5 = HEAP32[$4 >> 2] | 0; //@line 6991
 HEAP32[$3 >> 2] = $5; //@line 6992
 $7 = $0 + 20 | 0; //@line 6994
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 6996
 HEAP32[$3 + 4 >> 2] = $9; //@line 6997
 HEAP32[$3 + 8 >> 2] = $1; //@line 6999
 HEAP32[$3 + 12 >> 2] = $2; //@line 7001
 $12 = $9 + $2 | 0; //@line 7002
 $13 = $0 + 60 | 0; //@line 7003
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 7006
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 7008
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 7010
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 7012
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 7016
  } else {
   $$04756 = 2; //@line 7018
   $$04855 = $12; //@line 7018
   $$04954 = $3; //@line 7018
   $26 = $17; //@line 7018
   while (1) {
    if (($26 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $26 | 0; //@line 7024
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 7026
    $38 = $26 >>> 0 > $37 >>> 0; //@line 7027
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 7029
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 7031
    $$0 = $26 - ($38 ? $37 : 0) | 0; //@line 7033
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 7036
    $44 = $$150 + 4 | 0; //@line 7037
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 7040
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 7043
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 7045
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 7047
    $26 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 7049
    if (($$04855 | 0) == ($26 | 0)) {
     label = 3; //@line 7052
     break L1;
    } else {
     $$04756 = $$1; //@line 7055
     $$04954 = $$150; //@line 7055
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 7059
   HEAP32[$4 >> 2] = 0; //@line 7060
   HEAP32[$7 >> 2] = 0; //@line 7061
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 7064
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 7067
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 7072
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 7078
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 7083
  $25 = $20; //@line 7084
  HEAP32[$4 >> 2] = $25; //@line 7085
  HEAP32[$7 >> 2] = $25; //@line 7086
  $$051 = $2; //@line 7087
 }
 STACKTOP = sp; //@line 7089
 return $$051 | 0; //@line 7089
}
function __ZN13CharmFunctionaSEOS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 13366
 $3 = $0 + 4 | 0; //@line 13367
 $4 = $1 + 4 | 0; //@line 13368
 $5 = $3 + 11 | 0; //@line 13369
 if ((HEAP8[$5 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$3 >> 2] >> 0] = 0; //@line 13374
  HEAP32[$0 + 8 >> 2] = 0; //@line 13376
 } else {
  HEAP8[$3 >> 0] = 0; //@line 13378
  HEAP8[$5 >> 0] = 0; //@line 13379
 }
 __THREW__ = 0; //@line 13381
 invoke_vii(129, $3 | 0, 0); //@line 13382
 $10 = __THREW__; //@line 13383
 __THREW__ = 0; //@line 13383
 if ($10 & 1) {
  $12 = ___cxa_find_matching_catch_3(0) | 0; //@line 13386
  ___clang_call_terminate($12); //@line 13388
 }
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2]; //@line 13391
 HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 13391
 HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 13391
 HEAP32[$4 >> 2] = 0; //@line 13392
 HEAP32[$4 + 4 >> 2] = 0; //@line 13392
 HEAP32[$4 + 8 >> 2] = 0; //@line 13392
 $14 = $0 + 16 | 0; //@line 13393
 $15 = $1 + 16 | 0; //@line 13394
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2]; //@line 13395
 HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2]; //@line 13395
 HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2]; //@line 13395
 HEAP32[$14 + 12 >> 2] = HEAP32[$15 + 12 >> 2]; //@line 13395
 HEAP32[$14 + 16 >> 2] = HEAP32[$15 + 16 >> 2]; //@line 13395
 HEAP32[$14 + 20 >> 2] = HEAP32[$15 + 20 >> 2]; //@line 13395
 $16 = $0 + 40 | 0; //@line 13396
 $17 = $1 + 40 | 0; //@line 13397
 __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($16); //@line 13398
 HEAP32[$16 >> 2] = HEAP32[$17 >> 2]; //@line 13400
 $19 = $1 + 44 | 0; //@line 13401
 HEAP32[$0 + 44 >> 2] = HEAP32[$19 >> 2]; //@line 13404
 $22 = $1 + 48 | 0; //@line 13405
 HEAP32[$0 + 48 >> 2] = HEAP32[$22 >> 2]; //@line 13408
 HEAP32[$22 >> 2] = 0; //@line 13409
 HEAP32[$19 >> 2] = 0; //@line 13410
 HEAP32[$17 >> 2] = 0; //@line 13411
 $25 = $0 + 52 | 0; //@line 13412
 $26 = $1 + 52 | 0; //@line 13413
 $27 = $25 + 11 | 0; //@line 13414
 if ((HEAP8[$27 >> 0] | 0) < 0) {
  HEAP8[HEAP32[$25 >> 2] >> 0] = 0; //@line 13419
  HEAP32[$0 + 56 >> 2] = 0; //@line 13421
 } else {
  HEAP8[$25 >> 0] = 0; //@line 13423
  HEAP8[$27 >> 0] = 0; //@line 13424
 }
 __THREW__ = 0; //@line 13426
 invoke_vii(129, $25 | 0, 0); //@line 13427
 $32 = __THREW__; //@line 13428
 __THREW__ = 0; //@line 13428
 if ($32 & 1) {
  $34 = ___cxa_find_matching_catch_3(0) | 0; //@line 13431
  ___clang_call_terminate($34); //@line 13433
 } else {
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2]; //@line 13436
  HEAP32[$25 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 13436
  HEAP32[$25 + 8 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 13436
  HEAP32[$26 >> 2] = 0; //@line 13437
  HEAP32[$26 + 4 >> 2] = 0; //@line 13437
  HEAP32[$26 + 8 >> 2] = 0; //@line 13437
  HEAP16[$0 + 64 >> 1] = HEAP16[$1 + 64 >> 1] | 0; //@line 13441
  return $0 | 0; //@line 13442
 }
 return 0; //@line 13444
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $6 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 41886
 STACKTOP = STACKTOP + 16 | 0; //@line 41887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41887
 $1 = sp; //@line 41888
 L1 : do {
  if (!(HEAP8[33272] | 0)) {
   if (___cxa_guard_acquire(33272) | 0) {
    HEAP32[9102] = 0; //@line 41896
    HEAP32[9103] = 0; //@line 41896
    HEAP32[9104] = 0; //@line 41896
    $6 = __ZNSt3__211char_traitsIwE6lengthEPKw(10676) | 0; //@line 41897
    L4 : do {
     if ($6 >>> 0 > 1073741807) {
      __THREW__ = 0; //@line 41901
      invoke_vi(258, 36408); //@line 41902
      __THREW__ = 0; //@line 41903
      label = 15; //@line 41904
     } else {
      do {
       if ($6 >>> 0 < 2) {
        HEAP8[36419] = $6; //@line 41910
        $$0$i$i = 36408; //@line 41911
       } else {
        $12 = $6 + 4 & -4; //@line 41914
        if ($12 >>> 0 <= 1073741823) {
         __THREW__ = 0; //@line 41918
         $21 = invoke_ii(142, $12 << 2 | 0) | 0; //@line 41919
         $22 = __THREW__; //@line 41920
         __THREW__ = 0; //@line 41920
         if ($22 & 1) {
          label = 15; //@line 41923
          break L4;
         }
         HEAP32[9102] = $21; //@line 41926
         HEAP32[9104] = $12 | -2147483648; //@line 41928
         HEAP32[9103] = $6; //@line 41929
         $$0$i$i = $21; //@line 41930
         break;
        }
        $14 = ___cxa_allocate_exception(8) | 0; //@line 41933
        __THREW__ = 0; //@line 41934
        invoke_vii(119, $14 | 0, 31992); //@line 41935
        $15 = __THREW__; //@line 41936
        __THREW__ = 0; //@line 41936
        if ($15 & 1) {
         $18 = ___cxa_find_matching_catch_2() | 0; //@line 41939
         $19 = tempRet0; //@line 41940
         ___cxa_free_exception($14 | 0); //@line 41941
         $eh$lpad$body$index2Z2D = $19; //@line 41942
         $eh$lpad$body$indexZ2D = $18; //@line 41942
         break L4;
        } else {
         HEAP32[$14 >> 2] = 13224; //@line 41945
         __THREW__ = 0; //@line 41946
         invoke_viii(16, $14 | 0, 2856, 240); //@line 41947
         __THREW__ = 0; //@line 41948
         label = 15; //@line 41949
         break L4;
        }
       }
      } while (0);
      __ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i, 10676, $6) | 0; //@line 41954
      HEAP32[$1 >> 2] = 0; //@line 41956
      __ZNSt3__211char_traitsIwE6assignERwRKw($$0$i$i + ($6 << 2) | 0, $1); //@line 41957
      break L1;
     }
    } while (0);
    if ((label | 0) == 15) {
     $26 = ___cxa_find_matching_catch_2() | 0; //@line 41962
     $eh$lpad$body$index2Z2D = tempRet0; //@line 41964
     $eh$lpad$body$indexZ2D = $26; //@line 41964
    }
    ___resumeException($eh$lpad$body$indexZ2D | 0); //@line 41966
   }
  }
 } while (0);
 STACKTOP = sp; //@line 41971
 return 36408; //@line 41971
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $6 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 41795
 STACKTOP = STACKTOP + 16 | 0; //@line 41796
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41796
 $1 = sp; //@line 41797
 L1 : do {
  if (!(HEAP8[33280] | 0)) {
   if (___cxa_guard_acquire(33280) | 0) {
    HEAP32[9105] = 0; //@line 41805
    HEAP32[9106] = 0; //@line 41805
    HEAP32[9107] = 0; //@line 41805
    $6 = __ZNSt3__211char_traitsIwE6lengthEPKw(10712) | 0; //@line 41806
    L4 : do {
     if ($6 >>> 0 > 1073741807) {
      __THREW__ = 0; //@line 41810
      invoke_vi(258, 36420); //@line 41811
      __THREW__ = 0; //@line 41812
      label = 15; //@line 41813
     } else {
      do {
       if ($6 >>> 0 < 2) {
        HEAP8[36431] = $6; //@line 41819
        $$0$i$i = 36420; //@line 41820
       } else {
        $12 = $6 + 4 & -4; //@line 41823
        if ($12 >>> 0 <= 1073741823) {
         __THREW__ = 0; //@line 41827
         $21 = invoke_ii(142, $12 << 2 | 0) | 0; //@line 41828
         $22 = __THREW__; //@line 41829
         __THREW__ = 0; //@line 41829
         if ($22 & 1) {
          label = 15; //@line 41832
          break L4;
         }
         HEAP32[9105] = $21; //@line 41835
         HEAP32[9107] = $12 | -2147483648; //@line 41837
         HEAP32[9106] = $6; //@line 41838
         $$0$i$i = $21; //@line 41839
         break;
        }
        $14 = ___cxa_allocate_exception(8) | 0; //@line 41842
        __THREW__ = 0; //@line 41843
        invoke_vii(119, $14 | 0, 31992); //@line 41844
        $15 = __THREW__; //@line 41845
        __THREW__ = 0; //@line 41845
        if ($15 & 1) {
         $18 = ___cxa_find_matching_catch_2() | 0; //@line 41848
         $19 = tempRet0; //@line 41849
         ___cxa_free_exception($14 | 0); //@line 41850
         $eh$lpad$body$index2Z2D = $19; //@line 41851
         $eh$lpad$body$indexZ2D = $18; //@line 41851
         break L4;
        } else {
         HEAP32[$14 >> 2] = 13224; //@line 41854
         __THREW__ = 0; //@line 41855
         invoke_viii(16, $14 | 0, 2856, 240); //@line 41856
         __THREW__ = 0; //@line 41857
         label = 15; //@line 41858
         break L4;
        }
       }
      } while (0);
      __ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i, 10712, $6) | 0; //@line 41863
      HEAP32[$1 >> 2] = 0; //@line 41865
      __ZNSt3__211char_traitsIwE6assignERwRKw($$0$i$i + ($6 << 2) | 0, $1); //@line 41866
      break L1;
     }
    } while (0);
    if ((label | 0) == 15) {
     $26 = ___cxa_find_matching_catch_2() | 0; //@line 41871
     $eh$lpad$body$index2Z2D = tempRet0; //@line 41873
     $eh$lpad$body$indexZ2D = $26; //@line 41873
    }
    ___resumeException($eh$lpad$body$indexZ2D | 0); //@line 41875
   }
  }
 } while (0);
 STACKTOP = sp; //@line 41880
 return 36420; //@line 41880
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $6 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 41704
 STACKTOP = STACKTOP + 16 | 0; //@line 41705
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41705
 $1 = sp; //@line 41706
 L1 : do {
  if (!(HEAP8[33288] | 0)) {
   if (___cxa_guard_acquire(33288) | 0) {
    HEAP32[9108] = 0; //@line 41714
    HEAP32[9109] = 0; //@line 41714
    HEAP32[9110] = 0; //@line 41714
    $6 = __ZNSt3__211char_traitsIwE6lengthEPKw(10760) | 0; //@line 41715
    L4 : do {
     if ($6 >>> 0 > 1073741807) {
      __THREW__ = 0; //@line 41719
      invoke_vi(258, 36432); //@line 41720
      __THREW__ = 0; //@line 41721
      label = 15; //@line 41722
     } else {
      do {
       if ($6 >>> 0 < 2) {
        HEAP8[36443] = $6; //@line 41728
        $$0$i$i = 36432; //@line 41729
       } else {
        $12 = $6 + 4 & -4; //@line 41732
        if ($12 >>> 0 <= 1073741823) {
         __THREW__ = 0; //@line 41736
         $21 = invoke_ii(142, $12 << 2 | 0) | 0; //@line 41737
         $22 = __THREW__; //@line 41738
         __THREW__ = 0; //@line 41738
         if ($22 & 1) {
          label = 15; //@line 41741
          break L4;
         }
         HEAP32[9108] = $21; //@line 41744
         HEAP32[9110] = $12 | -2147483648; //@line 41746
         HEAP32[9109] = $6; //@line 41747
         $$0$i$i = $21; //@line 41748
         break;
        }
        $14 = ___cxa_allocate_exception(8) | 0; //@line 41751
        __THREW__ = 0; //@line 41752
        invoke_vii(119, $14 | 0, 31992); //@line 41753
        $15 = __THREW__; //@line 41754
        __THREW__ = 0; //@line 41754
        if ($15 & 1) {
         $18 = ___cxa_find_matching_catch_2() | 0; //@line 41757
         $19 = tempRet0; //@line 41758
         ___cxa_free_exception($14 | 0); //@line 41759
         $eh$lpad$body$index2Z2D = $19; //@line 41760
         $eh$lpad$body$indexZ2D = $18; //@line 41760
         break L4;
        } else {
         HEAP32[$14 >> 2] = 13224; //@line 41763
         __THREW__ = 0; //@line 41764
         invoke_viii(16, $14 | 0, 2856, 240); //@line 41765
         __THREW__ = 0; //@line 41766
         label = 15; //@line 41767
         break L4;
        }
       }
      } while (0);
      __ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i, 10760, $6) | 0; //@line 41772
      HEAP32[$1 >> 2] = 0; //@line 41774
      __ZNSt3__211char_traitsIwE6assignERwRKw($$0$i$i + ($6 << 2) | 0, $1); //@line 41775
      break L1;
     }
    } while (0);
    if ((label | 0) == 15) {
     $26 = ___cxa_find_matching_catch_2() | 0; //@line 41780
     $eh$lpad$body$index2Z2D = tempRet0; //@line 41782
     $eh$lpad$body$indexZ2D = $26; //@line 41782
    }
    ___resumeException($eh$lpad$body$indexZ2D | 0); //@line 41784
   }
  }
 } while (0);
 STACKTOP = sp; //@line 41789
 return 36432; //@line 41789
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $6 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 41977
 STACKTOP = STACKTOP + 16 | 0; //@line 41978
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41978
 $1 = sp; //@line 41979
 L1 : do {
  if (!(HEAP8[33264] | 0)) {
   if (___cxa_guard_acquire(33264) | 0) {
    HEAP32[9099] = 0; //@line 41987
    HEAP32[9100] = 0; //@line 41987
    HEAP32[9101] = 0; //@line 41987
    $6 = __ZNSt3__211char_traitsIwE6lengthEPKw(10640) | 0; //@line 41988
    L4 : do {
     if ($6 >>> 0 > 1073741807) {
      __THREW__ = 0; //@line 41992
      invoke_vi(258, 36396); //@line 41993
      __THREW__ = 0; //@line 41994
      label = 15; //@line 41995
     } else {
      do {
       if ($6 >>> 0 < 2) {
        HEAP8[36407] = $6; //@line 42001
        $$0$i$i = 36396; //@line 42002
       } else {
        $12 = $6 + 4 & -4; //@line 42005
        if ($12 >>> 0 <= 1073741823) {
         __THREW__ = 0; //@line 42009
         $21 = invoke_ii(142, $12 << 2 | 0) | 0; //@line 42010
         $22 = __THREW__; //@line 42011
         __THREW__ = 0; //@line 42011
         if ($22 & 1) {
          label = 15; //@line 42014
          break L4;
         }
         HEAP32[9099] = $21; //@line 42017
         HEAP32[9101] = $12 | -2147483648; //@line 42019
         HEAP32[9100] = $6; //@line 42020
         $$0$i$i = $21; //@line 42021
         break;
        }
        $14 = ___cxa_allocate_exception(8) | 0; //@line 42024
        __THREW__ = 0; //@line 42025
        invoke_vii(119, $14 | 0, 31992); //@line 42026
        $15 = __THREW__; //@line 42027
        __THREW__ = 0; //@line 42027
        if ($15 & 1) {
         $18 = ___cxa_find_matching_catch_2() | 0; //@line 42030
         $19 = tempRet0; //@line 42031
         ___cxa_free_exception($14 | 0); //@line 42032
         $eh$lpad$body$index2Z2D = $19; //@line 42033
         $eh$lpad$body$indexZ2D = $18; //@line 42033
         break L4;
        } else {
         HEAP32[$14 >> 2] = 13224; //@line 42036
         __THREW__ = 0; //@line 42037
         invoke_viii(16, $14 | 0, 2856, 240); //@line 42038
         __THREW__ = 0; //@line 42039
         label = 15; //@line 42040
         break L4;
        }
       }
      } while (0);
      __ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i, 10640, $6) | 0; //@line 42045
      HEAP32[$1 >> 2] = 0; //@line 42047
      __ZNSt3__211char_traitsIwE6assignERwRKw($$0$i$i + ($6 << 2) | 0, $1); //@line 42048
      break L1;
     }
    } while (0);
    if ((label | 0) == 15) {
     $26 = ___cxa_find_matching_catch_2() | 0; //@line 42053
     $eh$lpad$body$index2Z2D = tempRet0; //@line 42055
     $eh$lpad$body$indexZ2D = $26; //@line 42055
    }
    ___resumeException($eh$lpad$body$indexZ2D | 0); //@line 42057
   }
  }
 } while (0);
 STACKTOP = sp; //@line 42062
 return 36396; //@line 42062
}
function __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEEC2ERKS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$08$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i = 0, $$pre9$i = 0, $12 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $46 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 5076
 STACKTOP = STACKTOP + 32 | 0; //@line 5077
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5077
 $$byval_copy1 = sp + 24 | 0; //@line 5078
 $$byval_copy = sp + 16 | 0; //@line 5079
 $2 = sp + 8 | 0; //@line 5080
 $3 = sp; //@line 5081
 HEAP32[$0 >> 2] = 0; //@line 5082
 HEAP32[$0 + 4 >> 2] = 0; //@line 5082
 HEAP32[$0 + 8 >> 2] = 0; //@line 5082
 HEAP32[$0 + 12 >> 2] = 0; //@line 5082
 HEAP32[$0 + 16 >> 2] = 0; //@line 5082
 HEAP32[$0 + 20 >> 2] = 0; //@line 5082
 $5 = HEAP32[$1 + 4 >> 2] | 0; //@line 5084
 $7 = HEAP32[$1 + 16 >> 2] | 0; //@line 5086
 $9 = $5 + ((($7 >>> 0) / 56 | 0) << 2) | 0; //@line 5088
 $12 = (HEAP32[$1 + 8 >> 2] | 0) == ($5 | 0); //@line 5091
 if ($12) {
  $17 = 0; //@line 5093
 } else {
  $17 = (HEAP32[$9 >> 2] | 0) + ((($7 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 5098
 }
 HEAP32[$2 >> 2] = $9; //@line 5100
 HEAP32[$2 + 4 >> 2] = $17; //@line 5102
 $20 = $7 + (HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 5105
 $22 = $5 + ((($20 >>> 0) / 56 | 0) << 2) | 0; //@line 5107
 if ($12) {
  $27 = 0; //@line 5109
 } else {
  $27 = (HEAP32[$22 >> 2] | 0) + ((($20 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 5114
 }
 HEAP32[$3 >> 2] = $22; //@line 5116
 HEAP32[$3 + 4 >> 2] = $27; //@line 5118
 __THREW__ = 0; //@line 5119
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 5120
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 5120
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2]; //@line 5121
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 5121
 invoke_viiii(12, $0 | 0, $$byval_copy | 0, $$byval_copy1 | 0, 0); //@line 5122
 $28 = __THREW__; //@line 5123
 __THREW__ = 0; //@line 5123
 if (!($28 & 1)) {
  STACKTOP = sp; //@line 5126
  return;
 }
 $30 = ___cxa_find_matching_catch_2() | 0; //@line 5128
 __ZNSt3__212__deque_baseI13CharmFunctionNS_9allocatorIS1_EEE5clearEv($0); //@line 5130
 $32 = $0 + 4 | 0; //@line 5131
 $33 = HEAP32[$32 >> 2] | 0; //@line 5132
 $34 = $0 + 8 | 0; //@line 5133
 $35 = HEAP32[$34 >> 2] | 0; //@line 5134
 if (($33 | 0) != ($35 | 0)) {
  $$08$i = $33; //@line 5137
  do {
   __ZdlPv(HEAP32[$$08$i >> 2] | 0); //@line 5140
   $$08$i = $$08$i + 4 | 0; //@line 5141
  } while (($$08$i | 0) != ($35 | 0));
  $$pre$i = HEAP32[$32 >> 2] | 0; //@line 5149
  $$pre9$i = HEAP32[$34 >> 2] | 0; //@line 5150
  if (($$pre9$i | 0) != ($$pre$i | 0)) {
   HEAP32[$34 >> 2] = $$pre9$i + (~(($$pre9$i + -4 - $$pre$i | 0) >>> 2) << 2); //@line 5160
  }
 }
 $46 = HEAP32[$0 >> 2] | 0; //@line 5163
 if (!$46) {
  ___resumeException($30 | 0); //@line 5166
 }
 __ZdlPv($46); //@line 5169
 ___resumeException($30 | 0); //@line 5170
}
function __ZN13CharmFunctionC2ERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$08 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4028
 $3 = $0 + 4 | 0; //@line 4029
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3, $1 + 4 | 0); //@line 4031
 $5 = $0 + 16 | 0; //@line 4032
 $6 = $1 + 16 | 0; //@line 4033
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2]; //@line 4034
 HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 4034
 HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 4034
 HEAP32[$5 + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 4034
 HEAP32[$5 + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 4034
 HEAP32[$5 + 20 >> 2] = HEAP32[$6 + 20 >> 2]; //@line 4034
 $7 = $0 + 40 | 0; //@line 4035
 $8 = $1 + 40 | 0; //@line 4036
 HEAP32[$7 >> 2] = 0; //@line 4037
 $9 = $0 + 44 | 0; //@line 4038
 HEAP32[$9 >> 2] = 0; //@line 4039
 HEAP32[$0 + 48 >> 2] = 0; //@line 4041
 $11 = $1 + 44 | 0; //@line 4042
 $14 = (HEAP32[$11 >> 2] | 0) - (HEAP32[$8 >> 2] | 0) | 0; //@line 4045
 $15 = ($14 | 0) / 72 | 0; //@line 4046
 do {
  if (!$14) {
   label = 6; //@line 4050
  } else {
   if ($15 >>> 0 > 59652323) {
    __THREW__ = 0; //@line 4054
    invoke_vi(254, $7 | 0); //@line 4055
    __THREW__ = 0; //@line 4056
   } else {
    __THREW__ = 0; //@line 4058
    $19 = invoke_ii(142, $14 | 0) | 0; //@line 4059
    $20 = __THREW__; //@line 4060
    __THREW__ = 0; //@line 4060
    if (!($20 & 1)) {
     HEAP32[$9 >> 2] = $19; //@line 4063
     HEAP32[$7 >> 2] = $19; //@line 4064
     HEAP32[$0 + 48 >> 2] = $19 + ($15 * 72 | 0); //@line 4067
     __THREW__ = 0; //@line 4070
     invoke_viiii(11, $7 | 0, HEAP32[$8 >> 2] | 0, HEAP32[$11 >> 2] | 0, $15 | 0); //@line 4071
     $26 = __THREW__; //@line 4072
     __THREW__ = 0; //@line 4072
     if (!($26 & 1)) {
      label = 6; //@line 4075
      break;
     }
    }
   }
   $35 = ___cxa_find_matching_catch_2() | 0; //@line 4080
   $36 = tempRet0; //@line 4081
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($7); //@line 4082
   $$0 = $36; //@line 4083
   $$08 = $35; //@line 4083
  }
 } while (0);
 do {
  if ((label | 0) == 6) {
   __THREW__ = 0; //@line 4090
   invoke_vii(115, $0 + 52 | 0, $1 + 52 | 0); //@line 4091
   $30 = __THREW__; //@line 4092
   __THREW__ = 0; //@line 4092
   if ($30 & 1) {
    $37 = ___cxa_find_matching_catch_2() | 0; //@line 4095
    $38 = tempRet0; //@line 4096
    __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($7); //@line 4097
    $$0 = $38; //@line 4098
    $$08 = $37; //@line 4098
    break;
   } else {
    HEAP16[$0 + 64 >> 1] = HEAP16[$1 + 64 >> 1] | 0; //@line 4104
    return;
   }
  }
 } while (0);
 if ((HEAP8[$3 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$08 | 0); //@line 4113
 }
 __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 4117
 ___resumeException($$08 | 0); //@line 4118
}
function __ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$sroa$speculated$$i = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $32 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $2; //@line 22125
 $4 = $1; //@line 22126
 $5 = $3 - $4 | 0; //@line 22127
 $6 = $5 >> 2; //@line 22128
 $7 = $0 + 8 | 0; //@line 22129
 $8 = HEAP32[$7 >> 2] | 0; //@line 22130
 $9 = HEAP32[$0 >> 2] | 0; //@line 22131
 $13 = $9; //@line 22135
 if ($6 >>> 0 <= $8 - $9 >> 2 >>> 0) {
  $14 = $0 + 4 | 0; //@line 22137
  $17 = (HEAP32[$14 >> 2] | 0) - $9 >> 2; //@line 22140
  $18 = $6 >>> 0 > $17 >>> 0; //@line 22141
  $$ = $18 ? $1 + ($17 << 2) | 0 : $2; //@line 22143
  $20 = $$; //@line 22144
  $21 = $20 - $4 | 0; //@line 22145
  $22 = $21 >> 2; //@line 22146
  if ($22 | 0) {
   _memmove($9 | 0, $1 | 0, $21 | 0) | 0; //@line 22150
  }
  $25 = $13 + ($22 << 2) | 0; //@line 22152
  if ($18) {
   $26 = $3 - $20 | 0; //@line 22154
   if (($26 | 0) <= 0) {
    return;
   }
   _memcpy(HEAP32[$14 >> 2] | 0, $$ | 0, $26 | 0) | 0; //@line 22161
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ($26 >>> 2 << 2); //@line 22164
   return;
  } else {
   $32 = HEAP32[$14 >> 2] | 0; //@line 22167
   if (($32 | 0) == ($25 | 0)) {
    return;
   }
   HEAP32[$14 >> 2] = $32 + (~(($32 + -4 - $25 | 0) >>> 2) << 2); //@line 22179
   return;
  }
 }
 $40 = $9; //@line 22184
 if (!$9) {
  $50 = $8; //@line 22186
 } else {
  $41 = $0 + 4 | 0; //@line 22188
  $42 = HEAP32[$41 >> 2] | 0; //@line 22189
  if (($42 | 0) != ($13 | 0)) {
   HEAP32[$41 >> 2] = $42 + (~(($42 + -4 - $9 | 0) >>> 2) << 2); //@line 22198
  }
  __ZdlPv($40); //@line 22200
  HEAP32[$7 >> 2] = 0; //@line 22201
  HEAP32[$41 >> 2] = 0; //@line 22202
  HEAP32[$0 >> 2] = 0; //@line 22203
  $50 = 0; //@line 22204
 }
 if ($6 >>> 0 > 1073741823) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 22208
 }
 $52 = $50 >> 1; //@line 22213
 $$sroa$speculated$$i = $50 >> 2 >>> 0 < 536870911 ? $52 >>> 0 < $6 >>> 0 ? $6 : $52 : 1073741823; //@line 22216
 if ($$sroa$speculated$$i >>> 0 > 1073741823) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 22219
 }
 $56 = __Znwj($$sroa$speculated$$i << 2) | 0; //@line 22223
 $57 = $0 + 4 | 0; //@line 22224
 HEAP32[$57 >> 2] = $56; //@line 22225
 HEAP32[$0 >> 2] = $56; //@line 22226
 HEAP32[$7 >> 2] = $56 + ($$sroa$speculated$$i << 2); //@line 22228
 if (($5 | 0) <= 0) {
  return;
 }
 _memcpy($56 | 0, $1 | 0, $5 | 0) | 0; //@line 22234
 HEAP32[$57 >> 2] = $56 + ($5 >>> 2 << 2); //@line 22236
 return;
}
function ___fdopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $19 = 0, $2 = 0, $24 = 0, $29 = 0, $31 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14159
 STACKTOP = STACKTOP + 64 | 0; //@line 14160
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14160
 $vararg_buffer12 = sp + 40 | 0; //@line 14161
 $vararg_buffer7 = sp + 24 | 0; //@line 14162
 $vararg_buffer3 = sp + 16 | 0; //@line 14163
 $vararg_buffer = sp; //@line 14164
 $2 = sp + 56 | 0; //@line 14165
 if (!(_strchr(28878, HEAP8[$1 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 14172
  $$0 = 0; //@line 14173
 } else {
  $8 = _malloc(1156) | 0; //@line 14175
  if (!$8) {
   $$0 = 0; //@line 14178
  } else {
   _memset($8 | 0, 0, 124) | 0; //@line 14180
   if (!(_strchr($1, 43) | 0)) {
    HEAP32[$8 >> 2] = (HEAP8[$1 >> 0] | 0) == 114 ? 8 : 4; //@line 14187
   }
   if (_strchr($1, 101) | 0) {
    HEAP32[$vararg_buffer >> 2] = $0; //@line 14192
    HEAP32[$vararg_buffer + 4 >> 2] = 2; //@line 14194
    HEAP32[$vararg_buffer + 8 >> 2] = 1; //@line 14196
    ___syscall221(221, $vararg_buffer | 0) | 0; //@line 14197
   }
   if ((HEAP8[$1 >> 0] | 0) == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $0; //@line 14202
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3; //@line 14204
    $19 = ___syscall221(221, $vararg_buffer3 | 0) | 0; //@line 14205
    if (!($19 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $0; //@line 14210
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4; //@line 14212
     HEAP32[$vararg_buffer7 + 8 >> 2] = $19 | 1024; //@line 14214
     ___syscall221(221, $vararg_buffer7 | 0) | 0; //@line 14215
    }
    $24 = HEAP32[$8 >> 2] | 128; //@line 14218
    HEAP32[$8 >> 2] = $24; //@line 14219
    $31 = $24; //@line 14220
   } else {
    $31 = HEAP32[$8 >> 2] | 0; //@line 14223
   }
   HEAP32[$8 + 60 >> 2] = $0; //@line 14226
   HEAP32[$8 + 44 >> 2] = $8 + 132; //@line 14229
   HEAP32[$8 + 48 >> 2] = 1024; //@line 14231
   $29 = $8 + 75 | 0; //@line 14232
   HEAP8[$29 >> 0] = -1; //@line 14233
   if (!($31 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $0; //@line 14238
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21523; //@line 14240
    HEAP32[$vararg_buffer12 + 8 >> 2] = $2; //@line 14242
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) {
     HEAP8[$29 >> 0] = 10; //@line 14246
    }
   }
   HEAP32[$8 + 32 >> 2] = 5; //@line 14250
   HEAP32[$8 + 36 >> 2] = 8; //@line 14252
   HEAP32[$8 + 40 >> 2] = 6; //@line 14254
   HEAP32[$8 + 12 >> 2] = 80; //@line 14256
   if (!(HEAP32[8587] | 0)) {
    HEAP32[$8 + 76 >> 2] = -1; //@line 14261
   }
   ___ofl_add($8) | 0; //@line 14263
   $$0 = $8; //@line 14264
  }
 }
 STACKTOP = sp; //@line 14267
 return $$0 | 0; //@line 14267
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 20627
 STACKTOP = STACKTOP + 16 | 0; //@line 20628
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20628
 $1 = sp; //@line 20629
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0); //@line 20630
 HEAP32[$0 >> 2] = 4780; //@line 20631
 HEAP32[$0 + 32 >> 2] = 0; //@line 20633
 HEAP32[$0 + 36 >> 2] = 0; //@line 20635
 HEAP32[$0 + 40 >> 2] = 0; //@line 20637
 $5 = $0 + 52 | 0; //@line 20638
 $6 = $0 + 68 | 0; //@line 20639
 $7 = $0 + 98 | 0; //@line 20640
 dest = $5; //@line 20641
 stop = dest + 44 | 0; //@line 20641
 do {
  HEAP32[dest >> 2] = 0; //@line 20641
  dest = dest + 4 | 0; //@line 20641
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5 + 44 >> 1] = 0; //@line 20641
 HEAP8[$5 + 46 >> 0] = 0; //@line 20641
 $8 = $0 + 4 | 0; //@line 20642
 __ZNSt3__26localeC2ERKS0_($1, $8); //@line 20643
 __THREW__ = 0; //@line 20644
 $9 = invoke_iii(64, $1 | 0, 37304) | 0; //@line 20645
 $10 = __THREW__; //@line 20646
 __THREW__ = 0; //@line 20646
 if ($10 & 1) {
  $12 = ___cxa_find_matching_catch_3(0) | 0; //@line 20649
  ___clang_call_terminate($12); //@line 20651
 }
 __ZNSt3__26localeD2Ev($1); //@line 20654
 do {
  if ($9) {
   __ZNSt3__26localeC2ERKS0_($1, $8); //@line 20657
   __THREW__ = 0; //@line 20658
   $14 = invoke_iii(63, $1 | 0, 37304) | 0; //@line 20659
   $15 = __THREW__; //@line 20660
   __THREW__ = 0; //@line 20660
   if (!($15 & 1)) {
    HEAP32[$6 >> 2] = $14; //@line 20663
    __ZNSt3__26localeD2Ev($1); //@line 20664
    $17 = HEAP32[$6 >> 2] | 0; //@line 20665
    HEAP8[$7 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 28 >> 2] & 255]($17) | 0) & 1; //@line 20671
    break;
   }
   $23 = ___cxa_find_matching_catch_2() | 0; //@line 20674
   $24 = tempRet0; //@line 20675
   __ZNSt3__26localeD2Ev($1); //@line 20676
   $$0 = $24; //@line 20677
   $$02 = $23; //@line 20677
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 20678
   ___resumeException($$02 | 0); //@line 20679
  }
 } while (0);
 __THREW__ = 0; //@line 20686
 invoke_iiii(HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0, $0 | 0, 0, 4096) | 0; //@line 20687
 $28 = __THREW__; //@line 20688
 __THREW__ = 0; //@line 20688
 if (!($28 & 1)) {
  STACKTOP = sp; //@line 20691
  return;
 }
 $30 = ___cxa_find_matching_catch_2() | 0; //@line 20693
 $$0 = tempRet0; //@line 20695
 $$02 = $30; //@line 20695
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 20696
 ___resumeException($$02 | 0); //@line 20697
}
function __ZNSt3__210__stdinbufIwE9pbackfailEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21570
 STACKTOP = STACKTOP + 32 | 0; //@line 21571
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21571
 $2 = sp + 16 | 0; //@line 21572
 $3 = sp + 8 | 0; //@line 21573
 $4 = sp + 4 | 0; //@line 21574
 $5 = sp; //@line 21575
 $7 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0; //@line 21577
 $8 = $0 + 52 | 0; //@line 21578
 $10 = (HEAP8[$8 >> 0] | 0) != 0; //@line 21580
 do {
  if ($7) {
   if ($10) {
    $$1 = $1; //@line 21584
   } else {
    $12 = HEAP32[$0 + 48 >> 2] | 0; //@line 21587
    HEAP8[$8 >> 0] = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj($12, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) ^ 1) & 1; //@line 21592
    $$1 = $12; //@line 21593
   }
  } else {
   if ($10) {
    $17 = $0 + 48 | 0; //@line 21597
    HEAP32[$4 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[$17 >> 2] | 0) | 0; //@line 21600
    $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 21602
    switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 15]($21, HEAP32[$0 + 40 >> 2] | 0, $4, $4 + 4 | 0, $5, $2, $2 + 8 | 0, $3) | 0) {
    case 1:
    case 2:
     {
      label = 11; //@line 21613
      break;
     }
    case 3:
     {
      HEAP8[$2 >> 0] = HEAP32[$17 >> 2]; //@line 21619
      HEAP32[$3 >> 2] = $2 + 1; //@line 21621
      label = 8; //@line 21622
      break;
     }
    default:
     {
      label = 8; //@line 21626
     }
    }
    L9 : do {
     if ((label | 0) == 8) {
      $33 = $0 + 32 | 0; //@line 21631
      while (1) {
       $34 = HEAP32[$3 >> 2] | 0; //@line 21633
       if ($34 >>> 0 <= $2 >>> 0) {
        $$0 = 1; //@line 21636
        $$07 = 0; //@line 21636
        break L9;
       }
       $36 = $34 + -1 | 0; //@line 21639
       HEAP32[$3 >> 2] = $36; //@line 21640
       if ((_ungetc(HEAP8[$36 >> 0] | 0, HEAP32[$33 >> 2] | 0) | 0) == -1) {
        label = 11; //@line 21647
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 11) {
     $$0 = 0; //@line 21655
     $$07 = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 21655
    }
    if ($$0) {
     $$pre$phiZ2D = $17; //@line 21658
    } else {
     $$1 = $$07; //@line 21660
     break;
    }
   } else {
    $$pre$phiZ2D = $0 + 48 | 0; //@line 21665
   }
   HEAP32[$$pre$phiZ2D >> 2] = $1; //@line 21667
   HEAP8[$8 >> 0] = 1; //@line 21668
   $$1 = $1; //@line 21669
  }
 } while (0);
 STACKTOP = sp; //@line 21672
 return $$1 | 0; //@line 21672
}
function __ZNSt3__210__stdinbufIcE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21929
 STACKTOP = STACKTOP + 32 | 0; //@line 21930
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21930
 $2 = sp + 16 | 0; //@line 21931
 $3 = sp + 4 | 0; //@line 21932
 $4 = sp + 8 | 0; //@line 21933
 $5 = sp; //@line 21934
 $7 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0; //@line 21936
 $8 = $0 + 52 | 0; //@line 21937
 $10 = (HEAP8[$8 >> 0] | 0) != 0; //@line 21939
 do {
  if ($7) {
   if ($10) {
    $$1 = $1; //@line 21943
   } else {
    $12 = HEAP32[$0 + 48 >> 2] | 0; //@line 21946
    HEAP8[$8 >> 0] = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii($12, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) ^ 1) & 1; //@line 21951
    $$1 = $12; //@line 21952
   }
  } else {
   if ($10) {
    $17 = $0 + 48 | 0; //@line 21956
    HEAP8[$4 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$17 >> 2] | 0) | 0; //@line 21959
    $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 21961
    switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 15]($21, HEAP32[$0 + 40 >> 2] | 0, $4, $4 + 1 | 0, $5, $2, $2 + 8 | 0, $3) | 0) {
    case 1:
    case 2:
     {
      label = 11; //@line 21972
      break;
     }
    case 3:
     {
      HEAP8[$2 >> 0] = HEAP32[$17 >> 2]; //@line 21978
      HEAP32[$3 >> 2] = $2 + 1; //@line 21980
      label = 8; //@line 21981
      break;
     }
    default:
     {
      label = 8; //@line 21985
     }
    }
    L9 : do {
     if ((label | 0) == 8) {
      $33 = $0 + 32 | 0; //@line 21990
      while (1) {
       $34 = HEAP32[$3 >> 2] | 0; //@line 21992
       if ($34 >>> 0 <= $2 >>> 0) {
        $$0 = 1; //@line 21995
        $$07 = 0; //@line 21995
        break L9;
       }
       $36 = $34 + -1 | 0; //@line 21998
       HEAP32[$3 >> 2] = $36; //@line 21999
       if ((_ungetc(HEAP8[$36 >> 0] | 0, HEAP32[$33 >> 2] | 0) | 0) == -1) {
        label = 11; //@line 22006
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 11) {
     $$0 = 0; //@line 22014
     $$07 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 22014
    }
    if ($$0) {
     $$pre$phiZ2D = $17; //@line 22017
    } else {
     $$1 = $$07; //@line 22019
     break;
    }
   } else {
    $$pre$phiZ2D = $0 + 48 | 0; //@line 22024
   }
   HEAP32[$$pre$phiZ2D >> 2] = $1; //@line 22026
   HEAP8[$8 >> 0] = 1; //@line 22027
   $$1 = $1; //@line 22028
  }
 } while (0);
 STACKTOP = sp; //@line 22031
 return $$1 | 0; //@line 22031
}
function __ZN5StackD2Ev($0) {
 $0 = $0 | 0;
 var $$08$i = 0, $$byval_copy = 0, $$pre$i = 0, $$pre9$i = 0, $1 = 0, $17 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4397
 STACKTOP = STACKTOP + 16 | 0; //@line 4398
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4398
 $$byval_copy = sp + 1 | 0; //@line 4399
 $1 = sp; //@line 4400
 $2 = $0 + 80 | 0; //@line 4401
 __ZNSt3__212__deque_baseI13CharmFunctionNS_9allocatorIS1_EEE5clearEv($2); //@line 4402
 $3 = $0 + 84 | 0; //@line 4403
 $4 = HEAP32[$3 >> 2] | 0; //@line 4404
 $5 = $0 + 88 | 0; //@line 4405
 $6 = HEAP32[$5 >> 2] | 0; //@line 4406
 if (($4 | 0) != ($6 | 0)) {
  $$08$i = $4; //@line 4409
  do {
   __ZdlPv(HEAP32[$$08$i >> 2] | 0); //@line 4412
   $$08$i = $$08$i + 4 | 0; //@line 4413
  } while (($$08$i | 0) != ($6 | 0));
  $$pre$i = HEAP32[$3 >> 2] | 0; //@line 4421
  $$pre9$i = HEAP32[$5 >> 2] | 0; //@line 4422
  if (($$pre9$i | 0) != ($$pre$i | 0)) {
   HEAP32[$5 >> 2] = $$pre9$i + (~(($$pre9$i + -4 - $$pre$i | 0) >>> 2) << 2); //@line 4432
  }
 }
 $17 = HEAP32[$2 >> 2] | 0; //@line 4435
 if ($17 | 0) {
  __ZdlPv($17); //@line 4438
 }
 $19 = $0 + 60 | 0; //@line 4440
 if ((HEAP8[$19 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$19 >> 2] | 0); //@line 4446
 }
 $24 = $0 + 48 | 0; //@line 4448
 $25 = HEAP32[$24 >> 2] | 0; //@line 4449
 if ($25 | 0) {
  $27 = $0 + 52 | 0; //@line 4452
  $28 = HEAP32[$27 >> 2] | 0; //@line 4453
  do {
   if (($28 | 0) == ($25 | 0)) {
    $39 = $25; //@line 4457
   } else {
    $30 = $0 + 56 | 0; //@line 4459
    $32 = $28; //@line 4460
    while (1) {
     $31 = $32 + -72 | 0; //@line 4462
     HEAP32[$27 >> 2] = $31; //@line 4463
     __THREW__ = 0; //@line 4464
     HEAP8[$$byval_copy >> 0] = HEAP8[$1 >> 0] | 0; //@line 4465
     invoke_viii(13, $$byval_copy | 0, $30 | 0, $31 | 0); //@line 4466
     $33 = __THREW__; //@line 4467
     __THREW__ = 0; //@line 4467
     if ($33 & 1) {
      label = 14; //@line 4470
      break;
     }
     $32 = HEAP32[$27 >> 2] | 0; //@line 4473
     if (($32 | 0) == ($25 | 0)) {
      label = 15; //@line 4476
      break;
     }
    }
    if ((label | 0) == 14) {
     $37 = ___cxa_find_matching_catch_3(0) | 0; //@line 4483
     ___clang_call_terminate($37); //@line 4485
    } else if ((label | 0) == 15) {
     $39 = HEAP32[$24 >> 2] | 0; //@line 4490
     break;
    }
   }
  } while (0);
  __ZdlPv($39); //@line 4495
 }
 $40 = $0 + 12 | 0; //@line 4497
 if ((HEAP8[$40 + 11 >> 0] | 0) >= 0) {
  STACKTOP = sp; //@line 4502
  return;
 }
 __ZdlPv(HEAP32[$40 >> 2] | 0); //@line 4505
 STACKTOP = sp; //@line 4506
 return;
}
function __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$i$i = 0, $$03 = 0, $12 = 0, $13 = 0, $18 = 0, $20 = 0, $23 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 63238
 STACKTOP = STACKTOP + 32 | 0; //@line 63239
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 63239
 $3 = sp + 24 | 0; //@line 63240
 $4 = sp + 12 | 0; //@line 63241
 $5 = sp; //@line 63242
 HEAP32[$5 >> 2] = 0; //@line 63243
 HEAP32[$5 + 4 >> 2] = 0; //@line 63243
 HEAP32[$5 + 8 >> 2] = 0; //@line 63243
 $6 = __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0; //@line 63244
 if ($6 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($5); //@line 63247
 }
 if ($6 >>> 0 < 11) {
  HEAP8[$5 + 11 >> 0] = $6; //@line 63254
  $$0$i$i = $5; //@line 63255
 } else {
  $12 = $6 + 16 & -16; //@line 63258
  $13 = __Znwj($12) | 0; //@line 63259
  HEAP32[$5 >> 2] = $13; //@line 63260
  HEAP32[$5 + 8 >> 2] = $12 | -2147483648; //@line 63263
  HEAP32[$5 + 4 >> 2] = $6; //@line 63265
  $$0$i$i = $13; //@line 63266
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, $2, $6) | 0; //@line 63268
 HEAP8[$3 >> 0] = 0; //@line 63270
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $6 | 0, $3); //@line 63271
 __THREW__ = 0; //@line 63272
 invoke_viii(39, $4 | 0, $1 | 0, $5 | 0); //@line 63273
 $18 = __THREW__; //@line 63274
 __THREW__ = 0; //@line 63274
 do {
  if ($18 & 1) {
   $33 = ___cxa_find_matching_catch_2() | 0; //@line 63278
   $$0 = tempRet0; //@line 63280
   $$03 = $33; //@line 63280
  } else {
   __THREW__ = 0; //@line 63282
   invoke_vii(127, $0 | 0, $4 | 0); //@line 63283
   $20 = __THREW__; //@line 63284
   __THREW__ = 0; //@line 63284
   if ($20 & 1) {
    $35 = ___cxa_find_matching_catch_2() | 0; //@line 63287
    $36 = tempRet0; //@line 63288
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4); //@line 63289
    $$0 = $36; //@line 63290
    $$03 = $35; //@line 63290
    break;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4); //@line 63293
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5); //@line 63294
    HEAP32[$0 >> 2] = 13020; //@line 63295
    $23 = $1; //@line 63297
    $28 = HEAP32[$23 + 4 >> 2] | 0; //@line 63302
    $29 = $0 + 8 | 0; //@line 63303
    HEAP32[$29 >> 2] = HEAP32[$23 >> 2]; //@line 63305
    HEAP32[$29 + 4 >> 2] = $28; //@line 63308
    STACKTOP = sp; //@line 63309
    return;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5); //@line 63313
 ___resumeException($$03 | 0); //@line 63314
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 65231
 }
 ret = dest | 0; //@line 65234
 dest_end = dest + num | 0; //@line 65235
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 65239
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 65240
   dest = dest + 1 | 0; //@line 65241
   src = src + 1 | 0; //@line 65242
   num = num - 1 | 0; //@line 65243
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 65245
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 65246
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 65248
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 65249
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 65250
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 65251
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 65252
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 65253
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 65254
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 65255
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 65256
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 65257
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 65258
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 65259
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 65260
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 65261
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 65262
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 65263
   dest = dest + 64 | 0; //@line 65264
   src = src + 64 | 0; //@line 65265
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 65268
   dest = dest + 4 | 0; //@line 65269
   src = src + 4 | 0; //@line 65270
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 65274
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 65276
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 65277
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 65278
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 65279
   dest = dest + 4 | 0; //@line 65280
   src = src + 4 | 0; //@line 65281
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 65286
  dest = dest + 1 | 0; //@line 65287
  src = src + 1 | 0; //@line 65288
 }
 return ret | 0; //@line 65290
}
function __ZN6Parser20parseDefinedFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1063
 STACKTOP = STACKTOP + 16 | 0; //@line 1064
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1064
 $$byval_copy = sp + 1 | 0; //@line 1065
 $3 = sp; //@line 1066
 $4 = $0 + 4 | 0; //@line 1067
 HEAP32[$4 >> 2] = 0; //@line 1068
 HEAP32[$4 + 4 >> 2] = 0; //@line 1068
 HEAP32[$4 + 8 >> 2] = 0; //@line 1068
 $5 = $0 + 40 | 0; //@line 1069
 HEAP32[$5 >> 2] = 0; //@line 1070
 HEAP32[$5 + 4 >> 2] = 0; //@line 1070
 HEAP32[$5 + 8 >> 2] = 0; //@line 1070
 HEAP32[$5 + 12 >> 2] = 0; //@line 1070
 HEAP32[$5 + 16 >> 2] = 0; //@line 1070
 HEAP32[$5 + 20 >> 2] = 0; //@line 1070
 HEAP32[$0 >> 2] = 4; //@line 1071
 $6 = $0 + 52 | 0; //@line 1072
 __THREW__ = 0; //@line 1073
 invoke_iii(55, $6 | 0, $2 | 0) | 0; //@line 1074
 $7 = __THREW__; //@line 1075
 __THREW__ = 0; //@line 1075
 if (!($7 & 1)) {
  STACKTOP = sp; //@line 1078
  return;
 }
 $9 = ___cxa_find_matching_catch_2() | 0; //@line 1080
 if ((HEAP8[$6 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 1087
 }
 $15 = $0 + 40 | 0; //@line 1089
 $16 = HEAP32[$15 >> 2] | 0; //@line 1090
 if ($16 | 0) {
  $18 = $0 + 44 | 0; //@line 1093
  $19 = HEAP32[$18 >> 2] | 0; //@line 1094
  do {
   if (($19 | 0) == ($16 | 0)) {
    $30 = $16; //@line 1098
   } else {
    $21 = $0 + 48 | 0; //@line 1100
    $23 = $19; //@line 1101
    while (1) {
     $22 = $23 + -72 | 0; //@line 1103
     HEAP32[$18 >> 2] = $22; //@line 1104
     __THREW__ = 0; //@line 1105
     HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 1106
     invoke_viii(13, $$byval_copy | 0, $21 | 0, $22 | 0); //@line 1107
     $24 = __THREW__; //@line 1108
     __THREW__ = 0; //@line 1108
     if ($24 & 1) {
      label = 9; //@line 1111
      break;
     }
     $23 = HEAP32[$18 >> 2] | 0; //@line 1114
     if (($23 | 0) == ($16 | 0)) {
      label = 10; //@line 1117
      break;
     }
    }
    if ((label | 0) == 9) {
     $28 = ___cxa_find_matching_catch_3(0) | 0; //@line 1124
     ___clang_call_terminate($28); //@line 1126
    } else if ((label | 0) == 10) {
     $30 = HEAP32[$15 >> 2] | 0; //@line 1131
     break;
    }
   }
  } while (0);
  __ZdlPv($30); //@line 1136
 }
 if ((HEAP8[$4 + 11 >> 0] | 0) >= 0) {
  ___resumeException($9 | 0); //@line 1142
 }
 __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 1146
 ___resumeException($9 | 0); //@line 1147
}
function __ZN5Stack4pushE13CharmFunction($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 13719
 STACKTOP = STACKTOP + 32 | 0; //@line 13720
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13720
 $$byval_copy = sp + 16 | 0; //@line 13721
 $2 = sp; //@line 13722
 $3 = sp + 8 | 0; //@line 13723
 $4 = $0 + 80 | 0; //@line 13724
 $5 = $0 + 88 | 0; //@line 13725
 $6 = HEAP32[$5 >> 2] | 0; //@line 13726
 $7 = $0 + 84 | 0; //@line 13727
 $8 = HEAP32[$7 >> 2] | 0; //@line 13728
 $10 = $6 - $8 >> 2; //@line 13730
 $14 = $0 + 96 | 0; //@line 13735
 $15 = HEAP32[$14 >> 2] | 0; //@line 13736
 $16 = $0 + 100 | 0; //@line 13737
 $17 = HEAP32[$16 >> 2] | 0; //@line 13738
 if (((($10 | 0) == 0 ? 0 : ($10 * 56 | 0) + -1 | 0) | 0) == ($17 + $15 | 0)) {
  __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE19__add_back_capacityEv($4); //@line 13744
  $22 = HEAP32[$14 >> 2] | 0; //@line 13749
  $23 = HEAP32[$16 >> 2] | 0; //@line 13749
  $24 = HEAP32[$5 >> 2] | 0; //@line 13749
  $26 = HEAP32[$7 >> 2] | 0; //@line 13749
 } else {
  $22 = $15; //@line 13751
  $23 = $17; //@line 13751
  $24 = $6; //@line 13751
  $26 = $8; //@line 13751
 }
 $21 = $23 + $22 | 0; //@line 13753
 if (($24 | 0) == ($26 | 0)) {
  $32 = 0; //@line 13756
 } else {
  $32 = (HEAP32[$26 + ((($21 >>> 0) / 56 | 0) << 2) >> 2] | 0) + ((($21 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13763
 }
 __ZN13CharmFunctionC2ERKS_($32, $1); //@line 13765
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1; //@line 13768
 $35 = HEAP32[$7 >> 2] | 0; //@line 13769
 $36 = HEAP32[$14 >> 2] | 0; //@line 13770
 $38 = $35 + ((($36 >>> 0) / 56 | 0) << 2) | 0; //@line 13772
 if ((HEAP32[$5 >> 2] | 0) == ($35 | 0)) {
  $46 = 0; //@line 13776
 } else {
  $46 = (HEAP32[$38 >> 2] | 0) + ((($36 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 13782
 }
 HEAP32[$2 >> 2] = $38; //@line 13785
 HEAP32[$2 + 4 >> 2] = $46; //@line 13787
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 13788
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 13788
 __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE5eraseENS_16__deque_iteratorIS1_PKS1_RS6_PKS7_iLi0EEE($3, $4, $$byval_copy); //@line 13789
 $47 = $0; //@line 13790
 $53 = _i64Add(HEAP32[$47 >> 2] | 0, HEAP32[$47 + 4 >> 2] | 0, 1, 0) | 0; //@line 13796
 $55 = $0; //@line 13798
 HEAP32[$55 >> 2] = $53; //@line 13800
 HEAP32[$55 + 4 >> 2] = tempRet0; //@line 13803
 STACKTOP = sp; //@line 13804
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $18 = 0, $22 = 0, $23 = 0, $29 = 0, $33 = 0, $35 = 0, $37 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 19884
 STACKTOP = STACKTOP + 16 | 0; //@line 19885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19885
 $1 = sp; //@line 19886
 L1 : do {
  if (HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
   __THREW__ = 0; //@line 19896
   invoke_vii(136, $1 | 0, $0 | 0); //@line 19897
   $9 = __THREW__; //@line 19898
   __THREW__ = 0; //@line 19898
   L3 : do {
    if ($9 & 1) {
     $35 = ___cxa_find_matching_catch_3(0) | 0; //@line 19902
     $$0 = $35; //@line 19904
    } else {
     do {
      if (HEAP8[$1 >> 0] | 0) {
       $18 = HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0; //@line 19915
       __THREW__ = 0; //@line 19919
       $22 = invoke_ii(HEAP32[(HEAP32[$18 >> 2] | 0) + 24 >> 2] | 0, $18 | 0) | 0; //@line 19920
       $23 = __THREW__; //@line 19921
       __THREW__ = 0; //@line 19921
       if (!($23 & 1)) {
        if (($22 | 0) != -1) {
         break;
        }
        $29 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 19931
        __THREW__ = 0; //@line 19935
        invoke_vii(112, $29 | 0, HEAP32[$29 + 16 >> 2] | 1 | 0); //@line 19936
        $33 = __THREW__; //@line 19937
        __THREW__ = 0; //@line 19937
        if (!($33 & 1)) {
         break;
        }
       }
       $37 = ___cxa_find_matching_catch_3(0) | 0; //@line 19943
       __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1); //@line 19945
       $$0 = $37; //@line 19946
       break L3;
      }
     } while (0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1); //@line 19950
     break L1;
    }
   } while (0);
   ___cxa_begin_catch($$0 | 0) | 0; //@line 19954
   __THREW__ = 0; //@line 19959
   invoke_vi(262, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19960
   $43 = __THREW__; //@line 19961
   __THREW__ = 0; //@line 19961
   if (!($43 & 1)) {
    ___cxa_end_catch(); //@line 19964
    break;
   }
   $45 = ___cxa_find_matching_catch_2() | 0; //@line 19967
   __THREW__ = 0; //@line 19969
   invoke_v(3); //@line 19970
   $47 = __THREW__; //@line 19971
   __THREW__ = 0; //@line 19971
   if ($47 & 1) {
    $49 = ___cxa_find_matching_catch_3(0) | 0; //@line 19974
    ___clang_call_terminate($49); //@line 19976
   } else {
    ___resumeException($45 | 0); //@line 19979
   }
  }
 } while (0);
 STACKTOP = sp; //@line 19984
 return $0 | 0; //@line 19984
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $30 = 0, $7 = 0, $9 = 0;
 _pthread_mutex_lock(37352) | 0; //@line 60523
 while (1) {
  if ((HEAP32[$0 >> 2] | 0) != 1) {
   break;
  }
  _pthread_cond_wait(37380, 37352) | 0; //@line 60530
 }
 do {
  if (!(HEAP32[$0 >> 2] | 0)) {
   HEAP32[$0 >> 2] = 1; //@line 60536
   __THREW__ = 0; //@line 60537
   invoke_ii(148, 37352) | 0; //@line 60538
   $7 = __THREW__; //@line 60539
   __THREW__ = 0; //@line 60539
   if (!($7 & 1)) {
    __THREW__ = 0; //@line 60542
    invoke_vi($2 | 0, $1 | 0); //@line 60543
    $9 = __THREW__; //@line 60544
    __THREW__ = 0; //@line 60544
    if (!($9 & 1)) {
     __THREW__ = 0; //@line 60547
     invoke_ii(149, 37352) | 0; //@line 60548
     $11 = __THREW__; //@line 60549
     __THREW__ = 0; //@line 60549
     if (!($11 & 1)) {
      HEAP32[$0 >> 2] = -1; //@line 60552
      __THREW__ = 0; //@line 60553
      invoke_ii(148, 37352) | 0; //@line 60554
      $13 = __THREW__; //@line 60555
      __THREW__ = 0; //@line 60555
      if (!($13 & 1)) {
       __THREW__ = 0; //@line 60558
       invoke_ii(150, 37380) | 0; //@line 60559
       $15 = __THREW__; //@line 60560
       __THREW__ = 0; //@line 60560
       if (!($15 & 1)) {
        break;
       }
      }
     }
    }
   }
   $17 = ___cxa_find_matching_catch_3(0) | 0; //@line 60569
   ___cxa_begin_catch($17 | 0) | 0; //@line 60571
   __THREW__ = 0; //@line 60572
   invoke_ii(149, 37352) | 0; //@line 60573
   $19 = __THREW__; //@line 60574
   __THREW__ = 0; //@line 60574
   if (!($19 & 1)) {
    HEAP32[$0 >> 2] = 0; //@line 60577
    __THREW__ = 0; //@line 60578
    invoke_ii(148, 37352) | 0; //@line 60579
    $21 = __THREW__; //@line 60580
    __THREW__ = 0; //@line 60580
    if (!($21 & 1)) {
     __THREW__ = 0; //@line 60583
     invoke_ii(150, 37380) | 0; //@line 60584
     $23 = __THREW__; //@line 60585
     __THREW__ = 0; //@line 60585
     if (!($23 & 1)) {
      __THREW__ = 0; //@line 60588
      invoke_v(2); //@line 60589
      __THREW__ = 0; //@line 60590
     }
    }
   }
   $26 = ___cxa_find_matching_catch_2() | 0; //@line 60594
   __THREW__ = 0; //@line 60596
   invoke_v(3); //@line 60597
   $28 = __THREW__; //@line 60598
   __THREW__ = 0; //@line 60598
   if ($28 & 1) {
    $30 = ___cxa_find_matching_catch_3(0) | 0; //@line 60601
    ___clang_call_terminate($30); //@line 60603
   } else {
    ___resumeException($26 | 0); //@line 60606
   }
  } else {
   _pthread_mutex_unlock(37352) | 0; //@line 60610
  }
 } while (0);
 return;
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS9_PvEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$018 = 0, $$byval_copy = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, label = 0, sp = 0, $$018$looptemp = 0;
 sp = STACKTOP; //@line 21045
 STACKTOP = STACKTOP + 16 | 0; //@line 21046
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21046
 $$byval_copy = sp + 1 | 0; //@line 21047
 $2 = sp; //@line 21048
 if (!$1) {
  STACKTOP = sp; //@line 21051
  return;
 }
 $$018 = $1; //@line 21053
 L4 : while (1) {
  $$018$looptemp = $$018;
  $$018 = HEAP32[$$018 >> 2] | 0; //@line 21055
  $5 = $$018$looptemp + 8 | 0; //@line 21056
  $6 = $$018$looptemp + 76 | 0; //@line 21057
  if ((HEAP8[$6 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$6 >> 2] | 0); //@line 21063
  }
  $11 = $$018$looptemp + 64 | 0; //@line 21065
  $12 = HEAP32[$11 >> 2] | 0; //@line 21066
  if ($12 | 0) {
   $14 = $$018$looptemp + 68 | 0; //@line 21069
   $15 = HEAP32[$14 >> 2] | 0; //@line 21070
   if (($15 | 0) == ($12 | 0)) {
    $26 = $12; //@line 21073
   } else {
    $17 = $$018$looptemp + 72 | 0; //@line 21075
    $19 = $15; //@line 21076
    do {
     $18 = $19 + -72 | 0; //@line 21078
     HEAP32[$14 >> 2] = $18; //@line 21079
     __THREW__ = 0; //@line 21080
     HEAP8[$$byval_copy >> 0] = HEAP8[$2 >> 0] | 0; //@line 21081
     invoke_viii(13, $$byval_copy | 0, $17 | 0, $18 | 0); //@line 21082
     $20 = __THREW__; //@line 21083
     __THREW__ = 0; //@line 21083
     if ($20 & 1) {
      label = 10; //@line 21086
      break L4;
     }
     $19 = HEAP32[$14 >> 2] | 0; //@line 21089
    } while (($19 | 0) != ($12 | 0));
    $26 = HEAP32[$11 >> 2] | 0; //@line 21098
   }
   __ZdlPv($26); //@line 21100
  }
  $27 = $$018$looptemp + 28 | 0; //@line 21102
  if ((HEAP8[$27 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$27 >> 2] | 0); //@line 21108
  }
  if ((HEAP8[$5 + 11 >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 21115
  }
  __ZdlPv($$018$looptemp); //@line 21117
  if (!$$018) {
   label = 18; //@line 21120
   break;
  }
 }
 if ((label | 0) == 10) {
  $24 = ___cxa_find_matching_catch_3(0) | 0; //@line 21127
  ___clang_call_terminate($24); //@line 21129
 } else if ((label | 0) == 18) {
  STACKTOP = sp; //@line 21133
  return;
 }
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE10deallocateEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $30 = 0, $37 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2611
 STACKTOP = STACKTOP + 16 | 0; //@line 2612
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2612
 $$byval_copy = sp + 1 | 0; //@line 2613
 $1 = sp; //@line 2614
 $2 = HEAP32[$0 >> 2] | 0; //@line 2615
 if (!$2) {
  STACKTOP = sp; //@line 2618
  return;
 }
 $4 = $0 + 4 | 0; //@line 2620
 $5 = HEAP32[$4 >> 2] | 0; //@line 2621
 do {
  if (($5 | 0) == ($2 | 0)) {
   $37 = $2; //@line 2625
  } else {
   $8 = $5; //@line 2627
   L6 : while (1) {
    HEAP32[$4 >> 2] = $8 + -72; //@line 2630
    $9 = $8 + -20 | 0; //@line 2631
    if ((HEAP8[$9 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 2637
    }
    $14 = $8 + -32 | 0; //@line 2639
    $15 = HEAP32[$14 >> 2] | 0; //@line 2640
    if ($15 | 0) {
     $17 = $8 + -28 | 0; //@line 2643
     $18 = HEAP32[$17 >> 2] | 0; //@line 2644
     if (($18 | 0) == ($15 | 0)) {
      $29 = $15; //@line 2647
     } else {
      $20 = $8 + -24 | 0; //@line 2649
      $22 = $18; //@line 2650
      do {
       $21 = $22 + -72 | 0; //@line 2652
       HEAP32[$17 >> 2] = $21; //@line 2653
       __THREW__ = 0; //@line 2654
       HEAP8[$$byval_copy >> 0] = HEAP8[$1 >> 0] | 0; //@line 2655
       invoke_viii(13, $$byval_copy | 0, $20 | 0, $21 | 0); //@line 2656
       $23 = __THREW__; //@line 2657
       __THREW__ = 0; //@line 2657
       if ($23 & 1) {
        label = 11; //@line 2660
        break L6;
       }
       $22 = HEAP32[$17 >> 2] | 0; //@line 2663
      } while (($22 | 0) != ($15 | 0));
      $29 = HEAP32[$14 >> 2] | 0; //@line 2672
     }
     __ZdlPv($29); //@line 2674
    }
    $30 = $8 + -68 | 0; //@line 2676
    if ((HEAP8[$30 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 2682
    }
    $8 = HEAP32[$4 >> 2] | 0; //@line 2684
    if (($8 | 0) == ($2 | 0)) {
     label = 17; //@line 2687
     break;
    }
   }
   if ((label | 0) == 11) {
    $27 = ___cxa_find_matching_catch_3(0) | 0; //@line 2694
    ___clang_call_terminate($27); //@line 2696
   } else if ((label | 0) == 17) {
    $37 = HEAP32[$0 >> 2] | 0; //@line 2701
    break;
   }
  }
 } while (0);
 __ZdlPv($37); //@line 2706
 HEAP32[$0 + 8 >> 2] = 0; //@line 2708
 HEAP32[$4 >> 2] = 0; //@line 2709
 HEAP32[$0 >> 2] = 0; //@line 2710
 STACKTOP = sp; //@line 2711
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $11 = 0, $17 = 0, $18 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $46 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 62094
 STACKTOP = STACKTOP + 16 | 0; //@line 62095
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62095
 $8 = sp; //@line 62096
 if ((1073741806 - $1 | 0) >>> 0 < $2 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 62100
 }
 $11 = $0 + 8 | 0; //@line 62103
 if ((HEAP8[$11 + 3 >> 0] | 0) < 0) {
  $34 = HEAP32[$0 >> 2] | 0; //@line 62109
 } else {
  $34 = $0; //@line 62111
 }
 if ($1 >>> 0 < 536870887) {
  $17 = $2 + $1 | 0; //@line 62115
  $18 = $1 << 1; //@line 62116
  $$sroa$speculated = $17 >>> 0 < $18 >>> 0 ? $18 : $17; //@line 62118
  $23 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4; //@line 62122
  if ($23 >>> 0 > 1073741823) {
   $25 = ___cxa_allocate_exception(8) | 0; //@line 62125
   __THREW__ = 0; //@line 62126
   invoke_vii(119, $25 | 0, 31992); //@line 62127
   $26 = __THREW__; //@line 62128
   __THREW__ = 0; //@line 62128
   if ($26 & 1) {
    $28 = ___cxa_find_matching_catch_2() | 0; //@line 62131
    ___cxa_free_exception($25 | 0); //@line 62133
    ___resumeException($28 | 0); //@line 62134
   } else {
    HEAP32[$25 >> 2] = 13224; //@line 62137
    ___cxa_throw($25 | 0, 2856, 240); //@line 62138
   }
  } else {
   $31 = $23; //@line 62142
  }
 } else {
  $31 = 1073741807; //@line 62145
 }
 $32 = __Znwj($31 << 2) | 0; //@line 62148
 if ($4 | 0) {
  __ZNSt3__211char_traitsIwE4copyEPwPKwj($32, $34, $4) | 0; //@line 62151
 }
 if ($6 | 0) {
  __ZNSt3__211char_traitsIwE4copyEPwPKwj($32 + ($4 << 2) | 0, $7, $6) | 0; //@line 62156
 }
 $37 = $3 - $5 | 0; //@line 62158
 $38 = $37 - $4 | 0; //@line 62159
 if ($38 | 0) {
  __ZNSt3__211char_traitsIwE4copyEPwPKwj($32 + ($4 << 2) + ($6 << 2) | 0, $34 + ($4 << 2) + ($5 << 2) | 0, $38) | 0; //@line 62166
 }
 if (($1 | 0) != 1) {
  __ZdlPv($34); //@line 62170
 }
 HEAP32[$0 >> 2] = $32; //@line 62172
 HEAP32[$11 >> 2] = $31 | -2147483648; //@line 62174
 $46 = $37 + $6 | 0; //@line 62175
 HEAP32[$0 + 4 >> 2] = $46; //@line 62177
 HEAP32[$8 >> 2] = 0; //@line 62179
 __ZNSt3__211char_traitsIwE6assignERwRKw($32 + ($46 << 2) | 0, $8); //@line 62180
 STACKTOP = sp; //@line 62181
 return;
}
function __ZNSt3__211__stdoutbufIwE8overflowEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$032 = 0, $$4 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $3 = 0, $38 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21123
 STACKTOP = STACKTOP + 32 | 0; //@line 21124
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21124
 $2 = sp + 16 | 0; //@line 21125
 $3 = sp + 8 | 0; //@line 21126
 $4 = sp + 4 | 0; //@line 21127
 $5 = sp; //@line 21128
 do {
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   label = 15; //@line 21133
  } else {
   HEAP32[$3 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($1) | 0; //@line 21136
   if (HEAP8[$0 + 44 >> 0] | 0) {
    if ((_fwrite($3, 4, 1, HEAP32[$0 + 32 >> 2] | 0) | 0) == 1) {
     label = 15; //@line 21146
     break;
    }
    $$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 21150
    break;
   }
   HEAP32[$4 >> 2] = $2; //@line 21153
   $17 = $3 + 4 | 0; //@line 21154
   $18 = $0 + 36 | 0; //@line 21155
   $19 = $0 + 40 | 0; //@line 21156
   $20 = $2 + 8 | 0; //@line 21157
   $21 = $2; //@line 21158
   $22 = $0 + 32 | 0; //@line 21159
   $$032 = $3; //@line 21160
   while (1) {
    $23 = HEAP32[$18 >> 2] | 0; //@line 21162
    $28 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$23 >> 2] | 0) + 12 >> 2] & 15]($23, HEAP32[$19 >> 2] | 0, $$032, $17, $5, $2, $20, $4) | 0; //@line 21167
    if ((HEAP32[$5 >> 2] | 0) == ($$032 | 0)) {
     label = 14; //@line 21171
     break;
    }
    if (($28 | 0) == 3) {
     label = 8; //@line 21176
     break;
    }
    if ($28 >>> 0 >= 2) {
     label = 14; //@line 21182
     break;
    }
    $38 = (HEAP32[$4 >> 2] | 0) - $21 | 0; //@line 21186
    if ((_fwrite($2, 1, $38, HEAP32[$22 >> 2] | 0) | 0) != ($38 | 0)) {
     label = 14; //@line 21191
     break;
    }
    if (($28 | 0) == 1) {
     $$032 = HEAP32[$5 >> 2] | 0; //@line 21196
    } else {
     label = 13; //@line 21198
     break;
    }
   }
   if ((label | 0) == 8) {
    if ((_fwrite($$032, 1, 1, HEAP32[$22 >> 2] | 0) | 0) == 1) {
     label = 13; //@line 21207
    } else {
     label = 14; //@line 21209
    }
   }
   if ((label | 0) == 13) {
    label = 15; //@line 21213
    break;
   } else if ((label | 0) == 14) {
    $$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 21218
    break;
   }
  }
 } while (0);
 if ((label | 0) == 15) {
  $$4 = __ZNSt3__211char_traitsIwE7not_eofEj($1) | 0; //@line 21225
 }
 STACKTOP = sp; //@line 21227
 return $$4 | 0; //@line 21227
}
function __ZNSt3__211__stdoutbufIcE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$032 = 0, $$4 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $3 = 0, $38 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21383
 STACKTOP = STACKTOP + 32 | 0; //@line 21384
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21384
 $2 = sp + 16 | 0; //@line 21385
 $3 = sp + 8 | 0; //@line 21386
 $4 = sp + 4 | 0; //@line 21387
 $5 = sp; //@line 21388
 do {
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   label = 15; //@line 21393
  } else {
   HEAP8[$3 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($1) | 0; //@line 21396
   if (HEAP8[$0 + 44 >> 0] | 0) {
    if ((_fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2] | 0) | 0) == 1) {
     label = 15; //@line 21406
     break;
    }
    $$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 21410
    break;
   }
   HEAP32[$4 >> 2] = $2; //@line 21413
   $17 = $3 + 1 | 0; //@line 21414
   $18 = $0 + 36 | 0; //@line 21415
   $19 = $0 + 40 | 0; //@line 21416
   $20 = $2 + 8 | 0; //@line 21417
   $21 = $2; //@line 21418
   $22 = $0 + 32 | 0; //@line 21419
   $$032 = $3; //@line 21420
   while (1) {
    $23 = HEAP32[$18 >> 2] | 0; //@line 21422
    $28 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$23 >> 2] | 0) + 12 >> 2] & 15]($23, HEAP32[$19 >> 2] | 0, $$032, $17, $5, $2, $20, $4) | 0; //@line 21427
    if ((HEAP32[$5 >> 2] | 0) == ($$032 | 0)) {
     label = 14; //@line 21431
     break;
    }
    if (($28 | 0) == 3) {
     label = 8; //@line 21436
     break;
    }
    if ($28 >>> 0 >= 2) {
     label = 14; //@line 21442
     break;
    }
    $38 = (HEAP32[$4 >> 2] | 0) - $21 | 0; //@line 21446
    if ((_fwrite($2, 1, $38, HEAP32[$22 >> 2] | 0) | 0) != ($38 | 0)) {
     label = 14; //@line 21451
     break;
    }
    if (($28 | 0) == 1) {
     $$032 = HEAP32[$5 >> 2] | 0; //@line 21456
    } else {
     label = 13; //@line 21458
     break;
    }
   }
   if ((label | 0) == 8) {
    if ((_fwrite($$032, 1, 1, HEAP32[$22 >> 2] | 0) | 0) == 1) {
     label = 13; //@line 21467
    } else {
     label = 14; //@line 21469
    }
   }
   if ((label | 0) == 13) {
    label = 15; //@line 21473
    break;
   } else if ((label | 0) == 14) {
    $$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 21478
    break;
   }
  }
 } while (0);
 if ((label | 0) == 15) {
  $$4 = __ZNSt3__211char_traitsIcE7not_eofEi($1) | 0; //@line 21485
 }
 STACKTOP = sp; //@line 21487
 return $$4 | 0; //@line 21487
}
function __ZNSt3__212__deque_baseI13CharmFunctionNS_9allocatorIS1_EEE5clearEv($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $$sink = 0, $$sroa$011$0$ph = 0, $$sroa$6$0 = 0, $$sroa$6$0$ph = 0, $1 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $38 = 0, $4 = 0, $48 = 0, $51 = 0, $56 = 0, $58 = 0, $6 = 0, $7 = 0;
 $1 = $0 + 4 | 0; //@line 4657
 $2 = HEAP32[$1 >> 2] | 0; //@line 4658
 $3 = $0 + 16 | 0; //@line 4659
 $4 = HEAP32[$3 >> 2] | 0; //@line 4660
 $6 = $2 + ((($4 >>> 0) / 56 | 0) << 2) | 0; //@line 4662
 $7 = $0 + 8 | 0; //@line 4663
 if ((HEAP32[$7 >> 2] | 0) == ($2 | 0)) {
  $23 = 0; //@line 4668
  $25 = $0 + 20 | 0; //@line 4668
  $58 = 0; //@line 4668
 } else {
  $14 = $0 + 20 | 0; //@line 4674
  $16 = $4 + (HEAP32[$14 >> 2] | 0) | 0; //@line 4676
  $23 = (HEAP32[$2 + ((($16 >>> 0) / 56 | 0) << 2) >> 2] | 0) + ((($16 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 4682
  $25 = $14; //@line 4682
  $58 = (HEAP32[$6 >> 2] | 0) + ((($4 >>> 0) % 56 | 0) * 72 | 0) | 0; //@line 4682
 }
 $$sroa$011$0$ph = $6; //@line 4684
 $$sroa$6$0$ph = $58; //@line 4684
 L5 : while (1) {
  $$sroa$6$0 = $$sroa$6$0$ph; //@line 4686
  do {
   $22 = $$sroa$6$0; //@line 4688
   if (($23 | 0) == ($22 | 0)) {
    break L5;
   }
   $32 = $22 + 52 | 0; //@line 4693
   if ((HEAP8[$32 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$32 >> 2] | 0); //@line 4699
   }
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($22 + 40 | 0); //@line 4702
   $38 = $22 + 4 | 0; //@line 4703
   if ((HEAP8[$38 + 11 >> 0] | 0) < 0) {
    __ZdlPv(HEAP32[$38 >> 2] | 0); //@line 4709
   }
   $$sroa$6$0 = $22 + 72 | 0; //@line 4712
  } while (($$sroa$6$0 - (HEAP32[$$sroa$011$0$ph >> 2] | 0) | 0) != 4032);
  $48 = $$sroa$011$0$ph + 4 | 0; //@line 4722
  $$sroa$011$0$ph = $48; //@line 4724
  $$sroa$6$0$ph = HEAP32[$48 >> 2] | 0; //@line 4724
 }
 HEAP32[$25 >> 2] = 0; //@line 4726
 $27 = HEAP32[$1 >> 2] | 0; //@line 4728
 $29 = (HEAP32[$7 >> 2] | 0) - $27 >> 2; //@line 4730
 if ($29 >>> 0 > 2) {
  $51 = $27; //@line 4734
  do {
   __ZdlPv(HEAP32[$51 >> 2] | 0); //@line 4737
   $51 = (HEAP32[$1 >> 2] | 0) + 4 | 0; //@line 4739
   HEAP32[$1 >> 2] = $51; //@line 4740
   $56 = (HEAP32[$7 >> 2] | 0) - $51 >> 2; //@line 4744
  } while ($56 >>> 0 > 2);
  $$lcssa = $56; //@line 4749
 } else {
  $$lcssa = $29; //@line 4754
 }
 switch ($$lcssa | 0) {
 case 1:
  {
   $$sink = 28; //@line 4758
   break;
  }
 case 2:
  {
   $$sink = 56; //@line 4762
   break;
  }
 default:
  {
   return;
  }
 }
 HEAP32[$3 >> 2] = $$sink; //@line 4769
 return;
}
function __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i = 0, $$0$i10 = 0, $$08$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $4 = 0, $7 = 0, $8 = 0, label = 0;
 $4 = $0 + 4 | 0; //@line 2528
 if (($1 | 0) == ($2 | 0)) {
  return;
 }
 $$0$i10 = $1; //@line 2534
 $7 = HEAP32[$4 >> 2] | 0; //@line 2534
 while (1) {
  HEAP32[$7 >> 2] = HEAP32[$$0$i10 >> 2]; //@line 2537
  $8 = $7 + 4 | 0; //@line 2538
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($8, $$0$i10 + 4 | 0); //@line 2540
  $10 = $7 + 16 | 0; //@line 2541
  $11 = $$0$i10 + 16 | 0; //@line 2542
  HEAP32[$10 >> 2] = HEAP32[$11 >> 2]; //@line 2543
  HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2]; //@line 2543
  HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2]; //@line 2543
  HEAP32[$10 + 12 >> 2] = HEAP32[$11 + 12 >> 2]; //@line 2543
  HEAP32[$10 + 16 >> 2] = HEAP32[$11 + 16 >> 2]; //@line 2543
  HEAP32[$10 + 20 >> 2] = HEAP32[$11 + 20 >> 2]; //@line 2543
  $12 = $7 + 40 | 0; //@line 2544
  __THREW__ = 0; //@line 2546
  invoke_vii(118, $12 | 0, $$0$i10 + 40 | 0); //@line 2547
  $14 = __THREW__; //@line 2548
  __THREW__ = 0; //@line 2548
  if ($14 & 1) {
   label = 5; //@line 2551
   break;
  }
  __THREW__ = 0; //@line 2556
  invoke_vii(115, $7 + 52 | 0, $$0$i10 + 52 | 0); //@line 2557
  $18 = __THREW__; //@line 2558
  __THREW__ = 0; //@line 2558
  if ($18 & 1) {
   label = 6; //@line 2561
   break;
  }
  HEAP16[$7 + 64 >> 1] = HEAP16[$$0$i10 + 64 >> 1] | 0; //@line 2567
  $$0$i10 = $$0$i10 + 72 | 0; //@line 2568
  $7 = (HEAP32[$4 >> 2] | 0) + 72 | 0; //@line 2570
  HEAP32[$4 >> 2] = $7; //@line 2571
  if (($$0$i10 | 0) == ($2 | 0)) {
   label = 11; //@line 2574
   break;
  }
 }
 if ((label | 0) == 5) {
  $20 = ___cxa_find_matching_catch_2() | 0; //@line 2581
  $$0$i$i = tempRet0; //@line 2583
  $$08$i$i = $20; //@line 2583
 } else if ((label | 0) == 6) {
  $22 = ___cxa_find_matching_catch_2() | 0; //@line 2586
  $23 = tempRet0; //@line 2587
  __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($12); //@line 2588
  $$0$i$i = $23; //@line 2589
  $$08$i$i = $22; //@line 2589
 } else if ((label | 0) == 11) {
  return;
 }
 if ((HEAP8[$8 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$08$i$i | 0); //@line 2598
 }
 __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 2602
 ___resumeException($$08$i$i | 0); //@line 2603
}
function __ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE16__generic_assignIRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSV_EJLj1ELj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchEST_SW_SY_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $$pre$phi$i$i$i$iZ2D = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 15518
 STACKTOP = STACKTOP + 48 | 0; //@line 15519
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 15519
 $$byval_copy = sp; //@line 15520
 $3 = sp + 24 | 0; //@line 15521
 $5 = HEAP32[$0 >> 2] | 0; //@line 15523
 if ((HEAP32[$5 + 24 >> 2] | 0) != 1) {
  HEAP32[$3 >> 2] = $5; //@line 15528
  HEAP32[$3 + 4 >> 2] = $2; //@line 15530
  HEAP8[$$byval_copy >> 0] = HEAP8[sp + 32 >> 0] | 0; //@line 15531
  __ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS3_IFvS5_P13RunnerContextEEEEEEE12__assign_altILb1ELj1ESB_RKSB_EEvRNS0_5__altIXT0_ET1_EEOT2_NS_17integral_constantIbXT_EEEENKUt_clENSN_IbLb1EEE($3, $$byval_copy); //@line 15532
  STACKTOP = sp; //@line 15533
  return;
 }
 $10 = HEAP32[$2 + 16 >> 2] | 0; //@line 15536
 do {
  if (!$10) {
   $12 = $$byval_copy + 16 | 0; //@line 15540
   HEAP32[$12 >> 2] = 0; //@line 15541
   $$pre$phi$i$i$i$iZ2D = $12; //@line 15542
  } else {
   if (($2 | 0) == ($10 | 0)) {
    $14 = $$byval_copy + 16 | 0; //@line 15546
    HEAP32[$14 >> 2] = $$byval_copy; //@line 15547
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 255]($10, $$byval_copy); //@line 15551
    $$pre$phi$i$i$i$iZ2D = $14; //@line 15552
    break;
   } else {
    $22 = $$byval_copy + 16 | 0; //@line 15559
    HEAP32[$22 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2] & 255]($10) | 0; //@line 15560
    $$pre$phi$i$i$i$iZ2D = $22; //@line 15561
    break;
   }
  }
 } while (0);
 __ZNSt3__28functionIFvP6RunnerP13RunnerContextEE4swapERS6_($$byval_copy, $1); //@line 15566
 $23 = HEAP32[$$pre$phi$i$i$i$iZ2D >> 2] | 0; //@line 15567
 if (($$byval_copy | 0) == ($23 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] & 511]($23); //@line 15573
 } else {
  if ($23 | 0) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$23 >> 2] | 0) + 20 >> 2] & 511]($23); //@line 15580
  }
 }
 STACKTOP = sp; //@line 15583
 return;
}
function __ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE16__generic_assignIRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSV_EJLj0ELj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchEST_SW_SY_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $$pre$phi$i$i$i$iZ2D = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 15445
 STACKTOP = STACKTOP + 48 | 0; //@line 15446
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 15446
 $$byval_copy = sp; //@line 15447
 $3 = sp + 24 | 0; //@line 15448
 $5 = HEAP32[$0 >> 2] | 0; //@line 15450
 if (HEAP32[$5 + 24 >> 2] | 0) {
  HEAP32[$3 >> 2] = $5; //@line 15455
  HEAP32[$3 + 4 >> 2] = $2; //@line 15457
  HEAP8[$$byval_copy >> 0] = HEAP8[sp + 32 >> 0] | 0; //@line 15458
  __ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS3_IFvS5_P13RunnerContextEEEEEEE12__assign_altILb1ELj0ES7_RKS7_EEvRNS0_5__altIXT0_ET1_EEOT2_NS_17integral_constantIbXT_EEEENKUt_clENSN_IbLb1EEE($3, $$byval_copy); //@line 15459
  STACKTOP = sp; //@line 15460
  return;
 }
 $10 = HEAP32[$2 + 16 >> 2] | 0; //@line 15463
 do {
  if (!$10) {
   $12 = $$byval_copy + 16 | 0; //@line 15467
   HEAP32[$12 >> 2] = 0; //@line 15468
   $$pre$phi$i$i$i$iZ2D = $12; //@line 15469
  } else {
   if (($2 | 0) == ($10 | 0)) {
    $14 = $$byval_copy + 16 | 0; //@line 15473
    HEAP32[$14 >> 2] = $$byval_copy; //@line 15474
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 255]($10, $$byval_copy); //@line 15478
    $$pre$phi$i$i$i$iZ2D = $14; //@line 15479
    break;
   } else {
    $22 = $$byval_copy + 16 | 0; //@line 15486
    HEAP32[$22 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2] & 255]($10) | 0; //@line 15487
    $$pre$phi$i$i$i$iZ2D = $22; //@line 15488
    break;
   }
  }
 } while (0);
 __ZNSt3__28functionIFvP6RunnerEE4swapERS4_($$byval_copy, $1); //@line 15493
 $23 = HEAP32[$$pre$phi$i$i$i$iZ2D >> 2] | 0; //@line 15494
 if (($$byval_copy | 0) == ($23 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] & 511]($23); //@line 15500
 } else {
  if ($23 | 0) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$23 >> 2] | 0) + 20 >> 2] & 511]($23); //@line 15507
  }
 }
 STACKTOP = sp; //@line 15510
 return;
}
function __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $30 = 0, $37 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2861
 STACKTOP = STACKTOP + 16 | 0; //@line 2862
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2862
 $$byval_copy = sp + 1 | 0; //@line 2863
 $1 = sp; //@line 2864
 $2 = HEAP32[$0 >> 2] | 0; //@line 2865
 if (!$2) {
  STACKTOP = sp; //@line 2868
  return;
 }
 $4 = $0 + 4 | 0; //@line 2870
 $5 = HEAP32[$4 >> 2] | 0; //@line 2871
 do {
  if (($5 | 0) == ($2 | 0)) {
   $37 = $2; //@line 2875
  } else {
   $8 = $5; //@line 2877
   L6 : while (1) {
    HEAP32[$4 >> 2] = $8 + -72; //@line 2880
    $9 = $8 + -20 | 0; //@line 2881
    if ((HEAP8[$9 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 2887
    }
    $14 = $8 + -32 | 0; //@line 2889
    $15 = HEAP32[$14 >> 2] | 0; //@line 2890
    if ($15 | 0) {
     $17 = $8 + -28 | 0; //@line 2893
     $18 = HEAP32[$17 >> 2] | 0; //@line 2894
     if (($18 | 0) == ($15 | 0)) {
      $29 = $15; //@line 2897
     } else {
      $20 = $8 + -24 | 0; //@line 2899
      $22 = $18; //@line 2900
      do {
       $21 = $22 + -72 | 0; //@line 2902
       HEAP32[$17 >> 2] = $21; //@line 2903
       __THREW__ = 0; //@line 2904
       HEAP8[$$byval_copy >> 0] = HEAP8[$1 >> 0] | 0; //@line 2905
       invoke_viii(13, $$byval_copy | 0, $20 | 0, $21 | 0); //@line 2906
       $23 = __THREW__; //@line 2907
       __THREW__ = 0; //@line 2907
       if ($23 & 1) {
        label = 11; //@line 2910
        break L6;
       }
       $22 = HEAP32[$17 >> 2] | 0; //@line 2913
      } while (($22 | 0) != ($15 | 0));
      $29 = HEAP32[$14 >> 2] | 0; //@line 2922
     }
     __ZdlPv($29); //@line 2924
    }
    $30 = $8 + -68 | 0; //@line 2926
    if ((HEAP8[$30 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 2932
    }
    $8 = HEAP32[$4 >> 2] | 0; //@line 2934
    if (($8 | 0) == ($2 | 0)) {
     label = 17; //@line 2937
     break;
    }
   }
   if ((label | 0) == 11) {
    $27 = ___cxa_find_matching_catch_3(0) | 0; //@line 2944
    ___clang_call_terminate($27); //@line 2946
   } else if ((label | 0) == 17) {
    $37 = HEAP32[$0 >> 2] | 0; //@line 2951
    break;
   }
  }
 } while (0);
 __ZdlPv($37); //@line 2956
 STACKTOP = sp; //@line 2957
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 36807
 STACKTOP = STACKTOP + 128 | 0; //@line 36808
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 36808
 $$byval_copy = sp; //@line 36809
 $5 = sp + 112 | 0; //@line 36810
 $6 = sp + 100 | 0; //@line 36811
 $7 = sp + 16 | 0; //@line 36812
 $8 = sp + 12 | 0; //@line 36813
 $9 = sp + 4 | 0; //@line 36814
 $10 = sp + 8 | 0; //@line 36815
 HEAP8[$5 >> 0] = HEAP8[30020] | 0; //@line 36816
 HEAP8[$5 + 1 >> 0] = HEAP8[30021] | 0; //@line 36816
 HEAP8[$5 + 2 >> 0] = HEAP8[30022] | 0; //@line 36816
 HEAP8[$5 + 3 >> 0] = HEAP8[30023] | 0; //@line 36816
 HEAP8[$5 + 4 >> 0] = HEAP8[30024] | 0; //@line 36816
 HEAP8[$5 + 5 >> 0] = HEAP8[30025] | 0; //@line 36816
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 30026, 0, HEAP32[$2 + 4 >> 2] | 0); //@line 36820
 $14 = __ZNSt3__26__clocEv() | 0; //@line 36821
 HEAP32[$$byval_copy >> 2] = $4; //@line 36822
 $16 = $6 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 12, $14, $5, $$byval_copy) | 0) | 0; //@line 36824
 $17 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $16, $2) | 0; //@line 36825
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 36826
 __THREW__ = 0; //@line 36827
 invoke_viiiiiii(4, $6 | 0, $17 | 0, $16 | 0, $7 | 0, $8 | 0, $9 | 0, $$byval_copy | 0); //@line 36828
 $18 = __THREW__; //@line 36829
 __THREW__ = 0; //@line 36829
 if ($18 & 1) {
  $24 = ___cxa_find_matching_catch_2() | 0; //@line 36832
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 36834
  ___resumeException($24 | 0); //@line 36835
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 36838
  HEAP32[$10 >> 2] = HEAP32[$1 >> 2]; //@line 36840
  $21 = HEAP32[$8 >> 2] | 0; //@line 36841
  $22 = HEAP32[$9 >> 2] | 0; //@line 36842
  HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2]; //@line 36843
  $23 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, $21, $22, $2, $3) | 0; //@line 36844
  STACKTOP = sp; //@line 36845
  return $23 | 0; //@line 36845
 }
 return 0; //@line 36847
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 36696
 STACKTOP = STACKTOP + 128 | 0; //@line 36697
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 36697
 $$byval_copy = sp; //@line 36698
 $5 = sp + 122 | 0; //@line 36699
 $6 = sp + 108 | 0; //@line 36700
 $7 = sp + 16 | 0; //@line 36701
 $8 = sp + 12 | 0; //@line 36702
 $9 = sp + 4 | 0; //@line 36703
 $10 = sp + 8 | 0; //@line 36704
 HEAP8[$5 >> 0] = HEAP8[30020] | 0; //@line 36705
 HEAP8[$5 + 1 >> 0] = HEAP8[30021] | 0; //@line 36705
 HEAP8[$5 + 2 >> 0] = HEAP8[30022] | 0; //@line 36705
 HEAP8[$5 + 3 >> 0] = HEAP8[30023] | 0; //@line 36705
 HEAP8[$5 + 4 >> 0] = HEAP8[30024] | 0; //@line 36705
 HEAP8[$5 + 5 >> 0] = HEAP8[30025] | 0; //@line 36705
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 30026, 1, HEAP32[$2 + 4 >> 2] | 0); //@line 36709
 $14 = __ZNSt3__26__clocEv() | 0; //@line 36710
 HEAP32[$$byval_copy >> 2] = $4; //@line 36711
 $16 = $6 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 13, $14, $5, $$byval_copy) | 0) | 0; //@line 36713
 $17 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $16, $2) | 0; //@line 36714
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 36715
 __THREW__ = 0; //@line 36716
 invoke_viiiiiii(4, $6 | 0, $17 | 0, $16 | 0, $7 | 0, $8 | 0, $9 | 0, $$byval_copy | 0); //@line 36717
 $18 = __THREW__; //@line 36718
 __THREW__ = 0; //@line 36718
 if ($18 & 1) {
  $24 = ___cxa_find_matching_catch_2() | 0; //@line 36721
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 36723
  ___resumeException($24 | 0); //@line 36724
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 36727
  HEAP32[$10 >> 2] = HEAP32[$1 >> 2]; //@line 36729
  $21 = HEAP32[$8 >> 2] | 0; //@line 36730
  $22 = HEAP32[$9 >> 2] | 0; //@line 36731
  HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2]; //@line 36732
  $23 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, $21, $22, $2, $3) | 0; //@line 36733
  STACKTOP = sp; //@line 36734
  return $23 | 0; //@line 36734
 }
 return 0; //@line 36736
}
function __ZNSt3__24pairINS_6vectorI13CharmFunctionNS_9allocatorIS2_EEEEP16FunctionAnalyzerED2Ev($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $29 = 0, $30 = 0, $37 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 463
 STACKTOP = STACKTOP + 16 | 0; //@line 464
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 464
 $$byval_copy = sp + 1 | 0; //@line 465
 $1 = sp; //@line 466
 $2 = HEAP32[$0 >> 2] | 0; //@line 467
 if (!$2) {
  STACKTOP = sp; //@line 470
  return;
 }
 $4 = $0 + 4 | 0; //@line 472
 $5 = HEAP32[$4 >> 2] | 0; //@line 473
 do {
  if (($5 | 0) == ($2 | 0)) {
   $37 = $2; //@line 477
  } else {
   $8 = $5; //@line 479
   L6 : while (1) {
    HEAP32[$4 >> 2] = $8 + -72; //@line 482
    $9 = $8 + -20 | 0; //@line 483
    if ((HEAP8[$9 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$9 >> 2] | 0); //@line 489
    }
    $14 = $8 + -32 | 0; //@line 491
    $15 = HEAP32[$14 >> 2] | 0; //@line 492
    if ($15 | 0) {
     $17 = $8 + -28 | 0; //@line 495
     $18 = HEAP32[$17 >> 2] | 0; //@line 496
     if (($18 | 0) == ($15 | 0)) {
      $29 = $15; //@line 499
     } else {
      $20 = $8 + -24 | 0; //@line 501
      $22 = $18; //@line 502
      do {
       $21 = $22 + -72 | 0; //@line 504
       HEAP32[$17 >> 2] = $21; //@line 505
       __THREW__ = 0; //@line 506
       HEAP8[$$byval_copy >> 0] = HEAP8[$1 >> 0] | 0; //@line 507
       invoke_viii(13, $$byval_copy | 0, $20 | 0, $21 | 0); //@line 508
       $23 = __THREW__; //@line 509
       __THREW__ = 0; //@line 509
       if ($23 & 1) {
        label = 11; //@line 512
        break L6;
       }
       $22 = HEAP32[$17 >> 2] | 0; //@line 515
      } while (($22 | 0) != ($15 | 0));
      $29 = HEAP32[$14 >> 2] | 0; //@line 524
     }
     __ZdlPv($29); //@line 526
    }
    $30 = $8 + -68 | 0; //@line 528
    if ((HEAP8[$30 + 11 >> 0] | 0) < 0) {
     __ZdlPv(HEAP32[$30 >> 2] | 0); //@line 534
    }
    $8 = HEAP32[$4 >> 2] | 0; //@line 536
    if (($8 | 0) == ($2 | 0)) {
     label = 17; //@line 539
     break;
    }
   }
   if ((label | 0) == 11) {
    $27 = ___cxa_find_matching_catch_3(0) | 0; //@line 546
    ___clang_call_terminate($27); //@line 548
   } else if ((label | 0) == 17) {
    $37 = HEAP32[$0 >> 2] | 0; //@line 553
    break;
   }
  }
 } while (0);
 __ZdlPv($37); //@line 558
 STACKTOP = sp; //@line 559
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 34980
 STACKTOP = STACKTOP + 64 | 0; //@line 34981
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 34981
 $$byval_copy = sp; //@line 34982
 $5 = sp + 52 | 0; //@line 34983
 $6 = sp + 40 | 0; //@line 34984
 $7 = sp + 16 | 0; //@line 34985
 $8 = sp + 12 | 0; //@line 34986
 $9 = sp + 4 | 0; //@line 34987
 $10 = sp + 8 | 0; //@line 34988
 HEAP8[$5 >> 0] = HEAP8[30020] | 0; //@line 34989
 HEAP8[$5 + 1 >> 0] = HEAP8[30021] | 0; //@line 34989
 HEAP8[$5 + 2 >> 0] = HEAP8[30022] | 0; //@line 34989
 HEAP8[$5 + 3 >> 0] = HEAP8[30023] | 0; //@line 34989
 HEAP8[$5 + 4 >> 0] = HEAP8[30024] | 0; //@line 34989
 HEAP8[$5 + 5 >> 0] = HEAP8[30025] | 0; //@line 34989
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 30026, 0, HEAP32[$2 + 4 >> 2] | 0); //@line 34993
 $14 = __ZNSt3__26__clocEv() | 0; //@line 34994
 HEAP32[$$byval_copy >> 2] = $4; //@line 34995
 $16 = $6 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 12, $14, $5, $$byval_copy) | 0) | 0; //@line 34997
 $17 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $16, $2) | 0; //@line 34998
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 34999
 __THREW__ = 0; //@line 35000
 invoke_viiiiiii(2, $6 | 0, $17 | 0, $16 | 0, $7 | 0, $8 | 0, $9 | 0, $$byval_copy | 0); //@line 35001
 $18 = __THREW__; //@line 35002
 __THREW__ = 0; //@line 35002
 if ($18 & 1) {
  $24 = ___cxa_find_matching_catch_2() | 0; //@line 35005
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 35007
  ___resumeException($24 | 0); //@line 35008
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 35011
  HEAP32[$10 >> 2] = HEAP32[$1 >> 2]; //@line 35013
  $21 = HEAP32[$8 >> 2] | 0; //@line 35014
  $22 = HEAP32[$9 >> 2] | 0; //@line 35015
  HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2]; //@line 35016
  $23 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, $21, $22, $2, $3) | 0; //@line 35017
  STACKTOP = sp; //@line 35018
  return $23 | 0; //@line 35018
 }
 return 0; //@line 35020
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 34869
 STACKTOP = STACKTOP + 64 | 0; //@line 34870
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 34870
 $$byval_copy = sp; //@line 34871
 $5 = sp + 52 | 0; //@line 34872
 $6 = sp + 39 | 0; //@line 34873
 $7 = sp + 16 | 0; //@line 34874
 $8 = sp + 12 | 0; //@line 34875
 $9 = sp + 4 | 0; //@line 34876
 $10 = sp + 8 | 0; //@line 34877
 HEAP8[$5 >> 0] = HEAP8[30020] | 0; //@line 34878
 HEAP8[$5 + 1 >> 0] = HEAP8[30021] | 0; //@line 34878
 HEAP8[$5 + 2 >> 0] = HEAP8[30022] | 0; //@line 34878
 HEAP8[$5 + 3 >> 0] = HEAP8[30023] | 0; //@line 34878
 HEAP8[$5 + 4 >> 0] = HEAP8[30024] | 0; //@line 34878
 HEAP8[$5 + 5 >> 0] = HEAP8[30025] | 0; //@line 34878
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 30026, 1, HEAP32[$2 + 4 >> 2] | 0); //@line 34882
 $14 = __ZNSt3__26__clocEv() | 0; //@line 34883
 HEAP32[$$byval_copy >> 2] = $4; //@line 34884
 $16 = $6 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 13, $14, $5, $$byval_copy) | 0) | 0; //@line 34886
 $17 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $16, $2) | 0; //@line 34887
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 34888
 __THREW__ = 0; //@line 34889
 invoke_viiiiiii(2, $6 | 0, $17 | 0, $16 | 0, $7 | 0, $8 | 0, $9 | 0, $$byval_copy | 0); //@line 34890
 $18 = __THREW__; //@line 34891
 __THREW__ = 0; //@line 34891
 if ($18 & 1) {
  $24 = ___cxa_find_matching_catch_2() | 0; //@line 34894
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 34896
  ___resumeException($24 | 0); //@line 34897
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 34900
  HEAP32[$10 >> 2] = HEAP32[$1 >> 2]; //@line 34902
  $21 = HEAP32[$8 >> 2] | 0; //@line 34903
  $22 = HEAP32[$9 >> 2] | 0; //@line 34904
  HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2]; //@line 34905
  $23 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, $21, $22, $2, $3) | 0; //@line 34906
  STACKTOP = sp; //@line 34907
  return $23 | 0; //@line 34907
 }
 return 0; //@line 34909
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink = 0, $$sink11 = 0, $$sink13 = 0, $$sink3 = 0, $$sink5 = 0, $$sroa$speculated = 0, $10 = 0, $14 = 0, $16 = 0, $19 = 0, $26 = 0, $3 = 0, $34 = 0, $4 = 0, $8 = 0;
 $3 = $0 + 8 | 0; //@line 21466
 $4 = $0 + 96 | 0; //@line 21467
 HEAP32[$3 >> 2] = 0; //@line 21468
 HEAP32[$3 + 4 >> 2] = 0; //@line 21468
 HEAP32[$3 + 8 >> 2] = 0; //@line 21468
 HEAP32[$3 + 12 >> 2] = 0; //@line 21468
 HEAP32[$3 + 16 >> 2] = 0; //@line 21468
 HEAP32[$3 + 20 >> 2] = 0; //@line 21468
 if (HEAP8[$4 >> 0] | 0) {
  $8 = HEAP32[$0 + 32 >> 2] | 0; //@line 21473
  if ($8 | 0) {
   __ZdaPv($8); //@line 21476
  }
 }
 $10 = $0 + 97 | 0; //@line 21479
 if (HEAP8[$10 >> 0] | 0) {
  $14 = HEAP32[$0 + 56 >> 2] | 0; //@line 21484
  if ($14 | 0) {
   __ZdaPv($14); //@line 21487
  }
 }
 $16 = $0 + 52 | 0; //@line 21490
 HEAP32[$16 >> 2] = $2; //@line 21491
 if ($2 >>> 0 > 8) {
  $19 = HEAP8[$0 + 98 >> 0] | 0; //@line 21495
  if (($1 | 0) != 0 & $19 << 24 >> 24 != 0) {
   $$sink = 0; //@line 21500
   $$sink3 = $1; //@line 21500
  } else {
   $$sink = 1; //@line 21503
   $$sink3 = __Znaj($2) | 0; //@line 21503
  }
  HEAP32[$0 + 32 >> 2] = $$sink3; //@line 21506
  $$sink5 = $$sink; //@line 21507
  $26 = $19; //@line 21507
 } else {
  HEAP32[$0 + 32 >> 2] = $0 + 44; //@line 21511
  HEAP32[$16 >> 2] = 8; //@line 21512
  $$sink5 = 0; //@line 21515
  $26 = HEAP8[$0 + 98 >> 0] | 0; //@line 21515
 }
 HEAP8[$4 >> 0] = $$sink5; //@line 21517
 if ($26 << 24 >> 24) {
  HEAP32[$0 + 60 >> 2] = 0; //@line 21521
  $$sink11 = 0; //@line 21522
  $$sink13 = 0; //@line 21522
  $34 = $0 + 56 | 0; //@line 21523
  HEAP32[$34 >> 2] = $$sink13; //@line 21524
  HEAP8[$10 >> 0] = $$sink11; //@line 21525
  return $0 | 0; //@line 21526
 }
 $$sroa$speculated = ($2 | 0) > 8 ? $2 : 8; //@line 21529
 HEAP32[$0 + 60 >> 2] = $$sroa$speculated; //@line 21531
 if (($1 | 0) != 0 & $$sroa$speculated >>> 0 > 7) {
  $$sink11 = 0; //@line 21536
  $$sink13 = $1; //@line 21536
  $34 = $0 + 56 | 0; //@line 21537
  HEAP32[$34 >> 2] = $$sink13; //@line 21538
  HEAP8[$10 >> 0] = $$sink11; //@line 21539
  return $0 | 0; //@line 21540
 }
 $$sink11 = 1; //@line 21543
 $$sink13 = __Znaj($$sroa$speculated) | 0; //@line 21543
 $34 = $0 + 56 | 0; //@line 21544
 HEAP32[$34 >> 2] = $$sink13; //@line 21545
 HEAP8[$10 >> 0] = $$sink11; //@line 21546
 return $0 | 0; //@line 21547
}
function __ZN16FunctionAnalyzer8doInlineERNSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEES2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$011$022 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $21 = 0, $25 = 0, $3 = 0, $5 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23714
 STACKTOP = STACKTOP + 80 | 0; //@line 23715
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 23715
 $3 = sp; //@line 23716
 $5 = __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_($0, $2 + 52 | 0) | 0; //@line 23718
 if (!$5) {
  $$0 = 0; //@line 23721
  STACKTOP = sp; //@line 23722
  return $$0 | 0; //@line 23722
 }
 $8 = HEAP32[$5 + 64 >> 2] | 0; //@line 23725
 $10 = HEAP32[$5 + 68 >> 2] | 0; //@line 23727
 if (($8 | 0) == ($10 | 0)) {
  $$0 = 1; //@line 23730
  STACKTOP = sp; //@line 23731
  return $$0 | 0; //@line 23731
 }
 $12 = $1 + 4 | 0; //@line 23733
 $13 = $1 + 8 | 0; //@line 23734
 $$sroa$011$022 = $8; //@line 23735
 while (1) {
  __ZN13CharmFunctionC2ERKS_($3, $$sroa$011$022); //@line 23737
  $14 = HEAP32[$12 >> 2] | 0; //@line 23738
  if (($14 | 0) == (HEAP32[$13 >> 2] | 0)) {
   __THREW__ = 0; //@line 23742
   invoke_vii(134, $1 | 0, $3 | 0); //@line 23743
   $21 = __THREW__; //@line 23744
   __THREW__ = 0; //@line 23744
   if ($21 & 1) {
    label = 9; //@line 23747
    break;
   }
  } else {
   __THREW__ = 0; //@line 23751
   invoke_vii(120, $14 | 0, $3 | 0); //@line 23752
   $17 = __THREW__; //@line 23753
   __THREW__ = 0; //@line 23753
   if ($17 & 1) {
    label = 9; //@line 23756
    break;
   }
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 72; //@line 23761
  }
  __ZN13CharmFunctionD2Ev($3); //@line 23763
  $$sroa$011$022 = $$sroa$011$022 + 72 | 0; //@line 23764
  if (($$sroa$011$022 | 0) == ($10 | 0)) {
   $$0 = 1; //@line 23767
   label = 10; //@line 23768
   break;
  }
 }
 if ((label | 0) == 9) {
  $25 = ___cxa_find_matching_catch_2() | 0; //@line 23775
  __ZN13CharmFunctionD2Ev($3); //@line 23777
  ___resumeException($25 | 0); //@line 23778
 } else if ((label | 0) == 10) {
  STACKTOP = sp; //@line 23782
  return $$0 | 0; //@line 23782
 }
 return 0; //@line 23784
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i$i = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $35 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 62619
 STACKTOP = STACKTOP + 16 | 0; //@line 62620
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62620
 $3 = sp; //@line 62621
 HEAP32[$0 >> 2] = 0; //@line 62622
 HEAP32[$0 + 4 >> 2] = 0; //@line 62622
 HEAP32[$0 + 8 >> 2] = 0; //@line 62622
 $$0$i$i = 0; //@line 62623
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 62630
  $$0$i$i = $$0$i$i + 1 | 0; //@line 62632
 }
 $6 = $1 + 11 | 0; //@line 62634
 $7 = HEAP8[$6 >> 0] | 0; //@line 62635
 $12 = $7 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] | 0 : $7 & 255; //@line 62640
 $13 = __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0; //@line 62641
 $17 = (HEAP8[$6 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1; //@line 62645
 $18 = $12 + $13 | 0; //@line 62646
 do {
  if ($18 >>> 0 > 4294967279) {
   __THREW__ = 0; //@line 62650
   invoke_vi(258, $0 | 0); //@line 62651
   __THREW__ = 0; //@line 62652
  } else {
   if ($18 >>> 0 < 11) {
    HEAP8[$0 + 11 >> 0] = $12; //@line 62658
    $$0$i = $0; //@line 62659
   } else {
    $25 = $18 + 16 & -16; //@line 62662
    __THREW__ = 0; //@line 62663
    $26 = invoke_ii(142, $25 | 0) | 0; //@line 62664
    $27 = __THREW__; //@line 62665
    __THREW__ = 0; //@line 62665
    if ($27 & 1) {
     break;
    }
    HEAP32[$0 >> 2] = $26; //@line 62670
    HEAP32[$0 + 8 >> 2] = $25 | -2147483648; //@line 62673
    HEAP32[$0 + 4 >> 2] = $12; //@line 62675
    $$0$i = $26; //@line 62676
   }
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i, $17, $12) | 0; //@line 62678
   HEAP8[$3 >> 0] = 0; //@line 62680
   __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i + $12 | 0, $3); //@line 62681
   __THREW__ = 0; //@line 62682
   invoke_iiii(29, $0 | 0, $2 | 0, $13 | 0) | 0; //@line 62683
   $33 = __THREW__; //@line 62684
   __THREW__ = 0; //@line 62684
   if (!($33 & 1)) {
    STACKTOP = sp; //@line 62687
    return;
   }
  }
 } while (0);
 $35 = ___cxa_find_matching_catch_2() | 0; //@line 62691
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0); //@line 62693
 ___resumeException($35 | 0); //@line 62694
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 37364
 STACKTOP = STACKTOP + 192 | 0; //@line 37365
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192); //@line 37365
 $$byval_copy = sp; //@line 37366
 $5 = sp + 176 | 0; //@line 37367
 $6 = sp + 156 | 0; //@line 37368
 $7 = sp + 4 | 0; //@line 37369
 $8 = sp + 152 | 0; //@line 37370
 HEAP8[$5 >> 0] = HEAP8[30009] | 0; //@line 37371
 HEAP8[$5 + 1 >> 0] = HEAP8[30010] | 0; //@line 37371
 HEAP8[$5 + 2 >> 0] = HEAP8[30011] | 0; //@line 37371
 HEAP8[$5 + 3 >> 0] = HEAP8[30012] | 0; //@line 37371
 HEAP8[$5 + 4 >> 0] = HEAP8[30013] | 0; //@line 37371
 HEAP8[$5 + 5 >> 0] = HEAP8[30014] | 0; //@line 37371
 $9 = __ZNSt3__26__clocEv() | 0; //@line 37372
 HEAP32[$$byval_copy >> 2] = $4; //@line 37373
 $10 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 20, $9, $5, $$byval_copy) | 0; //@line 37374
 $11 = $6 + $10 | 0; //@line 37375
 $12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $11, $2) | 0; //@line 37376
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 37377
 __THREW__ = 0; //@line 37378
 $13 = invoke_iii(63, $$byval_copy | 0, 35544) | 0; //@line 37379
 $14 = __THREW__; //@line 37380
 __THREW__ = 0; //@line 37380
 if ($14 & 1) {
  $27 = ___cxa_find_matching_catch_2() | 0; //@line 37383
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 37385
  ___resumeException($27 | 0); //@line 37386
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 37389
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 48 >> 2] & 31]($13, $6, $11, $7) | 0; //@line 37393
  $19 = $7 + ($10 << 2) | 0; //@line 37394
  $$0 = ($12 | 0) == ($11 | 0) ? $19 : $7 + ($12 - $6 << 2) | 0; //@line 37400
  HEAP32[$8 >> 2] = HEAP32[$1 >> 2]; //@line 37402
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 37403
  $26 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, $$0, $19, $2, $3) | 0; //@line 37404
  STACKTOP = sp; //@line 37405
  return $26 | 0; //@line 37405
 }
 return 0; //@line 37407
}
function __ZN16FunctionAnalyzer22addToInlineDefinitionsE13CharmFunction($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $4 = 0, $5 = 0, $9 = 0;
 if (HEAP32[$1 >> 2] | 0) {
  $21 = ___cxa_allocate_exception(8) | 0; //@line 22766
  __THREW__ = 0; //@line 22767
  invoke_vii(125, $21 | 0, 20744); //@line 22768
  $22 = __THREW__; //@line 22769
  __THREW__ = 0; //@line 22769
  if ($22 & 1) {
   $24 = ___cxa_find_matching_catch_2() | 0; //@line 22772
   ___cxa_free_exception($21 | 0); //@line 22774
   ___resumeException($24 | 0); //@line 22775
  } else {
   ___cxa_throw($21 | 0, 2824, 242); //@line 22778
  }
 }
 $4 = $1 + 52 | 0; //@line 22782
 $5 = __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_($0, $4) | 0; //@line 22783
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 22785
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($5 + 4 | 0, $1 + 4 | 0) | 0; //@line 22788
 $9 = $5 + 16 | 0; //@line 22789
 $10 = $1 + 16 | 0; //@line 22790
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2]; //@line 22791
 HEAP32[$9 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 22791
 HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 22791
 HEAP32[$9 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 22791
 HEAP32[$9 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 22791
 HEAP32[$9 + 20 >> 2] = HEAP32[$10 + 20 >> 2]; //@line 22791
 if (($5 | 0) == ($1 | 0)) {
  $17 = $5 + 52 | 0; //@line 22794
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($17, $4) | 0; //@line 22795
  $18 = $5 + 64 | 0; //@line 22796
  $19 = $1 + 64 | 0; //@line 22797
  $20 = HEAP16[$19 >> 1] | 0; //@line 22798
  HEAP16[$18 >> 1] = $20; //@line 22799
  return;
 }
 __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($5 + 40 | 0, HEAP32[$1 + 40 >> 2] | 0, HEAP32[$1 + 44 >> 2] | 0); //@line 22807
 $17 = $5 + 52 | 0; //@line 22808
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($17, $4) | 0; //@line 22809
 $18 = $5 + 64 | 0; //@line 22810
 $19 = $1 + 64 | 0; //@line 22811
 $20 = HEAP16[$19 >> 1] | 0; //@line 22812
 HEAP16[$18 >> 1] = $20; //@line 22813
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7205
 STACKTOP = STACKTOP + 224 | 0; //@line 7206
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 7206
 $3 = sp + 120 | 0; //@line 7207
 $4 = sp + 80 | 0; //@line 7208
 $5 = sp; //@line 7209
 $6 = sp + 136 | 0; //@line 7210
 dest = $4; //@line 7211
 stop = dest + 40 | 0; //@line 7211
 do {
  HEAP32[dest >> 2] = 0; //@line 7211
  dest = dest + 4 | 0; //@line 7211
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 7213
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 7217
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $39 = ___lockfile($0) | 0; //@line 7224
  } else {
   $39 = 0; //@line 7226
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 7228
  $14 = $13 & 32; //@line 7229
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 7235
  }
  $19 = $0 + 48 | 0; //@line 7237
  if (!(HEAP32[$19 >> 2] | 0)) {
   $23 = $0 + 44 | 0; //@line 7241
   $24 = HEAP32[$23 >> 2] | 0; //@line 7242
   HEAP32[$23 >> 2] = $6; //@line 7243
   $25 = $0 + 28 | 0; //@line 7244
   HEAP32[$25 >> 2] = $6; //@line 7245
   $26 = $0 + 20 | 0; //@line 7246
   HEAP32[$26 >> 2] = $6; //@line 7247
   HEAP32[$19 >> 2] = 80; //@line 7248
   $28 = $0 + 16 | 0; //@line 7250
   HEAP32[$28 >> 2] = $6 + 80; //@line 7251
   $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 7252
   if (!$24) {
    $$1 = $29; //@line 7255
   } else {
    FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, 0, 0) | 0; //@line 7259
    $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 7262
    HEAP32[$23 >> 2] = $24; //@line 7263
    HEAP32[$19 >> 2] = 0; //@line 7264
    HEAP32[$28 >> 2] = 0; //@line 7265
    HEAP32[$25 >> 2] = 0; //@line 7266
    HEAP32[$26 >> 2] = 0; //@line 7267
    $$1 = $$; //@line 7268
   }
  } else {
   $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 7272
  }
  $35 = HEAP32[$0 >> 2] | 0; //@line 7274
  HEAP32[$0 >> 2] = $35 | $14; //@line 7279
  if ($39 | 0) {
   ___unlockfile($0); //@line 7282
  }
  $$0 = ($35 & 32 | 0) == 0 ? $$1 : -1; //@line 7284
 }
 STACKTOP = sp; //@line 7286
 return $$0 | 0; //@line 7286
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $33 = 0, $44 = 0, label = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 63894
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $44 = HEAP32[$0 + 8 >> 2] | 0; //@line 63900
    FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 7]($44, $1, $2, $3, $4); //@line 63904
    break;
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 63911
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 63916
     $19 = $1 + 44 | 0; //@line 63917
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 63923
     HEAP8[$22 >> 0] = 0; //@line 63924
     $23 = $1 + 53 | 0; //@line 63925
     HEAP8[$23 >> 0] = 0; //@line 63926
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 63928
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] & 15]($25, $1, $2, $2, 1, $4); //@line 63932
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 63936
      label = 11; //@line 63937
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 63942
       label = 11; //@line 63943
      } else {
       $$037$off039 = 3; //@line 63945
      }
     }
     if ((label | 0) == 11) {
      HEAP32[$13 >> 2] = $2; //@line 63949
      $33 = $1 + 40 | 0; //@line 63950
      HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1; //@line 63953
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 63963
        $$037$off039 = $$037$off038; //@line 63964
       } else {
        $$037$off039 = $$037$off038; //@line 63966
       }
      } else {
       $$037$off039 = $$037$off038; //@line 63969
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 63972
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 63979
   }
  }
 } while (0);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 35537
 STACKTOP = STACKTOP + 80 | 0; //@line 35538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 35538
 $$byval_copy = sp; //@line 35539
 $5 = sp + 68 | 0; //@line 35540
 $6 = sp + 48 | 0; //@line 35541
 $7 = sp + 8 | 0; //@line 35542
 $8 = sp + 4 | 0; //@line 35543
 HEAP8[$5 >> 0] = HEAP8[30009] | 0; //@line 35544
 HEAP8[$5 + 1 >> 0] = HEAP8[30010] | 0; //@line 35544
 HEAP8[$5 + 2 >> 0] = HEAP8[30011] | 0; //@line 35544
 HEAP8[$5 + 3 >> 0] = HEAP8[30012] | 0; //@line 35544
 HEAP8[$5 + 4 >> 0] = HEAP8[30013] | 0; //@line 35544
 HEAP8[$5 + 5 >> 0] = HEAP8[30014] | 0; //@line 35544
 $9 = __ZNSt3__26__clocEv() | 0; //@line 35545
 HEAP32[$$byval_copy >> 2] = $4; //@line 35546
 $10 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6, 20, $9, $5, $$byval_copy) | 0; //@line 35547
 $11 = $6 + $10 | 0; //@line 35548
 $12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $11, $2) | 0; //@line 35549
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 35550
 __THREW__ = 0; //@line 35551
 $13 = invoke_iii(63, $$byval_copy | 0, 35512) | 0; //@line 35552
 $14 = __THREW__; //@line 35553
 __THREW__ = 0; //@line 35553
 if ($14 & 1) {
  $27 = ___cxa_find_matching_catch_2() | 0; //@line 35556
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 35558
  ___resumeException($27 | 0); //@line 35559
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 35562
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 32 >> 2] & 31]($13, $6, $11, $7) | 0; //@line 35566
  $19 = $7 + $10 | 0; //@line 35567
  $$0 = ($12 | 0) == ($11 | 0) ? $19 : $7 + ($12 - $6) | 0; //@line 35573
  HEAP32[$8 >> 2] = HEAP32[$1 >> 2]; //@line 35575
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 35576
  $26 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, $$0, $19, $2, $3) | 0; //@line 35577
  STACKTOP = sp; //@line 35578
  return $26 | 0; //@line 35578
 }
 return 0; //@line 35580
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 36858
 STACKTOP = STACKTOP + 224 | 0; //@line 36859
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 36859
 $$byval_copy = sp + 8 | 0; //@line 36860
 $6 = sp; //@line 36861
 $7 = sp + 200 | 0; //@line 36862
 $8 = sp + 28 | 0; //@line 36863
 $9 = sp + 24 | 0; //@line 36864
 $10 = sp + 16 | 0; //@line 36865
 $11 = sp + 20 | 0; //@line 36866
 $12 = $6; //@line 36867
 HEAP32[$12 >> 2] = 37; //@line 36869
 HEAP32[$12 + 4 >> 2] = 0; //@line 36872
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 30017, 0, HEAP32[$2 + 4 >> 2] | 0); //@line 36876
 $19 = __ZNSt3__26__clocEv() | 0; //@line 36877
 $20 = $$byval_copy; //@line 36878
 HEAP32[$20 >> 2] = $4; //@line 36880
 HEAP32[$20 + 4 >> 2] = $5; //@line 36883
 $25 = $7 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7, 23, $19, $6, $$byval_copy) | 0) | 0; //@line 36885
 $26 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7, $25, $2) | 0; //@line 36886
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 36887
 __THREW__ = 0; //@line 36888
 invoke_viiiiiii(4, $7 | 0, $26 | 0, $25 | 0, $8 | 0, $9 | 0, $10 | 0, $$byval_copy | 0); //@line 36889
 $27 = __THREW__; //@line 36890
 __THREW__ = 0; //@line 36890
 if ($27 & 1) {
  $33 = ___cxa_find_matching_catch_2() | 0; //@line 36893
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 36895
  ___resumeException($33 | 0); //@line 36896
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 36899
  HEAP32[$11 >> 2] = HEAP32[$1 >> 2]; //@line 36901
  $30 = HEAP32[$9 >> 2] | 0; //@line 36902
  $31 = HEAP32[$10 >> 2] | 0; //@line 36903
  HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2]; //@line 36904
  $32 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $8, $30, $31, $2, $3) | 0; //@line 36905
  STACKTOP = sp; //@line 36906
  return $32 | 0; //@line 36906
 }
 return 0; //@line 36908
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 36747
 STACKTOP = STACKTOP + 224 | 0; //@line 36748
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 36748
 $$byval_copy = sp + 8 | 0; //@line 36749
 $6 = sp; //@line 36750
 $7 = sp + 200 | 0; //@line 36751
 $8 = sp + 28 | 0; //@line 36752
 $9 = sp + 24 | 0; //@line 36753
 $10 = sp + 16 | 0; //@line 36754
 $11 = sp + 20 | 0; //@line 36755
 $12 = $6; //@line 36756
 HEAP32[$12 >> 2] = 37; //@line 36758
 HEAP32[$12 + 4 >> 2] = 0; //@line 36761
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 30017, 1, HEAP32[$2 + 4 >> 2] | 0); //@line 36765
 $19 = __ZNSt3__26__clocEv() | 0; //@line 36766
 $20 = $$byval_copy; //@line 36767
 HEAP32[$20 >> 2] = $4; //@line 36769
 HEAP32[$20 + 4 >> 2] = $5; //@line 36772
 $25 = $7 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7, 23, $19, $6, $$byval_copy) | 0) | 0; //@line 36774
 $26 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7, $25, $2) | 0; //@line 36775
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 36776
 __THREW__ = 0; //@line 36777
 invoke_viiiiiii(4, $7 | 0, $26 | 0, $25 | 0, $8 | 0, $9 | 0, $10 | 0, $$byval_copy | 0); //@line 36778
 $27 = __THREW__; //@line 36779
 __THREW__ = 0; //@line 36779
 if ($27 & 1) {
  $33 = ___cxa_find_matching_catch_2() | 0; //@line 36782
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 36784
  ___resumeException($33 | 0); //@line 36785
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 36788
  HEAP32[$11 >> 2] = HEAP32[$1 >> 2]; //@line 36790
  $30 = HEAP32[$9 >> 2] | 0; //@line 36791
  $31 = HEAP32[$10 >> 2] | 0; //@line 36792
  HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2]; //@line 36793
  $32 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $8, $30, $31, $2, $3) | 0; //@line 36794
  STACKTOP = sp; //@line 36795
  return $32 | 0; //@line 36795
 }
 return 0; //@line 36797
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 35031
 STACKTOP = STACKTOP + 96 | 0; //@line 35032
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 35032
 $$byval_copy = sp + 8 | 0; //@line 35033
 $6 = sp; //@line 35034
 $7 = sp + 71 | 0; //@line 35035
 $8 = sp + 28 | 0; //@line 35036
 $9 = sp + 24 | 0; //@line 35037
 $10 = sp + 16 | 0; //@line 35038
 $11 = sp + 20 | 0; //@line 35039
 $12 = $6; //@line 35040
 HEAP32[$12 >> 2] = 37; //@line 35042
 HEAP32[$12 + 4 >> 2] = 0; //@line 35045
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 30017, 0, HEAP32[$2 + 4 >> 2] | 0); //@line 35049
 $19 = __ZNSt3__26__clocEv() | 0; //@line 35050
 $20 = $$byval_copy; //@line 35051
 HEAP32[$20 >> 2] = $4; //@line 35053
 HEAP32[$20 + 4 >> 2] = $5; //@line 35056
 $25 = $7 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7, 23, $19, $6, $$byval_copy) | 0) | 0; //@line 35058
 $26 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7, $25, $2) | 0; //@line 35059
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 35060
 __THREW__ = 0; //@line 35061
 invoke_viiiiiii(2, $7 | 0, $26 | 0, $25 | 0, $8 | 0, $9 | 0, $10 | 0, $$byval_copy | 0); //@line 35062
 $27 = __THREW__; //@line 35063
 __THREW__ = 0; //@line 35063
 if ($27 & 1) {
  $33 = ___cxa_find_matching_catch_2() | 0; //@line 35066
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 35068
  ___resumeException($33 | 0); //@line 35069
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 35072
  HEAP32[$11 >> 2] = HEAP32[$1 >> 2]; //@line 35074
  $30 = HEAP32[$9 >> 2] | 0; //@line 35075
  $31 = HEAP32[$10 >> 2] | 0; //@line 35076
  HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2]; //@line 35077
  $32 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $8, $30, $31, $2, $3) | 0; //@line 35078
  STACKTOP = sp; //@line 35079
  return $32 | 0; //@line 35079
 }
 return 0; //@line 35081
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 34920
 STACKTOP = STACKTOP + 96 | 0; //@line 34921
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 34921
 $$byval_copy = sp + 8 | 0; //@line 34922
 $6 = sp; //@line 34923
 $7 = sp + 71 | 0; //@line 34924
 $8 = sp + 28 | 0; //@line 34925
 $9 = sp + 24 | 0; //@line 34926
 $10 = sp + 16 | 0; //@line 34927
 $11 = sp + 20 | 0; //@line 34928
 $12 = $6; //@line 34929
 HEAP32[$12 >> 2] = 37; //@line 34931
 HEAP32[$12 + 4 >> 2] = 0; //@line 34934
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 30017, 1, HEAP32[$2 + 4 >> 2] | 0); //@line 34938
 $19 = __ZNSt3__26__clocEv() | 0; //@line 34939
 $20 = $$byval_copy; //@line 34940
 HEAP32[$20 >> 2] = $4; //@line 34942
 HEAP32[$20 + 4 >> 2] = $5; //@line 34945
 $25 = $7 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7, 23, $19, $6, $$byval_copy) | 0) | 0; //@line 34947
 $26 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7, $25, $2) | 0; //@line 34948
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2); //@line 34949
 __THREW__ = 0; //@line 34950
 invoke_viiiiiii(2, $7 | 0, $26 | 0, $25 | 0, $8 | 0, $9 | 0, $10 | 0, $$byval_copy | 0); //@line 34951
 $27 = __THREW__; //@line 34952
 __THREW__ = 0; //@line 34952
 if ($27 & 1) {
  $33 = ___cxa_find_matching_catch_2() | 0; //@line 34955
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 34957
  ___resumeException($33 | 0); //@line 34958
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 34961
  HEAP32[$11 >> 2] = HEAP32[$1 >> 2]; //@line 34963
  $30 = HEAP32[$9 >> 2] | 0; //@line 34964
  $31 = HEAP32[$10 >> 2] | 0; //@line 34965
  HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2]; //@line 34966
  $32 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $8, $30, $31, $2, $3) | 0; //@line 34967
  STACKTOP = sp; //@line 34968
  return $32 | 0; //@line 34968
 }
 return 0; //@line 34970
}
function _mbtowc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $25 = 0, $3 = 0, $33 = 0, $34 = 0, $42 = 0, $47 = 0, $50 = 0, $55 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 16014
 STACKTOP = STACKTOP + 16 | 0; //@line 16015
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16015
 $3 = sp; //@line 16016
 L1 : do {
  if (!$1) {
   $$0 = 0; //@line 16020
  } else {
   do {
    if ($2 | 0) {
     $$ = ($0 | 0) == 0 ? $3 : $0; //@line 16026
     $7 = HEAP8[$1 >> 0] | 0; //@line 16027
     if ($7 << 24 >> 24 > -1) {
      HEAP32[$$ >> 2] = $7 & 255; //@line 16031
      $$0 = $7 << 24 >> 24 != 0 & 1; //@line 16034
      break L1;
     }
     $16 = (HEAP32[HEAP32[(___pthread_self_627() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 16041
     $17 = HEAP8[$1 >> 0] | 0; //@line 16042
     if ($16) {
      HEAP32[$$ >> 2] = $17 << 24 >> 24 & 57343; //@line 16046
      $$0 = 1; //@line 16047
      break L1;
     }
     $21 = ($17 & 255) + -194 | 0; //@line 16051
     if ($21 >>> 0 <= 50) {
      $23 = $1 + 1 | 0; //@line 16054
      $25 = HEAP32[5324 + ($21 << 2) >> 2] | 0; //@line 16056
      if ($2 >>> 0 < 4) {
       if ($25 & -2147483648 >>> (($2 * 6 | 0) + -6 | 0) | 0) {
        break;
       }
      }
      $33 = HEAPU8[$23 >> 0] | 0; //@line 16069
      $34 = $33 >>> 3; //@line 16070
      if (($34 + -16 | $34 + ($25 >> 26)) >>> 0 <= 7) {
       $42 = $33 + -128 | $25 << 6; //@line 16079
       if (($42 | 0) >= 0) {
        HEAP32[$$ >> 2] = $42; //@line 16082
        $$0 = 2; //@line 16083
        break L1;
       }
       $47 = (HEAPU8[$1 + 2 >> 0] | 0) + -128 | 0; //@line 16089
       if ($47 >>> 0 <= 63) {
        $50 = $47 | $42 << 6; //@line 16093
        if (($50 | 0) >= 0) {
         HEAP32[$$ >> 2] = $50; //@line 16096
         $$0 = 3; //@line 16097
         break L1;
        }
        $55 = (HEAPU8[$1 + 3 >> 0] | 0) + -128 | 0; //@line 16103
        if ($55 >>> 0 <= 63) {
         HEAP32[$$ >> 2] = $55 | $50 << 6; //@line 16108
         $$0 = 4; //@line 16109
         break L1;
        }
       }
      }
     }
    }
   } while (0);
   HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 16118
   $$0 = -1; //@line 16119
  }
 } while (0);
 STACKTOP = sp; //@line 16122
 return $$0 | 0; //@line 16122
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 10075
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 10078
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 10081
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 10084
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 10090
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 10099
     $24 = $13 >>> 2; //@line 10100
     $$090 = 0; //@line 10101
     $$094 = $7; //@line 10101
     while (1) {
      $25 = $$094 >>> 1; //@line 10103
      $26 = $$090 + $25 | 0; //@line 10104
      $27 = $26 << 1; //@line 10105
      $28 = $27 + $23 | 0; //@line 10106
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 10109
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 10113
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 10119
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 10127
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 10131
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 10137
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 10142
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 10145
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 10145
      }
     }
     $46 = $27 + $24 | 0; //@line 10148
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 10151
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 10155
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 10167
     } else {
      $$4 = 0; //@line 10169
     }
    } else {
     $$4 = 0; //@line 10172
    }
   } else {
    $$4 = 0; //@line 10175
   }
  } else {
   $$4 = 0; //@line 10178
  }
 } while (0);
 return $$4 | 0; //@line 10181
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $37 = 0, $43 = 0, $5 = 0, $7 = 0, $8 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 255]($0) | 0; //@line 21379
 $5 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37304) | 0; //@line 21380
 HEAP32[$0 + 68 >> 2] = $5; //@line 21382
 $7 = $0 + 98 | 0; //@line 21383
 $8 = HEAP8[$7 >> 0] | 0; //@line 21384
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 255]($5) | 0; //@line 21388
 HEAP8[$7 >> 0] = $12 & 1; //@line 21390
 if (($8 & 255 | 0) == ($12 & 1 | 0)) {
  return;
 }
 $17 = $0 + 8 | 0; //@line 21397
 $18 = $0 + 96 | 0; //@line 21398
 HEAP32[$17 >> 2] = 0; //@line 21399
 HEAP32[$17 + 4 >> 2] = 0; //@line 21399
 HEAP32[$17 + 8 >> 2] = 0; //@line 21399
 HEAP32[$17 + 12 >> 2] = 0; //@line 21399
 HEAP32[$17 + 16 >> 2] = 0; //@line 21399
 HEAP32[$17 + 20 >> 2] = 0; //@line 21399
 $20 = (HEAP8[$18 >> 0] | 0) != 0; //@line 21401
 if ($12) {
  $21 = $0 + 32 | 0; //@line 21403
  if ($20) {
   $22 = HEAP32[$21 >> 2] | 0; //@line 21405
   if ($22 | 0) {
    __ZdaPv($22); //@line 21408
   }
  }
  $24 = $0 + 97 | 0; //@line 21411
  HEAP8[$18 >> 0] = HEAP8[$24 >> 0] | 0; //@line 21413
  $26 = $0 + 60 | 0; //@line 21414
  HEAP32[$0 + 52 >> 2] = HEAP32[$26 >> 2]; //@line 21417
  $29 = $0 + 56 | 0; //@line 21418
  HEAP32[$21 >> 2] = HEAP32[$29 >> 2]; //@line 21420
  HEAP32[$26 >> 2] = 0; //@line 21421
  HEAP32[$29 >> 2] = 0; //@line 21422
  HEAP8[$24 >> 0] = 0; //@line 21423
  return;
 }
 if (!$20) {
  $31 = $0 + 32 | 0; //@line 21427
  $32 = HEAP32[$31 >> 2] | 0; //@line 21428
  if (($32 | 0) != ($0 + 44 | 0)) {
   $37 = HEAP32[$0 + 52 >> 2] | 0; //@line 21434
   HEAP32[$0 + 60 >> 2] = $37; //@line 21436
   HEAP32[$0 + 56 >> 2] = $32; //@line 21438
   HEAP8[$0 + 97 >> 0] = 0; //@line 21440
   HEAP32[$31 >> 2] = __Znaj($37) | 0; //@line 21442
   HEAP8[$18 >> 0] = 1; //@line 21443
   return;
  }
 }
 $43 = HEAP32[$0 + 52 >> 2] | 0; //@line 21448
 HEAP32[$0 + 60 >> 2] = $43; //@line 21450
 HEAP32[$0 + 56 >> 2] = __Znaj($43) | 0; //@line 21453
 HEAP8[$0 + 97 >> 0] = 1; //@line 21455
 return;
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 63758
 STACKTOP = STACKTOP + 64 | 0; //@line 63759
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 63759
 $4 = sp; //@line 63760
 $5 = HEAP32[$0 >> 2] | 0; //@line 63761
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 63764
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 63766
 HEAP32[$4 >> 2] = $2; //@line 63767
 HEAP32[$4 + 4 >> 2] = $0; //@line 63769
 HEAP32[$4 + 8 >> 2] = $1; //@line 63771
 HEAP32[$4 + 12 >> 2] = $3; //@line 63773
 $14 = $4 + 16 | 0; //@line 63774
 $15 = $4 + 20 | 0; //@line 63775
 $16 = $4 + 24 | 0; //@line 63776
 $17 = $4 + 28 | 0; //@line 63777
 $18 = $4 + 32 | 0; //@line 63778
 $19 = $4 + 40 | 0; //@line 63779
 dest = $14; //@line 63780
 stop = dest + 36 | 0; //@line 63780
 do {
  HEAP32[dest >> 2] = 0; //@line 63780
  dest = dest + 4 | 0; //@line 63780
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 63780
 HEAP8[$14 + 38 >> 0] = 0; //@line 63780
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 63785
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 15]($10, $4, $8, $8, 1, 0); //@line 63789
   $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 63793
  } else {
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 7]($10, $4, $8, 1, 0); //@line 63799
   switch (HEAP32[$4 + 36 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 63813
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 63821
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 63837
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 63842
  }
 } while (0);
 STACKTOP = sp; //@line 63845
 return $$0 | 0; //@line 63845
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $31 = 0, $37 = 0, $38 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $54 = 0, $9 = 0, $storemerge = 0;
 $2 = $0 + 32 | 0; //@line 1222
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($2, $1) | 0; //@line 1223
 $3 = $0 + 44 | 0; //@line 1224
 HEAP32[$3 >> 2] = 0; //@line 1225
 $4 = $0 + 48 | 0; //@line 1226
 $5 = HEAP32[$4 >> 2] | 0; //@line 1227
 if ($5 & 8 | 0) {
  $9 = HEAP8[$2 + 11 >> 0] | 0; //@line 1232
  if ($9 << 24 >> 24 < 0) {
   $11 = HEAP32[$2 >> 2] | 0; //@line 1235
   $19 = $11; //@line 1239
   $21 = $11; //@line 1239
   $storemerge = $11 + (HEAP32[$0 + 36 >> 2] | 0) | 0; //@line 1239
  } else {
   $19 = $2; //@line 1243
   $21 = $2; //@line 1243
   $storemerge = $2 + ($9 & 255) | 0; //@line 1243
  }
  HEAP32[$3 >> 2] = $storemerge; //@line 1245
  HEAP32[$0 + 8 >> 2] = $19; //@line 1248
  HEAP32[$0 + 12 >> 2] = $21; //@line 1250
  HEAP32[$0 + 16 >> 2] = $storemerge; //@line 1252
 }
 if (!($5 & 16)) {
  return;
 }
 $25 = $2 + 11 | 0; //@line 1259
 $26 = HEAP8[$25 >> 0] | 0; //@line 1260
 if ($26 << 24 >> 24 < 0) {
  $31 = HEAP32[$0 + 36 >> 2] | 0; //@line 1264
  HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + $31; //@line 1267
  $37 = (HEAP32[$0 + 40 >> 2] & 2147483647) + -1 | 0; //@line 1272
  $54 = $31; //@line 1272
 } else {
  $28 = $26 & 255; //@line 1274
  HEAP32[$3 >> 2] = $2 + $28; //@line 1276
  $37 = 10; //@line 1277
  $54 = $28; //@line 1277
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($2, $37, 0); //@line 1279
 $38 = HEAP8[$25 >> 0] | 0; //@line 1280
 if ($38 << 24 >> 24 < 0) {
  $45 = HEAP32[$2 >> 2] | 0; //@line 1286
  $46 = HEAP32[$0 + 36 >> 2] | 0; //@line 1286
 } else {
  $45 = $2; //@line 1289
  $46 = $38 & 255; //@line 1289
 }
 $47 = $0 + 24 | 0; //@line 1292
 HEAP32[$47 >> 2] = $45; //@line 1293
 HEAP32[$0 + 20 >> 2] = $45; //@line 1295
 HEAP32[$0 + 28 >> 2] = $45 + $46; //@line 1297
 if (!(HEAP32[$4 >> 2] & 3)) {
  return;
 }
 HEAP32[$47 >> 2] = $45 + $54; //@line 1305
 return;
}
function __ZN6Runner3runENSt3__24pairINS0_6vectorI13CharmFunctionNS0_9allocatorIS3_EEEEP16FunctionAnalyzerEENS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$02 = 0, $11 = 0, $17 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 9628
 STACKTOP = STACKTOP + 32 | 0; //@line 9629
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9629
 $3 = sp + 24 | 0; //@line 9630
 $4 = sp + 12 | 0; //@line 9631
 $5 = sp; //@line 9632
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 9636
 HEAP32[$3 >> 2] = 0; //@line 9637
 __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEEC2ERKS4_($4, $1); //@line 9638
 __THREW__ = 0; //@line 9639
 invoke_vii(115, $5 | 0, $2 | 0); //@line 9640
 $9 = __THREW__; //@line 9641
 __THREW__ = 0; //@line 9641
 if ($9 & 1) {
  $17 = ___cxa_find_matching_catch_2() | 0; //@line 9644
  $$0 = tempRet0; //@line 9646
  $$02 = $17; //@line 9646
  __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($4); //@line 9647
  ___resumeException($$02 | 0); //@line 9648
 }
 __THREW__ = 0; //@line 9651
 invoke_viiii(14, $0 | 0, $4 | 0, $3 | 0, $5 | 0); //@line 9652
 $11 = __THREW__; //@line 9653
 __THREW__ = 0; //@line 9653
 if ($11 & 1) {
  $19 = ___cxa_find_matching_catch_2() | 0; //@line 9656
  $20 = tempRet0; //@line 9657
  if ((HEAP8[$5 + 11 >> 0] | 0) >= 0) {
   $$0 = $20; //@line 9662
   $$02 = $19; //@line 9662
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($4); //@line 9663
   ___resumeException($$02 | 0); //@line 9664
  }
  __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 9668
  $$0 = $20; //@line 9669
  $$02 = $19; //@line 9669
  __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($4); //@line 9670
  ___resumeException($$02 | 0); //@line 9671
 } else {
  if ((HEAP8[$5 + 11 >> 0] | 0) >= 0) {
   __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($4); //@line 9678
   STACKTOP = sp; //@line 9679
   return;
  }
  __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 9682
  __ZNSt3__213__vector_baseI13CharmFunctionNS_9allocatorIS1_EEED2Ev($4); //@line 9683
  STACKTOP = sp; //@line 9684
  return;
 }
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $26 = 0, $33 = 0, $34 = 0, $5 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 56556
 STACKTOP = STACKTOP + 16 | 0; //@line 56557
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 56557
 $5 = sp; //@line 56558
 HEAP32[$4 >> 2] = $2; //@line 56559
 $8 = ___uselocale(HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 56562
 __THREW__ = 0; //@line 56563
 $9 = invoke_iiii(47, $5 | 0, 0, $1 | 0) | 0; //@line 56564
 $10 = __THREW__; //@line 56565
 __THREW__ = 0; //@line 56565
 if ($10 & 1) {
  $17 = ___cxa_find_matching_catch_2() | 0; //@line 56568
  if ($8 | 0) {
   __THREW__ = 0; //@line 56572
   invoke_ii(147, $8 | 0) | 0; //@line 56573
   $20 = __THREW__; //@line 56574
   __THREW__ = 0; //@line 56574
   if ($20 & 1) {
    $22 = ___cxa_find_matching_catch_3(0) | 0; //@line 56577
    ___clang_call_terminate($22); //@line 56579
   }
  }
  ___resumeException($17 | 0); //@line 56583
 }
 if ($8 | 0) {
  __THREW__ = 0; //@line 56588
  invoke_ii(147, $8 | 0) | 0; //@line 56589
  $13 = __THREW__; //@line 56590
  __THREW__ = 0; //@line 56590
  if ($13 & 1) {
   $15 = ___cxa_find_matching_catch_3(0) | 0; //@line 56593
   ___clang_call_terminate($15); //@line 56595
  }
 }
 L12 : do {
  if (($9 + 1 | 0) >>> 0 < 2) {
   $$019 = 2; //@line 56603
  } else {
   $26 = $9 + -1 | 0; //@line 56605
   if ($26 >>> 0 > ($3 - (HEAP32[$4 >> 2] | 0) | 0) >>> 0) {
    $$019 = 1; //@line 56611
   } else {
    $$0 = $5; //@line 56613
    $$018 = $26; //@line 56613
    while (1) {
     if (!$$018) {
      $$019 = 0; //@line 56617
      break L12;
     }
     $33 = HEAP8[$$0 >> 0] | 0; //@line 56621
     $34 = HEAP32[$4 >> 2] | 0; //@line 56622
     HEAP32[$4 >> 2] = $34 + 1; //@line 56624
     HEAP8[$34 >> 0] = $33; //@line 56625
     $$0 = $$0 + 1 | 0; //@line 56627
     $$018 = $$018 + -1 | 0; //@line 56627
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 56632
 return $$019 | 0; //@line 56632
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $or$cond32 = 0, label = 0;
 $4 = $0 + 11 | 0; //@line 24515
 $5 = HEAP8[$4 >> 0] | 0; //@line 24516
 $7 = $0 + 4 | 0; //@line 24518
 $8 = HEAP32[$7 >> 2] | 0; //@line 24519
 do {
  if (($5 << 24 >> 24 < 0 ? $8 : $5 & 255) | 0) {
   if (($1 | 0) == ($2 | 0)) {
    $18 = $5; //@line 24527
    $23 = $8; //@line 24527
   } else {
    $$0$i$i = $2; //@line 24529
    $$07$i$i = $1; //@line 24529
    while (1) {
     $13 = $$0$i$i + -4 | 0; //@line 24531
     if ($$07$i$i >>> 0 >= $13 >>> 0) {
      break;
     }
     $15 = HEAP32[$$07$i$i >> 2] | 0; //@line 24536
     HEAP32[$$07$i$i >> 2] = HEAP32[$13 >> 2]; //@line 24538
     HEAP32[$13 >> 2] = $15; //@line 24539
     $$0$i$i = $13; //@line 24541
     $$07$i$i = $$07$i$i + 4 | 0; //@line 24541
    }
    $18 = HEAP8[$4 >> 0] | 0; //@line 24545
    $23 = HEAP32[$7 >> 2] | 0; //@line 24545
   }
   $19 = $18 << 24 >> 24 < 0; //@line 24547
   $22 = $19 ? HEAP32[$0 >> 2] | 0 : $0; //@line 24550
   $26 = $2 + -4 | 0; //@line 24553
   $27 = $22 + ($19 ? $23 : $18 & 255) | 0; //@line 24554
   $$029 = $1; //@line 24555
   $$030 = $22; //@line 24555
   while (1) {
    $29 = HEAP8[$$030 >> 0] | 0; //@line 24558
    $or$cond32 = $29 << 24 >> 24 > 0 & $29 << 24 >> 24 != 127; //@line 24561
    if ($$029 >>> 0 >= $26 >>> 0) {
     break;
    }
    if ($or$cond32) {
     if ((HEAP32[$$029 >> 2] | 0) != ($29 << 24 >> 24 | 0)) {
      label = 10; //@line 24570
      break;
     }
    }
    $$029 = $$029 + 4 | 0; //@line 24580
    $$030 = ($27 - $$030 | 0) > 1 ? $$030 + 1 | 0 : $$030; //@line 24580
   }
   if ((label | 0) == 10) {
    HEAP32[$3 >> 2] = 4; //@line 24583
    break;
   }
   if ($or$cond32) {
    if (((HEAP32[$26 >> 2] | 0) + -1 | 0) >>> 0 >= $29 << 24 >> 24 >>> 0) {
     HEAP32[$3 >> 2] = 4; //@line 24592
    }
   }
  }
 } while (0);
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16264
 STACKTOP = STACKTOP + 80 | 0; //@line 16265
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 16265
 $$byval_copy = sp + 73 | 0; //@line 16266
 $2 = sp + 72 | 0; //@line 16267
 $3 = sp; //@line 16268
 __ZN5Stack3popEv($3, __ZN6Runner15getCurrentStackEv(HEAP32[$1 >> 2] | 0) | 0); //@line 16271
 $5 = $3 + 52 | 0; //@line 16272
 if ((HEAP8[$5 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 16278
 }
 $10 = $3 + 40 | 0; //@line 16280
 $11 = HEAP32[$10 >> 2] | 0; //@line 16281
 if ($11 | 0) {
  $13 = $3 + 44 | 0; //@line 16284
  $14 = HEAP32[$13 >> 2] | 0; //@line 16285
  do {
   if (($14 | 0) == ($11 | 0)) {
    $25 = $11; //@line 16289
   } else {
    $16 = $3 + 48 | 0; //@line 16291
    $18 = $14; //@line 16292
    while (1) {
     $17 = $18 + -72 | 0; //@line 16294
     HEAP32[$13 >> 2] = $17; //@line 16295
     __THREW__ = 0; //@line 16296
     HEAP8[$$byval_copy >> 0] = HEAP8[$2 >> 0] | 0; //@line 16297
     invoke_viii(13, $$byval_copy | 0, $16 | 0, $17 | 0); //@line 16298
     $19 = __THREW__; //@line 16299
     __THREW__ = 0; //@line 16299
     if ($19 & 1) {
      label = 8; //@line 16302
      break;
     }
     $18 = HEAP32[$13 >> 2] | 0; //@line 16305
     if (($18 | 0) == ($11 | 0)) {
      label = 9; //@line 16308
      break;
     }
    }
    if ((label | 0) == 8) {
     $23 = ___cxa_find_matching_catch_3(0) | 0; //@line 16315
     ___clang_call_terminate($23); //@line 16317
    } else if ((label | 0) == 9) {
     $25 = HEAP32[$10 >> 2] | 0; //@line 16322
     break;
    }
   }
  } while (0);
  __ZdlPv($25); //@line 16327
 }
 $26 = $3 + 4 | 0; //@line 16329
 if ((HEAP8[$26 + 11 >> 0] | 0) >= 0) {
  STACKTOP = sp; //@line 16334
  return;
 }
 __ZdlPv(HEAP32[$26 >> 2] | 0); //@line 16337
 STACKTOP = sp; //@line 16338
 return;
}
function __ZNSt3__2L11init_wweeksEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[33336] | 0)) {
  if (___cxa_guard_acquire(33336) | 0) {
   $4 = 37028; //@line 42176
   do {
    HEAP32[$4 >> 2] = 0; //@line 42178
    HEAP32[$4 + 4 >> 2] = 0; //@line 42178
    HEAP32[$4 + 8 >> 2] = 0; //@line 42178
    $$0$i$i = 0; //@line 42179
    while (1) {
     if (($$0$i$i | 0) == 3) {
      break;
     }
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0; //@line 42186
     $$0$i$i = $$0$i$i + 1 | 0; //@line 42188
    }
    $4 = $4 + 12 | 0; //@line 42190
   } while (($4 | 0) != 37196);
  }
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37028, 11388) | 0; //@line 42200
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37040, 11416) | 0; //@line 42201
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37052, 11444) | 0; //@line 42202
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37064, 11476) | 0; //@line 42203
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37076, 11516) | 0; //@line 42204
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37088, 11552) | 0; //@line 42205
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37100, 11580) | 0; //@line 42206
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37112, 11616) | 0; //@line 42207
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37124, 11632) | 0; //@line 42208
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37136, 11648) | 0; //@line 42209
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37148, 11664) | 0; //@line 42210
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37160, 11680) | 0; //@line 42211
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37172, 11696) | 0; //@line 42212
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(37184, 11712) | 0; //@line 42213
 return;
}
function __ZNSt3__2L10init_weeksEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[33256] | 0)) {
  if (___cxa_guard_acquire(33256) | 0) {
   $4 = 36216; //@line 39224
   do {
    HEAP32[$4 >> 2] = 0; //@line 39226
    HEAP32[$4 + 4 >> 2] = 0; //@line 39226
    HEAP32[$4 + 8 >> 2] = 0; //@line 39226
    $$0$i$i = 0; //@line 39227
    while (1) {
     if (($$0$i$i | 0) == 3) {
      break;
     }
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0; //@line 39234
     $$0$i$i = $$0$i$i + 1 | 0; //@line 39236
    }
    $4 = $4 + 12 | 0; //@line 39238
   } while (($4 | 0) != 36384);
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36216, 30420) | 0; //@line 39248
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36228, 30427) | 0; //@line 39249
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36240, 30434) | 0; //@line 39250
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36252, 30442) | 0; //@line 39251
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36264, 30452) | 0; //@line 39252
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36276, 30461) | 0; //@line 39253
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36288, 30468) | 0; //@line 39254
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36300, 30477) | 0; //@line 39255
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36312, 30481) | 0; //@line 39256
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36324, 30485) | 0; //@line 39257
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36336, 30489) | 0; //@line 39258
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36348, 30493) | 0; //@line 39259
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36360, 30497) | 0; //@line 39260
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(36372, 30501) | 0; //@line 39261
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 59979
 STACKTOP = STACKTOP + 32 | 0; //@line 59980
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 59980
 $2 = sp; //@line 59981
 $3 = $0 + 8 | 0; //@line 59982
 $5 = $0 + 4 | 0; //@line 59984
 $6 = HEAP32[$5 >> 2] | 0; //@line 59985
 do {
  if ((HEAP32[$3 >> 2] | 0) - $6 >> 2 >>> 0 < $1 >>> 0) {
   $13 = ($6 - (HEAP32[$0 >> 2] | 0) >> 2) + $1 | 0; //@line 59994
   $14 = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0) | 0; //@line 59995
   if ($14 >>> 0 < $13 >>> 0) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 59998
   }
   $18 = HEAP32[$0 >> 2] | 0; //@line 60003
   $19 = (HEAP32[$3 >> 2] | 0) - $18 | 0; //@line 60004
   $23 = $19 >> 1; //@line 60008
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($2, $19 >> 2 >>> 0 < $14 >>> 1 >>> 0 ? $23 >>> 0 < $13 >>> 0 ? $13 : $23 : $14, (HEAP32[$5 >> 2] | 0) - $18 >> 2, $0 + 16 | 0); //@line 60015
   __THREW__ = 0; //@line 60016
   invoke_vii(182, $2 | 0, $1 | 0); //@line 60017
   $28 = __THREW__; //@line 60018
   __THREW__ = 0; //@line 60018
   if (!($28 & 1)) {
    __THREW__ = 0; //@line 60021
    invoke_vii(183, $0 | 0, $2 | 0); //@line 60022
    $30 = __THREW__; //@line 60023
    __THREW__ = 0; //@line 60023
    if (!($30 & 1)) {
     __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($2); //@line 60026
     break;
    }
   }
   $32 = ___cxa_find_matching_catch_2() | 0; //@line 60030
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($2); //@line 60032
   ___resumeException($32 | 0); //@line 60033
  } else {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0, $1); //@line 60036
  }
 } while (0);
 STACKTOP = sp; //@line 60039
 return;
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 30501
 STACKTOP = STACKTOP + 16 | 0; //@line 30502
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 30502
 $5 = sp; //@line 30503
 __ZNKSt3__28ios_base6getlocEv($5, $1); //@line 30504
 __THREW__ = 0; //@line 30505
 $6 = invoke_iii(63, $5 | 0, 35544) | 0; //@line 30506
 $7 = __THREW__; //@line 30507
 __THREW__ = 0; //@line 30507
 if (!($7 & 1)) {
  __THREW__ = 0; //@line 30513
  invoke_iiiii(HEAP32[(HEAP32[$6 >> 2] | 0) + 48 >> 2] | 0, $6 | 0, 29766, 29798, $2 | 0) | 0; //@line 30514
  $12 = __THREW__; //@line 30515
  __THREW__ = 0; //@line 30515
  if (!($12 & 1)) {
   __THREW__ = 0; //@line 30518
   $14 = invoke_iii(63, $5 | 0, 35552) | 0; //@line 30519
   $15 = __THREW__; //@line 30520
   __THREW__ = 0; //@line 30520
   if (!($15 & 1)) {
    __THREW__ = 0; //@line 30526
    $20 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] | 0, $14 | 0) | 0; //@line 30527
    $21 = __THREW__; //@line 30528
    __THREW__ = 0; //@line 30528
    if (!($21 & 1)) {
     HEAP32[$3 >> 2] = $20; //@line 30531
     __THREW__ = 0; //@line 30535
     $26 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] | 0, $14 | 0) | 0; //@line 30536
     $27 = __THREW__; //@line 30537
     __THREW__ = 0; //@line 30537
     if (!($27 & 1)) {
      HEAP32[$4 >> 2] = $26; //@line 30540
      __THREW__ = 0; //@line 30544
      invoke_vii(HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0, $0 | 0, $14 | 0); //@line 30545
      $32 = __THREW__; //@line 30546
      __THREW__ = 0; //@line 30546
      if (!($32 & 1)) {
       __ZNSt3__26localeD2Ev($5); //@line 30549
       STACKTOP = sp; //@line 30550
       return;
      }
     }
    }
   }
  }
 }
 $34 = ___cxa_find_matching_catch_2() | 0; //@line 30557
 __ZNSt3__26localeD2Ev($5); //@line 30559
 ___resumeException($34 | 0); //@line 30560
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 24182
 STACKTOP = STACKTOP + 16 | 0; //@line 24183
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24183
 $5 = sp; //@line 24184
 __ZNKSt3__28ios_base6getlocEv($5, $1); //@line 24185
 __THREW__ = 0; //@line 24186
 $6 = invoke_iii(63, $5 | 0, 35512) | 0; //@line 24187
 $7 = __THREW__; //@line 24188
 __THREW__ = 0; //@line 24188
 if (!($7 & 1)) {
  __THREW__ = 0; //@line 24194
  invoke_iiiii(HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] | 0, $6 | 0, 29766, 29798, $2 | 0) | 0; //@line 24195
  $12 = __THREW__; //@line 24196
  __THREW__ = 0; //@line 24196
  if (!($12 & 1)) {
   __THREW__ = 0; //@line 24199
   $14 = invoke_iii(63, $5 | 0, 35528) | 0; //@line 24200
   $15 = __THREW__; //@line 24201
   __THREW__ = 0; //@line 24201
   if (!($15 & 1)) {
    __THREW__ = 0; //@line 24207
    $20 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] | 0, $14 | 0) | 0; //@line 24208
    $21 = __THREW__; //@line 24209
    __THREW__ = 0; //@line 24209
    if (!($21 & 1)) {
     HEAP8[$3 >> 0] = $20; //@line 24212
     __THREW__ = 0; //@line 24216
     $26 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] | 0, $14 | 0) | 0; //@line 24217
     $27 = __THREW__; //@line 24218
     __THREW__ = 0; //@line 24218
     if (!($27 & 1)) {
      HEAP8[$4 >> 0] = $26; //@line 24221
      __THREW__ = 0; //@line 24225
      invoke_vii(HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0, $0 | 0, $14 | 0); //@line 24226
      $32 = __THREW__; //@line 24227
      __THREW__ = 0; //@line 24227
      if (!($32 & 1)) {
       __ZNSt3__26localeD2Ev($5); //@line 24230
       STACKTOP = sp; //@line 24231
       return;
      }
     }
    }
   }
  }
 }
 $34 = ___cxa_find_matching_catch_2() | 0; //@line 24238
 __ZNSt3__26localeD2Ev($5); //@line 24240
 ___resumeException($34 | 0); //@line 24241
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$sink = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $21 = 0, $24 = 0, $26 = 0, $5 = 0, $6 = 0, label = 0;
 $5 = $3; //@line 56775
 $6 = $0 + 8 | 0; //@line 56776
 $$029 = 0; //@line 56777
 $$030 = 0; //@line 56777
 $$034 = $2; //@line 56777
 L1 : while (1) {
  if (($$034 | 0) == ($3 | 0) | $$029 >>> 0 >= $4 >>> 0) {
   label = 14; //@line 56783
   break;
  }
  $12 = ___uselocale(HEAP32[$6 >> 2] | 0) | 0; //@line 56789
  __THREW__ = 0; //@line 56790
  $13 = invoke_iiii(49, $$034 | 0, $5 - $$034 | 0, $1 | 0) | 0; //@line 56791
  $14 = __THREW__; //@line 56792
  __THREW__ = 0; //@line 56792
  if ($14 & 1) {
   label = 7; //@line 56795
   break;
  }
  if ($12 | 0) {
   __THREW__ = 0; //@line 56800
   invoke_ii(147, $12 | 0) | 0; //@line 56801
   $17 = __THREW__; //@line 56802
   __THREW__ = 0; //@line 56802
   if ($17 & 1) {
    label = 6; //@line 56805
    break;
   }
  }
  switch ($13 | 0) {
  case -2:
  case -1:
   {
    label = 14; //@line 56811
    break L1;
    break;
   }
  case 0:
   {
    $$sink = 1; //@line 56816
    break;
   }
  default:
   {
    $$sink = $13; //@line 56820
   }
  }
  $$029 = $$029 + 1 | 0; //@line 56826
  $$030 = $$sink + $$030 | 0; //@line 56826
  $$034 = $$034 + $$sink | 0; //@line 56826
 }
 if ((label | 0) == 6) {
  $19 = ___cxa_find_matching_catch_3(0) | 0; //@line 56829
  ___clang_call_terminate($19); //@line 56831
 } else if ((label | 0) == 7) {
  $21 = ___cxa_find_matching_catch_2() | 0; //@line 56835
  if ($12 | 0) {
   __THREW__ = 0; //@line 56839
   invoke_ii(147, $12 | 0) | 0; //@line 56840
   $24 = __THREW__; //@line 56841
   __THREW__ = 0; //@line 56841
   if ($24 & 1) {
    $26 = ___cxa_find_matching_catch_3(0) | 0; //@line 56844
    ___clang_call_terminate($26); //@line 56846
   }
  }
  ___resumeException($21 | 0); //@line 56850
 } else if ((label | 0) == 14) {
  return $$030 | 0; //@line 56854
 }
 return 0; //@line 56856
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $13 = 0, $14 = 0, $26 = 0, $30 = 0, $35 = 0, $39 = 0, $45 = 0, $47 = 0, $50 = 0, $52 = 0, $54 = 0, $57 = 0, $7 = 0, $9 = 0;
 $7 = HEAP32[$1 + 68 >> 2] | 0; //@line 21561
 if (!$7) {
  $9 = ___cxa_allocate_exception(4) | 0; //@line 21564
  __ZNSt8bad_castC2Ev($9); //@line 21565
  ___cxa_throw($9 | 0, 2904, 248); //@line 21566
 }
 $13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] & 255]($7) | 0; //@line 21572
 $14 = $1 + 64 | 0; //@line 21573
 if (!(HEAP32[$14 >> 2] | 0)) {
  $47 = 0; //@line 21577
  $50 = 0; //@line 21577
  $54 = -1; //@line 21577
  $57 = -1; //@line 21577
 } else {
  if ((($2 | 0) != 0 | ($3 | 0) != 0) & ($13 | 0) < 1) {
   $47 = 0; //@line 21585
   $50 = 0; //@line 21585
   $54 = -1; //@line 21585
   $57 = -1; //@line 21585
  } else {
   if ($4 >>> 0 < 3 & (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 255]($1) | 0) == 0) {
    $26 = HEAP32[$14 >> 2] | 0; //@line 21595
    $30 = ___muldi3($13 | 0, (($13 | 0) < 0) << 31 >> 31 | 0, $2 | 0, $3 | 0) | 0; //@line 21599
    if (!(___fseeko($26, ($13 | 0) > 0 ? $30 : 0, $4) | 0)) {
     $35 = ___ftello(HEAP32[$14 >> 2] | 0) | 0; //@line 21606
     $39 = $1 + 72 | 0; //@line 21610
     $47 = HEAP32[$39 >> 2] | 0; //@line 21616
     $50 = HEAP32[$39 + 4 >> 2] | 0; //@line 21616
     $54 = $35; //@line 21616
     $57 = (($35 | 0) < 0) << 31 >> 31; //@line 21616
    } else {
     $47 = 0; //@line 21618
     $50 = 0; //@line 21618
     $54 = -1; //@line 21618
     $57 = -1; //@line 21618
    }
   } else {
    $47 = 0; //@line 21621
    $50 = 0; //@line 21621
    $54 = -1; //@line 21621
    $57 = -1; //@line 21621
   }
  }
 }
 $45 = $0; //@line 21625
 HEAP32[$45 >> 2] = $47; //@line 21627
 HEAP32[$45 + 4 >> 2] = $50; //@line 21630
 $52 = $0 + 8 | 0; //@line 21632
 HEAP32[$52 >> 2] = $54; //@line 21634
 HEAP32[$52 + 4 >> 2] = $57; //@line 21637
 return;
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 44216
 STACKTOP = STACKTOP + 128 | 0; //@line 44217
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 44217
 $6 = sp + 16 | 0; //@line 44218
 $7 = sp + 12 | 0; //@line 44219
 $8 = sp; //@line 44220
 $9 = sp + 8 | 0; //@line 44221
 HEAP32[$7 >> 2] = $6 + 100; //@line 44223
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0, $6, $7, $3, $4, $5); //@line 44224
 $11 = $8; //@line 44225
 HEAP32[$11 >> 2] = 0; //@line 44227
 HEAP32[$11 + 4 >> 2] = 0; //@line 44230
 HEAP32[$9 >> 2] = $6; //@line 44231
 $16 = __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_($1, HEAP32[$2 >> 2] | 0) | 0; //@line 44233
 $18 = ___uselocale(HEAP32[$0 >> 2] | 0) | 0; //@line 44235
 __THREW__ = 0; //@line 44236
 $19 = invoke_iiiii(16, $1 | 0, $9 | 0, $16 | 0, $8 | 0) | 0; //@line 44237
 $20 = __THREW__; //@line 44238
 __THREW__ = 0; //@line 44238
 if ($20 & 1) {
  $27 = ___cxa_find_matching_catch_2() | 0; //@line 44241
  if ($18 | 0) {
   __THREW__ = 0; //@line 44245
   invoke_ii(147, $18 | 0) | 0; //@line 44246
   $30 = __THREW__; //@line 44247
   __THREW__ = 0; //@line 44247
   if ($30 & 1) {
    $32 = ___cxa_find_matching_catch_3(0) | 0; //@line 44250
    ___clang_call_terminate($32); //@line 44252
   }
  }
  ___resumeException($27 | 0); //@line 44256
 }
 if ($18 | 0) {
  __THREW__ = 0; //@line 44261
  invoke_ii(147, $18 | 0) | 0; //@line 44262
  $23 = __THREW__; //@line 44263
  __THREW__ = 0; //@line 44263
  if ($23 & 1) {
   $25 = ___cxa_find_matching_catch_3(0) | 0; //@line 44266
   ___clang_call_terminate($25); //@line 44268
  }
 }
 if (($19 | 0) == -1) {
  __ZNSt3__221__throw_runtime_errorEPKc(30868); //@line 44274
 } else {
  HEAP32[$2 >> 2] = $1 + ($19 << 2); //@line 44278
  STACKTOP = sp; //@line 44279
  return;
 }
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $39 = 0, $4 = 0, $5 = 0, $9 = 0;
 HEAP32[$0 >> 2] = 0; //@line 11034
 HEAP32[$0 + 4 >> 2] = 0; //@line 11034
 HEAP32[$0 + 8 >> 2] = 0; //@line 11034
 $4 = HEAP8[$1 + 11 >> 0] | 0; //@line 11036
 $5 = $4 << 24 >> 24 < 0; //@line 11037
 $9 = $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255; //@line 11041
 $11 = HEAP8[$2 + 11 >> 0] | 0; //@line 11043
 $12 = $11 << 24 >> 24 < 0; //@line 11044
 $16 = $12 ? HEAP32[$2 + 4 >> 2] | 0 : $11 & 255; //@line 11048
 $18 = $5 ? HEAP32[$1 >> 2] | 0 : $1; //@line 11050
 $19 = $16 + $9 | 0; //@line 11051
 do {
  if ($19 >>> 0 > 4294967279) {
   __THREW__ = 0; //@line 11055
   invoke_vi(258, $0 | 0); //@line 11056
   __THREW__ = 0; //@line 11057
  } else {
   if ($19 >>> 0 < 11) {
    HEAP8[$0 + 11 >> 0] = $9; //@line 11063
    $$0$i = $0; //@line 11064
   } else {
    $26 = $19 + 16 & -16; //@line 11067
    __THREW__ = 0; //@line 11068
    $27 = invoke_ii(142, $26 | 0) | 0; //@line 11069
    $28 = __THREW__; //@line 11070
    __THREW__ = 0; //@line 11070
    if ($28 & 1) {
     break;
    }
    HEAP32[$0 >> 2] = $27; //@line 11075
    HEAP32[$0 + 8 >> 2] = $26 | -2147483648; //@line 11078
    HEAP32[$0 + 4 >> 2] = $9; //@line 11080
    $$0$i = $27; //@line 11081
   }
   if ($9 | 0) {
    _memcpy($$0$i | 0, $18 | 0, $9 | 0) | 0; //@line 11085
   }
   HEAP8[$$0$i + $9 >> 0] = 0; //@line 11088
   __THREW__ = 0; //@line 11091
   invoke_iiii(29, $0 | 0, ($12 ? HEAP32[$2 >> 2] | 0 : $2) | 0, $16 | 0) | 0; //@line 11092
   $37 = __THREW__; //@line 11093
   __THREW__ = 0; //@line 11093
   if (!($37 & 1)) {
    return;
   }
  }
 } while (0);
 $39 = ___cxa_find_matching_catch_2() | 0; //@line 11100
 if ((HEAP8[$0 + 11 >> 0] | 0) >= 0) {
  ___resumeException($39 | 0); //@line 11106
 }
 __ZdlPv(HEAP32[$0 >> 2] | 0); //@line 11110
 ___resumeException($39 | 0); //@line 11111
}
function __ZN16FunctionAnalyzer19isTailCallRecursiveE13CharmFunction($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02026$i3 = 0, $$02125$i4 = 0, $$027$i2 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$1 + 44 >> 2] | 0; //@line 24361
 $7 = $4; //@line 24364
 if (($4 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
  $$0 = 0; //@line 24366
  return $$0 | 0; //@line 24367
 }
 $8 = $1 + 52 | 0; //@line 24369
 $9 = $7 + -20 | 0; //@line 24370
 $11 = HEAP8[$8 + 11 >> 0] | 0; //@line 24372
 $12 = $11 << 24 >> 24 < 0; //@line 24373
 $15 = $11 & 255; //@line 24376
 $16 = $12 ? HEAP32[$1 + 56 >> 2] | 0 : $15; //@line 24377
 $18 = HEAP8[$9 + 11 >> 0] | 0; //@line 24379
 $19 = $18 << 24 >> 24 < 0; //@line 24380
 if (($16 | 0) != (($19 ? HEAP32[$7 + -16 >> 2] | 0 : $18 & 255) | 0)) {
  $$0 = 0; //@line 24387
  return $$0 | 0; //@line 24388
 }
 $25 = HEAP32[$8 >> 2] | 0; //@line 24390
 $26 = $12 ? $25 : $8; //@line 24391
 $28 = $19 ? HEAP32[$9 >> 2] | 0 : $9; //@line 24393
 $29 = ($16 | 0) == 0; //@line 24394
 if ($12) {
  if ($29) {
   $$0 = 1; //@line 24397
   return $$0 | 0; //@line 24398
  }
  $$0 = (_memcmp($26, $28, $16) | 0) == 0; //@line 24402
  return $$0 | 0; //@line 24403
 }
 if ($29) {
  $$0 = 1; //@line 24406
  return $$0 | 0; //@line 24407
 }
 if ((HEAP8[$28 >> 0] | 0) == ($25 & 255) << 24 >> 24) {
  $$02026$i3 = $8; //@line 24414
  $$02125$i4 = $15; //@line 24414
  $$027$i2 = $28; //@line 24414
 } else {
  $$0 = 0; //@line 24416
  return $$0 | 0; //@line 24417
 }
 while (1) {
  $$02125$i4 = $$02125$i4 + -1 | 0; //@line 24420
  $$02026$i3 = $$02026$i3 + 1 | 0; //@line 24421
  if (!$$02125$i4) {
   $$0 = 1; //@line 24424
   label = 10; //@line 24425
   break;
  }
  $$027$i2 = $$027$i2 + 1 | 0; //@line 24428
  if ((HEAP8[$$02026$i3 >> 0] | 0) != (HEAP8[$$027$i2 >> 0] | 0)) {
   $$0 = 0; //@line 24435
   label = 10; //@line 24436
   break;
  }
 }
 if ((label | 0) == 10) {
  return $$0 | 0; //@line 24441
 }
 return 0; //@line 24443
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i = 0, $$021$i$i = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 22438
 STACKTOP = STACKTOP + 16 | 0; //@line 22439
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22439
 $4 = sp; //@line 22440
 HEAP32[$0 >> 2] = 0; //@line 22441
 HEAP32[$0 + 4 >> 2] = 0; //@line 22441
 HEAP32[$0 + 8 >> 2] = 0; //@line 22441
 $8 = $3 - $2 >> 2; //@line 22445
 if ($8 >>> 0 > 1073741807) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 22448
 }
 do {
  if ($8 >>> 0 < 2) {
   HEAP8[$0 + 8 + 3 >> 0] = $8; //@line 22457
   $$0$i$i = $2; //@line 22458
   $$021$i$i = $0; //@line 22458
  } else {
   $15 = $8 + 4 & -4; //@line 22461
   if ($15 >>> 0 <= 1073741823) {
    $23 = __Znwj($15 << 2) | 0; //@line 22465
    HEAP32[$0 >> 2] = $23; //@line 22466
    HEAP32[$0 + 8 >> 2] = $15 | -2147483648; //@line 22469
    HEAP32[$0 + 4 >> 2] = $8; //@line 22471
    $$0$i$i = $2; //@line 22472
    $$021$i$i = $23; //@line 22472
    break;
   }
   $17 = ___cxa_allocate_exception(8) | 0; //@line 22475
   __THREW__ = 0; //@line 22476
   invoke_vii(119, $17 | 0, 31992); //@line 22477
   $18 = __THREW__; //@line 22478
   __THREW__ = 0; //@line 22478
   if ($18 & 1) {
    $20 = ___cxa_find_matching_catch_2() | 0; //@line 22481
    ___cxa_free_exception($17 | 0); //@line 22483
    ___resumeException($20 | 0); //@line 22484
   } else {
    HEAP32[$17 >> 2] = 13224; //@line 22487
    ___cxa_throw($17 | 0, 2856, 240); //@line 22488
   }
  }
 } while (0);
 while (1) {
  if (($$0$i$i | 0) == ($3 | 0)) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($$021$i$i, $$0$i$i); //@line 22498
  $$0$i$i = $$0$i$i + 4 | 0; //@line 22501
  $$021$i$i = $$021$i$i + 4 | 0; //@line 22501
 }
 HEAP32[$4 >> 2] = 0; //@line 22503
 __ZNSt3__211char_traitsIwE6assignERwRKw($$021$i$i, $4); //@line 22504
 STACKTOP = sp; //@line 22505
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $34 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 63334
 STACKTOP = STACKTOP + 48 | 0; //@line 63335
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 63335
 $vararg_buffer10 = sp + 32 | 0; //@line 63336
 $vararg_buffer7 = sp + 24 | 0; //@line 63337
 $vararg_buffer3 = sp + 16 | 0; //@line 63338
 $vararg_buffer = sp; //@line 63339
 $0 = sp + 36 | 0; //@line 63340
 $1 = ___cxa_get_globals_fast() | 0; //@line 63341
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 63344
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 63349
   $9 = HEAP32[$7 >> 2] | 0; //@line 63351
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 63354
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 32487; //@line 63360
    _abort_message(32437, $vararg_buffer7); //@line 63361
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 63370
   } else {
    $22 = $3 + 80 | 0; //@line 63372
   }
   HEAP32[$0 >> 2] = $22; //@line 63374
   $23 = HEAP32[$3 >> 2] | 0; //@line 63375
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 63377
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[682] | 0) + 16 >> 2] & 63](2728, $23, $0) | 0) {
    $30 = HEAP32[$0 >> 2] | 0; //@line 63383
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 255]($30) | 0; //@line 63387
    HEAP32[$vararg_buffer >> 2] = 32487; //@line 63388
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 63390
    HEAP32[$vararg_buffer + 8 >> 2] = $34; //@line 63392
    _abort_message(32351, $vararg_buffer); //@line 63393
   } else {
    HEAP32[$vararg_buffer3 >> 2] = 32487; //@line 63396
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 63398
    _abort_message(32396, $vararg_buffer3); //@line 63399
   }
  }
 }
 _abort_message(32475, $vararg_buffer10); //@line 63404
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 13555
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 13561
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 13567
   } else {
    $7 = $1 & 255; //@line 13569
    $$03039 = $0; //@line 13570
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 13572
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 13577
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 13580
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 13585
      break;
     } else {
      $$03039 = $13; //@line 13588
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 13592
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 13593
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 13601
     $25 = $18; //@line 13601
     while (1) {
      $24 = $25 ^ $17; //@line 13603
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 13610
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 13613
      $25 = HEAP32[$31 >> 2] | 0; //@line 13614
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 13623
       break;
      } else {
       $$02936 = $31; //@line 13621
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 13628
    }
   } while (0);
   $38 = $1 & 255; //@line 13631
   $$1 = $$029$lcssa; //@line 13632
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 13634
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 13640
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 13643
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 13648
}
function _fread($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $29 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, label = 0;
 $4 = Math_imul($2, $1) | 0; //@line 16239
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 16241
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $36 = ___lockfile($3) | 0; //@line 16247
 } else {
  $36 = 0; //@line 16249
 }
 $10 = $3 + 74 | 0; //@line 16251
 $12 = HEAP8[$10 >> 0] | 0; //@line 16253
 HEAP8[$10 >> 0] = $12 + 255 | $12; //@line 16257
 $18 = $3 + 4 | 0; //@line 16260
 $19 = HEAP32[$18 >> 2] | 0; //@line 16261
 $20 = (HEAP32[$3 + 8 >> 2] | 0) - $19 | 0; //@line 16262
 if (($20 | 0) > 0) {
  $$57 = $20 >>> 0 < $4 >>> 0 ? $20 : $4; //@line 16267
  _memcpy($0 | 0, $19 | 0, $$57 | 0) | 0; //@line 16268
  HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $$57; //@line 16271
  $$054$ph = $4 - $$57 | 0; //@line 16274
  $$056$ph = $0 + $$57 | 0; //@line 16274
 } else {
  $$054$ph = $4; //@line 16276
  $$056$ph = $0; //@line 16276
 }
 L7 : do {
  if (!$$054$ph) {
   label = 13; //@line 16281
  } else {
   $29 = $3 + 32 | 0; //@line 16283
   $$05460 = $$054$ph; //@line 16284
   $$05659 = $$056$ph; //@line 16284
   while (1) {
    if (___toread($3) | 0) {
     break;
    }
    $33 = FUNCTION_TABLE_iiii[HEAP32[$29 >> 2] & 63]($3, $$05659, $$05460) | 0; //@line 16292
    if (($33 + 1 | 0) >>> 0 < 2) {
     break;
    }
    $40 = $$05460 - $33 | 0; //@line 16298
    if (!$40) {
     label = 13; //@line 16302
     break L7;
    } else {
     $$05460 = $40; //@line 16305
     $$05659 = $$05659 + $33 | 0; //@line 16305
    }
   }
   if ($36 | 0) {
    ___unlockfile($3); //@line 16310
   }
   $$0 = (($4 - $$05460 | 0) >>> 0) / ($1 >>> 0) | 0; //@line 16314
  }
 } while (0);
 if ((label | 0) == 13) {
  if (!$36) {
   $$0 = $$; //@line 16320
  } else {
   ___unlockfile($3); //@line 16322
   $$0 = $$; //@line 16323
  }
 }
 return $$0 | 0; //@line 16326
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 11029
 $2 = HEAP32[$1 >> 2] | 0; //@line 11030
 if (!$2) {
  label = 3; //@line 11033
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 11039
  } else {
   label = 4; //@line 11041
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 11045
  if (($7 | 0) < 0) {
   label = 4; //@line 11048
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 11050
   $$phi$trans$insert = $0 + 8 | 0; //@line 11052
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 11054
    $$sink = $$pre; //@line 11055
    $25 = $$pre; //@line 11055
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 11057
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 11059
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 11064
    $21 = $12; //@line 11066
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 11068
     $25 = $21; //@line 11068
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 11072
     $25 = $21; //@line 11072
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 11076
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 11078
   if (!$25) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 11081
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 11083
    $29 = $0 + 108 | 0; //@line 11085
    HEAP32[$29 >> 2] = $25 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 11090
    $36 = $27; //@line 11092
   }
   $35 = $36 + -1 | 0; //@line 11094
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 11099
   } else {
    HEAP8[$35 >> 0] = $7; //@line 11102
    $$0 = $7; //@line 11103
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 11109
  $$0 = -1; //@line 11110
 }
 return $$0 | 0; //@line 11112
}
function __ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sroa$speculated$$i = 0, $11 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0;
 $2 = $0 + 4 | 0; //@line 28830
 $4 = HEAP32[$0 >> 2] | 0; //@line 28832
 $5 = (HEAP32[$2 >> 2] | 0) - $4 | 0; //@line 28833
 $6 = $5 >> 2; //@line 28834
 $7 = $6 + 1 | 0; //@line 28835
 if ($7 >>> 0 > 1073741823) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 28838
 }
 $9 = $0 + 8 | 0; //@line 28841
 $11 = (HEAP32[$9 >> 2] | 0) - $4 | 0; //@line 28843
 $14 = $11 >> 1; //@line 28846
 $$sroa$speculated$$i = $11 >> 2 >>> 0 < 536870911 ? $14 >>> 0 < $7 >>> 0 ? $7 : $14 : 1073741823; //@line 28849
 do {
  if (!$$sroa$speculated$$i) {
   $26 = 0; //@line 28853
   $35 = 0; //@line 28853
  } else {
   if ($$sroa$speculated$$i >>> 0 <= 1073741823) {
    $24 = __Znwj($$sroa$speculated$$i << 2) | 0; //@line 28858
    $26 = $24; //@line 28859
    $35 = $24; //@line 28859
    break;
   }
   $18 = ___cxa_allocate_exception(8) | 0; //@line 28862
   __THREW__ = 0; //@line 28863
   invoke_vii(119, $18 | 0, 31992); //@line 28864
   $19 = __THREW__; //@line 28865
   __THREW__ = 0; //@line 28865
   if ($19 & 1) {
    $21 = ___cxa_find_matching_catch_2() | 0; //@line 28868
    ___cxa_free_exception($18 | 0); //@line 28870
    ___resumeException($21 | 0); //@line 28871
   } else {
    HEAP32[$18 >> 2] = 13224; //@line 28874
    ___cxa_throw($18 | 0, 2856, 240); //@line 28875
   }
  }
 } while (0);
 $25 = $26 + ($6 << 2) | 0; //@line 28880
 HEAP32[$25 >> 2] = HEAP32[$1 >> 2]; //@line 28884
 if (($5 | 0) > 0) {
  _memcpy($35 | 0, $4 | 0, $5 | 0) | 0; //@line 28891
 }
 HEAP32[$0 >> 2] = $26; //@line 28893
 HEAP32[$2 >> 2] = $25 + 4; //@line 28894
 HEAP32[$9 >> 2] = $26 + ($$sroa$speculated$$i << 2); //@line 28895
 if (!$4) {
  return;
 }
 __ZdlPv($4); //@line 28901
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $29 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 44157
 STACKTOP = STACKTOP + 416 | 0; //@line 44158
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416); //@line 44158
 $7 = sp + 8 | 0; //@line 44159
 $8 = sp; //@line 44160
 HEAP32[$8 >> 2] = $7 + 400; //@line 44162
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0 + 8 | 0, $7, $8, $4, $5, $6); //@line 44164
 $11 = HEAP32[$8 >> 2] | 0; //@line 44165
 $$0$i$i = $7; //@line 44167
 $$sroa$04$0$i = HEAP32[$1 >> 2] | 0; //@line 44167
 while (1) {
  if (($$0$i$i | 0) == ($11 | 0)) {
   break;
  }
  $14 = HEAP32[$$0$i$i >> 2] | 0; //@line 44173
  if (!$$sroa$04$0$i) {
   $$sroa$04$1$i = 0; //@line 44176
  } else {
   $16 = $$sroa$04$0$i + 24 | 0; //@line 44178
   $17 = HEAP32[$16 >> 2] | 0; //@line 44179
   if (($17 | 0) == (HEAP32[$$sroa$04$0$i + 28 >> 2] | 0)) {
    $23 = HEAP32[(HEAP32[$$sroa$04$0$i >> 2] | 0) + 52 >> 2] | 0; //@line 44186
    $24 = __ZNSt3__211char_traitsIwE11to_int_typeEw($14) | 0; //@line 44187
    $$0$i$i$i$i = FUNCTION_TABLE_iii[$23 & 127]($$sroa$04$0$i, $24) | 0; //@line 44189
   } else {
    HEAP32[$16 >> 2] = $17 + 4; //@line 44192
    HEAP32[$17 >> 2] = $14; //@line 44193
    $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($14) | 0; //@line 44195
   }
   $29 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0; //@line 44198
   $$sroa$04$1$i = $29 ? 0 : $$sroa$04$0$i; //@line 44200
  }
  $$0$i$i = $$0$i$i + 4 | 0; //@line 44203
  $$sroa$04$0$i = $$sroa$04$1$i; //@line 44203
 }
 STACKTOP = sp; //@line 44205
 return $$sroa$04$0$i | 0; //@line 44205
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $29 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 44007
 STACKTOP = STACKTOP + 112 | 0; //@line 44008
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 44008
 $7 = sp + 4 | 0; //@line 44009
 $8 = sp; //@line 44010
 HEAP32[$8 >> 2] = $7 + 100; //@line 44012
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0 + 8 | 0, $7, $8, $4, $5, $6); //@line 44014
 $11 = HEAP32[$8 >> 2] | 0; //@line 44015
 $$0$i$i = $7; //@line 44017
 $$sroa$04$0$i = HEAP32[$1 >> 2] | 0; //@line 44017
 while (1) {
  if (($$0$i$i | 0) == ($11 | 0)) {
   break;
  }
  $14 = HEAP8[$$0$i$i >> 0] | 0; //@line 44023
  if (!$$sroa$04$0$i) {
   $$sroa$04$1$i = 0; //@line 44026
  } else {
   $16 = $$sroa$04$0$i + 24 | 0; //@line 44028
   $17 = HEAP32[$16 >> 2] | 0; //@line 44029
   if (($17 | 0) == (HEAP32[$$sroa$04$0$i + 28 >> 2] | 0)) {
    $23 = HEAP32[(HEAP32[$$sroa$04$0$i >> 2] | 0) + 52 >> 2] | 0; //@line 44036
    $24 = __ZNSt3__211char_traitsIcE11to_int_typeEc($14) | 0; //@line 44037
    $$0$i$i$i$i = FUNCTION_TABLE_iii[$23 & 127]($$sroa$04$0$i, $24) | 0; //@line 44039
   } else {
    HEAP32[$16 >> 2] = $17 + 1; //@line 44042
    HEAP8[$17 >> 0] = $14; //@line 44043
    $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($14) | 0; //@line 44045
   }
   $29 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0; //@line 44048
   $$sroa$04$1$i = $29 ? 0 : $$sroa$04$0$i; //@line 44050
  }
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44053
  $$sroa$04$0$i = $$sroa$04$1$i; //@line 44053
 }
 STACKTOP = sp; //@line 44055
 return $$sroa$04$0$i | 0; //@line 44055
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $11 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 61593
 STACKTOP = STACKTOP + 16 | 0; //@line 61594
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61594
 $4 = sp; //@line 61595
 $5 = $0 + 11 | 0; //@line 61596
 $6 = HEAP8[$5 >> 0] | 0; //@line 61597
 $7 = $6 << 24 >> 24 < 0; //@line 61598
 if ($7) {
  $11 = HEAP32[$0 + 4 >> 2] | 0; //@line 61602
 } else {
  $11 = $6 & 255; //@line 61605
 }
 if ($11 >>> 0 < $1 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0); //@line 61609
 }
 if ($7) {
  $17 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; //@line 61617
 } else {
  $17 = 10; //@line 61619
 }
 if (($17 - $11 | 0) >>> 0 < $3 >>> 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $17, $11 + $3 - $17 | 0, $11, $1, 0, $3, $2); //@line 61626
 } else {
  if ($3 | 0) {
   if ($7) {
    $24 = HEAP32[$0 >> 2] | 0; //@line 61632
   } else {
    $24 = $0; //@line 61634
   }
   $21 = $11 - $1 | 0; //@line 61636
   $23 = $24 + $1 | 0; //@line 61638
   if (!$21) {
    $$1 = $2; //@line 61640
   } else {
    __ZNSt3__211char_traitsIcE4moveEPcPKcj($23 + $3 | 0, $23, $21) | 0; //@line 61649
    $$1 = $23 >>> 0 <= $2 >>> 0 & ($24 + $11 | 0) >>> 0 > $2 >>> 0 ? $2 + $3 | 0 : $2; //@line 61650
   }
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($23, $$1, $3) | 0; //@line 61652
   $30 = $11 + $3 | 0; //@line 61653
   if ((HEAP8[$5 >> 0] | 0) < 0) {
    HEAP32[$0 + 4 >> 2] = $30; //@line 61658
   } else {
    HEAP8[$5 >> 0] = $30; //@line 61661
   }
   HEAP8[$4 >> 0] = 0; //@line 61664
   __ZNSt3__211char_traitsIcE6assignERcRKc($24 + $30 | 0, $4); //@line 61665
  }
 }
 STACKTOP = sp; //@line 61668
 return $0 | 0; //@line 61668
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 10237
 $4 = HEAP32[$3 >> 2] | 0; //@line 10238
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 10245
   label = 5; //@line 10246
  } else {
   $$1 = 0; //@line 10248
  }
 } else {
  $12 = $4; //@line 10252
  label = 5; //@line 10253
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 10257
   $10 = HEAP32[$9 >> 2] | 0; //@line 10258
   $14 = $10; //@line 10261
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 63]($2, $0, $1) | 0; //@line 10266
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 10274
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 10278
       $$141 = $0; //@line 10278
       $$143 = $1; //@line 10278
       $31 = $14; //@line 10278
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 10281
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 10288
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 63]($2, $0, $$038) | 0; //@line 10293
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 10296
      break L5;
     }
     $$139 = $$038; //@line 10302
     $$141 = $0 + $$038 | 0; //@line 10302
     $$143 = $1 - $$038 | 0; //@line 10302
     $31 = HEAP32[$9 >> 2] | 0; //@line 10302
    } else {
     $$139 = 0; //@line 10304
     $$141 = $0; //@line 10304
     $$143 = $1; //@line 10304
     $31 = $14; //@line 10304
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 10307
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 10310
   $$1 = $$139 + $$143 | 0; //@line 10312
  }
 } while (0);
 return $$1 | 0; //@line 10315
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$sroa$speculated = 0, $15 = 0, $16 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $9 = 0;
 if ((1073741807 - $1 | 0) >>> 0 < $2 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 62377
 }
 $9 = $0 + 8 | 0; //@line 62380
 if ((HEAP8[$9 + 3 >> 0] | 0) < 0) {
  $32 = HEAP32[$0 >> 2] | 0; //@line 62386
 } else {
  $32 = $0; //@line 62388
 }
 if ($1 >>> 0 < 536870887) {
  $15 = $2 + $1 | 0; //@line 62392
  $16 = $1 << 1; //@line 62393
  $$sroa$speculated = $15 >>> 0 < $16 >>> 0 ? $16 : $15; //@line 62395
  $21 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4; //@line 62399
  if ($21 >>> 0 > 1073741823) {
   $23 = ___cxa_allocate_exception(8) | 0; //@line 62402
   __THREW__ = 0; //@line 62403
   invoke_vii(119, $23 | 0, 31992); //@line 62404
   $24 = __THREW__; //@line 62405
   __THREW__ = 0; //@line 62405
   if ($24 & 1) {
    $26 = ___cxa_find_matching_catch_2() | 0; //@line 62408
    ___cxa_free_exception($23 | 0); //@line 62410
    ___resumeException($26 | 0); //@line 62411
   } else {
    HEAP32[$23 >> 2] = 13224; //@line 62414
    ___cxa_throw($23 | 0, 2856, 240); //@line 62415
   }
  } else {
   $29 = $21; //@line 62419
  }
 } else {
  $29 = 1073741807; //@line 62422
 }
 $30 = __Znwj($29 << 2) | 0; //@line 62425
 if ($4 | 0) {
  __ZNSt3__211char_traitsIwE4copyEPwPKwj($30, $32, $4) | 0; //@line 62428
 }
 $34 = $3 - $5 - $4 | 0; //@line 62431
 if ($34 | 0) {
  __ZNSt3__211char_traitsIwE4copyEPwPKwj($30 + ($4 << 2) + ($6 << 2) | 0, $32 + ($4 << 2) + ($5 << 2) | 0, $34) | 0; //@line 62438
 }
 if (($1 | 0) != 1) {
  __ZdlPv($32); //@line 62442
 }
 HEAP32[$0 >> 2] = $30; //@line 62444
 HEAP32[$9 >> 2] = $29 | -2147483648; //@line 62446
 return;
}
function __ZNSt3__216allocator_traitsINS_9allocatorI13CharmFunctionEEE9__destroyIS2_EEvNS_17integral_constantIbLb1EEERS3_PT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 575
 STACKTOP = STACKTOP + 16 | 0; //@line 576
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 576
 $$byval_copy = sp + 1 | 0; //@line 577
 $3 = sp; //@line 578
 $4 = $2 + 52 | 0; //@line 579
 if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 585
 }
 $9 = $2 + 40 | 0; //@line 587
 $10 = HEAP32[$9 >> 2] | 0; //@line 588
 if ($10 | 0) {
  $12 = $2 + 44 | 0; //@line 591
  $13 = HEAP32[$12 >> 2] | 0; //@line 592
  do {
   if (($13 | 0) == ($10 | 0)) {
    $24 = $10; //@line 596
   } else {
    $15 = $2 + 48 | 0; //@line 598
    $17 = $13; //@line 599
    while (1) {
     $16 = $17 + -72 | 0; //@line 601
     HEAP32[$12 >> 2] = $16; //@line 602
     __THREW__ = 0; //@line 603
     HEAP8[$$byval_copy >> 0] = HEAP8[$3 >> 0] | 0; //@line 604
     invoke_viii(13, $$byval_copy | 0, $15 | 0, $16 | 0); //@line 605
     $18 = __THREW__; //@line 606
     __THREW__ = 0; //@line 606
     if ($18 & 1) {
      label = 8; //@line 609
      break;
     }
     $17 = HEAP32[$12 >> 2] | 0; //@line 612
     if (($17 | 0) == ($10 | 0)) {
      label = 9; //@line 615
      break;
     }
    }
    if ((label | 0) == 8) {
     $22 = ___cxa_find_matching_catch_3(0) | 0; //@line 622
     ___clang_call_terminate($22); //@line 624
    } else if ((label | 0) == 9) {
     $24 = HEAP32[$9 >> 2] | 0; //@line 629
     break;
    }
   }
  } while (0);
  __ZdlPv($24); //@line 634
 }
 $25 = $2 + 4 | 0; //@line 636
 if ((HEAP8[$25 + 11 >> 0] | 0) >= 0) {
  STACKTOP = sp; //@line 641
  return;
 }
 __ZdlPv(HEAP32[$25 >> 2] | 0); //@line 644
 STACKTOP = sp; //@line 645
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $9 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 64323
 } else {
  $9 = $1 + 52 | 0; //@line 64325
  $10 = HEAP8[$9 >> 0] | 0; //@line 64326
  $11 = $1 + 53 | 0; //@line 64327
  $12 = HEAP8[$11 >> 0] | 0; //@line 64328
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 64331
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 64332
  HEAP8[$9 >> 0] = 0; //@line 64333
  HEAP8[$11 >> 0] = 0; //@line 64334
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 64335
  L4 : do {
   if (($15 | 0) > 1) {
    $19 = $1 + 24 | 0; //@line 64340
    $20 = $0 + 8 | 0; //@line 64341
    $21 = $1 + 54 | 0; //@line 64342
    $$0 = $0 + 24 | 0; //@line 64343
    do {
     if (HEAP8[$21 >> 0] | 0) {
      break L4;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$20 >> 2] & 1)) {
        break L4;
       }
      }
     } else {
      if ((HEAP32[$19 >> 2] | 0) == 1) {
       break L4;
      }
      if (!(HEAP32[$20 >> 2] & 2)) {
       break L4;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 64376
     HEAP8[$11 >> 0] = 0; //@line 64377
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 64378
     $$0 = $$0 + 8 | 0; //@line 64379
    } while ($$0 >>> 0 < $16 >>> 0);
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 64389
  HEAP8[$11 >> 0] = $12; //@line 64390
 }
 return;
}
function __ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 62745
 STACKTOP = STACKTOP + 16 | 0; //@line 62746
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62746
 $3 = sp + 12 | 0; //@line 62747
 $4 = sp; //@line 62748
 HEAP32[$4 >> 2] = 0; //@line 62749
 HEAP32[$4 + 4 >> 2] = 0; //@line 62749
 HEAP32[$4 + 8 >> 2] = 0; //@line 62749
 $5 = __ZNSt3__211char_traitsIcE6lengthEPKc(32091) | 0; //@line 62750
 if ($5 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($4); //@line 62753
 }
 if ($5 >>> 0 < 11) {
  HEAP8[$4 + 11 >> 0] = $5; //@line 62760
  $$0$i$i = $4; //@line 62761
 } else {
  $11 = $5 + 16 & -16; //@line 62764
  $12 = __Znwj($11) | 0; //@line 62765
  HEAP32[$4 >> 2] = $12; //@line 62766
  HEAP32[$4 + 8 >> 2] = $11 | -2147483648; //@line 62769
  HEAP32[$4 + 4 >> 2] = $5; //@line 62771
  $$0$i$i = $12; //@line 62772
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 32091, $5) | 0; //@line 62774
 HEAP8[$3 >> 0] = 0; //@line 62776
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $5 | 0, $3); //@line 62777
 __THREW__ = 0; //@line 62778
 $17 = invoke_iiiii(19, $4 | 0, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 62779
 $18 = tempRet0; //@line 62780
 $19 = __THREW__; //@line 62781
 __THREW__ = 0; //@line 62781
 if ($19 & 1) {
  $21 = ___cxa_find_matching_catch_2() | 0; //@line 62784
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4); //@line 62786
  ___resumeException($21 | 0); //@line 62787
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4); //@line 62790
  tempRet0 = $18; //@line 62791
  STACKTOP = sp; //@line 62792
  return $17 | 0; //@line 62792
 }
 return 0; //@line 62794
}
function __ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE8pop_backEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $40 = 0, $6 = 0, $7 = 0;
 $1 = $0 + 20 | 0; //@line 12703
 $3 = $0 + 16 | 0; //@line 12705
 $6 = (HEAP32[$1 >> 2] | 0) + -1 + (HEAP32[$3 >> 2] | 0) | 0; //@line 12708
 $7 = $0 + 4 | 0; //@line 12709
 $11 = HEAP32[(HEAP32[$7 >> 2] | 0) + ((($6 >>> 0) / 56 | 0) << 2) >> 2] | 0; //@line 12713
 $12 = ($6 >>> 0) % 56 | 0; //@line 12714
 $13 = $11 + ($12 * 72 | 0) + 52 | 0; //@line 12715
 if ((HEAP8[$13 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$13 >> 2] | 0); //@line 12721
 }
 $18 = $11 + ($12 * 72 | 0) + 40 | 0; //@line 12723
 $19 = HEAP32[$18 >> 2] | 0; //@line 12724
 if ($19 | 0) {
  $21 = $11 + ($12 * 72 | 0) + 44 | 0; //@line 12727
  $22 = HEAP32[$21 >> 2] | 0; //@line 12728
  if (($22 | 0) == ($19 | 0)) {
   $28 = $19; //@line 12731
  } else {
   $25 = $22; //@line 12733
   do {
    $24 = $25 + -72 | 0; //@line 12735
    HEAP32[$21 >> 2] = $24; //@line 12736
    __ZN13CharmFunctionD2Ev($24); //@line 12737
    $25 = HEAP32[$21 >> 2] | 0; //@line 12738
   } while (($25 | 0) != ($19 | 0));
   $28 = HEAP32[$18 >> 2] | 0; //@line 12747
  }
  __ZdlPv($28); //@line 12749
 }
 $29 = $11 + ($12 * 72 | 0) + 4 | 0; //@line 12751
 if ((HEAP8[$29 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$29 >> 2] | 0); //@line 12757
 }
 $35 = (HEAP32[$1 >> 2] | 0) + -1 | 0; //@line 12760
 HEAP32[$1 >> 2] = $35; //@line 12761
 $36 = $0 + 8 | 0; //@line 12762
 $37 = HEAP32[$36 >> 2] | 0; //@line 12763
 $40 = $37 - (HEAP32[$7 >> 2] | 0) >> 2; //@line 12766
 if (((($40 | 0) == 0 ? 0 : ($40 * 56 | 0) + -1 | 0) - ($35 + (HEAP32[$3 >> 2] | 0)) | 0) >>> 0 <= 111) {
  return;
 }
 __ZdlPv(HEAP32[$37 + -4 >> 2] | 0); //@line 12781
 HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + -4; //@line 12784
 return;
}
function __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $12 = 0, $15 = 0, $16 = 0, $23 = 0, $25 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 63170
 STACKTOP = STACKTOP + 16 | 0; //@line 63171
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 63171
 $3 = sp; //@line 63172
 do {
  if (HEAP32[$1 >> 2] | 0) {
   $7 = HEAP8[$2 + 11 >> 0] | 0; //@line 63178
   if ($7 << 24 >> 24 < 0) {
    $12 = HEAP32[$2 + 4 >> 2] | 0; //@line 63183
   } else {
    $12 = $7 & 255; //@line 63186
   }
   if ($12 | 0) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($2, 32306) | 0; //@line 63190
   }
   __ZNKSt3__210error_code7messageEv($3, $1); //@line 63192
   $15 = HEAP8[$3 + 11 >> 0] | 0; //@line 63194
   $16 = $15 << 24 >> 24 < 0; //@line 63195
   __THREW__ = 0; //@line 63202
   invoke_iiii(29, $2 | 0, ($16 ? HEAP32[$3 >> 2] | 0 : $3) | 0, ($16 ? HEAP32[$3 + 4 >> 2] | 0 : $15 & 255) | 0) | 0; //@line 63203
   $23 = __THREW__; //@line 63204
   __THREW__ = 0; //@line 63204
   if ($23 & 1) {
    $25 = ___cxa_find_matching_catch_2() | 0; //@line 63207
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3); //@line 63209
    ___resumeException($25 | 0); //@line 63210
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3); //@line 63213
    break;
   }
  }
 } while (0);
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 63218
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 63218
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 63218
 $$0$i$i = 0; //@line 63219
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0; //@line 63226
  $$0$i$i = $$0$i$i + 1 | 0; //@line 63228
 }
 STACKTOP = sp; //@line 63230
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 61063
 STACKTOP = STACKTOP + 16 | 0; //@line 61064
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61064
 $8 = sp; //@line 61065
 if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 61069
 }
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) {
  $25 = HEAP32[$0 >> 2] | 0; //@line 61077
 } else {
  $25 = $0; //@line 61079
 }
 if ($1 >>> 0 < 2147483623) {
  $16 = $2 + $1 | 0; //@line 61083
  $17 = $1 << 1; //@line 61084
  $$sroa$speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16; //@line 61086
  $22 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16; //@line 61091
 } else {
  $22 = -17; //@line 61093
 }
 $23 = __Znwj($22) | 0; //@line 61095
 if ($4 | 0) {
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($23, $25, $4) | 0; //@line 61098
 }
 if ($6 | 0) {
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($23 + $4 | 0, $7, $6) | 0; //@line 61103
 }
 $28 = $3 - $5 | 0; //@line 61105
 $29 = $28 - $4 | 0; //@line 61106
 if ($29 | 0) {
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($23 + $4 + $6 | 0, $25 + $4 + $5 | 0, $29) | 0; //@line 61113
 }
 if (($1 | 0) != 10) {
  __ZdlPv($25); //@line 61117
 }
 HEAP32[$0 >> 2] = $23; //@line 61119
 HEAP32[$0 + 8 >> 2] = $22 | -2147483648; //@line 61122
 $38 = $28 + $6 | 0; //@line 61123
 HEAP32[$0 + 4 >> 2] = $38; //@line 61125
 HEAP8[$8 >> 0] = 0; //@line 61127
 __ZNSt3__211char_traitsIcE6assignERcRKc($23 + $38 | 0, $8); //@line 61128
 STACKTOP = sp; //@line 61129
 return;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $eh$lpad$body$indexZ2D = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0; //@line 56864
 L1 : do {
  if (!$2) {
   $22 = 1; //@line 56868
  } else {
   __THREW__ = 0; //@line 56870
   $4 = invoke_ii(147, $2 | 0) | 0; //@line 56871
   $5 = __THREW__; //@line 56872
   __THREW__ = 0; //@line 56872
   do {
    if ($5 & 1) {
     $23 = ___cxa_find_matching_catch_3(0) | 0; //@line 56876
     $eh$lpad$body$indexZ2D = $23; //@line 56878
    } else {
     __THREW__ = 0; //@line 56880
     $7 = invoke_i(3) | 0; //@line 56881
     $8 = __THREW__; //@line 56882
     __THREW__ = 0; //@line 56882
     if ($8 & 1) {
      $15 = ___cxa_find_matching_catch_3(0) | 0; //@line 56885
      if (!$4) {
       $eh$lpad$body$indexZ2D = $15; //@line 56889
       break;
      }
      __THREW__ = 0; //@line 56892
      invoke_ii(147, $4 | 0) | 0; //@line 56893
      $18 = __THREW__; //@line 56894
      __THREW__ = 0; //@line 56894
      if (!($18 & 1)) {
       $eh$lpad$body$indexZ2D = $15; //@line 56897
       break;
      }
      $20 = ___cxa_find_matching_catch_3(0) | 0; //@line 56900
      ___clang_call_terminate($20); //@line 56902
     } else {
      if (!$4) {
       $22 = $7; //@line 56907
       break L1;
      }
      __THREW__ = 0; //@line 56910
      invoke_ii(147, $4 | 0) | 0; //@line 56911
      $11 = __THREW__; //@line 56912
      __THREW__ = 0; //@line 56912
      if (!($11 & 1)) {
       $22 = $7; //@line 56915
       break L1;
      }
      $13 = ___cxa_find_matching_catch_3(0) | 0; //@line 56918
      ___clang_call_terminate($13); //@line 56920
     }
    }
   } while (0);
   ___clang_call_terminate($eh$lpad$body$indexZ2D); //@line 56925
  }
 } while (0);
 return $22 | 0; //@line 56929
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0, $20 = 0, $29 = 0, $3 = 0, $31 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 >> 2] = 0; //@line 10731
 HEAP32[$0 + 4 >> 2] = 0; //@line 10731
 HEAP32[$0 + 8 >> 2] = 0; //@line 10731
 $3 = _strlen($1) | 0; //@line 10732
 $5 = HEAP8[$2 + 11 >> 0] | 0; //@line 10734
 $6 = $5 << 24 >> 24 < 0; //@line 10735
 $10 = $6 ? HEAP32[$2 + 4 >> 2] | 0 : $5 & 255; //@line 10739
 $11 = $10 + $3 | 0; //@line 10740
 do {
  if ($11 >>> 0 > 4294967279) {
   __THREW__ = 0; //@line 10744
   invoke_vi(258, $0 | 0); //@line 10745
   __THREW__ = 0; //@line 10746
  } else {
   if ($11 >>> 0 < 11) {
    HEAP8[$0 + 11 >> 0] = $3; //@line 10752
    $$0$i = $0; //@line 10753
   } else {
    $18 = $11 + 16 & -16; //@line 10756
    __THREW__ = 0; //@line 10757
    $19 = invoke_ii(142, $18 | 0) | 0; //@line 10758
    $20 = __THREW__; //@line 10759
    __THREW__ = 0; //@line 10759
    if ($20 & 1) {
     break;
    }
    HEAP32[$0 >> 2] = $19; //@line 10764
    HEAP32[$0 + 8 >> 2] = $18 | -2147483648; //@line 10767
    HEAP32[$0 + 4 >> 2] = $3; //@line 10769
    $$0$i = $19; //@line 10770
   }
   if ($3 | 0) {
    _memcpy($$0$i | 0, $1 | 0, $3 | 0) | 0; //@line 10774
   }
   HEAP8[$$0$i + $3 >> 0] = 0; //@line 10777
   __THREW__ = 0; //@line 10780
   invoke_iiii(29, $0 | 0, ($6 ? HEAP32[$2 >> 2] | 0 : $2) | 0, $10 | 0) | 0; //@line 10781
   $29 = __THREW__; //@line 10782
   __THREW__ = 0; //@line 10782
   if (!($29 & 1)) {
    return;
   }
  }
 } while (0);
 $31 = ___cxa_find_matching_catch_2() | 0; //@line 10789
 if ((HEAP8[$0 + 11 >> 0] | 0) >= 0) {
  ___resumeException($31 | 0); //@line 10795
 }
 __ZdlPv(HEAP32[$0 >> 2] | 0); //@line 10799
 ___resumeException($31 | 0); //@line 10800
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 7145
 STACKTOP = STACKTOP + 128 | 0; //@line 7146
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 7146
 $4 = sp + 124 | 0; //@line 7147
 $5 = sp; //@line 7148
 dest = $5; //@line 7149
 src = 5600; //@line 7149
 stop = dest + 124 | 0; //@line 7149
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 7149
  dest = dest + 4 | 0; //@line 7149
  src = src + 4 | 0; //@line 7149
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 7155
   $$015 = 1; //@line 7155
   label = 4; //@line 7156
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 7159
   $$0 = -1; //@line 7160
  }
 } else {
  $$014 = $0; //@line 7163
  $$015 = $1; //@line 7163
  label = 4; //@line 7164
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 7168
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 7170
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 7172
  $14 = $5 + 20 | 0; //@line 7173
  HEAP32[$14 >> 2] = $$014; //@line 7174
  HEAP32[$5 + 44 >> 2] = $$014; //@line 7176
  $16 = $$014 + $$$015 | 0; //@line 7177
  $17 = $5 + 16 | 0; //@line 7178
  HEAP32[$17 >> 2] = $16; //@line 7179
  HEAP32[$5 + 28 >> 2] = $16; //@line 7181
  $19 = _vfprintf($5, $2, $3) | 0; //@line 7182
  if (!$$$015) {
   $$0 = $19; //@line 7185
  } else {
   $21 = HEAP32[$14 >> 2] | 0; //@line 7187
   HEAP8[$21 + ((($21 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 7192
   $$0 = $19; //@line 7193
  }
 }
 STACKTOP = sp; //@line 7196
 return $$0 | 0; //@line 7196
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 58442
 STACKTOP = STACKTOP + 16 | 0; //@line 58443
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 58443
 $2 = sp; //@line 58444
 HEAP32[$0 >> 2] = 0; //@line 58445
 HEAP32[$0 + 4 >> 2] = 0; //@line 58445
 HEAP32[$0 + 8 >> 2] = 0; //@line 58445
 $3 = __ZNSt3__211char_traitsIwE6lengthEPKw(12664) | 0; //@line 58446
 if ($3 >>> 0 > 1073741807) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 58449
 }
 do {
  if ($3 >>> 0 < 2) {
   HEAP8[$0 + 8 + 3 >> 0] = $3; //@line 58458
   $$0$i$i = $0; //@line 58459
  } else {
   $10 = $3 + 4 & -4; //@line 58462
   if ($10 >>> 0 <= 1073741823) {
    $18 = __Znwj($10 << 2) | 0; //@line 58466
    HEAP32[$0 >> 2] = $18; //@line 58467
    HEAP32[$0 + 8 >> 2] = $10 | -2147483648; //@line 58470
    HEAP32[$0 + 4 >> 2] = $3; //@line 58472
    $$0$i$i = $18; //@line 58473
    break;
   }
   $12 = ___cxa_allocate_exception(8) | 0; //@line 58476
   __THREW__ = 0; //@line 58477
   invoke_vii(119, $12 | 0, 31992); //@line 58478
   $13 = __THREW__; //@line 58479
   __THREW__ = 0; //@line 58479
   if ($13 & 1) {
    $15 = ___cxa_find_matching_catch_2() | 0; //@line 58482
    ___cxa_free_exception($12 | 0); //@line 58484
    ___resumeException($15 | 0); //@line 58485
   } else {
    HEAP32[$12 >> 2] = 13224; //@line 58488
    ___cxa_throw($12 | 0, 2856, 240); //@line 58489
   }
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i, 12664, $3) | 0; //@line 58494
 HEAP32[$2 >> 2] = 0; //@line 58496
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0$i$i + ($3 << 2) | 0, $2); //@line 58497
 STACKTOP = sp; //@line 58498
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $14 = 0, $21 = 0, $27 = 0, $28 = 0, $33 = 0, $37 = 0, $39 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 43183
 STACKTOP = STACKTOP + 16 | 0; //@line 43184
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 43184
 $$byval_copy = sp + 4 | 0; //@line 43185
 $6 = sp; //@line 43186
 $7 = $0 + 8 | 0; //@line 43187
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] & 255]($7) | 0; //@line 43191
 $14 = HEAP8[$11 + 8 + 3 >> 0] | 0; //@line 43194
 if ($14 << 24 >> 24 < 0) {
  $28 = HEAP32[$11 + 4 >> 2] | 0; //@line 43199
 } else {
  $28 = $14 & 255; //@line 43202
 }
 $21 = HEAP8[$11 + 20 + 3 >> 0] | 0; //@line 43206
 if ($21 << 24 >> 24 < 0) {
  $27 = HEAP32[$11 + 16 >> 2] | 0; //@line 43211
 } else {
  $27 = $21 & 255; //@line 43214
 }
 do {
  if (($28 | 0) == (0 - $27 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 43222
  } else {
   HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 43225
   $33 = $11 + 24 | 0; //@line 43226
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 43227
   $37 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $33, $5, $4, 0) | 0) - $11 | 0; //@line 43231
   $39 = HEAP32[$1 >> 2] | 0; //@line 43233
   if (($39 | 0) == 12 & ($37 | 0) == 0) {
    HEAP32[$1 >> 2] = 0; //@line 43237
    break;
   }
   if (($39 | 0) < 12 & ($37 | 0) == 12) {
    HEAP32[$1 >> 2] = $39 + 12; //@line 43245
   }
  }
 } while (0);
 STACKTOP = sp; //@line 43249
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 58379
 STACKTOP = STACKTOP + 16 | 0; //@line 58380
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 58380
 $2 = sp; //@line 58381
 HEAP32[$0 >> 2] = 0; //@line 58382
 HEAP32[$0 + 4 >> 2] = 0; //@line 58382
 HEAP32[$0 + 8 >> 2] = 0; //@line 58382
 $3 = __ZNSt3__211char_traitsIwE6lengthEPKw(12688) | 0; //@line 58383
 if ($3 >>> 0 > 1073741807) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 58386
 }
 do {
  if ($3 >>> 0 < 2) {
   HEAP8[$0 + 8 + 3 >> 0] = $3; //@line 58395
   $$0$i$i = $0; //@line 58396
  } else {
   $10 = $3 + 4 & -4; //@line 58399
   if ($10 >>> 0 <= 1073741823) {
    $18 = __Znwj($10 << 2) | 0; //@line 58403
    HEAP32[$0 >> 2] = $18; //@line 58404
    HEAP32[$0 + 8 >> 2] = $10 | -2147483648; //@line 58407
    HEAP32[$0 + 4 >> 2] = $3; //@line 58409
    $$0$i$i = $18; //@line 58410
    break;
   }
   $12 = ___cxa_allocate_exception(8) | 0; //@line 58413
   __THREW__ = 0; //@line 58414
   invoke_vii(119, $12 | 0, 31992); //@line 58415
   $13 = __THREW__; //@line 58416
   __THREW__ = 0; //@line 58416
   if ($13 & 1) {
    $15 = ___cxa_find_matching_catch_2() | 0; //@line 58419
    ___cxa_free_exception($12 | 0); //@line 58421
    ___resumeException($15 | 0); //@line 58422
   } else {
    HEAP32[$12 >> 2] = 13224; //@line 58425
    ___cxa_throw($12 | 0, 2856, 240); //@line 58426
   }
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwj($$0$i$i, 12688, $3) | 0; //@line 58431
 HEAP32[$2 >> 2] = 0; //@line 58433
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0$i$i + ($3 << 2) | 0, $2); //@line 58434
 STACKTOP = sp; //@line 58435
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $13 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $36 = 0, $38 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 40264
 STACKTOP = STACKTOP + 16 | 0; //@line 40265
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 40265
 $$byval_copy = sp + 4 | 0; //@line 40266
 $6 = sp; //@line 40267
 $7 = $0 + 8 | 0; //@line 40268
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] & 255]($7) | 0; //@line 40272
 $13 = HEAP8[$11 + 11 >> 0] | 0; //@line 40274
 if ($13 << 24 >> 24 < 0) {
  $27 = HEAP32[$11 + 4 >> 2] | 0; //@line 40279
 } else {
  $27 = $13 & 255; //@line 40282
 }
 $20 = HEAP8[$11 + 12 + 11 >> 0] | 0; //@line 40286
 if ($20 << 24 >> 24 < 0) {
  $26 = HEAP32[$11 + 16 >> 2] | 0; //@line 40291
 } else {
  $26 = $20 & 255; //@line 40294
 }
 do {
  if (($27 | 0) == (0 - $26 | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 40302
  } else {
   HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 40305
   $32 = $11 + 24 | 0; //@line 40306
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 40307
   $36 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $32, $5, $4, 0) | 0) - $11 | 0; //@line 40311
   $38 = HEAP32[$1 >> 2] | 0; //@line 40313
   if (($38 | 0) == 12 & ($36 | 0) == 0) {
    HEAP32[$1 >> 2] = 0; //@line 40317
    break;
   }
   if (($38 | 0) < 12 & ($36 | 0) == 12) {
    HEAP32[$1 >> 2] = $38 + 12; //@line 40325
   }
  }
 } while (0);
 STACKTOP = sp; //@line 40329
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i = 0, $$sroa$speculated = 0, $12 = 0, $16 = 0, $17 = 0, $24 = 0, $25 = 0, $5 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 60896
 STACKTOP = STACKTOP + 16 | 0; //@line 60897
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 60897
 $5 = sp; //@line 60898
 HEAP32[$0 >> 2] = 0; //@line 60899
 HEAP32[$0 + 4 >> 2] = 0; //@line 60899
 HEAP32[$0 + 8 >> 2] = 0; //@line 60899
 $7 = HEAP8[$1 + 11 >> 0] | 0; //@line 60901
 $8 = $7 << 24 >> 24 < 0; //@line 60902
 $12 = $8 ? HEAP32[$1 + 4 >> 2] | 0 : $7 & 255; //@line 60906
 if ($12 >>> 0 < $2 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0); //@line 60909
 }
 $16 = ($8 ? HEAP32[$1 >> 2] | 0 : $1) + $2 | 0; //@line 60914
 $17 = $12 - $2 | 0; //@line 60915
 $$sroa$speculated = $17 >>> 0 < $3 >>> 0 ? $17 : $3; //@line 60917
 if ($$sroa$speculated >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 60920
 }
 if ($$sroa$speculated >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $$sroa$speculated; //@line 60927
  $$0$i = $0; //@line 60928
 } else {
  $24 = $$sroa$speculated + 16 & -16; //@line 60931
  $25 = __Znwj($24) | 0; //@line 60932
  HEAP32[$0 >> 2] = $25; //@line 60933
  HEAP32[$0 + 8 >> 2] = $24 | -2147483648; //@line 60936
  HEAP32[$0 + 4 >> 2] = $$sroa$speculated; //@line 60938
  $$0$i = $25; //@line 60939
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i, $16, $$sroa$speculated) | 0; //@line 60941
 HEAP8[$5 >> 0] = 0; //@line 60943
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i + $$sroa$speculated | 0, $5); //@line 60944
 STACKTOP = sp; //@line 60945
 return;
}
function __ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $16 = 0.0, $17 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 62857
 STACKTOP = STACKTOP + 16 | 0; //@line 62858
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62858
 $2 = sp + 12 | 0; //@line 62859
 $3 = sp; //@line 62860
 HEAP32[$3 >> 2] = 0; //@line 62861
 HEAP32[$3 + 4 >> 2] = 0; //@line 62861
 HEAP32[$3 + 8 >> 2] = 0; //@line 62861
 $4 = __ZNSt3__211char_traitsIcE6lengthEPKc(32097) | 0; //@line 62862
 if ($4 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($3); //@line 62865
 }
 if ($4 >>> 0 < 11) {
  HEAP8[$3 + 11 >> 0] = $4; //@line 62872
  $$0$i$i = $3; //@line 62873
 } else {
  $10 = $4 + 16 & -16; //@line 62876
  $11 = __Znwj($10) | 0; //@line 62877
  HEAP32[$3 >> 2] = $11; //@line 62878
  HEAP32[$3 + 8 >> 2] = $10 | -2147483648; //@line 62881
  HEAP32[$3 + 4 >> 2] = $4; //@line 62883
  $$0$i$i = $11; //@line 62884
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 32097, $4) | 0; //@line 62886
 HEAP8[$2 >> 0] = 0; //@line 62888
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $4 | 0, $2); //@line 62889
 __THREW__ = 0; //@line 62890
 $16 = +invoke_diii(4, $3 | 0, $0 | 0, $1 | 0); //@line 62891
 $17 = __THREW__; //@line 62892
 __THREW__ = 0; //@line 62892
 if ($17 & 1) {
  $19 = ___cxa_find_matching_catch_2() | 0; //@line 62895
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3); //@line 62897
  ___resumeException($19 | 0); //@line 62898
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3); //@line 62901
  STACKTOP = sp; //@line 62902
  return +$16;
 }
 return +0.0;
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $25 = 0, $27 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 32057
 STACKTOP = STACKTOP + 16 | 0; //@line 32058
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 32058
 $4 = sp; //@line 32059
 __ZNKSt3__28ios_base6getlocEv($4, $1); //@line 32060
 __THREW__ = 0; //@line 32061
 $5 = invoke_iii(63, $4 | 0, 35544) | 0; //@line 32062
 $6 = __THREW__; //@line 32063
 __THREW__ = 0; //@line 32063
 if (!($6 & 1)) {
  __THREW__ = 0; //@line 32069
  invoke_iiiii(HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0, $5 | 0, 29766, 29792, $2 | 0) | 0; //@line 32070
  $11 = __THREW__; //@line 32071
  __THREW__ = 0; //@line 32071
  if (!($11 & 1)) {
   __THREW__ = 0; //@line 32074
   $13 = invoke_iii(63, $4 | 0, 35552) | 0; //@line 32075
   $14 = __THREW__; //@line 32076
   __THREW__ = 0; //@line 32076
   if (!($14 & 1)) {
    __THREW__ = 0; //@line 32082
    $19 = invoke_ii(HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] | 0, $13 | 0) | 0; //@line 32083
    $20 = __THREW__; //@line 32084
    __THREW__ = 0; //@line 32084
    if (!($20 & 1)) {
     HEAP32[$3 >> 2] = $19; //@line 32087
     __THREW__ = 0; //@line 32091
     invoke_vii(HEAP32[(HEAP32[$13 >> 2] | 0) + 20 >> 2] | 0, $0 | 0, $13 | 0); //@line 32092
     $25 = __THREW__; //@line 32093
     __THREW__ = 0; //@line 32093
     if (!($25 & 1)) {
      __ZNSt3__26localeD2Ev($4); //@line 32096
      STACKTOP = sp; //@line 32097
      return;
     }
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2() | 0; //@line 32103
 __ZNSt3__26localeD2Ev($4); //@line 32105
 ___resumeException($27 | 0); //@line 32106
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $25 = 0, $27 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 26012
 STACKTOP = STACKTOP + 16 | 0; //@line 26013
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26013
 $4 = sp; //@line 26014
 __ZNKSt3__28ios_base6getlocEv($4, $1); //@line 26015
 __THREW__ = 0; //@line 26016
 $5 = invoke_iii(63, $4 | 0, 35512) | 0; //@line 26017
 $6 = __THREW__; //@line 26018
 __THREW__ = 0; //@line 26018
 if (!($6 & 1)) {
  __THREW__ = 0; //@line 26024
  invoke_iiiii(HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] | 0, $5 | 0, 29766, 29792, $2 | 0) | 0; //@line 26025
  $11 = __THREW__; //@line 26026
  __THREW__ = 0; //@line 26026
  if (!($11 & 1)) {
   __THREW__ = 0; //@line 26029
   $13 = invoke_iii(63, $4 | 0, 35528) | 0; //@line 26030
   $14 = __THREW__; //@line 26031
   __THREW__ = 0; //@line 26031
   if (!($14 & 1)) {
    __THREW__ = 0; //@line 26037
    $19 = invoke_ii(HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] | 0, $13 | 0) | 0; //@line 26038
    $20 = __THREW__; //@line 26039
    __THREW__ = 0; //@line 26039
    if (!($20 & 1)) {
     HEAP8[$3 >> 0] = $19; //@line 26042
     __THREW__ = 0; //@line 26046
     invoke_vii(HEAP32[(HEAP32[$13 >> 2] | 0) + 20 >> 2] | 0, $0 | 0, $13 | 0); //@line 26047
     $25 = __THREW__; //@line 26048
     __THREW__ = 0; //@line 26048
     if (!($25 & 1)) {
      __ZNSt3__26localeD2Ev($4); //@line 26051
      STACKTOP = sp; //@line 26052
      return;
     }
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2() | 0; //@line 26058
 __ZNSt3__26localeD2Ev($4); //@line 26060
 ___resumeException($27 | 0); //@line 26061
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $18 = 0, $2 = 0, $24 = 0, $28 = 0, $29 = 0, $32 = 0, $36 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $6 = 0;
 $1 = $0 + 4 | 0; //@line 20018
 $2 = HEAP32[$1 >> 2] | 0; //@line 20019
 $6 = $2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20023
 do {
  if (HEAP32[$6 + 24 >> 2] | 0) {
   if (!(HEAP32[$6 + 16 >> 2] | 0)) {
    if (HEAP32[$6 + 4 >> 2] & 8192 | 0) {
     if (!(__ZSt18uncaught_exceptionv() | 0)) {
      $18 = HEAP32[$1 >> 2] | 0; //@line 20040
      $24 = HEAP32[$18 + (HEAP32[(HEAP32[$18 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0; //@line 20046
      __THREW__ = 0; //@line 20050
      $28 = invoke_ii(HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0, $24 | 0) | 0; //@line 20051
      $29 = __THREW__; //@line 20052
      __THREW__ = 0; //@line 20052
      if (!($29 & 1)) {
       if (($28 | 0) != -1) {
        break;
       }
       $32 = HEAP32[$1 >> 2] | 0; //@line 20059
       $36 = $32 + (HEAP32[(HEAP32[$32 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 20063
       __THREW__ = 0; //@line 20067
       invoke_vii(112, $36 | 0, HEAP32[$36 + 16 >> 2] | 1 | 0); //@line 20068
       $40 = __THREW__; //@line 20069
       __THREW__ = 0; //@line 20069
       if (!($40 & 1)) {
        break;
       }
      }
      $42 = ___cxa_find_matching_catch_3(0) | 0; //@line 20075
      ___cxa_begin_catch($42 | 0) | 0; //@line 20077
      __THREW__ = 0; //@line 20078
      invoke_v(3); //@line 20079
      $44 = __THREW__; //@line 20080
      __THREW__ = 0; //@line 20080
      if ($44 & 1) {
       $46 = ___cxa_find_matching_catch_3(0) | 0; //@line 20083
       ___clang_call_terminate($46); //@line 20085
      }
     }
    }
   }
  }
 } while (0);
 return;
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 28488
 STACKTOP = STACKTOP + 16 | 0; //@line 28489
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 28489
 $4 = sp; //@line 28490
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4; //@line 28493
  $$1 = 0; //@line 28494
 } else {
  $7 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 28497
  HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 28499
  $10 = _strtoll_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0; //@line 28501
  $11 = tempRet0; //@line 28502
  $13 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 28504
  if (!$13) {
   HEAP32[(___errno_location() | 0) >> 2] = $7; //@line 28508
  }
  L7 : do {
   if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) {
    do {
     if (($13 | 0) == 34) {
      HEAP32[$2 >> 2] = 4; //@line 28517
      if (($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 0) {
       $$0 = 2147483647; //@line 28524
       break L7;
      }
     } else {
      if (($11 | 0) < -1 | ($11 | 0) == -1 & $10 >>> 0 < 2147483648) {
       HEAP32[$2 >> 2] = 4; //@line 28534
       break;
      }
      if (($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 2147483647) {
       HEAP32[$2 >> 2] = 4; //@line 28543
       $$0 = 2147483647; //@line 28544
       break L7;
      } else {
       $$0 = $10; //@line 28547
       break L7;
      }
     }
    } while (0);
    $$0 = -2147483648; //@line 28552
   } else {
    HEAP32[$2 >> 2] = 4; //@line 28554
    $$0 = 0; //@line 28555
   }
  } while (0);
  $$1 = $$0; //@line 28558
 }
 STACKTOP = sp; //@line 28560
 return $$1 | 0; //@line 28560
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 39003
 STACKTOP = STACKTOP + 16 | 0; //@line 39004
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39004
 $1 = sp; //@line 39005
 L1 : do {
  if (!(HEAP8[33192] | 0)) {
   if (___cxa_guard_acquire(33192) | 0) {
    HEAP32[8899] = 0; //@line 39013
    HEAP32[8900] = 0; //@line 39013
    HEAP32[8901] = 0; //@line 39013
    $6 = __ZNSt3__211char_traitsIcE6lengthEPKc(30242) | 0; //@line 39014
    do {
     if ($6 >>> 0 > 4294967279) {
      __THREW__ = 0; //@line 39018
      invoke_vi(258, 35596); //@line 39019
      __THREW__ = 0; //@line 39020
     } else {
      if ($6 >>> 0 < 11) {
       HEAP8[35607] = $6; //@line 39025
       $$0$i$i = 35596; //@line 39026
      } else {
       $12 = $6 + 16 & -16; //@line 39029
       __THREW__ = 0; //@line 39030
       $13 = invoke_ii(142, $12 | 0) | 0; //@line 39031
       $14 = __THREW__; //@line 39032
       __THREW__ = 0; //@line 39032
       if ($14 & 1) {
        break;
       }
       HEAP32[8899] = $13; //@line 39037
       HEAP32[8901] = $12 | -2147483648; //@line 39039
       HEAP32[8900] = $6; //@line 39040
       $$0$i$i = $13; //@line 39041
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 30242, $6) | 0; //@line 39043
      HEAP8[$1 >> 0] = 0; //@line 39045
      __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $6 | 0, $1); //@line 39046
      break L1;
     }
    } while (0);
    $18 = ___cxa_find_matching_catch_2() | 0; //@line 39050
    ___resumeException($18 | 0); //@line 39052
   }
  }
 } while (0);
 STACKTOP = sp; //@line 39057
 return 35596; //@line 39057
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 38943
 STACKTOP = STACKTOP + 16 | 0; //@line 38944
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 38944
 $1 = sp; //@line 38945
 L1 : do {
  if (!(HEAP8[33200] | 0)) {
   if (___cxa_guard_acquire(33200) | 0) {
    HEAP32[8902] = 0; //@line 38953
    HEAP32[8903] = 0; //@line 38953
    HEAP32[8904] = 0; //@line 38953
    $6 = __ZNSt3__211char_traitsIcE6lengthEPKc(30251) | 0; //@line 38954
    do {
     if ($6 >>> 0 > 4294967279) {
      __THREW__ = 0; //@line 38958
      invoke_vi(258, 35608); //@line 38959
      __THREW__ = 0; //@line 38960
     } else {
      if ($6 >>> 0 < 11) {
       HEAP8[35619] = $6; //@line 38965
       $$0$i$i = 35608; //@line 38966
      } else {
       $12 = $6 + 16 & -16; //@line 38969
       __THREW__ = 0; //@line 38970
       $13 = invoke_ii(142, $12 | 0) | 0; //@line 38971
       $14 = __THREW__; //@line 38972
       __THREW__ = 0; //@line 38972
       if ($14 & 1) {
        break;
       }
       HEAP32[8902] = $13; //@line 38977
       HEAP32[8904] = $12 | -2147483648; //@line 38979
       HEAP32[8903] = $6; //@line 38980
       $$0$i$i = $13; //@line 38981
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 30251, $6) | 0; //@line 38983
      HEAP8[$1 >> 0] = 0; //@line 38985
      __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $6 | 0, $1); //@line 38986
      break L1;
     }
    } while (0);
    $18 = ___cxa_find_matching_catch_2() | 0; //@line 38990
    ___resumeException($18 | 0); //@line 38992
   }
  }
 } while (0);
 STACKTOP = sp; //@line 38997
 return 35608; //@line 38997
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 38883
 STACKTOP = STACKTOP + 16 | 0; //@line 38884
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 38884
 $1 = sp; //@line 38885
 L1 : do {
  if (!(HEAP8[33208] | 0)) {
   if (___cxa_guard_acquire(33208) | 0) {
    HEAP32[8905] = 0; //@line 38893
    HEAP32[8906] = 0; //@line 38893
    HEAP32[8907] = 0; //@line 38893
    $6 = __ZNSt3__211char_traitsIcE6lengthEPKc(30263) | 0; //@line 38894
    do {
     if ($6 >>> 0 > 4294967279) {
      __THREW__ = 0; //@line 38898
      invoke_vi(258, 35620); //@line 38899
      __THREW__ = 0; //@line 38900
     } else {
      if ($6 >>> 0 < 11) {
       HEAP8[35631] = $6; //@line 38905
       $$0$i$i = 35620; //@line 38906
      } else {
       $12 = $6 + 16 & -16; //@line 38909
       __THREW__ = 0; //@line 38910
       $13 = invoke_ii(142, $12 | 0) | 0; //@line 38911
       $14 = __THREW__; //@line 38912
       __THREW__ = 0; //@line 38912
       if ($14 & 1) {
        break;
       }
       HEAP32[8905] = $13; //@line 38917
       HEAP32[8907] = $12 | -2147483648; //@line 38919
       HEAP32[8906] = $6; //@line 38920
       $$0$i$i = $13; //@line 38921
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 30263, $6) | 0; //@line 38923
      HEAP8[$1 >> 0] = 0; //@line 38925
      __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $6 | 0, $1); //@line 38926
      break L1;
     }
    } while (0);
    $18 = ___cxa_find_matching_catch_2() | 0; //@line 38930
    ___resumeException($18 | 0); //@line 38932
   }
  }
 } while (0);
 STACKTOP = sp; //@line 38937
 return 35620; //@line 38937
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0 | 0;
 var $$0$i$i = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 39063
 STACKTOP = STACKTOP + 16 | 0; //@line 39064
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39064
 $1 = sp; //@line 39065
 L1 : do {
  if (!(HEAP8[33184] | 0)) {
   if (___cxa_guard_acquire(33184) | 0) {
    HEAP32[8896] = 0; //@line 39073
    HEAP32[8897] = 0; //@line 39073
    HEAP32[8898] = 0; //@line 39073
    $6 = __ZNSt3__211char_traitsIcE6lengthEPKc(30233) | 0; //@line 39074
    do {
     if ($6 >>> 0 > 4294967279) {
      __THREW__ = 0; //@line 39078
      invoke_vi(258, 35584); //@line 39079
      __THREW__ = 0; //@line 39080
     } else {
      if ($6 >>> 0 < 11) {
       HEAP8[35595] = $6; //@line 39085
       $$0$i$i = 35584; //@line 39086
      } else {
       $12 = $6 + 16 & -16; //@line 39089
       __THREW__ = 0; //@line 39090
       $13 = invoke_ii(142, $12 | 0) | 0; //@line 39091
       $14 = __THREW__; //@line 39092
       __THREW__ = 0; //@line 39092
       if ($14 & 1) {
        break;
       }
       HEAP32[8896] = $13; //@line 39097
       HEAP32[8898] = $12 | -2147483648; //@line 39099
       HEAP32[8897] = $6; //@line 39100
       $$0$i$i = $13; //@line 39101
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 30233, $6) | 0; //@line 39103
      HEAP8[$1 >> 0] = 0; //@line 39105
      __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $6 | 0, $1); //@line 39106
      break L1;
     }
    } while (0);
    $18 = ___cxa_find_matching_catch_2() | 0; //@line 39110
    ___resumeException($18 | 0); //@line 39112
   }
  }
 } while (0);
 STACKTOP = sp; //@line 39117
 return 35584; //@line 39117
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $15 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26071
 STACKTOP = STACKTOP + 16 | 0; //@line 26072
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26072
 $4 = sp; //@line 26073
 do {
  if (($0 | 0) == ($1 | 0)) {
   HEAP32[$2 >> 2] = 4; //@line 26077
   $21 = 0; //@line 26078
   $22 = 0; //@line 26078
  } else {
   if ((HEAP8[$0 >> 0] | 0) == 45) {
    HEAP32[$2 >> 2] = 4; //@line 26083
    $21 = 0; //@line 26084
    $22 = 0; //@line 26084
    break;
   }
   $9 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 26088
   HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 26090
   $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0; //@line 26092
   $13 = tempRet0; //@line 26093
   $15 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 26095
   if (!$15) {
    HEAP32[(___errno_location() | 0) >> 2] = $9; //@line 26099
   }
   if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) {
    if (($15 | 0) == 34) {
     $23 = -1; //@line 26106
     $24 = -1; //@line 26106
     label = 8; //@line 26107
    } else {
     $25 = $12; //@line 26109
     $26 = $13; //@line 26109
    }
   } else {
    $23 = 0; //@line 26112
    $24 = 0; //@line 26112
    label = 8; //@line 26113
   }
   if ((label | 0) == 8) {
    HEAP32[$2 >> 2] = 4; //@line 26116
    $25 = $23; //@line 26117
    $26 = $24; //@line 26117
   }
   $21 = $26; //@line 26119
   $22 = $25; //@line 26119
  }
 } while (0);
 tempRet0 = $21; //@line 26122
 STACKTOP = sp; //@line 26123
 return $22 | 0; //@line 26123
}
function ___stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$cast = 0, $11 = 0, $18 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6818
 STACKTOP = STACKTOP + 32 | 0; //@line 6819
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6819
 $vararg_buffer = sp; //@line 6820
 $3 = sp + 16 | 0; //@line 6821
 HEAP32[$3 >> 2] = $1; //@line 6822
 $4 = $3 + 4 | 0; //@line 6823
 $5 = $0 + 48 | 0; //@line 6824
 $6 = HEAP32[$5 >> 2] | 0; //@line 6825
 HEAP32[$4 >> 2] = $2 - (($6 | 0) != 0 & 1); //@line 6829
 $11 = $0 + 44 | 0; //@line 6831
 HEAP32[$3 + 8 >> 2] = HEAP32[$11 >> 2]; //@line 6833
 HEAP32[$3 + 12 >> 2] = $6; //@line 6835
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 6839
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 6841
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 6843
 $18 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0; //@line 6845
 if (($18 | 0) < 1) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $18 & 48 ^ 16; //@line 6852
  $$0 = $18; //@line 6853
 } else {
  $24 = HEAP32[$4 >> 2] | 0; //@line 6855
  if ($18 >>> 0 > $24 >>> 0) {
   $27 = HEAP32[$11 >> 2] | 0; //@line 6859
   $28 = $0 + 4 | 0; //@line 6860
   HEAP32[$28 >> 2] = $27; //@line 6861
   $$cast = $27; //@line 6862
   HEAP32[$0 + 8 >> 2] = $$cast + ($18 - $24); //@line 6865
   if (!(HEAP32[$5 >> 2] | 0)) {
    $$0 = $2; //@line 6869
   } else {
    HEAP32[$28 >> 2] = $$cast + 1; //@line 6872
    HEAP8[$1 + ($2 + -1) >> 0] = HEAP8[$$cast >> 0] | 0; //@line 6876
    $$0 = $2; //@line 6877
   }
  } else {
   $$0 = $18; //@line 6880
  }
 }
 STACKTOP = sp; //@line 6883
 return $$0 | 0; //@line 6883
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 62512
 STACKTOP = STACKTOP + 16 | 0; //@line 62513
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62513
 $2 = sp; //@line 62514
 $3 = sp + 4 | 0; //@line 62515
 HEAP32[$2 >> 2] = $1; //@line 62516
 $4 = $0 + 8 | 0; //@line 62517
 $5 = $4 + 3 | 0; //@line 62518
 $6 = HEAP8[$5 >> 0] | 0; //@line 62519
 $7 = $6 << 24 >> 24 < 0; //@line 62520
 if ($7) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0; //@line 62527
  $$019 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0; //@line 62527
 } else {
  $$018 = $6 & 255; //@line 62530
  $$019 = 1; //@line 62530
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0, $$019, 1, $$019, $$019, 0, 0); //@line 62534
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   label = 8; //@line 62538
  } else {
   label = 7; //@line 62540
  }
 } else {
  if ($7) {
   label = 8; //@line 62544
  } else {
   label = 7; //@line 62546
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$5 >> 0] = $$018 + 1; //@line 62552
  $$pn = $0; //@line 62553
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$0 >> 2] | 0; //@line 62556
  HEAP32[$0 + 4 >> 2] = $$018 + 1; //@line 62559
  $$pn = $19; //@line 62560
 }
 $$0 = $$pn + ($$018 << 2) | 0; //@line 62562
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $2); //@line 62563
 HEAP32[$3 >> 2] = 0; //@line 62565
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0 + 4 | 0, $3); //@line 62566
 STACKTOP = sp; //@line 62567
 return;
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $29 = 0, $8 = 0;
 if (($1 | 0) == 1) {
  $$0 = 2; //@line 22397
 } else {
  if (!($1 + -1 & $1)) {
   $$0 = $1; //@line 22403
  } else {
   $$0 = __ZNSt3__212__next_primeEj($1) | 0; //@line 22406
  }
 }
 $8 = HEAP32[$0 + 4 >> 2] | 0; //@line 22410
 if ($$0 >>> 0 > $8 >>> 0) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $$0); //@line 22413
  return;
 }
 if ($$0 >>> 0 >= $8 >>> 0) {
  return;
 }
 $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0; //@line 22432
 if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
  $29 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0); //@line 22438
 } else {
  $29 = __ZNSt3__212__next_primeEj($22) | 0; //@line 22441
 }
 $$sroa$speculated = $$0 >>> 0 < $29 >>> 0 ? $29 : $$0; //@line 22444
 if ($$sroa$speculated >>> 0 >= $8 >>> 0) {
  return;
 }
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $$sroa$speculated); //@line 22449
 return;
}
function __ZN16FunctionAnalyzer11isInlinableE13CharmFunction($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 24300
 STACKTOP = STACKTOP + 96 | 0; //@line 24301
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 24301
 $2 = sp + 72 | 0; //@line 24302
 $3 = sp; //@line 24303
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2, $1 + 52 | 0); //@line 24305
 __THREW__ = 0; //@line 24306
 invoke_vii(120, $3 | 0, $1 | 0); //@line 24307
 $5 = __THREW__; //@line 24308
 __THREW__ = 0; //@line 24308
 do {
  if ($5 & 1) {
   $14 = ___cxa_find_matching_catch_2() | 0; //@line 24312
   $$0 = tempRet0; //@line 24314
   $$02 = $14; //@line 24314
  } else {
   __THREW__ = 0; //@line 24316
   $7 = invoke_iiii(35, $0 | 0, $2 | 0, $3 | 0) | 0; //@line 24317
   $8 = __THREW__; //@line 24318
   __THREW__ = 0; //@line 24318
   if ($8 & 1) {
    $16 = ___cxa_find_matching_catch_2() | 0; //@line 24321
    $17 = tempRet0; //@line 24322
    __ZN13CharmFunctionD2Ev($3); //@line 24323
    $$0 = $17; //@line 24324
    $$02 = $16; //@line 24324
    break;
   }
   __ZN13CharmFunctionD2Ev($3); //@line 24327
   if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) {
    STACKTOP = sp; //@line 24332
    return $7 | 0; //@line 24332
   }
   __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 24335
   STACKTOP = sp; //@line 24336
   return $7 | 0; //@line 24336
  }
 } while (0);
 if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) {
  ___resumeException($$02 | 0); //@line 24343
 }
 __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 24347
 ___resumeException($$02 | 0); //@line 24348
 return 0; //@line 24350
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $29 = 0, $8 = 0;
 if (($1 | 0) == 1) {
  $$0 = 2; //@line 16029
 } else {
  if (!($1 + -1 & $1)) {
   $$0 = $1; //@line 16035
  } else {
   $$0 = __ZNSt3__212__next_primeEj($1) | 0; //@line 16038
  }
 }
 $8 = HEAP32[$0 + 4 >> 2] | 0; //@line 16042
 if ($$0 >>> 0 > $8 >>> 0) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $$0); //@line 16045
  return;
 }
 if ($$0 >>> 0 >= $8 >>> 0) {
  return;
 }
 $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0; //@line 16064
 if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
  $29 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0); //@line 16070
 } else {
  $29 = __ZNSt3__212__next_primeEj($22) | 0; //@line 16073
 }
 $$sroa$speculated = $$0 >>> 0 < $29 >>> 0 ? $29 : $$0; //@line 16076
 if ($$sroa$speculated >>> 0 >= $8 >>> 0) {
  return;
 }
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $$sroa$speculated); //@line 16081
 return;
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $29 = 0, $8 = 0;
 if (($1 | 0) == 1) {
  $$0 = 2; //@line 2967
 } else {
  if (!($1 + -1 & $1)) {
   $$0 = $1; //@line 2973
  } else {
   $$0 = __ZNSt3__212__next_primeEj($1) | 0; //@line 2976
  }
 }
 $8 = HEAP32[$0 + 4 >> 2] | 0; //@line 2980
 if ($$0 >>> 0 > $8 >>> 0) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $$0); //@line 2983
  return;
 }
 if ($$0 >>> 0 >= $8 >>> 0) {
  return;
 }
 $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0; //@line 3002
 if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
  $29 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0); //@line 3008
 } else {
  $29 = __ZNSt3__212__next_primeEj($22) | 0; //@line 3011
 }
 $$sroa$speculated = $$0 >>> 0 < $29 >>> 0 ? $29 : $$0; //@line 3014
 if ($$sroa$speculated >>> 0 >= $8 >>> 0) {
  return;
 }
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $$sroa$speculated); //@line 3019
 return;
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $29 = 0, $8 = 0;
 if (($1 | 0) == 1) {
  $$0 = 2; //@line 23348
 } else {
  if (!($1 + -1 & $1)) {
   $$0 = $1; //@line 23354
  } else {
   $$0 = __ZNSt3__212__next_primeEj($1) | 0; //@line 23357
  }
 }
 $8 = HEAP32[$0 + 4 >> 2] | 0; //@line 23361
 if ($$0 >>> 0 > $8 >>> 0) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $$0); //@line 23364
  return;
 }
 if ($$0 >>> 0 >= $8 >>> 0) {
  return;
 }
 $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0; //@line 23383
 if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
  $29 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0); //@line 23389
 } else {
  $29 = __ZNSt3__212__next_primeEj($22) | 0; //@line 23392
 }
 $$sroa$speculated = $$0 >>> 0 < $29 >>> 0 ? $29 : $$0; //@line 23395
 if ($$sroa$speculated >>> 0 >= $8 >>> 0) {
  return;
 }
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE8__rehashEj($0, $$sroa$speculated); //@line 23400
 return;
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE6rehashEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$sroa$speculated = 0, $22 = 0, $29 = 0, $8 = 0;
 if (($1 | 0) == 1) {
  $$0 = 2; //@line 25547
 } else {
  if (!($1 + -1 & $1)) {
   $$0 = $1; //@line 25553
  } else {
   $$0 = __ZNSt3__212__next_primeEj($1) | 0; //@line 25556
  }
 }
 $8 = HEAP32[$0 + 4 >> 2] | 0; //@line 25560
 if ($$0 >>> 0 > $8 >>> 0) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE8__rehashEj($0, $$0); //@line 25563
  return;
 }
 if ($$0 >>> 0 >= $8 >>> 0) {
  return;
 }
 $22 = ~~+Math_ceil(+(+((HEAP32[$0 + 12 >> 2] | 0) >>> 0) / +HEAPF32[$0 + 16 >> 2])) >>> 0; //@line 25582
 if ($8 >>> 0 > 2 & ($8 + -1 & $8 | 0) == 0) {
  $29 = 1 << 32 - (Math_clz32($22 + -1 | 0) | 0); //@line 25588
 } else {
  $29 = __ZNSt3__212__next_primeEj($22) | 0; //@line 25591
 }
 $$sroa$speculated = $$0 >>> 0 < $29 >>> 0 ? $29 : $$0; //@line 25594
 if ($$sroa$speculated >>> 0 >= $8 >>> 0) {
  return;
 }
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE8__rehashEj($0, $$sroa$speculated); //@line 25599
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 65315
 value = value & 255; //@line 65317
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 65320
   ptr = ptr + 1 | 0; //@line 65321
  }
  aligned_end = end & -4 | 0; //@line 65324
  block_aligned_end = aligned_end - 64 | 0; //@line 65325
  value4 = value | value << 8 | value << 16 | value << 24; //@line 65326
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 65329
   HEAP32[ptr + 4 >> 2] = value4; //@line 65330
   HEAP32[ptr + 8 >> 2] = value4; //@line 65331
   HEAP32[ptr + 12 >> 2] = value4; //@line 65332
   HEAP32[ptr + 16 >> 2] = value4; //@line 65333
   HEAP32[ptr + 20 >> 2] = value4; //@line 65334
   HEAP32[ptr + 24 >> 2] = value4; //@line 65335
   HEAP32[ptr + 28 >> 2] = value4; //@line 65336
   HEAP32[ptr + 32 >> 2] = value4; //@line 65337
   HEAP32[ptr + 36 >> 2] = value4; //@line 65338
   HEAP32[ptr + 40 >> 2] = value4; //@line 65339
   HEAP32[ptr + 44 >> 2] = value4; //@line 65340
   HEAP32[ptr + 48 >> 2] = value4; //@line 65341
   HEAP32[ptr + 52 >> 2] = value4; //@line 65342
   HEAP32[ptr + 56 >> 2] = value4; //@line 65343
   HEAP32[ptr + 60 >> 2] = value4; //@line 65344
   ptr = ptr + 64 | 0; //@line 65345
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 65349
   ptr = ptr + 4 | 0; //@line 65350
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 65355
  ptr = ptr + 1 | 0; //@line 65356
 }
 return end - num | 0; //@line 65358
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 61529
 STACKTOP = STACKTOP + 16 | 0; //@line 61530
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61530
 $2 = sp; //@line 61531
 $3 = sp + 1 | 0; //@line 61532
 HEAP8[$2 >> 0] = $1; //@line 61533
 $4 = $0 + 11 | 0; //@line 61534
 $5 = HEAP8[$4 >> 0] | 0; //@line 61535
 $6 = $5 << 24 >> 24 < 0; //@line 61536
 if ($6) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0; //@line 61544
  $$019 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; //@line 61544
 } else {
  $$018 = $5 & 255; //@line 61547
  $$019 = 10; //@line 61547
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0, $$019, 1, $$019, $$019, 0, 0); //@line 61551
  if ((HEAP8[$4 >> 0] | 0) < 0) {
   label = 8; //@line 61555
  } else {
   label = 7; //@line 61557
  }
 } else {
  if ($6) {
   label = 8; //@line 61561
  } else {
   label = 7; //@line 61563
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$4 >> 0] = $$018 + 1; //@line 61569
  $$pn = $0; //@line 61570
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$0 >> 2] | 0; //@line 61573
  HEAP32[$0 + 4 >> 2] = $$018 + 1; //@line 61576
  $$pn = $19; //@line 61577
 }
 $$0 = $$pn + $$018 | 0; //@line 61579
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $2); //@line 61580
 HEAP8[$3 >> 0] = 0; //@line 61582
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + 1 | 0, $3); //@line 61583
 STACKTOP = sp; //@line 61584
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sroa$speculated = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 61676
 STACKTOP = STACKTOP + 16 | 0; //@line 61677
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61677
 $3 = sp; //@line 61678
 $4 = $0 + 11 | 0; //@line 61679
 $5 = HEAP8[$4 >> 0] | 0; //@line 61680
 $6 = $5 << 24 >> 24 < 0; //@line 61681
 if ($6) {
  $10 = HEAP32[$0 + 4 >> 2] | 0; //@line 61685
 } else {
  $10 = $5 & 255; //@line 61688
 }
 if ($10 >>> 0 < $1 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0); //@line 61692
 }
 if ($2 | 0) {
  if ($6) {
   $19 = HEAP32[$0 >> 2] | 0; //@line 61699
  } else {
   $19 = $0; //@line 61701
  }
  $14 = $10 - $1 | 0; //@line 61703
  $$sroa$speculated = $14 >>> 0 < $2 >>> 0 ? $14 : $2; //@line 61705
  $16 = $14 - $$sroa$speculated | 0; //@line 61706
  if (!$16) {
   $22 = $5; //@line 61709
  } else {
   $18 = $19 + $1 | 0; //@line 61711
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($18, $18 + $$sroa$speculated | 0, $16) | 0; //@line 61713
   $22 = HEAP8[$4 >> 0] | 0; //@line 61715
  }
  $21 = $10 - $$sroa$speculated | 0; //@line 61717
  if ($22 << 24 >> 24 < 0) {
   HEAP32[$0 + 4 >> 2] = $21; //@line 61721
  } else {
   HEAP8[$4 >> 0] = $21; //@line 61724
  }
  HEAP8[$3 >> 0] = 0; //@line 61727
  __ZNSt3__211char_traitsIcE6assignERcRKc($19 + $21 | 0, $3); //@line 61728
 }
 STACKTOP = sp; //@line 61730
 return $0 | 0; //@line 61730
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $25 = 0, $29 = 0, $7 = 0, $phitmp = 0;
 do {
  if (!$0) {
   if (!(HEAP32[1298] | 0)) {
    $29 = 0; //@line 14025
   } else {
    $29 = _fflush(HEAP32[1298] | 0) | 0; //@line 14029
   }
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 14032
   if (!$$02325) {
    $$024$lcssa = $29; //@line 14035
   } else {
    $$02327 = $$02325; //@line 14037
    $$02426 = $29; //@line 14037
    while (1) {
     if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
      $25 = ___lockfile($$02327) | 0; //@line 14044
     } else {
      $25 = 0; //@line 14046
     }
     if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
      $$1 = ___fflush_unlocked($$02327) | 0 | $$02426; //@line 14056
     } else {
      $$1 = $$02426; //@line 14058
     }
     if ($25 | 0) {
      ___unlockfile($$02327); //@line 14062
     }
     $$02327 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 14065
     if (!$$02327) {
      $$024$lcssa = $$1; //@line 14068
      break;
     } else {
      $$02426 = $$1; //@line 14071
     }
    }
   }
   ___ofl_unlock(); //@line 14075
   $$0 = $$024$lcssa; //@line 14076
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $$0 = ___fflush_unlocked($0) | 0; //@line 14083
    break;
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 14087
   $7 = ___fflush_unlocked($0) | 0; //@line 14088
   if ($phitmp) {
    $$0 = $7; //@line 14090
   } else {
    ___unlockfile($0); //@line 14092
    $$0 = $7; //@line 14093
   }
  }
 } while (0);
 return $$0 | 0; //@line 14097
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $$027$off0$ph = 0, $$1 = 0, $$2 = 0, $$2$ph = 0, $$sink1$sink = 0, $11 = 0, $12 = 0, $15 = 0, $9 = 0;
 if (!($2 & 2048)) {
  $$0 = $0; //@line 35683
 } else {
  HEAP8[$0 >> 0] = 43; //@line 35686
  $$0 = $0 + 1 | 0; //@line 35687
 }
 if (!($2 & 1024)) {
  $$1 = $$0; //@line 35692
 } else {
  HEAP8[$$0 >> 0] = 35; //@line 35695
  $$1 = $$0 + 1 | 0; //@line 35696
 }
 $9 = $2 & 260; //@line 35698
 $11 = ($2 & 16384 | 0) != 0; //@line 35700
 $12 = ($9 | 0) == 260; //@line 35701
 if ($12) {
  $$027$off0$ph = 0; //@line 35703
  $$2$ph = $$1; //@line 35703
 } else {
  HEAP8[$$1 >> 0] = 46; //@line 35706
  HEAP8[$$1 + 1 >> 0] = 42; //@line 35708
  $$027$off0$ph = 1; //@line 35709
  $$2$ph = $$1 + 2 | 0; //@line 35709
 }
 $$026 = $1; //@line 35711
 $$2 = $$2$ph; //@line 35711
 while (1) {
  $15 = HEAP8[$$026 >> 0] | 0; //@line 35713
  if (!($15 << 24 >> 24)) {
   break;
  }
  HEAP8[$$2 >> 0] = $15; //@line 35720
  $$026 = $$026 + 1 | 0; //@line 35721
  $$2 = $$2 + 1 | 0; //@line 35721
 }
 L14 : do {
  switch ($9 & 511) {
  case 4:
   {
    $$sink1$sink = $11 ? 70 : 102; //@line 35729
    break;
   }
  case 256:
   {
    $$sink1$sink = $11 ? 69 : 101; //@line 35734
    break;
   }
  default:
   {
    if ($12) {
     $$sink1$sink = $11 ? 65 : 97; //@line 35740
     break L14;
    } else {
     $$sink1$sink = $11 ? 71 : 103; //@line 35744
     break L14;
    }
   }
  }
 } while (0);
 HEAP8[$$2 >> 0] = $$sink1$sink; //@line 35750
 return $$027$off0$ph | 0; //@line 35751
}
function _initCapsule() {
 var $$0$i$sink = 0, $$02$i$sink = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0;
 $0 = __Znwj(8) | 0; //@line 46
 __THREW__ = 0; //@line 47
 $1 = invoke_ii(142, 40) | 0; //@line 48
 $2 = __THREW__; //@line 49
 __THREW__ = 0; //@line 49
 if (!($2 & 1)) {
  __THREW__ = 0; //@line 52
  invoke_vi(251, $1 | 0); //@line 53
  $4 = __THREW__; //@line 54
  __THREW__ = 0; //@line 54
  if ($4 & 1) {
   $11 = ___cxa_find_matching_catch_2() | 0; //@line 57
   $12 = tempRet0; //@line 58
   __ZdlPv($1); //@line 59
   $$0$i$sink = $12; //@line 60
   $$02$i$sink = $11; //@line 60
   __ZdlPv($0); //@line 61
   ___resumeException($$02$i$sink | 0); //@line 62
  }
  HEAP32[$0 >> 2] = $1; //@line 65
  __THREW__ = 0; //@line 66
  $6 = invoke_ii(142, 128) | 0; //@line 67
  $7 = __THREW__; //@line 68
  __THREW__ = 0; //@line 68
  if (!($7 & 1)) {
   __THREW__ = 0; //@line 71
   invoke_vi(252, $6 | 0); //@line 72
   $9 = __THREW__; //@line 73
   __THREW__ = 0; //@line 73
   if (!($9 & 1)) {
    HEAP32[$0 + 4 >> 2] = $6; //@line 77
    return $0 | 0; //@line 78
   }
   $13 = ___cxa_find_matching_catch_2() | 0; //@line 80
   $14 = tempRet0; //@line 81
   __ZdlPv($6); //@line 82
   $$0$i$sink = $14; //@line 83
   $$02$i$sink = $13; //@line 83
   __ZdlPv($0); //@line 84
   ___resumeException($$02$i$sink | 0); //@line 85
  }
 }
 $16 = ___cxa_find_matching_catch_2() | 0; //@line 89
 $$0$i$sink = tempRet0; //@line 91
 $$02$i$sink = $16; //@line 91
 __ZdlPv($0); //@line 92
 ___resumeException($$02$i$sink | 0); //@line 93
 return 0; //@line 95
}
function __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $3 = 0, $33 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0;
 $1 = $0 + 12 | 0; //@line 20958
 $2 = $0 + 24 | 0; //@line 20959
 $3 = HEAP32[$2 >> 2] | 0; //@line 20960
 if ($3 | 0) {
  $5 = $0 + 28 | 0; //@line 20963
  $6 = HEAP32[$5 >> 2] | 0; //@line 20964
  if (($6 | 0) == ($3 | 0)) {
   $33 = $3; //@line 20967
  } else {
   $9 = $6; //@line 20969
   do {
    $8 = $9 + -24 | 0; //@line 20971
    HEAP32[$5 >> 2] = $8; //@line 20972
    $11 = HEAP32[$9 + -12 >> 2] | 0; //@line 20974
    if ($11 | 0) {
     $13 = $9 + -8 | 0; //@line 20977
     $14 = HEAP32[$13 >> 2] | 0; //@line 20978
     if (($14 | 0) != ($11 | 0)) {
      HEAP32[$13 >> 2] = $14 + (~(($14 + -4 - $11 | 0) >>> 2) << 2); //@line 20988
     }
     __ZdlPv($11); //@line 20990
    }
    $21 = HEAP32[$8 >> 2] | 0; //@line 20992
    if ($21 | 0) {
     $25 = $9 + -20 | 0; //@line 20995
     $26 = HEAP32[$25 >> 2] | 0; //@line 20996
     if (($26 | 0) != ($21 | 0)) {
      HEAP32[$25 >> 2] = $26 + (~(($26 + -4 - $21 | 0) >>> 2) << 2); //@line 21006
     }
     __ZdlPv($21); //@line 21008
    }
    $9 = HEAP32[$5 >> 2] | 0; //@line 21010
   } while (($9 | 0) != ($3 | 0));
   $33 = HEAP32[$2 >> 2] | 0; //@line 21019
  }
  __ZdlPv($33); //@line 21021
 }
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$1 >> 2] | 0); //@line 21028
 }
 if ((HEAP8[$0 + 11 >> 0] | 0) >= 0) {
  return;
 }
 __ZdlPv(HEAP32[$0 >> 2] | 0); //@line 21037
 return;
}
function ___newlocale($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$03339 = 0, $$03440 = 0, $$036 = 0, $$13538 = 0, $$pre42 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 17271
 STACKTOP = STACKTOP + 32 | 0; //@line 17272
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17272
 $3 = sp; //@line 17273
 L1 : do {
  if (!(___loc_is_allocated($2) | 0)) {
   $6 = ($2 | 0) != 0; //@line 17278
   $$03339 = 0; //@line 17279
   $$13538 = 0; //@line 17279
   do {
    $$pre42 = 1 << $$13538 & $0; //@line 17282
    if ($6 & ($$pre42 | 0) == 0) {
     $$0 = HEAP32[$2 + ($$13538 << 2) >> 2] | 0; //@line 17288
    } else {
     $$0 = ___get_locale($$13538, $$pre42 | 0 ? $1 : 39514) | 0; //@line 17293
    }
    $$03339 = $$03339 + (($$0 | 0) != 0 & 1) | 0; //@line 17297
    HEAP32[$3 + ($$13538 << 2) >> 2] = $$0; //@line 17299
    $$13538 = $$13538 + 1 | 0; //@line 17300
   } while (($$13538 | 0) != 6);
   switch ($$03339 | 0) {
   case 0:
    {
     $$036 = 34408; //@line 17310
     break L1;
     break;
    }
   case 1:
    {
     if ((HEAP32[$3 >> 2] | 0) == 5528) {
      $$036 = 5576; //@line 17318
      break L1;
     }
     break;
    }
   default:
    {}
   }
   $$036 = $2; //@line 17326
  } else {
   $$03440 = 0; //@line 17328
   do {
    if (1 << $$03440 & $0 | 0) {
     HEAP32[$2 + ($$03440 << 2) >> 2] = ___get_locale($$03440, $1) | 0; //@line 17336
    }
    $$03440 = $$03440 + 1 | 0; //@line 17338
   } while (($$03440 | 0) != 6);
   $$036 = $2; //@line 17341
  }
 } while (0);
 STACKTOP = sp; //@line 17349
 return $$036 | 0; //@line 17349
}
function __ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEEC2ERKS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $17 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $7 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 0; //@line 22245
 $2 = $0 + 4 | 0; //@line 22246
 HEAP32[$2 >> 2] = 0; //@line 22247
 HEAP32[$0 + 8 >> 2] = 0; //@line 22249
 $4 = $1 + 4 | 0; //@line 22250
 $7 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) | 0; //@line 22253
 $8 = $7 >> 2; //@line 22254
 if (!$8) {
  return;
 }
 if ($8 >>> 0 > 1073741823) {
  __THREW__ = 0; //@line 22261
  invoke_vi(254, $0 | 0); //@line 22262
  __THREW__ = 0; //@line 22263
 } else {
  __THREW__ = 0; //@line 22265
  $12 = invoke_ii(142, $7 | 0) | 0; //@line 22266
  $13 = __THREW__; //@line 22267
  __THREW__ = 0; //@line 22267
  if (!($13 & 1)) {
   HEAP32[$2 >> 2] = $12; //@line 22270
   HEAP32[$0 >> 2] = $12; //@line 22271
   HEAP32[$0 + 8 >> 2] = $12 + ($8 << 2); //@line 22274
   $17 = HEAP32[$1 >> 2] | 0; //@line 22275
   $20 = (HEAP32[$4 >> 2] | 0) - $17 | 0; //@line 22278
   if (($20 | 0) <= 0) {
    return;
   }
   _memcpy($12 | 0, $17 | 0, $20 | 0) | 0; //@line 22284
   HEAP32[$2 >> 2] = $12 + ($20 >>> 2 << 2); //@line 22286
   return;
  }
 }
 $24 = ___cxa_find_matching_catch_2() | 0; //@line 22290
 $26 = HEAP32[$0 >> 2] | 0; //@line 22292
 if (!$26) {
  ___resumeException($24 | 0); //@line 22295
 }
 $28 = HEAP32[$2 >> 2] | 0; //@line 22298
 if (($28 | 0) != ($26 | 0)) {
  HEAP32[$2 >> 2] = $28 + (~(($28 + -4 - $26 | 0) >>> 2) << 2); //@line 22308
 }
 __ZdlPv($26); //@line 22310
 ___resumeException($24 | 0); //@line 22311
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 4780; //@line 20705
 $1 = $0 + 64 | 0; //@line 20706
 $2 = HEAP32[$1 >> 2] | 0; //@line 20707
 do {
  if ($2 | 0) {
   __THREW__ = 0; //@line 20711
   invoke_ii(78, $0 | 0) | 0; //@line 20712
   $4 = __THREW__; //@line 20713
   __THREW__ = 0; //@line 20713
   if ($4 & 1) {
    $8 = ___cxa_find_matching_catch_3(0) | 0; //@line 20716
    _fclose($2) | 0; //@line 20718
    ___cxa_begin_catch($8 | 0) | 0; //@line 20719
    __THREW__ = 0; //@line 20720
    invoke_v(3); //@line 20721
    $10 = __THREW__; //@line 20722
    __THREW__ = 0; //@line 20722
    if (!($10 & 1)) {
     break;
    }
    $18 = ___cxa_find_matching_catch_3(0) | 0; //@line 20727
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 20729
    ___clang_call_terminate($18); //@line 20730
   } else {
    if (_fclose($2) | 0) {
     break;
    }
    HEAP32[$1 >> 2] = 0; //@line 20738
    break;
   }
  }
 } while (0);
 if (HEAP8[$0 + 96 >> 0] | 0) {
  $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20748
  if ($16 | 0) {
   __ZdaPv($16); //@line 20751
  }
 }
 if (!(HEAP8[$0 + 97 >> 0] | 0)) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 20758
  return;
 }
 $24 = HEAP32[$0 + 56 >> 2] | 0; //@line 20762
 if (!$24) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 20765
  return;
 }
 __ZdaPv($24); //@line 20768
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 20769
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 62455
 STACKTOP = STACKTOP + 16 | 0; //@line 62456
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62456
 $3 = sp; //@line 62457
 $4 = $0 + 8 | 0; //@line 62458
 $5 = $4 + 3 | 0; //@line 62459
 $6 = HEAP8[$5 >> 0] | 0; //@line 62460
 $7 = $6 << 24 >> 24 < 0; //@line 62461
 if ($7) {
  $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 62468
  $15 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0; //@line 62468
 } else {
  $14 = $6 & 255; //@line 62471
  $15 = 1; //@line 62471
 }
 if (($15 - $14 | 0) >>> 0 < $2 >>> 0) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0, $15, $2 - $15 + $14 | 0, $14, $14, 0, $2, $1); //@line 62478
 } else {
  if ($2 | 0) {
   if ($7) {
    $20 = HEAP32[$0 >> 2] | 0; //@line 62484
   } else {
    $20 = $0; //@line 62486
   }
   __ZNSt3__211char_traitsIwE4copyEPwPKwj($20 + ($14 << 2) | 0, $1, $2) | 0; //@line 62489
   $21 = $14 + $2 | 0; //@line 62490
   if ((HEAP8[$5 >> 0] | 0) < 0) {
    HEAP32[$0 + 4 >> 2] = $21; //@line 62495
   } else {
    HEAP8[$5 >> 0] = $21; //@line 62498
   }
   HEAP32[$3 >> 2] = 0; //@line 62501
   __ZNSt3__211char_traitsIwE6assignERwRKw($20 + ($21 << 2) | 0, $3); //@line 62502
  }
 }
 STACKTOP = sp; //@line 62505
 return $0 | 0; //@line 62505
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 28014
 STACKTOP = STACKTOP + 16 | 0; //@line 28015
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 28015
 $4 = sp; //@line 28016
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4; //@line 28019
  $26 = 0; //@line 28020
  $27 = 0; //@line 28020
 } else {
  $7 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 28023
  HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 28025
  $10 = _strtoll_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0; //@line 28027
  $11 = tempRet0; //@line 28028
  $13 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 28030
  if (!$13) {
   HEAP32[(___errno_location() | 0) >> 2] = $7; //@line 28034
  }
  if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) {
   if (($13 | 0) == 34) {
    HEAP32[$2 >> 2] = 4; //@line 28041
    $23 = ($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 0; //@line 28046
    $28 = $23 ? -1 : 0; //@line 28049
    $29 = $23 ? 2147483647 : -2147483648; //@line 28049
   } else {
    $28 = $10; //@line 28051
    $29 = $11; //@line 28051
   }
  } else {
   HEAP32[$2 >> 2] = 4; //@line 28054
   $28 = 0; //@line 28055
   $29 = 0; //@line 28055
  }
  $26 = $29; //@line 28057
  $27 = $28; //@line 28057
 }
 tempRet0 = $26; //@line 28059
 STACKTOP = sp; //@line 28060
 return $27 | 0; //@line 28060
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $20 = 0, $24 = 0, $25 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 61336
 STACKTOP = STACKTOP + 16 | 0; //@line 61337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61337
 $3 = sp; //@line 61338
 if ($1 | 0) {
  $5 = $0 + 11 | 0; //@line 61341
  $6 = HEAP8[$5 >> 0] | 0; //@line 61342
  if ($6 << 24 >> 24 < 0) {
   $15 = HEAP32[$0 + 4 >> 2] | 0; //@line 61351
   $16 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; //@line 61351
  } else {
   $15 = $6 & 255; //@line 61354
   $16 = 10; //@line 61354
  }
  if (($16 - $15 | 0) >>> 0 < $1 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0, $16, $1 - $16 + $15 | 0, $15, $15, 0, 0); //@line 61361
   $20 = HEAP8[$5 >> 0] | 0; //@line 61363
  } else {
   $20 = $6; //@line 61365
  }
  if ($20 << 24 >> 24 < 0) {
   $24 = HEAP32[$0 >> 2] | 0; //@line 61370
  } else {
   $24 = $0; //@line 61372
  }
  __ZNSt3__211char_traitsIcE6assignEPcjc($24 + $15 | 0, $1, $2) | 0; //@line 61375
  $25 = $15 + $1 | 0; //@line 61376
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $25; //@line 61381
  } else {
   HEAP8[$5 >> 0] = $25; //@line 61384
  }
  HEAP8[$3 >> 0] = 0; //@line 61387
  __ZNSt3__211char_traitsIcE6assignERcRKc($24 + $25 | 0, $3); //@line 61388
 }
 STACKTOP = sp; //@line 61390
 return $0 | 0; //@line 61390
}
function _fopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $15 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 15683
 STACKTOP = STACKTOP + 48 | 0; //@line 15684
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 15684
 $vararg_buffer8 = sp + 32 | 0; //@line 15685
 $vararg_buffer3 = sp + 16 | 0; //@line 15686
 $vararg_buffer = sp; //@line 15687
 if (!(_strchr(28878, HEAP8[$1 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 15694
  $$0 = 0; //@line 15695
 } else {
  $7 = ___fmodeflags($1) | 0; //@line 15697
  HEAP32[$vararg_buffer >> 2] = $0; //@line 15700
  HEAP32[$vararg_buffer + 4 >> 2] = $7 | 32768; //@line 15702
  HEAP32[$vararg_buffer + 8 >> 2] = 438; //@line 15704
  $11 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0; //@line 15706
  if (($11 | 0) < 0) {
   $$0 = 0; //@line 15709
  } else {
   if ($7 & 524288 | 0) {
    HEAP32[$vararg_buffer3 >> 2] = $11; //@line 15714
    HEAP32[$vararg_buffer3 + 4 >> 2] = 2; //@line 15716
    HEAP32[$vararg_buffer3 + 8 >> 2] = 1; //@line 15718
    ___syscall221(221, $vararg_buffer3 | 0) | 0; //@line 15719
   }
   $15 = ___fdopen($11, $1) | 0; //@line 15721
   if (!$15) {
    HEAP32[$vararg_buffer8 >> 2] = $11; //@line 15724
    ___syscall6(6, $vararg_buffer8 | 0) | 0; //@line 15725
    $$0 = 0; //@line 15726
   } else {
    $$0 = $15; //@line 15728
   }
  }
 }
 STACKTOP = sp; //@line 15732
 return $$0 | 0; //@line 15732
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 27521
 STACKTOP = STACKTOP + 16 | 0; //@line 27522
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 27522
 $4 = sp; //@line 27523
 do {
  if (($0 | 0) == ($1 | 0)) {
   HEAP32[$2 >> 2] = 4; //@line 27527
   $$1 = 0; //@line 27528
  } else {
   if ((HEAP8[$0 >> 0] | 0) == 45) {
    HEAP32[$2 >> 2] = 4; //@line 27533
    $$1 = 0; //@line 27534
    break;
   }
   $9 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 27538
   HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 27540
   $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0; //@line 27542
   $13 = tempRet0; //@line 27543
   $15 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 27545
   if (!$15) {
    HEAP32[(___errno_location() | 0) >> 2] = $9; //@line 27549
   }
   do {
    if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) {
     if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 65535 | ($15 | 0) == 34) {
      HEAP32[$2 >> 2] = 4; //@line 27563
      $$0 = -1; //@line 27564
      break;
     } else {
      $$0 = $12 & 65535; //@line 27568
      break;
     }
    } else {
     HEAP32[$2 >> 2] = 4; //@line 27572
     $$0 = 0; //@line 27573
    }
   } while (0);
   $$1 = $$0; //@line 27576
  }
 } while (0);
 STACKTOP = sp; //@line 27579
 return $$1 | 0; //@line 27579
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 62003
 STACKTOP = STACKTOP + 16 | 0; //@line 62004
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62004
 $3 = sp; //@line 62005
 $4 = $0 + 8 | 0; //@line 62006
 $5 = $4 + 3 | 0; //@line 62007
 $6 = HEAP8[$5 >> 0] | 0; //@line 62008
 $7 = $6 << 24 >> 24 < 0; //@line 62009
 if ($7) {
  $10 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0; //@line 62014
 } else {
  $10 = 1; //@line 62016
 }
 do {
  if ($10 >>> 0 < $2 >>> 0) {
   if ($7) {
    $23 = HEAP32[$0 + 4 >> 2] | 0; //@line 62024
   } else {
    $23 = $6 & 255; //@line 62027
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0, $10, $2 - $10 | 0, $23, 0, $23, $2, $1); //@line 62030
  } else {
   if ($7) {
    $13 = HEAP32[$0 >> 2] | 0; //@line 62034
   } else {
    $13 = $0; //@line 62036
   }
   __ZNSt3__211char_traitsIwE4moveEPwPKwj($13, $1, $2) | 0; //@line 62038
   HEAP32[$3 >> 2] = 0; //@line 62040
   __ZNSt3__211char_traitsIwE6assignERwRKw($13 + ($2 << 2) | 0, $3); //@line 62041
   if ((HEAP8[$5 >> 0] | 0) < 0) {
    HEAP32[$0 + 4 >> 2] = $2; //@line 62046
    break;
   } else {
    HEAP8[$5 >> 0] = $2; //@line 62050
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 62055
 return $0 | 0; //@line 62055
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 26551
 STACKTOP = STACKTOP + 16 | 0; //@line 26552
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26552
 $4 = sp; //@line 26553
 do {
  if (($0 | 0) == ($1 | 0)) {
   HEAP32[$2 >> 2] = 4; //@line 26557
   $$1 = 0; //@line 26558
  } else {
   if ((HEAP8[$0 >> 0] | 0) == 45) {
    HEAP32[$2 >> 2] = 4; //@line 26563
    $$1 = 0; //@line 26564
    break;
   }
   $9 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 26568
   HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 26570
   $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0; //@line 26572
   $13 = tempRet0; //@line 26573
   $15 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 26575
   if (!$15) {
    HEAP32[(___errno_location() | 0) >> 2] = $9; //@line 26579
   }
   do {
    if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) {
     if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 4294967295 | ($15 | 0) == 34) {
      HEAP32[$2 >> 2] = 4; //@line 26593
      $$0 = -1; //@line 26594
      break;
     } else {
      $$0 = $12; //@line 26597
      break;
     }
    } else {
     HEAP32[$2 >> 2] = 4; //@line 26601
     $$0 = 0; //@line 26602
    }
   } while (0);
   $$1 = $$0; //@line 26605
  }
 } while (0);
 STACKTOP = sp; //@line 26608
 return $$1 | 0; //@line 26608
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 27036
 STACKTOP = STACKTOP + 16 | 0; //@line 27037
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 27037
 $4 = sp; //@line 27038
 do {
  if (($0 | 0) == ($1 | 0)) {
   HEAP32[$2 >> 2] = 4; //@line 27042
   $$1 = 0; //@line 27043
  } else {
   if ((HEAP8[$0 >> 0] | 0) == 45) {
    HEAP32[$2 >> 2] = 4; //@line 27048
    $$1 = 0; //@line 27049
    break;
   }
   $9 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 27053
   HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 27055
   $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0; //@line 27057
   $13 = tempRet0; //@line 27058
   $15 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 27060
   if (!$15) {
    HEAP32[(___errno_location() | 0) >> 2] = $9; //@line 27064
   }
   do {
    if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) {
     if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 4294967295 | ($15 | 0) == 34) {
      HEAP32[$2 >> 2] = 4; //@line 27078
      $$0 = -1; //@line 27079
      break;
     } else {
      $$0 = $12; //@line 27082
      break;
     }
    } else {
     HEAP32[$2 >> 2] = 4; //@line 27086
     $$0 = 0; //@line 27087
    }
   } while (0);
   $$1 = $$0; //@line 27090
  }
 } while (0);
 STACKTOP = sp; //@line 27093
 return $$1 | 0; //@line 27093
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$34 = 0, $$pr = 0, $14 = 0, $16 = 0, $22 = 0, $24 = 0, $28 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = $0 + 4 | 0; //@line 51785
 $5 = (HEAP32[$3 >> 2] | 0) != 267; //@line 51787
 $7 = HEAP32[$0 >> 2] | 0; //@line 51789
 $8 = (HEAP32[$2 >> 2] | 0) - $7 | 0; //@line 51790
 $$34 = $8 >>> 0 < 2147483647 ? $8 << 1 : -1; //@line 51793
 $$ = ($$34 | 0) == 0 ? 4 : $$34; //@line 51795
 $14 = (HEAP32[$1 >> 2] | 0) - $7 >> 2; //@line 51798
 $16 = _realloc($5 ? $7 : 0, $$) | 0; //@line 51801
 if (!$16) {
  __ZSt17__throw_bad_allocv(); //@line 51804
 }
 do {
  if ($5) {
   HEAP32[$0 >> 2] = $16; //@line 51810
   $28 = $16; //@line 51811
  } else {
   $$pr = HEAP32[$0 >> 2] | 0; //@line 51813
   HEAP32[$0 >> 2] = $16; //@line 51815
   if (!$$pr) {
    $28 = $16; //@line 51818
   } else {
    __THREW__ = 0; //@line 51821
    invoke_vi(HEAP32[$3 >> 2] | 0, $$pr | 0); //@line 51822
    $22 = __THREW__; //@line 51823
    __THREW__ = 0; //@line 51823
    if ($22 & 1) {
     $24 = ___cxa_find_matching_catch_3(0) | 0; //@line 51826
     ___clang_call_terminate($24); //@line 51828
    } else {
     $28 = HEAP32[$0 >> 2] | 0; //@line 51832
     break;
    }
   }
  }
 } while (0);
 HEAP32[$3 >> 2] = 269; //@line 51838
 HEAP32[$1 >> 2] = $28 + ($14 << 2); //@line 51841
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + ($$ >>> 2 << 2); //@line 51844
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$34 = 0, $$pr = 0, $14 = 0, $16 = 0, $22 = 0, $24 = 0, $28 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = $0 + 4 | 0; //@line 48285
 $5 = (HEAP32[$3 >> 2] | 0) != 267; //@line 48287
 $7 = HEAP32[$0 >> 2] | 0; //@line 48289
 $8 = (HEAP32[$2 >> 2] | 0) - $7 | 0; //@line 48290
 $$34 = $8 >>> 0 < 2147483647 ? $8 << 1 : -1; //@line 48293
 $$ = ($$34 | 0) == 0 ? 4 : $$34; //@line 48295
 $14 = (HEAP32[$1 >> 2] | 0) - $7 >> 2; //@line 48298
 $16 = _realloc($5 ? $7 : 0, $$) | 0; //@line 48301
 if (!$16) {
  __ZSt17__throw_bad_allocv(); //@line 48304
 }
 do {
  if ($5) {
   HEAP32[$0 >> 2] = $16; //@line 48310
   $28 = $16; //@line 48311
  } else {
   $$pr = HEAP32[$0 >> 2] | 0; //@line 48313
   HEAP32[$0 >> 2] = $16; //@line 48315
   if (!$$pr) {
    $28 = $16; //@line 48318
   } else {
    __THREW__ = 0; //@line 48321
    invoke_vi(HEAP32[$3 >> 2] | 0, $$pr | 0); //@line 48322
    $22 = __THREW__; //@line 48323
    __THREW__ = 0; //@line 48323
    if ($22 & 1) {
     $24 = ___cxa_find_matching_catch_3(0) | 0; //@line 48326
     ___clang_call_terminate($24); //@line 48328
    } else {
     $28 = HEAP32[$0 >> 2] | 0; //@line 48332
     break;
    }
   }
  }
 } while (0);
 HEAP32[$3 >> 2] = 269; //@line 48338
 HEAP32[$1 >> 2] = $28 + ($14 << 2); //@line 48341
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + ($$ >>> 2 << 2); //@line 48344
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 60845
 STACKTOP = STACKTOP + 16 | 0; //@line 60846
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 60846
 $2 = sp; //@line 60847
 HEAP32[$0 >> 2] = 0; //@line 60848
 HEAP32[$0 + 4 >> 2] = 0; //@line 60848
 HEAP32[$0 + 8 >> 2] = 0; //@line 60848
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) {
  $6 = HEAP32[$1 >> 2] | 0; //@line 60853
  $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 60855
  if ($8 >>> 0 > 4294967279) {
   __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 60858
  }
  if ($8 >>> 0 < 11) {
   HEAP8[$0 + 11 >> 0] = $8; //@line 60865
   $$0$i = $0; //@line 60866
  } else {
   $14 = $8 + 16 & -16; //@line 60869
   $15 = __Znwj($14) | 0; //@line 60870
   HEAP32[$0 >> 2] = $15; //@line 60871
   HEAP32[$0 + 8 >> 2] = $14 | -2147483648; //@line 60874
   HEAP32[$0 + 4 >> 2] = $8; //@line 60876
   $$0$i = $15; //@line 60877
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i, $6, $8) | 0; //@line 60879
  HEAP8[$2 >> 0] = 0; //@line 60881
  __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i + $8 | 0, $2); //@line 60882
 } else {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 60884
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 60884
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 60884
 }
 STACKTOP = sp; //@line 60886
 return;
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i = 0, $$021$i$i = 0, $$021$ph$i$i = 0, $13 = 0, $14 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22296
 STACKTOP = STACKTOP + 16 | 0; //@line 22297
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22297
 $4 = sp; //@line 22298
 HEAP32[$0 >> 2] = 0; //@line 22299
 HEAP32[$0 + 4 >> 2] = 0; //@line 22299
 HEAP32[$0 + 8 >> 2] = 0; //@line 22299
 $7 = $3 - $2 | 0; //@line 22302
 if ($7 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 22305
 }
 if ($7 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $7; //@line 22312
  $$021$ph$i$i = $0; //@line 22313
 } else {
  $13 = $7 + 16 & -16; //@line 22316
  $14 = __Znwj($13) | 0; //@line 22317
  HEAP32[$0 >> 2] = $14; //@line 22318
  HEAP32[$0 + 8 >> 2] = $13 | -2147483648; //@line 22321
  HEAP32[$0 + 4 >> 2] = $7; //@line 22323
  $$021$ph$i$i = $14; //@line 22324
 }
 $$0$i$i = $2; //@line 22326
 $$021$i$i = $$021$ph$i$i; //@line 22326
 while (1) {
  if (($$0$i$i | 0) == ($3 | 0)) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$021$i$i, $$0$i$i); //@line 22332
  $$0$i$i = $$0$i$i + 1 | 0; //@line 22335
  $$021$i$i = $$021$i$i + 1 | 0; //@line 22335
 }
 HEAP8[$4 >> 0] = 0; //@line 22338
 __ZNSt3__211char_traitsIcE6assignERcRKc($$021$ph$i$i + $7 | 0, $4); //@line 22339
 STACKTOP = sp; //@line 22340
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $12 = 0, $17 = 0, $18 = 0, $23 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 41130
 STACKTOP = STACKTOP + 16 | 0; //@line 41131
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41131
 $$byval_copy1 = sp + 12 | 0; //@line 41132
 $$byval_copy = sp + 8 | 0; //@line 41133
 $6 = sp + 4 | 0; //@line 41134
 $7 = sp; //@line 41135
 $8 = $0 + 8 | 0; //@line 41136
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 255]($8) | 0; //@line 41140
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 41142
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 41144
 $17 = HEAP8[$12 + 8 + 3 >> 0] | 0; //@line 41147
 $18 = $17 << 24 >> 24 < 0; //@line 41148
 $23 = $18 ? HEAP32[$12 >> 2] | 0 : $12; //@line 41153
 $25 = $23 + (($18 ? HEAP32[$12 + 4 >> 2] | 0 : $17 & 255) << 2) | 0; //@line 41155
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 41156
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 41157
 $26 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $23, $25) | 0; //@line 41158
 STACKTOP = sp; //@line 41159
 return $26 | 0; //@line 41159
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 61463
 STACKTOP = STACKTOP + 16 | 0; //@line 61464
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61464
 $3 = sp; //@line 61465
 $4 = $0 + 11 | 0; //@line 61466
 $5 = HEAP8[$4 >> 0] | 0; //@line 61467
 $6 = $5 << 24 >> 24 < 0; //@line 61468
 if ($6) {
  $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 61476
  $15 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; //@line 61476
 } else {
  $14 = $5 & 255; //@line 61479
  $15 = 10; //@line 61479
 }
 if (($15 - $14 | 0) >>> 0 < $2 >>> 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $15, $2 - $15 + $14 | 0, $14, $14, 0, $2, $1); //@line 61486
 } else {
  if ($2 | 0) {
   if ($6) {
    $20 = HEAP32[$0 >> 2] | 0; //@line 61492
   } else {
    $20 = $0; //@line 61494
   }
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($20 + $14 | 0, $1, $2) | 0; //@line 61497
   $21 = $14 + $2 | 0; //@line 61498
   if ((HEAP8[$4 >> 0] | 0) < 0) {
    HEAP32[$0 + 4 >> 2] = $21; //@line 61503
   } else {
    HEAP8[$4 >> 0] = $21; //@line 61506
   }
   HEAP8[$3 >> 0] = 0; //@line 61509
   __ZNSt3__211char_traitsIcE6assignERcRKc($20 + $21 | 0, $3); //@line 61510
  }
 }
 STACKTOP = sp; //@line 61513
 return $0 | 0; //@line 61513
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$34 = 0, $$pr = 0, $14 = 0, $16 = 0, $22 = 0, $24 = 0, $27 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = $0 + 4 | 0; //@line 48218
 $5 = (HEAP32[$3 >> 2] | 0) != 267; //@line 48220
 $7 = HEAP32[$0 >> 2] | 0; //@line 48222
 $8 = (HEAP32[$2 >> 2] | 0) - $7 | 0; //@line 48223
 $$34 = $8 >>> 0 < 2147483647 ? $8 << 1 : -1; //@line 48226
 $$ = ($$34 | 0) == 0 ? 1 : $$34; //@line 48228
 $14 = (HEAP32[$1 >> 2] | 0) - $7 | 0; //@line 48231
 $16 = _realloc($5 ? $7 : 0, $$) | 0; //@line 48233
 if (!$16) {
  __ZSt17__throw_bad_allocv(); //@line 48236
 }
 do {
  if ($5) {
   HEAP32[$0 >> 2] = $16; //@line 48242
   $27 = $16; //@line 48243
  } else {
   $$pr = HEAP32[$0 >> 2] | 0; //@line 48245
   HEAP32[$0 >> 2] = $16; //@line 48247
   if (!$$pr) {
    $27 = $16; //@line 48250
   } else {
    __THREW__ = 0; //@line 48253
    invoke_vi(HEAP32[$3 >> 2] | 0, $$pr | 0); //@line 48254
    $22 = __THREW__; //@line 48255
    __THREW__ = 0; //@line 48255
    if ($22 & 1) {
     $24 = ___cxa_find_matching_catch_3(0) | 0; //@line 48258
     ___clang_call_terminate($24); //@line 48260
    } else {
     $27 = HEAP32[$0 >> 2] | 0; //@line 48264
     break;
    }
   }
  }
 } while (0);
 HEAP32[$3 >> 2] = 269; //@line 48270
 HEAP32[$1 >> 2] = $27 + $14; //@line 48272
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + $$; //@line 48275
 return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$in = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = $0 + 44 | 0; //@line 1012
 $3 = HEAP32[$2 >> 2] | 0; //@line 1013
 $5 = HEAP32[$0 + 24 >> 2] | 0; //@line 1015
 if ($3 >>> 0 < $5 >>> 0) {
  HEAP32[$2 >> 2] = $5; //@line 1018
  $$in = $5; //@line 1019
 } else {
  $$in = $3; //@line 1021
 }
 $7 = $$in; //@line 1023
 $10 = $0 + 12 | 0; //@line 1026
 $11 = HEAP32[$10 >> 2] | 0; //@line 1027
 if ((HEAP32[$0 + 8 >> 2] | 0) >>> 0 >= $11 >>> 0) {
  $$0 = -1; //@line 1030
  return $$0 | 0; //@line 1031
 }
 if (($1 | 0) == -1) {
  HEAP32[$10 >> 2] = $11 + -1; //@line 1036
  HEAP32[$0 + 16 >> 2] = $7; //@line 1038
  $$0 = 0; //@line 1039
  return $$0 | 0; //@line 1040
 }
 if (!(HEAP32[$0 + 48 >> 2] & 16)) {
  $20 = $1 & 255; //@line 1047
  $21 = $11 + -1 | 0; //@line 1048
  if ((HEAP8[$21 >> 0] | 0) == $20 << 24 >> 24) {
   $$pre$phi7Z2D = $20; //@line 1052
   $$pre$phiZ2D = $21; //@line 1052
  } else {
   $$0 = -1; //@line 1054
   return $$0 | 0; //@line 1055
  }
 } else {
  $$pre$phi7Z2D = $1 & 255; //@line 1060
  $$pre$phiZ2D = $11 + -1 | 0; //@line 1060
 }
 HEAP32[$10 >> 2] = $$pre$phiZ2D; //@line 1062
 HEAP32[$0 + 16 >> 2] = $7; //@line 1064
 HEAP8[$$pre$phiZ2D >> 0] = $$pre$phi7Z2D; //@line 1065
 $$0 = $1; //@line 1066
 return $$0 | 0; //@line 1067
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $12 = 0, $16 = 0, $17 = 0, $22 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 38312
 STACKTOP = STACKTOP + 16 | 0; //@line 38313
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 38313
 $$byval_copy1 = sp + 12 | 0; //@line 38314
 $$byval_copy = sp + 8 | 0; //@line 38315
 $6 = sp + 4 | 0; //@line 38316
 $7 = sp; //@line 38317
 $8 = $0 + 8 | 0; //@line 38318
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 255]($8) | 0; //@line 38322
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 38324
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 38326
 $16 = HEAP8[$12 + 11 >> 0] | 0; //@line 38328
 $17 = $16 << 24 >> 24 < 0; //@line 38329
 $22 = $17 ? HEAP32[$12 >> 2] | 0 : $12; //@line 38334
 $24 = $22 + ($17 ? HEAP32[$12 + 4 >> 2] | 0 : $16 & 255) | 0; //@line 38336
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 38337
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 38338
 $25 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $22, $24) | 0; //@line 38339
 STACKTOP = sp; //@line 38340
 return $25 | 0; //@line 38340
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $11 = 0, $13 = 0, $16 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 35759
 STACKTOP = STACKTOP + 16 | 0; //@line 35760
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 35760
 $3 = sp; //@line 35761
 HEAP32[$3 >> 2] = $varargs; //@line 35762
 $4 = ___uselocale($1) | 0; //@line 35763
 __THREW__ = 0; //@line 35764
 $5 = invoke_iiii(42, $0 | 0, $2 | 0, $3 | 0) | 0; //@line 35765
 $6 = __THREW__; //@line 35766
 __THREW__ = 0; //@line 35766
 if ($6 & 1) {
  $13 = ___cxa_find_matching_catch_2() | 0; //@line 35769
  if ($4 | 0) {
   __THREW__ = 0; //@line 35773
   invoke_ii(147, $4 | 0) | 0; //@line 35774
   $16 = __THREW__; //@line 35775
   __THREW__ = 0; //@line 35775
   if ($16 & 1) {
    $18 = ___cxa_find_matching_catch_3(0) | 0; //@line 35778
    ___clang_call_terminate($18); //@line 35780
   }
  }
  ___resumeException($13 | 0); //@line 35784
 } else {
  if ($4 | 0) {
   __THREW__ = 0; //@line 35789
   invoke_ii(147, $4 | 0) | 0; //@line 35790
   $9 = __THREW__; //@line 35791
   __THREW__ = 0; //@line 35791
   if ($9 & 1) {
    $11 = ___cxa_find_matching_catch_3(0) | 0; //@line 35794
    ___clang_call_terminate($11); //@line 35796
   }
  }
  STACKTOP = sp; //@line 35800
  return $5 | 0; //@line 35800
 }
 return 0; //@line 35802
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 9854
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 9859
    $$0 = 1; //@line 9860
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_644() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 9873
     $$0 = 1; //@line 9874
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 9878
     $$0 = -1; //@line 9879
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 9889
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 9893
    $$0 = 2; //@line 9894
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 9906
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 9912
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 9916
    $$0 = 3; //@line 9917
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 9927
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 9933
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 9939
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 9943
    $$0 = 4; //@line 9944
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 9948
    $$0 = -1; //@line 9949
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 9954
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 60986
 STACKTOP = STACKTOP + 16 | 0; //@line 60987
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 60987
 $3 = sp; //@line 60988
 $4 = $0 + 11 | 0; //@line 60989
 $5 = HEAP8[$4 >> 0] | 0; //@line 60990
 $6 = $5 << 24 >> 24 < 0; //@line 60991
 if ($6) {
  $10 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; //@line 60997
 } else {
  $10 = 10; //@line 60999
 }
 do {
  if ($10 >>> 0 < $2 >>> 0) {
   if ($6) {
    $23 = HEAP32[$0 + 4 >> 2] | 0; //@line 61007
   } else {
    $23 = $5 & 255; //@line 61010
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $10, $2 - $10 | 0, $23, 0, $23, $2, $1); //@line 61013
  } else {
   if ($6) {
    $13 = HEAP32[$0 >> 2] | 0; //@line 61017
   } else {
    $13 = $0; //@line 61019
   }
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($13, $1, $2) | 0; //@line 61021
   HEAP8[$3 >> 0] = 0; //@line 61023
   __ZNSt3__211char_traitsIcE6assignERcRKc($13 + $2 | 0, $3); //@line 61024
   if ((HEAP8[$4 >> 0] | 0) < 0) {
    HEAP32[$0 + 4 >> 2] = $2; //@line 61029
    break;
   } else {
    HEAP8[$4 >> 0] = $2; //@line 61033
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 61038
 return $0 | 0; //@line 61038
}
function __ZNSt3__212_GLOBAL__N_117as_integer_helperIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFxPKcPPciEEET_RKS7_RKT0_PjiT1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 62815
 STACKTOP = STACKTOP + 16 | 0; //@line 62816
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62816
 $4 = sp; //@line 62817
 HEAP32[$4 >> 2] = 0; //@line 62818
 $9 = (HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1; //@line 62823
 $11 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 62825
 HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 62827
 $13 = _strtoll($9, $4, $3) | 0; //@line 62828
 $14 = tempRet0; //@line 62829
 $15 = ___errno_location() | 0; //@line 62830
 $16 = HEAP32[$15 >> 2] | 0; //@line 62831
 HEAP32[$15 >> 2] = $11; //@line 62832
 if (($16 | 0) == 34) {
  __ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0); //@line 62835
 }
 $18 = HEAP32[$4 >> 2] | 0; //@line 62837
 if (($18 | 0) == ($9 | 0)) {
  __ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0); //@line 62841
 }
 if ($2 | 0) {
  HEAP32[$2 >> 2] = $18 - $9; //@line 62847
 }
 tempRet0 = $14; //@line 62849
 STACKTOP = sp; //@line 62850
 return $13 | 0; //@line 62850
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $33 = 0, $7 = 0, $8 = 0, label = 0;
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 16449
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 16454
  } else {
   $20 = $0 & 255; //@line 16456
   $21 = $0 & 255; //@line 16457
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 10; //@line 16463
   } else {
    $26 = $1 + 20 | 0; //@line 16465
    $27 = HEAP32[$26 >> 2] | 0; //@line 16466
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 16472
     HEAP8[$27 >> 0] = $20; //@line 16473
     $33 = $21; //@line 16474
    } else {
     label = 10; //@line 16476
    }
   }
   if ((label | 0) == 10) {
    $33 = ___overflow($1, $0) | 0; //@line 16481
   }
   ___unlockfile($1); //@line 16483
   $$0 = $33; //@line 16484
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 16489
   $8 = $0 & 255; //@line 16490
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 16496
    $14 = HEAP32[$13 >> 2] | 0; //@line 16497
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 16503
     HEAP8[$14 >> 0] = $7; //@line 16504
     $$0 = $8; //@line 16505
     break;
    }
   }
   $$0 = ___overflow($1, $0) | 0; //@line 16510
  }
 } while (0);
 return $$0 | 0; //@line 16513
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $3 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 63470
 STACKTOP = STACKTOP + 64 | 0; //@line 63471
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 63471
 $3 = sp; //@line 63472
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 63475
 } else {
  if (!$1) {
   $$2 = 0; //@line 63479
  } else {
   $6 = ___dynamic_cast($1, 2752, 2736, 0) | 0; //@line 63481
   if (!$6) {
    $$2 = 0; //@line 63484
   } else {
    dest = $3 + 4 | 0; //@line 63487
    stop = dest + 52 | 0; //@line 63487
    do {
     HEAP32[dest >> 2] = 0; //@line 63487
     dest = dest + 4 | 0; //@line 63487
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 63488
    HEAP32[$3 + 8 >> 2] = $0; //@line 63490
    HEAP32[$3 + 12 >> 2] = -1; //@line 63492
    HEAP32[$3 + 48 >> 2] = 1; //@line 63494
    FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 31]($6, $3, HEAP32[$2 >> 2] | 0, 1); //@line 63499
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 63506
     $$0 = 1; //@line 63507
    } else {
     $$0 = 0; //@line 63509
    }
    $$2 = $$0; //@line 63511
   }
  }
 }
 STACKTOP = sp; //@line 63515
 return $$2 | 0; //@line 63515
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $17 = 0, $31 = 0, $36 = 0, $4 = 0, $40 = 0, $45 = 0, $47 = 0;
 $4 = $1 + 64 | 0; //@line 21649
 if (HEAP32[$4 >> 2] | 0) {
  if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 255]($1) | 0)) {
   if (!(___fseeko(HEAP32[$4 >> 2] | 0, HEAP32[$2 + 8 >> 2] | 0, 0) | 0)) {
    $40 = $2; //@line 21670
    $45 = HEAP32[$40 + 4 >> 2] | 0; //@line 21675
    $47 = $1 + 72 | 0; //@line 21677
    HEAP32[$47 >> 2] = HEAP32[$40 >> 2]; //@line 21679
    HEAP32[$47 + 4 >> 2] = $45; //@line 21682
    HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 21683
    HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 21683
    HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 21683
    HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 21683
    return;
   } else {
    $31 = $0; //@line 21686
    HEAP32[$31 >> 2] = 0; //@line 21688
    HEAP32[$31 + 4 >> 2] = 0; //@line 21691
    $36 = $0 + 8 | 0; //@line 21693
    HEAP32[$36 >> 2] = -1; //@line 21695
    HEAP32[$36 + 4 >> 2] = -1; //@line 21698
    return;
   }
  }
 }
 $12 = $0; //@line 21703
 HEAP32[$12 >> 2] = 0; //@line 21705
 HEAP32[$12 + 4 >> 2] = 0; //@line 21708
 $17 = $0 + 8 | 0; //@line 21710
 HEAP32[$17 >> 2] = -1; //@line 21712
 HEAP32[$17 + 4 >> 2] = -1; //@line 21715
 return;
}
function __ZNSt3__26vectorI22CharmTypeSignatureUnitNS_9allocatorIS1_EEE10deallocateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $19 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$0 >> 2] | 0; //@line 22319
 if (!$1) {
  return;
 }
 $3 = $0 + 4 | 0; //@line 22324
 $4 = HEAP32[$3 >> 2] | 0; //@line 22325
 if (($4 | 0) == ($1 | 0)) {
  $31 = $1; //@line 22328
 } else {
  $7 = $4; //@line 22330
  do {
   $6 = $7 + -24 | 0; //@line 22332
   HEAP32[$3 >> 2] = $6; //@line 22333
   $9 = HEAP32[$7 + -12 >> 2] | 0; //@line 22335
   if ($9 | 0) {
    $11 = $7 + -8 | 0; //@line 22338
    $12 = HEAP32[$11 >> 2] | 0; //@line 22339
    if (($12 | 0) != ($9 | 0)) {
     HEAP32[$11 >> 2] = $12 + (~(($12 + -4 - $9 | 0) >>> 2) << 2); //@line 22349
    }
    __ZdlPv($9); //@line 22351
   }
   $19 = HEAP32[$6 >> 2] | 0; //@line 22353
   if ($19 | 0) {
    $23 = $7 + -20 | 0; //@line 22356
    $24 = HEAP32[$23 >> 2] | 0; //@line 22357
    if (($24 | 0) != ($19 | 0)) {
     HEAP32[$23 >> 2] = $24 + (~(($24 + -4 - $19 | 0) >>> 2) << 2); //@line 22367
    }
    __ZdlPv($19); //@line 22369
   }
   $7 = HEAP32[$3 >> 2] | 0; //@line 22371
  } while (($7 | 0) != ($1 | 0));
  $31 = HEAP32[$0 >> 2] | 0; //@line 22380
 }
 __ZdlPv($31); //@line 22382
 HEAP32[$0 + 8 >> 2] = 0; //@line 22384
 HEAP32[$3 >> 2] = 0; //@line 22385
 HEAP32[$0 >> 2] = 0; //@line 22386
 return;
}
function __ZNSt3__28ios_base5clearEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$index = 0, $$index2 = 0, $$sink = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 19532
 STACKTOP = STACKTOP + 16 | 0; //@line 19533
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19533
 $2 = sp; //@line 19534
 $$sink = (HEAP32[$0 + 24 >> 2] | 0) == 0 | $1; //@line 19539
 HEAP32[$0 + 16 >> 2] = $$sink; //@line 19541
 if (!($$sink & HEAP32[$0 + 20 >> 2])) {
  STACKTOP = sp; //@line 19547
  return;
 }
 $12 = ___cxa_allocate_exception(16) | 0; //@line 19549
 __ZNSt3__217iostream_categoryEv() | 0; //@line 19550
 HEAP32[$2 >> 2] = 1; //@line 19551
 HEAP32[$2 + 4 >> 2] = 9916; //@line 19553
 __THREW__ = 0; //@line 19554
 invoke_viii(35, $12 | 0, 29552, $2 | 0); //@line 19555
 $13 = __THREW__; //@line 19556
 __THREW__ = 0; //@line 19556
 if ($13 & 1) {
  $18 = ___cxa_find_matching_catch_2() | 0; //@line 19559
  $19 = tempRet0; //@line 19560
  ___cxa_free_exception($12 | 0); //@line 19561
  $$index = $18; //@line 19562
  $$index2 = $19; //@line 19562
 } else {
  __THREW__ = 0; //@line 19564
  invoke_viii(16, $12 | 0, 1464, 161); //@line 19565
  __THREW__ = 0; //@line 19566
  $16 = ___cxa_find_matching_catch_2() | 0; //@line 19567
  $$index = $16; //@line 19569
  $$index2 = tempRet0; //@line 19569
 }
 ___resumeException($$index | 0); //@line 19571
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 19091
 $4 = $0 + 24 | 0; //@line 19092
 $5 = $0 + 28 | 0; //@line 19093
 $$0 = $1; //@line 19094
 $$021 = 0; //@line 19094
 while (1) {
  if (($$021 | 0) >= ($2 | 0)) {
   break;
  }
  $7 = HEAP32[$4 >> 2] | 0; //@line 19100
  $8 = HEAP32[$5 >> 2] | 0; //@line 19101
  if ($7 >>> 0 < $8 >>> 0) {
   $22 = $8 - $7 >> 2; //@line 19107
   $23 = $2 - $$021 | 0; //@line 19108
   $$sroa$speculated = ($23 | 0) < ($22 | 0) ? $23 : $22; //@line 19110
   __ZNSt3__211char_traitsIwE4copyEPwPKwj($7, $$0, $$sroa$speculated) | 0; //@line 19111
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + ($$sroa$speculated << 2); //@line 19114
   $$0 = $$0 + ($$sroa$speculated << 2) | 0; //@line 19117
   $$021 = $$sroa$speculated + $$021 | 0; //@line 19117
   continue;
  }
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0; //@line 19122
  $14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$$0 >> 2] | 0) | 0; //@line 19124
  if ((FUNCTION_TABLE_iii[$12 & 127]($0, $14) | 0) == ($3 | 0)) {
   break;
  }
  $$0 = $$0 + 4 | 0; //@line 19132
  $$021 = $$021 + 1 | 0; //@line 19132
 }
 return $$021 | 0; //@line 19134
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 41204
 STACKTOP = STACKTOP + 16 | 0; //@line 41205
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41205
 $$byval_copy = sp + 4 | 0; //@line 41206
 $6 = sp; //@line 41207
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3); //@line 41208
 __THREW__ = 0; //@line 41209
 $7 = invoke_iii(63, $$byval_copy | 0, 35544) | 0; //@line 41210
 $8 = __THREW__; //@line 41211
 __THREW__ = 0; //@line 41211
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0; //@line 41214
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 41216
  ___resumeException($12 | 0); //@line 41217
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 41220
  $10 = $5 + 16 | 0; //@line 41221
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2]; //@line 41223
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 41224
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $10, $1, $$byval_copy, $4, $7); //@line 41225
  STACKTOP = sp; //@line 41227
  return HEAP32[$1 >> 2] | 0; //@line 41227
 }
 return 0; //@line 41229
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 41169
 STACKTOP = STACKTOP + 16 | 0; //@line 41170
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41170
 $$byval_copy = sp + 4 | 0; //@line 41171
 $6 = sp; //@line 41172
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3); //@line 41173
 __THREW__ = 0; //@line 41174
 $7 = invoke_iii(63, $$byval_copy | 0, 35544) | 0; //@line 41175
 $8 = __THREW__; //@line 41176
 __THREW__ = 0; //@line 41176
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0; //@line 41179
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 41181
  ___resumeException($12 | 0); //@line 41182
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 41185
  $10 = $5 + 24 | 0; //@line 41186
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2]; //@line 41188
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 41189
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $10, $1, $$byval_copy, $4, $7); //@line 41190
  STACKTOP = sp; //@line 41192
  return HEAP32[$1 >> 2] | 0; //@line 41192
 }
 return 0; //@line 41194
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 38385
 STACKTOP = STACKTOP + 16 | 0; //@line 38386
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 38386
 $$byval_copy = sp + 4 | 0; //@line 38387
 $6 = sp; //@line 38388
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3); //@line 38389
 __THREW__ = 0; //@line 38390
 $7 = invoke_iii(63, $$byval_copy | 0, 35512) | 0; //@line 38391
 $8 = __THREW__; //@line 38392
 __THREW__ = 0; //@line 38392
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0; //@line 38395
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 38397
  ___resumeException($12 | 0); //@line 38398
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 38401
  $10 = $5 + 16 | 0; //@line 38402
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2]; //@line 38404
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 38405
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $10, $1, $$byval_copy, $4, $7); //@line 38406
  STACKTOP = sp; //@line 38408
  return HEAP32[$1 >> 2] | 0; //@line 38408
 }
 return 0; //@line 38410
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 38350
 STACKTOP = STACKTOP + 16 | 0; //@line 38351
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 38351
 $$byval_copy = sp + 4 | 0; //@line 38352
 $6 = sp; //@line 38353
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3); //@line 38354
 __THREW__ = 0; //@line 38355
 $7 = invoke_iii(63, $$byval_copy | 0, 35512) | 0; //@line 38356
 $8 = __THREW__; //@line 38357
 __THREW__ = 0; //@line 38357
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0; //@line 38360
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 38362
  ___resumeException($12 | 0); //@line 38363
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 38366
  $10 = $5 + 24 | 0; //@line 38367
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2]; //@line 38369
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 38370
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $10, $1, $$byval_copy, $4, $7); //@line 38371
  STACKTOP = sp; //@line 38373
  return HEAP32[$1 >> 2] | 0; //@line 38373
 }
 return 0; //@line 38375
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 41239
 STACKTOP = STACKTOP + 16 | 0; //@line 41240
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41240
 $$byval_copy = sp + 4 | 0; //@line 41241
 $6 = sp; //@line 41242
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3); //@line 41243
 __THREW__ = 0; //@line 41244
 $7 = invoke_iii(63, $$byval_copy | 0, 35544) | 0; //@line 41245
 $8 = __THREW__; //@line 41246
 __THREW__ = 0; //@line 41246
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0; //@line 41249
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 41251
  ___resumeException($12 | 0); //@line 41252
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 41255
  $10 = $5 + 20 | 0; //@line 41256
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2]; //@line 41258
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 41259
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $10, $1, $$byval_copy, $4, $7); //@line 41260
  STACKTOP = sp; //@line 41262
  return HEAP32[$1 >> 2] | 0; //@line 41262
 }
 return 0; //@line 41264
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 38420
 STACKTOP = STACKTOP + 16 | 0; //@line 38421
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 38421
 $$byval_copy = sp + 4 | 0; //@line 38422
 $6 = sp; //@line 38423
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3); //@line 38424
 __THREW__ = 0; //@line 38425
 $7 = invoke_iii(63, $$byval_copy | 0, 35512) | 0; //@line 38426
 $8 = __THREW__; //@line 38427
 __THREW__ = 0; //@line 38427
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0; //@line 38430
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 38432
  ___resumeException($12 | 0); //@line 38433
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy); //@line 38436
  $10 = $5 + 20 | 0; //@line 38437
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2]; //@line 38439
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 38440
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $10, $1, $$byval_copy, $4, $7); //@line 38441
  STACKTOP = sp; //@line 38443
  return HEAP32[$1 >> 2] | 0; //@line 38443
 }
 return 0; //@line 38445
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 18820
 $4 = $0 + 24 | 0; //@line 18821
 $5 = $0 + 28 | 0; //@line 18822
 $$0 = $1; //@line 18823
 $$021 = 0; //@line 18823
 while (1) {
  if (($$021 | 0) >= ($2 | 0)) {
   break;
  }
  $7 = HEAP32[$4 >> 2] | 0; //@line 18829
  $8 = HEAP32[$5 >> 2] | 0; //@line 18830
  if ($7 >>> 0 < $8 >>> 0) {
   $21 = $8 - $7 | 0; //@line 18835
   $22 = $2 - $$021 | 0; //@line 18836
   $$sroa$speculated = ($22 | 0) < ($21 | 0) ? $22 : $21; //@line 18838
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($7, $$0, $$sroa$speculated) | 0; //@line 18839
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $$sroa$speculated; //@line 18842
   $$0 = $$0 + $$sroa$speculated | 0; //@line 18845
   $$021 = $$sroa$speculated + $$021 | 0; //@line 18845
   continue;
  }
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0; //@line 18850
  $14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$$0 >> 0] | 0) | 0; //@line 18852
  if ((FUNCTION_TABLE_iii[$12 & 127]($0, $14) | 0) == ($3 | 0)) {
   break;
  }
  $$0 = $$0 + 1 | 0; //@line 18860
  $$021 = $$021 + 1 | 0; //@line 18860
 }
 return $$021 | 0; //@line 18862
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 8610
  $8 = $0; //@line 8610
  $9 = $1; //@line 8610
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 8612
   $$0914 = $$0914 + -1 | 0; //@line 8616
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 8617
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 8618
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 8626
   }
  }
  $$010$lcssa$off0 = $8; //@line 8631
  $$09$lcssa = $$0914; //@line 8631
 } else {
  $$010$lcssa$off0 = $0; //@line 8633
  $$09$lcssa = $2; //@line 8633
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 8637
 } else {
  $$012 = $$010$lcssa$off0; //@line 8639
  $$111 = $$09$lcssa; //@line 8639
  while (1) {
   $26 = $$111 + -1 | 0; //@line 8644
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 8645
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 8649
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 8652
    $$111 = $26; //@line 8652
   }
  }
 }
 return $$1$lcssa | 0; //@line 8656
}
function __ZNKSt3__219__iostream_category7messageEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $12 = 0, $13 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 19455
 STACKTOP = STACKTOP + 16 | 0; //@line 19456
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19456
 $3 = sp; //@line 19457
 if (($2 | 0) != 1 & ($2 | 0) < 257) {
  __ZNKSt3__212__do_message7messageEi($0, $1, $2); //@line 19462
 } else {
  HEAP32[$0 >> 2] = 0; //@line 19464
  HEAP32[$0 + 4 >> 2] = 0; //@line 19464
  HEAP32[$0 + 8 >> 2] = 0; //@line 19464
  $6 = __ZNSt3__211char_traitsIcE6lengthEPKc(29451) | 0; //@line 19465
  if ($6 >>> 0 > 4294967279) {
   __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 19468
  }
  if ($6 >>> 0 < 11) {
   HEAP8[$0 + 11 >> 0] = $6; //@line 19475
   $$0$i$i = $0; //@line 19476
  } else {
   $12 = $6 + 16 & -16; //@line 19479
   $13 = __Znwj($12) | 0; //@line 19480
   HEAP32[$0 >> 2] = $13; //@line 19481
   HEAP32[$0 + 8 >> 2] = $12 | -2147483648; //@line 19484
   HEAP32[$0 + 4 >> 2] = $6; //@line 19486
   $$0$i$i = $13; //@line 19487
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 29451, $6) | 0; //@line 19489
  HEAP8[$3 >> 0] = 0; //@line 19491
  __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $6 | 0, $3); //@line 19492
 }
 STACKTOP = sp; //@line 19494
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$023 = 0, $$sroa$speculated = 0, $12 = 0, $13 = 0, $22 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 19000
 $3 = $0 + 12 | 0; //@line 19001
 $4 = $0 + 16 | 0; //@line 19002
 $$0 = $1; //@line 19003
 $$023 = 0; //@line 19003
 while (1) {
  if (($$023 | 0) >= ($2 | 0)) {
   break;
  }
  $6 = HEAP32[$3 >> 2] | 0; //@line 19009
  $7 = HEAP32[$4 >> 2] | 0; //@line 19010
  if ($6 >>> 0 < $7 >>> 0) {
   $12 = $7 - $6 >> 2; //@line 19016
   $13 = $2 - $$023 | 0; //@line 19017
   $$sroa$speculated = ($13 | 0) < ($12 | 0) ? $13 : $12; //@line 19019
   __ZNSt3__211char_traitsIwE4copyEPwPKwj($$0, $6, $$sroa$speculated) | 0; //@line 19020
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + ($$sroa$speculated << 2); //@line 19025
   $$0 = $$0 + ($$sroa$speculated << 2) | 0; //@line 19026
   $$023 = $$sroa$speculated + $$023 | 0; //@line 19026
   continue;
  }
  $22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 255]($0) | 0; //@line 19032
  if (($22 | 0) == -1) {
   break;
  }
  HEAP32[$$0 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($22) | 0; //@line 19038
  $$0 = $$0 + 4 | 0; //@line 19041
  $$023 = $$023 + 1 | 0; //@line 19041
 }
 return $$023 | 0; //@line 19043
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0; //@line 60143
 $3 = $0 + 4 | 0; //@line 60144
 $5 = $1 + 4 | 0; //@line 60146
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0; //@line 60148
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 2) << 2) | 0; //@line 60152
 HEAP32[$5 >> 2] = $11; //@line 60153
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0; //@line 60156
  $$pre$phiZ2D = $5; //@line 60158
  $15 = HEAP32[$5 >> 2] | 0; //@line 60158
 } else {
  $$pre$phiZ2D = $5; //@line 60161
  $15 = $11; //@line 60161
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 60163
 HEAP32[$0 >> 2] = $15; //@line 60164
 HEAP32[$$pre$phiZ2D >> 2] = $14; //@line 60165
 $16 = $1 + 8 | 0; //@line 60166
 $17 = HEAP32[$3 >> 2] | 0; //@line 60167
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2]; //@line 60169
 HEAP32[$16 >> 2] = $17; //@line 60170
 $19 = $0 + 8 | 0; //@line 60171
 $20 = $1 + 12 | 0; //@line 60172
 $21 = HEAP32[$19 >> 2] | 0; //@line 60173
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2]; //@line 60175
 HEAP32[$20 >> 2] = $21; //@line 60176
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2]; //@line 60178
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$023 = 0, $$sroa$speculated = 0, $11 = 0, $12 = 0, $21 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 18730
 $3 = $0 + 12 | 0; //@line 18731
 $4 = $0 + 16 | 0; //@line 18732
 $$0 = $1; //@line 18733
 $$023 = 0; //@line 18733
 while (1) {
  if (($$023 | 0) >= ($2 | 0)) {
   break;
  }
  $6 = HEAP32[$3 >> 2] | 0; //@line 18739
  $7 = HEAP32[$4 >> 2] | 0; //@line 18740
  if ($6 >>> 0 < $7 >>> 0) {
   $11 = $7 - $6 | 0; //@line 18745
   $12 = $2 - $$023 | 0; //@line 18746
   $$sroa$speculated = ($12 | 0) < ($11 | 0) ? $12 : $11; //@line 18748
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0, $6, $$sroa$speculated) | 0; //@line 18749
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $$sroa$speculated; //@line 18754
   $$0 = $$0 + $$sroa$speculated | 0; //@line 18755
   $$023 = $$sroa$speculated + $$023 | 0; //@line 18755
   continue;
  }
  $21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 255]($0) | 0; //@line 18761
  if (($21 | 0) == -1) {
   break;
  }
  HEAP8[$$0 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($21) | 0; //@line 18767
  $$0 = $$0 + 1 | 0; //@line 18770
  $$023 = $$023 + 1 | 0; //@line 18770
 }
 return $$023 | 0; //@line 18772
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 13655
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 13660
   label = 4; //@line 13661
  } else {
   $$01519 = $0; //@line 13663
   $23 = $1; //@line 13663
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 13668
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 13671
    $23 = $6; //@line 13672
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 13676
     label = 4; //@line 13677
     break;
    } else {
     $$01519 = $6; //@line 13680
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 13686
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 13688
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 13696
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 13704
  } else {
   $$pn = $$0; //@line 13706
   while (1) {
    $19 = $$pn + 1 | 0; //@line 13708
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 13712
     break;
    } else {
     $$pn = $19; //@line 13715
    }
   }
  }
  $$sink = $$1$lcssa; //@line 13720
 }
 return $$sink - $1 | 0; //@line 13723
}
function __ZNSt3__212_GLOBAL__N_115as_float_helperIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFePKcPPcEEET_RKS7_RKT0_PjT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $12 = 0.0, $13 = 0, $14 = 0, $16 = 0, $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 62921
 STACKTOP = STACKTOP + 16 | 0; //@line 62922
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62922
 $3 = sp; //@line 62923
 HEAP32[$3 >> 2] = 0; //@line 62924
 $8 = (HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1; //@line 62929
 $10 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 62931
 HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 62933
 $12 = +_strtold($8, $3); //@line 62934
 $13 = ___errno_location() | 0; //@line 62935
 $14 = HEAP32[$13 >> 2] | 0; //@line 62936
 HEAP32[$13 >> 2] = $10; //@line 62937
 if (($14 | 0) == 34) {
  __ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0); //@line 62940
 }
 $16 = HEAP32[$3 >> 2] | 0; //@line 62942
 if (($16 | 0) == ($8 | 0)) {
  __ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0); //@line 62946
 }
 if ($2 | 0) {
  HEAP32[$2 >> 2] = $16 - $8; //@line 62952
 }
 STACKTOP = sp; //@line 62954
 return +$12;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 63689
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 63696
   $10 = $1 + 16 | 0; //@line 63697
   $11 = HEAP32[$10 >> 2] | 0; //@line 63698
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 63701
    HEAP32[$1 + 24 >> 2] = $4; //@line 63703
    HEAP32[$1 + 36 >> 2] = 1; //@line 63705
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 63715
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 63720
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 63723
    HEAP8[$1 + 54 >> 0] = 1; //@line 63725
    break;
   }
   $21 = $1 + 24 | 0; //@line 63728
   $22 = HEAP32[$21 >> 2] | 0; //@line 63729
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 63732
    $27 = $4; //@line 63733
   } else {
    $27 = $22; //@line 63735
   }
   if (($27 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 63744
   }
  }
 } while (0);
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15836
 STACKTOP = STACKTOP + 16 | 0; //@line 15837
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15837
 $2 = sp; //@line 15838
 $3 = $1 & 255; //@line 15839
 HEAP8[$2 >> 0] = $3; //@line 15840
 $4 = $0 + 16 | 0; //@line 15841
 $5 = HEAP32[$4 >> 2] | 0; //@line 15842
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 15849
   label = 4; //@line 15850
  } else {
   $$0 = -1; //@line 15852
  }
 } else {
  $12 = $5; //@line 15855
  label = 4; //@line 15856
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 15860
   $10 = HEAP32[$9 >> 2] | 0; //@line 15861
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 15864
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 15871
     HEAP8[$10 >> 0] = $3; //@line 15872
     $$0 = $13; //@line 15873
     break;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, $2, 1) | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 15884
   } else {
    $$0 = -1; //@line 15886
   }
  }
 } while (0);
 STACKTOP = sp; //@line 15890
 return $$0 | 0; //@line 15890
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$sroa$speculated = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0;
 if ((-17 - $1 | 0) >>> 0 < $2 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 61406
 }
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) {
  $23 = HEAP32[$0 >> 2] | 0; //@line 61414
 } else {
  $23 = $0; //@line 61416
 }
 if ($1 >>> 0 < 2147483623) {
  $14 = $2 + $1 | 0; //@line 61420
  $15 = $1 << 1; //@line 61421
  $$sroa$speculated = $14 >>> 0 < $15 >>> 0 ? $15 : $14; //@line 61423
  $20 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16; //@line 61428
 } else {
  $20 = -17; //@line 61430
 }
 $21 = __Znwj($20) | 0; //@line 61432
 if ($4 | 0) {
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($21, $23, $4) | 0; //@line 61435
 }
 $25 = $3 - $5 - $4 | 0; //@line 61438
 if ($25 | 0) {
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($21 + $4 + $6 | 0, $23 + $4 + $5 | 0, $25) | 0; //@line 61445
 }
 if (($1 | 0) != 10) {
  __ZdlPv($23); //@line 61449
 }
 HEAP32[$0 >> 2] = $21; //@line 61451
 HEAP32[$0 + 8 >> 2] = $20 | -2147483648; //@line 61454
 return;
}
function _ungetc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$pr = 0, $14 = 0, $16 = 0, $19 = 0, $7 = 0, $8 = 0, label = 0;
 do {
  if (($0 | 0) == -1) {
   $$1 = -1; //@line 15771
  } else {
   if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
    $16 = ___lockfile($1) | 0; //@line 15778
   } else {
    $16 = 0; //@line 15780
   }
   $7 = $1 + 4 | 0; //@line 15782
   $8 = HEAP32[$7 >> 2] | 0; //@line 15783
   if (!$8) {
    ___toread($1) | 0; //@line 15786
    $$pr = HEAP32[$7 >> 2] | 0; //@line 15787
    if ($$pr | 0) {
     $14 = $$pr; //@line 15790
     label = 6; //@line 15791
    }
   } else {
    $14 = $8; //@line 15794
    label = 6; //@line 15795
   }
   if ((label | 0) == 6) {
    if ($14 >>> 0 > ((HEAP32[$1 + 44 >> 2] | 0) + -8 | 0) >>> 0) {
     $19 = $14 + -1 | 0; //@line 15804
     HEAP32[$7 >> 2] = $19; //@line 15805
     HEAP8[$19 >> 0] = $0; //@line 15806
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17; //@line 15809
     if (!$16) {
      $$1 = $0; //@line 15812
      break;
     }
     ___unlockfile($1); //@line 15815
     $$1 = $0; //@line 15816
     break;
    }
   }
   if (!$16) {
    $$1 = -1; //@line 15822
   } else {
    ___unlockfile($1); //@line 15824
    $$1 = -1; //@line 15825
   }
  }
 } while (0);
 return $$1 | 0; //@line 15829
}
function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 20867
 STACKTOP = STACKTOP + 16 | 0; //@line 20868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20868
 $3 = sp; //@line 20869
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0); //@line 20870
 HEAP32[$0 >> 2] = 10056; //@line 20871
 HEAP32[$0 + 32 >> 2] = $1; //@line 20873
 HEAP32[$0 + 40 >> 2] = $2; //@line 20875
 HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 20878
 HEAP8[$0 + 52 >> 0] = 0; //@line 20880
 $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 20883
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0); //@line 20885
 __THREW__ = 0; //@line 20886
 invoke_vii($11 | 0, $0 | 0, $3 | 0); //@line 20887
 $13 = __THREW__; //@line 20888
 __THREW__ = 0; //@line 20888
 if ($13 & 1) {
  $15 = ___cxa_find_matching_catch_2() | 0; //@line 20891
  __ZNSt3__26localeD2Ev($3); //@line 20893
  __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0); //@line 20894
  ___resumeException($15 | 0); //@line 20895
 } else {
  __ZNSt3__26localeD2Ev($3); //@line 20898
  STACKTOP = sp; //@line 20899
  return;
 }
}
function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 20827
 STACKTOP = STACKTOP + 16 | 0; //@line 20828
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20828
 $3 = sp; //@line 20829
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0); //@line 20830
 HEAP32[$0 >> 2] = 10120; //@line 20831
 HEAP32[$0 + 32 >> 2] = $1; //@line 20833
 HEAP32[$0 + 40 >> 2] = $2; //@line 20835
 HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 20838
 HEAP8[$0 + 52 >> 0] = 0; //@line 20840
 $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 20843
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0); //@line 20845
 __THREW__ = 0; //@line 20846
 invoke_vii($11 | 0, $0 | 0, $3 | 0); //@line 20847
 $13 = __THREW__; //@line 20848
 __THREW__ = 0; //@line 20848
 if ($13 & 1) {
  $15 = ___cxa_find_matching_catch_2() | 0; //@line 20851
  __ZNSt3__26localeD2Ev($3); //@line 20853
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 20854
  ___resumeException($15 | 0); //@line 20855
 } else {
  __ZNSt3__26localeD2Ev($3); //@line 20858
  STACKTOP = sp; //@line 20859
  return;
 }
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $22 = 0, $3 = 0, $6 = 0;
 __ZNSt3__214__shared_count12__add_sharedEv($1); //@line 59884
 $3 = $0 + 8 | 0; //@line 59885
 $6 = HEAP32[$3 >> 2] | 0; //@line 59888
 do {
  if ((HEAP32[$0 + 12 >> 2] | 0) - $6 >> 2 >>> 0 > $2 >>> 0) {
   $$pre$phiZ2D = $3; //@line 59895
   $18 = $6; //@line 59895
  } else {
   __THREW__ = 0; //@line 59898
   invoke_vii(181, $3 | 0, $2 + 1 | 0); //@line 59899
   $12 = __THREW__; //@line 59900
   __THREW__ = 0; //@line 59900
   if (!($12 & 1)) {
    $$pre$phiZ2D = $3; //@line 59904
    $18 = HEAP32[$3 >> 2] | 0; //@line 59904
    break;
   }
   $14 = ___cxa_find_matching_catch_2() | 0; //@line 59907
   if ($1 | 0) {
    __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($1); //@line 59911
   }
   ___resumeException($14 | 0); //@line 59913
  }
 } while (0);
 $19 = HEAP32[$18 + ($2 << 2) >> 2] | 0; //@line 59918
 if (!$19) {
  $22 = $18; //@line 59921
 } else {
  __ZNSt3__214__shared_count16__release_sharedEv($19) | 0; //@line 59923
  $22 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 59925
 }
 HEAP32[$22 + ($2 << 2) >> 2] = $1; //@line 59928
 return;
}
function __ZNSt3__211__stdoutbufIwE4syncEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $1 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21024
 STACKTOP = STACKTOP + 16 | 0; //@line 21025
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21025
 $1 = sp + 8 | 0; //@line 21026
 $2 = sp; //@line 21027
 $3 = $0 + 36 | 0; //@line 21028
 $4 = $0 + 40 | 0; //@line 21029
 $5 = $1 + 8 | 0; //@line 21030
 $6 = $1; //@line 21031
 $7 = $0 + 32 | 0; //@line 21032
 L1 : while (1) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 21034
  $13 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 31]($8, HEAP32[$4 >> 2] | 0, $1, $5, $2) | 0; //@line 21039
  $15 = (HEAP32[$2 >> 2] | 0) - $6 | 0; //@line 21041
  if ((_fwrite($1, 1, $15, HEAP32[$7 >> 2] | 0) | 0) != ($15 | 0)) {
   $$2 = -1; //@line 21046
   break;
  }
  switch ($13 | 0) {
  case 1:
   {
    break;
   }
  case 2:
   {
    $$2 = -1; //@line 21054
    break L1;
    break;
   }
  default:
   {
    label = 4; //@line 21059
    break L1;
   }
  }
 }
 if ((label | 0) == 4) {
  $$2 = ((_fflush(HEAP32[$7 >> 2] | 0) | 0) != 0) << 31 >> 31; //@line 21069
 }
 STACKTOP = sp; //@line 21071
 return $$2 | 0; //@line 21071
}
function __ZNSt3__211__stdoutbufIcE4syncEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $1 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21284
 STACKTOP = STACKTOP + 16 | 0; //@line 21285
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21285
 $1 = sp + 8 | 0; //@line 21286
 $2 = sp; //@line 21287
 $3 = $0 + 36 | 0; //@line 21288
 $4 = $0 + 40 | 0; //@line 21289
 $5 = $1 + 8 | 0; //@line 21290
 $6 = $1; //@line 21291
 $7 = $0 + 32 | 0; //@line 21292
 L1 : while (1) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 21294
  $13 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 31]($8, HEAP32[$4 >> 2] | 0, $1, $5, $2) | 0; //@line 21299
  $15 = (HEAP32[$2 >> 2] | 0) - $6 | 0; //@line 21301
  if ((_fwrite($1, 1, $15, HEAP32[$7 >> 2] | 0) | 0) != ($15 | 0)) {
   $$2 = -1; //@line 21306
   break;
  }
  switch ($13 | 0) {
  case 1:
   {
    break;
   }
  case 2:
   {
    $$2 = -1; //@line 21314
    break L1;
    break;
   }
  default:
   {
    label = 4; //@line 21319
    break L1;
   }
  }
 }
 if ((label | 0) == 4) {
  $$2 = ((_fflush(HEAP32[$7 >> 2] | 0) | 0) != 0) << 31 >> 31; //@line 21329
 }
 STACKTOP = sp; //@line 21331
 return $$2 | 0; //@line 21331
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24463
 STACKTOP = STACKTOP + 16 | 0; //@line 24464
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24464
 $3 = sp; //@line 24465
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4; //@line 24468
  $$1 = 0.0; //@line 24469
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 24472
  HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 24474
  $9 = +_strtold_l($0, $3, __ZNSt3__26__clocEv() | 0); //@line 24476
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 24478
  if (!$11) {
   HEAP32[(___errno_location() | 0) >> 2] = $6; //@line 24482
  }
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) {
   if (($11 | 0) == 34) {
    $$0$ph = $9; //@line 24489
    label = 6; //@line 24490
   } else {
    $$0 = $9; //@line 24492
   }
  } else {
   $$0$ph = 0.0; //@line 24495
   label = 6; //@line 24496
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4; //@line 24499
   $$0 = $$0$ph; //@line 24500
  }
  $$1 = $$0; //@line 24502
 }
 STACKTOP = sp; //@line 24504
 return +$$1;
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25508
 STACKTOP = STACKTOP + 16 | 0; //@line 25509
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25509
 $3 = sp; //@line 25510
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4; //@line 25513
  $$1 = 0.0; //@line 25514
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 25517
  HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 25519
  $9 = +_strtof_l($0, $3, __ZNSt3__26__clocEv() | 0); //@line 25521
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 25523
  if (!$11) {
   HEAP32[(___errno_location() | 0) >> 2] = $6; //@line 25527
  }
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) {
   if (($11 | 0) == 34) {
    $$0$ph = $9; //@line 25534
    label = 6; //@line 25535
   } else {
    $$0 = $9; //@line 25537
   }
  } else {
   $$0$ph = 0.0; //@line 25540
   label = 6; //@line 25541
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4; //@line 25544
   $$0 = $$0$ph; //@line 25545
  }
  $$1 = $$0; //@line 25547
 }
 STACKTOP = sp; //@line 25549
 return +$$1;
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25032
 STACKTOP = STACKTOP + 16 | 0; //@line 25033
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25033
 $3 = sp; //@line 25034
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4; //@line 25037
  $$1 = 0.0; //@line 25038
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 25041
  HEAP32[(___errno_location() | 0) >> 2] = 0; //@line 25043
  $9 = +_strtod_l($0, $3, __ZNSt3__26__clocEv() | 0); //@line 25045
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0; //@line 25047
  if (!$11) {
   HEAP32[(___errno_location() | 0) >> 2] = $6; //@line 25051
  }
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) {
   if (($11 | 0) == 34) {
    $$0$ph = $9; //@line 25058
    label = 6; //@line 25059
   } else {
    $$0 = $9; //@line 25061
   }
  } else {
   $$0$ph = 0.0; //@line 25064
   label = 6; //@line 25065
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4; //@line 25068
   $$0 = $$0$ph; //@line 25069
  }
  $$1 = $$0; //@line 25071
 }
 STACKTOP = sp; //@line 25073
 return +$$1;
}
function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $17 = 0, $3 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 20948
 STACKTOP = STACKTOP + 16 | 0; //@line 20949
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20949
 $3 = sp; //@line 20950
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0); //@line 20951
 HEAP32[$0 >> 2] = 9928; //@line 20952
 HEAP32[$0 + 32 >> 2] = $1; //@line 20954
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0); //@line 20956
 __THREW__ = 0; //@line 20957
 $6 = invoke_iii(63, $3 | 0, 37312) | 0; //@line 20958
 $7 = __THREW__; //@line 20959
 __THREW__ = 0; //@line 20959
 if ($7 & 1) {
  $17 = ___cxa_find_matching_catch_2() | 0; //@line 20962
  __ZNSt3__26localeD2Ev($3); //@line 20964
  __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0); //@line 20965
  ___resumeException($17 | 0); //@line 20966
 } else {
  __ZNSt3__26localeD2Ev($3); //@line 20970
  HEAP32[$0 + 36 >> 2] = $6; //@line 20971
  HEAP32[$0 + 40 >> 2] = $2; //@line 20973
  HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 255]($6) | 0) & 1; //@line 20980
  STACKTOP = sp; //@line 20981
  return;
 }
}
function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $17 = 0, $3 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 20907
 STACKTOP = STACKTOP + 16 | 0; //@line 20908
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20908
 $3 = sp; //@line 20909
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0); //@line 20910
 HEAP32[$0 >> 2] = 9992; //@line 20911
 HEAP32[$0 + 32 >> 2] = $1; //@line 20913
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0); //@line 20915
 __THREW__ = 0; //@line 20916
 $6 = invoke_iii(63, $3 | 0, 37304) | 0; //@line 20917
 $7 = __THREW__; //@line 20918
 __THREW__ = 0; //@line 20918
 if ($7 & 1) {
  $17 = ___cxa_find_matching_catch_2() | 0; //@line 20921
  __ZNSt3__26localeD2Ev($3); //@line 20923
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 20924
  ___resumeException($17 | 0); //@line 20925
 } else {
  __ZNSt3__26localeD2Ev($3); //@line 20929
  HEAP32[$0 + 36 >> 2] = $6; //@line 20930
  HEAP32[$0 + 40 >> 2] = $2; //@line 20932
  HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 255]($6) | 0) & 1; //@line 20939
  STACKTOP = sp; //@line 20940
  return;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 61290
 STACKTOP = STACKTOP + 16 | 0; //@line 61291
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61291
 $3 = sp; //@line 61292
 $4 = $0 + 11 | 0; //@line 61293
 $5 = HEAP8[$4 >> 0] | 0; //@line 61294
 $6 = $5 << 24 >> 24 < 0; //@line 61295
 if ($6) {
  $10 = HEAP32[$0 + 4 >> 2] | 0; //@line 61299
 } else {
  $10 = $5 & 255; //@line 61302
 }
 do {
  if ($10 >>> 0 < $1 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0, $1 - $10 | 0, $2) | 0; //@line 61308
  } else {
   if ($6) {
    $14 = (HEAP32[$0 >> 2] | 0) + $1 | 0; //@line 61312
    HEAP8[$3 >> 0] = 0; //@line 61313
    __ZNSt3__211char_traitsIcE6assignERcRKc($14, $3); //@line 61314
    HEAP32[$0 + 4 >> 2] = $1; //@line 61316
    break;
   } else {
    HEAP8[$3 >> 0] = 0; //@line 61320
    __ZNSt3__211char_traitsIcE6assignERcRKc($0 + $1 | 0, $3); //@line 61321
    HEAP8[$4 >> 0] = $1; //@line 61323
    break;
   }
  }
 } while (0);
 STACKTOP = sp; //@line 61328
 return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $10 = 0, $2 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 58297
 STACKTOP = STACKTOP + 16 | 0; //@line 58298
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 58298
 $2 = sp; //@line 58299
 HEAP32[$0 >> 2] = 0; //@line 58300
 HEAP32[$0 + 4 >> 2] = 0; //@line 58300
 HEAP32[$0 + 8 >> 2] = 0; //@line 58300
 $3 = __ZNSt3__211char_traitsIcE6lengthEPKc(31894) | 0; //@line 58301
 if ($3 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 58304
 }
 if ($3 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $3; //@line 58311
  $$0$i$i = $0; //@line 58312
 } else {
  $9 = $3 + 16 & -16; //@line 58315
  $10 = __Znwj($9) | 0; //@line 58316
  HEAP32[$0 >> 2] = $10; //@line 58317
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648; //@line 58320
  HEAP32[$0 + 4 >> 2] = $3; //@line 58322
  $$0$i$i = $10; //@line 58323
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 31894, $3) | 0; //@line 58325
 HEAP8[$2 >> 0] = 0; //@line 58327
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $3 | 0, $2); //@line 58328
 STACKTOP = sp; //@line 58329
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $10 = 0, $2 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 58259
 STACKTOP = STACKTOP + 16 | 0; //@line 58260
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 58260
 $2 = sp; //@line 58261
 HEAP32[$0 >> 2] = 0; //@line 58262
 HEAP32[$0 + 4 >> 2] = 0; //@line 58262
 HEAP32[$0 + 8 >> 2] = 0; //@line 58262
 $3 = __ZNSt3__211char_traitsIcE6lengthEPKc(31900) | 0; //@line 58263
 if ($3 >>> 0 > 4294967279) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0); //@line 58266
 }
 if ($3 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $3; //@line 58273
  $$0$i$i = $0; //@line 58274
 } else {
  $9 = $3 + 16 & -16; //@line 58277
  $10 = __Znwj($9) | 0; //@line 58278
  HEAP32[$0 >> 2] = $10; //@line 58279
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648; //@line 58282
  HEAP32[$0 + 4 >> 2] = $3; //@line 58284
  $$0$i$i = $10; //@line 58285
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 31900, $3) | 0; //@line 58287
 HEAP8[$2 >> 0] = 0; //@line 58289
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $3 | 0, $2); //@line 58290
 STACKTOP = sp; //@line 58291
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 20723
 STACKTOP = STACKTOP + 16 | 0; //@line 20724
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20724
 $2 = sp; //@line 20725
 HEAP32[$2 >> 2] = 0; //@line 20726
 HEAP32[$2 + 4 >> 2] = 0; //@line 20726
 HEAP32[$2 + 8 >> 2] = 0; //@line 20726
 $3 = $2 + 11 | 0; //@line 20727
 HEAP8[$3 >> 0] = 1; //@line 20728
 HEAP8[$2 >> 0] = 10; //@line 20729
 HEAP8[$2 + 1 >> 0] = 0; //@line 20731
 __THREW__ = 0; //@line 20732
 invoke_iiii(32, 34640, $2 | 0, 1) | 0; //@line 20733
 $5 = __THREW__; //@line 20734
 __THREW__ = 0; //@line 20734
 if ($5 & 1) {
  $10 = ___cxa_find_matching_catch_2() | 0; //@line 20737
  if ((HEAP8[$3 >> 0] | 0) >= 0) {
   ___resumeException($10 | 0); //@line 20742
  }
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 20746
  ___resumeException($10 | 0); //@line 20747
 } else {
  if ((HEAP8[$3 >> 0] | 0) >= 0) {
   STACKTOP = sp; //@line 20753
   return;
  }
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 20756
  STACKTOP = sp; //@line 20757
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 63548
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 63557
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 63562
      HEAP32[$13 >> 2] = $2; //@line 63563
      $19 = $1 + 40 | 0; //@line 63564
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 63567
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 63577
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 63581
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 63588
    }
   }
  }
 } while (0);
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 9979
 while (1) {
  if ((HEAPU8[26707 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 9986
   break;
  }
  $7 = $$016 + 1 | 0; //@line 9989
  if (($7 | 0) == 87) {
   $$01214 = 26795; //@line 9992
   $$115 = 87; //@line 9992
   label = 5; //@line 9993
   break;
  } else {
   $$016 = $7; //@line 9996
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 26795; //@line 10002
  } else {
   $$01214 = 26795; //@line 10004
   $$115 = $$016; //@line 10004
   label = 5; //@line 10005
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 10010
   $$113 = $$01214; //@line 10011
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 10015
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 10022
   if (!$$115) {
    $$012$lcssa = $$113; //@line 10025
    break;
   } else {
    $$01214 = $$113; //@line 10028
    label = 5; //@line 10029
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 10036
}
function __ZN6Runner21addFunctionDefinitionE18FunctionDefinition($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $5 = 0;
 $2 = $0 + 104 | 0; //@line 1449
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_($2, $1) | 0) {
  return;
 }
 $5 = __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_($2, $1) | 0; //@line 1455
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($5, $1) | 0; //@line 1456
 if (($5 | 0) != ($1 | 0)) {
  __ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($5 + 12 | 0, HEAP32[$1 + 12 >> 2] | 0, HEAP32[$1 + 16 >> 2] | 0); //@line 1464
 }
 HEAP16[$5 + 24 >> 1] = HEAP16[$1 + 24 >> 1] | 0; //@line 1469
 return;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 65157
 STACKTOP = STACKTOP + 16 | 0; //@line 65158
 $rem = __stackBase__ | 0; //@line 65159
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 65160
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 65161
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 65162
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 65163
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0; //@line 65164
 $4$1 = tempRet0; //@line 65165
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, tempRet0, $rem) | 0; //@line 65167
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0; //@line 65168
 $10$1 = tempRet0; //@line 65169
 STACKTOP = __stackBase__; //@line 65170
 return (tempRet0 = $10$1, $10$0) | 0; //@line 65171
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $13 = 0, $17 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 42256
 STACKTOP = STACKTOP + 16 | 0; //@line 42257
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42257
 $$byval_copy = sp + 4 | 0; //@line 42258
 $6 = sp; //@line 42259
 $7 = $0 + 8 | 0; //@line 42260
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] & 255]($7) | 0; //@line 42264
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 42266
 $13 = $11 + 288 | 0; //@line 42267
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 42268
 $17 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $13, $5, $4, 0) | 0) - $11 | 0; //@line 42272
 if (($17 | 0) < 288) {
  HEAP32[$1 >> 2] = (($17 | 0) / 12 | 0 | 0) % 12 | 0; //@line 42277
 }
 STACKTOP = sp; //@line 42279
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $13 = 0, $17 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 39304
 STACKTOP = STACKTOP + 16 | 0; //@line 39305
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39305
 $$byval_copy = sp + 4 | 0; //@line 39306
 $6 = sp; //@line 39307
 $7 = $0 + 8 | 0; //@line 39308
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] & 255]($7) | 0; //@line 39312
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 39314
 $13 = $11 + 288 | 0; //@line 39315
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 39316
 $17 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $13, $5, $4, 0) | 0) - $11 | 0; //@line 39320
 if (($17 | 0) < 288) {
  HEAP32[$1 >> 2] = (($17 | 0) / 12 | 0 | 0) % 12 | 0; //@line 39325
 }
 STACKTOP = sp; //@line 39327
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $16 = 0, $17 = 0, $7 = 0, $8 = 0;
 if (!(HEAP32[$0 + 64 >> 2] | 0)) {
  $$0 = -1; //@line 21975
  return $$0 | 0; //@line 21976
 }
 $7 = $0 + 12 | 0; //@line 21980
 $8 = HEAP32[$7 >> 2] | 0; //@line 21981
 if ((HEAP32[$0 + 8 >> 2] | 0) >>> 0 >= $8 >>> 0) {
  $$0 = -1; //@line 21984
  return $$0 | 0; //@line 21985
 }
 if (($1 | 0) == -1) {
  HEAP32[$7 >> 2] = $8 + -1; //@line 21990
  $$0 = 0; //@line 21991
  return $$0 | 0; //@line 21992
 }
 if (!(HEAP32[$0 + 88 >> 2] & 16)) {
  $16 = $1 & 255; //@line 21999
  $17 = $8 + -1 | 0; //@line 22000
  if ((HEAP8[$17 >> 0] | 0) == $16 << 24 >> 24) {
   $$pre$phi7Z2D = $16; //@line 22004
   $$pre$phiZ2D = $17; //@line 22004
  } else {
   $$0 = -1; //@line 22006
   return $$0 | 0; //@line 22007
  }
 } else {
  $$pre$phi7Z2D = $1 & 255; //@line 22012
  $$pre$phiZ2D = $8 + -1 | 0; //@line 22012
 }
 HEAP32[$7 >> 2] = $$pre$phiZ2D; //@line 22014
 HEAP8[$$pre$phiZ2D >> 0] = $$pre$phi7Z2D; //@line 22015
 $$0 = $1; //@line 22016
 return $$0 | 0; //@line 22017
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $16 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 42224
 STACKTOP = STACKTOP + 16 | 0; //@line 42225
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42225
 $$byval_copy = sp + 4 | 0; //@line 42226
 $6 = sp; //@line 42227
 $7 = $0 + 8 | 0; //@line 42228
 $10 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$7 >> 2] >> 2] & 255]($7) | 0; //@line 42231
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 42233
 $12 = $10 + 168 | 0; //@line 42234
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 42235
 $16 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $10, $12, $5, $4, 0) | 0) - $10 | 0; //@line 42239
 if (($16 | 0) < 168) {
  HEAP32[$1 >> 2] = (($16 | 0) / 12 | 0 | 0) % 7 | 0; //@line 42244
 }
 STACKTOP = sp; //@line 42246
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $16 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 39272
 STACKTOP = STACKTOP + 16 | 0; //@line 39273
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39273
 $$byval_copy = sp + 4 | 0; //@line 39274
 $6 = sp; //@line 39275
 $7 = $0 + 8 | 0; //@line 39276
 $10 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$7 >> 2] >> 2] & 255]($7) | 0; //@line 39279
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 39281
 $12 = $10 + 168 | 0; //@line 39282
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 39283
 $16 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $10, $12, $5, $4, 0) | 0) - $10 | 0; //@line 39287
 if (($16 | 0) < 168) {
  HEAP32[$1 >> 2] = (($16 | 0) / 12 | 0 | 0) % 7 | 0; //@line 39292
 }
 STACKTOP = sp; //@line 39294
 return;
}
function _fclose($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $7 = 0, $8 = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $29 = ___lockfile($0) | 0; //@line 13915
 } else {
  $29 = 0; //@line 13917
 }
 ___unlist_locked_file($0); //@line 13919
 $7 = (HEAP32[$0 >> 2] & 1 | 0) != 0; //@line 13922
 if (!$7) {
  $8 = ___ofl_lock() | 0; //@line 13924
  $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 13926
  $$pre = $0 + 56 | 0; //@line 13929
  if ($10 | 0) {
   HEAP32[$10 + 56 >> 2] = HEAP32[$$pre >> 2]; //@line 13933
  }
  $15 = HEAP32[$$pre >> 2] | 0; //@line 13935
  if ($15 | 0) {
   HEAP32[$15 + 52 >> 2] = $10; //@line 13940
  }
  if ((HEAP32[$8 >> 2] | 0) == ($0 | 0)) {
   HEAP32[$8 >> 2] = $15; //@line 13945
  }
  ___ofl_unlock(); //@line 13947
 }
 $21 = _fflush($0) | 0; //@line 13949
 $25 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 255]($0) | 0 | $21; //@line 13953
 $27 = HEAP32[$0 + 92 >> 2] | 0; //@line 13955
 if ($27 | 0) {
  _free($27); //@line 13958
 }
 if ($7) {
  if ($29 | 0) {
   ___unlockfile($0); //@line 13963
  }
 } else {
  _free($0); //@line 13966
 }
 return $25 | 0; //@line 13968
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$sroa$speculated = 0, $11 = 0, $14 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0;
 $6 = HEAP8[$0 + 11 >> 0] | 0; //@line 61942
 $7 = $6 << 24 >> 24 < 0; //@line 61943
 if ($7) {
  $11 = HEAP32[$0 + 4 >> 2] | 0; //@line 61947
 } else {
  $11 = $6 & 255; //@line 61950
 }
 if (($4 | 0) == -1 | $11 >>> 0 < $1 >>> 0) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0); //@line 61956
 }
 $14 = $11 - $1 | 0; //@line 61959
 $$sroa$speculated = $14 >>> 0 < $2 >>> 0 ? $14 : $2; //@line 61961
 if ($7) {
  $18 = HEAP32[$0 >> 2] | 0; //@line 61964
 } else {
  $18 = $0; //@line 61966
 }
 $19 = $$sroa$speculated >>> 0 > $4 >>> 0; //@line 61969
 $20 = __ZNSt3__211char_traitsIcE7compareEPKcS3_j($18 + $1 | 0, $3, $19 ? $4 : $$sroa$speculated) | 0; //@line 61971
 if (!$20) {
  return ($$sroa$speculated >>> 0 < $4 >>> 0 ? -1 : $19 & 1) | 0; //@line 61977
 } else {
  return $20 | 0; //@line 61979
 }
 return 0; //@line 61981
}
function ___fseeko_unlocked($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$019 = 0, $10 = 0, $12 = 0, label = 0;
 if (($2 | 0) == 1) {
  $$019 = $1 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 15907
 } else {
  $$019 = $1; //@line 15909
 }
 $10 = $0 + 20 | 0; //@line 15911
 $12 = $0 + 28 | 0; //@line 15913
 if ((HEAP32[$10 >> 2] | 0) >>> 0 > (HEAP32[$12 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, 0, 0) | 0; //@line 15919
  if (!(HEAP32[$10 >> 2] | 0)) {
   $$0 = -1; //@line 15923
  } else {
   label = 5; //@line 15925
  }
 } else {
  label = 5; //@line 15928
 }
 if ((label | 0) == 5) {
  HEAP32[$0 + 16 >> 2] = 0; //@line 15932
  HEAP32[$12 >> 2] = 0; //@line 15933
  HEAP32[$10 >> 2] = 0; //@line 15934
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 63]($0, $$019, $2) | 0) < 0) {
   $$0 = -1; //@line 15940
  } else {
   HEAP32[$0 + 8 >> 2] = 0; //@line 15943
   HEAP32[$0 + 4 >> 2] = 0; //@line 15945
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17; //@line 15948
   $$0 = 0; //@line 15949
  }
 }
 return $$0 | 0; //@line 15952
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $9 = 0;
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 64653
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 64657
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 64658
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 64659
   if (($9 | 0) > 1) {
    $13 = $1 + 54 | 0; //@line 64663
    $$0 = $0 + 24 | 0; //@line 64664
    do {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 64666
     if (HEAP8[$13 >> 0] | 0) {
      break L1;
     }
     $$0 = $$0 + 8 | 0; //@line 64672
    } while ($$0 >>> 0 < $10 >>> 0);
   }
  }
 } while (0);
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 64089
 STACKTOP = STACKTOP + 16 | 0; //@line 64090
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 64090
 __THREW__ = 0; //@line 64093
 invoke_v($0 | 0); //@line 64094
 $1 = __THREW__; //@line 64095
 __THREW__ = 0; //@line 64095
 if (!($1 & 1)) {
  __THREW__ = 0; //@line 64098
  invoke_vii(186, 32778, sp | 0); //@line 64099
  __THREW__ = 0; //@line 64100
 }
 $4 = ___cxa_find_matching_catch_3(0) | 0; //@line 64102
 ___cxa_begin_catch($4 | 0) | 0; //@line 64104
 __THREW__ = 0; //@line 64105
 invoke_vii(186, 32818, sp + 8 | 0); //@line 64106
 __THREW__ = 0; //@line 64107
 $7 = ___cxa_find_matching_catch_3(0) | 0; //@line 64108
 __THREW__ = 0; //@line 64110
 invoke_v(3); //@line 64111
 $9 = __THREW__; //@line 64112
 __THREW__ = 0; //@line 64112
 if ($9 & 1) {
  $11 = ___cxa_find_matching_catch_3(0) | 0; //@line 64115
  ___clang_call_terminate($11); //@line 64117
 } else {
  ___clang_call_terminate($7); //@line 64120
 }
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 41106
 STACKTOP = STACKTOP + 16 | 0; //@line 41107
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 41107
 $$byval_copy1 = sp + 12 | 0; //@line 41108
 $$byval_copy = sp + 8 | 0; //@line 41109
 $6 = sp + 4 | 0; //@line 41110
 $7 = sp; //@line 41111
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 41113
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 41115
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 41116
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 41117
 $10 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, 11888, 11920) | 0; //@line 41118
 STACKTOP = sp; //@line 41119
 return $10 | 0; //@line 41119
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 38288
 STACKTOP = STACKTOP + 16 | 0; //@line 38289
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 38289
 $$byval_copy1 = sp + 12 | 0; //@line 38290
 $$byval_copy = sp + 8 | 0; //@line 38291
 $6 = sp + 4 | 0; //@line 38292
 $7 = sp; //@line 38293
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 38295
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 38297
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 38298
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 38299
 $10 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, 30545, 30553) | 0; //@line 38300
 STACKTOP = sp; //@line 38301
 return $10 | 0; //@line 38301
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29387
 STACKTOP = STACKTOP + 16 | 0; //@line 29388
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29388
 $$byval_copy1 = sp + 12 | 0; //@line 29389
 $$byval_copy = sp + 8 | 0; //@line 29390
 $6 = sp + 4 | 0; //@line 29391
 $7 = sp; //@line 29392
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29394
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29396
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29397
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29398
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29399
 STACKTOP = sp; //@line 29400
 return $10 | 0; //@line 29400
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29433
 STACKTOP = STACKTOP + 16 | 0; //@line 29434
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29434
 $$byval_copy1 = sp + 12 | 0; //@line 29435
 $$byval_copy = sp + 8 | 0; //@line 29436
 $6 = sp + 4 | 0; //@line 29437
 $7 = sp; //@line 29438
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29440
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29442
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29443
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29444
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29445
 STACKTOP = sp; //@line 29446
 return $10 | 0; //@line 29446
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29410
 STACKTOP = STACKTOP + 16 | 0; //@line 29411
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29411
 $$byval_copy1 = sp + 12 | 0; //@line 29412
 $$byval_copy = sp + 8 | 0; //@line 29413
 $6 = sp + 4 | 0; //@line 29414
 $7 = sp; //@line 29415
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29417
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29419
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29420
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29421
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29422
 STACKTOP = sp; //@line 29423
 return $10 | 0; //@line 29423
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22862
 STACKTOP = STACKTOP + 16 | 0; //@line 22863
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22863
 $$byval_copy1 = sp + 12 | 0; //@line 22864
 $$byval_copy = sp + 8 | 0; //@line 22865
 $6 = sp + 4 | 0; //@line 22866
 $7 = sp; //@line 22867
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22869
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22871
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22872
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22873
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22874
 STACKTOP = sp; //@line 22875
 return $10 | 0; //@line 22875
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22908
 STACKTOP = STACKTOP + 16 | 0; //@line 22909
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22909
 $$byval_copy1 = sp + 12 | 0; //@line 22910
 $$byval_copy = sp + 8 | 0; //@line 22911
 $6 = sp + 4 | 0; //@line 22912
 $7 = sp; //@line 22913
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22915
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22917
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22918
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22919
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22920
 STACKTOP = sp; //@line 22921
 return $10 | 0; //@line 22921
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22885
 STACKTOP = STACKTOP + 16 | 0; //@line 22886
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22886
 $$byval_copy1 = sp + 12 | 0; //@line 22887
 $$byval_copy = sp + 8 | 0; //@line 22888
 $6 = sp + 4 | 0; //@line 22889
 $7 = sp; //@line 22890
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22892
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22894
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22895
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22896
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22897
 STACKTOP = sp; //@line 22898
 return $10 | 0; //@line 22898
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 13124
  $5 = ($1 | 0) > 2046; //@line 13126
  $7 = $1 + -2046 | 0; //@line 13128
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 13133
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 13133
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 13137
   $12 = ($1 | 0) < -2044; //@line 13139
   $14 = $1 + 2044 | 0; //@line 13141
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 13146
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 13146
  } else {
   $$0 = $0; //@line 13148
   $$020 = $1; //@line 13148
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 13152
 $18 = tempRet0; //@line 13153
 HEAP32[tempDoublePtr >> 2] = $17; //@line 13154
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 13154
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29318
 STACKTOP = STACKTOP + 16 | 0; //@line 29319
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29319
 $$byval_copy1 = sp + 12 | 0; //@line 29320
 $$byval_copy = sp + 8 | 0; //@line 29321
 $6 = sp + 4 | 0; //@line 29322
 $7 = sp; //@line 29323
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29325
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29327
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29328
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29329
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29330
 STACKTOP = sp; //@line 29331
 return $10 | 0; //@line 29331
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22793
 STACKTOP = STACKTOP + 16 | 0; //@line 22794
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22794
 $$byval_copy1 = sp + 12 | 0; //@line 22795
 $$byval_copy = sp + 8 | 0; //@line 22796
 $6 = sp + 4 | 0; //@line 22797
 $7 = sp; //@line 22798
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22800
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22802
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22803
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22804
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22805
 STACKTOP = sp; //@line 22806
 return $10 | 0; //@line 22806
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29364
 STACKTOP = STACKTOP + 16 | 0; //@line 29365
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29365
 $$byval_copy1 = sp + 12 | 0; //@line 29366
 $$byval_copy = sp + 8 | 0; //@line 29367
 $6 = sp + 4 | 0; //@line 29368
 $7 = sp; //@line 29369
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29371
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29373
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29374
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29375
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29376
 STACKTOP = sp; //@line 29377
 return $10 | 0; //@line 29377
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29295
 STACKTOP = STACKTOP + 16 | 0; //@line 29296
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29296
 $$byval_copy1 = sp + 12 | 0; //@line 29297
 $$byval_copy = sp + 8 | 0; //@line 29298
 $6 = sp + 4 | 0; //@line 29299
 $7 = sp; //@line 29300
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29302
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29304
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29305
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29306
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29307
 STACKTOP = sp; //@line 29308
 return $10 | 0; //@line 29308
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29341
 STACKTOP = STACKTOP + 16 | 0; //@line 29342
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29342
 $$byval_copy1 = sp + 12 | 0; //@line 29343
 $$byval_copy = sp + 8 | 0; //@line 29344
 $6 = sp + 4 | 0; //@line 29345
 $7 = sp; //@line 29346
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29348
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29350
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29351
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29352
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29353
 STACKTOP = sp; //@line 29354
 return $10 | 0; //@line 29354
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22839
 STACKTOP = STACKTOP + 16 | 0; //@line 22840
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22840
 $$byval_copy1 = sp + 12 | 0; //@line 22841
 $$byval_copy = sp + 8 | 0; //@line 22842
 $6 = sp + 4 | 0; //@line 22843
 $7 = sp; //@line 22844
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22846
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22848
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22849
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22850
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22851
 STACKTOP = sp; //@line 22852
 return $10 | 0; //@line 22852
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22770
 STACKTOP = STACKTOP + 16 | 0; //@line 22771
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22771
 $$byval_copy1 = sp + 12 | 0; //@line 22772
 $$byval_copy = sp + 8 | 0; //@line 22773
 $6 = sp + 4 | 0; //@line 22774
 $7 = sp; //@line 22775
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22777
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22779
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22780
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22781
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22782
 STACKTOP = sp; //@line 22783
 return $10 | 0; //@line 22783
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22816
 STACKTOP = STACKTOP + 16 | 0; //@line 22817
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22817
 $$byval_copy1 = sp + 12 | 0; //@line 22818
 $$byval_copy = sp + 8 | 0; //@line 22819
 $6 = sp + 4 | 0; //@line 22820
 $7 = sp; //@line 22821
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22823
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22825
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22826
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22827
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22828
 STACKTOP = sp; //@line 22829
 return $10 | 0; //@line 22829
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29272
 STACKTOP = STACKTOP + 16 | 0; //@line 29273
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29273
 $$byval_copy1 = sp + 12 | 0; //@line 29274
 $$byval_copy = sp + 8 | 0; //@line 29275
 $6 = sp + 4 | 0; //@line 29276
 $7 = sp; //@line 29277
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29279
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29281
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29282
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29283
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29284
 STACKTOP = sp; //@line 29285
 return $10 | 0; //@line 29285
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 29249
 STACKTOP = STACKTOP + 16 | 0; //@line 29250
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 29250
 $$byval_copy1 = sp + 12 | 0; //@line 29251
 $$byval_copy = sp + 8 | 0; //@line 29252
 $6 = sp + 4 | 0; //@line 29253
 $7 = sp; //@line 29254
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 29256
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 29258
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 29259
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 29260
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 29261
 STACKTOP = sp; //@line 29262
 return $10 | 0; //@line 29262
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22747
 STACKTOP = STACKTOP + 16 | 0; //@line 22748
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22748
 $$byval_copy1 = sp + 12 | 0; //@line 22749
 $$byval_copy = sp + 8 | 0; //@line 22750
 $6 = sp + 4 | 0; //@line 22751
 $7 = sp; //@line 22752
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22754
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22756
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22757
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22758
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22759
 STACKTOP = sp; //@line 22760
 return $10 | 0; //@line 22760
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 22724
 STACKTOP = STACKTOP + 16 | 0; //@line 22725
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22725
 $$byval_copy1 = sp + 12 | 0; //@line 22726
 $$byval_copy = sp + 8 | 0; //@line 22727
 $6 = sp + 4 | 0; //@line 22728
 $7 = sp; //@line 22729
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2]; //@line 22731
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2]; //@line 22733
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22734
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2]; //@line 22735
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0; //@line 22736
 STACKTOP = sp; //@line 22737
 return $10 | 0; //@line 22737
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9805
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9805
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9806
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 9807
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 9816
    $$016 = $9; //@line 9819
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 9819
   } else {
    $$016 = $0; //@line 9821
    $storemerge = 0; //@line 9821
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 9823
   $$0 = $$016; //@line 9824
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 9828
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 9834
   HEAP32[tempDoublePtr >> 2] = $2; //@line 9837
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 9837
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 9838
  }
 }
 return +$$0;
}
function _strtox($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0.0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11213
 STACKTOP = STACKTOP + 128 | 0; //@line 11214
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 11214
 $3 = sp; //@line 11215
 dest = $3; //@line 11216
 stop = dest + 124 | 0; //@line 11216
 do {
  HEAP32[dest >> 2] = 0; //@line 11216
  dest = dest + 4 | 0; //@line 11216
 } while ((dest | 0) < (stop | 0));
 $4 = $3 + 4 | 0; //@line 11217
 HEAP32[$4 >> 2] = $0; //@line 11218
 $5 = $3 + 8 | 0; //@line 11219
 HEAP32[$5 >> 2] = -1; //@line 11220
 HEAP32[$3 + 44 >> 2] = $0; //@line 11222
 HEAP32[$3 + 76 >> 2] = -1; //@line 11224
 ___shlim($3, 0); //@line 11225
 $8 = +___floatscan($3, $2, 1); //@line 11226
 $14 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) + (HEAP32[$3 + 108 >> 2] | 0) | 0; //@line 11232
 if ($1 | 0) {
  HEAP32[$1 >> 2] = $14 | 0 ? $0 + $14 | 0 : $0; //@line 11238
 }
 STACKTOP = sp; //@line 11240
 return +$8;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 43317
 STACKTOP = STACKTOP + 16 | 0; //@line 43318
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 43318
 $$byval_copy = sp + 4 | 0; //@line 43319
 $6 = sp; //@line 43320
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 43322
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 43323
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0; //@line 43324
 if (!(HEAP32[$4 >> 2] & 4)) {
  if (($8 | 0) < 69) {
   $$0 = $8 + 2e3 | 0; //@line 43332
  } else {
   $$0 = ($8 | 0) < 100 ? $8 + 1900 | 0 : $8; //@line 43337
  }
  HEAP32[$1 >> 2] = $$0 + -1900; //@line 43340
 }
 STACKTOP = sp; //@line 43342
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 40397
 STACKTOP = STACKTOP + 16 | 0; //@line 40398
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 40398
 $$byval_copy = sp + 4 | 0; //@line 40399
 $6 = sp; //@line 40400
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 40402
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 40403
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0; //@line 40404
 if (!(HEAP32[$4 >> 2] & 4)) {
  if (($8 | 0) < 69) {
   $$0 = $8 + 2e3 | 0; //@line 40412
  } else {
   $$0 = ($8 | 0) < 100 ? $8 + 1900 | 0 : $8; //@line 40417
  }
  HEAP32[$1 >> 2] = $$0 + -1900; //@line 40420
 }
 STACKTOP = sp; //@line 40422
 return;
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, label = 0;
 $1 = $0 + 20 | 0; //@line 14104
 $3 = $0 + 28 | 0; //@line 14106
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, 0, 0) | 0; //@line 14112
  if (!(HEAP32[$1 >> 2] | 0)) {
   $$0 = -1; //@line 14116
  } else {
   label = 3; //@line 14118
  }
 } else {
  label = 3; //@line 14121
 }
 if ((label | 0) == 3) {
  $10 = $0 + 4 | 0; //@line 14124
  $11 = HEAP32[$10 >> 2] | 0; //@line 14125
  $12 = $0 + 8 | 0; //@line 14126
  $13 = HEAP32[$12 >> 2] | 0; //@line 14127
  if ($11 >>> 0 < $13 >>> 0) {
   FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 63]($0, $11 - $13 | 0, 1) | 0; //@line 14135
  }
  HEAP32[$0 + 16 >> 2] = 0; //@line 14138
  HEAP32[$3 >> 2] = 0; //@line 14139
  HEAP32[$1 >> 2] = 0; //@line 14140
  HEAP32[$12 >> 2] = 0; //@line 14141
  HEAP32[$10 >> 2] = 0; //@line 14142
  $$0 = 0; //@line 14143
 }
 return $$0 | 0; //@line 14145
}
function __ZN6Parser3lexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 2384
 STACKTOP = STACKTOP + 16 | 0; //@line 2385
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2385
 $3 = sp; //@line 2386
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3, $2); //@line 2387
 __THREW__ = 0; //@line 2388
 invoke_viiii(18, $0 | 0, $1 | 0, $3 | 0, 1); //@line 2389
 $4 = __THREW__; //@line 2390
 __THREW__ = 0; //@line 2390
 if ($4 & 1) {
  $10 = ___cxa_find_matching_catch_2() | 0; //@line 2393
  if ((HEAP8[$3 + 11 >> 0] | 0) >= 0) {
   ___resumeException($10 | 0); //@line 2399
  }
  __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 2403
  ___resumeException($10 | 0); //@line 2404
 } else {
  if ((HEAP8[$3 + 11 >> 0] | 0) >= 0) {
   STACKTOP = sp; //@line 2411
   return;
  }
  __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 2414
  STACKTOP = sp; //@line 2415
  return;
 }
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $$1 = 0, $$sink$sink = 0, $10 = 0;
 if (!($3 & 2048)) {
  $$0 = $0; //@line 36216
 } else {
  HEAP8[$0 >> 0] = 43; //@line 36219
  $$0 = $0 + 1 | 0; //@line 36220
 }
 if (!($3 & 512)) {
  $$014 = $1; //@line 36225
  $$1 = $$0; //@line 36225
 } else {
  HEAP8[$$0 >> 0] = 35; //@line 36228
  $$014 = $1; //@line 36229
  $$1 = $$0 + 1 | 0; //@line 36229
 }
 while (1) {
  $10 = HEAP8[$$014 >> 0] | 0; //@line 36232
  if (!($10 << 24 >> 24)) {
   break;
  }
  HEAP8[$$1 >> 0] = $10; //@line 36239
  $$014 = $$014 + 1 | 0; //@line 36240
  $$1 = $$1 + 1 | 0; //@line 36240
 }
 switch ($3 & 74) {
 case 64:
  {
   $$sink$sink = 111; //@line 36247
   break;
  }
 case 8:
  {
   $$sink$sink = $3 & 16384 | 0 ? 88 : 120; //@line 36254
   break;
  }
 default:
  {
   $$sink$sink = $2 ? 100 : 117; //@line 36259
  }
 }
 HEAP8[$$1 >> 0] = $$sink$sink; //@line 36262
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 42835
 STACKTOP = STACKTOP + 16 | 0; //@line 42836
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42836
 $$byval_copy = sp + 4 | 0; //@line 42837
 $6 = sp; //@line 42838
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 42840
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 42841
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 42842
 $9 = HEAP32[$4 >> 2] | 0; //@line 42843
 if (($8 + -1 | 0) >>> 0 < 12 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 42850
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 42853
 }
 STACKTOP = sp; //@line 42855
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 39906
 STACKTOP = STACKTOP + 16 | 0; //@line 39907
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39907
 $$byval_copy = sp + 4 | 0; //@line 39908
 $6 = sp; //@line 39909
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 39911
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 39912
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 39913
 $9 = HEAP32[$4 >> 2] | 0; //@line 39914
 if (($8 + -1 | 0) >>> 0 < 12 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 39921
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 39924
 }
 STACKTOP = sp; //@line 39926
 return;
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $6 = 0, label = 0;
 L1 : do {
  switch ((HEAP32[$2 + 4 >> 2] & 176) << 24 >> 24) {
  case 16:
   {
    $6 = HEAP8[$0 >> 0] | 0; //@line 35623
    switch ($6 << 24 >> 24) {
    case 43:
    case 45:
     {
      $$0 = $0 + 1 | 0; //@line 35627
      break L1;
      break;
     }
    default:
     {}
    }
    if (($1 - $0 | 0) > 1 & $6 << 24 >> 24 == 48) {
     switch (HEAP8[$0 + 1 >> 0] | 0) {
     case 88:
     case 120:
      {
       break;
      }
     default:
      {
       label = 7; //@line 35648
       break L1;
      }
     }
     $$0 = $0 + 2 | 0; //@line 35653
    } else {
     label = 7; //@line 35655
    }
    break;
   }
  case 32:
   {
    $$0 = $1; //@line 35660
    break;
   }
  default:
   {
    label = 7; //@line 35664
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $$0 = $0; //@line 35669
 }
 return $$0 | 0; //@line 35671
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 42776
 STACKTOP = STACKTOP + 16 | 0; //@line 42777
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42777
 $$byval_copy = sp + 4 | 0; //@line 42778
 $6 = sp; //@line 42779
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 42781
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 42782
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 42783
 $9 = HEAP32[$4 >> 2] | 0; //@line 42784
 if (($8 + -1 | 0) >>> 0 < 31 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 42791
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 42794
 }
 STACKTOP = sp; //@line 42796
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 42865
 STACKTOP = STACKTOP + 16 | 0; //@line 42866
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42866
 $$byval_copy = sp + 4 | 0; //@line 42867
 $6 = sp; //@line 42868
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 42870
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 42871
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 3) | 0; //@line 42872
 $9 = HEAP32[$4 >> 2] | 0; //@line 42873
 if (($8 | 0) < 366 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 42879
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 42882
 }
 STACKTOP = sp; //@line 42884
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 39847
 STACKTOP = STACKTOP + 16 | 0; //@line 39848
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39848
 $$byval_copy = sp + 4 | 0; //@line 39849
 $6 = sp; //@line 39850
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 39852
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 39853
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 39854
 $9 = HEAP32[$4 >> 2] | 0; //@line 39855
 if (($8 + -1 | 0) >>> 0 < 31 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 39862
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 39865
 }
 STACKTOP = sp; //@line 39867
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 39936
 STACKTOP = STACKTOP + 16 | 0; //@line 39937
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39937
 $$byval_copy = sp + 4 | 0; //@line 39938
 $6 = sp; //@line 39939
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 39941
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 39942
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 3) | 0; //@line 39943
 $9 = HEAP32[$4 >> 2] | 0; //@line 39944
 if (($8 | 0) < 366 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 39950
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 39953
 }
 STACKTOP = sp; //@line 39955
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 42894
 STACKTOP = STACKTOP + 16 | 0; //@line 42895
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42895
 $$byval_copy = sp + 4 | 0; //@line 42896
 $6 = sp; //@line 42897
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 42899
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 42900
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 42901
 $9 = HEAP32[$4 >> 2] | 0; //@line 42902
 if (($8 | 0) < 13 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8 + -1; //@line 42909
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 42912
 }
 STACKTOP = sp; //@line 42914
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 39965
 STACKTOP = STACKTOP + 16 | 0; //@line 39966
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39966
 $$byval_copy = sp + 4 | 0; //@line 39967
 $6 = sp; //@line 39968
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 39970
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 39971
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 39972
 $9 = HEAP32[$4 >> 2] | 0; //@line 39973
 if (($8 | 0) < 13 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8 + -1; //@line 39980
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 39983
 }
 STACKTOP = sp; //@line 39985
 return;
}
function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 23618
 STACKTOP = STACKTOP + 48 | 0; //@line 23619
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 23619
 $$byval_copy = sp + 32 | 0; //@line 23620
 $1 = sp + 24 | 0; //@line 23621
 $2 = sp; //@line 23622
 $3 = sp + 16 | 0; //@line 23623
 HEAP32[$3 >> 2] = 264; //@line 23624
 HEAP32[$3 + 4 >> 2] = 0; //@line 23626
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 23627
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 23627
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($2, $$byval_copy, $0); //@line 23628
 if ((HEAP32[$0 >> 2] | 0) != -1) {
  HEAP32[$$byval_copy >> 2] = $2; //@line 23632
  HEAP32[$1 >> 2] = $$byval_copy; //@line 23633
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0, $1, 265); //@line 23634
 }
 STACKTOP = sp; //@line 23639
 return (HEAP32[$0 + 4 >> 2] | 0) + -1 | 0; //@line 23639
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 43288
 STACKTOP = STACKTOP + 16 | 0; //@line 43289
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 43289
 $$byval_copy = sp + 4 | 0; //@line 43290
 $6 = sp; //@line 43291
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 43293
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 43294
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 1) | 0; //@line 43295
 $9 = HEAP32[$4 >> 2] | 0; //@line 43296
 if (($8 | 0) < 7 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 43302
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 43305
 }
 STACKTOP = sp; //@line 43307
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 43259
 STACKTOP = STACKTOP + 16 | 0; //@line 43260
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 43260
 $$byval_copy = sp + 4 | 0; //@line 43261
 $6 = sp; //@line 43262
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 43264
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 43265
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 43266
 $9 = HEAP32[$4 >> 2] | 0; //@line 43267
 if (($8 | 0) < 61 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 43273
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 43276
 }
 STACKTOP = sp; //@line 43278
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 42924
 STACKTOP = STACKTOP + 16 | 0; //@line 42925
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42925
 $$byval_copy = sp + 4 | 0; //@line 42926
 $6 = sp; //@line 42927
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 42929
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 42930
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 42931
 $9 = HEAP32[$4 >> 2] | 0; //@line 42932
 if (($8 | 0) < 60 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 42938
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 42941
 }
 STACKTOP = sp; //@line 42943
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 40368
 STACKTOP = STACKTOP + 16 | 0; //@line 40369
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 40369
 $$byval_copy = sp + 4 | 0; //@line 40370
 $6 = sp; //@line 40371
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 40373
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 40374
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 1) | 0; //@line 40375
 $9 = HEAP32[$4 >> 2] | 0; //@line 40376
 if (($8 | 0) < 7 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 40382
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 40385
 }
 STACKTOP = sp; //@line 40387
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 40339
 STACKTOP = STACKTOP + 16 | 0; //@line 40340
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 40340
 $$byval_copy = sp + 4 | 0; //@line 40341
 $6 = sp; //@line 40342
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 40344
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 40345
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 40346
 $9 = HEAP32[$4 >> 2] | 0; //@line 40347
 if (($8 | 0) < 61 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 40353
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 40356
 }
 STACKTOP = sp; //@line 40358
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 39995
 STACKTOP = STACKTOP + 16 | 0; //@line 39996
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39996
 $$byval_copy = sp + 4 | 0; //@line 39997
 $6 = sp; //@line 39998
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 40000
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 40001
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 40002
 $9 = HEAP32[$4 >> 2] | 0; //@line 40003
 if (($8 | 0) < 60 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 40009
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 40012
 }
 STACKTOP = sp; //@line 40014
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 42806
 STACKTOP = STACKTOP + 16 | 0; //@line 42807
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 42807
 $$byval_copy = sp + 4 | 0; //@line 42808
 $6 = sp; //@line 42809
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 42811
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 42812
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 42813
 $9 = HEAP32[$4 >> 2] | 0; //@line 42814
 if (($8 | 0) < 24 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 42820
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 42823
 }
 STACKTOP = sp; //@line 42825
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 39877
 STACKTOP = STACKTOP + 16 | 0; //@line 39878
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 39878
 $$byval_copy = sp + 4 | 0; //@line 39879
 $6 = sp; //@line 39880
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 39882
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 39883
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0; //@line 39884
 $9 = HEAP32[$4 >> 2] | 0; //@line 39885
 if (($8 | 0) < 24 & ($9 & 4 | 0) == 0) {
  HEAP32[$1 >> 2] = $8; //@line 39891
 } else {
  HEAP32[$4 >> 2] = $9 | 4; //@line 39894
 }
 STACKTOP = sp; //@line 39896
 return;
}
function _getc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $15 = 0, $16 = 0, $24 = 0, $6 = 0, $7 = 0, label = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 16337
 } else {
  if (!(___lockfile($0) | 0)) {
   label = 3; //@line 16342
  } else {
   $15 = $0 + 4 | 0; //@line 16344
   $16 = HEAP32[$15 >> 2] | 0; //@line 16345
   if ($16 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
    HEAP32[$15 >> 2] = $16 + 1; //@line 16351
    $24 = HEAPU8[$16 >> 0] | 0; //@line 16354
   } else {
    $24 = ___uflow($0) | 0; //@line 16357
   }
   ___unlockfile($0); //@line 16359
   $$0 = $24; //@line 16360
  }
 }
 do {
  if ((label | 0) == 3) {
   $6 = $0 + 4 | 0; //@line 16365
   $7 = HEAP32[$6 >> 2] | 0; //@line 16366
   if ($7 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
    HEAP32[$6 >> 2] = $7 + 1; //@line 16372
    $$0 = HEAPU8[$7 >> 0] | 0; //@line 16375
    break;
   } else {
    $$0 = ___uflow($0) | 0; //@line 16379
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 16384
}
function __ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE19__generic_constructIRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSW_EJLj1ELj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESU_SX_SZ_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $9 = 0;
 $3 = $2 + 16 | 0; //@line 17000
 $4 = HEAP32[$3 >> 2] | 0; //@line 17001
 if (!$4) {
  HEAP32[$1 + 16 >> 2] = 0; //@line 17005
  return;
 }
 if (($2 | 0) == ($4 | 0)) {
  HEAP32[$1 + 16 >> 2] = $1; //@line 17011
  $9 = HEAP32[$3 >> 2] | 0; //@line 17012
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 255]($9, $1); //@line 17016
  return;
 } else {
  HEAP32[$1 + 16 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] & 255]($4) | 0; //@line 17024
  return;
 }
}
function __ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE19__generic_constructIRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSW_EJLj0ELj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESU_SX_SZ_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $9 = 0;
 $3 = $2 + 16 | 0; //@line 16966
 $4 = HEAP32[$3 >> 2] | 0; //@line 16967
 if (!$4) {
  HEAP32[$1 + 16 >> 2] = 0; //@line 16971
  return;
 }
 if (($2 | 0) == ($4 | 0)) {
  HEAP32[$1 + 16 >> 2] = $1; //@line 16977
  $9 = HEAP32[$3 >> 2] | 0; //@line 16978
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] & 255]($9, $1); //@line 16982
  return;
 } else {
  HEAP32[$1 + 16 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] & 255]($4) | 0; //@line 16990
  return;
 }
}
function __ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 62572
 STACKTOP = STACKTOP + 16 | 0; //@line 62573
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62573
 $1 = sp; //@line 62574
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($1, $0, 32076); //@line 62575
 __THREW__ = 0; //@line 62576
 invoke_vi(270, $1 | 0); //@line 62577
 $2 = __THREW__; //@line 62578
 __THREW__ = 0; //@line 62578
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 62581
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1); //@line 62583
  ___resumeException($4 | 0); //@line 62584
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1); //@line 62587
  STACKTOP = sp; //@line 62588
  return;
 }
}
function __ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 62594
 STACKTOP = STACKTOP + 16 | 0; //@line 62595
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62595
 $1 = sp; //@line 62596
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($1, $0, 32060); //@line 62597
 __THREW__ = 0; //@line 62598
 invoke_vi(271, $1 | 0); //@line 62599
 $2 = __THREW__; //@line 62600
 __THREW__ = 0; //@line 62600
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 62603
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1); //@line 62605
  ___resumeException($4 | 0); //@line 62606
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1); //@line 62609
  STACKTOP = sp; //@line 62610
  return;
 }
}
function __ZN13CharmFunctionD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 52 | 0; //@line 11852
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$1 >> 2] | 0); //@line 11858
 }
 $6 = $0 + 40 | 0; //@line 11860
 $7 = HEAP32[$6 >> 2] | 0; //@line 11861
 if ($7 | 0) {
  $9 = $0 + 44 | 0; //@line 11864
  $10 = HEAP32[$9 >> 2] | 0; //@line 11865
  if (($10 | 0) == ($7 | 0)) {
   $16 = $7; //@line 11868
  } else {
   $13 = $10; //@line 11870
   do {
    $12 = $13 + -72 | 0; //@line 11872
    HEAP32[$9 >> 2] = $12; //@line 11873
    __ZN13CharmFunctionD2Ev($12); //@line 11874
    $13 = HEAP32[$9 >> 2] | 0; //@line 11875
   } while (($13 | 0) != ($7 | 0));
   $16 = HEAP32[$6 >> 2] | 0; //@line 11884
  }
  __ZdlPv($16); //@line 11886
 }
 $17 = $0 + 4 | 0; //@line 11888
 if ((HEAP8[$17 + 11 >> 0] | 0) >= 0) {
  return;
 }
 __ZdlPv(HEAP32[$17 >> 2] | 0); //@line 11896
 return;
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1$i = 0, $11 = 0, $14 = 0, $16 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 61900
 STACKTOP = STACKTOP + 16 | 0; //@line 61901
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61901
 $3 = sp; //@line 61902
 $5 = HEAP8[$0 + 11 >> 0] | 0; //@line 61904
 if ($5 << 24 >> 24 < 0) {
  $11 = HEAP32[$0 + 4 >> 2] | 0; //@line 61910
  $14 = HEAP32[$0 >> 2] | 0; //@line 61910
 } else {
  $11 = $5 & 255; //@line 61913
  $14 = $0; //@line 61913
 }
 HEAP8[$3 >> 0] = $1; //@line 61915
 if ($11 >>> 0 > $2 >>> 0) {
  $16 = __ZNSt3__211char_traitsIcE4findEPKcjRS2_($14 + $2 | 0, $11 - $2 | 0, $3) | 0; //@line 61920
  $$1$i = ($16 | 0) == 0 ? -1 : $16 - $14 | 0; //@line 61926
 } else {
  $$1$i = -1; //@line 61928
 }
 STACKTOP = sp; //@line 61930
 return $$1$i | 0; //@line 61930
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 44065
 STACKTOP = STACKTOP + 16 | 0; //@line 44066
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 44066
 $6 = sp; //@line 44067
 HEAP8[$6 >> 0] = 37; //@line 44068
 $7 = $6 + 1 | 0; //@line 44069
 HEAP8[$7 >> 0] = $4; //@line 44070
 $8 = $6 + 2 | 0; //@line 44071
 HEAP8[$8 >> 0] = $5; //@line 44072
 HEAP8[$6 + 3 >> 0] = 0; //@line 44074
 if ($5 << 24 >> 24) {
  HEAP8[$7 >> 0] = $5; //@line 44077
  HEAP8[$8 >> 0] = $4; //@line 44078
 }
 $12 = __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_($1, HEAP32[$2 >> 2] | 0) | 0; //@line 44081
 HEAP32[$2 >> 2] = $1 + (_strftime_l($1 | 0, $12 | 0, $6 | 0, $3 | 0, HEAP32[$0 >> 2] | 0) | 0); //@line 44085
 STACKTOP = sp; //@line 44086
 return;
}
function __ZNSt3__211__stdoutbufIwE6xsputnEPKwi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $12 = 0, $14 = 0, $15 = 0;
 L1 : do {
  if (!(HEAP8[$0 + 44 >> 0] | 0)) {
   $$0 = 0; //@line 21085
   $$011 = $1; //@line 21085
   while (1) {
    if (($$0 | 0) >= ($2 | 0)) {
     $$010 = $$0; //@line 21089
     break L1;
    }
    $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0; //@line 21094
    $14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$$011 >> 2] | 0) | 0; //@line 21096
    $15 = FUNCTION_TABLE_iii[$12 & 127]($0, $14) | 0; //@line 21097
    if (($15 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) {
     $$010 = $$0; //@line 21101
     break L1;
    }
    $$0 = $$0 + 1 | 0; //@line 21106
    $$011 = $$011 + 4 | 0; //@line 21106
   }
  } else {
   $$010 = _fwrite($1, 4, $2, HEAP32[$0 + 32 >> 2] | 0) | 0; //@line 21112
  }
 } while (0);
 return $$010 | 0; //@line 21115
}
function __ZNSt3__211__stdoutbufIcE6xsputnEPKci($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $12 = 0, $14 = 0, $15 = 0;
 L1 : do {
  if (!(HEAP8[$0 + 44 >> 0] | 0)) {
   $$0 = 0; //@line 21345
   $$011 = $1; //@line 21345
   while (1) {
    if (($$0 | 0) >= ($2 | 0)) {
     $$010 = $$0; //@line 21349
     break L1;
    }
    $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0; //@line 21354
    $14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$$011 >> 0] | 0) | 0; //@line 21356
    $15 = FUNCTION_TABLE_iii[$12 & 127]($0, $14) | 0; //@line 21357
    if (($15 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
     $$010 = $$0; //@line 21361
     break L1;
    }
    $$0 = $$0 + 1 | 0; //@line 21366
    $$011 = $$011 + 1 | 0; //@line 21366
   }
  } else {
   $$010 = _fwrite($1, 1, $2, HEAP32[$0 + 32 >> 2] | 0) | 0; //@line 21372
  }
 } while (0);
 return $$010 | 0; //@line 21375
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $4 = 0;
 $1 = $0 + 44 | 0; //@line 966
 $2 = HEAP32[$1 >> 2] | 0; //@line 967
 $4 = HEAP32[$0 + 24 >> 2] | 0; //@line 969
 if ($2 >>> 0 < $4 >>> 0) {
  HEAP32[$1 >> 2] = $4; //@line 972
  $13 = $4; //@line 973
 } else {
  $13 = $2; //@line 975
 }
 if (!(HEAP32[$0 + 48 >> 2] & 8)) {
  $$0 = -1; //@line 982
  return $$0 | 0; //@line 983
 }
 $10 = $0 + 16 | 0; //@line 985
 $11 = HEAP32[$10 >> 2] | 0; //@line 986
 if ($11 >>> 0 < $13 >>> 0) {
  HEAP32[$10 >> 2] = $13; //@line 989
  $17 = $13; //@line 990
 } else {
  $17 = $11; //@line 992
 }
 $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 995
 if ($15 >>> 0 >= $17 >>> 0) {
  $$0 = -1; //@line 998
  return $$0 | 0; //@line 999
 }
 $$0 = HEAPU8[$15 >> 0] | 0; //@line 1003
 return $$0 | 0; //@line 1004
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 11155
 $3 = HEAP8[$1 >> 0] | 0; //@line 11157
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11161
 $7 = $0 + 20 | 0; //@line 11162
 $9 = $0 + 28 | 0; //@line 11164
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, 0, 0) | 0; //@line 11170
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 11173
 HEAP32[$9 >> 2] = 0; //@line 11174
 HEAP32[$7 >> 2] = 0; //@line 11175
 $15 = HEAP32[$0 >> 2] | 0; //@line 11176
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 11184
  HEAP32[$0 + 8 >> 2] = $23; //@line 11186
  HEAP32[$0 + 4 >> 2] = $23; //@line 11188
  $$0 = $15 << 27 >> 31; //@line 11191
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 11194
  $$0 = -1; //@line 11195
 }
 return $$0 | 0; //@line 11197
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $6 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 0; //@line 59367
 HEAP32[$0 + 4 >> 2] = 0; //@line 59369
 HEAP32[$0 + 8 >> 2] = 0; //@line 59371
 HEAP8[$0 + 128 >> 0] = 0; //@line 59373
 do {
  if ($1 | 0) {
   __THREW__ = 0; //@line 59377
   invoke_vii(179, $0 | 0, $1 | 0); //@line 59378
   $6 = __THREW__; //@line 59379
   __THREW__ = 0; //@line 59379
   if (!($6 & 1)) {
    __THREW__ = 0; //@line 59382
    invoke_vii(180, $0 | 0, $1 | 0); //@line 59383
    $8 = __THREW__; //@line 59384
    __THREW__ = 0; //@line 59384
    if (!($8 & 1)) {
     break;
    }
   }
   $10 = ___cxa_find_matching_catch_2() | 0; //@line 59390
   __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0); //@line 59392
   ___resumeException($10 | 0); //@line 59393
  }
 } while (0);
 return;
}
function _strtox_43($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $12 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP; //@line 10384
 STACKTOP = STACKTOP + 128 | 0; //@line 10385
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 10385
 $5 = sp; //@line 10386
 HEAP32[$5 >> 2] = 0; //@line 10387
 $6 = $5 + 4 | 0; //@line 10388
 HEAP32[$6 >> 2] = $0; //@line 10389
 HEAP32[$5 + 44 >> 2] = $0; //@line 10391
 $10 = $5 + 8 | 0; //@line 10395
 HEAP32[$10 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0; //@line 10396
 HEAP32[$5 + 76 >> 2] = -1; //@line 10398
 ___shlim($5, 0); //@line 10399
 $12 = ___intscan($5, $2, 1, $3, $4) | 0; //@line 10400
 if ($1 | 0) {
  HEAP32[$1 >> 2] = $0 + ((HEAP32[$6 >> 2] | 0) + (HEAP32[$5 + 108 >> 2] | 0) - (HEAP32[$10 >> 2] | 0)); //@line 10411
 }
 STACKTOP = sp; //@line 10414
 return $12 | 0; //@line 10414
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 65112
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1; //@line 65113
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 65114
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1; //@line 65115
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0; //@line 65116
 $4$1 = tempRet0; //@line 65117
 $7$0 = $2$0 ^ $1$0; //@line 65119
 $7$1 = $2$1 ^ $1$1; //@line 65120
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, tempRet0, 0) | 0) ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0; //@line 65123
}
function __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $9 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP; //@line 19592
 STACKTOP = STACKTOP + 16 | 0; //@line 19593
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19593
 $tmpcast$byval_copy = sp + 8 | 0; //@line 19594
 $3 = sp; //@line 19595
 $4 = $2; //@line 19596
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 19601
 $10 = $3; //@line 19602
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 19604
 HEAP32[$10 + 4 >> 2] = $9; //@line 19607
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 19608
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 19608
 __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0, $tmpcast$byval_copy, $1); //@line 19609
 HEAP32[$0 >> 2] = 9904; //@line 19610
 STACKTOP = sp; //@line 19611
 return;
}
function _pad_169($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 8803
 STACKTOP = STACKTOP + 256 | 0; //@line 8804
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 8804
 $5 = sp; //@line 8805
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 8811
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 8815
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 8818
   $$011 = $9; //@line 8819
   do {
    _out_163($0, $5, 256); //@line 8821
    $$011 = $$011 + -256 | 0; //@line 8822
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 8831
  } else {
   $$0$lcssa = $9; //@line 8833
  }
  _out_163($0, $5, $$0$lcssa); //@line 8835
 }
 STACKTOP = sp; //@line 8837
 return;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 5586
  return $$1 | 0; //@line 5587
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 5592
  $$1 = 0; //@line 5593
  return $$1 | 0; //@line 5594
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 5601
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 5605
  return $$1 | 0; //@line 5606
 }
 $14 = _malloc($1) | 0; //@line 5608
 if (!$14) {
  $$1 = 0; //@line 5611
  return $$1 | 0; //@line 5612
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 5615
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 5620
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 5623
 _free($0); //@line 5624
 $$1 = $14; //@line 5625
 return $$1 | 0; //@line 5626
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 61262
 STACKTOP = STACKTOP + 16 | 0; //@line 61263
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 61263
 $2 = sp; //@line 61264
 $3 = sp + 1 | 0; //@line 61265
 HEAP8[$2 >> 0] = $1; //@line 61266
 $4 = $0 + 11 | 0; //@line 61267
 if ((HEAP8[$4 >> 0] | 0) < 0) {
  $7 = HEAP32[$0 >> 2] | 0; //@line 61271
  HEAP32[$0 + 4 >> 2] = 1; //@line 61273
  $$0 = $7; //@line 61274
 } else {
  HEAP8[$4 >> 0] = 1; //@line 61276
  $$0 = $0; //@line 61277
 }
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $2); //@line 61279
 HEAP8[$3 >> 0] = 0; //@line 61281
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + 1 | 0, $3); //@line 61282
 STACKTOP = sp; //@line 61283
 return $0 | 0; //@line 61283
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0;
 $2 = $0 + 4 | 0; //@line 59936
 $3 = HEAP32[$2 >> 2] | 0; //@line 59937
 $4 = HEAP32[$0 >> 2] | 0; //@line 59938
 $6 = $3 - $4 >> 2; //@line 59940
 $8 = $4; //@line 59942
 $9 = $3; //@line 59943
 L1 : do {
  if ($6 >>> 0 < $1 >>> 0) {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0, $1 - $6 | 0); //@line 59947
  } else {
   if ($6 >>> 0 > $1 >>> 0) {
    $12 = $8 + ($1 << 2) | 0; //@line 59951
    $13 = $9; //@line 59952
    while (1) {
     if (($13 | 0) == ($12 | 0)) {
      break L1;
     }
     $15 = $13 + -4 | 0; //@line 59958
     HEAP32[$2 >> 2] = $15; //@line 59959
     $13 = $15; //@line 59960
    }
   }
  }
 } while (0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 43352
 STACKTOP = STACKTOP + 16 | 0; //@line 43353
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 43353
 $$byval_copy = sp + 4 | 0; //@line 43354
 $6 = sp; //@line 43355
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 43357
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 43358
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0; //@line 43359
 if (!(HEAP32[$4 >> 2] & 4)) {
  HEAP32[$1 >> 2] = $8 + -1900; //@line 43365
 }
 STACKTOP = sp; //@line 43367
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 40432
 STACKTOP = STACKTOP + 16 | 0; //@line 40433
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 40433
 $$byval_copy = sp + 4 | 0; //@line 40434
 $6 = sp; //@line 40435
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; //@line 40437
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 40438
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0; //@line 40439
 if (!(HEAP32[$4 >> 2] & 4)) {
  HEAP32[$1 >> 2] = $8 + -1900; //@line 40445
 }
 STACKTOP = sp; //@line 40447
 return;
}
function __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($0, $1, $2, $3, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $varargs = $varargs | 0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 35589
 STACKTOP = STACKTOP + 16 | 0; //@line 35590
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 35590
 $4 = sp; //@line 35591
 HEAP32[$4 >> 2] = $varargs; //@line 35592
 $5 = ___uselocale($2) | 0; //@line 35593
 $6 = _vsnprintf($0, $1, $3, $4) | 0; //@line 35594
 if ($5 | 0) {
  __THREW__ = 0; //@line 35597
  invoke_ii(147, $5 | 0) | 0; //@line 35598
  $8 = __THREW__; //@line 35599
  __THREW__ = 0; //@line 35599
  if ($8 & 1) {
   $10 = ___cxa_find_matching_catch_3(0) | 0; //@line 35602
   ___clang_call_terminate($10); //@line 35604
  }
 }
 STACKTOP = sp; //@line 35608
 return $6 | 0; //@line 35608
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6890
 STACKTOP = STACKTOP + 32 | 0; //@line 6891
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6891
 $vararg_buffer = sp; //@line 6892
 $3 = sp + 20 | 0; //@line 6893
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 6897
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 6899
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 6901
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 6903
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 6905
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 6910
  $10 = -1; //@line 6911
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 6914
 }
 STACKTOP = sp; //@line 6916
 return $10 | 0; //@line 6916
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $7 = 0, $8 = 0, label = 0;
 $$011 = $3; //@line 22254
 $$012 = $1; //@line 22254
 while (1) {
  if (($$011 | 0) == ($4 | 0)) {
   label = 7; //@line 22258
   break;
  }
  if (($$012 | 0) == ($2 | 0)) {
   $$0 = -1; //@line 22263
   break;
  }
  $7 = HEAP8[$$012 >> 0] | 0; //@line 22266
  $8 = HEAP8[$$011 >> 0] | 0; //@line 22267
  if ($7 << 24 >> 24 < $8 << 24 >> 24) {
   $$0 = -1; //@line 22270
   break;
  }
  if ($8 << 24 >> 24 < $7 << 24 >> 24) {
   $$0 = 1; //@line 22275
   break;
  }
  $$011 = $$011 + 1 | 0; //@line 22280
  $$012 = $$012 + 1 | 0; //@line 22280
 }
 if ((label | 0) == 7) {
  $$0 = ($$012 | 0) != ($2 | 0) & 1; //@line 22285
 }
 return $$0 | 0; //@line 22287
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 23594
 STACKTOP = STACKTOP + 16 | 0; //@line 23595
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23595
 $3 = sp; //@line 23596
 HEAP32[$3 >> 2] = $varargs; //@line 23597
 $4 = ___uselocale($1) | 0; //@line 23598
 $5 = _vsscanf($0, $2, $3) | 0; //@line 23599
 if ($4 | 0) {
  __THREW__ = 0; //@line 23602
  invoke_ii(147, $4 | 0) | 0; //@line 23603
  $7 = __THREW__; //@line 23604
  __THREW__ = 0; //@line 23604
  if ($7 & 1) {
   $9 = ___cxa_find_matching_catch_3(0) | 0; //@line 23607
   ___clang_call_terminate($9); //@line 23609
  }
 }
 STACKTOP = sp; //@line 23613
 return $5 | 0; //@line 23613
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $7 = 0, $8 = 0, label = 0;
 $$011 = $3; //@line 22396
 $$012 = $1; //@line 22396
 while (1) {
  if (($$011 | 0) == ($4 | 0)) {
   label = 7; //@line 22400
   break;
  }
  if (($$012 | 0) == ($2 | 0)) {
   $$0 = -1; //@line 22405
   break;
  }
  $7 = HEAP32[$$012 >> 2] | 0; //@line 22408
  $8 = HEAP32[$$011 >> 2] | 0; //@line 22409
  if (($7 | 0) < ($8 | 0)) {
   $$0 = -1; //@line 22412
   break;
  }
  if (($8 | 0) < ($7 | 0)) {
   $$0 = 1; //@line 22417
   break;
  }
  $$011 = $$011 + 4 | 0; //@line 22422
  $$012 = $$012 + 4 | 0; //@line 22422
 }
 if ((label | 0) == 7) {
  $$0 = ($$012 | 0) != ($2 | 0) & 1; //@line 22427
 }
 return $$0 | 0; //@line 22429
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 12472; //@line 56935
 $1 = $0 + 8 | 0; //@line 56936
 $2 = HEAP32[$1 >> 2] | 0; //@line 56937
 __THREW__ = 0; //@line 56938
 $3 = invoke_i(2) | 0; //@line 56939
 $4 = __THREW__; //@line 56940
 __THREW__ = 0; //@line 56940
 do {
  if (!($4 & 1)) {
   if (($2 | 0) != ($3 | 0)) {
    __THREW__ = 0; //@line 56947
    invoke_vi(266, HEAP32[$1 >> 2] | 0); //@line 56948
    $8 = __THREW__; //@line 56949
    __THREW__ = 0; //@line 56949
    if ($8 & 1) {
     break;
    }
   }
   __ZNSt3__26locale5facetD2Ev($0); //@line 56955
   return;
  }
 } while (0);
 $10 = ___cxa_find_matching_catch_3(0) | 0; //@line 56959
 __ZNSt3__26locale5facetD2Ev($0); //@line 56961
 ___clang_call_terminate($10); //@line 56962
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 56983
 STACKTOP = STACKTOP + 16 | 0; //@line 56984
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 56984
 $8 = sp + 4 | 0; //@line 56985
 $9 = sp; //@line 56986
 HEAP32[$8 >> 2] = $2; //@line 56987
 HEAP32[$9 >> 2] = $5; //@line 56988
 $10 = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0; //@line 56989
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2]; //@line 56991
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2]; //@line 56993
 STACKTOP = sp; //@line 56994
 return $10 | 0; //@line 56994
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 57006
 STACKTOP = STACKTOP + 16 | 0; //@line 57007
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 57007
 $8 = sp + 4 | 0; //@line 57008
 $9 = sp; //@line 57009
 HEAP32[$8 >> 2] = $2; //@line 57010
 HEAP32[$9 >> 2] = $5; //@line 57011
 $10 = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0; //@line 57012
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2]; //@line 57014
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2]; //@line 57016
 STACKTOP = sp; //@line 57017
 return $10 | 0; //@line 57017
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 54999
 STACKTOP = STACKTOP + 16 | 0; //@line 55000
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 55000
 $8 = sp + 4 | 0; //@line 55001
 $9 = sp; //@line 55002
 HEAP32[$8 >> 2] = $2; //@line 55003
 HEAP32[$9 >> 2] = $5; //@line 55004
 $10 = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0; //@line 55005
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2]; //@line 55007
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2]; //@line 55009
 STACKTOP = sp; //@line 55010
 return $10 | 0; //@line 55010
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 55022
 STACKTOP = STACKTOP + 16 | 0; //@line 55023
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 55023
 $8 = sp + 4 | 0; //@line 55024
 $9 = sp; //@line 55025
 HEAP32[$8 >> 2] = $2; //@line 55026
 HEAP32[$9 >> 2] = $5; //@line 55027
 $10 = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0; //@line 55028
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2]; //@line 55030
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2]; //@line 55032
 STACKTOP = sp; //@line 55033
 return $10 | 0; //@line 55033
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 63626
 $5 = HEAP32[$4 >> 2] | 0; //@line 63627
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 63631
   HEAP32[$1 + 24 >> 2] = $3; //@line 63633
   HEAP32[$1 + 36 >> 2] = 1; //@line 63635
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 63639
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 63642
    HEAP32[$1 + 24 >> 2] = 2; //@line 63644
    HEAP8[$1 + 54 >> 0] = 1; //@line 63646
    break;
   }
   $10 = $1 + 24 | 0; //@line 63649
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 63653
   }
  }
 } while (0);
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $14 = 0, $7 = 0;
 HEAP32[$0 + 12 >> 2] = 0; //@line 60078
 HEAP32[$0 + 16 >> 2] = $3; //@line 60080
 do {
  if (!$1) {
   $13 = 0; //@line 60084
  } else {
   $7 = $3 + 112 | 0; //@line 60086
   if ($1 >>> 0 < 29 & (HEAP8[$7 >> 0] | 0) == 0) {
    HEAP8[$7 >> 0] = 1; //@line 60092
    $13 = $3; //@line 60093
    break;
   } else {
    $13 = __Znwj($1 << 2) | 0; //@line 60098
    break;
   }
  }
 } while (0);
 HEAP32[$0 >> 2] = $13; //@line 60103
 $14 = $13 + ($2 << 2) | 0; //@line 60104
 HEAP32[$0 + 8 >> 2] = $14; //@line 60106
 HEAP32[$0 + 4 >> 2] = $14; //@line 60108
 HEAP32[$0 + 12 >> 2] = $13 + ($1 << 2); //@line 60111
 return;
}
function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $4 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 9392
 HEAP32[$4 >> 2] = 4848; //@line 9393
 $5 = $4 + 64 | 0; //@line 9394
 HEAP32[$5 >> 2] = 4888; //@line 9395
 HEAP32[$4 + 8 >> 2] = 4868; //@line 9397
 $7 = $4 + 12 | 0; //@line 9398
 HEAP32[$7 >> 2] = 3032; //@line 9399
 $8 = $4 + 44 | 0; //@line 9400
 if ((HEAP8[$8 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 9406
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($7); //@line 9408
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 9409
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5); //@line 9410
 __ZdlPv($4); //@line 9411
 return;
}
function __ZNSt3__2L11init_wam_pmEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[33304] | 0)) {
  if (___cxa_guard_acquire(33304) | 0) {
   $4 = 36444; //@line 42080
   do {
    HEAP32[$4 >> 2] = 0; //@line 42082
    HEAP32[$4 + 4 >> 2] = 0; //@line 42082
    HEAP32[$4 + 8 >> 2] = 0; //@line 42082
    $$0$i$i = 0; //@line 42083
    while (1) {
     if (($$0$i$i | 0) == 3) {
      break;
     }
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0; //@line 42090
     $$0$i$i = $$0$i$i + 1 | 0; //@line 42092
    }
    $4 = $4 + 12 | 0; //@line 42094
   } while (($4 | 0) != 36732);
  }
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36444, 10844) | 0; //@line 42104
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(36456, 10856) | 0; //@line 42105
 return;
}
function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $2 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 12520; //@line 57900
 $1 = $0 + 8 | 0; //@line 57901
 $2 = $0 + 12 | 0; //@line 57902
 $$0 = 0; //@line 57903
 while (1) {
  $4 = HEAP32[$1 >> 2] | 0; //@line 57906
  if ($$0 >>> 0 >= (HEAP32[$2 >> 2] | 0) - $4 >> 2 >>> 0) {
   break;
  }
  $11 = HEAP32[$4 + ($$0 << 2) >> 2] | 0; //@line 57915
  if ($11 | 0) {
   __ZNSt3__214__shared_count16__release_sharedEv($11) | 0; //@line 57918
  }
  $$0 = $$0 + 1 | 0; //@line 57921
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 144 | 0); //@line 57924
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($1); //@line 57925
 __ZNSt3__26locale5facetD2Ev($0); //@line 57926
 return;
}
function __ZNSt3__2L10init_am_pmEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[33224] | 0)) {
  if (___cxa_guard_acquire(33224) | 0) {
   $4 = 35632; //@line 39128
   do {
    HEAP32[$4 >> 2] = 0; //@line 39130
    HEAP32[$4 + 4 >> 2] = 0; //@line 39130
    HEAP32[$4 + 8 >> 2] = 0; //@line 39130
    $$0$i$i = 0; //@line 39131
    while (1) {
     if (($$0$i$i | 0) == 3) {
      break;
     }
     HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0; //@line 39138
     $$0$i$i = $$0$i$i + 1 | 0; //@line 39140
    }
    $4 = $4 + 12 | 0; //@line 39142
   } while (($4 | 0) != 35920);
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35632, 30284) | 0; //@line 39152
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(35644, 30287) | 0; //@line 39153
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 10199
 $3 = HEAP8[$1 >> 0] | 0; //@line 10200
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 10205
  $$lcssa8 = $2; //@line 10205
 } else {
  $$011 = $1; //@line 10207
  $$0710 = $0; //@line 10207
  do {
   $$0710 = $$0710 + 1 | 0; //@line 10209
   $$011 = $$011 + 1 | 0; //@line 10210
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 10211
   $9 = HEAP8[$$011 >> 0] | 0; //@line 10212
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 10217
  $$lcssa8 = $8; //@line 10217
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 10227
}
function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $4 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 9364
 HEAP32[$4 >> 2] = 4848; //@line 9365
 $5 = $4 + 64 | 0; //@line 9366
 HEAP32[$5 >> 2] = 4888; //@line 9367
 HEAP32[$4 + 8 >> 2] = 4868; //@line 9369
 $7 = $4 + 12 | 0; //@line 9370
 HEAP32[$7 >> 2] = 3032; //@line 9371
 $8 = $4 + 44 | 0; //@line 9372
 if ((HEAP8[$8 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$8 >> 2] | 0); //@line 9378
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($7); //@line 9380
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4, 4900); //@line 9381
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5); //@line 9382
 return;
}
function __ZN16FunctionAnalyzer16addTypeSignatureE18CharmTypeSignature($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_($0 + 20 | 0, $1) | 0; //@line 21329
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($3, $1) | 0; //@line 21330
 if (($3 | 0) == ($1 | 0)) {
  return;
 }
 __ZNSt3__26vectorI22CharmTypeSignatureUnitNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($3 + 12 | 0, HEAP32[$1 + 12 >> 2] | 0, HEAP32[$1 + 16 >> 2] | 0); //@line 21340
 return;
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 7100
  } else {
   $$01318 = $0; //@line 7102
   $$01417 = $2; //@line 7102
   $$019 = $1; //@line 7102
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 7104
    $5 = HEAP8[$$019 >> 0] | 0; //@line 7105
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 7110
    if (!$$01417) {
     $14 = 0; //@line 7115
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 7118
     $$019 = $$019 + 1 | 0; //@line 7118
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 7124
  }
 } while (0);
 return $14 | 0; //@line 7127
}
function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0;
 $1 = $0 + -8 | 0; //@line 9335
 HEAP32[$1 >> 2] = 4848; //@line 9336
 $2 = $1 + 64 | 0; //@line 9337
 HEAP32[$2 >> 2] = 4888; //@line 9338
 HEAP32[$1 + 8 >> 2] = 4868; //@line 9340
 $4 = $1 + 12 | 0; //@line 9341
 HEAP32[$4 >> 2] = 3032; //@line 9342
 $5 = $1 + 44 | 0; //@line 9343
 if ((HEAP8[$5 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 9349
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($4); //@line 9351
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($1, 4900); //@line 9352
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($2); //@line 9353
 __ZdlPv($1); //@line 9354
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6949
 STACKTOP = STACKTOP + 32 | 0; //@line 6950
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6950
 $vararg_buffer = sp; //@line 6951
 HEAP32[$0 + 36 >> 2] = 8; //@line 6954
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 6962
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 6964
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 6966
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 6971
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 6974
 STACKTOP = sp; //@line 6975
 return $14 | 0; //@line 6975
}
function __ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 703
 HEAP32[$4 >> 2] = 2980; //@line 704
 $5 = $4 + 56 | 0; //@line 705
 HEAP32[$5 >> 2] = 3e3; //@line 706
 $6 = $4 + 4 | 0; //@line 707
 HEAP32[$6 >> 2] = 3032; //@line 708
 $7 = $4 + 36 | 0; //@line 709
 if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 715
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($6); //@line 717
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($4, 3012); //@line 718
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5); //@line 719
 __ZdlPv($4); //@line 720
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16415
 STACKTOP = STACKTOP + 128 | 0; //@line 16416
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 16416
 $3 = sp; //@line 16417
 dest = $3; //@line 16418
 stop = dest + 124 | 0; //@line 16418
 do {
  HEAP32[dest >> 2] = 0; //@line 16418
  dest = dest + 4 | 0; //@line 16418
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 39; //@line 16420
 HEAP32[$3 + 44 >> 2] = $0; //@line 16422
 HEAP32[$3 + 76 >> 2] = -1; //@line 16424
 HEAP32[$3 + 84 >> 2] = $0; //@line 16426
 $8 = _vfscanf($3, $1, $2) | 0; //@line 16427
 STACKTOP = sp; //@line 16428
 return $8 | 0; //@line 16428
}
function _wmemmove($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01417 = 0, $$019 = 0, $$118 = 0, $$in = 0;
 if ($0 - $1 >> 2 >>> 0 < $2 >>> 0) {
  $$in = $2; //@line 13773
  do {
   $$in = $$in + -1 | 0; //@line 13775
   HEAP32[$0 + ($$in << 2) >> 2] = HEAP32[$1 + ($$in << 2) >> 2]; //@line 13779
  } while (($$in | 0) != 0);
 } else {
  if ($2 | 0) {
   $$01417 = $1; //@line 13790
   $$019 = $0; //@line 13790
   $$118 = $2; //@line 13790
   while (1) {
    $$118 = $$118 + -1 | 0; //@line 13792
    HEAP32[$$019 >> 2] = HEAP32[$$01417 >> 2]; //@line 13796
    if (!$$118) {
     break;
    } else {
     $$01417 = $$01417 + 4 | 0; //@line 13801
     $$019 = $$019 + 4 | 0; //@line 13801
    }
   }
  }
 }
 return $0 | 0; //@line 13806
}
function _store_int($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 15283
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 15289
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 15294
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 15299
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 15304
     HEAP32[$7 >> 2] = $2; //@line 15306
     HEAP32[$7 + 4 >> 2] = $3; //@line 15309
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _vasprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP; //@line 15739
 STACKTOP = STACKTOP + 16 | 0; //@line 15740
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15740
 $3 = sp; //@line 15741
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 15743
 $4 = _vsnprintf(0, 0, $1, $3) | 0; //@line 15744
 if (($4 | 0) < 0) {
  $$0 = -1; //@line 15747
 } else {
  $6 = $4 + 1 | 0; //@line 15749
  $7 = _malloc($6) | 0; //@line 15750
  HEAP32[$0 >> 2] = $7; //@line 15751
  if (!$7) {
   $$0 = -1; //@line 15754
  } else {
   $$0 = _vsnprintf($7, $6, $1, $2) | 0; //@line 15757
  }
 }
 STACKTOP = sp; //@line 15760
 return $$0 | 0; //@line 15760
}
function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0;
 $1 = $0 + -8 | 0; //@line 9310
 HEAP32[$1 >> 2] = 4848; //@line 9311
 $2 = $1 + 64 | 0; //@line 9312
 HEAP32[$2 >> 2] = 4888; //@line 9313
 HEAP32[$1 + 8 >> 2] = 4868; //@line 9315
 $4 = $1 + 12 | 0; //@line 9316
 HEAP32[$4 >> 2] = 3032; //@line 9317
 $5 = $1 + 44 | 0; //@line 9318
 if ((HEAP8[$5 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$5 >> 2] | 0); //@line 9324
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($4); //@line 9326
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($1, 4900); //@line 9327
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($2); //@line 9328
 return;
}
function __ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 654
 HEAP32[$4 >> 2] = 2980; //@line 655
 $5 = $4 + 56 | 0; //@line 656
 HEAP32[$5 >> 2] = 3e3; //@line 657
 $6 = $4 + 4 | 0; //@line 658
 HEAP32[$6 >> 2] = 3032; //@line 659
 $7 = $4 + 36 | 0; //@line 660
 if ((HEAP8[$7 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$7 >> 2] | 0); //@line 666
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($6); //@line 668
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($4, 3012); //@line 669
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5); //@line 670
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $4 = 0;
 if ((__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0) | 0) >>> 0 < $1 >>> 0) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0); //@line 60307
 }
 $4 = $0 + 128 | 0; //@line 60310
 if ($1 >>> 0 < 29 & (HEAP8[$4 >> 0] | 0) == 0) {
  HEAP8[$4 >> 0] = 1; //@line 60317
  $$0$i$i = $0 + 16 | 0; //@line 60318
 } else {
  $$0$i$i = __Znwj($1 << 2) | 0; //@line 60322
 }
 HEAP32[$0 + 4 >> 2] = $$0$i$i; //@line 60325
 HEAP32[$0 >> 2] = $$0$i$i; //@line 60326
 HEAP32[$0 + 8 >> 2] = $$0$i$i + ($1 << 2); //@line 60329
 return;
}
function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 4848; //@line 9285
 $1 = $0 + 64 | 0; //@line 9286
 HEAP32[$1 >> 2] = 4888; //@line 9287
 HEAP32[$0 + 8 >> 2] = 4868; //@line 9289
 $3 = $0 + 12 | 0; //@line 9290
 HEAP32[$3 >> 2] = 3032; //@line 9291
 $4 = $0 + 44 | 0; //@line 9292
 if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 9298
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($3); //@line 9300
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0, 4900); //@line 9301
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1); //@line 9302
 __ZdlPv($0); //@line 9303
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 60186
 $3 = $0 + 8 | 0; //@line 60187
 $4 = HEAP32[$3 >> 2] | 0; //@line 60189
 while (1) {
  if (($4 | 0) == ($2 | 0)) {
   break;
  }
  $6 = $4 + -4 | 0; //@line 60195
  HEAP32[$3 >> 2] = $6; //@line 60196
  $4 = $6; //@line 60197
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 60199
 do {
  if ($7 | 0) {
   $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 60204
   if (($7 | 0) == ($10 | 0)) {
    HEAP8[$10 + 112 >> 0] = 0; //@line 60208
    break;
   } else {
    __ZdlPv($7); //@line 60211
    break;
   }
  }
 } while (0);
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 65378
 newDynamicTop = oldDynamicTop + increment | 0; //@line 65379
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 65383
  ___setErrNo(12); //@line 65384
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 65388
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 65392
   ___setErrNo(12); //@line 65393
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 65397
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $12 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 16201
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 16203
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 16209
  $11 = ___fwritex($0, $4, $3) | 0; //@line 16210
  if ($phitmp) {
   $12 = $11; //@line 16212
  } else {
   ___unlockfile($3); //@line 16214
   $12 = $11; //@line 16215
  }
 } else {
  $12 = ___fwritex($0, $4, $3) | 0; //@line 16219
 }
 if (($12 | 0) == ($4 | 0)) {
  $15 = $$; //@line 16223
 } else {
  $15 = ($12 >>> 0) / ($1 >>> 0) | 0; //@line 16226
 }
 return $15 | 0; //@line 16228
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 8536
 } else {
  $$056 = $2; //@line 8538
  $15 = $1; //@line 8538
  $8 = $0; //@line 8538
  while (1) {
   $14 = $$056 + -1 | 0; //@line 8546
   HEAP8[$14 >> 0] = HEAPU8[26689 + ($8 & 15) >> 0] | 0 | $3; //@line 8547
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 8548
   $15 = tempRet0; //@line 8549
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 8554
    break;
   } else {
    $$056 = $14; //@line 8557
   }
  }
 }
 return $$05$lcssa | 0; //@line 8561
}
function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 4848; //@line 9261
 $1 = $0 + 64 | 0; //@line 9262
 HEAP32[$1 >> 2] = 4888; //@line 9263
 HEAP32[$0 + 8 >> 2] = 4868; //@line 9265
 $3 = $0 + 12 | 0; //@line 9266
 HEAP32[$3 >> 2] = 3032; //@line 9267
 $4 = $0 + 44 | 0; //@line 9268
 if ((HEAP8[$4 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$4 >> 2] | 0); //@line 9274
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($3); //@line 9276
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0, 4900); //@line 9277
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1); //@line 9278
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 10322
 $3 = HEAP8[$1 >> 0] | 0; //@line 10324
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 10328
 $7 = HEAP32[$0 >> 2] | 0; //@line 10329
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 10334
  HEAP32[$0 + 4 >> 2] = 0; //@line 10336
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 10338
  HEAP32[$0 + 28 >> 2] = $14; //@line 10340
  HEAP32[$0 + 20 >> 2] = $14; //@line 10342
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10348
  $$0 = 0; //@line 10349
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 10352
  $$0 = -1; //@line 10353
 }
 return $$0 | 0; //@line 10355
}
function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37312) | 0; //@line 21524
 $3 = $0 + 36 | 0; //@line 21525
 HEAP32[$3 >> 2] = $2; //@line 21526
 $8 = $0 + 44 | 0; //@line 21531
 HEAP32[$8 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 255]($2) | 0; //@line 21532
 $9 = HEAP32[$3 >> 2] | 0; //@line 21533
 HEAP8[$0 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 255]($9) | 0) & 1; //@line 21540
 if ((HEAP32[$8 >> 2] | 0) > 8) {
  __ZNSt3__221__throw_runtime_errorEPKc(29618); //@line 21544
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37304) | 0; //@line 21883
 $3 = $0 + 36 | 0; //@line 21884
 HEAP32[$3 >> 2] = $2; //@line 21885
 $8 = $0 + 44 | 0; //@line 21890
 HEAP32[$8 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 255]($2) | 0; //@line 21891
 $9 = HEAP32[$3 >> 2] | 0; //@line 21892
 HEAP8[$0 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 255]($9) | 0) & 1; //@line 21899
 if ((HEAP32[$8 >> 2] | 0) > 8) {
  __ZNSt3__221__throw_runtime_errorEPKc(29618); //@line 21903
 } else {
  return;
 }
}
function __ZN5Stack5zeroFEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = $0 + 4 | 0; //@line 11118
 HEAP32[$1 >> 2] = 0; //@line 11119
 HEAP32[$1 + 4 >> 2] = 0; //@line 11119
 HEAP32[$1 + 8 >> 2] = 0; //@line 11119
 $2 = $0 + 40 | 0; //@line 11120
 HEAP32[$2 >> 2] = 0; //@line 11121
 HEAP32[$2 + 4 >> 2] = 0; //@line 11121
 HEAP32[$2 + 8 >> 2] = 0; //@line 11121
 HEAP32[$2 + 12 >> 2] = 0; //@line 11121
 HEAP32[$2 + 16 >> 2] = 0; //@line 11121
 HEAP32[$2 + 20 >> 2] = 0; //@line 11121
 HEAP32[$0 >> 2] = 2; //@line 11122
 HEAP32[$0 + 16 >> 2] = 0; //@line 11124
 $3 = $0 + 24 | 0; //@line 11126
 HEAP32[$3 >> 2] = 0; //@line 11128
 HEAP32[$3 + 4 >> 2] = 0; //@line 11131
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $19 = 0, $4 = 0, $7 = 0;
 __THREW__ = 0; //@line 64048
 $0 = invoke_i(10) | 0; //@line 64049
 $1 = __THREW__; //@line 64050
 __THREW__ = 0; //@line 64050
 if ($1 & 1) {
  $19 = ___cxa_find_matching_catch_3(0) | 0; //@line 64053
  ___clang_call_terminate($19); //@line 64055
 }
 if ($0 | 0) {
  $4 = HEAP32[$0 >> 2] | 0; //@line 64060
  if ($4 | 0) {
   $7 = $4 + 48 | 0; //@line 64064
   if ((HEAP32[$7 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$7 + 4 >> 2] | 0) == 1129074247 : 0) {
    __ZSt11__terminatePFvvE(HEAP32[$4 + 12 >> 2] | 0); //@line 64077
   }
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0); //@line 64083
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 15985
 $4 = HEAP32[$3 >> 2] | 0; //@line 15986
 $5 = $2 + 256 | 0; //@line 15987
 $6 = _memchr($4, 0, $5) | 0; //@line 15988
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 15993
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 15995
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 15996
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 15999
 $14 = $4 + $$027 | 0; //@line 16000
 HEAP32[$0 + 8 >> 2] = $14; //@line 16002
 HEAP32[$3 >> 2] = $14; //@line 16003
 return $$027$ | 0; //@line 16004
}
function __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 2980; //@line 677
 $1 = $0 + 56 | 0; //@line 678
 HEAP32[$1 >> 2] = 3e3; //@line 679
 $2 = $0 + 4 | 0; //@line 680
 HEAP32[$2 >> 2] = 3032; //@line 681
 $3 = $0 + 36 | 0; //@line 682
 if ((HEAP8[$3 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 688
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($2); //@line 690
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0, 3012); //@line 691
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1); //@line 692
 __ZdlPv($0); //@line 693
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP; //@line 44782
 STACKTOP = STACKTOP + 16 | 0; //@line 44783
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 44783
 $2 = sp; //@line 44784
 HEAP32[$0 >> 2] = 0; //@line 44785
 HEAP32[$0 + 4 >> 2] = 0; //@line 44785
 HEAP32[$0 + 8 >> 2] = 0; //@line 44785
 HEAP8[$0 + 8 + 3 >> 0] = 1; //@line 44788
 __ZNSt3__211char_traitsIwE6assignEPwjw($0, 1, 45) | 0; //@line 44789
 HEAP32[$2 >> 2] = 0; //@line 44791
 __ZNSt3__211char_traitsIwE6assignERwRKw($0 + 4 | 0, $2); //@line 44792
 STACKTOP = sp; //@line 44793
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP; //@line 44659
 STACKTOP = STACKTOP + 16 | 0; //@line 44660
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 44660
 $2 = sp; //@line 44661
 HEAP32[$0 >> 2] = 0; //@line 44662
 HEAP32[$0 + 4 >> 2] = 0; //@line 44662
 HEAP32[$0 + 8 >> 2] = 0; //@line 44662
 HEAP8[$0 + 8 + 3 >> 0] = 1; //@line 44665
 __ZNSt3__211char_traitsIwE6assignEPwjw($0, 1, 45) | 0; //@line 44666
 HEAP32[$2 >> 2] = 0; //@line 44668
 __ZNSt3__211char_traitsIwE6assignERwRKw($0 + 4 | 0, $2); //@line 44669
 STACKTOP = sp; //@line 44670
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP; //@line 44537
 STACKTOP = STACKTOP + 16 | 0; //@line 44538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 44538
 $2 = sp; //@line 44539
 HEAP32[$0 >> 2] = 0; //@line 44540
 HEAP32[$0 + 4 >> 2] = 0; //@line 44540
 HEAP32[$0 + 8 >> 2] = 0; //@line 44540
 HEAP8[$0 + 11 >> 0] = 1; //@line 44542
 __ZNSt3__211char_traitsIcE6assignEPcjc($0, 1, 45) | 0; //@line 44543
 HEAP8[$2 >> 0] = 0; //@line 44545
 __ZNSt3__211char_traitsIcE6assignERcRKc($0 + 1 | 0, $2); //@line 44546
 STACKTOP = sp; //@line 44547
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP; //@line 44401
 STACKTOP = STACKTOP + 16 | 0; //@line 44402
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 44402
 $2 = sp; //@line 44403
 HEAP32[$0 >> 2] = 0; //@line 44404
 HEAP32[$0 + 4 >> 2] = 0; //@line 44404
 HEAP32[$0 + 8 >> 2] = 0; //@line 44404
 HEAP8[$0 + 11 >> 0] = 1; //@line 44406
 __ZNSt3__211char_traitsIcE6assignEPcjc($0, 1, 45) | 0; //@line 44407
 HEAP8[$2 >> 0] = 0; //@line 44409
 __ZNSt3__211char_traitsIcE6assignERcRKc($0 + 1 | 0, $2); //@line 44410
 STACKTOP = sp; //@line 44411
 return;
}
function _arg_n($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 15238
 STACKTOP = STACKTOP + 16 | 0; //@line 15239
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15239
 $2 = sp; //@line 15240
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 15242
 $$0 = $1; //@line 15243
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 15257
  $10 = HEAP32[$9 >> 2] | 0; //@line 15258
  HEAP32[$2 >> 2] = $9 + 4; //@line 15260
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 15263
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 15268
 return $10 | 0; //@line 15268
}
function __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 62978
 STACKTOP = STACKTOP + 16 | 0; //@line 62979
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62979
 $3 = sp; //@line 62980
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 63]($3, $0, $1); //@line 62984
 if ((HEAP32[$3 + 4 >> 2] | 0) == (HEAP32[$2 + 4 >> 2] | 0)) {
  $15 = (HEAP32[$3 >> 2] | 0) == (HEAP32[$2 >> 2] | 0); //@line 62994
 } else {
  $15 = 0; //@line 62996
 }
 STACKTOP = sp; //@line 62998
 return $15 | 0; //@line 62998
}
function __ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEJLj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESL_SO_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = HEAP32[$1 + 16 >> 2] | 0; //@line 16002
 if (($1 | 0) == ($3 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] & 511]($3); //@line 16008
  return;
 }
 if (!$3) {
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 511]($3); //@line 16018
 return;
}
function __ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEJLj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESL_SO_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = HEAP32[$1 + 16 >> 2] | 0; //@line 15977
 if (($1 | 0) == ($3 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] & 511]($3); //@line 15983
  return;
 }
 if (!$3) {
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 511]($3); //@line 15993
 return;
}
function ___fmodeflags($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0;
 $2 = (_strchr($0, 43) | 0) == 0; //@line 15654
 $3 = HEAP8[$0 >> 0] | 0; //@line 15655
 $$0 = $2 ? $3 << 24 >> 24 != 114 & 1 : 2; //@line 15658
 $6 = (_strchr($0, 120) | 0) == 0; //@line 15660
 $$0$ = $6 ? $$0 : $$0 | 128; //@line 15662
 $9 = (_strchr($0, 101) | 0) == 0; //@line 15664
 $$2 = $9 ? $$0$ : $$0$ | 524288; //@line 15666
 $$2$ = $3 << 24 >> 24 == 114 ? $$2 : $$2 | 64; //@line 15669
 $$4 = $3 << 24 >> 24 == 119 ? $$2$ | 512 : $$2$; //@line 15672
 return ($3 << 24 >> 24 == 97 ? $$4 | 1024 : $$4) | 0; //@line 15676
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $2 = 0, $4 = 0, $6 = 0, label = 0;
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 60620
 while (1) {
  $2 = _malloc($$) | 0; //@line 60622
  if ($2 | 0) {
   label = 6; //@line 60625
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 60628
  if (!$4) {
   label = 5; //@line 60631
   break;
  }
  FUNCTION_TABLE_v[$4 & 63](); //@line 60634
 }
 if ((label | 0) == 5) {
  $6 = ___cxa_allocate_exception(4) | 0; //@line 60637
  __ZNSt9bad_allocC2Ev($6); //@line 60638
  ___cxa_throw($6 | 0, 2792, 238); //@line 60639
 } else if ((label | 0) == 6) {
  return $2 | 0; //@line 60643
 }
 return 0; //@line 60645
}
function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$0 >> 2] | 0; //@line 44102
 __THREW__ = 0; //@line 44103
 $2 = invoke_i(2) | 0; //@line 44104
 $3 = __THREW__; //@line 44105
 __THREW__ = 0; //@line 44105
 do {
  if (!($3 & 1)) {
   if (($1 | 0) != ($2 | 0)) {
    __THREW__ = 0; //@line 44112
    invoke_vi(266, HEAP32[$0 >> 2] | 0); //@line 44113
    $7 = __THREW__; //@line 44114
    __THREW__ = 0; //@line 44114
    if ($7 & 1) {
     break;
    }
   }
   return;
  }
 } while (0);
 $9 = ___cxa_find_matching_catch_3(0) | 0; //@line 44123
 ___clang_call_terminate($9); //@line 44125
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 8573
 } else {
  $$06 = $2; //@line 8575
  $11 = $1; //@line 8575
  $7 = $0; //@line 8575
  while (1) {
   $10 = $$06 + -1 | 0; //@line 8580
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 8581
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 8582
   $11 = tempRet0; //@line 8583
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 8588
    break;
   } else {
    $$06 = $10; //@line 8591
   }
  }
 }
 return $$0$lcssa | 0; //@line 8595
}
function __ZNSt3__28ios_base4initEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, dest = 0, stop = 0;
 HEAP32[$0 + 24 >> 2] = $1; //@line 19619
 HEAP32[$0 + 16 >> 2] = ($1 | 0) == 0 & 1; //@line 19623
 HEAP32[$0 + 20 >> 2] = 0; //@line 19625
 HEAP32[$0 + 4 >> 2] = 4098; //@line 19627
 HEAP32[$0 + 12 >> 2] = 0; //@line 19629
 HEAP32[$0 + 8 >> 2] = 6; //@line 19631
 $11 = $0 + 28 | 0; //@line 19633
 dest = $0 + 32 | 0; //@line 19634
 stop = dest + 40 | 0; //@line 19634
 do {
  HEAP32[dest >> 2] = 0; //@line 19634
  dest = dest + 4 | 0; //@line 19634
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__26localeC2Ev($11); //@line 19635
 return;
}
function __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 2980; //@line 440
 $1 = $0 + 56 | 0; //@line 441
 HEAP32[$1 >> 2] = 3e3; //@line 442
 $2 = $0 + 4 | 0; //@line 443
 HEAP32[$2 >> 2] = 3032; //@line 444
 $3 = $0 + 36 | 0; //@line 445
 if ((HEAP8[$3 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$3 >> 2] | 0); //@line 451
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($2); //@line 453
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0, 3012); //@line 454
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1); //@line 455
 return;
}
function __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $13 = 0, $8 = 0;
 $8 = HEAP32[$2 >> 2] | 0; //@line 18532
 $$0 = $0; //@line 18533
 $$014 = $1 - $0 >> 2; //@line 18533
 while (1) {
  if (!$$014) {
   break;
  }
  $10 = ($$014 | 0) / 2 | 0; //@line 18539
  $11 = $$0 + ($10 << 2) | 0; //@line 18540
  $13 = (HEAP32[$11 >> 2] | 0) >>> 0 < $8 >>> 0; //@line 18542
  $$0 = $13 ? $11 + 4 | 0 : $$0; //@line 18548
  $$014 = $13 ? $$014 + -1 - $10 | 0 : $10; //@line 18548
 }
 return $$0 | 0; //@line 18550
}
function __ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 62701
 __THREW__ = 0; //@line 62702
 invoke_vii(185, $1 | 0, $0 | 0); //@line 62703
 $2 = __THREW__; //@line 62704
 __THREW__ = 0; //@line 62704
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 62707
  ___cxa_free_exception($1 | 0); //@line 62709
  ___resumeException($4 | 0); //@line 62710
 } else {
  HEAP32[$1 >> 2] = 13204; //@line 62713
  ___cxa_throw($1 | 0, 2840, 240); //@line 62714
 }
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 64726
 $8 = $7 >> 8; //@line 64727
 if (!($7 & 1)) {
  $$0 = $8; //@line 64731
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 64736
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 64738
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 15]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 64746
 return;
}
function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0;
 HEAP32[$0 >> 2] = 9484; //@line 18563
 __THREW__ = 0; //@line 18564
 invoke_vii(147, $0 | 0, 0); //@line 18565
 $1 = __THREW__; //@line 18566
 __THREW__ = 0; //@line 18566
 if ($1 & 1) {
  $12 = ___cxa_find_matching_catch_3(0) | 0; //@line 18569
  ___clang_call_terminate($12); //@line 18571
 } else {
  __ZNSt3__26localeD2Ev($0 + 28 | 0); //@line 18575
  _free(HEAP32[$0 + 32 >> 2] | 0); //@line 18578
  _free(HEAP32[$0 + 36 >> 2] | 0); //@line 18581
  _free(HEAP32[$0 + 48 >> 2] | 0); //@line 18584
  _free(HEAP32[$0 + 60 >> 2] | 0); //@line 18587
  return;
 }
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$08 = 0, $13 = 0, $7 = 0;
 $$0 = $3; //@line 58542
 $$08 = $1; //@line 58542
 while (1) {
  if (($$08 | 0) == ($2 | 0)) {
   break;
  }
  if ((HEAP32[$$08 >> 2] | 0) >>> 0 < 128) {
   $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0; //@line 58551
   $13 = HEAPU16[$7 + (HEAP32[$$08 >> 2] << 1) >> 1] | 0; //@line 58556
  } else {
   $13 = 0; //@line 58558
  }
  HEAP16[$$0 >> 1] = $13; //@line 58561
  $$0 = $$0 + 2 | 0; //@line 58564
  $$08 = $$08 + 4 | 0; //@line 58564
 }
 return $2 | 0; //@line 58566
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0, $6 = 0;
 $1 = HEAP32[$0 >> 2] | 0; //@line 57941
 do {
  if ($1 | 0) {
   $3 = $0 + 4 | 0; //@line 57945
   $4 = HEAP32[$3 >> 2] | 0; //@line 57947
   while (1) {
    if (($4 | 0) == ($1 | 0)) {
     break;
    }
    $6 = $4 + -4 | 0; //@line 57953
    HEAP32[$3 >> 2] = $6; //@line 57954
    $4 = $6; //@line 57955
   }
   if (($1 | 0) == ($0 + 16 | 0)) {
    HEAP8[$0 + 128 >> 0] = 0; //@line 57961
    break;
   } else {
    __ZdlPv($1); //@line 57964
    break;
   }
  }
 } while (0);
 return;
}
function __ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 62722
 __THREW__ = 0; //@line 62723
 invoke_vii(185, $1 | 0, $0 | 0); //@line 62724
 $2 = __THREW__; //@line 62725
 __THREW__ = 0; //@line 62725
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 62728
  ___cxa_free_exception($1 | 0); //@line 62730
  ___resumeException($4 | 0); //@line 62731
 } else {
  HEAP32[$1 >> 2] = 13244; //@line 62734
  ___cxa_throw($1 | 0, 2872, 240); //@line 62735
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 63868
 } else {
  $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 63871
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 15]($10, $1, $2, $3, $4, $5); //@line 63875
 }
 return;
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa = 0, $7 = 0;
 $$0 = $2; //@line 58608
 while (1) {
  if (($$0 | 0) == ($3 | 0)) {
   $$0$lcssa = $3; //@line 58612
   break;
  }
  if ((HEAP32[$$0 >> 2] | 0) >>> 0 >= 128) {
   $$0$lcssa = $$0; //@line 58618
   break;
  }
  $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0; //@line 58621
  if (!((HEAP16[$7 + (HEAP32[$$0 >> 2] << 1) >> 1] & $1) << 16 >> 16)) {
   $$0$lcssa = $$0; //@line 58628
   break;
  }
  $$0 = $$0 + 4 | 0; //@line 58632
 }
 return $$0$lcssa | 0; //@line 58634
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 64758
 $7 = $6 >> 8; //@line 64759
 if (!($6 & 1)) {
  $$0 = $7; //@line 64763
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 64768
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 64770
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 64778
 return;
}
function __ZNSt3__28numpunctIwEC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $6 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1; //@line 60225
 HEAP32[$0 >> 2] = 12632; //@line 60226
 HEAP32[$0 + 8 >> 2] = 46; //@line 60228
 HEAP32[$0 + 12 >> 2] = 44; //@line 60230
 $6 = $0 + 16 | 0; //@line 60231
 HEAP32[$6 >> 2] = 0; //@line 60232
 HEAP32[$6 + 4 >> 2] = 0; //@line 60232
 HEAP32[$6 + 8 >> 2] = 0; //@line 60232
 $$0$i$i = 0; //@line 60233
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0; //@line 60240
  $$0$i$i = $$0$i$i + 1 | 0; //@line 60242
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $3 = 0;
 HEAP32[8407] = 0; //@line 59818
 HEAP32[8406] = 12716; //@line 59819
 __THREW__ = 0; //@line 59820
 $0 = invoke_i(2) | 0; //@line 59821
 $1 = __THREW__; //@line 59822
 __THREW__ = 0; //@line 59822
 if ($1 & 1) {
  $3 = ___cxa_find_matching_catch_2() | 0; //@line 59825
  __ZNSt3__26locale5facetD2Ev(33624); //@line 59827
  ___resumeException($3 | 0); //@line 59828
 } else {
  HEAP32[8408] = $0; //@line 59831
  HEAP32[8406] = 11952; //@line 59832
  return;
 }
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $3 = 0;
 HEAP32[8403] = 0; //@line 59788
 HEAP32[8402] = 12716; //@line 59789
 __THREW__ = 0; //@line 59790
 $0 = invoke_i(2) | 0; //@line 59791
 $1 = __THREW__; //@line 59792
 __THREW__ = 0; //@line 59792
 if ($1 & 1) {
  $3 = ___cxa_find_matching_catch_2() | 0; //@line 59795
  __ZNSt3__26locale5facetD2Ev(33608); //@line 59797
  ___resumeException($3 | 0); //@line 59798
 } else {
  HEAP32[8404] = $0; //@line 59801
  HEAP32[8402] = 11928; //@line 59802
  return;
 }
}
function __ZNSt3__28numpunctIcEC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $6 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1; //@line 60253
 HEAP32[$0 >> 2] = 12592; //@line 60254
 HEAP8[$0 + 8 >> 0] = 46; //@line 60256
 HEAP8[$0 + 9 >> 0] = 44; //@line 60258
 $6 = $0 + 12 | 0; //@line 60259
 HEAP32[$6 >> 2] = 0; //@line 60260
 HEAP32[$6 + 4 >> 2] = 0; //@line 60260
 HEAP32[$6 + 8 >> 2] = 0; //@line 60260
 $$0$i$i = 0; //@line 60261
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0; //@line 60268
  $$0$i$i = $$0$i$i + 1 | 0; //@line 60270
 }
 return;
}
function _getint_164($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 8217
 } else {
  $$04 = 0; //@line 8219
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 8222
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 8226
   $12 = $7 + 1 | 0; //@line 8227
   HEAP32[$0 >> 2] = $12; //@line 8228
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 8234
    break;
   } else {
    $$04 = $11; //@line 8237
   }
  }
 }
 return $$0$lcssa | 0; //@line 8241
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $5 = 0, $6 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 64693
 $6 = $5 >> 8; //@line 64694
 if (!($5 & 1)) {
  $$0 = $6; //@line 64698
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 64703
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 64705
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 31]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 64713
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 65144
 $y_sroa_0_0_extract_trunc = $b$0; //@line 65145
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 65146
 $1$1 = tempRet0; //@line 65147
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 65149
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $8 = 0, $9 = 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 255]($0) | 0; //@line 19059
 if (($4 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) {
  $$0 = __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 19064
 } else {
  $8 = $0 + 12 | 0; //@line 19066
  $9 = HEAP32[$8 >> 2] | 0; //@line 19067
  HEAP32[$8 >> 2] = $9 + 4; //@line 19069
  $$0 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$9 >> 2] | 0) | 0; //@line 19072
 }
 return $$0 | 0; //@line 19074
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $8 = 0, $9 = 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 255]($0) | 0; //@line 18788
 if (($4 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
  $$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 18793
 } else {
  $8 = $0 + 12 | 0; //@line 18795
  $9 = HEAP32[$8 >> 2] | 0; //@line 18796
  HEAP32[$8 >> 2] = $9 + 1; //@line 18798
  $$0 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0; //@line 18801
 }
 return $$0 | 0; //@line 18803
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $4 = 0, $6 = 0;
 $$0 = $1; //@line 58022
 while (1) {
  if (($$0 | 0) == ($2 | 0)) {
   break;
  }
  $4 = HEAP8[$$0 >> 0] | 0; //@line 58028
  if ($4 << 24 >> 24 > -1) {
   $6 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0; //@line 58031
   $12 = HEAP32[$6 + (HEAP8[$$0 >> 0] << 2) >> 2] & 255; //@line 58037
  } else {
   $12 = $4; //@line 58039
  }
  HEAP8[$$0 >> 0] = $12; //@line 58041
  $$0 = $$0 + 1 | 0; //@line 58043
 }
 return $2 | 0; //@line 58045
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $4 = 0, $6 = 0;
 $$0 = $1; //@line 58071
 while (1) {
  if (($$0 | 0) == ($2 | 0)) {
   break;
  }
  $4 = HEAP8[$$0 >> 0] | 0; //@line 58077
  if ($4 << 24 >> 24 > -1) {
   $6 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0; //@line 58080
   $12 = HEAP32[$6 + (HEAP8[$$0 >> 0] << 2) >> 2] & 255; //@line 58086
  } else {
   $12 = $4; //@line 58088
  }
  HEAP8[$$0 >> 0] = $12; //@line 58090
  $$0 = $$0 + 1 | 0; //@line 58092
 }
 return $2 | 0; //@line 58094
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa = 0, $7 = 0;
 $$0 = $2; //@line 58575
 while (1) {
  if (($$0 | 0) == ($3 | 0)) {
   $$0$lcssa = $3; //@line 58579
   break;
  }
  if ((HEAP32[$$0 >> 2] | 0) >>> 0 < 128) {
   $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0; //@line 58585
   if ((HEAP16[$7 + (HEAP32[$$0 >> 2] << 1) >> 1] & $1) << 16 >> 16) {
    $$0$lcssa = $$0; //@line 58592
    break;
   }
  }
  $$0 = $$0 + 4 | 0; //@line 58597
 }
 return $$0$lcssa | 0; //@line 58599
}
function __ZN16FunctionAnalyzerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = $0 + 16 | 0; //@line 21314
 HEAP32[$0 >> 2] = 0; //@line 21315
 HEAP32[$0 + 4 >> 2] = 0; //@line 21315
 HEAP32[$0 + 8 >> 2] = 0; //@line 21315
 HEAP32[$0 + 12 >> 2] = 0; //@line 21315
 HEAPF32[$1 >> 2] = 1.0; //@line 21316
 $2 = $0 + 20 | 0; //@line 21317
 $3 = $0 + 36 | 0; //@line 21318
 HEAP32[$2 >> 2] = 0; //@line 21319
 HEAP32[$2 + 4 >> 2] = 0; //@line 21319
 HEAP32[$2 + 8 >> 2] = 0; //@line 21319
 HEAP32[$2 + 12 >> 2] = 0; //@line 21319
 HEAPF32[$3 >> 2] = 1.0; //@line 21320
 return;
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $6 = 0, $9 = 0;
 $$0 = $1; //@line 58658
 while (1) {
  if (($$0 | 0) == ($2 | 0)) {
   break;
  }
  $4 = HEAP32[$$0 >> 2] | 0; //@line 58664
  if ($4 >>> 0 < 128) {
   $6 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0; //@line 58667
   $9 = HEAP32[$6 + (HEAP32[$$0 >> 2] << 2) >> 2] | 0; //@line 58671
  } else {
   $9 = $4; //@line 58673
  }
  HEAP32[$$0 >> 2] = $9; //@line 58675
  $$0 = $$0 + 4 | 0; //@line 58677
 }
 return $2 | 0; //@line 58679
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $6 = 0, $9 = 0;
 $$0 = $1; //@line 58703
 while (1) {
  if (($$0 | 0) == ($2 | 0)) {
   break;
  }
  $4 = HEAP32[$$0 >> 2] | 0; //@line 58709
  if ($4 >>> 0 < 128) {
   $6 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0; //@line 58712
   $9 = HEAP32[$6 + (HEAP32[$$0 >> 2] << 2) >> 2] | 0; //@line 58716
  } else {
   $9 = $4; //@line 58718
  }
  HEAP32[$$0 >> 2] = $9; //@line 58720
  $$0 = $$0 + 4 | 0; //@line 58722
 }
 return $2 | 0; //@line 58724
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 65297
  src = src + num | 0; //@line 65298
  dest = dest + num | 0; //@line 65299
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 65301
   src = src - 1 | 0; //@line 65302
   num = num - 1 | 0; //@line 65303
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 65304
  }
  dest = ret; //@line 65306
 } else {
  _memcpy(dest, src, num) | 0; //@line 65308
 }
 return dest | 0; //@line 65310
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 60823
 __THREW__ = 0; //@line 60824
 invoke_vii(119, $1 | 0, 31979); //@line 60825
 $2 = __THREW__; //@line 60826
 __THREW__ = 0; //@line 60826
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 60829
  ___cxa_free_exception($1 | 0); //@line 60831
  ___resumeException($4 | 0); //@line 60832
 } else {
  HEAP32[$1 >> 2] = 13244; //@line 60835
  ___cxa_throw($1 | 0, 2872, 240); //@line 60836
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 60802
 __THREW__ = 0; //@line 60803
 invoke_vii(119, $1 | 0, 31979); //@line 60804
 $2 = __THREW__; //@line 60805
 __THREW__ = 0; //@line 60805
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 60808
  ___cxa_free_exception($1 | 0); //@line 60810
  ___resumeException($4 | 0); //@line 60811
 } else {
  HEAP32[$1 >> 2] = 13224; //@line 60814
  ___cxa_throw($1 | 0, 2856, 240); //@line 60815
 }
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 58883
 __THREW__ = 0; //@line 58884
 invoke_vii(119, $1 | 0, 31947); //@line 58885
 $2 = __THREW__; //@line 58886
 __THREW__ = 0; //@line 58886
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 58889
  ___cxa_free_exception($1 | 0); //@line 58891
  ___resumeException($4 | 0); //@line 58892
 } else {
  HEAP32[$1 >> 2] = 13244; //@line 58895
  ___cxa_throw($1 | 0, 2872, 240); //@line 58896
 }
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 58862
 __THREW__ = 0; //@line 58863
 invoke_vii(119, $1 | 0, 31947); //@line 58864
 $2 = __THREW__; //@line 58865
 __THREW__ = 0; //@line 58865
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 58868
  ___cxa_free_exception($1 | 0); //@line 58870
  ___resumeException($4 | 0); //@line 58871
 } else {
  HEAP32[$1 >> 2] = 13224; //@line 58874
  ___cxa_throw($1 | 0, 2856, 240); //@line 58875
 }
}
function __ZNKSt3__219__deque_base_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 12680
 __THREW__ = 0; //@line 12681
 invoke_vii(119, $1 | 0, 14352); //@line 12682
 $2 = __THREW__; //@line 12683
 __THREW__ = 0; //@line 12683
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 12686
  ___cxa_free_exception($1 | 0); //@line 12688
  ___resumeException($4 | 0); //@line 12689
 } else {
  HEAP32[$1 >> 2] = 13244; //@line 12692
  ___cxa_throw($1 | 0, 2872, 240); //@line 12693
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 63996
 } else {
  $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 63999
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, $1, $2, $3); //@line 64003
 }
 return;
}
function ___ftello_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $12 = 0;
 if (!(HEAP32[$0 >> 2] & 128)) {
  $11 = 1; //@line 16163
 } else {
  $11 = (HEAP32[$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$0 + 28 >> 2] | 0) >>> 0 ? 2 : 1; //@line 16171
 }
 $12 = FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 63]($0, 0, $11) | 0; //@line 16173
 if (($12 | 0) < 0) {
  $$0 = $12; //@line 16176
 } else {
  $$0 = $12 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) + (HEAP32[$0 + 20 >> 2] | 0) - (HEAP32[$0 + 28 >> 2] | 0) | 0; //@line 16190
 }
 return $$0 | 0; //@line 16192
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP; //@line 64835
 STACKTOP = STACKTOP + 16 | 0; //@line 64836
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 64836
 $3 = sp; //@line 64837
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 64839
 $8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 63]($0, $1, $3) | 0; //@line 64843
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 64847
 }
 STACKTOP = sp; //@line 64849
 return $8 & 1 | 0; //@line 64849
}
function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 22319
 HEAP32[$4 >> 2] = 4744; //@line 22320
 $5 = $4 + 108 | 0; //@line 22321
 HEAP32[$5 >> 2] = 4764; //@line 22322
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($4 + 8 | 0); //@line 22324
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($4, 4720); //@line 22325
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5); //@line 22326
 __ZdlPv($4); //@line 22327
 return;
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do {
  if (!(HEAP8[33312] | 0)) {
   if (___cxa_guard_acquire(33312) | 0) {
    __THREW__ = 0; //@line 41651
    invoke_v(9); //@line 41652
    $5 = __THREW__; //@line 41653
    __THREW__ = 0; //@line 41653
    if ($5 & 1) {
     $8 = ___cxa_find_matching_catch_2() | 0; //@line 41656
     ___resumeException($8 | 0); //@line 41658
    } else {
     HEAP32[9256] = 36736; //@line 41661
     break;
    }
   }
  }
 } while (0);
 return HEAP32[9256] | 0; //@line 41668
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do {
  if (!(HEAP8[33296] | 0)) {
   if (___cxa_guard_acquire(33296) | 0) {
    __THREW__ = 0; //@line 41681
    invoke_v(10); //@line 41682
    $5 = __THREW__; //@line 41683
    __THREW__ = 0; //@line 41683
    if ($5 & 1) {
     $8 = ___cxa_find_matching_catch_2() | 0; //@line 41686
     ___resumeException($8 | 0); //@line 41688
    } else {
     HEAP32[9183] = 36444; //@line 41691
     break;
    }
   }
  }
 } while (0);
 return HEAP32[9183] | 0; //@line 41698
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do {
  if (!(HEAP8[33232] | 0)) {
   if (___cxa_guard_acquire(33232) | 0) {
    __THREW__ = 0; //@line 38830
    invoke_v(6); //@line 38831
    $5 = __THREW__; //@line 38832
    __THREW__ = 0; //@line 38832
    if ($5 & 1) {
     $8 = ___cxa_find_matching_catch_2() | 0; //@line 38835
     ___resumeException($8 | 0); //@line 38837
    } else {
     HEAP32[9053] = 35924; //@line 38840
     break;
    }
   }
  }
 } while (0);
 return HEAP32[9053] | 0; //@line 38847
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do {
  if (!(HEAP8[33328] | 0)) {
   if (___cxa_guard_acquire(33328) | 0) {
    __THREW__ = 0; //@line 41621
    invoke_v(8); //@line 41622
    $5 = __THREW__; //@line 41623
    __THREW__ = 0; //@line 41623
    if ($5 & 1) {
     $8 = ___cxa_find_matching_catch_2() | 0; //@line 41626
     ___resumeException($8 | 0); //@line 41628
    } else {
     HEAP32[9299] = 37028; //@line 41631
     break;
    }
   }
  }
 } while (0);
 return HEAP32[9299] | 0; //@line 41638
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do {
  if (!(HEAP8[33248] | 0)) {
   if (___cxa_guard_acquire(33248) | 0) {
    __THREW__ = 0; //@line 38800
    invoke_v(5); //@line 38801
    $5 = __THREW__; //@line 38802
    __THREW__ = 0; //@line 38802
    if ($5 & 1) {
     $8 = ___cxa_find_matching_catch_2() | 0; //@line 38805
     ___resumeException($8 | 0); //@line 38807
    } else {
     HEAP32[9096] = 36216; //@line 38810
     break;
    }
   }
  }
 } while (0);
 return HEAP32[9096] | 0; //@line 38817
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do {
  if (!(HEAP8[33216] | 0)) {
   if (___cxa_guard_acquire(33216) | 0) {
    __THREW__ = 0; //@line 38860
    invoke_v(7); //@line 38861
    $5 = __THREW__; //@line 38862
    __THREW__ = 0; //@line 38862
    if ($5 & 1) {
     $8 = ___cxa_find_matching_catch_2() | 0; //@line 38865
     ___resumeException($8 | 0); //@line 38867
    } else {
     HEAP32[8980] = 35632; //@line 38870
     break;
    }
   }
  }
 } while (0);
 return HEAP32[8980] | 0; //@line 38877
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $8 = 0;
 $8 = ($2 - $1 | 0) >>> 2; //@line 58778
 $$0 = $4; //@line 58779
 $$09 = $1; //@line 58779
 while (1) {
  if (($$09 | 0) == ($2 | 0)) {
   break;
  }
  $10 = HEAP32[$$09 >> 2] | 0; //@line 58785
  HEAP8[$$0 >> 0] = $10 >>> 0 < 128 ? $10 & 255 : $3; //@line 58789
  $$0 = $$0 + 1 | 0; //@line 58792
  $$09 = $$09 + 4 | 0; //@line 58792
 }
 return $1 + ($8 << 2) | 0; //@line 58795
}
function __ZNSt3__26__clocEv() {
 var $4 = 0, $5 = 0, $8 = 0;
 do {
  if (!(HEAP8[33176] | 0)) {
   if (___cxa_guard_acquire(33176) | 0) {
    __THREW__ = 0; //@line 23569
    $4 = invoke_iiii(41, 2147483647, 29802, 0) | 0; //@line 23570
    $5 = __THREW__; //@line 23571
    __THREW__ = 0; //@line 23571
    if ($5 & 1) {
     $8 = ___cxa_find_matching_catch_2() | 0; //@line 23574
     ___resumeException($8 | 0); //@line 23576
    } else {
     HEAP32[8880] = $4; //@line 23579
     break;
    }
   }
  }
 } while (0);
 return HEAP32[8880] | 0; //@line 23586
}
function __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0, $8 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1; //@line 60281
 HEAP32[$0 >> 2] = 12472; //@line 60282
 __THREW__ = 0; //@line 60283
 $4 = invoke_i(2) | 0; //@line 60284
 $5 = __THREW__; //@line 60285
 __THREW__ = 0; //@line 60285
 if ($5 & 1) {
  $8 = ___cxa_find_matching_catch_2() | 0; //@line 60288
  __ZNSt3__26locale5facetD2Ev($0); //@line 60290
  ___resumeException($8 | 0); //@line 60291
 } else {
  HEAP32[$0 + 8 >> 2] = $4; //@line 60295
  return;
 }
}
function _strerror_r($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $7 = 0;
 $3 = _strerror($0) | 0; //@line 13814
 $4 = _strlen($3) | 0; //@line 13815
 if ($4 >>> 0 < $2 >>> 0) {
  _memcpy($1 | 0, $3 | 0, $4 + 1 | 0) | 0; //@line 13819
  $$0 = 0; //@line 13820
 } else {
  $7 = $2 + -1 | 0; //@line 13823
  if (!$2) {
   $$0 = 34; //@line 13825
  } else {
   _memcpy($1 | 0, $3 | 0, $7 | 0) | 0; //@line 13828
   HEAP8[$1 + $7 >> 0] = 0; //@line 13829
   $$0 = 34; //@line 13830
  }
 }
 return $$0 | 0; //@line 13833
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 65129
 $2 = $b & 65535; //@line 65130
 $3 = Math_imul($2, $1) | 0; //@line 65131
 $6 = $a >>> 16; //@line 65132
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 65133
 $11 = $b >>> 16; //@line 65134
 $12 = Math_imul($11, $1) | 0; //@line 65135
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 65136
}
function __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 13184; //@line 60758
 __THREW__ = 0; //@line 60765
 invoke_vii(184, $0 + 4 | 0, ((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1) | 0); //@line 60766
 $8 = __THREW__; //@line 60767
 __THREW__ = 0; //@line 60767
 if ($8 & 1) {
  $10 = ___cxa_find_matching_catch_2() | 0; //@line 60770
  ___resumeException($10 | 0); //@line 60772
 } else {
  return;
 }
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 11128
 STACKTOP = STACKTOP + 16 | 0; //@line 11129
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11129
 $1 = sp; //@line 11130
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 63]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 11141
  } else {
   $$0 = -1; //@line 11143
  }
 } else {
  $$0 = -1; //@line 11146
 }
 STACKTOP = sp; //@line 11148
 return $$0 | 0; //@line 11148
}
function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 22302
 HEAP32[$4 >> 2] = 4744; //@line 22303
 $5 = $4 + 108 | 0; //@line 22304
 HEAP32[$5 >> 2] = 4764; //@line 22305
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($4 + 8 | 0); //@line 22307
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($4, 4720); //@line 22308
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($5); //@line 22309
 return;
}
function __ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 13164; //@line 60681
 __THREW__ = 0; //@line 60688
 invoke_vii(184, $0 + 4 | 0, ((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1) | 0); //@line 60689
 $8 = __THREW__; //@line 60690
 __THREW__ = 0; //@line 60690
 if ($8 & 1) {
  $10 = ___cxa_find_matching_catch_2() | 0; //@line 60693
  ___resumeException($10 | 0); //@line 60695
 } else {
  return;
 }
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 65586
}
function __ZNSt3__26locale8__globalEv() {
 var $4 = 0, $7 = 0;
 do {
  if (!(HEAP8[33824] | 0)) {
   if (___cxa_guard_acquire(33824) | 0) {
    __THREW__ = 0; //@line 60401
    invoke_i(8) | 0; //@line 60402
    $4 = __THREW__; //@line 60403
    __THREW__ = 0; //@line 60403
    if ($4 & 1) {
     $7 = ___cxa_find_matching_catch_2() | 0; //@line 60406
     ___resumeException($7 | 0); //@line 60408
    } else {
     HEAP32[9337] = 37344; //@line 60411
     break;
    }
   }
  }
 } while (0);
 return HEAP32[9337] | 0; //@line 60418
}
function __ZNSt3__26locale7classicEv() {
 var $4 = 0, $7 = 0;
 do {
  if (!(HEAP8[33656] | 0)) {
   if (___cxa_guard_acquire(33656) | 0) {
    __THREW__ = 0; //@line 60342
    invoke_i(7) | 0; //@line 60343
    $4 = __THREW__; //@line 60344
    __THREW__ = 0; //@line 60344
    if ($4 & 1) {
     $7 = ___cxa_find_matching_catch_2() | 0; //@line 60347
     ___resumeException($7 | 0); //@line 60349
    } else {
     HEAP32[9335] = 37336; //@line 60352
     break;
    }
   }
  }
 } while (0);
 return HEAP32[9335] | 0; //@line 60359
}
function ___unlist_locked_file($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$sink = 0, $10 = 0, $5 = 0;
 if (HEAP32[$0 + 68 >> 2] | 0) {
  $5 = HEAP32[$0 + 116 >> 2] | 0; //@line 13979
  $$pre = $0 + 112 | 0; //@line 13982
  if ($5 | 0) {
   HEAP32[$5 + 112 >> 2] = HEAP32[$$pre >> 2]; //@line 13986
  }
  $10 = HEAP32[$$pre >> 2] | 0; //@line 13988
  if (!$10) {
   $$sink = (___pthread_self_265() | 0) + 232 | 0; //@line 13993
  } else {
   $$sink = $10 + 116 | 0; //@line 13996
  }
  HEAP32[$$sink >> 2] = $5; //@line 13998
 }
 return;
}
function ___munmap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 17109
 STACKTOP = STACKTOP + 16 | 0; //@line 17110
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17110
 $vararg_buffer = sp; //@line 17111
 HEAP32[$vararg_buffer >> 2] = $0; //@line 17113
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 17115
 $4 = ___syscall_ret(___syscall91(91, $vararg_buffer | 0) | 0) | 0; //@line 17117
 STACKTOP = sp; //@line 17118
 return $4 | 0; //@line 17118
}
function __ZNSt3__211char_traitsIwE6assignEPwjw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $7 = 0, $8 = 0;
 if (!$1) {
  $7 = $0; //@line 37570
 } else {
  __THREW__ = 0; //@line 37572
  invoke_iiii(43, $0 | 0, $2 | 0, $1 | 0) | 0; //@line 37573
  $5 = __THREW__; //@line 37574
  __THREW__ = 0; //@line 37574
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_3(0) | 0; //@line 37577
   ___clang_call_terminate($8); //@line 37579
  } else {
   $7 = $0; //@line 37582
  }
 }
 return $7 | 0; //@line 37585
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $7 = 0, $8 = 0;
 if (!$2) {
  $7 = $0; //@line 62065
 } else {
  __THREW__ = 0; //@line 62067
  invoke_iiii(50, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 62068
  $5 = __THREW__; //@line 62069
  __THREW__ = 0; //@line 62069
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_3(0) | 0; //@line 62072
   ___clang_call_terminate($8); //@line 62074
  } else {
   $7 = $0; //@line 62077
  }
 }
 return $7 | 0; //@line 62080
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $7 = 0, $8 = 0;
 if (!$2) {
  $7 = $0; //@line 19163
 } else {
  __THREW__ = 0; //@line 19165
  invoke_iiii(40, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 19166
  $5 = __THREW__; //@line 19167
  __THREW__ = 0; //@line 19167
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_3(0) | 0; //@line 19170
   ___clang_call_terminate($8); //@line 19172
  } else {
   $7 = $0; //@line 19175
  }
 }
 return $7 | 0; //@line 19178
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $6 = 0;
 HEAP8[$0 >> 0] = 0; //@line 19991
 HEAP32[$0 + 4 >> 2] = $1; //@line 19993
 $6 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0; //@line 19997
 if (!(HEAP32[$6 + 16 >> 2] | 0)) {
  $11 = HEAP32[$6 + 72 >> 2] | 0; //@line 20003
  if ($11 | 0) {
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11) | 0; //@line 20006
  }
  HEAP8[$0 >> 0] = 1; //@line 20008
 }
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = _strlen($1) | 0; //@line 60706
 $4 = __Znwj($2 + 13 | 0) | 0; //@line 60708
 HEAP32[$4 >> 2] = $2; //@line 60709
 HEAP32[$4 + 4 >> 2] = $2; //@line 60711
 HEAP32[$4 + 8 >> 2] = 0; //@line 60713
 $7 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4) | 0; //@line 60714
 _memcpy($7 | 0, $1 | 0, $2 + 1 | 0) | 0; //@line 60716
 HEAP32[$0 >> 2] = $7; //@line 60717
 return;
}
function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0; //@line 44297
 __THREW__ = 0; //@line 44298
 invoke_vii(125, $1 | 0, $0 | 0); //@line 44299
 $2 = __THREW__; //@line 44300
 __THREW__ = 0; //@line 44300
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0; //@line 44303
  ___cxa_free_exception($1 | 0); //@line 44305
  ___resumeException($4 | 0); //@line 44306
 } else {
  ___cxa_throw($1 | 0, 2824, 242); //@line 44309
 }
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $5 = 0, $7 = 0;
 $4 = $0 + 32 | 0; //@line 18598
 $5 = $0 + 36 | 0; //@line 18599
 $$0 = HEAP32[$0 + 40 >> 2] | 0; //@line 18600
 while (1) {
  if (!$$0) {
   break;
  }
  $7 = $$0 + -1 | 0; //@line 18606
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$4 >> 2] | 0) + ($7 << 2) >> 2] & 63]($1, $0, HEAP32[(HEAP32[$5 >> 2] | 0) + ($7 << 2) >> 2] | 0); //@line 18613
  $$0 = $7; //@line 18614
 }
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13452
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13452
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13453
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 13454
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 13458
 HEAP32[tempDoublePtr >> 2] = $2; //@line 13459
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 13459
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function __ZNSt3__26localeC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0;
 __THREW__ = 0; //@line 60424
 $1 = invoke_i(9) | 0; //@line 60425
 $2 = __THREW__; //@line 60426
 __THREW__ = 0; //@line 60426
 if ($2 & 1) {
  $5 = ___cxa_find_matching_catch_3(0) | 0; //@line 60429
  ___clang_call_terminate($5); //@line 60431
 } else {
  $4 = HEAP32[$1 >> 2] | 0; //@line 60434
  HEAP32[$0 >> 2] = $4; //@line 60435
  __ZNSt3__214__shared_count12__add_sharedEv($4); //@line 60436
  return;
 }
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$09 = 0, $6 = 0;
 $$0 = $4; //@line 58142
 $$09 = $1; //@line 58142
 while (1) {
  if (($$09 | 0) == ($2 | 0)) {
   break;
  }
  $6 = HEAP8[$$09 >> 0] | 0; //@line 58148
  HEAP8[$$0 >> 0] = $6 << 24 >> 24 > -1 ? $6 : $3; //@line 58151
  $$0 = $$0 + 1 | 0; //@line 58154
  $$09 = $$09 + 1 | 0; //@line 58154
 }
 return $2 | 0; //@line 58156
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6800
 STACKTOP = STACKTOP + 16 | 0; //@line 6801
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6801
 $vararg_buffer = sp; //@line 6802
 HEAP32[$vararg_buffer >> 2] = _dummy_198(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 6806
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 6808
 STACKTOP = sp; //@line 6809
 return $5 | 0; //@line 6809
}
function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($0) {
 $0 = $0 | 0;
 var $$unpack = 0, $$unpack2 = 0, $10 = 0, $3 = 0;
 $$unpack = HEAP32[$0 + 4 >> 2] | 0; //@line 23727
 $$unpack2 = HEAP32[$0 + 8 >> 2] | 0; //@line 23729
 $3 = (HEAP32[$0 >> 2] | 0) + ($$unpack2 >> 1) | 0; //@line 23731
 if (!($$unpack2 & 1)) {
  $10 = $$unpack; //@line 23736
 } else {
  $10 = HEAP32[(HEAP32[$3 >> 2] | 0) + $$unpack >> 2] | 0; //@line 23741
 }
 FUNCTION_TABLE_vi[$10 & 511]($3); //@line 23743
 return;
}
function _wmemcpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$058 = 0, $$067 = 0, $$09 = 0;
 if ($2 | 0) {
  $$058 = $2; //@line 13843
  $$067 = $1; //@line 13843
  $$09 = $0; //@line 13843
  while (1) {
   $$058 = $$058 + -1 | 0; //@line 13845
   HEAP32[$$09 >> 2] = HEAP32[$$067 >> 2]; //@line 13849
   if (!$$058) {
    break;
   } else {
    $$067 = $$067 + 4 | 0; //@line 13854
    $$09 = $$09 + 4 | 0; //@line 13854
   }
  }
 }
 return $0 | 0; //@line 13858
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 8 | 0; //@line 60119
 $$0 = $1; //@line 60121
 $3 = HEAP32[$2 >> 2] | 0; //@line 60121
 do {
  HEAP32[$3 >> 2] = 0; //@line 60123
  $3 = (HEAP32[$2 >> 2] | 0) + 4 | 0; //@line 60125
  HEAP32[$2 >> 2] = $3; //@line 60126
  $$0 = $$0 + -1 | 0; //@line 60127
 } while (($$0 | 0) != 0);
 return;
}
function ___fseeko($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0, $9 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0; //@line 15965
  $8 = ___fseeko_unlocked($0, $1, $2) | 0; //@line 15966
  if ($phitmp) {
   $9 = $8; //@line 15968
  } else {
   ___unlockfile($0); //@line 15970
   $9 = $8; //@line 15971
  }
 } else {
  $9 = ___fseeko_unlocked($0, $1, $2) | 0; //@line 15975
 }
 return $9 | 0; //@line 15977
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$020 = 0, $6 = 0, $7 = 0;
 $$0 = 0; //@line 22513
 $$020 = $1; //@line 22513
 while (1) {
  if (($$020 | 0) == ($2 | 0)) {
   break;
  }
  $6 = (HEAP32[$$020 >> 2] | 0) + ($$0 << 4) | 0; //@line 22521
  $7 = $6 & -268435456; //@line 22522
  $$0 = ($7 >>> 24 | $7) ^ $6; //@line 22527
  $$020 = $$020 + 4 | 0; //@line 22527
 }
 return $$0 | 0; //@line 22529
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$020 = 0, $7 = 0, $8 = 0;
 $$0 = 0; //@line 22348
 $$020 = $1; //@line 22348
 while (1) {
  if (($$020 | 0) == ($2 | 0)) {
   break;
  }
  $7 = ($$0 << 4) + (HEAP8[$$020 >> 0] | 0) | 0; //@line 22357
  $8 = $7 & -268435456; //@line 22358
  $$0 = ($8 >>> 24 | $8) ^ $7; //@line 22363
  $$020 = $$020 + 1 | 0; //@line 22363
 }
 return $$0 | 0; //@line 22365
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 65188
 STACKTOP = STACKTOP + 16 | 0; //@line 65189
 $rem = __stackBase__ | 0; //@line 65190
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 65191
 STACKTOP = __stackBase__; //@line 65192
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 65193
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 4744; //@line 22285
 $1 = $0 + 108 | 0; //@line 22286
 HEAP32[$1 >> 2] = 4764; //@line 22287
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0 + 8 | 0); //@line 22289
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, 4720); //@line 22290
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1); //@line 22291
 __ZdlPv($0); //@line 22292
 return;
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 14293
 STACKTOP = STACKTOP + 16 | 0; //@line 14294
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14294
 $3 = sp; //@line 14295
 HEAP32[$3 >> 2] = $varargs; //@line 14296
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 14297
 STACKTOP = sp; //@line 14298
 return $4 | 0; //@line 14298
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 4 | 0; //@line 60046
 $$0 = $1; //@line 60048
 $3 = HEAP32[$2 >> 2] | 0; //@line 60048
 do {
  HEAP32[$3 >> 2] = 0; //@line 60050
  $3 = (HEAP32[$2 >> 2] | 0) + 4 | 0; //@line 60052
  HEAP32[$2 >> 2] = $3; //@line 60053
  $$0 = $$0 + -1 | 0; //@line 60054
 } while (($$0 | 0) != 0);
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 64891
 if ((ret | 0) < 8) return ret | 0; //@line 64892
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 64893
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 64894
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 64895
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 64896
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 64897
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP; //@line 63428
 STACKTOP = STACKTOP + 16 | 0; //@line 63429
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 63429
 $1 = sp; //@line 63430
 HEAP32[$1 >> 2] = $varargs; //@line 63431
 $2 = HEAP32[1299] | 0; //@line 63432
 _vfprintf($2, $0, $1) | 0; //@line 63433
 _fputc(10, $2) | 0; //@line 63434
 _abort(); //@line 63435
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 9564; //@line 19678
 __ZNSt3__26localeC2Ev($0 + 4 | 0); //@line 19680
 $2 = $0 + 8 | 0; //@line 19681
 HEAP32[$2 >> 2] = 0; //@line 19682
 HEAP32[$2 + 4 >> 2] = 0; //@line 19682
 HEAP32[$2 + 8 >> 2] = 0; //@line 19682
 HEAP32[$2 + 12 >> 2] = 0; //@line 19682
 HEAP32[$2 + 16 >> 2] = 0; //@line 19682
 HEAP32[$2 + 20 >> 2] = 0; //@line 19682
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 9500; //@line 19667
 __ZNSt3__26localeC2Ev($0 + 4 | 0); //@line 19669
 $2 = $0 + 8 | 0; //@line 19670
 HEAP32[$2 >> 2] = 0; //@line 19671
 HEAP32[$2 + 4 >> 2] = 0; //@line 19671
 HEAP32[$2 + 8 >> 2] = 0; //@line 19671
 HEAP32[$2 + 12 >> 2] = 0; //@line 19671
 HEAP32[$2 + 16 >> 2] = 0; //@line 19671
 HEAP32[$2 + 20 >> 2] = 0; //@line 19671
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0;
 if (($0 | 0) != ($1 | 0)) {
  $4 = HEAP8[$1 + 11 >> 0] | 0; //@line 60968
  $5 = $4 << 24 >> 24 < 0; //@line 60969
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255) | 0; //@line 60976
 }
 return $0 | 0; //@line 60978
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) | 0) {
  $3 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_597(HEAP32[$0 >> 2] | 0) | 0; //@line 64204
  $4 = $3 + 8 | 0; //@line 64205
  $5 = HEAP32[$4 >> 2] | 0; //@line 64206
  HEAP32[$4 >> 2] = $5 + -1; //@line 64208
  if (($5 + -1 | 0) < 0) {
   __ZdlPv($3); //@line 64212
  }
 }
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 63409
 STACKTOP = STACKTOP + 16 | 0; //@line 63410
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 63410
 if (!(_pthread_once(37428, 36) | 0)) {
  $3 = _pthread_getspecific(HEAP32[9358] | 0) | 0; //@line 63416
  STACKTOP = sp; //@line 63417
  return $3 | 0; //@line 63417
 } else {
  _abort_message(32626, sp); //@line 63419
 }
 return 0; //@line 63422
}
function dynCall_iiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 return FUNCTION_TABLE_iiiiiiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0) | 0; //@line 65516
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 63530
 }
 return;
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 16403
 STACKTOP = STACKTOP + 16 | 0; //@line 16404
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16404
 $2 = sp; //@line 16405
 HEAP32[$2 >> 2] = $varargs; //@line 16406
 $3 = _vsscanf($0, $1, $2) | 0; //@line 16407
 STACKTOP = sp; //@line 16408
 return $3 | 0; //@line 16408
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $6 = 0;
 $6 = $0; //@line 18944
 HEAP32[$6 >> 2] = 0; //@line 18946
 HEAP32[$6 + 4 >> 2] = 0; //@line 18949
 $11 = $0 + 8 | 0; //@line 18951
 HEAP32[$11 >> 2] = -1; //@line 18953
 HEAP32[$11 + 4 >> 2] = -1; //@line 18956
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $6 = 0;
 $6 = $0; //@line 18674
 HEAP32[$6 >> 2] = 0; //@line 18676
 HEAP32[$6 + 4 >> 2] = 0; //@line 18679
 $11 = $0 + 8 | 0; //@line 18681
 HEAP32[$11 >> 2] = -1; //@line 18683
 HEAP32[$11 + 4 >> 2] = -1; //@line 18686
 return;
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 4744; //@line 22272
 $1 = $0 + 108 | 0; //@line 22273
 HEAP32[$1 >> 2] = 4764; //@line 22274
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0 + 8 | 0); //@line 22276
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, 4720); //@line 22277
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1); //@line 22278
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 16390
 STACKTOP = STACKTOP + 16 | 0; //@line 16391
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16391
 $1 = sp; //@line 16392
 HEAP32[$1 >> 2] = $varargs; //@line 16393
 $3 = _vfprintf(HEAP32[1266] | 0, $0, $1) | 0; //@line 16395
 STACKTOP = sp; //@line 16396
 return $3 | 0; //@line 16396
}
function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 255]($0) | 0; //@line 21007
 $5 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37312) | 0; //@line 21008
 HEAP32[$0 + 36 >> 2] = $5; //@line 21010
 HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 255]($5) | 0) & 1; //@line 21017
 return;
}
function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 255]($0) | 0; //@line 21267
 $5 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 37304) | 0; //@line 21268
 HEAP32[$0 + 36 >> 2] = $5; //@line 21270
 HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 255]($5) | 0) & 1; //@line 21277
 return;
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 10365
 $6 = HEAP32[$5 >> 2] | 0; //@line 10366
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 10367
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 10369
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 10371
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 10374
 return $2 | 0; //@line 10375
}
function __ZNSt3__25ctypeIcEC2EPKtbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 HEAP32[$0 + 4 >> 2] = $3 + -1; //@line 58845
 HEAP32[$0 >> 2] = 12540; //@line 58846
 $7 = $0 + 8 | 0; //@line 58847
 HEAP32[$7 >> 2] = $1; //@line 58848
 HEAP8[$0 + 12 >> 0] = $2 & 1; //@line 58850
 if (!$1) {
  HEAP32[$7 >> 2] = __ZNSt3__25ctypeIcE13classic_tableEv() | 0; //@line 58854
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44764
 HEAP32[$0 + 4 >> 2] = 0; //@line 44764
 HEAP32[$0 + 8 >> 2] = 0; //@line 44764
 $$0$i$i = 0; //@line 44765
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44772
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44774
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44641
 HEAP32[$0 + 4 >> 2] = 0; //@line 44641
 HEAP32[$0 + 8 >> 2] = 0; //@line 44641
 $$0$i$i = 0; //@line 44642
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44649
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44651
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44519
 HEAP32[$0 + 4 >> 2] = 0; //@line 44519
 HEAP32[$0 + 8 >> 2] = 0; //@line 44519
 $$0$i$i = 0; //@line 44520
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44527
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44529
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44383
 HEAP32[$0 + 4 >> 2] = 0; //@line 44383
 HEAP32[$0 + 8 >> 2] = 0; //@line 44383
 $$0$i$i = 0; //@line 44384
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44391
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44393
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44745
 HEAP32[$0 + 4 >> 2] = 0; //@line 44745
 HEAP32[$0 + 8 >> 2] = 0; //@line 44745
 $$0$i$i = 0; //@line 44746
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44753
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44755
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44622
 HEAP32[$0 + 4 >> 2] = 0; //@line 44622
 HEAP32[$0 + 8 >> 2] = 0; //@line 44622
 $$0$i$i = 0; //@line 44623
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44630
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44632
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44500
 HEAP32[$0 + 4 >> 2] = 0; //@line 44500
 HEAP32[$0 + 8 >> 2] = 0; //@line 44500
 $$0$i$i = 0; //@line 44501
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44508
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44510
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44364
 HEAP32[$0 + 4 >> 2] = 0; //@line 44364
 HEAP32[$0 + 8 >> 2] = 0; //@line 44364
 $$0$i$i = 0; //@line 44365
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44372
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44374
 }
 return;
}
function dynCall_iiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 return FUNCTION_TABLE_iiiiiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0) | 0; //@line 65509
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44726
 HEAP32[$0 + 4 >> 2] = 0; //@line 44726
 HEAP32[$0 + 8 >> 2] = 0; //@line 44726
 $$0$i$i = 0; //@line 44727
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44734
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44736
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44603
 HEAP32[$0 + 4 >> 2] = 0; //@line 44603
 HEAP32[$0 + 8 >> 2] = 0; //@line 44603
 $$0$i$i = 0; //@line 44604
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44611
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44613
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44481
 HEAP32[$0 + 4 >> 2] = 0; //@line 44481
 HEAP32[$0 + 8 >> 2] = 0; //@line 44481
 $$0$i$i = 0; //@line 44482
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44489
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44491
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0; //@line 44345
 HEAP32[$0 + 4 >> 2] = 0; //@line 44345
 HEAP32[$0 + 8 >> 2] = 0; //@line 44345
 $$0$i$i = 0; //@line 44346
 while (1) {
  if (($$0$i$i | 0) == 3) {
   break;
  }
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0; //@line 44353
  $$0$i$i = $$0$i$i + 1 | 0; //@line 44355
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 64030
 STACKTOP = STACKTOP + 16 | 0; //@line 64031
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 64031
 _free($0); //@line 64033
 if (!(_pthread_setspecific(HEAP32[9358] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 64038
  return;
 } else {
  _abort_message(32725, sp); //@line 64040
 }
}
function __ZNSt13runtime_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 13184; //@line 60783
 __THREW__ = 0; //@line 60785
 invoke_vii(184, $0 + 4 | 0, $1 | 0); //@line 60786
 $3 = __THREW__; //@line 60787
 __THREW__ = 0; //@line 60787
 if ($3 & 1) {
  $5 = ___cxa_find_matching_catch_2() | 0; //@line 60790
  ___resumeException($5 | 0); //@line 60792
 } else {
  return;
 }
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$07 = 0;
 $$0 = $3; //@line 58110
 $$07 = $1; //@line 58110
 while (1) {
  if (($$07 | 0) == ($2 | 0)) {
   break;
  }
  HEAP8[$$0 >> 0] = HEAP8[$$07 >> 0] | 0; //@line 58117
  $$0 = $$0 + 1 | 0; //@line 58120
  $$07 = $$07 + 1 | 0; //@line 58120
 }
 return $2 | 0; //@line 58122
}
function __ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __ZNSt3__212_GLOBAL__N_117as_integer_helperIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFxPKcPPciEEET_RKS7_RKT0_PjiT1_($0, $1, $2, $3) | 0; //@line 62803
 return $4 | 0; //@line 62806
}
function __ZNSt11logic_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 13164; //@line 60732
 __THREW__ = 0; //@line 60734
 invoke_vii(184, $0 + 4 | 0, $1 | 0); //@line 60735
 $3 = __THREW__; //@line 60736
 __THREW__ = 0; //@line 60736
 if ($3 & 1) {
  $5 = ___cxa_find_matching_catch_2() | 0; //@line 60739
  ___resumeException($5 | 0); //@line 60741
 } else {
  return;
 }
}
function __ZNKSt3__26locale5__imp9use_facetEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 if (__ZNKSt3__26locale5__imp9has_facetEl($0, $1) | 0) {
  return HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) >> 2] | 0; //@line 23652
 } else {
  $3 = ___cxa_allocate_exception(4) | 0; //@line 23654
  __ZNSt8bad_castC2Ev($3); //@line 23655
  ___cxa_throw($3 | 0, 2904, 248); //@line 23656
 }
 return 0; //@line 23659
}
function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $4 = 0;
 __THREW__ = 0; //@line 58179
 $0 = invoke_i(5) | 0; //@line 58180
 $1 = __THREW__; //@line 58181
 __THREW__ = 0; //@line 58181
 if ($1 & 1) {
  $4 = ___cxa_find_matching_catch_3(0) | 0; //@line 58184
  ___clang_call_terminate($4); //@line 58186
 } else {
  return HEAP32[$0 >> 2] | 0; //@line 58190
 }
 return 0; //@line 58192
}
function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $4 = 0;
 __THREW__ = 0; //@line 58161
 $0 = invoke_i(4) | 0; //@line 58162
 $1 = __THREW__; //@line 58163
 __THREW__ = 0; //@line 58163
 if ($1 & 1) {
  $4 = ___cxa_find_matching_catch_3(0) | 0; //@line 58166
  ___clang_call_terminate($4); //@line 58168
 } else {
  return HEAP32[$0 >> 2] | 0; //@line 58172
 }
 return 0; //@line 58174
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$07 = 0;
 $$0 = $3; //@line 58741
 $$07 = $1; //@line 58741
 while (1) {
  if (($$07 | 0) == ($2 | 0)) {
   break;
  }
  HEAP32[$$0 >> 2] = HEAP8[$$07 >> 0]; //@line 58749
  $$0 = $$0 + 4 | 0; //@line 58752
  $$07 = $$07 + 1 | 0; //@line 58752
 }
 return $2 | 0; //@line 58754
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $0; //@line 18966
 HEAP32[$4 >> 2] = 0; //@line 18968
 HEAP32[$4 + 4 >> 2] = 0; //@line 18971
 $9 = $0 + 8 | 0; //@line 18973
 HEAP32[$9 >> 2] = -1; //@line 18975
 HEAP32[$9 + 4 >> 2] = -1; //@line 18978
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $0; //@line 18696
 HEAP32[$4 >> 2] = 0; //@line 18698
 HEAP32[$4 + 4 >> 2] = 0; //@line 18701
 $9 = $0 + 8 | 0; //@line 18703
 HEAP32[$9 >> 2] = -1; //@line 18705
 HEAP32[$9 + 4 >> 2] = -1; //@line 18708
 return;
}
function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $4 = 0;
 __THREW__ = 0; //@line 58197
 $0 = invoke_i(6) | 0; //@line 58198
 $1 = __THREW__; //@line 58199
 __THREW__ = 0; //@line 58199
 if ($1 & 1) {
  $4 = ___cxa_find_matching_catch_3(0) | 0; //@line 58202
  ___clang_call_terminate($4); //@line 58204
 } else {
  return HEAP32[$0 >> 2] | 0; //@line 58208
 }
 return 0; //@line 58210
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 63606
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack = 0, $$unpack5 = 0;
 $$unpack = HEAP32[$1 >> 2] | 0; //@line 23702
 $$unpack5 = HEAP32[$1 + 4 >> 2] | 0; //@line 23704
 HEAP32[$0 >> 2] = $2; //@line 23705
 HEAP32[$0 + 4 >> 2] = $$unpack; //@line 23707
 HEAP32[$0 + 8 >> 2] = $$unpack5; //@line 23709
 return;
}
function __GLOBAL__sub_I_Prelude_charm_cpp() {
 var $0 = 0;
 HEAP32[8458] = 0; //@line 2421
 HEAP32[8459] = 0; //@line 2421
 HEAP32[8460] = 0; //@line 2421
 $0 = __Znwj(5072) | 0; //@line 2422
 HEAP32[8458] = $0; //@line 2423
 HEAP32[8460] = -2147478576; //@line 2424
 HEAP32[8459] = 5060; //@line 2425
 _memcpy($0 | 0, 21116, 5060) | 0; //@line 2426
 HEAP8[$0 + 5060 >> 0] = 0; //@line 2428
 return;
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 10422
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10424
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 10426
 $7 = $4 - $6 | 0; //@line 10427
 HEAP32[$0 + 108 >> 2] = $7; //@line 10429
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 10438
 return;
}
function ___ftello($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0; //@line 16139
  $6 = ___ftello_unlocked($0) | 0; //@line 16140
  if ($phitmp) {
   $7 = $6; //@line 16142
  } else {
   $7 = $6; //@line 16144
  }
 } else {
  $7 = ___ftello_unlocked($0) | 0; //@line 16148
 }
 return $7 | 0; //@line 16150
}
function dynCall_iiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 return FUNCTION_TABLE_iiiiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0) | 0; //@line 65502
}
function _wmemset($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$056 = 0, $$07 = 0;
 if ($2 | 0) {
  $$056 = $2; //@line 13745
  $$07 = $0; //@line 13745
  while (1) {
   $$056 = $$056 + -1 | 0; //@line 13747
   HEAP32[$$07 >> 2] = $1; //@line 13749
   if (!$$056) {
    break;
   } else {
    $$07 = $$07 + 4 | 0; //@line 13754
   }
  }
 }
 return $0 | 0; //@line 13758
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0;
 $8 = $2 + 8 | 0; //@line 952
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 15]($0, $1, HEAP32[$8 >> 2] | 0, HEAP32[$8 + 4 >> 2] | 0, 0, $3); //@line 958
 return;
}
function dynCall_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 FUNCTION_TABLE_viiiiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0); //@line 65579
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 3032; //@line 743
 $1 = $0 + 32 | 0; //@line 744
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$1 >> 2] | 0); //@line 750
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 752
 __ZdlPv($0); //@line 753
 return;
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 switch (HEAP32[$0 + 4 >> 2] & 74) {
 case 64:
  {
   $$0 = 8; //@line 25988
   break;
  }
 case 8:
  {
   $$0 = 16; //@line 25992
   break;
  }
 case 0:
  {
   $$0 = 0; //@line 25996
   break;
  }
 default:
  {
   $$0 = 10; //@line 26000
  }
 }
 return $$0 | 0; //@line 26003
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 64015
 STACKTOP = STACKTOP + 16 | 0; //@line 64016
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 64016
 if (!(_pthread_key_create(37432, 272) | 0)) {
  STACKTOP = sp; //@line 64021
  return;
 } else {
  _abort_message(32675, sp); //@line 64023
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 63670
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 63674
  }
 }
 return;
}
function ___ofl_add($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0;
 $1 = ___ofl_lock() | 0; //@line 14273
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2]; //@line 14276
 $4 = HEAP32[$1 >> 2] | 0; //@line 14277
 if ($4 | 0) {
  HEAP32[$4 + 52 >> 2] = $0; //@line 14281
 }
 HEAP32[$1 >> 2] = $0; //@line 14283
 ___ofl_unlock(); //@line 14284
 return $0 | 0; //@line 14285
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 3032; //@line 727
 $1 = $0 + 32 | 0; //@line 728
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$1 >> 2] | 0); //@line 734
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 736
 return;
}
function __ZNSt3__214__shared_count16__release_sharedEv($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($0 + 4 | 0) | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 511]($0); //@line 60499
  $$0 = 1; //@line 60500
 } else {
  $$0 = 0; //@line 60502
 }
 return $$0 | 0; //@line 60504
}
function b675(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(3); //@line 1504
}
function b674(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 1501
}
function __ZNKSt3__26locale5__imp9has_facetEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $5 = 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0; //@line 23669
 if ((HEAP32[$0 + 12 >> 2] | 0) - $5 >> 2 >>> 0 > $1 >>> 0) {
  $13 = (HEAP32[$5 + ($1 << 2) >> 2] | 0) != 0; //@line 23678
 } else {
  $13 = 0; //@line 23680
 }
 return $13 | 0; //@line 23682
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, 1) | 0; //@line 54733
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0; //@line 54738
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, 1) | 0; //@line 54563
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0; //@line 54568
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[8399] = 0; //@line 59769
 HEAP32[8398] = 12716; //@line 59770
 __ZNSt3__220__time_get_c_storageIwEC2Ev(33600); //@line 59771
 HEAP32[8398] = 10564; //@line 59772
 HEAP32[8400] = 10612; //@line 59773
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[8395] = 0; //@line 59750
 HEAP32[8394] = 12716; //@line 59751
 __ZNSt3__220__time_get_c_storageIcEC2Ev(33584); //@line 59752
 HEAP32[8394] = 10480; //@line 59753
 HEAP32[8396] = 10528; //@line 59754
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj($0, $1, $2, $3, __ZNSt3__211char_traitsIcE6lengthEPKc($3) | 0) | 0; //@line 61875
}
function __ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+__ZNSt3__212_GLOBAL__N_115as_float_helperIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFePKcPPcEEET_RKS7_RKT0_PjT1_($0, $1, $2));
}
function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0; //@line 65495
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2; //@line 55815
 HEAP32[$7 >> 2] = $5; //@line 55816
 return 3; //@line 55817
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 65211
  return low << bits; //@line 65212
 }
 tempRet0 = low << bits - 32; //@line 65214
 return 0; //@line 65215
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2; //@line 55830
 HEAP32[$7 >> 2] = $5; //@line 55831
 return 3; //@line 55832
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 65200
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 65201
 }
 tempRet0 = 0; //@line 65203
 return high >>> bits - 32 | 0; //@line 65204
}
function __ZNKSt3__25ctypeIwE5do_isEtw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $9 = 0;
 if ($2 >>> 0 < 128) {
  $9 = (HEAP16[(__ZNSt3__25ctypeIcE13classic_tableEv() | 0) + ($2 << 1) >> 1] & $1) << 16 >> 16 != 0; //@line 58529
 } else {
  $9 = 0; //@line 58531
 }
 return $9 | 0; //@line 58533
}
function __ZNSt3__211char_traitsIcE4findEPKcjRS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 61885
 } else {
  $$0 = _memchr($0, __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$2 >> 0] | 0) | 0, $1) | 0; //@line 61890
 }
 return $$0 | 0; //@line 61892
}
function __ZNSt3__211char_traitsIwE7not_eofEj($0) {
 $0 = $0 | 0;
 var $5 = 0;
 if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($0, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
  $5 = ~(__ZNSt3__211char_traitsIwE3eofEv() | 0); //@line 21238
 } else {
  $5 = $0; //@line 21240
 }
 return $5 | 0; //@line 21242
}
function __ZNSt3__211char_traitsIcE7not_eofEi($0) {
 $0 = $0 | 0;
 var $5 = 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($0, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
  $5 = ~(__ZNSt3__211char_traitsIcE3eofEv() | 0); //@line 21498
 } else {
  $5 = $0; //@line 21500
 }
 return $5 | 0; //@line 21502
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $8 = 0;
 if ($1 << 24 >> 24 > -1) {
  $8 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; //@line 58059
 } else {
  $8 = $1; //@line 58061
 }
 return $8 | 0; //@line 58063
}
function ___uselocale($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0;
 $2 = (___pthread_self_672() | 0) + 188 | 0; //@line 17665
 $3 = HEAP32[$2 >> 2] | 0; //@line 17666
 if ($0 | 0) {
  HEAP32[$2 >> 2] = ($0 | 0) == (-1 | 0) ? 34384 : $0; //@line 17671
 }
 return (($3 | 0) == 34384 ? -1 : $3) | 0; //@line 17675
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $8 = 0;
 if ($1 << 24 >> 24 > -1) {
  $8 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + (($1 & 255) << 2) >> 2] & 255; //@line 58010
 } else {
  $8 = $1; //@line 58012
 }
 return $8 | 0; //@line 58014
}
function b273(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 nullFunc_iiiiiiiiiiiii(3); //@line 319
 return 0; //@line 319
}
function b272(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 nullFunc_iiiiiiiiiiiii(0); //@line 316
 return 0; //@line 316
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0; //@line 65488
}
function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 12540; //@line 57975
 $2 = HEAP32[$0 + 8 >> 2] | 0; //@line 57977
 if ($2 | 0) {
  if (HEAP8[$0 + 12 >> 0] | 0) {
   __ZdaPv($2); //@line 57984
  }
 }
 __ZNSt3__26locale5facetD2Ev($0); //@line 57987
 return;
}
function __ZN3FFIC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 16 | 0; //@line 24449
 HEAP32[$0 >> 2] = 0; //@line 24450
 HEAP32[$0 + 4 >> 2] = 0; //@line 24450
 HEAP32[$0 + 8 >> 2] = 0; //@line 24450
 HEAP32[$0 + 12 >> 2] = 0; //@line 24450
 HEAPF32[$1 >> 2] = 1.0; //@line 24451
 return;
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0;
 if ($1 >>> 0 < 128) {
  $6 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + ($1 << 2) >> 2] | 0; //@line 58646
 } else {
  $6 = $1; //@line 58648
 }
 return $6 | 0; //@line 58650
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0;
 if ($1 >>> 0 < 128) {
  $6 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($1 << 2) >> 2] | 0; //@line 58691
 } else {
  $6 = $1; //@line 58693
 }
 return $6 | 0; //@line 58695
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0 + 8 | 0, $1 + 12 | 0); //@line 19432
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, $1 + 4 | 0); //@line 19434
 return;
}
function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0); //@line 65572
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0, $1, __ZNSt3__211char_traitsIwE6lengthEPKw($1) | 0) | 0; //@line 62361
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0; //@line 61256
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0; //@line 61522
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function b270(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 nullFunc_iiiiiiiiiiii(3); //@line 313
 return 0; //@line 313
}
function b269(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 nullFunc_iiiiiiiiiiii(0); //@line 310
 return 0; //@line 310
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 16 | 0; //@line 20099
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 1; //@line 20102
 if (!(HEAP32[$0 + 20 >> 2] & 1)) {
  return;
 } else {
  ___cxa_rethrow(); //@line 20110
 }
}
function __ZN5Stack7isFloatE13CharmFunction($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[$0 >> 2] | 0) == 2) {
  if ((HEAP32[$0 + 16 >> 2] | 0) == 1) {
   $$0 = 1; //@line 11163
   return $$0 | 0; //@line 11164
  }
 }
 $$0 = 0; //@line 11167
 return $$0 | 0; //@line 11168
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($2, $3, $4, 1114111, 0) | 0; //@line 57051
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 65481
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($2, $3, $4, 1114111, 0) | 0; //@line 55067
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37280) | 0); //@line 59744
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37272) | 0); //@line 59728
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37264) | 0); //@line 59712
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37256) | 0); //@line 59696
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37216) | 0); //@line 59842
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37208) | 0); //@line 59812
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37200) | 0); //@line 59782
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(36388) | 0); //@line 59763
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35576) | 0); //@line 59616
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35568) | 0); //@line 59600
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35560) | 0); //@line 59584
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35536) | 0); //@line 59568
 return;
}
function __ZN5Stack5isIntE13CharmFunction($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[$0 >> 2] | 0) == 2) {
  if (!(HEAP32[$0 + 16 >> 2] | 0)) {
   $$0 = 1; //@line 11145
   return $$0 | 0; //@line 11146
  }
 }
 $$0 = 0; //@line 11149
 return $$0 | 0; //@line 11150
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 18259
 HEAP32[$1 >> 2] = 3360; //@line 18260
 return $1 | 0; //@line 18261
}
function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0; //@line 65474
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 10053
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 10059
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 10063
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0;
 $7 = $3 - $2 | 0; //@line 55867
 return ($7 >>> 0 < $4 >>> 0 ? $7 : $4) | 0; //@line 55870
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 1042
 HEAP32[$1 >> 2] = 4108; //@line 1043
 return $1 | 0; //@line 1044
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 2146
 HEAP32[$1 >> 2] = 4064; //@line 2147
 return $1 | 0; //@line 2148
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 5684
 HEAP32[$1 >> 2] = 3976; //@line 5685
 return $1 | 0; //@line 5686
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 65565
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16646 ? $0 + 4 | 0 : 0) | 0; //@line 1942
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16875 ? $0 + 4 | 0 : 0) | 0; //@line 5145
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 17215 ? $0 + 4 | 0 : 0) | 0; //@line 6006
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 19809 ? $0 + 4 | 0 : 0) | 0; //@line 19479
}
function __ZNSt3__211char_traitsIcE6assignEPcjc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($1 | 0) {
  _memset($0 | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc($2) | 0) & 255 | 0, $1 | 0) | 0; //@line 44445
 }
 return $0 | 0; //@line 44447
}
function __ZNKSt3__210error_code7messageEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = HEAP32[$1 + 4 >> 2] | 0; //@line 63156
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 63]($0, $3, HEAP32[$1 >> 2] | 0); //@line 63161
 return;
}
function b267(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 nullFunc_iiiiiiiiiii(3); //@line 307
 return 0; //@line 307
}
function b266(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 nullFunc_iiiiiiiiiii(0); //@line 304
 return 0; //@line 304
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2; //@line 44806
 HEAP8[$0 + 1 >> 0] = 3; //@line 44806
 HEAP8[$0 + 2 >> 0] = 0; //@line 44806
 HEAP8[$0 + 3 >> 0] = 4; //@line 44806
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2; //@line 44814
 HEAP8[$0 + 1 >> 0] = 3; //@line 44814
 HEAP8[$0 + 2 >> 0] = 0; //@line 44814
 HEAP8[$0 + 3 >> 0] = 4; //@line 44814
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2; //@line 44683
 HEAP8[$0 + 1 >> 0] = 3; //@line 44683
 HEAP8[$0 + 2 >> 0] = 0; //@line 44683
 HEAP8[$0 + 3 >> 0] = 4; //@line 44683
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2; //@line 44691
 HEAP8[$0 + 1 >> 0] = 3; //@line 44691
 HEAP8[$0 + 2 >> 0] = 0; //@line 44691
 HEAP8[$0 + 3 >> 0] = 4; //@line 44691
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2; //@line 44560
 HEAP8[$0 + 1 >> 0] = 3; //@line 44560
 HEAP8[$0 + 2 >> 0] = 0; //@line 44560
 HEAP8[$0 + 3 >> 0] = 4; //@line 44560
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2; //@line 44568
 HEAP8[$0 + 1 >> 0] = 3; //@line 44568
 HEAP8[$0 + 2 >> 0] = 0; //@line 44568
 HEAP8[$0 + 3 >> 0] = 4; //@line 44568
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2; //@line 44424
 HEAP8[$0 + 1 >> 0] = 3; //@line 44424
 HEAP8[$0 + 2 >> 0] = 0; //@line 44424
 HEAP8[$0 + 3 >> 0] = 4; //@line 44424
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2; //@line 44432
 HEAP8[$0 + 1 >> 0] = 3; //@line 44432
 HEAP8[$0 + 2 >> 0] = 0; //@line 44432
 HEAP8[$0 + 3 >> 0] = 4; //@line 44432
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 19864
 HEAP32[$1 >> 2] = 4680; //@line 19865
 return $1 | 0; //@line 19866
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 22341
 HEAP32[$1 >> 2] = 4636; //@line 22342
 return $1 | 0; //@line 22343
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 23010
 HEAP32[$1 >> 2] = 4592; //@line 23011
 return $1 | 0; //@line 23012
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 23532
 HEAP32[$1 >> 2] = 4548; //@line 23533
 return $1 | 0; //@line 23534
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 23896
 HEAP32[$1 >> 2] = 4504; //@line 23897
 return $1 | 0; //@line 23898
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 24113
 HEAP32[$1 >> 2] = 4460; //@line 24114
 return $1 | 0; //@line 24115
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 24845
 HEAP32[$1 >> 2] = 4416; //@line 24846
 return $1 | 0; //@line 24847
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 25403
 HEAP32[$1 >> 2] = 4372; //@line 25404
 return $1 | 0; //@line 25405
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 26305
 HEAP32[$1 >> 2] = 4328; //@line 26306
 return $1 | 0; //@line 26307
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 27377
 HEAP32[$1 >> 2] = 4284; //@line 27378
 return $1 | 0; //@line 27379
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 28279
 HEAP32[$1 >> 2] = 4240; //@line 28280
 return $1 | 0; //@line 28281
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 29181
 HEAP32[$1 >> 2] = 4196; //@line 29182
 return $1 | 0; //@line 29183
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 29735
 HEAP32[$1 >> 2] = 4152; //@line 29736
 return $1 | 0; //@line 29737
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 10939
 HEAP32[$1 >> 2] = 3756; //@line 10940
 return $1 | 0; //@line 10941
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 12135
 HEAP32[$1 >> 2] = 3712; //@line 12136
 return $1 | 0; //@line 12137
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 13142
 HEAP32[$1 >> 2] = 3668; //@line 13143
 return $1 | 0; //@line 13144
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 14689
 HEAP32[$1 >> 2] = 3624; //@line 14690
 return $1 | 0; //@line 14691
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 15416
 HEAP32[$1 >> 2] = 3580; //@line 15417
 return $1 | 0; //@line 15418
}
function ___DOUBLE_BITS_481($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13442
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13442
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13444
 return $1 | 0; //@line 13445
}
function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12632; //@line 58335
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 16 | 0); //@line 58337
 __ZNSt3__26locale5facetD2Ev($0); //@line 58338
 return;
}
function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12592; //@line 58216
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 12 | 0); //@line 58218
 __ZNSt3__26locale5facetD2Ev($0); //@line 58219
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 16234
 HEAP32[$1 >> 2] = 3536; //@line 16235
 return $1 | 0; //@line 16236
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 16369
 HEAP32[$1 >> 2] = 3492; //@line 16370
 return $1 | 0; //@line 16371
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 16906
 HEAP32[$1 >> 2] = 3448; //@line 16907
 return $1 | 0; //@line 16908
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 17594
 HEAP32[$1 >> 2] = 3404; //@line 17595
 return $1 | 0; //@line 17596
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 19498
 HEAP32[$1 >> 2] = 3316; //@line 19499
 return $1 | 0; //@line 19500
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 20240
 HEAP32[$1 >> 2] = 3272; //@line 20241
 return $1 | 0; //@line 20242
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 20694
 HEAP32[$1 >> 2] = 3228; //@line 20695
 return $1 | 0; //@line 20696
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 20789
 HEAP32[$1 >> 2] = 3184; //@line 20790
 return $1 | 0; //@line 20791
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 21068
 HEAP32[$1 >> 2] = 3140; //@line 21069
 return $1 | 0; //@line 21070
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 if (!$2) {
  $$0 = 0; //@line 60458
 } else {
  $$0 = _memcmp($0, $1, $2) | 0; //@line 60461
 }
 return $$0 | 0; //@line 60463
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0, 9832); //@line 19374
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0 + 12 | 0); //@line 19376
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 5164
 HEAP32[$1 >> 2] = 4020; //@line 5165
 return $1 | 0; //@line 5166
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 6025
 HEAP32[$1 >> 2] = 3932; //@line 6026
 return $1 | 0; //@line 6027
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 6612
 HEAP32[$1 >> 2] = 3888; //@line 6613
 return $1 | 0; //@line 6614
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 7228
 HEAP32[$1 >> 2] = 3844; //@line 7229
 return $1 | 0; //@line 7230
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __Znwj(8) | 0; //@line 9425
 HEAP32[$1 >> 2] = 3800; //@line 9426
 return $1 | 0; //@line 9427
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0, 9764); //@line 19328
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0 + 4 | 0); //@line 19330
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0, 9716); //@line 19282
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0 + 4 | 0); //@line 19284
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0, 9708); //@line 19236
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0 + 8 | 0); //@line 19238
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, 9660); //@line 19190
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0 + 8 | 0); //@line 19192
 return;
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 >> 2] | 0; //@line 23390
 return __ZNKSt3__26locale5__imp9use_facetEl($2, __ZNSt3__26locale2id5__getEv($1) | 0) | 0; //@line 23393
}
function __ZNKSt3__26locale9has_facetERNS0_2idE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 >> 2] | 0; //@line 60445
 return __ZNKSt3__26locale5__imp9has_facetEl($2, __ZNSt3__26locale2id5__getEv($1) | 0) | 0; //@line 60448
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 14561 ? $0 + 4 | 0 : 0) | 0; //@line 20615
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 14858 ? $0 + 4 | 0 : 0) | 0; //@line 22991
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 14985 ? $0 + 4 | 0 : 0) | 0; //@line 23513
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 15112 ? $0 + 4 | 0 : 0) | 0; //@line 23877
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 15239 ? $0 + 4 | 0 : 0) | 0; //@line 24094
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 15366 ? $0 + 4 | 0 : 0) | 0; //@line 24826
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 15580 ? $0 + 4 | 0 : 0) | 0; //@line 25384
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 15737 ? $0 + 4 | 0 : 0) | 0; //@line 26286
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 15891 ? $0 + 4 | 0 : 0) | 0; //@line 27358
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16045 ? $0 + 4 | 0 : 0) | 0; //@line 28260
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16199 ? $0 + 4 | 0 : 0) | 0; //@line 29162
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16326 ? $0 + 4 | 0 : 0) | 0; //@line 29716
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 17993 ? $0 + 4 | 0 : 0) | 0; //@line 10690
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 18239 ? $0 + 4 | 0 : 0) | 0; //@line 11569
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 18403 ? $0 + 4 | 0 : 0) | 0; //@line 13123
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 18664 ? $0 + 4 | 0 : 0) | 0; //@line 14445
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 18927 ? $0 + 4 | 0 : 0) | 0; //@line 15397
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 19054 ? $0 + 4 | 0 : 0) | 0; //@line 16215
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 64884
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 64885
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 64886
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 6926
  $$0 = -1; //@line 6927
 } else {
  $$0 = $0; //@line 6929
 }
 return $$0 | 0; //@line 6931
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 16481 ? $0 + 4 | 0 : 0) | 0; //@line 1017
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 17088 ? $0 + 4 | 0 : 0) | 0; //@line 5665
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 17382 ? $0 + 4 | 0 : 0) | 0; //@line 6593
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 17567 ? $0 + 4 | 0 : 0) | 0; //@line 7209
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 17788 ? $0 + 4 | 0 : 0) | 0; //@line 7901
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 19281 ? $0 + 4 | 0 : 0) | 0; //@line 16350
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 19406 ? $0 + 4 | 0 : 0) | 0; //@line 16887
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 19531 ? $0 + 4 | 0 : 0) | 0; //@line 17575
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 19656 ? $0 + 4 | 0 : 0) | 0; //@line 18240
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 20004 ? $0 + 4 | 0 : 0) | 0; //@line 20221
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 20212 ? $0 + 4 | 0 : 0) | 0; //@line 20675
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 20337 ? $0 + 4 | 0 : 0) | 0; //@line 20770
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 20462 ? $0 + 4 | 0 : 0) | 0; //@line 21049
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP32[$1 + 4 >> 2] | 0) == 20619 ? $0 + 4 | 0 : 0) | 0; //@line 21302
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 65467
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0); //@line 44142
 __ZNSt3__26locale5facetD2Ev($0); //@line 44143
 __ZdlPv($0); //@line 44144
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0); //@line 43992
 __ZNSt3__26locale5facetD2Ev($0); //@line 43993
 __ZdlPv($0); //@line 43994
 return;
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9786
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9786
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9788
 return $1 | 0; //@line 9789
}
function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0; //@line 65460
}
function __ZNSt3__26localeC2ERKS0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$1 >> 2] | 0; //@line 60386
 HEAP32[$0 >> 2] = $2; //@line 60387
 __ZNSt3__214__shared_count12__add_sharedEv($2); //@line 60388
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37320) | 0); //@line 59506
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37328) | 0); //@line 59522
 return;
}
function b672(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 nullFunc_viiiiiiiiii(7); //@line 1498
}
function b671(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 nullFunc_viiiiiiiiii(6); //@line 1495
}
function b670(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 nullFunc_viiiiiiiiii(5); //@line 1492
}
function b669(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 nullFunc_viiiiiiiiii(0); //@line 1489
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37312) | 0); //@line 59490
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37304) | 0); //@line 59475
 return;
}
function runPostSets() {}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 64876
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 64878
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4108; //@line 1051
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4064; //@line 2155
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3976; //@line 5693
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3360; //@line 18268
 return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 65558
}
function __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ((HEAP32[$1 >> 2] | 0) == ($2 | 0) ? (HEAP32[$1 + 4 >> 2] | 0) == ($0 | 0) : 0) | 0; //@line 63012
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37248) | 0); //@line 59680
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37240) | 0); //@line 59664
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37232) | 0); //@line 59648
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37224) | 0); //@line 59632
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 64795
 } else {
  HEAP8[$0 >> 0] = 1; //@line 64797
  $$0 = 1; //@line 64798
 }
 return $$0 | 0; //@line 64800
}
function _wcslen($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 $$0 = $0; //@line 13509
 while (1) {
  if (!(HEAP32[$$0 >> 2] | 0)) {
   break;
  } else {
   $$0 = $$0 + 4 | 0; //@line 13517
  }
 }
 return $$0 - $0 >> 2 | 0; //@line 13524
}
function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19411
 return;
}
function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19422
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2; //@line 57027
 return 3; //@line 57028
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2; //@line 55043
 return 3; //@line 55044
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2; //@line 55842
 return 3; //@line 55843
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19349
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19360
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19303
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19314
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19257
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19268
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19211
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0); //@line 19222
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35552) | 0); //@line 59552
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35528) | 0); //@line 59537
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37296) | 0); //@line 59874
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(37288) | 0); //@line 59858
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35504) | 0); //@line 59428
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35496) | 0); //@line 59412
 return;
}
function b264(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(15); //@line 301
 return 0; //@line 301
}
function b263(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(14); //@line 298
 return 0; //@line 298
}
function b262(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(13); //@line 295
 return 0; //@line 295
}
function b261(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(12); //@line 292
 return 0; //@line 292
}
function b260(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(11); //@line 289
 return 0; //@line 289
}
function b259(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(0); //@line 286
 return 0; //@line 286
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35544) | 0); //@line 59459
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(35512) | 0); //@line 59443
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4680; //@line 19873
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4636; //@line 22350
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4592; //@line 23019
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4548; //@line 23541
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4504; //@line 23905
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4460; //@line 24122
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4416; //@line 24854
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4372; //@line 25412
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4328; //@line 26314
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4284; //@line 27386
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4240; //@line 28288
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4196; //@line 29190
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4152; //@line 29744
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3756; //@line 10948
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3712; //@line 12144
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3668; //@line 13151
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3624; //@line 14698
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3580; //@line 15425
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 4020; //@line 5173
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3932; //@line 6034
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3888; //@line 6621
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3844; //@line 7237
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3800; //@line 9434
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3536; //@line 16243
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3492; //@line 16378
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3448; //@line 16915
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3404; //@line 17603
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3316; //@line 19507
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3272; //@line 20249
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3228; //@line 20703
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3184; //@line 20798
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$1 >> 2] = 3140; //@line 21077
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 65453
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $3 = 0;
 if (!$0) {
  $3 = 0; //@line 64857
 } else {
  $3 = (___dynamic_cast($0, 2752, 2936, 0) | 0) != 0 & 1; //@line 64862
 }
 return $3 | 0; //@line 64864
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0); //@line 44133
 __ZNSt3__26locale5facetD2Ev($0); //@line 44134
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0); //@line 43983
 __ZNSt3__26locale5facetD2Ev($0); //@line 43984
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0 | 0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[$0 >> 2] >> 2] | 0); //@line 23718
 return;
}
function __ZNKSt3__214error_category23default_error_conditionEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $2; //@line 62968
 HEAP32[$0 + 4 >> 2] = $1; //@line 62970
 return;
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) {
  _memmove($0 | 0, $1 | 0, $2 | 0) | 0; //@line 61048
 }
 return $0 | 0; //@line 61050
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 65551
}
function __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0; //@line 60510
 HEAP32[$0 >> 2] = $1 + -1; //@line 60512
 return $1 + -1 | 0; //@line 60514
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) {
  _memcpy($0 | 0, $1 | 0, $2 | 0) | 0; //@line 18892
 }
 return $0 | 0; //@line 18894
}
function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[8881] | 0; //@line 23688
 HEAP32[8881] = $1 + 1; //@line 23690
 HEAP32[$0 + 4 >> 2] = $1 + 1; //@line 23693
 return;
}
function b257(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(15); //@line 283
 return 0; //@line 283
}
function b256(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(14); //@line 280
 return 0; //@line 280
}
function b255(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(13); //@line 277
 return 0; //@line 277
}
function b254(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(12); //@line 274
 return 0; //@line 274
}
function b253(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(11); //@line 271
 return 0; //@line 271
}
function b252(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(10); //@line 268
 return 0; //@line 268
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1 + 16 | 0); //@line 58371
 return;
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1 + 12 | 0); //@line 58252
 return;
}
function b251(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(9); //@line 265
 return 0; //@line 265
}
function b250(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(0); //@line 262
 return 0; //@line 262
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 13730
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 13735
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 1064
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 2168
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 5706
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 18281
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 8 + 3 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$0 >> 2] | 0); //@line 61993
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[8393] = 0; //@line 59734
 HEAP32[8392] = 12284; //@line 59735
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[8391] = 0; //@line 59718
 HEAP32[8390] = 12256; //@line 59719
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[8389] = 0; //@line 59702
 HEAP32[8388] = 12228; //@line 59703
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[8387] = 0; //@line 59686
 HEAP32[8386] = 12200; //@line 59687
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0); //@line 18916
 __ZdlPv($0); //@line 18917
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 18646
 __ZdlPv($0); //@line 18647
 return;
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(4) | 0; //@line 60671
 __ZNSt9bad_allocC2Ev($0); //@line 60672
 ___cxa_throw($0 | 0, 2792, 238); //@line 60673
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[8377] = 0; //@line 59606
 HEAP32[8376] = 10428; //@line 59607
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[8375] = 0; //@line 59590
 HEAP32[8374] = 10376; //@line 59591
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[8373] = 0; //@line 59574
 HEAP32[8372] = 10312; //@line 59575
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[8371] = 0; //@line 59558
 HEAP32[8370] = 10248; //@line 59559
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 8846
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 8849
 }
 return $$0 | 0; //@line 8851
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_(); //@line 60364
 HEAP32[9334] = 33664; //@line 60365
 return 37336; //@line 60366
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0); //@line 19383
 __ZdlPv($0); //@line 19384
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$0 >> 2] | 0); //@line 60956
 }
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0); //@line 19337
 __ZdlPv($0); //@line 19338
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0); //@line 19291
 __ZdlPv($0); //@line 19292
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0); //@line 19245
 __ZdlPv($0); //@line 19246
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0); //@line 19199
 __ZdlPv($0); //@line 19200
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0); //@line 21365
 __ZdlPv($0); //@line 21366
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 53194
 __ZdlPv($0); //@line 53195
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 51858
 __ZdlPv($0); //@line 51859
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 48358
 __ZdlPv($0); //@line 48359
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44828
 __ZdlPv($0); //@line 44829
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 41088
 __ZdlPv($0); //@line 41089
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 38270
 __ZdlPv($0); //@line 38271
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 63](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 65446
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 36548
 __ZdlPv($0); //@line 36549
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 34722
 __ZdlPv($0); //@line 34723
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 29076
 __ZdlPv($0); //@line 29077
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 22551
 __ZdlPv($0); //@line 22552
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 65180
}
function _strtoull_l($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = _strtoull($0, $1, $2) | 0; //@line 17739
 return $4 | 0; //@line 17742
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 if ($0 | 0) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] & 511]($0); //@line 22242
 }
 return;
}
function _strtoll_l($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = _strtoll($0, $1, $2) | 0; //@line 17751
 return $4 | 0; //@line 17754
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 15467
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 15472
 }
 return $4 | 0; //@line 15474
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 19886
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 22363
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23032
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23554
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23918
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 24135
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 24867
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 25425
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 26327
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 27399
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 28301
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 29203
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 29757
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 10961
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 12157
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 13164
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 14711
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 15438
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1096; //@line 19485
}
function b248(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(63); //@line 259
 return 0; //@line 259
}
function b247(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(62); //@line 256
 return 0; //@line 256
}
function b246(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(61); //@line 253
 return 0; //@line 253
}
function b245(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(60); //@line 250
 return 0; //@line 250
}
function b244(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(59); //@line 247
 return 0; //@line 247
}
function b243(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(58); //@line 244
 return 0; //@line 244
}
function b242(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(57); //@line 241
 return 0; //@line 241
}
function b241(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(56); //@line 238
 return 0; //@line 238
}
function b240(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(55); //@line 235
 return 0; //@line 235
}
function b239(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(54); //@line 232
 return 0; //@line 232
}
function b238(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(53); //@line 229
 return 0; //@line 229
}
function b237(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(52); //@line 226
 return 0; //@line 226
}
function b236(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(51); //@line 223
 return 0; //@line 223
}
function b235(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(50); //@line 220
 return 0; //@line 220
}
function b234(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(49); //@line 217
 return 0; //@line 217
}
function b233(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(48); //@line 214
 return 0; //@line 214
}
function b232(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(47); //@line 211
 return 0; //@line 211
}
function b231(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(46); //@line 208
 return 0; //@line 208
}
function b230(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(45); //@line 205
 return 0; //@line 205
}
function b229(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(44); //@line 202
 return 0; //@line 202
}
function b228(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(43); //@line 199
 return 0; //@line 199
}
function b227(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(42); //@line 196
 return 0; //@line 196
}
function b226(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(41); //@line 193
 return 0; //@line 193
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 9564; //@line 18907
 __ZNSt3__26localeD2Ev($0 + 4 | 0); //@line 18909
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 9500; //@line 18637
 __ZNSt3__26localeD2Ev($0 + 4 | 0); //@line 18639
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 5186
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 6047
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 6634
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 7250
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 9447
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 16256
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 16391
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 16928
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 17616
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 19520
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 20262
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 20716
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 20811
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 21090
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 520; //@line 1948
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 552; //@line 5151
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 600; //@line 6012
}
function b225(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 190
 return 0; //@line 190
}
function _strtoll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _strtox_43($0, $1, $2, 0, -2147483648) | 0; //@line 13543
 return $3 | 0; //@line 13546
}
function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0 + -8 | 0); //@line 19392
 return;
}
function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0 + -8 | 0); //@line 19400
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 1035
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 2139
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 5677
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 18252
 return;
}
function b667(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_viiiiiii(7); //@line 1486
}
function b666(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_viiiiiii(6); //@line 1483
}
function b665(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_viiiiiii(0); //@line 1480
}
function b223(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 nullFunc_iiiiiid(3); //@line 187
 return 0; //@line 187
}
function b222(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 nullFunc_iiiiiid(0); //@line 184
 return 0; //@line 184
}
function ___ctype_get_mb_cur_max() {
 var $4 = 0;
 $4 = (HEAP32[HEAP32[(___pthread_self() | 0) + 188 >> 2] >> 2] | 0) != 0; //@line 13895
 return ($4 ? 4 : 1) | 0; //@line 13897
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 63](a1 | 0, a2 | 0, a3 | 0); //@line 65544
}
function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $1 >>> 0 <= $0 >>> 0 & $0 >>> 0 < $2 >>> 0 | 0; //@line 51368
}
function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $1 >>> 0 <= $0 >>> 0 & $0 >>> 0 < $2 >>> 0 | 0; //@line 47807
}
function __ZNKSt3__212__do_message7messageEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($0, $2); //@line 63020
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function _strtoull($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _strtox_43($0, $1, $2, -1, -1) | 0; //@line 13532
 return $3 | 0; //@line 13535
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 19082
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 18811
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 19142
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 18870
}
function dynCall_diii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +FUNCTION_TABLE_diii[index & 7](a1 | 0, a2 | 0, a3 | 0);
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 10189
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 10191
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 64305
 __ZdlPv($0); //@line 64306
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 63851
 __ZdlPv($0); //@line 63852
 return;
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 13184; //@line 64228
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0); //@line 64230
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 128; //@line 20621
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 232; //@line 22997
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 256; //@line 23519
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 280; //@line 23883
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 304; //@line 24100
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 328; //@line 24832
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 352; //@line 25390
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 376; //@line 26292
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 400; //@line 27364
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 424; //@line 28266
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 448; //@line 29168
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 472; //@line 29722
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 856; //@line 10696
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 880; //@line 11575
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 904; //@line 13129
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 928; //@line 14451
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 952; //@line 15403
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 976; //@line 16221
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1024; //@line 16893
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1048; //@line 17581
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1072; //@line 18246
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1120; //@line 20227
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1144; //@line 20681
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1168; //@line 20776
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1192; //@line 21055
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1216; //@line 21308
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0); //@line 56969
 __ZdlPv($0); //@line 56970
 return;
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 496; //@line 1023
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 576; //@line 5671
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 624; //@line 6599
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 648; //@line 7215
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 672; //@line 7907
}
function __ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv($0) {
 $0 = $0 | 0;
 return 1e3; //@line 16356
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(37344, __ZNSt3__26locale7classicEv() | 0); //@line 60378
 return 37344; //@line 60379
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 19857
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 22334
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23003
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23525
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23889
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 24106
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 24838
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 25396
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 26298
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 27370
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 28272
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 29174
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 29728
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 10932
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 12128
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 13135
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 14682
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 15409
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 13164; //@line 64169
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0); //@line 64171
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 63448
 __ZdlPv($0); //@line 63449
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 5157
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 6018
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 6605
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 7221
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 9418
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 16227
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 16362
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 16899
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 17587
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 19491
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 20233
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 20687
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 20782
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEED0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 21061
 return;
}
function b220(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(31); //@line 181
 return 0; //@line 181
}
function b219(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(30); //@line 178
 return 0; //@line 178
}
function b218(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(29); //@line 175
 return 0; //@line 175
}
function b217(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(28); //@line 172
 return 0; //@line 172
}
function b216(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(27); //@line 169
 return 0; //@line 169
}
function b215(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(26); //@line 166
 return 0; //@line 166
}
function b214(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(25); //@line 163
 return 0; //@line 163
}
function b213(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(24); //@line 160
 return 0; //@line 160
}
function __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($0) {
 $0 = $0 | 0;
 __ZNSt3__214__shared_count16__release_sharedEv($0) | 0; //@line 59971
 return;
}
function b212(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 157
 return 0; //@line 157
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 53187
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 51851
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 48351
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44821
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[8353] = 0; //@line 59496
 HEAP32[8352] = 12852; //@line 59497
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[8355] = 0; //@line 59512
 HEAP32[8354] = 12900; //@line 59513
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 29
  threwValue = value; //@line 30
 }
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 127](a1 | 0, a2 | 0) | 0; //@line 65439
}
function _out_163($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 8203
 }
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 41081
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 38263
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[8347] = 0; //@line 59465
 HEAP32[8346] = 12804; //@line 59466
 return;
}
function b663(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(15); //@line 1477
}
function b662(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(14); //@line 1474
}
function b661(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(13); //@line 1471
}
function b660(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(12); //@line 1468
}
function b659(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(11); //@line 1465
}
function b658(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(10); //@line 1462
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 36541
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 34715
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 29069
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 22544
 return;
}
function b657(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 1459
}
function b210(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 nullFunc_iiiiid(7); //@line 154
 return 0; //@line 154
}
function b209(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 nullFunc_iiiiid(6); //@line 151
 return 0; //@line 151
}
function b208(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 nullFunc_iiiiid(5); //@line 148
 return 0; //@line 148
}
function b207(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 nullFunc_iiiiid(0); //@line 145
 return 0; //@line 145
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 >>> 0 < 128 ? $1 & 255 : $2) | 0; //@line 58765
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 << 24 >> 24 > -1 ? $1 : $2) | 0; //@line 58132
}
function __ZN5Stack13isNameEqualToE13CharmFunction($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZeqRK13CharmFunctionS1_($0 + 8 | 0, $1) | 0; //@line 11177
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 63617
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0; //@line 18933
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0; //@line 18663
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej(33392, 1); //@line 59481
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[9359] | 0; //@line 64824
 HEAP32[9359] = $0 + 0; //@line 64826
 return $0 | 0; //@line 64828
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 58809
 __ZdlPv($0); //@line 58810
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 58817
 __ZdlPv($0); //@line 58818
 return;
}
function __ZNSt3__217__widen_from_utf8ILj32EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 54985
 __ZdlPv($0); //@line 54986
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[8385] = 0; //@line 59670
 HEAP32[8384] = 12144; //@line 59671
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[8383] = 0; //@line 59654
 HEAP32[8382] = 12088; //@line 59655
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[8381] = 0; //@line 59638
 HEAP32[8380] = 12032; //@line 59639
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[8379] = 0; //@line 59622
 HEAP32[8378] = 11976; //@line 59623
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[3263] | 0; //@line 64127
 HEAP32[3263] = $0 + 0; //@line 64129
 return $0 | 0; //@line 64131
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 58801
 __ZdlPv($0); //@line 58802
 return;
}
function __ZNSt3__216__narrow_to_utf8ILj32EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 55800
 __ZdlPv($0); //@line 55801
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0; //@line 19050
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0; //@line 18779
}
function __ZNSt3__214__shared_count12__add_sharedEv($0) {
 $0 = $0 | 0;
 __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($0 + 4 | 0); //@line 60476
 return;
}
function dynCall_iid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 return FUNCTION_TABLE_iid[index & 1](a1 | 0, +a2) | 0; //@line 65432
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 255](a1 | 0, a2 | 0); //@line 65537
}
function __ZNSt3__28ios_base7failureD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_base7failureD2Ev($0); //@line 19523
 __ZdlPv($0); //@line 19524
 return;
}
function __ZNSt3__26localeD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__214__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23400
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[8413] = 0; //@line 59864
 HEAP32[8412] = 12344; //@line 59865
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[8411] = 0; //@line 59848
 HEAP32[8410] = 12312; //@line 59849
 return;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0; //@line 19509
 return;
}
function __ZNSt3__211__stdoutbufIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__211__stdoutbufIwED2Ev($0); //@line 20995
 __ZdlPv($0); //@line 20996
 return;
}
function __ZNSt3__211__stdoutbufIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__211__stdoutbufIcED2Ev($0); //@line 21255
 __ZdlPv($0); //@line 21256
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44705
 __ZdlPv($0); //@line 44706
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44582
 __ZdlPv($0); //@line 44583
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44460
 __ZdlPv($0); //@line 44461
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44324
 __ZdlPv($0); //@line 44325
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[8339] = 0; //@line 59418
 HEAP32[8338] = 10216; //@line 59419
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[8337] = 0; //@line 59402
 HEAP32[8336] = 10184; //@line 59403
 return;
}
function __ZNSt3__217iostream_categoryEv() {
 if (!(HEAP8[33168] | 0)) {
  if (___cxa_guard_acquire(33168) | 0) {}
 }
 return 9916; //@line 19585
}
function __ZNSt3__211char_traitsIwE6assignERwRKw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 22537
 return;
}
function __ZNSt3__210__stdinbufIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__stdinbufIwED2Ev($0); //@line 21515
 __ZdlPv($0); //@line 21516
 return;
}
function __ZNSt3__210__stdinbufIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__stdinbufIcED2Ev($0); //@line 21874
 __ZdlPv($0); //@line 21875
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[8345] = 0; //@line 59449
 HEAP32[8344] = 12736; //@line 59450
 return;
}
function __ZNKSt3__28ios_base6getlocEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26localeC2ERKS0_($0, $1 + 28 | 0); //@line 19652
 return;
}
function b205(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(31); //@line 142
 return 0; //@line 142
}
function b204(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(30); //@line 139
 return 0; //@line 139
}
function b203(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(29); //@line 136
 return 0; //@line 136
}
function b202(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(28); //@line 133
 return 0; //@line 133
}
function b201(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(27); //@line 130
 return 0; //@line 130
}
function b200(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(26); //@line 127
 return 0; //@line 127
}
function b199(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(25); //@line 124
 return 0; //@line 124
}
function b198(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(24); //@line 121
 return 0; //@line 121
}
function b197(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(23); //@line 118
 return 0; //@line 118
}
function b196(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(22); //@line 115
 return 0; //@line 115
}
function b195(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(21); //@line 112
 return 0; //@line 112
}
function b194(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(20); //@line 109
 return 0; //@line 109
}
function __ZNSt3__212system_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212system_errorD2Ev($0); //@line 63146
 __ZdlPv($0); //@line 63147
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbj(33360, 0, 0, 1); //@line 59434
 return;
}
function __ZNSt3__211__stdoutbufIwED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0); //@line 20988
 return;
}
function __ZNSt3__211__stdoutbufIcED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 21248
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 1073741823; //@line 60068
}
function b193(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 106
 return 0; //@line 106
}
function __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1; //@line 60485
 return;
}
function __ZNSt3__210__stdinbufIwED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0); //@line 21508
 return;
}
function __ZNSt3__210__stdinbufIcED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0); //@line 21867
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0 | 0;
 return 2; //@line 41096
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0 | 0;
 return 2; //@line 38278
}
function dynCall_dii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +FUNCTION_TABLE_dii[index & 1](a1 | 0, a2 | 0);
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 65219
}
function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 58504
 __ZdlPv($0); //@line 58505
 return;
}
function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5__impD2Ev($0); //@line 57933
 __ZdlPv($0); //@line 57934
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv($0) {
 $0 = $0 | 0;
 return;
}
function _mbrlen($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbrtowc(0, $0, $1, $2 | 0 ? $2 : 34448) | 0; //@line 17251
}
function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 54718
 __ZdlPv($0); //@line 54719
 return;
}
function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 54548
 __ZdlPv($0); //@line 54549
 return;
}
function b655(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(7); //@line 1456
}
function b654(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 1453
}
function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28numpunctIwED2Ev($0); //@line 58345
 __ZdlPv($0); //@line 58346
 return;
}
function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28numpunctIcED2Ev($0); //@line 58226
 __ZdlPv($0); //@line 58227
 return;
}
function ___cxa_throw__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 ___cxa_throw(p0 | 0, p1 | 0, p2 | 0); //@line 1345
}
function __ZNSt3__210__stdinbufIwE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($0, 0) | 0; //@line 21555
}
function __ZNSt3__210__stdinbufIcE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($0, 0) | 0; //@line 21914
}
function __ZNSt16invalid_argumentD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0); //@line 64253
 __ZdlPv($0); //@line 64254
 return;
}
function __ZNSt14overflow_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt13runtime_errorD2Ev($0); //@line 64277
 __ZdlPv($0); //@line 64278
 return;
}
function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27collateIwED2Ev($0); //@line 22384
 __ZdlPv($0); //@line 22385
 return;
}
function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27collateIcED2Ev($0); //@line 22229
 __ZdlPv($0); //@line 22230
 return;
}
function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 58512
 __ZdlPv($0); //@line 58513
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0 | 0;
 return $0 + 12 | 0; //@line 60725
}
function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 19661
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 19644
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt13runtime_errorD2Ev($0); //@line 64237
 __ZdlPv($0); //@line 64238
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0; //@line 64247
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0; //@line 64188
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_530() | 0) + 188 >> 2] | 0) | 0; //@line 8666
}
function ___loc_is_allocated($0) {
 $0 = $0 | 0;
 return ($0 | 0) != 5576 & (($0 | 0) != 0 & ($0 | 0) != 34408) & 1 | 0; //@line 17263
}
function __ZNSt3__210__stdinbufIwE5uflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($0, 1) | 0; //@line 21562
}
function __ZNSt3__210__stdinbufIcE5uflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($0, 1) | 0; //@line 21921
}
function __ZNSt12out_of_rangeD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0); //@line 64269
 __ZdlPv($0); //@line 64270
 return;
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0); //@line 64261
 __ZdlPv($0); //@line 64262
 return;
}
function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0); //@line 18622
 __ZdlPv($0); //@line 18623
 return;
}
function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__25ctypeIcED2Ev($0); //@line 57994
 __ZdlPv($0); //@line 57995
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0); //@line 64178
 __ZdlPv($0); //@line 64179
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 255](a1 | 0) | 0; //@line 65425
}
function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Ej(33664, 1); //@line 60371
 return;
}
function _do_read_230($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 16437
}
function __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 - $0 >> 2 | 0; //@line 44291
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0; //@line 565
 __ZSt9terminatev(); //@line 566
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Ej(33448, 1); //@line 59543
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Ej(33424, 1); //@line 59528
 return;
}
function _isxdigit($0) {
 $0 = $0 | 0;
 return ((($0 | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($0) | 0) != 0) & 1 | 0; //@line 13871
}
function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0); //@line 18630
 return;
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0); //@line 18556
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_597($0) {
 $0 = $0 | 0;
 return $0 + -12 | 0; //@line 64222
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt9bad_allocD2Ev($0); //@line 64143
 __ZdlPv($0); //@line 64144
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 - $0 | 0; //@line 44096
}
function __ZNSt8bad_castD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt8bad_castD2Ev($0); //@line 64291
 __ZdlPv($0); //@line 64292
 return;
}
function b191(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(63); //@line 103
 return 0; //@line 103
}
function b190(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(62); //@line 100
 return 0; //@line 100
}
function b189(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(61); //@line 97
 return 0; //@line 97
}
function b188(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(60); //@line 94
 return 0; //@line 94
}
function b187(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(59); //@line 91
 return 0; //@line 91
}
function b186(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(58); //@line 88
 return 0; //@line 88
}
function b185(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(57); //@line 85
 return 0; //@line 85
}
function b184(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(56); //@line 82
 return 0; //@line 82
}
function b183(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(55); //@line 79
 return 0; //@line 79
}
function b182(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(54); //@line 76
 return 0; //@line 76
}
function b181(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(53); //@line 73
 return 0; //@line 73
}
function b180(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(52); //@line 70
 return 0; //@line 70
}
function b179(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(51); //@line 67
 return 0; //@line 67
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 511](a1 | 0); //@line 65530
}
function b652(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(31); //@line 1450
}
function b651(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(30); //@line 1447
}
function b650(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(29); //@line 1444
}
function b649(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(28); //@line 1441
}
function b648(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(27); //@line 1438
}
function b647(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(26); //@line 1435
}
function b646(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(25); //@line 1432
}
function b645(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(24); //@line 1429
}
function b644(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(23); //@line 1426
}
function b643(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(22); //@line 1423
}
function b178(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 64
 return 0; //@line 64
}
function _catgets($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return $3 | 0; //@line 17696
}
function b642(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 1420
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0 | 0;
 return _pthread_cond_broadcast(p0 | 0) | 0; //@line 65635
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 12 >> 2] | 0; //@line 58363
}
function __ZNKSt3__25ctypeIwE8do_widenEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 << 24 >> 24 | 0; //@line 58732
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44698
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44575
 return;
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44453
 return;
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 44317
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 8 >> 2] | 0; //@line 58355
}
function __ZNSt3__28ios_base7failureD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212system_errorD2Ev($0); //@line 19516
 return;
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 9 >> 0] | 0; //@line 58244
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 8 >> 0] | 0; //@line 58236
}
function __ZNSt3__220__time_get_c_storageIwEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12984; //@line 58832
 return;
}
function __ZNSt3__220__time_get_c_storageIcEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 12948; //@line 58825
 return;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0 | 0;
 return _pthread_mutex_unlock(p0 | 0) | 0; //@line 65629
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($0) {
 $0 = $0 | 0;
 return 0; //@line 18991
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0 | 0;
 return 0; //@line 18721
}
function _freelocale($0) {
 $0 = $0 | 0;
 if (___loc_is_allocated($0) | 0) {
  _free($0); //@line 17712
 }
 return;
}
function b6(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_diii(7); //@line 65602
 return 0.0;
}
function b5(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_diii(6); //@line 65599
 return 0.0;
}
function b4(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_diii(5); //@line 65596
 return 0.0;
}
function b3(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_diii(0); //@line 65593
 return 0.0;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 2147483647; //@line 44719
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 2147483647; //@line 44713
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 2147483647; //@line 44596
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 2147483647; //@line 44590
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0 | 0;
 return _pthread_mutex_lock(p0 | 0) | 0; //@line 65632
}
function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 54711
 return;
}
function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 54541
 return;
}
function __ZNSt3__212system_errorD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt13runtime_errorD2Ev($0); //@line 63139
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 11123
}
function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 22377
 return;
}
function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0); //@line 22222
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($0) {
 $0 = $0 | 0;
 return 0; //@line 18985
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0 | 0;
 return 0; //@line 18715
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0; //@line 57040
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0; //@line 55056
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 >> 2] | 0; //@line 64195
}
function b155(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(106); //@line 66049
 return 0; //@line 66049
}
function b154(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(105); //@line 66046
 return 0; //@line 66046
}
function b153(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(104); //@line 66043
 return 0; //@line 66043
}
function b152(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(103); //@line 66040
 return 0; //@line 66040
}
function b151(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(102); //@line 66037
 return 0; //@line 66037
}
function b150(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(101); //@line 66034
 return 0; //@line 66034
}
function b149(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(100); //@line 66031
 return 0; //@line 66031
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0; //@line 56764
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 1; //@line 55855
}
function b148(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(99); //@line 66028
 return 0; //@line 66028
}
function b147(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(98); //@line 66025
 return 0; //@line 66025
}
function b146(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(97); //@line 66022
 return 0; //@line 66022
}
function b145(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(96); //@line 66019
 return 0; //@line 66019
}
function b144(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(95); //@line 66016
 return 0; //@line 66016
}
function b143(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(94); //@line 66013
 return 0; //@line 66013
}
function b142(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(93); //@line 66010
 return 0; //@line 66010
}
function b141(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(92); //@line 66007
 return 0; //@line 66007
}
function b140(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(91); //@line 66004
 return 0; //@line 66004
}
function b139(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(90); //@line 66001
 return 0; //@line 66001
}
function b138(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(89); //@line 65998
 return 0; //@line 65998
}
function b137(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(88); //@line 65995
 return 0; //@line 65995
}
function b136(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(87); //@line 65992
 return 0; //@line 65992
}
function b135(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(86); //@line 65989
 return 0; //@line 65989
}
function b134(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(85); //@line 65986
 return 0; //@line 65986
}
function b133(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(84); //@line 65983
 return 0; //@line 65983
}
function b132(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(83); //@line 65980
 return 0; //@line 65980
}
function b131(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(82); //@line 65977
 return 0; //@line 65977
}
function b130(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(81); //@line 65974
 return 0; //@line 65974
}
function b129(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(80); //@line 65971
 return 0; //@line 65971
}
function b128(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(79); //@line 65968
 return 0; //@line 65968
}
function b127(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(78); //@line 65965
 return 0; //@line 65965
}
function b126(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(77); //@line 65962
 return 0; //@line 65962
}
function b125(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(76); //@line 65959
 return 0; //@line 65959
}
function b124(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 65956
 return 0; //@line 65956
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 10044
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 4; //@line 57057
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 4; //@line 55073
}
function __ZNKSt3__25ctypeIcE8do_widenEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 | 0; //@line 58101
}
function __ZNSt3__211char_traitsIcE12to_char_typeEi($0) {
 $0 = $0 | 0;
 return $0 & 255 | 0; //@line 18901
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 1; //@line 55876
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0 | 0;
 return $0 & 255 | 0; //@line 18882
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 0; //@line 57034
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 0; //@line 55050
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 127; //@line 44474
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 127; //@line 44468
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 127; //@line 44338
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 127; //@line 44332
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 15]() | 0; //@line 65418
}
function b122(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 nullFunc_iid(0); //@line 65953
 return 0; //@line 65953
}
function _strtold_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtold($0, $1));
}
function __ZNSt3__211char_traitsIwE6lengthEPKw($0) {
 $0 = $0 | 0;
 return _wcslen($0) | 0; //@line 42069
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0 | 0;
 return _strlen($0) | 0; //@line 19501
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 1; //@line 55849
}
function b176(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(127); //@line 61
 return 0; //@line 61
}
function b175(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(126); //@line 58
 return 0; //@line 58
}
function b174(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(125); //@line 55
 return 0; //@line 55
}
function b173(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(124); //@line 52
 return 0; //@line 52
}
function b172(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(123); //@line 49
 return 0; //@line 49
}
function b171(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(122); //@line 46
 return 0; //@line 46
}
function b170(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(121); //@line 43
 return 0; //@line 43
}
function b169(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(120); //@line 40
 return 0; //@line 40
}
function b168(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(119); //@line 37
 return 0; //@line 37
}
function b167(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(118); //@line 34
 return 0; //@line 34
}
function b166(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(117); //@line 31
 return 0; //@line 31
}
function b165(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(116); //@line 28
 return 0; //@line 28
}
function b164(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(115); //@line 25
 return 0; //@line 25
}
function b163(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(114); //@line 22
 return 0; //@line 22
}
function b162(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(113); //@line 19
 return 0; //@line 19
}
function b161(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(112); //@line 16
 return 0; //@line 16
}
function b160(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(111); //@line 13
 return 0; //@line 13
}
function b159(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(110); //@line 10
 return 0; //@line 10
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0 | 0;
 return 1; //@line 60751
}
function _strtof_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtof($0, $1));
}
function _strtod_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtod($0, $1));
}
function b640(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(63); //@line 1417
}
function b639(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(62); //@line 1414
}
function b638(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(61); //@line 1411
}
function b637(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(60); //@line 1408
}
function b636(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(59); //@line 1405
}
function b635(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(58); //@line 1402
}
function b634(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(57); //@line 1399
}
function b633(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(56); //@line 1396
}
function b632(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(55); //@line 1393
}
function b631(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(54); //@line 1390
}
function b630(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(53); //@line 1387
}
function b629(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(52); //@line 1384
}
function b628(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(51); //@line 1381
}
function b627(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(50); //@line 1378
}
function b626(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(49); //@line 1375
}
function b625(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(48); //@line 1372
}
function b624(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(47); //@line 1369
}
function b623(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(46); //@line 1366
}
function b622(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(45); //@line 1363
}
function b621(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(44); //@line 1360
}
function b620(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(43); //@line 1357
}
function b619(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(42); //@line 1354
}
function b618(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(41); //@line 1351
}
function b617(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(40); //@line 1348
}
function b158(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(109); //@line 7
 return 0; //@line 7
}
function b157(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(108); //@line 4
 return 0; //@line 4
}
function b156(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(107); //@line 1
 return 0; //@line 1
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0; //@line 44799
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0; //@line 44676
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0; //@line 44553
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0; //@line 44417
}
function b616(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 1342
}
function __ZNSt3__219__iostream_categoryD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 19441
 return;
}
function __ZNSt3__211char_traitsIwE12to_char_typeEj($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 19184
}
function __ZNSt3__211char_traitsIwE11to_int_typeEw($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 19153
}
function __ZNSt3__210__function6__baseIFvP6RunnerP13RunnerContextEED2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6ParserC2Ev($0) {
 $0 = $0 | 0;
 __ZN16FunctionAnalyzerC2Ev($0); //@line 26155
 return;
}
function _isxdigit_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _isxdigit($0) | 0; //@line 17722
}
function __ZNSt3__217bad_function_callD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 16957
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 13144; //@line 64818
 return;
}
function _isdigit_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _isdigit($0) | 0; //@line 17730
}
function __ZNSt8bad_castC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 13284; //@line 64785
 return;
}
function __ZNKSt3__219__iostream_category4nameEv($0) {
 $0 = $0 | 0;
 return 29487; //@line 19448
}
function __ZNSt18bad_variant_accessD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 63321
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 63](); //@line 65523
}
function b1(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(0); //@line 65590
 return 0.0;
}
function ___cxx_global_var_init() {
 __ZNSt3__28ios_base4InitC2Ev(0); //@line 20617
 return;
}
function __ZNKSt18bad_variant_access4whatEv($0) {
 $0 = $0 | 0;
 return 32309; //@line 63328
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_ii(255); //@line 65950
 return 0; //@line 65950
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_ii(254); //@line 65947
 return 0; //@line 65947
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_ii(253); //@line 65944
 return 0; //@line 65944
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_ii(252); //@line 65941
 return 0; //@line 65941
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_ii(251); //@line 65938
 return 0; //@line 65938
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_ii(250); //@line 65935
 return 0; //@line 65935
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_ii(249); //@line 65932
 return 0; //@line 65932
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_ii(248); //@line 65929
 return 0; //@line 65929
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_ii(247); //@line 65926
 return 0; //@line 65926
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_ii(246); //@line 65923
 return 0; //@line 65923
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_ii(245); //@line 65920
 return 0; //@line 65920
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_ii(244); //@line 65917
 return 0; //@line 65917
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_ii(243); //@line 65914
 return 0; //@line 65914
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_ii(242); //@line 65911
 return 0; //@line 65911
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_ii(241); //@line 65908
 return 0; //@line 65908
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_ii(240); //@line 65905
 return 0; //@line 65905
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_ii(239); //@line 65902
 return 0; //@line 65902
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_ii(238); //@line 65899
 return 0; //@line 65899
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_ii(237); //@line 65896
 return 0; //@line 65896
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_ii(236); //@line 65893
 return 0; //@line 65893
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_ii(235); //@line 65890
 return 0; //@line 65890
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_ii(234); //@line 65887
 return 0; //@line 65887
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_ii(233); //@line 65884
 return 0; //@line 65884
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_ii(232); //@line 65881
 return 0; //@line 65881
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_ii(231); //@line 65878
 return 0; //@line 65878
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_ii(230); //@line 65875
 return 0; //@line 65875
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_ii(229); //@line 65872
 return 0; //@line 65872
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_ii(228); //@line 65869
 return 0; //@line 65869
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_ii(227); //@line 65866
 return 0; //@line 65866
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_ii(226); //@line 65863
 return 0; //@line 65863
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_ii(225); //@line 65860
 return 0; //@line 65860
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_ii(224); //@line 65857
 return 0; //@line 65857
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_ii(223); //@line 65854
 return 0; //@line 65854
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_ii(222); //@line 65851
 return 0; //@line 65851
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_ii(221); //@line 65848
 return 0; //@line 65848
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_ii(220); //@line 65845
 return 0; //@line 65845
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_ii(219); //@line 65842
 return 0; //@line 65842
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_ii(218); //@line 65839
 return 0; //@line 65839
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_ii(217); //@line 65836
 return 0; //@line 65836
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_ii(216); //@line 65833
 return 0; //@line 65833
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_ii(215); //@line 65830
 return 0; //@line 65830
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_ii(214); //@line 65827
 return 0; //@line 65827
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_ii(213); //@line 65824
 return 0; //@line 65824
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_ii(212); //@line 65821
 return 0; //@line 65821
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_ii(211); //@line 65818
 return 0; //@line 65818
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_ii(210); //@line 65815
 return 0; //@line 65815
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_ii(209); //@line 65812
 return 0; //@line 65812
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_ii(208); //@line 65809
 return 0; //@line 65809
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_ii(207); //@line 65806
 return 0; //@line 65806
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_ii(206); //@line 65803
 return 0; //@line 65803
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_ii(205); //@line 65800
 return 0; //@line 65800
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_ii(204); //@line 65797
 return 0; //@line 65797
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_ii(203); //@line 65794
 return 0; //@line 65794
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_ii(202); //@line 65791
 return 0; //@line 65791
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_ii(201); //@line 65788
 return 0; //@line 65788
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_ii(200); //@line 65785
 return 0; //@line 65785
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_ii(199); //@line 65782
 return 0; //@line 65782
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_ii(198); //@line 65779
 return 0; //@line 65779
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_ii(197); //@line 65776
 return 0; //@line 65776
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_ii(196); //@line 65773
 return 0; //@line 65773
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_ii(195); //@line 65770
 return 0; //@line 65770
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_ii(194); //@line 65767
 return 0; //@line 65767
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_ii(193); //@line 65764
 return 0; //@line 65764
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_ii(192); //@line 65761
 return 0; //@line 65761
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_ii(191); //@line 65758
 return 0; //@line 65758
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_ii(190); //@line 65755
 return 0; //@line 65755
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_ii(189); //@line 65752
 return 0; //@line 65752
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_ii(188); //@line 65749
 return 0; //@line 65749
}
function b52(p0) {
 p0 = p0 | 0;
 nullFunc_ii(187); //@line 65746
 return 0; //@line 65746
}
function b51(p0) {
 p0 = p0 | 0;
 nullFunc_ii(186); //@line 65743
 return 0; //@line 65743
}
function b50(p0) {
 p0 = p0 | 0;
 nullFunc_ii(185); //@line 65740
 return 0; //@line 65740
}
function b49(p0) {
 p0 = p0 | 0;
 nullFunc_ii(184); //@line 65737
 return 0; //@line 65737
}
function b48(p0) {
 p0 = p0 | 0;
 nullFunc_ii(183); //@line 65734
 return 0; //@line 65734
}
function b47(p0) {
 p0 = p0 | 0;
 nullFunc_ii(182); //@line 65731
 return 0; //@line 65731
}
function b46(p0) {
 p0 = p0 | 0;
 nullFunc_ii(181); //@line 65728
 return 0; //@line 65728
}
function b45(p0) {
 p0 = p0 | 0;
 nullFunc_ii(180); //@line 65725
 return 0; //@line 65725
}
function b44(p0) {
 p0 = p0 | 0;
 nullFunc_ii(179); //@line 65722
 return 0; //@line 65722
}
function b43(p0) {
 p0 = p0 | 0;
 nullFunc_ii(178); //@line 65719
 return 0; //@line 65719
}
function b42(p0) {
 p0 = p0 | 0;
 nullFunc_ii(177); //@line 65716
 return 0; //@line 65716
}
function b41(p0) {
 p0 = p0 | 0;
 nullFunc_ii(176); //@line 65713
 return 0; //@line 65713
}
function b40(p0) {
 p0 = p0 | 0;
 nullFunc_ii(175); //@line 65710
 return 0; //@line 65710
}
function b39(p0) {
 p0 = p0 | 0;
 nullFunc_ii(174); //@line 65707
 return 0; //@line 65707
}
function b38(p0) {
 p0 = p0 | 0;
 nullFunc_ii(173); //@line 65704
 return 0; //@line 65704
}
function b37(p0) {
 p0 = p0 | 0;
 nullFunc_ii(172); //@line 65701
 return 0; //@line 65701
}
function b36(p0) {
 p0 = p0 | 0;
 nullFunc_ii(171); //@line 65698
 return 0; //@line 65698
}
function b35(p0) {
 p0 = p0 | 0;
 nullFunc_ii(170); //@line 65695
 return 0; //@line 65695
}
function b34(p0) {
 p0 = p0 | 0;
 nullFunc_ii(169); //@line 65692
 return 0; //@line 65692
}
function b33(p0) {
 p0 = p0 | 0;
 nullFunc_ii(168); //@line 65689
 return 0; //@line 65689
}
function b32(p0) {
 p0 = p0 | 0;
 nullFunc_ii(167); //@line 65686
 return 0; //@line 65686
}
function b31(p0) {
 p0 = p0 | 0;
 nullFunc_ii(166); //@line 65683
 return 0; //@line 65683
}
function b30(p0) {
 p0 = p0 | 0;
 nullFunc_ii(165); //@line 65680
 return 0; //@line 65680
}
function b29(p0) {
 p0 = p0 | 0;
 nullFunc_ii(164); //@line 65677
 return 0; //@line 65677
}
function b28(p0) {
 p0 = p0 | 0;
 nullFunc_ii(163); //@line 65674
 return 0; //@line 65674
}
function b27(p0) {
 p0 = p0 | 0;
 nullFunc_ii(162); //@line 65671
 return 0; //@line 65671
}
function b26(p0) {
 p0 = p0 | 0;
 nullFunc_ii(161); //@line 65668
 return 0; //@line 65668
}
function b25(p0) {
 p0 = p0 | 0;
 nullFunc_ii(160); //@line 65665
 return 0; //@line 65665
}
function b24(p0) {
 p0 = p0 | 0;
 nullFunc_ii(159); //@line 65662
 return 0; //@line 65662
}
function b23(p0) {
 p0 = p0 | 0;
 nullFunc_ii(158); //@line 65659
 return 0; //@line 65659
}
function b22(p0) {
 p0 = p0 | 0;
 nullFunc_ii(157); //@line 65656
 return 0; //@line 65656
}
function b21(p0) {
 p0 = p0 | 0;
 nullFunc_ii(156); //@line 65653
 return 0; //@line 65653
}
function b20(p0) {
 p0 = p0 | 0;
 nullFunc_ii(155); //@line 65650
 return 0; //@line 65650
}
function b19(p0) {
 p0 = p0 | 0;
 nullFunc_ii(154); //@line 65647
 return 0; //@line 65647
}
function b18(p0) {
 p0 = p0 | 0;
 nullFunc_ii(153); //@line 65644
 return 0; //@line 65644
}
function b17(p0) {
 p0 = p0 | 0;
 nullFunc_ii(152); //@line 65641
 return 0; //@line 65641
}
function b16(p0) {
 p0 = p0 | 0;
 nullFunc_ii(151); //@line 65638
 return 0; //@line 65638
}
function __ZNKSt3__28messagesIwE8do_closeEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZNKSt3__28messagesIcE8do_closeEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 7136
}
function b15(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 65626
 return 0; //@line 65626
}
function _strtold($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox($0, $1, 2));
}
function _strtof($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox($0, $1, 0));
}
function _strtod($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox($0, $1, 1));
}
function _catopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -1 | 0; //@line 17703
}
function b614(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(255); //@line 1339
}
function b613(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(254); //@line 1336
}
function b612(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(253); //@line 1333
}
function b611(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(252); //@line 1330
}
function b610(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(251); //@line 1327
}
function b609(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(250); //@line 1324
}
function b608(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(249); //@line 1321
}
function b607(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(248); //@line 1318
}
function b606(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(247); //@line 1315
}
function b605(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(246); //@line 1312
}
function b604(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(245); //@line 1309
}
function b603(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(244); //@line 1306
}
function b602(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(243); //@line 1303
}
function b601(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(242); //@line 1300
}
function b600(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(241); //@line 1297
}
function b599(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(240); //@line 1294
}
function b598(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(239); //@line 1291
}
function b597(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(238); //@line 1288
}
function b596(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(237); //@line 1285
}
function b595(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(236); //@line 1282
}
function b594(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(235); //@line 1279
}
function b593(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(234); //@line 1276
}
function b592(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(233); //@line 1273
}
function b591(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(232); //@line 1270
}
function b590(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(231); //@line 1267
}
function b589(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(230); //@line 1264
}
function b588(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(229); //@line 1261
}
function b587(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(228); //@line 1258
}
function b586(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(227); //@line 1255
}
function b585(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(226); //@line 1252
}
function b584(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(225); //@line 1249
}
function b583(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(224); //@line 1246
}
function b582(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(223); //@line 1243
}
function b581(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(222); //@line 1240
}
function b580(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(221); //@line 1237
}
function b579(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(220); //@line 1234
}
function b578(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(219); //@line 1231
}
function b577(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(218); //@line 1228
}
function b576(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(217); //@line 1225
}
function b575(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(216); //@line 1222
}
function b574(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(215); //@line 1219
}
function b573(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(214); //@line 1216
}
function b572(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(213); //@line 1213
}
function b571(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(212); //@line 1210
}
function b570(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(211); //@line 1207
}
function b569(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(210); //@line 1204
}
function b568(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(209); //@line 1201
}
function b567(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(208); //@line 1198
}
function b566(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(207); //@line 1195
}
function b565(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(206); //@line 1192
}
function b564(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(205); //@line 1189
}
function b563(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(204); //@line 1186
}
function b562(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(203); //@line 1183
}
function b561(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(202); //@line 1180
}
function b560(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(201); //@line 1177
}
function b559(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(200); //@line 1174
}
function b558(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(199); //@line 1171
}
function b557(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(198); //@line 1168
}
function b556(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(197); //@line 1165
}
function b555(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(196); //@line 1162
}
function b554(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(195); //@line 1159
}
function b553(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(194); //@line 1156
}
function b552(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(193); //@line 1153
}
function b551(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(192); //@line 1150
}
function b550(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(191); //@line 1147
}
function b549(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(190); //@line 1144
}
function b548(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(189); //@line 1141
}
function b547(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(188); //@line 1138
}
function b546(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(187); //@line 1135
}
function ___ofl_lock() {
 ___lock(34432); //@line 14005
 return 34440; //@line 14006
}
function __ZNSt3__210__function6__baseIFvP6RunnerEED2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b545(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 1132
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function __ZNKSt9exception4whatEv($0) {
 $0 = $0 | 0;
 return 32896; //@line 64163
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0 | 0;
 return 32868; //@line 64151
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function __ZNKSt8bad_cast4whatEv($0) {
 $0 = $0 | 0;
 return 33019; //@line 64299
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __GLOBAL__I_000101() {
 ___cxx_global_var_init(); //@line 20606
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 36
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_672() {
 return _pthread_self() | 0; //@line 17681
}
function ___pthread_self_627() {
 return _pthread_self() | 0; //@line 16128
}
function ___pthread_self_623() {
 return _pthread_self() | 0; //@line 17103
}
function ___pthread_self_619() {
 return _pthread_self() | 0; //@line 15480
}
function ___pthread_self_265() {
 return _pthread_self() | 0; //@line 14151
}
function _pthread_cond_broadcast(x) {
 x = x | 0;
 return 0; //@line 65362
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_644() {
 return _pthread_self() | 0; //@line 9960
}
function ___pthread_self_530() {
 return _pthread_self() | 0; //@line 9971
}
function __Znaj($0) {
 $0 = $0 | 0;
 return __Znwj($0) | 0; //@line 60652
}
function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 60665
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function b13() {
 nullFunc_i(15); //@line 65623
 return 0; //@line 65623
}
function b12() {
 nullFunc_i(14); //@line 65620
 return 0; //@line 65620
}
function b11() {
 nullFunc_i(13); //@line 65617
 return 0; //@line 65617
}
function b10() {
 nullFunc_i(12); //@line 65614
 return 0; //@line 65614
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 65370
}
function b9() {
 nullFunc_i(11); //@line 65611
 return 0; //@line 65611
}
function ___pthread_self() {
 return _pthread_self() | 0; //@line 13903
}
function ___cxa_end_catch__wrapper() {
 ___cxa_end_catch(); //@line 328
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 60658
 return;
}
function b8() {
 nullFunc_i(0); //@line 65605
 return 0; //@line 65605
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 65366
}
function _dummy_198($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 6942
}
function _dlerror__wrapper() {
 return _dlerror() | 0; //@line 65608
}
function ___ofl_unlock() {
 ___unlock(34432); //@line 14011
 return;
}
function __ZNSt3__214error_categoryD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_rethrow__wrapper() {
 ___cxa_rethrow(); //@line 325
}
function b543(p0) {
 p0 = p0 | 0;
 nullFunc_vi(511); //@line 1129
}
function b542(p0) {
 p0 = p0 | 0;
 nullFunc_vi(510); //@line 1126
}
function b541(p0) {
 p0 = p0 | 0;
 nullFunc_vi(509); //@line 1123
}
function b540(p0) {
 p0 = p0 | 0;
 nullFunc_vi(508); //@line 1120
}
function b539(p0) {
 p0 = p0 | 0;
 nullFunc_vi(507); //@line 1117
}
function b538(p0) {
 p0 = p0 | 0;
 nullFunc_vi(506); //@line 1114
}
function b537(p0) {
 p0 = p0 | 0;
 nullFunc_vi(505); //@line 1111
}
function b536(p0) {
 p0 = p0 | 0;
 nullFunc_vi(504); //@line 1108
}
function b535(p0) {
 p0 = p0 | 0;
 nullFunc_vi(503); //@line 1105
}
function b534(p0) {
 p0 = p0 | 0;
 nullFunc_vi(502); //@line 1102
}
function b533(p0) {
 p0 = p0 | 0;
 nullFunc_vi(501); //@line 1099
}
function b532(p0) {
 p0 = p0 | 0;
 nullFunc_vi(500); //@line 1096
}
function b531(p0) {
 p0 = p0 | 0;
 nullFunc_vi(499); //@line 1093
}
function b530(p0) {
 p0 = p0 | 0;
 nullFunc_vi(498); //@line 1090
}
function b529(p0) {
 p0 = p0 | 0;
 nullFunc_vi(497); //@line 1087
}
function b528(p0) {
 p0 = p0 | 0;
 nullFunc_vi(496); //@line 1084
}
function b527(p0) {
 p0 = p0 | 0;
 nullFunc_vi(495); //@line 1081
}
function b526(p0) {
 p0 = p0 | 0;
 nullFunc_vi(494); //@line 1078
}
function b525(p0) {
 p0 = p0 | 0;
 nullFunc_vi(493); //@line 1075
}
function b524(p0) {
 p0 = p0 | 0;
 nullFunc_vi(492); //@line 1072
}
function b523(p0) {
 p0 = p0 | 0;
 nullFunc_vi(491); //@line 1069
}
function b522(p0) {
 p0 = p0 | 0;
 nullFunc_vi(490); //@line 1066
}
function b521(p0) {
 p0 = p0 | 0;
 nullFunc_vi(489); //@line 1063
}
function b520(p0) {
 p0 = p0 | 0;
 nullFunc_vi(488); //@line 1060
}
function b519(p0) {
 p0 = p0 | 0;
 nullFunc_vi(487); //@line 1057
}
function b518(p0) {
 p0 = p0 | 0;
 nullFunc_vi(486); //@line 1054
}
function b517(p0) {
 p0 = p0 | 0;
 nullFunc_vi(485); //@line 1051
}
function b516(p0) {
 p0 = p0 | 0;
 nullFunc_vi(484); //@line 1048
}
function b515(p0) {
 p0 = p0 | 0;
 nullFunc_vi(483); //@line 1045
}
function b514(p0) {
 p0 = p0 | 0;
 nullFunc_vi(482); //@line 1042
}
function b513(p0) {
 p0 = p0 | 0;
 nullFunc_vi(481); //@line 1039
}
function b512(p0) {
 p0 = p0 | 0;
 nullFunc_vi(480); //@line 1036
}
function b511(p0) {
 p0 = p0 | 0;
 nullFunc_vi(479); //@line 1033
}
function b510(p0) {
 p0 = p0 | 0;
 nullFunc_vi(478); //@line 1030
}
function b509(p0) {
 p0 = p0 | 0;
 nullFunc_vi(477); //@line 1027
}
function b508(p0) {
 p0 = p0 | 0;
 nullFunc_vi(476); //@line 1024
}
function b507(p0) {
 p0 = p0 | 0;
 nullFunc_vi(475); //@line 1021
}
function b506(p0) {
 p0 = p0 | 0;
 nullFunc_vi(474); //@line 1018
}
function b505(p0) {
 p0 = p0 | 0;
 nullFunc_vi(473); //@line 1015
}
function b504(p0) {
 p0 = p0 | 0;
 nullFunc_vi(472); //@line 1012
}
function b503(p0) {
 p0 = p0 | 0;
 nullFunc_vi(471); //@line 1009
}
function b502(p0) {
 p0 = p0 | 0;
 nullFunc_vi(470); //@line 1006
}
function b501(p0) {
 p0 = p0 | 0;
 nullFunc_vi(469); //@line 1003
}
function b500(p0) {
 p0 = p0 | 0;
 nullFunc_vi(468); //@line 1000
}
function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}
function b499(p0) {
 p0 = p0 | 0;
 nullFunc_vi(467); //@line 997
}
function b498(p0) {
 p0 = p0 | 0;
 nullFunc_vi(466); //@line 994
}
function b497(p0) {
 p0 = p0 | 0;
 nullFunc_vi(465); //@line 991
}
function b496(p0) {
 p0 = p0 | 0;
 nullFunc_vi(464); //@line 988
}
function b495(p0) {
 p0 = p0 | 0;
 nullFunc_vi(463); //@line 985
}
function b494(p0) {
 p0 = p0 | 0;
 nullFunc_vi(462); //@line 982
}
function b493(p0) {
 p0 = p0 | 0;
 nullFunc_vi(461); //@line 979
}
function b492(p0) {
 p0 = p0 | 0;
 nullFunc_vi(460); //@line 976
}
function b491(p0) {
 p0 = p0 | 0;
 nullFunc_vi(459); //@line 973
}
function b490(p0) {
 p0 = p0 | 0;
 nullFunc_vi(458); //@line 970
}
function b489(p0) {
 p0 = p0 | 0;
 nullFunc_vi(457); //@line 967
}
function b488(p0) {
 p0 = p0 | 0;
 nullFunc_vi(456); //@line 964
}
function b487(p0) {
 p0 = p0 | 0;
 nullFunc_vi(455); //@line 961
}
function b486(p0) {
 p0 = p0 | 0;
 nullFunc_vi(454); //@line 958
}
function b485(p0) {
 p0 = p0 | 0;
 nullFunc_vi(453); //@line 955
}
function b484(p0) {
 p0 = p0 | 0;
 nullFunc_vi(452); //@line 952
}
function b483(p0) {
 p0 = p0 | 0;
 nullFunc_vi(451); //@line 949
}
function b482(p0) {
 p0 = p0 | 0;
 nullFunc_vi(450); //@line 946
}
function b481(p0) {
 p0 = p0 | 0;
 nullFunc_vi(449); //@line 943
}
function b480(p0) {
 p0 = p0 | 0;
 nullFunc_vi(448); //@line 940
}
function b479(p0) {
 p0 = p0 | 0;
 nullFunc_vi(447); //@line 937
}
function b478(p0) {
 p0 = p0 | 0;
 nullFunc_vi(446); //@line 934
}
function b477(p0) {
 p0 = p0 | 0;
 nullFunc_vi(445); //@line 931
}
function b476(p0) {
 p0 = p0 | 0;
 nullFunc_vi(444); //@line 928
}
function b475(p0) {
 p0 = p0 | 0;
 nullFunc_vi(443); //@line 925
}
function b474(p0) {
 p0 = p0 | 0;
 nullFunc_vi(442); //@line 922
}
function b473(p0) {
 p0 = p0 | 0;
 nullFunc_vi(441); //@line 919
}
function b472(p0) {
 p0 = p0 | 0;
 nullFunc_vi(440); //@line 916
}
function b471(p0) {
 p0 = p0 | 0;
 nullFunc_vi(439); //@line 913
}
function b470(p0) {
 p0 = p0 | 0;
 nullFunc_vi(438); //@line 910
}
function b469(p0) {
 p0 = p0 | 0;
 nullFunc_vi(437); //@line 907
}
function b468(p0) {
 p0 = p0 | 0;
 nullFunc_vi(436); //@line 904
}
function b467(p0) {
 p0 = p0 | 0;
 nullFunc_vi(435); //@line 901
}
function b466(p0) {
 p0 = p0 | 0;
 nullFunc_vi(434); //@line 898
}
function b465(p0) {
 p0 = p0 | 0;
 nullFunc_vi(433); //@line 895
}
function b464(p0) {
 p0 = p0 | 0;
 nullFunc_vi(432); //@line 892
}
function b463(p0) {
 p0 = p0 | 0;
 nullFunc_vi(431); //@line 889
}
function b462(p0) {
 p0 = p0 | 0;
 nullFunc_vi(430); //@line 886
}
function b461(p0) {
 p0 = p0 | 0;
 nullFunc_vi(429); //@line 883
}
function b460(p0) {
 p0 = p0 | 0;
 nullFunc_vi(428); //@line 880
}
function b459(p0) {
 p0 = p0 | 0;
 nullFunc_vi(427); //@line 877
}
function b458(p0) {
 p0 = p0 | 0;
 nullFunc_vi(426); //@line 874
}
function b457(p0) {
 p0 = p0 | 0;
 nullFunc_vi(425); //@line 871
}
function b456(p0) {
 p0 = p0 | 0;
 nullFunc_vi(424); //@line 868
}
function b455(p0) {
 p0 = p0 | 0;
 nullFunc_vi(423); //@line 865
}
function b454(p0) {
 p0 = p0 | 0;
 nullFunc_vi(422); //@line 862
}
function b453(p0) {
 p0 = p0 | 0;
 nullFunc_vi(421); //@line 859
}
function b452(p0) {
 p0 = p0 | 0;
 nullFunc_vi(420); //@line 856
}
function b451(p0) {
 p0 = p0 | 0;
 nullFunc_vi(419); //@line 853
}
function b450(p0) {
 p0 = p0 | 0;
 nullFunc_vi(418); //@line 850
}
function b449(p0) {
 p0 = p0 | 0;
 nullFunc_vi(417); //@line 847
}
function b448(p0) {
 p0 = p0 | 0;
 nullFunc_vi(416); //@line 844
}
function b447(p0) {
 p0 = p0 | 0;
 nullFunc_vi(415); //@line 841
}
function b446(p0) {
 p0 = p0 | 0;
 nullFunc_vi(414); //@line 838
}
function b445(p0) {
 p0 = p0 | 0;
 nullFunc_vi(413); //@line 835
}
function b444(p0) {
 p0 = p0 | 0;
 nullFunc_vi(412); //@line 832
}
function b443(p0) {
 p0 = p0 | 0;
 nullFunc_vi(411); //@line 829
}
function b442(p0) {
 p0 = p0 | 0;
 nullFunc_vi(410); //@line 826
}
function b441(p0) {
 p0 = p0 | 0;
 nullFunc_vi(409); //@line 823
}
function b440(p0) {
 p0 = p0 | 0;
 nullFunc_vi(408); //@line 820
}
function b439(p0) {
 p0 = p0 | 0;
 nullFunc_vi(407); //@line 817
}
function b438(p0) {
 p0 = p0 | 0;
 nullFunc_vi(406); //@line 814
}
function b437(p0) {
 p0 = p0 | 0;
 nullFunc_vi(405); //@line 811
}
function b436(p0) {
 p0 = p0 | 0;
 nullFunc_vi(404); //@line 808
}
function b435(p0) {
 p0 = p0 | 0;
 nullFunc_vi(403); //@line 805
}
function b434(p0) {
 p0 = p0 | 0;
 nullFunc_vi(402); //@line 802
}
function b433(p0) {
 p0 = p0 | 0;
 nullFunc_vi(401); //@line 799
}
function b432(p0) {
 p0 = p0 | 0;
 nullFunc_vi(400); //@line 796
}
function b431(p0) {
 p0 = p0 | 0;
 nullFunc_vi(399); //@line 793
}
function b430(p0) {
 p0 = p0 | 0;
 nullFunc_vi(398); //@line 790
}
function b429(p0) {
 p0 = p0 | 0;
 nullFunc_vi(397); //@line 787
}
function b428(p0) {
 p0 = p0 | 0;
 nullFunc_vi(396); //@line 784
}
function b427(p0) {
 p0 = p0 | 0;
 nullFunc_vi(395); //@line 781
}
function b426(p0) {
 p0 = p0 | 0;
 nullFunc_vi(394); //@line 778
}
function b425(p0) {
 p0 = p0 | 0;
 nullFunc_vi(393); //@line 775
}
function b424(p0) {
 p0 = p0 | 0;
 nullFunc_vi(392); //@line 772
}
function b423(p0) {
 p0 = p0 | 0;
 nullFunc_vi(391); //@line 769
}
function b422(p0) {
 p0 = p0 | 0;
 nullFunc_vi(390); //@line 766
}
function b421(p0) {
 p0 = p0 | 0;
 nullFunc_vi(389); //@line 763
}
function b420(p0) {
 p0 = p0 | 0;
 nullFunc_vi(388); //@line 760
}
function b419(p0) {
 p0 = p0 | 0;
 nullFunc_vi(387); //@line 757
}
function b418(p0) {
 p0 = p0 | 0;
 nullFunc_vi(386); //@line 754
}
function b417(p0) {
 p0 = p0 | 0;
 nullFunc_vi(385); //@line 751
}
function b416(p0) {
 p0 = p0 | 0;
 nullFunc_vi(384); //@line 748
}
function b415(p0) {
 p0 = p0 | 0;
 nullFunc_vi(383); //@line 745
}
function b414(p0) {
 p0 = p0 | 0;
 nullFunc_vi(382); //@line 742
}
function b413(p0) {
 p0 = p0 | 0;
 nullFunc_vi(381); //@line 739
}
function b412(p0) {
 p0 = p0 | 0;
 nullFunc_vi(380); //@line 736
}
function b411(p0) {
 p0 = p0 | 0;
 nullFunc_vi(379); //@line 733
}
function b410(p0) {
 p0 = p0 | 0;
 nullFunc_vi(378); //@line 730
}
function b409(p0) {
 p0 = p0 | 0;
 nullFunc_vi(377); //@line 727
}
function b408(p0) {
 p0 = p0 | 0;
 nullFunc_vi(376); //@line 724
}
function b407(p0) {
 p0 = p0 | 0;
 nullFunc_vi(375); //@line 721
}
function b406(p0) {
 p0 = p0 | 0;
 nullFunc_vi(374); //@line 718
}
function b405(p0) {
 p0 = p0 | 0;
 nullFunc_vi(373); //@line 715
}
function b404(p0) {
 p0 = p0 | 0;
 nullFunc_vi(372); //@line 712
}
function b403(p0) {
 p0 = p0 | 0;
 nullFunc_vi(371); //@line 709
}
function b402(p0) {
 p0 = p0 | 0;
 nullFunc_vi(370); //@line 706
}
function b401(p0) {
 p0 = p0 | 0;
 nullFunc_vi(369); //@line 703
}
function b400(p0) {
 p0 = p0 | 0;
 nullFunc_vi(368); //@line 700
}
function b399(p0) {
 p0 = p0 | 0;
 nullFunc_vi(367); //@line 697
}
function b398(p0) {
 p0 = p0 | 0;
 nullFunc_vi(366); //@line 694
}
function b397(p0) {
 p0 = p0 | 0;
 nullFunc_vi(365); //@line 691
}
function b396(p0) {
 p0 = p0 | 0;
 nullFunc_vi(364); //@line 688
}
function b395(p0) {
 p0 = p0 | 0;
 nullFunc_vi(363); //@line 685
}
function b394(p0) {
 p0 = p0 | 0;
 nullFunc_vi(362); //@line 682
}
function b393(p0) {
 p0 = p0 | 0;
 nullFunc_vi(361); //@line 679
}
function b392(p0) {
 p0 = p0 | 0;
 nullFunc_vi(360); //@line 676
}
function b391(p0) {
 p0 = p0 | 0;
 nullFunc_vi(359); //@line 673
}
function b390(p0) {
 p0 = p0 | 0;
 nullFunc_vi(358); //@line 670
}
function b389(p0) {
 p0 = p0 | 0;
 nullFunc_vi(357); //@line 667
}
function b388(p0) {
 p0 = p0 | 0;
 nullFunc_vi(356); //@line 664
}
function b387(p0) {
 p0 = p0 | 0;
 nullFunc_vi(355); //@line 661
}
function b386(p0) {
 p0 = p0 | 0;
 nullFunc_vi(354); //@line 658
}
function b385(p0) {
 p0 = p0 | 0;
 nullFunc_vi(353); //@line 655
}
function b384(p0) {
 p0 = p0 | 0;
 nullFunc_vi(352); //@line 652
}
function b383(p0) {
 p0 = p0 | 0;
 nullFunc_vi(351); //@line 649
}
function b382(p0) {
 p0 = p0 | 0;
 nullFunc_vi(350); //@line 646
}
function b381(p0) {
 p0 = p0 | 0;
 nullFunc_vi(349); //@line 643
}
function b380(p0) {
 p0 = p0 | 0;
 nullFunc_vi(348); //@line 640
}
function b379(p0) {
 p0 = p0 | 0;
 nullFunc_vi(347); //@line 637
}
function b378(p0) {
 p0 = p0 | 0;
 nullFunc_vi(346); //@line 634
}
function b377(p0) {
 p0 = p0 | 0;
 nullFunc_vi(345); //@line 631
}
function b376(p0) {
 p0 = p0 | 0;
 nullFunc_vi(344); //@line 628
}
function b375(p0) {
 p0 = p0 | 0;
 nullFunc_vi(343); //@line 625
}
function b374(p0) {
 p0 = p0 | 0;
 nullFunc_vi(342); //@line 622
}
function b373(p0) {
 p0 = p0 | 0;
 nullFunc_vi(341); //@line 619
}
function b372(p0) {
 p0 = p0 | 0;
 nullFunc_vi(340); //@line 616
}
function b371(p0) {
 p0 = p0 | 0;
 nullFunc_vi(339); //@line 613
}
function b370(p0) {
 p0 = p0 | 0;
 nullFunc_vi(338); //@line 610
}
function b369(p0) {
 p0 = p0 | 0;
 nullFunc_vi(337); //@line 607
}
function b368(p0) {
 p0 = p0 | 0;
 nullFunc_vi(336); //@line 604
}
function b367(p0) {
 p0 = p0 | 0;
 nullFunc_vi(335); //@line 601
}
function b366(p0) {
 p0 = p0 | 0;
 nullFunc_vi(334); //@line 598
}
function b365(p0) {
 p0 = p0 | 0;
 nullFunc_vi(333); //@line 595
}
function b364(p0) {
 p0 = p0 | 0;
 nullFunc_vi(332); //@line 592
}
function b363(p0) {
 p0 = p0 | 0;
 nullFunc_vi(331); //@line 589
}
function b362(p0) {
 p0 = p0 | 0;
 nullFunc_vi(330); //@line 586
}
function b361(p0) {
 p0 = p0 | 0;
 nullFunc_vi(329); //@line 583
}
function b360(p0) {
 p0 = p0 | 0;
 nullFunc_vi(328); //@line 580
}
function b359(p0) {
 p0 = p0 | 0;
 nullFunc_vi(327); //@line 577
}
function b358(p0) {
 p0 = p0 | 0;
 nullFunc_vi(326); //@line 574
}
function b357(p0) {
 p0 = p0 | 0;
 nullFunc_vi(325); //@line 571
}
function b356(p0) {
 p0 = p0 | 0;
 nullFunc_vi(324); //@line 568
}
function b355(p0) {
 p0 = p0 | 0;
 nullFunc_vi(323); //@line 565
}
function b354(p0) {
 p0 = p0 | 0;
 nullFunc_vi(322); //@line 562
}
function b353(p0) {
 p0 = p0 | 0;
 nullFunc_vi(321); //@line 559
}
function b352(p0) {
 p0 = p0 | 0;
 nullFunc_vi(320); //@line 556
}
function b351(p0) {
 p0 = p0 | 0;
 nullFunc_vi(319); //@line 553
}
function b350(p0) {
 p0 = p0 | 0;
 nullFunc_vi(318); //@line 550
}
function b349(p0) {
 p0 = p0 | 0;
 nullFunc_vi(317); //@line 547
}
function b348(p0) {
 p0 = p0 | 0;
 nullFunc_vi(316); //@line 544
}
function b347(p0) {
 p0 = p0 | 0;
 nullFunc_vi(315); //@line 541
}
function b346(p0) {
 p0 = p0 | 0;
 nullFunc_vi(314); //@line 538
}
function b345(p0) {
 p0 = p0 | 0;
 nullFunc_vi(313); //@line 535
}
function b344(p0) {
 p0 = p0 | 0;
 nullFunc_vi(312); //@line 532
}
function b343(p0) {
 p0 = p0 | 0;
 nullFunc_vi(311); //@line 529
}
function b342(p0) {
 p0 = p0 | 0;
 nullFunc_vi(310); //@line 526
}
function b341(p0) {
 p0 = p0 | 0;
 nullFunc_vi(309); //@line 523
}
function b340(p0) {
 p0 = p0 | 0;
 nullFunc_vi(308); //@line 520
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(307); //@line 517
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(306); //@line 514
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(305); //@line 511
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(304); //@line 508
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(303); //@line 505
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(302); //@line 502
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(301); //@line 499
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(300); //@line 496
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(299); //@line 493
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(298); //@line 490
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(297); //@line 487
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(296); //@line 484
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(295); //@line 481
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(294); //@line 478
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(293); //@line 475
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(292); //@line 472
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(291); //@line 469
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(290); //@line 466
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(289); //@line 463
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(288); //@line 460
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(287); //@line 457
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(286); //@line 454
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(285); //@line 451
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(284); //@line 448
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(283); //@line 445
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(282); //@line 442
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(281); //@line 439
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(280); //@line 436
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(279); //@line 433
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(278); //@line 430
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(277); //@line 427
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(276); //@line 424
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(275); //@line 421
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(274); //@line 418
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(273); //@line 415
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 8185
}
function _catclose($0) {
 $0 = $0 | 0;
 return 0; //@line 17687
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 412
}
function ___ctype_toupper_loc() {
 return 6012; //@line 13881
}
function ___ctype_tolower_loc() {
 return 7552; //@line 13886
}
function ___errno_location() {
 return 34340; //@line 6936
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 39
}
function __ZNSt8bad_castD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt3__211char_traitsIwE3eofEv() {
 return -1;
}
function __ZNSt3__211char_traitsIcE3eofEv() {
 return -1;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function ___ctype_b_loc() {
 return 6008; //@line 13876
}
function _pthread_self() {
 return 5724; //@line 9965
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 return;
}
function b302() {
 nullFunc_v(63); //@line 409
}
function b301() {
 nullFunc_v(62); //@line 406
}
function b300() {
 nullFunc_v(61); //@line 403
}
function b299() {
 nullFunc_v(60); //@line 400
}
function b298() {
 nullFunc_v(59); //@line 397
}
function b297() {
 nullFunc_v(58); //@line 394
}
function b296() {
 nullFunc_v(57); //@line 391
}
function b295() {
 nullFunc_v(56); //@line 388
}
function b294() {
 nullFunc_v(55); //@line 385
}
function b293() {
 nullFunc_v(54); //@line 382
}
function b292() {
 nullFunc_v(53); //@line 379
}
function b291() {
 nullFunc_v(52); //@line 376
}
function b290() {
 nullFunc_v(51); //@line 373
}
function b289() {
 nullFunc_v(50); //@line 370
}
function b288() {
 nullFunc_v(49); //@line 367
}
function b287() {
 nullFunc_v(48); //@line 364
}
function b286() {
 nullFunc_v(47); //@line 361
}
function b285() {
 nullFunc_v(46); //@line 358
}
function b284() {
 nullFunc_v(45); //@line 355
}
function b283() {
 nullFunc_v(44); //@line 352
}
function b282() {
 nullFunc_v(43); //@line 349
}
function b281() {
 nullFunc_v(42); //@line 346
}
function b280() {
 nullFunc_v(41); //@line 343
}
function b279() {
 nullFunc_v(40); //@line 340
}
function b278() {
 nullFunc_v(39); //@line 337
}
function b277() {
 nullFunc_v(38); //@line 334
}
function b276() {
 nullFunc_v(37); //@line 331
}
function b275() {
 nullFunc_v(0); //@line 322
}
function _dummy_280() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_dii = [b1,__ZNSt3__25stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPj];
var FUNCTION_TABLE_diii = [b3,__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__212_GLOBAL__N_18as_floatIeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pj,b4,b5,b6];
var FUNCTION_TABLE_i = [b8,_dlerror__wrapper,__ZNSt3__26__clocEv,___ctype_get_mb_cur_max,___ctype_tolower_loc,___ctype_toupper_loc,___ctype_b_loc,__ZNSt3__26locale5__imp12make_classicEv,__ZNSt3__26locale5__imp11make_globalEv,__ZNSt3__26locale8__globalEv,___cxa_get_globals_fast,b9,b10,b11,b12,b13];
var FUNCTION_TABLE_ii = [b15,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNKSt9exception4whatEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv
,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv
,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEv,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE11target_typeEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv,___stdio_close,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNKSt3__219__iostream_category4nameEv,__ZNKSt13runtime_error4whatEv,__ZNSt3__211__stdoutbufIwE4syncEv
,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv
,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt18bad_variant_access4whatEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv,__Znwj,__ZN6Runner15getCurrentStackEv,__ZN5Stack5isIntE13CharmFunction,__ZN5Stack7isFloatE13CharmFunction,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv,___uselocale,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43
,b44,b45,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73
,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103
,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120];
var FUNCTION_TABLE_iid = [b122,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEe];
var FUNCTION_TABLE_iii = [b124,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info
,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE6targetERKSt9type_info,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,__ZN5Stack13isNameEqualToE13CharmFunction,__ZN6Runner14doesStackExistE13CharmFunction,__ZeqRK13CharmFunctionS1_
,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEERKT_,__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_,__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSD_,__ZNKSt3__26locale9use_facetERNS0_2idE,__ZNKSt3__26locale9has_facetERNS0_2idE,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc,__ZN16FunctionAnalyzer11isInlinableE13CharmFunction,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc,__ZN6Parser17recognizeFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Parser11tokenToTypeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN16FunctionAnalyzer19isTailCallRecursiveE13CharmFunction,__ZN6Parser24isLineFunctionDefinitionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Parser19isLineTypeSignatureENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,_isxdigit_l,_isdigit_l,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137
,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167
,b168,b169,b170,b171,b172,b173,b174,b175,b176];
var FUNCTION_TABLE_iiii = [b178,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,___stdio_read,___stdio_seek,___stdout_write,___stdio_write,_sn_write,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi,__ZNSt3__211__stdoutbufIwE6xsputnEPKwi,__ZNSt3__211__stdoutbufIcE6xsputnEPKci,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv
,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,__ZNSt3__27getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_,__ZN16FunctionAnalyzer8doInlineERNSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEES2_,__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_,__ZN16FunctionAnalyzer13_isInlineableENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE13CharmFunction,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj,__ZN6Parser12advanceParseERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_,__ZNSt3__25stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji,_do_read_230,_wmemcpy,___newlocale,_vasprintf,_wmemset,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj,_wcrtomb,_mbtowc,_mbrlen,_wmemmove,b179,b180,b181,b182,b183,b184,b185,b186
,b187,b188,b189,b190,b191];
var FUNCTION_TABLE_iiiii = [b193,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueES8_E4typeENS6_IPKS1_EESA_SA_,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj,__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z,__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz,_mbsrtowcs,_catgets,_mbrtowc,__ZNSt3__212_GLOBAL__N_110as_integerIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pji,b194,b195,b196,b197,b198,b199,b200,b201,b202
,b203,b204,b205];
var FUNCTION_TABLE_iiiiid = [b207,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b208,b209,b210];
var FUNCTION_TABLE_iiiiii = [b212,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj,_wcsnrtombs,_mbsnrtowcs,b213,b214,b215,b216,b217
,b218,b219,b220];
var FUNCTION_TABLE_iiiiiid = [b222,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b223];
var FUNCTION_TABLE_iiiiiii = [b225,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243
,b244,b245,b246,b247,b248];
var FUNCTION_TABLE_iiiiiiii = [b250,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b251,b252,b253,b254,b255,b256,b257];
var FUNCTION_TABLE_iiiiiiiii = [b259,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b260,b261,b262,b263,b264];
var FUNCTION_TABLE_iiiiiiiiiii = [b266,__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_,__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw,b267];
var FUNCTION_TABLE_iiiiiiiiiiii = [b269,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b270];
var FUNCTION_TABLE_iiiiiiiiiiiii = [b272,__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_,__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw,b273];
var FUNCTION_TABLE_v = [b275,__ZL25default_terminate_handlerv,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,__ZSt17__throw_bad_allocv,__ZNSt3__2L10init_weeksEv,__ZNSt3__2L11init_monthsEv,__ZNSt3__2L10init_am_pmEv,__ZNSt3__2L11init_wweeksEv,__ZNSt3__2L12init_wmonthsEv,__ZNSt3__2L11init_wam_pmEv,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_
,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297
,b298,b299,b300,b301,b302];
var FUNCTION_TABLE_vi = [b304,__ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt9exceptionD2Ev,__ZNSt3__217bad_function_callD0Ev,__ZNSt3__210__function6__baseIFvP6RunnerEED2Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__baseIFvP6RunnerP13RunnerContextEED2Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv
,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv
,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv
,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEED0Ev,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7destroyEv,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE18destroy_deallocateEv
,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev
,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__214error_categoryD2Ev,__ZNSt3__219__iostream_categoryD0Ev,__ZNSt3__28ios_base7failureD2Ev,__ZNSt3__28ios_base7failureD0Ev,__ZNSt3__211__stdoutbufIwED2Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED2Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED2Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED2Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev
,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev
,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILj32EED0Ev,__ZNSt3__217__widen_from_utf8ILj32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZNSt3__212system_errorD2Ev,__ZNSt3__212system_errorD0Ev,__ZNSt18bad_variant_accessD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev
,__ZNSt9bad_allocD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt16invalid_argumentD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt14overflow_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN6ParserC2Ev,__ZN6RunnerC2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev,__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv,__ZN5Stack5zeroFEv,__ZN19PredefinedFunctionsC2Ev,__ZN3FFIC2Ev,__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv,__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE19__add_back_capacityEv,__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE8pop_backEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev,__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv,__ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,_freelocale,__ZNSt3__212__do_nothingEPv,__ZNSt3__221__throw_runtime_errorEPKc
,_free,__ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330
,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359,b360
,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373,b374,b375,b376,b377,b378,b379,b380,b381,b382,b383,b384,b385,b386,b387,b388,b389,b390
,b391,b392,b393,b394,b395,b396,b397,b398,b399,b400,b401,b402,b403,b404,b405,b406,b407,b408,b409,b410,b411,b412,b413,b414,b415,b416,b417,b418,b419,b420
,b421,b422,b423,b424,b425,b426,b427,b428,b429,b430,b431,b432,b433,b434,b435,b436,b437,b438,b439,b440,b441,b442,b443,b444,b445,b446,b447,b448,b449,b450
,b451,b452,b453,b454,b455,b456,b457,b458,b459,b460,b461,b462,b463,b464,b465,b466,b467,b468,b469,b470,b471,b472,b473,b474,b475,b476,b477,b478,b479,b480
,b481,b482,b483,b484,b485,b486,b487,b488,b489,b490,b491,b492,b493,b494,b495,b496,b497,b498,b499,b500,b501,b502,b503,b504,b505,b506,b507,b508,b509,b510
,b511,b512,b513,b514,b515,b516,b517,b518,b519,b520,b521,b522,b523,b524,b525,b526,b527,b528,b529,b530,b531,b532,b533,b534,b535,b536,b537,b538,b539,b540
,b541,b542,b543];
var FUNCTION_TABLE_vii = [b545,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEJLj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESL_SO_,__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEJLj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESL_SO_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__0NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__1NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__2NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__3NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__4NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__6NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__7NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__8NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__9NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__10NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__11NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__12NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_
,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__13NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__14NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__15NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__16NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__17NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__18NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__20NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEE7__cloneEPNS0_6__baseISA_EE,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__23NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__24NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__25NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__26NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__27NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__28NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE
,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__29NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__30NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__31NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__32NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__33NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__34NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNKSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEE7__cloneEPNS0_6__baseIS8_EE,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__35NS_9allocatorIS3_EEFvP6RunnerEEclEOS7_,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv
,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEi,__ZNKSt3__28messagesIwE8do_closeEi,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,__ZNSt3__28ios_base4initEPv,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,__ZNSt3__28ios_base5clearEj,__ZN22CInterpretationCapsule3runEPc,__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18FunctionDefinitionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEEC2ERKS4_
,__ZNSt11logic_errorC2EPKc,__ZN13CharmFunctionC2ERKS_,__ZNSt3__26vectorI5StackNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_,__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEEC2ERKS4_,__ZNSt3__214__split_bufferIP13CharmFunctionRNS_9allocatorIS2_EEE9push_backEOS2_,__ZNSt3__214__split_bufferIP13CharmFunctionRNS_9allocatorIS2_EEE10push_frontERKS2_,__ZNSt13runtime_errorC2EPKc,__ZNSt3__26vectorI9ReferenceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_,__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN5Stack4pushE13CharmFunction,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE15BuiltinFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj,__ZN5Stack3popEv,__ZNKSt3__28ios_base6getlocEv,__ZN6Runner18switchCurrentStackE13CharmFunction,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_,__Z21charmFunctionToString13CharmFunction,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZN16FunctionAnalyzer22addToInlineDefinitionsE13CharmFunction,__ZN6Runner21addFunctionDefinitionE18FunctionDefinition,__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE18CharmTypeSignatureEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj,__ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEEC2ERKS4_,__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE13CharmFunctionEENS_22__unordered_map_hasherIS7_S9_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S9_NS_8equal_toIS7_EELb1EEENS5_IS9_EEE6rehashEj,__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFvP6RunnerEEENS_22__unordered_map_hasherIS7_SC_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SC_NS_8equal_toIS7_EELb1EEENS5_ISC_EEE6rehashEj,__ZNSt3__26vectorI10CharmTypesNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_,__ZNSt3__26vectorI22CharmTypeSignatureUnitNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_,__ZN16FunctionAnalyzer16addTypeSignatureE18CharmTypeSignature,__ZNSt3__28ios_base16__call_callbacksENS0_5eventE,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw
,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_
,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__218__libcpp_refstringC2EPKc,__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,_abort_message,b546,b547,b548,b549,b550,b551,b552,b553,b554,b555,b556,b557,b558,b559,b560,b561,b562,b563,b564,b565,b566,b567
,b568,b569,b570,b571,b572,b573,b574,b575,b576,b577,b578,b579,b580,b581,b582,b583,b584,b585,b586,b587,b588,b589,b590,b591,b592,b593,b594,b595,b596,b597
,b598,b599,b600,b601,b602,b603,b604,b605,b606,b607,b608,b609,b610,b611,b612,b613,b614];
var FUNCTION_TABLE_viii = [b616,__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE16__generic_assignIRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSV_EJLj0ELj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchEST_SW_SY_,__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_12__assignmentINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE16__generic_assignIRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSV_EJLj1ELj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchEST_SW_SY_,__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE19__generic_constructIRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSW_EJLj0ELj0EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESU_SX_SZ_,__ZZNSt3__216__variant_detail12__visitation6__base15__make_dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_8functionIFvP6RunnerEEENS6_IFvS8_P13RunnerContextEEEEEEE19__generic_constructIRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEERKSW_EJLj1ELj1EEEEDaNS_16integer_sequenceIjJXspT1_EEEEEN12__dispatcher10__dispatchESU_SX_SZ_,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE3__5NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__19NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__21NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_,__ZNSt3__210__function6__funcIZN19PredefinedFunctionsC1EvE4__22NS_9allocatorIS3_EEFvP6RunnerP13RunnerContextEEclEOS7_OS9_,__ZNKSt3__214error_category23default_error_conditionEi,__ZNKSt3__219__iostream_category7messageEi,__ZN6Parser3lexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Runner3runENSt3__24pairINS0_6vectorI13CharmFunctionNS0_9allocatorIS3_EEEEP16FunctionAnalyzerEENS0_12basic_stringIcNS0_11char_traitsIcEENS4_IcEEEE,__ZNSt3__216allocator_traitsINS_9allocatorI13CharmFunctionEEE9__destroyIS2_EEvNS_17integral_constantIbLb1EEERS3_PT_,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_,___cxa_throw__wrapper,__ZN3FFI6runFFIENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP6Runner,__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_,__ZN6Runner18addNamespacePrefixER13CharmFunctionNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,__ZN6Runner22handleDefinedFunctionsE13CharmFunctionP13RunnerContext,__ZN19PredefinedFunctions18addBuiltinFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvP6RunnerEEE,__ZN19PredefinedFunctions18addBuiltinFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvP6RunnerP13RunnerContextEEE,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,__ZN6Runner12setReferenceE13CharmFunctionS0_,__ZN6Runner12getReferenceE13CharmFunction,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignINS_11__wrap_iterIPS1_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_,__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE6assignIPKS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_
,__ZN6Parser17analyzeDefinitionE13CharmFunction,__ZN6Parser15parseDefinitionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Parser18parseTypeSignatureENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Parser20parseDefinedFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Parser19parseNumberFunctionENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Parser12escapeStringENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE,__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b617,b618,b619,b620,b621,b622,b623,b624,b625,b626,b627,b628,b629,b630,b631,b632,b633,b634,b635
,b636,b637,b638,b639,b640];
var FUNCTION_TABLE_viiii = [b642,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZN5StackC2Ey13CharmFunction,__ZNSt3__26vectorI13CharmFunctionNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j,__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE8__appendINS_16__deque_iteratorIS1_PKS1_RS7_PKS8_iLi0EEEEEvT_SD_PNS_9enable_ifIXsr21__is_forward_iteratorISD_EE5valueEvE4typeE,__ZN19PredefinedFunctions14functionLookupENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP6RunnerP13RunnerContext,__ZN6Runner14runWithContextENSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEEP13RunnerContextNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEE,__ZNSt3__25dequeI13CharmFunctionNS_9allocatorIS1_EEE6insertENS_16__deque_iteratorIS1_PKS1_RS6_PKS7_iLi0EEEOS1_,__ZN6Runner11createStackEy13CharmFunction,__ZN3FFI13loadMutateFFIENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_,__ZN6Parser14lexAskToInlineENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb,__ZN6Parser19parseStringFunctionERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_,__ZN6Parser17parseListFunctionERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_,__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj,b643,b644,b645,b646,b647,b648,b649
,b650,b651,b652];
var FUNCTION_TABLE_viiiii = [b654,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN5Stack4swapEyy,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_,__ZN6Parser15delegateParsingERNSt3__26vectorI13CharmFunctionNS0_9allocatorIS2_EEEERNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEESC_b,b655];
var FUNCTION_TABLE_viiiiii = [b657,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b658,b659,b660,b661,b662,b663];
var FUNCTION_TABLE_viiiiiii = [b665,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj,__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b666,b667];
var FUNCTION_TABLE_viiiiiiiiii = [b669,__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b670,b671,b672];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b674,__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b675];

  return { __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_Prelude_charm_cpp: __GLOBAL__sub_I_Prelude_charm_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___divdi3: ___divdi3, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___remdi3: ___remdi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _initCapsule: _initCapsule, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _runCapsule: _runCapsule, _sbrk: _sbrk, dynCall_dii: dynCall_dii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iid: dynCall_iid, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiiiiiiiiiiii: dynCall_iiiiiiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_Prelude_charm_cpp = asm["__GLOBAL__sub_I_Prelude_charm_cpp"]; asm["__GLOBAL__sub_I_Prelude_charm_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_Prelude_charm_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____divdi3 = asm["___divdi3"]; asm["___divdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____divdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____remdi3 = asm["___remdi3"]; asm["___remdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____remdi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__initCapsule = asm["_initCapsule"]; asm["_initCapsule"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__initCapsule.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__runCapsule = asm["_runCapsule"]; asm["_runCapsule"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__runCapsule.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_Prelude_charm_cpp = Module["__GLOBAL__sub_I_Prelude_charm_cpp"] = asm["__GLOBAL__sub_I_Prelude_charm_cpp"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _initCapsule = Module["_initCapsule"] = asm["_initCapsule"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _runCapsule = Module["_runCapsule"] = asm["_runCapsule"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiiiiiiiiiiii = Module["dynCall_iiiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=charm.js.map